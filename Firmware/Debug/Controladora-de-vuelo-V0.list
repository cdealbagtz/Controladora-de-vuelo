
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a28  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08012cd8  08012cd8  00013cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013ac8  08013ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013ad0  08013ad0  00014ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013ad4  08013ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000110  24000000  08013ad8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002c34  24000110  08013be8  00015110  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24002d44  08013be8  00015d44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015110  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029235  00000000  00000000  0001513e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000533f  00000000  00000000  0003e373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f08  00000000  00000000  000436b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001822  00000000  00000000  000455c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037e36  00000000  00000000  00046de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000317e9  00000000  00000000  0007ec18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015520f  00000000  00000000  000b0401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00205610  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008574  00000000  00000000  00205654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0020dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08012cc0 	.word	0x08012cc0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08012cc0 	.word	0x08012cc0

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f006 fd98 	bl	80071cc <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f009 fdd7 	bl	800a260 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f009 fdd1 	bl	800a260 <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f006 fd81 	bl	80071cc <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24002480 	.word	0x24002480

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f006 fd68 	bl	80071cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f009 fdab 	bl	800a260 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f009 ff92 	bl	800a63c <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f006 fd54 	bl	80071cc <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24002480 	.word	0x24002480

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f006 fd29 	bl	80071cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f009 fd6c 	bl	800a260 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f009 ff54 	bl	800a63c <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f006 fd16 	bl	80071cc <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24002480 	.word	0x24002480
 800088c:	24000140 	.word	0x24000140
 8000890:	24000144 	.word	0x24000144
 8000894:	24000146 	.word	0x24000146
 8000898:	24000142 	.word	0x24000142
 800089c:	24000148 	.word	0x24000148
 80008a0:	2400014a 	.word	0x2400014a
 80008a4:	2400014c 	.word	0x2400014c
 80008a8:	2400014e 	.word	0x2400014e
 80008ac:	24000150 	.word	0x24000150
 80008b0:	24000152 	.word	0x24000152
 80008b4:	24000154 	.word	0x24000154
 80008b8:	24000156 	.word	0x24000156

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f006 fc79 	bl	80071cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f009 fcbd 	bl	800a260 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f009 fea5 	bl	800a63c <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f006 fc67 	bl	80071cc <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24002480 	.word	0x24002480
 800093c:	2400015c 	.word	0x2400015c
 8000940:	24000158 	.word	0x24000158

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000158 	.word	0x24000158
 80009bc:	24000140 	.word	0x24000140
 80009c0:	24000144 	.word	0x24000144
 80009c4:	24000146 	.word	0x24000146
 80009c8:	24000160 	.word	0x24000160

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	24000160 	.word	0x24000160
 8000c9c:	24000150 	.word	0x24000150
 8000ca0:	2400014e 	.word	0x2400014e
 8000ca4:	2400014c 	.word	0x2400014c
 8000ca8:	2400014a 	.word	0x2400014a
 8000cac:	24000148 	.word	0x24000148
 8000cb0:	24000142 	.word	0x24000142
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	24000156 	.word	0x24000156
 8000f50:	24000154 	.word	0x24000154
 8000f54:	24000152 	.word	0x24000152

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f011 fd71 	bl	8012a68 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f006 f8d6 	bl	80071cc <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	2400012c 	.word	0x2400012c
 8001058:	24000158 	.word	0x24000158

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400012c 	.word	0x2400012c
 80010c8:	24000158 	.word	0x24000158
 80010cc:	2400015c 	.word	0x2400015c

080010d0 <BNO_Read>:
BNO_bufffer_Status_e BNO_bufffer_Status;




void BNO_Read(uint8_t Address,uint8_t Size){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4];
	ReadCommand[0] = 0xAA;
 80010e0:	23aa      	movs	r3, #170	@ 0xaa
 80010e2:	733b      	strb	r3, [r7, #12]
	ReadCommand[1] = 0x01;
 80010e4:	2301      	movs	r3, #1
 80010e6:	737b      	strb	r3, [r7, #13]
	ReadCommand[2] = Address;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	73bb      	strb	r3, [r7, #14]
	ReadCommand[3] = Size;
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 80010f0:	f107 010c 	add.w	r1, r7, #12
 80010f4:	2364      	movs	r3, #100	@ 0x64
 80010f6:	2204      	movs	r2, #4
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <BNO_Read+0x38>)
 80010fa:	f00b fa4b 	bl	800c594 <HAL_UART_Transmit>
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	240027ac 	.word	0x240027ac

0800110c <BNO_Init>:

void BNO_Init(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001110:	2064      	movs	r0, #100	@ 0x64
 8001112:	f002 fabd 	bl	8003690 <HAL_Delay>
	HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8001116:	2201      	movs	r2, #1
 8001118:	4907      	ldr	r1, [pc, #28]	@ (8001138 <BNO_Init+0x2c>)
 800111a:	4808      	ldr	r0, [pc, #32]	@ (800113c <BNO_Init+0x30>)
 800111c:	f00b fac8 	bl	800c6b0 <HAL_UART_Receive_DMA>
	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2104      	movs	r1, #4
 8001124:	4806      	ldr	r0, [pc, #24]	@ (8001140 <BNO_Init+0x34>)
 8001126:	f006 f851 	bl	80071cc <HAL_GPIO_WritePin>
	BNO_Read(BNO055_CHIP_ID,1);
 800112a:	2101      	movs	r1, #1
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff ffcf 	bl	80010d0 <BNO_Read>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	24000263 	.word	0x24000263
 800113c:	240027ac 	.word	0x240027ac
 8001140:	58020c00 	.word	0x58020c00

08001144 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	switch (BNO_Rx_Status) {
 800114e:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <BNO_Receive+0xac>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2bff      	cmp	r3, #255	@ 0xff
 8001154:	d022      	beq.n	800119c <BNO_Receive+0x58>
 8001156:	2bff      	cmp	r3, #255	@ 0xff
 8001158:	dc40      	bgt.n	80011dc <BNO_Receive+0x98>
 800115a:	2bee      	cmp	r3, #238	@ 0xee
 800115c:	d017      	beq.n	800118e <BNO_Receive+0x4a>
 800115e:	2bee      	cmp	r3, #238	@ 0xee
 8001160:	dc3c      	bgt.n	80011dc <BNO_Receive+0x98>
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <BNO_Receive+0x28>
 8001166:	2bbb      	cmp	r3, #187	@ 0xbb
 8001168:	d00a      	beq.n	8001180 <BNO_Receive+0x3c>
				BNO_bufffer_Status = Ready;
				BNO_Rx_Status = AwaitingMsg;
			}
			break;
		default:
			break;
 800116a:	e037      	b.n	80011dc <BNO_Receive+0x98>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2bbb      	cmp	r3, #187	@ 0xbb
 8001170:	d002      	beq.n	8001178 <BNO_Receive+0x34>
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2bee      	cmp	r3, #238	@ 0xee
 8001176:	d133      	bne.n	80011e0 <BNO_Receive+0x9c>
 8001178:	4a1d      	ldr	r2, [pc, #116]	@ (80011f0 <BNO_Receive+0xac>)
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	7013      	strb	r3, [r2, #0]
			break;
 800117e:	e02f      	b.n	80011e0 <BNO_Receive+0x9c>
			MsgSize = Buffer;
 8001180:	4a1c      	ldr	r2, [pc, #112]	@ (80011f4 <BNO_Receive+0xb0>)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <BNO_Receive+0xac>)
 8001188:	22ff      	movs	r2, #255	@ 0xff
 800118a:	701a      	strb	r2, [r3, #0]
			break;
 800118c:	e029      	b.n	80011e2 <BNO_Receive+0x9e>
			BNO_ErrorHandler = Buffer;
 800118e:	4a1a      	ldr	r2, [pc, #104]	@ (80011f8 <BNO_Receive+0xb4>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <BNO_Receive+0xac>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
			break;
 800119a:	e022      	b.n	80011e2 <BNO_Receive+0x9e>
			if(Counter != MsgSize){
 800119c:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <BNO_Receive+0xb8>)
 800119e:	781a      	ldrb	r2, [r3, #0]
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <BNO_Receive+0xb0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d00c      	beq.n	80011c2 <BNO_Receive+0x7e>
				BNO_RxBuffer[Counter] = Buffer;
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <BNO_Receive+0xb8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4a14      	ldr	r2, [pc, #80]	@ (8001200 <BNO_Receive+0xbc>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	5453      	strb	r3, [r2, r1]
				Counter++;
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <BNO_Receive+0xb8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <BNO_Receive+0xb8>)
 80011be:	701a      	strb	r2, [r3, #0]
			break;
 80011c0:	e00f      	b.n	80011e2 <BNO_Receive+0x9e>
				Counter = 0;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <BNO_Receive+0xb8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <BNO_Receive+0xb0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
				BNO_bufffer_Status = Ready;
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <BNO_Receive+0xc0>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <BNO_Receive+0xac>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
			break;
 80011da:	e002      	b.n	80011e2 <BNO_Receive+0x9e>
			break;
 80011dc:	bf00      	nop
 80011de:	e000      	b.n	80011e2 <BNO_Receive+0x9e>
			break;
 80011e0:	bf00      	nop
	}
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	24000264 	.word	0x24000264
 80011f4:	24000267 	.word	0x24000267
 80011f8:	24000265 	.word	0x24000265
 80011fc:	24000268 	.word	0x24000268
 8001200:	24000164 	.word	0x24000164
 8001204:	24000266 	.word	0x24000266

08001208 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8001208:	b084      	sub	sp, #16
 800120a:	b590      	push	{r4, r7, lr}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	f107 001c 	add.w	r0, r7, #28
 8001216:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 800121a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <LED_blink+0x20>
 8001222:	2b01      	cmp	r3, #1
 8001224:	d010      	beq.n	8001248 <LED_blink+0x40>
 8001226:	e01f      	b.n	8001268 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8001228:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800122a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800122c:	429a      	cmp	r2, r3
 800122e:	d31f      	bcc.n	8001270 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	8c39      	ldrh	r1, [r7, #32]
 8001234:	2201      	movs	r2, #1
 8001236:	4618      	mov	r0, r3
 8001238:	f005 ffc8 	bl	80071cc <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 800123c:	2301      	movs	r3, #1
 800123e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8001246:	e013      	b.n	8001270 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8001248:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800124a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800124c:	429a      	cmp	r2, r3
 800124e:	d311      	bcc.n	8001274 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	8c39      	ldrh	r1, [r7, #32]
 8001254:	2200      	movs	r2, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f005 ffb8 	bl	80071cc <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8001266:	e005      	b.n	8001274 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 800126e:	e002      	b.n	8001276 <LED_blink+0x6e>
				break;
 8001270:	bf00      	nop
 8001272:	e000      	b.n	8001276 <LED_blink+0x6e>
				break;
 8001274:	bf00      	nop
		}

	LED.count++;
 8001276:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001278:	3301      	adds	r3, #1
 800127a:	b29b      	uxth	r3, r3
 800127c:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	461c      	mov	r4, r3
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001296:	b004      	add	sp, #16
 8001298:	4770      	bx	lr

0800129a <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 800129a:	b084      	sub	sp, #16
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b085      	sub	sp, #20
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	f107 001c 	add.w	r0, r7, #28
 80012a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 80012ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d117      	bne.n	80012e4 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 80012b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <LED_Rutine+0x28>
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d007      	beq.n	80012d0 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 80012c0:	e018      	b.n	80012f4 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	8c39      	ldrh	r1, [r7, #32]
 80012c6:	2201      	movs	r2, #1
 80012c8:	4618      	mov	r0, r3
 80012ca:	f005 ff7f 	bl	80071cc <HAL_GPIO_WritePin>
				break;
 80012ce:	e011      	b.n	80012f4 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 80012d0:	f107 001c 	add.w	r0, r7, #28
 80012d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012de:	f7ff ff93 	bl	8001208 <LED_blink>
				break;
 80012e2:	e007      	b.n	80012f4 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	8c39      	ldrh	r1, [r7, #32]
 80012e8:	2200      	movs	r2, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f005 ff6e 	bl	80071cc <HAL_GPIO_WritePin>
		LED.count = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	461c      	mov	r4, r3
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800130c:	b004      	add	sp, #16
 800130e:	4770      	bx	lr

08001310 <LED_Tasks>:

void LED_Tasks (void){
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b087      	sub	sp, #28
 8001314:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8001316:	4c24      	ldr	r4, [pc, #144]	@ (80013a8 <LED_Tasks+0x98>)
 8001318:	4638      	mov	r0, r7
 800131a:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <LED_Tasks+0x98>)
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	9200      	str	r2, [sp, #0]
 8001320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001322:	f7ff ffba 	bl	800129a <LED_Rutine>
 8001326:	463b      	mov	r3, r7
 8001328:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800132a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 800132e:	4c1e      	ldr	r4, [pc, #120]	@ (80013a8 <LED_Tasks+0x98>)
 8001330:	4638      	mov	r0, r7
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <LED_Tasks+0x98>)
 8001334:	69da      	ldr	r2, [r3, #28]
 8001336:	9200      	str	r2, [sp, #0]
 8001338:	3310      	adds	r3, #16
 800133a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800133c:	f7ff ffad 	bl	800129a <LED_Rutine>
 8001340:	3410      	adds	r4, #16
 8001342:	463b      	mov	r3, r7
 8001344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001346:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 800134a:	4c17      	ldr	r4, [pc, #92]	@ (80013a8 <LED_Tasks+0x98>)
 800134c:	4638      	mov	r0, r7
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <LED_Tasks+0x98>)
 8001350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001352:	9200      	str	r2, [sp, #0]
 8001354:	3320      	adds	r3, #32
 8001356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001358:	f7ff ff9f 	bl	800129a <LED_Rutine>
 800135c:	3420      	adds	r4, #32
 800135e:	463b      	mov	r3, r7
 8001360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8001366:	4c10      	ldr	r4, [pc, #64]	@ (80013a8 <LED_Tasks+0x98>)
 8001368:	4638      	mov	r0, r7
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <LED_Tasks+0x98>)
 800136c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800136e:	9200      	str	r2, [sp, #0]
 8001370:	3330      	adds	r3, #48	@ 0x30
 8001372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001374:	f7ff ff91 	bl	800129a <LED_Rutine>
 8001378:	3430      	adds	r4, #48	@ 0x30
 800137a:	463b      	mov	r3, r7
 800137c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8001382:	4c09      	ldr	r4, [pc, #36]	@ (80013a8 <LED_Tasks+0x98>)
 8001384:	4638      	mov	r0, r7
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <LED_Tasks+0x98>)
 8001388:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	3340      	adds	r3, #64	@ 0x40
 800138e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001390:	f7ff ff83 	bl	800129a <LED_Rutine>
 8001394:	3440      	adds	r4, #64	@ 0x40
 8001396:	463b      	mov	r3, r7
 8001398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	24000000 	.word	0x24000000

080013ac <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 80013b0:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <PWM_Assing+0xb0>)
 80013b2:	881a      	ldrh	r2, [r3, #0]
 80013b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013b8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 80013ba:	4b28      	ldr	r3, [pc, #160]	@ (800145c <PWM_Assing+0xb0>)
 80013bc:	885a      	ldrh	r2, [r3, #2]
 80013be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c2:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 80013c4:	4b25      	ldr	r3, [pc, #148]	@ (800145c <PWM_Assing+0xb0>)
 80013c6:	889a      	ldrh	r2, [r3, #4]
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <PWM_Assing+0xb4>)
 80013ca:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <PWM_Assing+0xb0>)
 80013ce:	88da      	ldrh	r2, [r3, #6]
 80013d0:	4b23      	ldr	r3, [pc, #140]	@ (8001460 <PWM_Assing+0xb4>)
 80013d2:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 80013d4:	4b21      	ldr	r3, [pc, #132]	@ (800145c <PWM_Assing+0xb0>)
 80013d6:	891a      	ldrh	r2, [r3, #8]
 80013d8:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <PWM_Assing+0xb8>)
 80013da:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <PWM_Assing+0xb0>)
 80013de:	895a      	ldrh	r2, [r3, #10]
 80013e0:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <PWM_Assing+0xb8>)
 80013e2:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <PWM_Assing+0xb0>)
 80013e6:	899a      	ldrh	r2, [r3, #12]
 80013e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <PWM_Assing+0xb8>)
 80013ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <PWM_Assing+0xb0>)
 80013ee:	89da      	ldrh	r2, [r3, #14]
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <PWM_Assing+0xb8>)
 80013f2:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <PWM_Assing+0xb0>)
 80013f6:	8a1a      	ldrh	r2, [r3, #16]
 80013f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013fc:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <PWM_Assing+0xb0>)
 8001400:	8a5a      	ldrh	r2, [r3, #18]
 8001402:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001406:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001408:	2100      	movs	r1, #0
 800140a:	4817      	ldr	r0, [pc, #92]	@ (8001468 <PWM_Assing+0xbc>)
 800140c:	f00a f8d2 	bl	800b5b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001410:	2104      	movs	r1, #4
 8001412:	4815      	ldr	r0, [pc, #84]	@ (8001468 <PWM_Assing+0xbc>)
 8001414:	f00a f8ce 	bl	800b5b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001418:	2108      	movs	r1, #8
 800141a:	4813      	ldr	r0, [pc, #76]	@ (8001468 <PWM_Assing+0xbc>)
 800141c:	f00a f8ca 	bl	800b5b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001420:	210c      	movs	r1, #12
 8001422:	4811      	ldr	r0, [pc, #68]	@ (8001468 <PWM_Assing+0xbc>)
 8001424:	f00a f8c6 	bl	800b5b4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001428:	2100      	movs	r1, #0
 800142a:	4810      	ldr	r0, [pc, #64]	@ (800146c <PWM_Assing+0xc0>)
 800142c:	f00a f8c2 	bl	800b5b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001430:	2104      	movs	r1, #4
 8001432:	480e      	ldr	r0, [pc, #56]	@ (800146c <PWM_Assing+0xc0>)
 8001434:	f00a f8be 	bl	800b5b4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001438:	2100      	movs	r1, #0
 800143a:	480d      	ldr	r0, [pc, #52]	@ (8001470 <PWM_Assing+0xc4>)
 800143c:	f00a f8ba 	bl	800b5b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001440:	2104      	movs	r1, #4
 8001442:	480b      	ldr	r0, [pc, #44]	@ (8001470 <PWM_Assing+0xc4>)
 8001444:	f00a f8b6 	bl	800b5b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001448:	2108      	movs	r1, #8
 800144a:	4809      	ldr	r0, [pc, #36]	@ (8001470 <PWM_Assing+0xc4>)
 800144c:	f00a f8b2 	bl	800b5b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001450:	210c      	movs	r1, #12
 8001452:	4807      	ldr	r0, [pc, #28]	@ (8001470 <PWM_Assing+0xc4>)
 8001454:	f00a f8ae 	bl	800b5b4 <HAL_TIM_PWM_Start>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	24000050 	.word	0x24000050
 8001460:	40000400 	.word	0x40000400
 8001464:	40000800 	.word	0x40000800
 8001468:	24002508 	.word	0x24002508
 800146c:	24002554 	.word	0x24002554
 8001470:	240025a0 	.word	0x240025a0

08001474 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 8001478:	2201      	movs	r2, #1
 800147a:	4903      	ldr	r1, [pc, #12]	@ (8001488 <SBUS_init+0x14>)
 800147c:	4803      	ldr	r0, [pc, #12]	@ (800148c <SBUS_init+0x18>)
 800147e:	f00b f917 	bl	800c6b0 <HAL_UART_Receive_DMA>

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	24000285 	.word	0x24000285
 800148c:	24002718 	.word	0x24002718

08001490 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 800149a:	4b20      	ldr	r3, [pc, #128]	@ (800151c <SBUS_Receive+0x8c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <SBUS_Receive+0x18>
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d017      	beq.n	80014d6 <SBUS_Receive+0x46>
 80014a6:	e02f      	b.n	8001508 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	d10f      	bne.n	80014ce <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80014ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <SBUS_Receive+0x90>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001524 <SBUS_Receive+0x94>)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <SBUS_Receive+0x8c>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
				RxCount++;
 80014c0:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <SBUS_Receive+0x90>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <SBUS_Receive+0x90>)
 80014ca:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 80014cc:	e021      	b.n	8001512 <SBUS_Receive+0x82>
				RxCount = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <SBUS_Receive+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
			break;
 80014d4:	e01d      	b.n	8001512 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <SBUS_Receive+0x90>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	4619      	mov	r1, r3
 80014dc:	4a11      	ldr	r2, [pc, #68]	@ (8001524 <SBUS_Receive+0x94>)
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	5453      	strb	r3, [r2, r1]
			RxCount++;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <SBUS_Receive+0x90>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <SBUS_Receive+0x90>)
 80014ec:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 80014ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <SBUS_Receive+0x90>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b18      	cmp	r3, #24
 80014f4:	d10c      	bne.n	8001510 <SBUS_Receive+0x80>
				RxCount = 0;
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <SBUS_Receive+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <SBUS_Receive+0x8c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8001502:	f000 f843 	bl	800158c <SBUS_getData>
			}
			break;
 8001506:	e003      	b.n	8001510 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8001508:	4b04      	ldr	r3, [pc, #16]	@ (800151c <SBUS_Receive+0x8c>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
			break;
 800150e:	e000      	b.n	8001512 <SBUS_Receive+0x82>
			break;
 8001510:	bf00      	nop
	}
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	24000286 	.word	0x24000286
 8001520:	24000287 	.word	0x24000287
 8001524:	2400026c 	.word	0x2400026c

08001528 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <Temp_BypassFunct+0x5c>)
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <Temp_BypassFunct+0x60>)
 8001532:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 8001534:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <Temp_BypassFunct+0x5c>)
 8001536:	885a      	ldrh	r2, [r3, #2]
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <Temp_BypassFunct+0x60>)
 800153a:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 800153c:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <Temp_BypassFunct+0x5c>)
 800153e:	889a      	ldrh	r2, [r3, #4]
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <Temp_BypassFunct+0x60>)
 8001542:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 8001544:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <Temp_BypassFunct+0x5c>)
 8001546:	88da      	ldrh	r2, [r3, #6]
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <Temp_BypassFunct+0x60>)
 800154a:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 800154c:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <Temp_BypassFunct+0x5c>)
 800154e:	891a      	ldrh	r2, [r3, #8]
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <Temp_BypassFunct+0x60>)
 8001552:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 8001554:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <Temp_BypassFunct+0x5c>)
 8001556:	895a      	ldrh	r2, [r3, #10]
 8001558:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <Temp_BypassFunct+0x60>)
 800155a:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <Temp_BypassFunct+0x5c>)
 800155e:	899a      	ldrh	r2, [r3, #12]
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <Temp_BypassFunct+0x60>)
 8001562:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 8001564:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <Temp_BypassFunct+0x5c>)
 8001566:	89da      	ldrh	r2, [r3, #14]
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <Temp_BypassFunct+0x60>)
 800156a:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <Temp_BypassFunct+0x5c>)
 800156e:	8a1a      	ldrh	r2, [r3, #16]
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <Temp_BypassFunct+0x60>)
 8001572:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <Temp_BypassFunct+0x5c>)
 8001576:	8a5a      	ldrh	r2, [r3, #18]
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <Temp_BypassFunct+0x60>)
 800157a:	825a      	strh	r2, [r3, #18]

	PWM_Assing();
 800157c:	f7ff ff16 	bl	80013ac <PWM_Assing>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	24000064 	.word	0x24000064
 8001588:	24000050 	.word	0x24000050

0800158c <SBUS_getData>:

void SBUS_getData(void){
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8001590:	4b95      	ldr	r3, [pc, #596]	@ (80017e8 <SBUS_getData+0x25c>)
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b94      	ldr	r3, [pc, #592]	@ (80017e8 <SBUS_getData+0x25c>)
 8001598:	789b      	ldrb	r3, [r3, #2]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b90      	ldr	r3, [pc, #576]	@ (80017ec <SBUS_getData+0x260>)
 80015ac:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 80015ae:	4b8e      	ldr	r3, [pc, #568]	@ (80017e8 <SBUS_getData+0x25c>)
 80015b0:	789b      	ldrb	r3, [r3, #2]
 80015b2:	08db      	lsrs	r3, r3, #3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	4b8b      	ldr	r3, [pc, #556]	@ (80017e8 <SBUS_getData+0x25c>)
 80015ba:	78db      	ldrb	r3, [r3, #3]
 80015bc:	015b      	lsls	r3, r3, #5
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b87      	ldr	r3, [pc, #540]	@ (80017ec <SBUS_getData+0x260>)
 80015ce:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 80015d0:	4b85      	ldr	r3, [pc, #532]	@ (80017e8 <SBUS_getData+0x25c>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	b21a      	sxth	r2, r3
 80015da:	4b83      	ldr	r3, [pc, #524]	@ (80017e8 <SBUS_getData+0x25c>)
 80015dc:	791b      	ldrb	r3, [r3, #4]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b80      	ldr	r3, [pc, #512]	@ (80017e8 <SBUS_getData+0x25c>)
 80015e8:	795b      	ldrb	r3, [r3, #5]
 80015ea:	029b      	lsls	r3, r3, #10
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b7c      	ldr	r3, [pc, #496]	@ (80017ec <SBUS_getData+0x260>)
 80015fc:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80015fe:	4b7a      	ldr	r3, [pc, #488]	@ (80017e8 <SBUS_getData+0x25c>)
 8001600:	795b      	ldrb	r3, [r3, #5]
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	b21a      	sxth	r2, r3
 8001608:	4b77      	ldr	r3, [pc, #476]	@ (80017e8 <SBUS_getData+0x25c>)
 800160a:	799b      	ldrb	r3, [r3, #6]
 800160c:	01db      	lsls	r3, r3, #7
 800160e:	b21b      	sxth	r3, r3
 8001610:	4313      	orrs	r3, r2
 8001612:	b21b      	sxth	r3, r3
 8001614:	b29b      	uxth	r3, r3
 8001616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b73      	ldr	r3, [pc, #460]	@ (80017ec <SBUS_getData+0x260>)
 800161e:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8001620:	4b71      	ldr	r3, [pc, #452]	@ (80017e8 <SBUS_getData+0x25c>)
 8001622:	799b      	ldrb	r3, [r3, #6]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	b2db      	uxtb	r3, r3
 8001628:	b21a      	sxth	r2, r3
 800162a:	4b6f      	ldr	r3, [pc, #444]	@ (80017e8 <SBUS_getData+0x25c>)
 800162c:	79db      	ldrb	r3, [r3, #7]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	b21b      	sxth	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	b21b      	sxth	r3, r3
 8001636:	b29b      	uxth	r3, r3
 8001638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b6b      	ldr	r3, [pc, #428]	@ (80017ec <SBUS_getData+0x260>)
 8001640:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8001642:	4b69      	ldr	r3, [pc, #420]	@ (80017e8 <SBUS_getData+0x25c>)
 8001644:	79db      	ldrb	r3, [r3, #7]
 8001646:	09db      	lsrs	r3, r3, #7
 8001648:	b2db      	uxtb	r3, r3
 800164a:	b21a      	sxth	r2, r3
 800164c:	4b66      	ldr	r3, [pc, #408]	@ (80017e8 <SBUS_getData+0x25c>)
 800164e:	7a1b      	ldrb	r3, [r3, #8]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21a      	sxth	r2, r3
 8001658:	4b63      	ldr	r3, [pc, #396]	@ (80017e8 <SBUS_getData+0x25c>)
 800165a:	7a5b      	ldrb	r3, [r3, #9]
 800165c:	025b      	lsls	r3, r3, #9
 800165e:	b21b      	sxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b21b      	sxth	r3, r3
 8001664:	b29b      	uxth	r3, r3
 8001666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b5f      	ldr	r3, [pc, #380]	@ (80017ec <SBUS_getData+0x260>)
 800166e:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8001670:	4b5d      	ldr	r3, [pc, #372]	@ (80017e8 <SBUS_getData+0x25c>)
 8001672:	7a5b      	ldrb	r3, [r3, #9]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	b2db      	uxtb	r3, r3
 8001678:	b21a      	sxth	r2, r3
 800167a:	4b5b      	ldr	r3, [pc, #364]	@ (80017e8 <SBUS_getData+0x25c>)
 800167c:	7a9b      	ldrb	r3, [r3, #10]
 800167e:	019b      	lsls	r3, r3, #6
 8001680:	b21b      	sxth	r3, r3
 8001682:	4313      	orrs	r3, r2
 8001684:	b21b      	sxth	r3, r3
 8001686:	b29b      	uxth	r3, r3
 8001688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b57      	ldr	r3, [pc, #348]	@ (80017ec <SBUS_getData+0x260>)
 8001690:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8001692:	4b55      	ldr	r3, [pc, #340]	@ (80017e8 <SBUS_getData+0x25c>)
 8001694:	7a9b      	ldrb	r3, [r3, #10]
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	b2db      	uxtb	r3, r3
 800169a:	b21a      	sxth	r2, r3
 800169c:	4b52      	ldr	r3, [pc, #328]	@ (80017e8 <SBUS_getData+0x25c>)
 800169e:	7adb      	ldrb	r3, [r3, #11]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b4e      	ldr	r3, [pc, #312]	@ (80017ec <SBUS_getData+0x260>)
 80016b2:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 80016b4:	4b4c      	ldr	r3, [pc, #304]	@ (80017e8 <SBUS_getData+0x25c>)
 80016b6:	7b1b      	ldrb	r3, [r3, #12]
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	4b4b      	ldr	r3, [pc, #300]	@ (80017e8 <SBUS_getData+0x25c>)
 80016bc:	7b5b      	ldrb	r3, [r3, #13]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b47      	ldr	r3, [pc, #284]	@ (80017ec <SBUS_getData+0x260>)
 80016d0:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 80016d2:	4b45      	ldr	r3, [pc, #276]	@ (80017e8 <SBUS_getData+0x25c>)
 80016d4:	7b5b      	ldrb	r3, [r3, #13]
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	b21a      	sxth	r2, r3
 80016dc:	4b42      	ldr	r3, [pc, #264]	@ (80017e8 <SBUS_getData+0x25c>)
 80016de:	7b9b      	ldrb	r3, [r3, #14]
 80016e0:	015b      	lsls	r3, r3, #5
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b3e      	ldr	r3, [pc, #248]	@ (80017ec <SBUS_getData+0x260>)
 80016f2:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80016f4:	4b3c      	ldr	r3, [pc, #240]	@ (80017e8 <SBUS_getData+0x25c>)
 80016f6:	7b9b      	ldrb	r3, [r3, #14]
 80016f8:	099b      	lsrs	r3, r3, #6
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	4b3a      	ldr	r3, [pc, #232]	@ (80017e8 <SBUS_getData+0x25c>)
 8001700:	7bdb      	ldrb	r3, [r3, #15]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b21b      	sxth	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b21a      	sxth	r2, r3
 800170a:	4b37      	ldr	r3, [pc, #220]	@ (80017e8 <SBUS_getData+0x25c>)
 800170c:	7c1b      	ldrb	r3, [r3, #16]
 800170e:	029b      	lsls	r3, r3, #10
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b21b      	sxth	r3, r3
 8001716:	b29b      	uxth	r3, r3
 8001718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b33      	ldr	r3, [pc, #204]	@ (80017ec <SBUS_getData+0x260>)
 8001720:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8001722:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <SBUS_getData+0x25c>)
 8001724:	7c1b      	ldrb	r3, [r3, #16]
 8001726:	085b      	lsrs	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	b21a      	sxth	r2, r3
 800172c:	4b2e      	ldr	r3, [pc, #184]	@ (80017e8 <SBUS_getData+0x25c>)
 800172e:	7c5b      	ldrb	r3, [r3, #17]
 8001730:	01db      	lsls	r3, r3, #7
 8001732:	b21b      	sxth	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b21b      	sxth	r3, r3
 8001738:	b29b      	uxth	r3, r3
 800173a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <SBUS_getData+0x260>)
 8001742:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8001744:	4b28      	ldr	r3, [pc, #160]	@ (80017e8 <SBUS_getData+0x25c>)
 8001746:	7c5b      	ldrb	r3, [r3, #17]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <SBUS_getData+0x25c>)
 8001750:	7c9b      	ldrb	r3, [r3, #18]
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	b21b      	sxth	r3, r3
 8001756:	4313      	orrs	r3, r2
 8001758:	b21b      	sxth	r3, r3
 800175a:	b29b      	uxth	r3, r3
 800175c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <SBUS_getData+0x260>)
 8001764:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8001766:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <SBUS_getData+0x25c>)
 8001768:	7c9b      	ldrb	r3, [r3, #18]
 800176a:	09db      	lsrs	r3, r3, #7
 800176c:	b2db      	uxtb	r3, r3
 800176e:	b21a      	sxth	r2, r3
 8001770:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <SBUS_getData+0x25c>)
 8001772:	7cdb      	ldrb	r3, [r3, #19]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	b21b      	sxth	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b21a      	sxth	r2, r3
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <SBUS_getData+0x25c>)
 800177e:	7d1b      	ldrb	r3, [r3, #20]
 8001780:	025b      	lsls	r3, r3, #9
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b21b      	sxth	r3, r3
 8001788:	b29b      	uxth	r3, r3
 800178a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <SBUS_getData+0x260>)
 8001792:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <SBUS_getData+0x25c>)
 8001796:	7d1b      	ldrb	r3, [r3, #20]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	b2db      	uxtb	r3, r3
 800179c:	b21a      	sxth	r2, r3
 800179e:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <SBUS_getData+0x25c>)
 80017a0:	7d5b      	ldrb	r3, [r3, #21]
 80017a2:	019b      	lsls	r3, r3, #6
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <SBUS_getData+0x260>)
 80017b4:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 80017b6:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <SBUS_getData+0x25c>)
 80017b8:	7d5b      	ldrb	r3, [r3, #21]
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	b21a      	sxth	r2, r3
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <SBUS_getData+0x25c>)
 80017c2:	7d9b      	ldrb	r3, [r3, #22]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	4313      	orrs	r3, r2
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <SBUS_getData+0x260>)
 80017d6:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <SBUS_getData+0x260>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e4:	e00a      	b.n	80017fc <SBUS_getData+0x270>
 80017e6:	bf00      	nop
 80017e8:	2400026c 	.word	0x2400026c
 80017ec:	24000064 	.word	0x24000064
 80017f0:	43b00000 	.word	0x43b00000
 80017f4:	44a80000 	.word	0x44a80000
 80017f8:	447a0000 	.word	0x447a0000
 80017fc:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80017f0 <SBUS_getData+0x264>
 8001800:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001804:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80017f4 <SBUS_getData+0x268>
 8001808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180c:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80017f8 <SBUS_getData+0x26c>
 8001810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001818:	ee17 3a90 	vmov	r3, s15
 800181c:	b29b      	uxth	r3, r3
 800181e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001822:	b29a      	uxth	r2, r3
 8001824:	4bd1      	ldr	r3, [pc, #836]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001826:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8001828:	4bd0      	ldr	r3, [pc, #832]	@ (8001b6c <SBUS_getData+0x5e0>)
 800182a:	885b      	ldrh	r3, [r3, #2]
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001834:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8001b70 <SBUS_getData+0x5e4>
 8001838:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800183c:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8001b74 <SBUS_getData+0x5e8>
 8001840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001844:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8001b78 <SBUS_getData+0x5ec>
 8001848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001850:	ee17 3a90 	vmov	r3, s15
 8001854:	b29b      	uxth	r3, r3
 8001856:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800185a:	b29a      	uxth	r2, r3
 800185c:	4bc3      	ldr	r3, [pc, #780]	@ (8001b6c <SBUS_getData+0x5e0>)
 800185e:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8001860:	4bc2      	ldr	r3, [pc, #776]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001862:	889b      	ldrh	r3, [r3, #4]
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800186c:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8001b70 <SBUS_getData+0x5e4>
 8001870:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001874:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8001b74 <SBUS_getData+0x5e8>
 8001878:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800187c:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8001b78 <SBUS_getData+0x5ec>
 8001880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001888:	ee17 3a90 	vmov	r3, s15
 800188c:	b29b      	uxth	r3, r3
 800188e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001892:	b29a      	uxth	r2, r3
 8001894:	4bb5      	ldr	r3, [pc, #724]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001896:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8001898:	4bb4      	ldr	r3, [pc, #720]	@ (8001b6c <SBUS_getData+0x5e0>)
 800189a:	88db      	ldrh	r3, [r3, #6]
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a4:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8001b70 <SBUS_getData+0x5e4>
 80018a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018ac:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8001b74 <SBUS_getData+0x5e8>
 80018b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b4:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001b78 <SBUS_getData+0x5ec>
 80018b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c0:	ee17 3a90 	vmov	r3, s15
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4ba7      	ldr	r3, [pc, #668]	@ (8001b6c <SBUS_getData+0x5e0>)
 80018ce:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80018d0:	4ba6      	ldr	r3, [pc, #664]	@ (8001b6c <SBUS_getData+0x5e0>)
 80018d2:	891b      	ldrh	r3, [r3, #8]
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018dc:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001b70 <SBUS_getData+0x5e4>
 80018e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018e4:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8001b74 <SBUS_getData+0x5e8>
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001b78 <SBUS_getData+0x5ec>
 80018f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f8:	ee17 3a90 	vmov	r3, s15
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b99      	ldr	r3, [pc, #612]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001906:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8001908:	4b98      	ldr	r3, [pc, #608]	@ (8001b6c <SBUS_getData+0x5e0>)
 800190a:	895b      	ldrh	r3, [r3, #10]
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001914:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8001b70 <SBUS_getData+0x5e4>
 8001918:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800191c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8001b74 <SBUS_getData+0x5e8>
 8001920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001924:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8001b78 <SBUS_getData+0x5ec>
 8001928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001930:	ee17 3a90 	vmov	r3, s15
 8001934:	b29b      	uxth	r3, r3
 8001936:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b8b      	ldr	r3, [pc, #556]	@ (8001b6c <SBUS_getData+0x5e0>)
 800193e:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8001940:	4b8a      	ldr	r3, [pc, #552]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001942:	899b      	ldrh	r3, [r3, #12]
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800194c:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001b70 <SBUS_getData+0x5e4>
 8001950:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001954:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001b74 <SBUS_getData+0x5e8>
 8001958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001b78 <SBUS_getData+0x5ec>
 8001960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001968:	ee17 3a90 	vmov	r3, s15
 800196c:	b29b      	uxth	r3, r3
 800196e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b7d      	ldr	r3, [pc, #500]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001976:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8001978:	4b7c      	ldr	r3, [pc, #496]	@ (8001b6c <SBUS_getData+0x5e0>)
 800197a:	89db      	ldrh	r3, [r3, #14]
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001984:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001b70 <SBUS_getData+0x5e4>
 8001988:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800198c:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001b74 <SBUS_getData+0x5e8>
 8001990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001994:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001b78 <SBUS_getData+0x5ec>
 8001998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a0:	ee17 3a90 	vmov	r3, s15
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b6f      	ldr	r3, [pc, #444]	@ (8001b6c <SBUS_getData+0x5e0>)
 80019ae:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 80019b0:	4b6e      	ldr	r3, [pc, #440]	@ (8001b6c <SBUS_getData+0x5e0>)
 80019b2:	8a1b      	ldrh	r3, [r3, #16]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019bc:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001b70 <SBUS_getData+0x5e4>
 80019c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019c4:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001b74 <SBUS_getData+0x5e8>
 80019c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019cc:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001b78 <SBUS_getData+0x5ec>
 80019d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d8:	ee17 3a90 	vmov	r3, s15
 80019dc:	b29b      	uxth	r3, r3
 80019de:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b61      	ldr	r3, [pc, #388]	@ (8001b6c <SBUS_getData+0x5e0>)
 80019e6:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80019e8:	4b60      	ldr	r3, [pc, #384]	@ (8001b6c <SBUS_getData+0x5e0>)
 80019ea:	8a5b      	ldrh	r3, [r3, #18]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001b70 <SBUS_getData+0x5e4>
 80019f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019fc:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8001b74 <SBUS_getData+0x5e8>
 8001a00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a04:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001b78 <SBUS_getData+0x5ec>
 8001a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a10:	ee17 3a90 	vmov	r3, s15
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b53      	ldr	r3, [pc, #332]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001a1e:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8001a20:	4b52      	ldr	r3, [pc, #328]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001a22:	8a9b      	ldrh	r3, [r3, #20]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a2c:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001b70 <SBUS_getData+0x5e4>
 8001a30:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a34:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001b74 <SBUS_getData+0x5e8>
 8001a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a3c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001b78 <SBUS_getData+0x5ec>
 8001a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a48:	ee17 3a90 	vmov	r3, s15
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	4b45      	ldr	r3, [pc, #276]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001a56:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8001a58:	4b44      	ldr	r3, [pc, #272]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001a5a:	8adb      	ldrh	r3, [r3, #22]
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a64:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001b70 <SBUS_getData+0x5e4>
 8001a68:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a6c:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001b74 <SBUS_getData+0x5e8>
 8001a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a74:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001b78 <SBUS_getData+0x5ec>
 8001a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a80:	ee17 3a90 	vmov	r3, s15
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	4b37      	ldr	r3, [pc, #220]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001a8e:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8001a90:	4b36      	ldr	r3, [pc, #216]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001a92:	8b1b      	ldrh	r3, [r3, #24]
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a9c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001b70 <SBUS_getData+0x5e4>
 8001aa0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001aa4:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001b74 <SBUS_getData+0x5e8>
 8001aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aac:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001b78 <SBUS_getData+0x5ec>
 8001ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab8:	ee17 3a90 	vmov	r3, s15
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b29      	ldr	r3, [pc, #164]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001ac6:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8001ac8:	4b28      	ldr	r3, [pc, #160]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001aca:	8b5b      	ldrh	r3, [r3, #26]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001b70 <SBUS_getData+0x5e4>
 8001ad8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001adc:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001b74 <SBUS_getData+0x5e8>
 8001ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001b78 <SBUS_getData+0x5ec>
 8001ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af0:	ee17 3a90 	vmov	r3, s15
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001afe:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001b02:	8b9b      	ldrh	r3, [r3, #28]
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b0c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001b70 <SBUS_getData+0x5e4>
 8001b10:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b14:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001b74 <SBUS_getData+0x5e8>
 8001b18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b1c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001b78 <SBUS_getData+0x5ec>
 8001b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b28:	ee17 3a90 	vmov	r3, s15
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001b36:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <SBUS_getData+0x5e0>)
 8001b3a:	8bdb      	ldrh	r3, [r3, #30]
 8001b3c:	ee07 3a90 	vmov	s15, r3
 8001b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b44:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001b70 <SBUS_getData+0x5e4>
 8001b48:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b4c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001b74 <SBUS_getData+0x5e8>
 8001b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b54:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001b78 <SBUS_getData+0x5ec>
 8001b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b60:	ee17 3a90 	vmov	r3, s15
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b6a:	e007      	b.n	8001b7c <SBUS_getData+0x5f0>
 8001b6c:	24000064 	.word	0x24000064
 8001b70:	43b00000 	.word	0x43b00000
 8001b74:	44a80000 	.word	0x44a80000
 8001b78:	447a0000 	.word	0x447a0000
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	4b28      	ldr	r3, [pc, #160]	@ (8001c20 <SBUS_getData+0x694>)
 8001b80:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.
	if(SBUS_UART_Rx[23]>=8){
 8001b82:	4b28      	ldr	r3, [pc, #160]	@ (8001c24 <SBUS_getData+0x698>)
 8001b84:	7ddb      	ldrb	r3, [r3, #23]
 8001b86:	2b07      	cmp	r3, #7
 8001b88:	d90a      	bls.n	8001ba0 <SBUS_getData+0x614>
		SBUS_UART_Rx[23]-=8;
 8001b8a:	4b26      	ldr	r3, [pc, #152]	@ (8001c24 <SBUS_getData+0x698>)
 8001b8c:	7ddb      	ldrb	r3, [r3, #23]
 8001b8e:	3b08      	subs	r3, #8
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4b24      	ldr	r3, [pc, #144]	@ (8001c24 <SBUS_getData+0x698>)
 8001b94:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8001b96:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <SBUS_getData+0x694>)
 8001b98:	2235      	movs	r2, #53	@ 0x35
 8001b9a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001b9e:	e003      	b.n	8001ba8 <SBUS_getData+0x61c>
	}else Radio_input.fail_safe= Ok;
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <SBUS_getData+0x694>)
 8001ba2:	22aa      	movs	r2, #170	@ 0xaa
 8001ba4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=4){
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <SBUS_getData+0x698>)
 8001baa:	7ddb      	ldrb	r3, [r3, #23]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d90a      	bls.n	8001bc6 <SBUS_getData+0x63a>
		SBUS_UART_Rx[23]-=4;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <SBUS_getData+0x698>)
 8001bb2:	7ddb      	ldrb	r3, [r3, #23]
 8001bb4:	3b04      	subs	r3, #4
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c24 <SBUS_getData+0x698>)
 8001bba:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <SBUS_getData+0x694>)
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001bc4:	e003      	b.n	8001bce <SBUS_getData+0x642>
	}else Radio_input.pkg_lost=Ok;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <SBUS_getData+0x694>)
 8001bc8:	22aa      	movs	r2, #170	@ 0xaa
 8001bca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]>=2){
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <SBUS_getData+0x698>)
 8001bd0:	7ddb      	ldrb	r3, [r3, #23]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d90a      	bls.n	8001bec <SBUS_getData+0x660>
		SBUS_UART_Rx[23]-=2;
 8001bd6:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <SBUS_getData+0x698>)
 8001bd8:	7ddb      	ldrb	r3, [r3, #23]
 8001bda:	3b02      	subs	r3, #2
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <SBUS_getData+0x698>)
 8001be0:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8001be2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <SBUS_getData+0x694>)
 8001be4:	22ff      	movs	r2, #255	@ 0xff
 8001be6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001bea:	e003      	b.n	8001bf4 <SBUS_getData+0x668>
	}else Radio_input.Interruptor_2=OFF;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <SBUS_getData+0x694>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	if(SBUS_UART_Rx[23]){
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <SBUS_getData+0x698>)
 8001bf6:	7ddb      	ldrb	r3, [r3, #23]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <SBUS_getData+0x67a>
		Radio_input.Interruptor_1=ON;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <SBUS_getData+0x694>)
 8001bfe:	22ff      	movs	r2, #255	@ 0xff
 8001c00:	f883 2020 	strb.w	r2, [r3, #32]
 8001c04:	e003      	b.n	8001c0e <SBUS_getData+0x682>
	}else Radio_input.Interruptor_1=OFF;
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <SBUS_getData+0x694>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]


	Radio_input.Uart_Counter = 0;
 8001c0e:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <SBUS_getData+0x694>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	Temp_BypassFunct();
 8001c16:	f7ff fc87 	bl	8001528 <Temp_BypassFunct>

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	24000064 	.word	0x24000064
 8001c24:	2400026c 	.word	0x2400026c

08001c28 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <SBUS_IntegrityVerification+0x44>)
 8001c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c32:	2bff      	cmp	r3, #255	@ 0xff
 8001c34:	d00c      	beq.n	8001c50 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <SBUS_IntegrityVerification+0x44>)
 8001c38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <SBUS_IntegrityVerification+0x44>)
 8001c42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		Radio_input.uart_error = Ok;
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <SBUS_IntegrityVerification+0x44>)
 8001c48:	22aa      	movs	r2, #170	@ 0xaa
 8001c4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8001c4e:	e007      	b.n	8001c60 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <SBUS_IntegrityVerification+0x44>)
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		Radio_input.fail_safe = FailSafe;
 8001c58:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <SBUS_IntegrityVerification+0x44>)
 8001c5a:	2235      	movs	r2, #53	@ 0x35
 8001c5c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	24000064 	.word	0x24000064

08001c70 <SD_init>:
UINT br, bw;  // File read/write count

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void SD_init(void){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 8001c74:	2201      	movs	r2, #1
 8001c76:	4910      	ldr	r1, [pc, #64]	@ (8001cb8 <SD_init+0x48>)
 8001c78:	4810      	ldr	r0, [pc, #64]	@ (8001cbc <SD_init+0x4c>)
 8001c7a:	f00f fc8f 	bl	801159c <f_mount>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <SD_init+0x50>)
 8001c84:	701a      	strb	r2, [r3, #0]
	  //Get_NewDir();
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001c86:	2213      	movs	r2, #19
 8001c88:	490e      	ldr	r1, [pc, #56]	@ (8001cc4 <SD_init+0x54>)
 8001c8a:	480f      	ldr	r0, [pc, #60]	@ (8001cc8 <SD_init+0x58>)
 8001c8c:	f00f fccc 	bl	8011628 <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 8001c90:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <SD_init+0x58>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4619      	mov	r1, r3
 8001c96:	480c      	ldr	r0, [pc, #48]	@ (8001cc8 <SD_init+0x58>)
 8001c98:	f010 f8ca 	bl	8011e30 <f_lseek>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <SD_init+0x50>)
 8001ca2:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,Pitch,Roll,Yaw,Alt,Pressure,Temp\n");
 8001ca4:	4909      	ldr	r1, [pc, #36]	@ (8001ccc <SD_init+0x5c>)
 8001ca6:	4808      	ldr	r0, [pc, #32]	@ (8001cc8 <SD_init+0x58>)
 8001ca8:	f010 fb5e 	bl	8012368 <f_printf>
	  f_close(&fil);
 8001cac:	4806      	ldr	r0, [pc, #24]	@ (8001cc8 <SD_init+0x58>)
 8001cae:	f010 f895 	bl	8011ddc <f_close>

	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
	  }
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	08012cd8 	.word	0x08012cd8
 8001cbc:	24000288 	.word	0x24000288
 8001cc0:	240022f4 	.word	0x240022f4
 8001cc4:	2400008c 	.word	0x2400008c
 8001cc8:	240012c4 	.word	0x240012c4
 8001ccc:	08012cdc 	.word	0x08012cdc

08001cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cd6:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <MX_DMA_Init+0x4c>)
 8001cd8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001cdc:	4a0f      	ldr	r2, [pc, #60]	@ (8001d1c <MX_DMA_Init+0x4c>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <MX_DMA_Init+0x4c>)
 8001ce8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	200b      	movs	r0, #11
 8001cfa:	f001 fdc8 	bl	800388e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001cfe:	200b      	movs	r0, #11
 8001d00:	f001 fddf 	bl	80038c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	200c      	movs	r0, #12
 8001d0a:	f001 fdc0 	bl	800388e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d0e:	200c      	movs	r0, #12
 8001d10:	f001 fdd7 	bl	80038c2 <HAL_NVIC_EnableIRQ>

}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	58024400 	.word	0x58024400

08001d20 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001d24:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d26:	4a2f      	ldr	r2, [pc, #188]	@ (8001de4 <MX_FDCAN1_Init+0xc4>)
 8001d28:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001d30:	4b2b      	ldr	r3, [pc, #172]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001d36:	4b2a      	ldr	r3, [pc, #168]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001d3c:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001d42:	4b27      	ldr	r3, [pc, #156]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001d48:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001d4e:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001d54:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d56:	2202      	movs	r2, #2
 8001d58:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001d60:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001d66:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001d72:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001d78:	4b19      	ldr	r3, [pc, #100]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001d7e:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001d84:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d92:	2204      	movs	r2, #4
 8001d94:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001d96:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001d9c:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001d9e:	2204      	movs	r2, #4
 8001da0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001da2:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001da8:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001daa:	2204      	movs	r2, #4
 8001dac:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001dc8:	2204      	movs	r2, #4
 8001dca:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001dcc:	4804      	ldr	r0, [pc, #16]	@ (8001de0 <MX_FDCAN1_Init+0xc0>)
 8001dce:	f004 fce9 	bl	80067a4 <HAL_FDCAN_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001dd8:	f000 fb2e 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	240022f8 	.word	0x240022f8
 8001de4:	4000a000 	.word	0x4000a000

08001de8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0ba      	sub	sp, #232	@ 0xe8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	22c0      	movs	r2, #192	@ 0xc0
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f010 fded 	bl	80129e8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed0 <HAL_FDCAN_MspInit+0xe8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d157      	bne.n	8001ec8 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001e18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001e24:	2304      	movs	r3, #4
 8001e26:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e34:	2302      	movs	r3, #2
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001e38:	23c0      	movs	r3, #192	@ 0xc0
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001e44:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4618      	mov	r0, r3
 8001e52:	f006 fb01 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001e5c:	f000 faec 	bl	8002438 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <HAL_FDCAN_MspInit+0xec>)
 8001e62:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001e66:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed4 <HAL_FDCAN_MspInit+0xec>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001e70:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <HAL_FDCAN_MspInit+0xec>)
 8001e72:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_FDCAN_MspInit+0xec>)
 8001e80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001e84:	4a13      	ldr	r2, [pc, #76]	@ (8001ed4 <HAL_FDCAN_MspInit+0xec>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_FDCAN_MspInit+0xec>)
 8001e90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e9c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001eb6:	2309      	movs	r3, #9
 8001eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	@ (8001ed8 <HAL_FDCAN_MspInit+0xf0>)
 8001ec4:	f004 ffd2 	bl	8006e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001ec8:	bf00      	nop
 8001eca:	37e8      	adds	r7, #232	@ 0xe8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	4000a000 	.word	0x4000a000
 8001ed4:	58024400 	.word	0x58024400
 8001ed8:	58020000 	.word	0x58020000

08001edc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800202c <MX_GPIO_Init+0x150>)
 8001ef4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800202c <MX_GPIO_Init+0x150>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f02:	4b4a      	ldr	r3, [pc, #296]	@ (800202c <MX_GPIO_Init+0x150>)
 8001f04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b46      	ldr	r3, [pc, #280]	@ (800202c <MX_GPIO_Init+0x150>)
 8001f12:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f16:	4a45      	ldr	r2, [pc, #276]	@ (800202c <MX_GPIO_Init+0x150>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f20:	4b42      	ldr	r3, [pc, #264]	@ (800202c <MX_GPIO_Init+0x150>)
 8001f22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800202c <MX_GPIO_Init+0x150>)
 8001f30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f34:	4a3d      	ldr	r2, [pc, #244]	@ (800202c <MX_GPIO_Init+0x150>)
 8001f36:	f043 0302 	orr.w	r3, r3, #2
 8001f3a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800202c <MX_GPIO_Init+0x150>)
 8001f40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4c:	4b37      	ldr	r3, [pc, #220]	@ (800202c <MX_GPIO_Init+0x150>)
 8001f4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f52:	4a36      	ldr	r2, [pc, #216]	@ (800202c <MX_GPIO_Init+0x150>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f5c:	4b33      	ldr	r3, [pc, #204]	@ (800202c <MX_GPIO_Init+0x150>)
 8001f5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001f70:	482f      	ldr	r0, [pc, #188]	@ (8002030 <MX_GPIO_Init+0x154>)
 8001f72:	f005 f92b 	bl	80071cc <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2110      	movs	r1, #16
 8001f7a:	482e      	ldr	r0, [pc, #184]	@ (8002034 <MX_GPIO_Init+0x158>)
 8001f7c:	f005 f926 	bl	80071cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001f86:	482c      	ldr	r0, [pc, #176]	@ (8002038 <MX_GPIO_Init+0x15c>)
 8001f88:	f005 f920 	bl	80071cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2104      	movs	r1, #4
 8001f90:	482a      	ldr	r0, [pc, #168]	@ (800203c <MX_GPIO_Init+0x160>)
 8001f92:	f005 f91b 	bl	80071cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001f96:	f242 030f 	movw	r3, #8207	@ 0x200f
 8001f9a:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	4820      	ldr	r0, [pc, #128]	@ (8002030 <MX_GPIO_Init+0x154>)
 8001fb0:	f004 ff5c 	bl	8006e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	481a      	ldr	r0, [pc, #104]	@ (8002034 <MX_GPIO_Init+0x158>)
 8001fcc:	f004 ff4e 	bl	8006e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8001fd0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4813      	ldr	r0, [pc, #76]	@ (8002038 <MX_GPIO_Init+0x15c>)
 8001fea:	f004 ff3f 	bl	8006e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	480b      	ldr	r0, [pc, #44]	@ (8002030 <MX_GPIO_Init+0x154>)
 8002004:	f004 ff32 	bl	8006e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8002008:	2304      	movs	r3, #4
 800200a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800200c:	2311      	movs	r3, #17
 800200e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4619      	mov	r1, r3
 800201e:	4807      	ldr	r0, [pc, #28]	@ (800203c <MX_GPIO_Init+0x160>)
 8002020:	f004 ff24 	bl	8006e6c <HAL_GPIO_Init>

}
 8002024:	bf00      	nop
 8002026:	3728      	adds	r7, #40	@ 0x28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	58024400 	.word	0x58024400
 8002030:	58020800 	.word	0x58020800
 8002034:	58020000 	.word	0x58020000
 8002038:	58020400 	.word	0x58020400
 800203c:	58020c00 	.word	0x58020c00

08002040 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002044:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <MX_I2C3_Init+0x74>)
 8002046:	4a1c      	ldr	r2, [pc, #112]	@ (80020b8 <MX_I2C3_Init+0x78>)
 8002048:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 800204a:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <MX_I2C3_Init+0x74>)
 800204c:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <MX_I2C3_Init+0x7c>)
 800204e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002050:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <MX_I2C3_Init+0x74>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002056:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <MX_I2C3_Init+0x74>)
 8002058:	2201      	movs	r2, #1
 800205a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800205c:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <MX_I2C3_Init+0x74>)
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002062:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <MX_I2C3_Init+0x74>)
 8002064:	2200      	movs	r2, #0
 8002066:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <MX_I2C3_Init+0x74>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800206e:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <MX_I2C3_Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002074:	4b0f      	ldr	r3, [pc, #60]	@ (80020b4 <MX_I2C3_Init+0x74>)
 8002076:	2200      	movs	r2, #0
 8002078:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800207a:	480e      	ldr	r0, [pc, #56]	@ (80020b4 <MX_I2C3_Init+0x74>)
 800207c:	f005 f8c0 	bl	8007200 <HAL_I2C_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002086:	f000 f9d7 	bl	8002438 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800208a:	2100      	movs	r1, #0
 800208c:	4809      	ldr	r0, [pc, #36]	@ (80020b4 <MX_I2C3_Init+0x74>)
 800208e:	f005 f953 	bl	8007338 <HAL_I2CEx_ConfigAnalogFilter>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002098:	f000 f9ce 	bl	8002438 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800209c:	2100      	movs	r1, #0
 800209e:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <MX_I2C3_Init+0x74>)
 80020a0:	f005 f995 	bl	80073ce <HAL_I2CEx_ConfigDigitalFilter>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80020aa:	f000 f9c5 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	24002398 	.word	0x24002398
 80020b8:	40005c00 	.word	0x40005c00
 80020bc:	20b0ccff 	.word	0x20b0ccff

080020c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b0bc      	sub	sp, #240	@ 0xf0
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d8:	f107 0318 	add.w	r3, r7, #24
 80020dc:	22c0      	movs	r2, #192	@ 0xc0
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f010 fc81 	bl	80129e8 <memset>
  if(i2cHandle->Instance==I2C3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a39      	ldr	r2, [pc, #228]	@ (80021d0 <HAL_I2C_MspInit+0x110>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d16b      	bne.n	80021c8 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80020f0:	f04f 0208 	mov.w	r2, #8
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002102:	f107 0318 	add.w	r3, r7, #24
 8002106:	4618      	mov	r0, r3
 8002108:	f006 f9a6 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002112:	f000 f991 	bl	8002438 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	4b2f      	ldr	r3, [pc, #188]	@ (80021d4 <HAL_I2C_MspInit+0x114>)
 8002118:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800211c:	4a2d      	ldr	r2, [pc, #180]	@ (80021d4 <HAL_I2C_MspInit+0x114>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002126:	4b2b      	ldr	r3, [pc, #172]	@ (80021d4 <HAL_I2C_MspInit+0x114>)
 8002128:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	4b27      	ldr	r3, [pc, #156]	@ (80021d4 <HAL_I2C_MspInit+0x114>)
 8002136:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800213a:	4a26      	ldr	r2, [pc, #152]	@ (80021d4 <HAL_I2C_MspInit+0x114>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002144:	4b23      	ldr	r3, [pc, #140]	@ (80021d4 <HAL_I2C_MspInit+0x114>)
 8002146:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002152:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002156:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800215a:	2312      	movs	r3, #18
 800215c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800216c:	2304      	movs	r3, #4
 800216e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002172:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002176:	4619      	mov	r1, r3
 8002178:	4817      	ldr	r0, [pc, #92]	@ (80021d8 <HAL_I2C_MspInit+0x118>)
 800217a:	f004 fe77 	bl	8006e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800217e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002182:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002186:	2312      	movs	r3, #18
 8002188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002198:	2304      	movs	r3, #4
 800219a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021a2:	4619      	mov	r1, r3
 80021a4:	480d      	ldr	r0, [pc, #52]	@ (80021dc <HAL_I2C_MspInit+0x11c>)
 80021a6:	f004 fe61 	bl	8006e6c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021aa:	4b0a      	ldr	r3, [pc, #40]	@ (80021d4 <HAL_I2C_MspInit+0x114>)
 80021ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80021b0:	4a08      	ldr	r2, [pc, #32]	@ (80021d4 <HAL_I2C_MspInit+0x114>)
 80021b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021b6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_I2C_MspInit+0x114>)
 80021bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80021c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80021c8:	bf00      	nop
 80021ca:	37f0      	adds	r7, #240	@ 0xf0
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40005c00 	.word	0x40005c00
 80021d4:	58024400 	.word	0x58024400
 80021d8:	58020800 	.word	0x58020800
 80021dc:	58020000 	.word	0x58020000

080021e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80021e4:	f000 f8fc 	bl	80023e0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e8:	f001 f9c0 	bl	800356c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ec:	f000 f830 	bl	8002250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f0:	f7ff fe74 	bl	8001edc <MX_GPIO_Init>
  MX_DMA_Init();
 80021f4:	f7ff fd6c 	bl	8001cd0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80021f8:	f7ff fd92 	bl	8001d20 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 80021fc:	f7ff ff20 	bl	8002040 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002200:	f000 f920 	bl	8002444 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002204:	f000 f974 	bl	80024f0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002208:	f000 fb8c 	bl	8002924 <MX_TIM2_Init>
  MX_TIM3_Init();
 800220c:	f000 fc06 	bl	8002a1c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002210:	f000 fc6a 	bl	8002ae8 <MX_TIM4_Init>
  MX_UART4_Init();
 8002214:	f000 fe7a 	bl	8002f0c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002218:	f000 fec4 	bl	8002fa4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800221c:	f000 ff5e 	bl	80030dc <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8002220:	f000 fd18 	bl	8002c54 <MX_TIM13_Init>
  MX_FATFS_Init();
 8002224:	f00c fa3e 	bl	800e6a4 <MX_FATFS_Init>
  MX_TIM6_Init();
 8002228:	f000 fcda 	bl	8002be0 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800222c:	f000 ff0a 	bl	8003044 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8002230:	f7fe feee 	bl	8001010 <BMP280_init>
  SD_init();
 8002234:	f7ff fd1c 	bl	8001c70 <SD_init>
  SBUS_init();
 8002238:	f7ff f91c 	bl	8001474 <SBUS_init>
  BNO_Init();
 800223c:	f7fe ff66 	bl	800110c <BNO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_calculate();
 8002240:	f7fe ff0c 	bl	800105c <BMP280_calculate>
	  HAL_Delay(50);
 8002244:	2032      	movs	r0, #50	@ 0x32
 8002246:	f001 fa23 	bl	8003690 <HAL_Delay>
	  BMP280_calculate();
 800224a:	bf00      	nop
 800224c:	e7f8      	b.n	8002240 <main+0x60>
	...

08002250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b09c      	sub	sp, #112	@ 0x70
 8002254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800225a:	224c      	movs	r2, #76	@ 0x4c
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f010 fbc2 	bl	80129e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	2220      	movs	r2, #32
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f010 fbbc 	bl	80129e8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002270:	4b30      	ldr	r3, [pc, #192]	@ (8002334 <SystemClock_Config+0xe4>)
 8002272:	f04f 32ff 	mov.w	r2, #4294967295
 8002276:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800227a:	2002      	movs	r0, #2
 800227c:	f005 f8f4 	bl	8007468 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002280:	2300      	movs	r3, #0
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4b2c      	ldr	r3, [pc, #176]	@ (8002338 <SystemClock_Config+0xe8>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	4a2b      	ldr	r2, [pc, #172]	@ (8002338 <SystemClock_Config+0xe8>)
 800228a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800228e:	6193      	str	r3, [r2, #24]
 8002290:	4b29      	ldr	r3, [pc, #164]	@ (8002338 <SystemClock_Config+0xe8>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800229c:	bf00      	nop
 800229e:	4b26      	ldr	r3, [pc, #152]	@ (8002338 <SystemClock_Config+0xe8>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022aa:	d1f8      	bne.n	800229e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022ac:	2302      	movs	r3, #2
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80022b0:	2301      	movs	r3, #1
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80022b4:	2340      	movs	r3, #64	@ 0x40
 80022b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b8:	2302      	movs	r3, #2
 80022ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022bc:	2300      	movs	r3, #0
 80022be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022c0:	2304      	movs	r3, #4
 80022c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80022c4:	2323      	movs	r3, #35	@ 0x23
 80022c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80022c8:	2302      	movs	r3, #2
 80022ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022cc:	2302      	movs	r3, #2
 80022ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022d0:	2302      	movs	r3, #2
 80022d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80022d4:	230c      	movs	r3, #12
 80022d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80022d8:	2300      	movs	r3, #0
 80022da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022e4:	4618      	mov	r0, r3
 80022e6:	f005 f8f9 	bl	80074dc <HAL_RCC_OscConfig>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80022f0:	f000 f8a2 	bl	8002438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f4:	233f      	movs	r3, #63	@ 0x3f
 80022f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f8:	2303      	movs	r3, #3
 80022fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002304:	2340      	movs	r3, #64	@ 0x40
 8002306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002308:	2340      	movs	r3, #64	@ 0x40
 800230a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800230c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002310:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002312:	2340      	movs	r3, #64	@ 0x40
 8002314:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2106      	movs	r1, #6
 800231a:	4618      	mov	r0, r3
 800231c:	f005 fd10 	bl	8007d40 <HAL_RCC_ClockConfig>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002326:	f000 f887 	bl	8002438 <Error_Handler>
  }
}
 800232a:	bf00      	nop
 800232c:	3770      	adds	r7, #112	@ 0x70
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	58024400 	.word	0x58024400
 8002338:	58024800 	.word	0x58024800

0800233c <HAL_UART_RxCpltCallback>:

uint64_t TimeOn_Counter = 0x00;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a10      	ldr	r2, [pc, #64]	@ (800238c <HAL_UART_RxCpltCallback+0x50>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10a      	bne.n	8002364 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 800234e:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <HAL_UART_RxCpltCallback+0x54>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f89c 	bl	8001490 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 8002358:	2201      	movs	r2, #1
 800235a:	490d      	ldr	r1, [pc, #52]	@ (8002390 <HAL_UART_RxCpltCallback+0x54>)
 800235c:	480d      	ldr	r0, [pc, #52]	@ (8002394 <HAL_UART_RxCpltCallback+0x58>)
 800235e:	f00a f9a7 	bl	800c6b0 <HAL_UART_Receive_DMA>
	}
	else if (huart -> Instance == USART3){
		BNO_Receive(BNO_BufferByte);
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
	}
}
 8002362:	e00e      	b.n	8002382 <HAL_UART_RxCpltCallback+0x46>
	else if (huart -> Instance == USART3){
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0b      	ldr	r2, [pc, #44]	@ (8002398 <HAL_UART_RxCpltCallback+0x5c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d109      	bne.n	8002382 <HAL_UART_RxCpltCallback+0x46>
		BNO_Receive(BNO_BufferByte);
 800236e:	4b0b      	ldr	r3, [pc, #44]	@ (800239c <HAL_UART_RxCpltCallback+0x60>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fee6 	bl	8001144 <BNO_Receive>
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002378:	2201      	movs	r2, #1
 800237a:	4908      	ldr	r1, [pc, #32]	@ (800239c <HAL_UART_RxCpltCallback+0x60>)
 800237c:	4808      	ldr	r0, [pc, #32]	@ (80023a0 <HAL_UART_RxCpltCallback+0x64>)
 800237e:	f00a f997 	bl	800c6b0 <HAL_UART_Receive_DMA>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40011000 	.word	0x40011000
 8002390:	24000285 	.word	0x24000285
 8002394:	24002718 	.word	0x24002718
 8002398:	40004800 	.word	0x40004800
 800239c:	24000263 	.word	0x24000263
 80023a0:	240027ac 	.word	0x240027ac

080023a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80023a4:	b5b0      	push	{r4, r5, r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a09      	ldr	r2, [pc, #36]	@ (80023d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d10c      	bne.n	80023d0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		TimeOn_Counter++;
 80023b6:	4b09      	ldr	r3, [pc, #36]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	1c54      	adds	r4, r2, #1
 80023be:	f143 0500 	adc.w	r5, r3, #0
 80023c2:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80023c4:	e9c3 4500 	strd	r4, r5, [r3]
		LED_Tasks();
 80023c8:	f7fe ffa2 	bl	8001310 <LED_Tasks>
		SBUS_IntegrityVerification();
 80023cc:	f7ff fc2c 	bl	8001c28 <SBUS_IntegrityVerification>
	}
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bdb0      	pop	{r4, r5, r7, pc}
 80023d8:	40001000 	.word	0x40001000
 80023dc:	240023f0 	.word	0x240023f0

080023e0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80023e6:	463b      	mov	r3, r7
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80023f2:	f001 fa81 	bl	80038f8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80023f6:	2301      	movs	r3, #1
 80023f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002402:	231f      	movs	r3, #31
 8002404:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002406:	2387      	movs	r3, #135	@ 0x87
 8002408:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800240a:	2300      	movs	r3, #0
 800240c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800240e:	2300      	movs	r3, #0
 8002410:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002412:	2301      	movs	r3, #1
 8002414:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002416:	2301      	movs	r3, #1
 8002418:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002422:	463b      	mov	r3, r7
 8002424:	4618      	mov	r0, r3
 8002426:	f001 fa9f 	bl	8003968 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800242a:	2004      	movs	r0, #4
 800242c:	f001 fa7c 	bl	8003928 <HAL_MPU_Enable>

}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800243c:	b672      	cpsid	i
}
 800243e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <Error_Handler+0x8>

08002444 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002448:	4b27      	ldr	r3, [pc, #156]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 800244a:	4a28      	ldr	r2, [pc, #160]	@ (80024ec <MX_SPI1_Init+0xa8>)
 800244c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800244e:	4b26      	ldr	r3, [pc, #152]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 8002450:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002454:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002456:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800245c:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 800245e:	2207      	movs	r2, #7
 8002460:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002462:	4b21      	ldr	r3, [pc, #132]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002468:	4b1f      	ldr	r3, [pc, #124]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 800246a:	2200      	movs	r2, #0
 800246c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800246e:	4b1e      	ldr	r3, [pc, #120]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 8002470:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002474:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002476:	4b1c      	ldr	r3, [pc, #112]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 8002478:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 800247c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800247e:	4b1a      	ldr	r3, [pc, #104]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 8002480:	2200      	movs	r2, #0
 8002482:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002484:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800248a:	4b17      	ldr	r3, [pc, #92]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 800248c:	2200      	movs	r2, #0
 800248e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002490:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 8002492:	2200      	movs	r2, #0
 8002494:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002496:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 8002498:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80024a4:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024aa:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024b0:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024b6:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 80024be:	2200      	movs	r2, #0
 80024c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024c2:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024c8:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024ce:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024d4:	4804      	ldr	r0, [pc, #16]	@ (80024e8 <MX_SPI1_Init+0xa4>)
 80024d6:	f007 fd9f 	bl	800a018 <HAL_SPI_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80024e0:	f7ff ffaa 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	240023f8 	.word	0x240023f8
 80024ec:	40013000 	.word	0x40013000

080024f0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80024f4:	4b27      	ldr	r3, [pc, #156]	@ (8002594 <MX_SPI2_Init+0xa4>)
 80024f6:	4a28      	ldr	r2, [pc, #160]	@ (8002598 <MX_SPI2_Init+0xa8>)
 80024f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024fa:	4b26      	ldr	r3, [pc, #152]	@ (8002594 <MX_SPI2_Init+0xa4>)
 80024fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002500:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002502:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002508:	4b22      	ldr	r3, [pc, #136]	@ (8002594 <MX_SPI2_Init+0xa4>)
 800250a:	2207      	movs	r2, #7
 800250c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800250e:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002516:	2200      	movs	r2, #0
 8002518:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800251a:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <MX_SPI2_Init+0xa4>)
 800251c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002520:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002522:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002524:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002528:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800252a:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <MX_SPI2_Init+0xa4>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002530:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002532:	2200      	movs	r2, #0
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002536:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002538:	2200      	movs	r2, #0
 800253a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800253c:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <MX_SPI2_Init+0xa4>)
 800253e:	2200      	movs	r2, #0
 8002540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002542:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002544:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002548:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800254a:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <MX_SPI2_Init+0xa4>)
 800254c:	2200      	movs	r2, #0
 800254e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002550:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002552:	2200      	movs	r2, #0
 8002554:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002556:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002558:	2200      	movs	r2, #0
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800255c:	4b0d      	ldr	r3, [pc, #52]	@ (8002594 <MX_SPI2_Init+0xa4>)
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002564:	2200      	movs	r2, #0
 8002566:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <MX_SPI2_Init+0xa4>)
 800256a:	2200      	movs	r2, #0
 800256c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800256e:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002570:	2200      	movs	r2, #0
 8002572:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002574:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002576:	2200      	movs	r2, #0
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <MX_SPI2_Init+0xa4>)
 800257c:	2200      	movs	r2, #0
 800257e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002580:	4804      	ldr	r0, [pc, #16]	@ (8002594 <MX_SPI2_Init+0xa4>)
 8002582:	f007 fd49 	bl	800a018 <HAL_SPI_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800258c:	f7ff ff54 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	24002480 	.word	0x24002480
 8002598:	40003800 	.word	0x40003800

0800259c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0bc      	sub	sp, #240	@ 0xf0
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b4:	f107 0318 	add.w	r3, r7, #24
 80025b8:	22c0      	movs	r2, #192	@ 0xc0
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f010 fa13 	bl	80129e8 <memset>
  if(spiHandle->Instance==SPI1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a4c      	ldr	r2, [pc, #304]	@ (80026f8 <HAL_SPI_MspInit+0x15c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d145      	bne.n	8002658 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80025cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025d8:	2300      	movs	r3, #0
 80025da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025dc:	f107 0318 	add.w	r3, r7, #24
 80025e0:	4618      	mov	r0, r3
 80025e2:	f005 ff39 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80025ec:	f7ff ff24 	bl	8002438 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025f0:	4b42      	ldr	r3, [pc, #264]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 80025f2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80025f6:	4a41      	ldr	r2, [pc, #260]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 80025f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025fc:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002600:	4b3e      	ldr	r3, [pc, #248]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 8002602:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b3b      	ldr	r3, [pc, #236]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 8002610:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002614:	4a39      	ldr	r2, [pc, #228]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800261e:	4b37      	ldr	r3, [pc, #220]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 8002620:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800262c:	23e0      	movs	r3, #224	@ 0xe0
 800262e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002644:	2305      	movs	r3, #5
 8002646:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800264e:	4619      	mov	r1, r3
 8002650:	482b      	ldr	r0, [pc, #172]	@ (8002700 <HAL_SPI_MspInit+0x164>)
 8002652:	f004 fc0b 	bl	8006e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002656:	e04a      	b.n	80026ee <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a29      	ldr	r2, [pc, #164]	@ (8002704 <HAL_SPI_MspInit+0x168>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d145      	bne.n	80026ee <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002662:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800266e:	2300      	movs	r3, #0
 8002670:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002672:	f107 0318 	add.w	r3, r7, #24
 8002676:	4618      	mov	r0, r3
 8002678:	f005 feee 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002682:	f7ff fed9 	bl	8002438 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002686:	4b1d      	ldr	r3, [pc, #116]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 8002688:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800268c:	4a1b      	ldr	r2, [pc, #108]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 800268e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002692:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002696:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 8002698:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800269c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a4:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 80026a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026aa:	4a14      	ldr	r2, [pc, #80]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80026b4:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <HAL_SPI_MspInit+0x160>)
 80026b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 80026c2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80026c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026dc:	2305      	movs	r3, #5
 80026de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80026e6:	4619      	mov	r1, r3
 80026e8:	4807      	ldr	r0, [pc, #28]	@ (8002708 <HAL_SPI_MspInit+0x16c>)
 80026ea:	f004 fbbf 	bl	8006e6c <HAL_GPIO_Init>
}
 80026ee:	bf00      	nop
 80026f0:	37f0      	adds	r7, #240	@ 0xf0
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40013000 	.word	0x40013000
 80026fc:	58024400 	.word	0x58024400
 8002700:	58020000 	.word	0x58020000
 8002704:	40003800 	.word	0x40003800
 8002708:	58020400 	.word	0x58020400

0800270c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <HAL_MspInit+0x30>)
 8002714:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002718:	4a08      	ldr	r2, [pc, #32]	@ (800273c <HAL_MspInit+0x30>)
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002722:	4b06      	ldr	r3, [pc, #24]	@ (800273c <HAL_MspInit+0x30>)
 8002724:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	58024400 	.word	0x58024400

08002740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <NMI_Handler+0x4>

08002748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <HardFault_Handler+0x4>

08002750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <MemManage_Handler+0x4>

08002758 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <BusFault_Handler+0x4>

08002760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <UsageFault_Handler+0x4>

08002768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <SysTick_Handler+0x34>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <SysTick_Handler+0x18>
	    Timer1--;
 80027a0:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <SysTick_Handler+0x34>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <SysTick_Handler+0x34>)
 80027aa:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 80027ac:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <SysTick_Handler+0x38>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <SysTick_Handler+0x2c>
	    Timer2--;
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <SysTick_Handler+0x38>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <SysTick_Handler+0x38>)
 80027be:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c0:	f000 ff46 	bl	8003650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	240029d0 	.word	0x240029d0
 80027cc:	240029d2 	.word	0x240029d2

080027d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027d4:	4802      	ldr	r0, [pc, #8]	@ (80027e0 <DMA1_Stream0_IRQHandler+0x10>)
 80027d6:	f002 fc63 	bl	80050a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	240028d4 	.word	0x240028d4

080027e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80027e8:	4802      	ldr	r0, [pc, #8]	@ (80027f4 <DMA1_Stream1_IRQHandler+0x10>)
 80027ea:	f002 fc59 	bl	80050a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	2400294c 	.word	0x2400294c

080027f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027fc:	4802      	ldr	r0, [pc, #8]	@ (8002808 <USART1_IRQHandler+0x10>)
 80027fe:	f009 ffa3 	bl	800c748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	24002718 	.word	0x24002718

0800280c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002810:	4802      	ldr	r0, [pc, #8]	@ (800281c <USART3_IRQHandler+0x10>)
 8002812:	f009 ff99 	bl	800c748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	240027ac 	.word	0x240027ac

08002820 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002824:	4802      	ldr	r0, [pc, #8]	@ (8002830 <TIM6_DAC_IRQHandler+0x10>)
 8002826:	f008 ffd3 	bl	800b7d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	240025ec 	.word	0x240025ec

08002834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002838:	4b32      	ldr	r3, [pc, #200]	@ (8002904 <SystemInit+0xd0>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	4a31      	ldr	r2, [pc, #196]	@ (8002904 <SystemInit+0xd0>)
 8002840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002848:	4b2f      	ldr	r3, [pc, #188]	@ (8002908 <SystemInit+0xd4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	2b02      	cmp	r3, #2
 8002852:	d807      	bhi.n	8002864 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002854:	4b2c      	ldr	r3, [pc, #176]	@ (8002908 <SystemInit+0xd4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 030f 	bic.w	r3, r3, #15
 800285c:	4a2a      	ldr	r2, [pc, #168]	@ (8002908 <SystemInit+0xd4>)
 800285e:	f043 0303 	orr.w	r3, r3, #3
 8002862:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002864:	4b29      	ldr	r3, [pc, #164]	@ (800290c <SystemInit+0xd8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a28      	ldr	r2, [pc, #160]	@ (800290c <SystemInit+0xd8>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002870:	4b26      	ldr	r3, [pc, #152]	@ (800290c <SystemInit+0xd8>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002876:	4b25      	ldr	r3, [pc, #148]	@ (800290c <SystemInit+0xd8>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4924      	ldr	r1, [pc, #144]	@ (800290c <SystemInit+0xd8>)
 800287c:	4b24      	ldr	r3, [pc, #144]	@ (8002910 <SystemInit+0xdc>)
 800287e:	4013      	ands	r3, r2
 8002880:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002882:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <SystemInit+0xd4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800288e:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <SystemInit+0xd4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 030f 	bic.w	r3, r3, #15
 8002896:	4a1c      	ldr	r2, [pc, #112]	@ (8002908 <SystemInit+0xd4>)
 8002898:	f043 0303 	orr.w	r3, r3, #3
 800289c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800289e:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <SystemInit+0xd8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <SystemInit+0xd8>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80028aa:	4b18      	ldr	r3, [pc, #96]	@ (800290c <SystemInit+0xd8>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80028b0:	4b16      	ldr	r3, [pc, #88]	@ (800290c <SystemInit+0xd8>)
 80028b2:	4a18      	ldr	r2, [pc, #96]	@ (8002914 <SystemInit+0xe0>)
 80028b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80028b6:	4b15      	ldr	r3, [pc, #84]	@ (800290c <SystemInit+0xd8>)
 80028b8:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <SystemInit+0xe4>)
 80028ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80028bc:	4b13      	ldr	r3, [pc, #76]	@ (800290c <SystemInit+0xd8>)
 80028be:	4a17      	ldr	r2, [pc, #92]	@ (800291c <SystemInit+0xe8>)
 80028c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80028c2:	4b12      	ldr	r3, [pc, #72]	@ (800290c <SystemInit+0xd8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80028c8:	4b10      	ldr	r3, [pc, #64]	@ (800290c <SystemInit+0xd8>)
 80028ca:	4a14      	ldr	r2, [pc, #80]	@ (800291c <SystemInit+0xe8>)
 80028cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80028ce:	4b0f      	ldr	r3, [pc, #60]	@ (800290c <SystemInit+0xd8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028d4:	4b0d      	ldr	r3, [pc, #52]	@ (800290c <SystemInit+0xd8>)
 80028d6:	4a11      	ldr	r2, [pc, #68]	@ (800291c <SystemInit+0xe8>)
 80028d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028da:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <SystemInit+0xd8>)
 80028dc:	2200      	movs	r2, #0
 80028de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <SystemInit+0xd8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a09      	ldr	r2, [pc, #36]	@ (800290c <SystemInit+0xd8>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028ec:	4b07      	ldr	r3, [pc, #28]	@ (800290c <SystemInit+0xd8>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <SystemInit+0xec>)
 80028f4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80028f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00
 8002908:	52002000 	.word	0x52002000
 800290c:	58024400 	.word	0x58024400
 8002910:	eaf6ed7f 	.word	0xeaf6ed7f
 8002914:	02020200 	.word	0x02020200
 8002918:	01ff0000 	.word	0x01ff0000
 800291c:	01010280 	.word	0x01010280
 8002920:	52004000 	.word	0x52004000

08002924 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	@ 0x28
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292a:	f107 031c 	add.w	r3, r7, #28
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002936:	463b      	mov	r3, r7
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
 8002944:	615a      	str	r2, [r3, #20]
 8002946:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002948:	4b33      	ldr	r3, [pc, #204]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 800294a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800294e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8002950:	4b31      	ldr	r3, [pc, #196]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 8002952:	f240 1217 	movw	r2, #279	@ 0x117
 8002956:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002958:	4b2f      	ldr	r3, [pc, #188]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 800295e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 8002960:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002964:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002966:	4b2c      	ldr	r3, [pc, #176]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800296c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 800296e:	2280      	movs	r2, #128	@ 0x80
 8002970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002972:	4829      	ldr	r0, [pc, #164]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 8002974:	f008 fdc6 	bl	800b504 <HAL_TIM_PWM_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800297e:	f7ff fd5b 	bl	8002438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800298a:	f107 031c 	add.w	r3, r7, #28
 800298e:	4619      	mov	r1, r3
 8002990:	4821      	ldr	r0, [pc, #132]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 8002992:	f009 fd03 	bl	800c39c <HAL_TIMEx_MasterConfigSynchronization>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800299c:	f7ff fd4c 	bl	8002438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a0:	2360      	movs	r3, #96	@ 0x60
 80029a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029b0:	463b      	mov	r3, r7
 80029b2:	2200      	movs	r2, #0
 80029b4:	4619      	mov	r1, r3
 80029b6:	4818      	ldr	r0, [pc, #96]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 80029b8:	f009 f812 	bl	800b9e0 <HAL_TIM_PWM_ConfigChannel>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80029c2:	f7ff fd39 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029c6:	463b      	mov	r3, r7
 80029c8:	2204      	movs	r2, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4812      	ldr	r0, [pc, #72]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 80029ce:	f009 f807 	bl	800b9e0 <HAL_TIM_PWM_ConfigChannel>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80029d8:	f7ff fd2e 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029dc:	463b      	mov	r3, r7
 80029de:	2208      	movs	r2, #8
 80029e0:	4619      	mov	r1, r3
 80029e2:	480d      	ldr	r0, [pc, #52]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 80029e4:	f008 fffc 	bl	800b9e0 <HAL_TIM_PWM_ConfigChannel>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 80029ee:	f7ff fd23 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029f2:	463b      	mov	r3, r7
 80029f4:	220c      	movs	r2, #12
 80029f6:	4619      	mov	r1, r3
 80029f8:	4807      	ldr	r0, [pc, #28]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 80029fa:	f008 fff1 	bl	800b9e0 <HAL_TIM_PWM_ConfigChannel>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002a04:	f7ff fd18 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a08:	4803      	ldr	r0, [pc, #12]	@ (8002a18 <MX_TIM2_Init+0xf4>)
 8002a0a:	f000 f9d5 	bl	8002db8 <HAL_TIM_MspPostInit>

}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	@ 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	24002508 	.word	0x24002508

08002a1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	@ 0x28
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a2e:	463b      	mov	r3, r7
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
 8002a3c:	615a      	str	r2, [r3, #20]
 8002a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a40:	4b27      	ldr	r3, [pc, #156]	@ (8002ae0 <MX_TIM3_Init+0xc4>)
 8002a42:	4a28      	ldr	r2, [pc, #160]	@ (8002ae4 <MX_TIM3_Init+0xc8>)
 8002a44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8002a46:	4b26      	ldr	r3, [pc, #152]	@ (8002ae0 <MX_TIM3_Init+0xc4>)
 8002a48:	f240 1217 	movw	r2, #279	@ 0x117
 8002a4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ae0 <MX_TIM3_Init+0xc4>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8002a54:	4b22      	ldr	r3, [pc, #136]	@ (8002ae0 <MX_TIM3_Init+0xc4>)
 8002a56:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002a5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ae0 <MX_TIM3_Init+0xc4>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a62:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae0 <MX_TIM3_Init+0xc4>)
 8002a64:	2280      	movs	r2, #128	@ 0x80
 8002a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a68:	481d      	ldr	r0, [pc, #116]	@ (8002ae0 <MX_TIM3_Init+0xc4>)
 8002a6a:	f008 fd4b 	bl	800b504 <HAL_TIM_PWM_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002a74:	f7ff fce0 	bl	8002438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	4619      	mov	r1, r3
 8002a86:	4816      	ldr	r0, [pc, #88]	@ (8002ae0 <MX_TIM3_Init+0xc4>)
 8002a88:	f009 fc88 	bl	800c39c <HAL_TIMEx_MasterConfigSynchronization>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002a92:	f7ff fcd1 	bl	8002438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a96:	2360      	movs	r3, #96	@ 0x60
 8002a98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4619      	mov	r1, r3
 8002aac:	480c      	ldr	r0, [pc, #48]	@ (8002ae0 <MX_TIM3_Init+0xc4>)
 8002aae:	f008 ff97 	bl	800b9e0 <HAL_TIM_PWM_ConfigChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002ab8:	f7ff fcbe 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002abc:	463b      	mov	r3, r7
 8002abe:	2204      	movs	r2, #4
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4807      	ldr	r0, [pc, #28]	@ (8002ae0 <MX_TIM3_Init+0xc4>)
 8002ac4:	f008 ff8c 	bl	800b9e0 <HAL_TIM_PWM_ConfigChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002ace:	f7ff fcb3 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ad2:	4803      	ldr	r0, [pc, #12]	@ (8002ae0 <MX_TIM3_Init+0xc4>)
 8002ad4:	f000 f970 	bl	8002db8 <HAL_TIM_MspPostInit>

}
 8002ad8:	bf00      	nop
 8002ada:	3728      	adds	r7, #40	@ 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	24002554 	.word	0x24002554
 8002ae4:	40000400 	.word	0x40000400

08002ae8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	@ 0x28
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002afa:	463b      	mov	r3, r7
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
 8002b08:	615a      	str	r2, [r3, #20]
 8002b0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b0c:	4b32      	ldr	r3, [pc, #200]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002b0e:	4a33      	ldr	r2, [pc, #204]	@ (8002bdc <MX_TIM4_Init+0xf4>)
 8002b10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8002b12:	4b31      	ldr	r3, [pc, #196]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002b14:	f240 1217 	movw	r2, #279	@ 0x117
 8002b18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002b20:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002b22:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002b26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b28:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002b30:	2280      	movs	r2, #128	@ 0x80
 8002b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b34:	4828      	ldr	r0, [pc, #160]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002b36:	f008 fce5 	bl	800b504 <HAL_TIM_PWM_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002b40:	f7ff fc7a 	bl	8002438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	4619      	mov	r1, r3
 8002b52:	4821      	ldr	r0, [pc, #132]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002b54:	f009 fc22 	bl	800c39c <HAL_TIMEx_MasterConfigSynchronization>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002b5e:	f7ff fc6b 	bl	8002438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b62:	2360      	movs	r3, #96	@ 0x60
 8002b64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b72:	463b      	mov	r3, r7
 8002b74:	2200      	movs	r2, #0
 8002b76:	4619      	mov	r1, r3
 8002b78:	4817      	ldr	r0, [pc, #92]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002b7a:	f008 ff31 	bl	800b9e0 <HAL_TIM_PWM_ConfigChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002b84:	f7ff fc58 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b88:	463b      	mov	r3, r7
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4812      	ldr	r0, [pc, #72]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002b90:	f008 ff26 	bl	800b9e0 <HAL_TIM_PWM_ConfigChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002b9a:	f7ff fc4d 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	480c      	ldr	r0, [pc, #48]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002ba6:	f008 ff1b 	bl	800b9e0 <HAL_TIM_PWM_ConfigChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002bb0:	f7ff fc42 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4807      	ldr	r0, [pc, #28]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002bbc:	f008 ff10 	bl	800b9e0 <HAL_TIM_PWM_ConfigChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002bc6:	f7ff fc37 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002bca:	4803      	ldr	r0, [pc, #12]	@ (8002bd8 <MX_TIM4_Init+0xf0>)
 8002bcc:	f000 f8f4 	bl	8002db8 <HAL_TIM_MspPostInit>

}
 8002bd0:	bf00      	nop
 8002bd2:	3728      	adds	r7, #40	@ 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	240025a0 	.word	0x240025a0
 8002bdc:	40000800 	.word	0x40000800

08002be0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bf0:	4b16      	ldr	r3, [pc, #88]	@ (8002c4c <MX_TIM6_Init+0x6c>)
 8002bf2:	4a17      	ldr	r2, [pc, #92]	@ (8002c50 <MX_TIM6_Init+0x70>)
 8002bf4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8002bf6:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <MX_TIM6_Init+0x6c>)
 8002bf8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bfc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bfe:	4b13      	ldr	r3, [pc, #76]	@ (8002c4c <MX_TIM6_Init+0x6c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8002c04:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <MX_TIM6_Init+0x6c>)
 8002c06:	f240 1217 	movw	r2, #279	@ 0x117
 8002c0a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <MX_TIM6_Init+0x6c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c12:	480e      	ldr	r0, [pc, #56]	@ (8002c4c <MX_TIM6_Init+0x6c>)
 8002c14:	f008 fba7 	bl	800b366 <HAL_TIM_Base_Init>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c1e:	f7ff fc0b 	bl	8002438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4807      	ldr	r0, [pc, #28]	@ (8002c4c <MX_TIM6_Init+0x6c>)
 8002c30:	f009 fbb4 	bl	800c39c <HAL_TIMEx_MasterConfigSynchronization>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002c3a:	f7ff fbfd 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002c3e:	4803      	ldr	r0, [pc, #12]	@ (8002c4c <MX_TIM6_Init+0x6c>)
 8002c40:	f008 fbe8 	bl	800b414 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	240025ec 	.word	0x240025ec
 8002c50:	40001000 	.word	0x40001000

08002c54 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002c58:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <MX_TIM13_Init+0x40>)
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c98 <MX_TIM13_Init+0x44>)
 8002c5c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <MX_TIM13_Init+0x40>)
 8002c60:	f240 1217 	movw	r2, #279	@ 0x117
 8002c64:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c66:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <MX_TIM13_Init+0x40>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <MX_TIM13_Init+0x40>)
 8002c6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c72:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c74:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <MX_TIM13_Init+0x40>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <MX_TIM13_Init+0x40>)
 8002c7c:	2280      	movs	r2, #128	@ 0x80
 8002c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002c80:	4804      	ldr	r0, [pc, #16]	@ (8002c94 <MX_TIM13_Init+0x40>)
 8002c82:	f008 fb70 	bl	800b366 <HAL_TIM_Base_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002c8c:	f7ff fbd4 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002c90:	bf00      	nop
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	24002638 	.word	0x24002638
 8002c98:	40001c00 	.word	0x40001c00

08002c9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cac:	d10f      	bne.n	8002cce <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cae:	4b1f      	ldr	r3, [pc, #124]	@ (8002d2c <HAL_TIM_PWM_MspInit+0x90>)
 8002cb0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d2c <HAL_TIM_PWM_MspInit+0x90>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <HAL_TIM_PWM_MspInit+0x90>)
 8002cc0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002ccc:	e028      	b.n	8002d20 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a17      	ldr	r2, [pc, #92]	@ (8002d30 <HAL_TIM_PWM_MspInit+0x94>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d10f      	bne.n	8002cf8 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cd8:	4b14      	ldr	r3, [pc, #80]	@ (8002d2c <HAL_TIM_PWM_MspInit+0x90>)
 8002cda:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002cde:	4a13      	ldr	r2, [pc, #76]	@ (8002d2c <HAL_TIM_PWM_MspInit+0x90>)
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002ce8:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <HAL_TIM_PWM_MspInit+0x90>)
 8002cea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
}
 8002cf6:	e013      	b.n	8002d20 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d34 <HAL_TIM_PWM_MspInit+0x98>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <HAL_TIM_PWM_MspInit+0x90>)
 8002d04:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002d08:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <HAL_TIM_PWM_MspInit+0x90>)
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_TIM_PWM_MspInit+0x90>)
 8002d14:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40000800 	.word	0x40000800

08002d38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a19      	ldr	r2, [pc, #100]	@ (8002dac <HAL_TIM_Base_MspInit+0x74>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d117      	bne.n	8002d7a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d4a:	4b19      	ldr	r3, [pc, #100]	@ (8002db0 <HAL_TIM_Base_MspInit+0x78>)
 8002d4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002d50:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <HAL_TIM_Base_MspInit+0x78>)
 8002d52:	f043 0310 	orr.w	r3, r3, #16
 8002d56:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002d5a:	4b15      	ldr	r3, [pc, #84]	@ (8002db0 <HAL_TIM_Base_MspInit+0x78>)
 8002d5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	2036      	movs	r0, #54	@ 0x36
 8002d6e:	f000 fd8e 	bl	800388e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d72:	2036      	movs	r0, #54	@ 0x36
 8002d74:	f000 fda5 	bl	80038c2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002d78:	e013      	b.n	8002da2 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM13)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <HAL_TIM_Base_MspInit+0x7c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10e      	bne.n	8002da2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002d84:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <HAL_TIM_Base_MspInit+0x78>)
 8002d86:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002d8a:	4a09      	ldr	r2, [pc, #36]	@ (8002db0 <HAL_TIM_Base_MspInit+0x78>)
 8002d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d90:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002d94:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_TIM_Base_MspInit+0x78>)
 8002d96:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40001000 	.word	0x40001000
 8002db0:	58024400 	.word	0x58024400
 8002db4:	40001c00 	.word	0x40001c00

08002db8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08c      	sub	sp, #48	@ 0x30
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 031c 	add.w	r3, r7, #28
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd8:	d13f      	bne.n	8002e5a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dda:	4b47      	ldr	r3, [pc, #284]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002ddc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002de0:	4a45      	ldr	r2, [pc, #276]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002dec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002dfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e08:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002e0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8002e16:	f248 030c 	movw	r3, #32780	@ 0x800c
 8002e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2c:	f107 031c 	add.w	r3, r7, #28
 8002e30:	4619      	mov	r1, r3
 8002e32:	4832      	ldr	r0, [pc, #200]	@ (8002efc <HAL_TIM_MspPostInit+0x144>)
 8002e34:	f004 f81a 	bl	8006e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e38:	2308      	movs	r3, #8
 8002e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	4619      	mov	r1, r3
 8002e52:	482b      	ldr	r0, [pc, #172]	@ (8002f00 <HAL_TIM_MspPostInit+0x148>)
 8002e54:	f004 f80a 	bl	8006e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e58:	e049      	b.n	8002eee <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a29      	ldr	r2, [pc, #164]	@ (8002f04 <HAL_TIM_MspPostInit+0x14c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d11f      	bne.n	8002ea4 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e64:	4b24      	ldr	r3, [pc, #144]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002e66:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e6a:	4a23      	ldr	r2, [pc, #140]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e74:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002e76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e82:	2330      	movs	r3, #48	@ 0x30
 8002e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e92:	2302      	movs	r3, #2
 8002e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4818      	ldr	r0, [pc, #96]	@ (8002f00 <HAL_TIM_MspPostInit+0x148>)
 8002e9e:	f003 ffe5 	bl	8006e6c <HAL_GPIO_Init>
}
 8002ea2:	e024      	b.n	8002eee <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a17      	ldr	r2, [pc, #92]	@ (8002f08 <HAL_TIM_MspPostInit+0x150>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d11f      	bne.n	8002eee <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eae:	4b12      	ldr	r3, [pc, #72]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002eb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002eb4:	4a10      	ldr	r2, [pc, #64]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002eb6:	f043 0302 	orr.w	r3, r3, #2
 8002eba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <HAL_TIM_MspPostInit+0x140>)
 8002ec0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002ecc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee2:	f107 031c 	add.w	r3, r7, #28
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4805      	ldr	r0, [pc, #20]	@ (8002f00 <HAL_TIM_MspPostInit+0x148>)
 8002eea:	f003 ffbf 	bl	8006e6c <HAL_GPIO_Init>
}
 8002eee:	bf00      	nop
 8002ef0:	3730      	adds	r7, #48	@ 0x30
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	58020000 	.word	0x58020000
 8002f00:	58020400 	.word	0x58020400
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800

08002f0c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f10:	4b22      	ldr	r3, [pc, #136]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f12:	4a23      	ldr	r2, [pc, #140]	@ (8002fa0 <MX_UART4_Init+0x94>)
 8002f14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002f16:	4b21      	ldr	r3, [pc, #132]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f24:	4b1d      	ldr	r3, [pc, #116]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f30:	4b1a      	ldr	r3, [pc, #104]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f32:	220c      	movs	r2, #12
 8002f34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f36:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f3c:	4b17      	ldr	r3, [pc, #92]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f42:	4b16      	ldr	r3, [pc, #88]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f48:	4b14      	ldr	r3, [pc, #80]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f4e:	4b13      	ldr	r3, [pc, #76]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f54:	4811      	ldr	r0, [pc, #68]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f56:	f009 facd 	bl	800c4f4 <HAL_UART_Init>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002f60:	f7ff fa6a 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f64:	2100      	movs	r1, #0
 8002f66:	480d      	ldr	r0, [pc, #52]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f68:	f00b fad1 	bl	800e50e <HAL_UARTEx_SetTxFifoThreshold>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002f72:	f7ff fa61 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f76:	2100      	movs	r1, #0
 8002f78:	4808      	ldr	r0, [pc, #32]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f7a:	f00b fb06 	bl	800e58a <HAL_UARTEx_SetRxFifoThreshold>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002f84:	f7ff fa58 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002f88:	4804      	ldr	r0, [pc, #16]	@ (8002f9c <MX_UART4_Init+0x90>)
 8002f8a:	f00b fa87 	bl	800e49c <HAL_UARTEx_DisableFifoMode>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002f94:	f7ff fa50 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	24002684 	.word	0x24002684
 8002fa0:	40004c00 	.word	0x40004c00

08002fa4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fa8:	4b23      	ldr	r3, [pc, #140]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002faa:	4a24      	ldr	r2, [pc, #144]	@ (800303c <MX_USART1_UART_Init+0x98>)
 8002fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002fae:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002fb0:	4a23      	ldr	r2, [pc, #140]	@ (8003040 <MX_USART1_UART_Init+0x9c>)
 8002fb2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8002fb4:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002fb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8002fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002fc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fc8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fca:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002fcc:	220c      	movs	r2, #12
 8002fce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd0:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd6:	4b18      	ldr	r3, [pc, #96]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fdc:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fe2:	4b15      	ldr	r3, [pc, #84]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fee:	4812      	ldr	r0, [pc, #72]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8002ff0:	f009 fa80 	bl	800c4f4 <HAL_UART_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002ffa:	f7ff fa1d 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ffe:	2100      	movs	r1, #0
 8003000:	480d      	ldr	r0, [pc, #52]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8003002:	f00b fa84 	bl	800e50e <HAL_UARTEx_SetTxFifoThreshold>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800300c:	f7ff fa14 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003010:	2100      	movs	r1, #0
 8003012:	4809      	ldr	r0, [pc, #36]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8003014:	f00b fab9 	bl	800e58a <HAL_UARTEx_SetRxFifoThreshold>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800301e:	f7ff fa0b 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003022:	4805      	ldr	r0, [pc, #20]	@ (8003038 <MX_USART1_UART_Init+0x94>)
 8003024:	f00b fa3a 	bl	800e49c <HAL_UARTEx_DisableFifoMode>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800302e:	f7ff fa03 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	24002718 	.word	0x24002718
 800303c:	40011000 	.word	0x40011000
 8003040:	000186a0 	.word	0x000186a0

08003044 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003048:	4b22      	ldr	r3, [pc, #136]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 800304a:	4a23      	ldr	r2, [pc, #140]	@ (80030d8 <MX_USART3_UART_Init+0x94>)
 800304c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800304e:	4b21      	ldr	r3, [pc, #132]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 8003050:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003054:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003056:	4b1f      	ldr	r3, [pc, #124]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 8003058:	2200      	movs	r2, #0
 800305a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800305c:	4b1d      	ldr	r3, [pc, #116]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 800305e:	2200      	movs	r2, #0
 8003060:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003062:	4b1c      	ldr	r3, [pc, #112]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003068:	4b1a      	ldr	r3, [pc, #104]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 800306a:	220c      	movs	r2, #12
 800306c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800306e:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003074:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 8003076:	2200      	movs	r2, #0
 8003078:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800307a:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 800307c:	2200      	movs	r2, #0
 800307e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003080:	4b14      	ldr	r3, [pc, #80]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 8003082:	2200      	movs	r2, #0
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003086:	4b13      	ldr	r3, [pc, #76]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 8003088:	2200      	movs	r2, #0
 800308a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800308c:	4811      	ldr	r0, [pc, #68]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 800308e:	f009 fa31 	bl	800c4f4 <HAL_UART_Init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003098:	f7ff f9ce 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800309c:	2100      	movs	r1, #0
 800309e:	480d      	ldr	r0, [pc, #52]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 80030a0:	f00b fa35 	bl	800e50e <HAL_UARTEx_SetTxFifoThreshold>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80030aa:	f7ff f9c5 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ae:	2100      	movs	r1, #0
 80030b0:	4808      	ldr	r0, [pc, #32]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 80030b2:	f00b fa6a 	bl	800e58a <HAL_UARTEx_SetRxFifoThreshold>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80030bc:	f7ff f9bc 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80030c0:	4804      	ldr	r0, [pc, #16]	@ (80030d4 <MX_USART3_UART_Init+0x90>)
 80030c2:	f00b f9eb 	bl	800e49c <HAL_UARTEx_DisableFifoMode>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80030cc:	f7ff f9b4 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	240027ac 	.word	0x240027ac
 80030d8:	40004800 	.word	0x40004800

080030dc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80030e0:	4b22      	ldr	r3, [pc, #136]	@ (800316c <MX_USART6_UART_Init+0x90>)
 80030e2:	4a23      	ldr	r2, [pc, #140]	@ (8003170 <MX_USART6_UART_Init+0x94>)
 80030e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80030e6:	4b21      	ldr	r3, [pc, #132]	@ (800316c <MX_USART6_UART_Init+0x90>)
 80030e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80030ee:	4b1f      	ldr	r3, [pc, #124]	@ (800316c <MX_USART6_UART_Init+0x90>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80030f4:	4b1d      	ldr	r3, [pc, #116]	@ (800316c <MX_USART6_UART_Init+0x90>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80030fa:	4b1c      	ldr	r3, [pc, #112]	@ (800316c <MX_USART6_UART_Init+0x90>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003100:	4b1a      	ldr	r3, [pc, #104]	@ (800316c <MX_USART6_UART_Init+0x90>)
 8003102:	220c      	movs	r2, #12
 8003104:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003106:	4b19      	ldr	r3, [pc, #100]	@ (800316c <MX_USART6_UART_Init+0x90>)
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800310c:	4b17      	ldr	r3, [pc, #92]	@ (800316c <MX_USART6_UART_Init+0x90>)
 800310e:	2200      	movs	r2, #0
 8003110:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003112:	4b16      	ldr	r3, [pc, #88]	@ (800316c <MX_USART6_UART_Init+0x90>)
 8003114:	2200      	movs	r2, #0
 8003116:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003118:	4b14      	ldr	r3, [pc, #80]	@ (800316c <MX_USART6_UART_Init+0x90>)
 800311a:	2200      	movs	r2, #0
 800311c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800311e:	4b13      	ldr	r3, [pc, #76]	@ (800316c <MX_USART6_UART_Init+0x90>)
 8003120:	2200      	movs	r2, #0
 8003122:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003124:	4811      	ldr	r0, [pc, #68]	@ (800316c <MX_USART6_UART_Init+0x90>)
 8003126:	f009 f9e5 	bl	800c4f4 <HAL_UART_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003130:	f7ff f982 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003134:	2100      	movs	r1, #0
 8003136:	480d      	ldr	r0, [pc, #52]	@ (800316c <MX_USART6_UART_Init+0x90>)
 8003138:	f00b f9e9 	bl	800e50e <HAL_UARTEx_SetTxFifoThreshold>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8003142:	f7ff f979 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003146:	2100      	movs	r1, #0
 8003148:	4808      	ldr	r0, [pc, #32]	@ (800316c <MX_USART6_UART_Init+0x90>)
 800314a:	f00b fa1e 	bl	800e58a <HAL_UARTEx_SetRxFifoThreshold>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003154:	f7ff f970 	bl	8002438 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003158:	4804      	ldr	r0, [pc, #16]	@ (800316c <MX_USART6_UART_Init+0x90>)
 800315a:	f00b f99f 	bl	800e49c <HAL_UARTEx_DisableFifoMode>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003164:	f7ff f968 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	24002840 	.word	0x24002840
 8003170:	40011400 	.word	0x40011400

08003174 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b0c0      	sub	sp, #256	@ 0x100
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	605a      	str	r2, [r3, #4]
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800318c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003190:	22c0      	movs	r2, #192	@ 0xc0
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f00f fc27 	bl	80129e8 <memset>
  if(uartHandle->Instance==UART4)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4aa9      	ldr	r2, [pc, #676]	@ (8003444 <HAL_UART_MspInit+0x2d0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d146      	bne.n	8003232 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80031a4:	f04f 0202 	mov.w	r2, #2
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031ba:	4618      	mov	r0, r3
 80031bc:	f005 f94c 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80031c6:	f7ff f937 	bl	8002438 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80031ca:	4b9f      	ldr	r3, [pc, #636]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 80031cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80031d0:	4a9d      	ldr	r2, [pc, #628]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 80031d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80031d6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80031da:	4b9b      	ldr	r3, [pc, #620]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 80031dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80031e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e8:	4b97      	ldr	r3, [pc, #604]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 80031ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031ee:	4a96      	ldr	r2, [pc, #600]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80031f8:	4b93      	ldr	r3, [pc, #588]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 80031fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003206:	2303      	movs	r3, #3
 8003208:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800321e:	2308      	movs	r3, #8
 8003220:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003224:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003228:	4619      	mov	r1, r3
 800322a:	4888      	ldr	r0, [pc, #544]	@ (800344c <HAL_UART_MspInit+0x2d8>)
 800322c:	f003 fe1e 	bl	8006e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003230:	e167      	b.n	8003502 <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a86      	ldr	r2, [pc, #536]	@ (8003450 <HAL_UART_MspInit+0x2dc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d17f      	bne.n	800333c <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800323c:	f04f 0201 	mov.w	r2, #1
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003248:	2300      	movs	r3, #0
 800324a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800324e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003252:	4618      	mov	r0, r3
 8003254:	f005 f900 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_UART_MspInit+0xee>
      Error_Handler();
 800325e:	f7ff f8eb 	bl	8002438 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003262:	4b79      	ldr	r3, [pc, #484]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 8003264:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003268:	4a77      	ldr	r2, [pc, #476]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 800326a:	f043 0310 	orr.w	r3, r3, #16
 800326e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003272:	4b75      	ldr	r3, [pc, #468]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 8003274:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003280:	4b71      	ldr	r3, [pc, #452]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 8003282:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003286:	4a70      	ldr	r2, [pc, #448]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003290:	4b6d      	ldr	r3, [pc, #436]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 8003292:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 800329e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80032a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	2302      	movs	r3, #2
 80032a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032b8:	2307      	movs	r3, #7
 80032ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80032c2:	4619      	mov	r1, r3
 80032c4:	4861      	ldr	r0, [pc, #388]	@ (800344c <HAL_UART_MspInit+0x2d8>)
 80032c6:	f003 fdd1 	bl	8006e6c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80032ca:	4b62      	ldr	r3, [pc, #392]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 80032cc:	4a62      	ldr	r2, [pc, #392]	@ (8003458 <HAL_UART_MspInit+0x2e4>)
 80032ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80032d0:	4b60      	ldr	r3, [pc, #384]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 80032d2:	2229      	movs	r2, #41	@ 0x29
 80032d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032dc:	4b5d      	ldr	r3, [pc, #372]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 80032de:	2200      	movs	r2, #0
 80032e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 80032e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f0:	4b58      	ldr	r3, [pc, #352]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80032f6:	4b57      	ldr	r3, [pc, #348]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 80032f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032fe:	4b55      	ldr	r3, [pc, #340]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 8003300:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003304:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003306:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 8003308:	2200      	movs	r2, #0
 800330a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800330c:	4851      	ldr	r0, [pc, #324]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 800330e:	f000 fb6b 	bl	80039e8 <HAL_DMA_Init>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003318:	f7ff f88e 	bl	8002438 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a4d      	ldr	r2, [pc, #308]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 8003320:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003324:	4a4b      	ldr	r2, [pc, #300]	@ (8003454 <HAL_UART_MspInit+0x2e0>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2100      	movs	r1, #0
 800332e:	2025      	movs	r0, #37	@ 0x25
 8003330:	f000 faad 	bl	800388e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003334:	2025      	movs	r0, #37	@ 0x25
 8003336:	f000 fac4 	bl	80038c2 <HAL_NVIC_EnableIRQ>
}
 800333a:	e0e2      	b.n	8003502 <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a46      	ldr	r2, [pc, #280]	@ (800345c <HAL_UART_MspInit+0x2e8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f040 8092 	bne.w	800346c <HAL_UART_MspInit+0x2f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003348:	f04f 0202 	mov.w	r2, #2
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800335a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800335e:	4618      	mov	r0, r3
 8003360:	f005 f87a 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 800336a:	f7ff f865 	bl	8002438 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800336e:	4b36      	ldr	r3, [pc, #216]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 8003370:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003374:	4a34      	ldr	r2, [pc, #208]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 8003376:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800337a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800337e:	4b32      	ldr	r3, [pc, #200]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 8003380:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800338c:	4b2e      	ldr	r3, [pc, #184]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 800338e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003392:	4a2d      	ldr	r2, [pc, #180]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800339c:	4b2a      	ldr	r3, [pc, #168]	@ (8003448 <HAL_UART_MspInit+0x2d4>)
 800339e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033c4:	2307      	movs	r3, #7
 80033c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ca:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80033ce:	4619      	mov	r1, r3
 80033d0:	4823      	ldr	r0, [pc, #140]	@ (8003460 <HAL_UART_MspInit+0x2ec>)
 80033d2:	f003 fd4b 	bl	8006e6c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80033d6:	4b23      	ldr	r3, [pc, #140]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 80033d8:	4a23      	ldr	r2, [pc, #140]	@ (8003468 <HAL_UART_MspInit+0x2f4>)
 80033da:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80033dc:	4b21      	ldr	r3, [pc, #132]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 80033de:	222d      	movs	r2, #45	@ 0x2d
 80033e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033e2:	4b20      	ldr	r3, [pc, #128]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 80033f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033fc:	4b19      	ldr	r3, [pc, #100]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003402:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 8003404:	2200      	movs	r2, #0
 8003406:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003408:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 800340a:	2200      	movs	r2, #0
 800340c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800340e:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 8003410:	2200      	movs	r2, #0
 8003412:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003414:	4813      	ldr	r0, [pc, #76]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 8003416:	f000 fae7 	bl	80039e8 <HAL_DMA_Init>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 8003420:	f7ff f80a 	bl	8002438 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0f      	ldr	r2, [pc, #60]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 8003428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800342c:	4a0d      	ldr	r2, [pc, #52]	@ (8003464 <HAL_UART_MspInit+0x2f0>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2100      	movs	r1, #0
 8003436:	2027      	movs	r0, #39	@ 0x27
 8003438:	f000 fa29 	bl	800388e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800343c:	2027      	movs	r0, #39	@ 0x27
 800343e:	f000 fa40 	bl	80038c2 <HAL_NVIC_EnableIRQ>
}
 8003442:	e05e      	b.n	8003502 <HAL_UART_MspInit+0x38e>
 8003444:	40004c00 	.word	0x40004c00
 8003448:	58024400 	.word	0x58024400
 800344c:	58020000 	.word	0x58020000
 8003450:	40011000 	.word	0x40011000
 8003454:	240028d4 	.word	0x240028d4
 8003458:	40020010 	.word	0x40020010
 800345c:	40004800 	.word	0x40004800
 8003460:	58020800 	.word	0x58020800
 8003464:	2400294c 	.word	0x2400294c
 8003468:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART6)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a26      	ldr	r2, [pc, #152]	@ (800350c <HAL_UART_MspInit+0x398>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d145      	bne.n	8003502 <HAL_UART_MspInit+0x38e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003476:	f04f 0201 	mov.w	r2, #1
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003488:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800348c:	4618      	mov	r0, r3
 800348e:	f004 ffe3 	bl	8008458 <HAL_RCCEx_PeriphCLKConfig>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_UART_MspInit+0x328>
      Error_Handler();
 8003498:	f7fe ffce 	bl	8002438 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800349c:	4b1c      	ldr	r3, [pc, #112]	@ (8003510 <HAL_UART_MspInit+0x39c>)
 800349e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80034a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003510 <HAL_UART_MspInit+0x39c>)
 80034a4:	f043 0320 	orr.w	r3, r3, #32
 80034a8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80034ac:	4b18      	ldr	r3, [pc, #96]	@ (8003510 <HAL_UART_MspInit+0x39c>)
 80034ae:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ba:	4b15      	ldr	r3, [pc, #84]	@ (8003510 <HAL_UART_MspInit+0x39c>)
 80034bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80034c0:	4a13      	ldr	r2, [pc, #76]	@ (8003510 <HAL_UART_MspInit+0x39c>)
 80034c2:	f043 0304 	orr.w	r3, r3, #4
 80034c6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80034ca:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <HAL_UART_MspInit+0x39c>)
 80034cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034d8:	23c0      	movs	r3, #192	@ 0xc0
 80034da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80034f0:	2307      	movs	r3, #7
 80034f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034f6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80034fa:	4619      	mov	r1, r3
 80034fc:	4805      	ldr	r0, [pc, #20]	@ (8003514 <HAL_UART_MspInit+0x3a0>)
 80034fe:	f003 fcb5 	bl	8006e6c <HAL_GPIO_Init>
}
 8003502:	bf00      	nop
 8003504:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40011400 	.word	0x40011400
 8003510:	58024400 	.word	0x58024400
 8003514:	58020800 	.word	0x58020800

08003518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003518:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003550 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800351c:	f7ff f98a 	bl	8002834 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003520:	480c      	ldr	r0, [pc, #48]	@ (8003554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003522:	490d      	ldr	r1, [pc, #52]	@ (8003558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003524:	4a0d      	ldr	r2, [pc, #52]	@ (800355c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003528:	e002      	b.n	8003530 <LoopCopyDataInit>

0800352a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800352a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800352c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800352e:	3304      	adds	r3, #4

08003530 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003534:	d3f9      	bcc.n	800352a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003536:	4a0a      	ldr	r2, [pc, #40]	@ (8003560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003538:	4c0a      	ldr	r4, [pc, #40]	@ (8003564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800353a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800353c:	e001      	b.n	8003542 <LoopFillZerobss>

0800353e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800353e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003540:	3204      	adds	r2, #4

08003542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003544:	d3fb      	bcc.n	800353e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003546:	f00f fa5d 	bl	8012a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800354a:	f7fe fe49 	bl	80021e0 <main>
  bx  lr
 800354e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003550:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003554:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003558:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 800355c:	08013ad8 	.word	0x08013ad8
  ldr r2, =_sbss
 8003560:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 8003564:	24002d44 	.word	0x24002d44

08003568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003568:	e7fe      	b.n	8003568 <ADC_IRQHandler>
	...

0800356c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003572:	2003      	movs	r0, #3
 8003574:	f000 f980 	bl	8003878 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003578:	f004 fd98 	bl	80080ac <HAL_RCC_GetSysClockFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b15      	ldr	r3, [pc, #84]	@ (80035d4 <HAL_Init+0x68>)
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	0a1b      	lsrs	r3, r3, #8
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	4913      	ldr	r1, [pc, #76]	@ (80035d8 <HAL_Init+0x6c>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
 8003594:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003596:	4b0f      	ldr	r3, [pc, #60]	@ (80035d4 <HAL_Init+0x68>)
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	4a0e      	ldr	r2, [pc, #56]	@ (80035d8 <HAL_Init+0x6c>)
 80035a0:	5cd3      	ldrb	r3, [r2, r3]
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ac:	4a0b      	ldr	r2, [pc, #44]	@ (80035dc <HAL_Init+0x70>)
 80035ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035b0:	4a0b      	ldr	r2, [pc, #44]	@ (80035e0 <HAL_Init+0x74>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035b6:	200f      	movs	r0, #15
 80035b8:	f000 f814 	bl	80035e4 <HAL_InitTick>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e002      	b.n	80035cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80035c6:	f7ff f8a1 	bl	800270c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	58024400 	.word	0x58024400
 80035d8:	08012db8 	.word	0x08012db8
 80035dc:	2400009c 	.word	0x2400009c
 80035e0:	24000098 	.word	0x24000098

080035e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80035ec:	4b15      	ldr	r3, [pc, #84]	@ (8003644 <HAL_InitTick+0x60>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e021      	b.n	800363c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80035f8:	4b13      	ldr	r3, [pc, #76]	@ (8003648 <HAL_InitTick+0x64>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <HAL_InitTick+0x60>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	4619      	mov	r1, r3
 8003602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003606:	fbb3 f3f1 	udiv	r3, r3, r1
 800360a:	fbb2 f3f3 	udiv	r3, r2, r3
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f965 	bl	80038de <HAL_SYSTICK_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e00e      	b.n	800363c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b0f      	cmp	r3, #15
 8003622:	d80a      	bhi.n	800363a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003624:	2200      	movs	r2, #0
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	f04f 30ff 	mov.w	r0, #4294967295
 800362c:	f000 f92f 	bl	800388e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003630:	4a06      	ldr	r2, [pc, #24]	@ (800364c <HAL_InitTick+0x68>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	e000      	b.n	800363c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	240000a4 	.word	0x240000a4
 8003648:	24000098 	.word	0x24000098
 800364c:	240000a0 	.word	0x240000a0

08003650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003654:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <HAL_IncTick+0x20>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <HAL_IncTick+0x24>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4413      	add	r3, r2
 8003660:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <HAL_IncTick+0x24>)
 8003662:	6013      	str	r3, [r2, #0]
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	240000a4 	.word	0x240000a4
 8003674:	240029c4 	.word	0x240029c4

08003678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return uwTick;
 800367c:	4b03      	ldr	r3, [pc, #12]	@ (800368c <HAL_GetTick+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	240029c4 	.word	0x240029c4

08003690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003698:	f7ff ffee 	bl	8003678 <HAL_GetTick>
 800369c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d005      	beq.n	80036b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036aa:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <HAL_Delay+0x44>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036b6:	bf00      	nop
 80036b8:	f7ff ffde 	bl	8003678 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d8f7      	bhi.n	80036b8 <HAL_Delay+0x28>
  {
  }
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	240000a4 	.word	0x240000a4

080036d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <__NVIC_SetPriorityGrouping+0x40>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036f4:	4013      	ands	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <__NVIC_SetPriorityGrouping+0x44>)
 8003702:	4313      	orrs	r3, r2
 8003704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003706:	4a04      	ldr	r2, [pc, #16]	@ (8003718 <__NVIC_SetPriorityGrouping+0x40>)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	60d3      	str	r3, [r2, #12]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00
 800371c:	05fa0000 	.word	0x05fa0000

08003720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003724:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <__NVIC_GetPriorityGrouping+0x18>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	f003 0307 	and.w	r3, r3, #7
}
 800372e:	4618      	mov	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800374a:	2b00      	cmp	r3, #0
 800374c:	db0b      	blt.n	8003766 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	f003 021f 	and.w	r2, r3, #31
 8003754:	4907      	ldr	r1, [pc, #28]	@ (8003774 <__NVIC_EnableIRQ+0x38>)
 8003756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2001      	movs	r0, #1
 800375e:	fa00 f202 	lsl.w	r2, r0, r2
 8003762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000e100 	.word	0xe000e100

08003778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003788:	2b00      	cmp	r3, #0
 800378a:	db0a      	blt.n	80037a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	490c      	ldr	r1, [pc, #48]	@ (80037c4 <__NVIC_SetPriority+0x4c>)
 8003792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003796:	0112      	lsls	r2, r2, #4
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	440b      	add	r3, r1
 800379c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a0:	e00a      	b.n	80037b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4908      	ldr	r1, [pc, #32]	@ (80037c8 <__NVIC_SetPriority+0x50>)
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	3b04      	subs	r3, #4
 80037b0:	0112      	lsls	r2, r2, #4
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	440b      	add	r3, r1
 80037b6:	761a      	strb	r2, [r3, #24]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000e100 	.word	0xe000e100
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	@ 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f1c3 0307 	rsb	r3, r3, #7
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	bf28      	it	cs
 80037ea:	2304      	movcs	r3, #4
 80037ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3304      	adds	r3, #4
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d902      	bls.n	80037fc <NVIC_EncodePriority+0x30>
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3b03      	subs	r3, #3
 80037fa:	e000      	b.n	80037fe <NVIC_EncodePriority+0x32>
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	f04f 32ff 	mov.w	r2, #4294967295
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43da      	mvns	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	401a      	ands	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003814:	f04f 31ff 	mov.w	r1, #4294967295
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	43d9      	mvns	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003824:	4313      	orrs	r3, r2
         );
}
 8003826:	4618      	mov	r0, r3
 8003828:	3724      	adds	r7, #36	@ 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003844:	d301      	bcc.n	800384a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003846:	2301      	movs	r3, #1
 8003848:	e00f      	b.n	800386a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800384a:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <SysTick_Config+0x40>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003852:	210f      	movs	r1, #15
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	f7ff ff8e 	bl	8003778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <SysTick_Config+0x40>)
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003862:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <SysTick_Config+0x40>)
 8003864:	2207      	movs	r2, #7
 8003866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	e000e010 	.word	0xe000e010

08003878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ff29 	bl	80036d8 <__NVIC_SetPriorityGrouping>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b086      	sub	sp, #24
 8003892:	af00      	add	r7, sp, #0
 8003894:	4603      	mov	r3, r0
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800389c:	f7ff ff40 	bl	8003720 <__NVIC_GetPriorityGrouping>
 80038a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	6978      	ldr	r0, [r7, #20]
 80038a8:	f7ff ff90 	bl	80037cc <NVIC_EncodePriority>
 80038ac:	4602      	mov	r2, r0
 80038ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ff5f 	bl	8003778 <__NVIC_SetPriority>
}
 80038ba:	bf00      	nop
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	4603      	mov	r3, r0
 80038ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff33 	bl	800373c <__NVIC_EnableIRQ>
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ffa4 	bl	8003834 <SysTick_Config>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80038fc:	f3bf 8f5f 	dmb	sy
}
 8003900:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003902:	4b07      	ldr	r3, [pc, #28]	@ (8003920 <HAL_MPU_Disable+0x28>)
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	4a06      	ldr	r2, [pc, #24]	@ (8003920 <HAL_MPU_Disable+0x28>)
 8003908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800390e:	4b05      	ldr	r3, [pc, #20]	@ (8003924 <HAL_MPU_Disable+0x2c>)
 8003910:	2200      	movs	r2, #0
 8003912:	605a      	str	r2, [r3, #4]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000ed00 	.word	0xe000ed00
 8003924:	e000ed90 	.word	0xe000ed90

08003928 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003930:	4a0b      	ldr	r2, [pc, #44]	@ (8003960 <HAL_MPU_Enable+0x38>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800393a:	4b0a      	ldr	r3, [pc, #40]	@ (8003964 <HAL_MPU_Enable+0x3c>)
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	4a09      	ldr	r2, [pc, #36]	@ (8003964 <HAL_MPU_Enable+0x3c>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003944:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003946:	f3bf 8f4f 	dsb	sy
}
 800394a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800394c:	f3bf 8f6f 	isb	sy
}
 8003950:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	e000ed90 	.word	0xe000ed90
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	785a      	ldrb	r2, [r3, #1]
 8003974:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <HAL_MPU_ConfigRegion+0x7c>)
 8003976:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003978:	4b1a      	ldr	r3, [pc, #104]	@ (80039e4 <HAL_MPU_ConfigRegion+0x7c>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	4a19      	ldr	r2, [pc, #100]	@ (80039e4 <HAL_MPU_ConfigRegion+0x7c>)
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003984:	4a17      	ldr	r2, [pc, #92]	@ (80039e4 <HAL_MPU_ConfigRegion+0x7c>)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	7b1b      	ldrb	r3, [r3, #12]
 8003990:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	7adb      	ldrb	r3, [r3, #11]
 8003996:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003998:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	7a9b      	ldrb	r3, [r3, #10]
 800399e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80039a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	7b5b      	ldrb	r3, [r3, #13]
 80039a6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80039a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	7b9b      	ldrb	r3, [r3, #14]
 80039ae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80039b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	7bdb      	ldrb	r3, [r3, #15]
 80039b6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80039b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7a5b      	ldrb	r3, [r3, #9]
 80039be:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80039c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	7a1b      	ldrb	r3, [r3, #8]
 80039c6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80039c8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039d0:	4a04      	ldr	r2, [pc, #16]	@ (80039e4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80039d2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039d4:	6113      	str	r3, [r2, #16]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	e000ed90 	.word	0xe000ed90

080039e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80039f0:	f7ff fe42 	bl	8003678 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e37d      	b.n	80040fc <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a66      	ldr	r2, [pc, #408]	@ (8003ba0 <HAL_DMA_Init+0x1b8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d04a      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a65      	ldr	r2, [pc, #404]	@ (8003ba4 <HAL_DMA_Init+0x1bc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d045      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a63      	ldr	r2, [pc, #396]	@ (8003ba8 <HAL_DMA_Init+0x1c0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d040      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a62      	ldr	r2, [pc, #392]	@ (8003bac <HAL_DMA_Init+0x1c4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d03b      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a60      	ldr	r2, [pc, #384]	@ (8003bb0 <HAL_DMA_Init+0x1c8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d036      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5f      	ldr	r2, [pc, #380]	@ (8003bb4 <HAL_DMA_Init+0x1cc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d031      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a5d      	ldr	r2, [pc, #372]	@ (8003bb8 <HAL_DMA_Init+0x1d0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02c      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5c      	ldr	r2, [pc, #368]	@ (8003bbc <HAL_DMA_Init+0x1d4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d027      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a5a      	ldr	r2, [pc, #360]	@ (8003bc0 <HAL_DMA_Init+0x1d8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d022      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a59      	ldr	r2, [pc, #356]	@ (8003bc4 <HAL_DMA_Init+0x1dc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d01d      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a57      	ldr	r2, [pc, #348]	@ (8003bc8 <HAL_DMA_Init+0x1e0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d018      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a56      	ldr	r2, [pc, #344]	@ (8003bcc <HAL_DMA_Init+0x1e4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a54      	ldr	r2, [pc, #336]	@ (8003bd0 <HAL_DMA_Init+0x1e8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00e      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a53      	ldr	r2, [pc, #332]	@ (8003bd4 <HAL_DMA_Init+0x1ec>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a51      	ldr	r2, [pc, #324]	@ (8003bd8 <HAL_DMA_Init+0x1f0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d004      	beq.n	8003aa0 <HAL_DMA_Init+0xb8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a50      	ldr	r2, [pc, #320]	@ (8003bdc <HAL_DMA_Init+0x1f4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d101      	bne.n	8003aa4 <HAL_DMA_Init+0xbc>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_DMA_Init+0xbe>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 813c 	beq.w	8003d24 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a37      	ldr	r2, [pc, #220]	@ (8003ba0 <HAL_DMA_Init+0x1b8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d04a      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a36      	ldr	r2, [pc, #216]	@ (8003ba4 <HAL_DMA_Init+0x1bc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d045      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a34      	ldr	r2, [pc, #208]	@ (8003ba8 <HAL_DMA_Init+0x1c0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d040      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a33      	ldr	r2, [pc, #204]	@ (8003bac <HAL_DMA_Init+0x1c4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d03b      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a31      	ldr	r2, [pc, #196]	@ (8003bb0 <HAL_DMA_Init+0x1c8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d036      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a30      	ldr	r2, [pc, #192]	@ (8003bb4 <HAL_DMA_Init+0x1cc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d031      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2e      	ldr	r2, [pc, #184]	@ (8003bb8 <HAL_DMA_Init+0x1d0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d02c      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2d      	ldr	r2, [pc, #180]	@ (8003bbc <HAL_DMA_Init+0x1d4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d027      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc0 <HAL_DMA_Init+0x1d8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d022      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003bc4 <HAL_DMA_Init+0x1dc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01d      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a28      	ldr	r2, [pc, #160]	@ (8003bc8 <HAL_DMA_Init+0x1e0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a27      	ldr	r2, [pc, #156]	@ (8003bcc <HAL_DMA_Init+0x1e4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a25      	ldr	r2, [pc, #148]	@ (8003bd0 <HAL_DMA_Init+0x1e8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a24      	ldr	r2, [pc, #144]	@ (8003bd4 <HAL_DMA_Init+0x1ec>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a22      	ldr	r2, [pc, #136]	@ (8003bd8 <HAL_DMA_Init+0x1f0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_Init+0x174>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a21      	ldr	r2, [pc, #132]	@ (8003bdc <HAL_DMA_Init+0x1f4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d108      	bne.n	8003b6e <HAL_DMA_Init+0x186>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e007      	b.n	8003b7e <HAL_DMA_Init+0x196>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b7e:	e02f      	b.n	8003be0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b80:	f7ff fd7a 	bl	8003678 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d928      	bls.n	8003be0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2203      	movs	r2, #3
 8003b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e2ad      	b.n	80040fc <HAL_DMA_Init+0x714>
 8003ba0:	40020010 	.word	0x40020010
 8003ba4:	40020028 	.word	0x40020028
 8003ba8:	40020040 	.word	0x40020040
 8003bac:	40020058 	.word	0x40020058
 8003bb0:	40020070 	.word	0x40020070
 8003bb4:	40020088 	.word	0x40020088
 8003bb8:	400200a0 	.word	0x400200a0
 8003bbc:	400200b8 	.word	0x400200b8
 8003bc0:	40020410 	.word	0x40020410
 8003bc4:	40020428 	.word	0x40020428
 8003bc8:	40020440 	.word	0x40020440
 8003bcc:	40020458 	.word	0x40020458
 8003bd0:	40020470 	.word	0x40020470
 8003bd4:	40020488 	.word	0x40020488
 8003bd8:	400204a0 	.word	0x400204a0
 8003bdc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1c8      	bne.n	8003b80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4b73      	ldr	r3, [pc, #460]	@ (8003dc8 <HAL_DMA_Init+0x3e0>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d107      	bne.n	8003c44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b28      	cmp	r3, #40	@ 0x28
 8003c4a:	d903      	bls.n	8003c54 <HAL_DMA_Init+0x26c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c52:	d91f      	bls.n	8003c94 <HAL_DMA_Init+0x2ac>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c5a:	d903      	bls.n	8003c64 <HAL_DMA_Init+0x27c>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b42      	cmp	r3, #66	@ 0x42
 8003c62:	d917      	bls.n	8003c94 <HAL_DMA_Init+0x2ac>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b46      	cmp	r3, #70	@ 0x46
 8003c6a:	d903      	bls.n	8003c74 <HAL_DMA_Init+0x28c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b48      	cmp	r3, #72	@ 0x48
 8003c72:	d90f      	bls.n	8003c94 <HAL_DMA_Init+0x2ac>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b4e      	cmp	r3, #78	@ 0x4e
 8003c7a:	d903      	bls.n	8003c84 <HAL_DMA_Init+0x29c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b52      	cmp	r3, #82	@ 0x52
 8003c82:	d907      	bls.n	8003c94 <HAL_DMA_Init+0x2ac>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b73      	cmp	r3, #115	@ 0x73
 8003c8a:	d905      	bls.n	8003c98 <HAL_DMA_Init+0x2b0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b77      	cmp	r3, #119	@ 0x77
 8003c92:	d801      	bhi.n	8003c98 <HAL_DMA_Init+0x2b0>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <HAL_DMA_Init+0x2b2>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ca4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f023 0307 	bic.w	r3, r3, #7
 8003cbc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d117      	bne.n	8003d00 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00e      	beq.n	8003d00 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f002 fbd4 	bl	8006490 <DMA_CheckFifoParam>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2240      	movs	r2, #64	@ 0x40
 8003cf2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e1fd      	b.n	80040fc <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f002 fb0f 	bl	800632c <DMA_CalcBaseAndBitshift>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	223f      	movs	r2, #63	@ 0x3f
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	609a      	str	r2, [r3, #8]
 8003d22:	e0fd      	b.n	8003f20 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a28      	ldr	r2, [pc, #160]	@ (8003dcc <HAL_DMA_Init+0x3e4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d04a      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a27      	ldr	r2, [pc, #156]	@ (8003dd0 <HAL_DMA_Init+0x3e8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d045      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a25      	ldr	r2, [pc, #148]	@ (8003dd4 <HAL_DMA_Init+0x3ec>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d040      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a24      	ldr	r2, [pc, #144]	@ (8003dd8 <HAL_DMA_Init+0x3f0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d03b      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a22      	ldr	r2, [pc, #136]	@ (8003ddc <HAL_DMA_Init+0x3f4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d036      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a21      	ldr	r2, [pc, #132]	@ (8003de0 <HAL_DMA_Init+0x3f8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d031      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1f      	ldr	r2, [pc, #124]	@ (8003de4 <HAL_DMA_Init+0x3fc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02c      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003de8 <HAL_DMA_Init+0x400>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d027      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1c      	ldr	r2, [pc, #112]	@ (8003dec <HAL_DMA_Init+0x404>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1b      	ldr	r2, [pc, #108]	@ (8003df0 <HAL_DMA_Init+0x408>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d01d      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a19      	ldr	r2, [pc, #100]	@ (8003df4 <HAL_DMA_Init+0x40c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a18      	ldr	r2, [pc, #96]	@ (8003df8 <HAL_DMA_Init+0x410>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a16      	ldr	r2, [pc, #88]	@ (8003dfc <HAL_DMA_Init+0x414>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <HAL_DMA_Init+0x418>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a13      	ldr	r2, [pc, #76]	@ (8003e04 <HAL_DMA_Init+0x41c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_DMA_Init+0x3dc>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	@ (8003e08 <HAL_DMA_Init+0x420>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d123      	bne.n	8003e0c <HAL_DMA_Init+0x424>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e022      	b.n	8003e0e <HAL_DMA_Init+0x426>
 8003dc8:	fe10803f 	.word	0xfe10803f
 8003dcc:	48022c08 	.word	0x48022c08
 8003dd0:	48022c1c 	.word	0x48022c1c
 8003dd4:	48022c30 	.word	0x48022c30
 8003dd8:	48022c44 	.word	0x48022c44
 8003ddc:	48022c58 	.word	0x48022c58
 8003de0:	48022c6c 	.word	0x48022c6c
 8003de4:	48022c80 	.word	0x48022c80
 8003de8:	48022c94 	.word	0x48022c94
 8003dec:	58025408 	.word	0x58025408
 8003df0:	5802541c 	.word	0x5802541c
 8003df4:	58025430 	.word	0x58025430
 8003df8:	58025444 	.word	0x58025444
 8003dfc:	58025458 	.word	0x58025458
 8003e00:	5802546c 	.word	0x5802546c
 8003e04:	58025480 	.word	0x58025480
 8003e08:	58025494 	.word	0x58025494
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d07d      	beq.n	8003f0e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a7f      	ldr	r2, [pc, #508]	@ (8004014 <HAL_DMA_Init+0x62c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d021      	beq.n	8003e60 <HAL_DMA_Init+0x478>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a7d      	ldr	r2, [pc, #500]	@ (8004018 <HAL_DMA_Init+0x630>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01c      	beq.n	8003e60 <HAL_DMA_Init+0x478>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a7c      	ldr	r2, [pc, #496]	@ (800401c <HAL_DMA_Init+0x634>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d017      	beq.n	8003e60 <HAL_DMA_Init+0x478>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a7a      	ldr	r2, [pc, #488]	@ (8004020 <HAL_DMA_Init+0x638>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d012      	beq.n	8003e60 <HAL_DMA_Init+0x478>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a79      	ldr	r2, [pc, #484]	@ (8004024 <HAL_DMA_Init+0x63c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00d      	beq.n	8003e60 <HAL_DMA_Init+0x478>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a77      	ldr	r2, [pc, #476]	@ (8004028 <HAL_DMA_Init+0x640>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d008      	beq.n	8003e60 <HAL_DMA_Init+0x478>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a76      	ldr	r2, [pc, #472]	@ (800402c <HAL_DMA_Init+0x644>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <HAL_DMA_Init+0x478>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a74      	ldr	r2, [pc, #464]	@ (8004030 <HAL_DMA_Init+0x648>)
 8003e5e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4b6e      	ldr	r3, [pc, #440]	@ (8004034 <HAL_DMA_Init+0x64c>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b40      	cmp	r3, #64	@ 0x40
 8003e86:	d008      	beq.n	8003e9a <HAL_DMA_Init+0x4b2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b80      	cmp	r3, #128	@ 0x80
 8003e8e:	d102      	bne.n	8003e96 <HAL_DMA_Init+0x4ae>
 8003e90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e94:	e002      	b.n	8003e9c <HAL_DMA_Init+0x4b4>
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <HAL_DMA_Init+0x4b4>
 8003e9a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68d2      	ldr	r2, [r2, #12]
 8003ea0:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ea2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003eaa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003eb2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003eba:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ec2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003eca:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b55      	ldr	r3, [pc, #340]	@ (8004038 <HAL_DMA_Init+0x650>)
 8003ee2:	4413      	add	r3, r2
 8003ee4:	4a55      	ldr	r2, [pc, #340]	@ (800403c <HAL_DMA_Init+0x654>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	009a      	lsls	r2, r3, #2
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f002 fa1a 	bl	800632c <DMA_CalcBaseAndBitshift>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2201      	movs	r2, #1
 8003f06:	409a      	lsls	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	605a      	str	r2, [r3, #4]
 8003f0c:	e008      	b.n	8003f20 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2240      	movs	r2, #64	@ 0x40
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2203      	movs	r2, #3
 8003f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0ed      	b.n	80040fc <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a46      	ldr	r2, [pc, #280]	@ (8004040 <HAL_DMA_Init+0x658>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d072      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a45      	ldr	r2, [pc, #276]	@ (8004044 <HAL_DMA_Init+0x65c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d06d      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a43      	ldr	r2, [pc, #268]	@ (8004048 <HAL_DMA_Init+0x660>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d068      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a42      	ldr	r2, [pc, #264]	@ (800404c <HAL_DMA_Init+0x664>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d063      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a40      	ldr	r2, [pc, #256]	@ (8004050 <HAL_DMA_Init+0x668>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d05e      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a3f      	ldr	r2, [pc, #252]	@ (8004054 <HAL_DMA_Init+0x66c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d059      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a3d      	ldr	r2, [pc, #244]	@ (8004058 <HAL_DMA_Init+0x670>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d054      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	@ (800405c <HAL_DMA_Init+0x674>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d04f      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3a      	ldr	r2, [pc, #232]	@ (8004060 <HAL_DMA_Init+0x678>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d04a      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a39      	ldr	r2, [pc, #228]	@ (8004064 <HAL_DMA_Init+0x67c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d045      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a37      	ldr	r2, [pc, #220]	@ (8004068 <HAL_DMA_Init+0x680>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d040      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a36      	ldr	r2, [pc, #216]	@ (800406c <HAL_DMA_Init+0x684>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d03b      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a34      	ldr	r2, [pc, #208]	@ (8004070 <HAL_DMA_Init+0x688>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d036      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a33      	ldr	r2, [pc, #204]	@ (8004074 <HAL_DMA_Init+0x68c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d031      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a31      	ldr	r2, [pc, #196]	@ (8004078 <HAL_DMA_Init+0x690>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d02c      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a30      	ldr	r2, [pc, #192]	@ (800407c <HAL_DMA_Init+0x694>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d027      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a13      	ldr	r2, [pc, #76]	@ (8004014 <HAL_DMA_Init+0x62c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d022      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a12      	ldr	r2, [pc, #72]	@ (8004018 <HAL_DMA_Init+0x630>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d01d      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a10      	ldr	r2, [pc, #64]	@ (800401c <HAL_DMA_Init+0x634>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8004020 <HAL_DMA_Init+0x638>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a0d      	ldr	r2, [pc, #52]	@ (8004024 <HAL_DMA_Init+0x63c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8004028 <HAL_DMA_Init+0x640>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <HAL_DMA_Init+0x644>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_DMA_Init+0x628>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a09      	ldr	r2, [pc, #36]	@ (8004030 <HAL_DMA_Init+0x648>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d137      	bne.n	8004080 <HAL_DMA_Init+0x698>
 8004010:	2301      	movs	r3, #1
 8004012:	e036      	b.n	8004082 <HAL_DMA_Init+0x69a>
 8004014:	58025408 	.word	0x58025408
 8004018:	5802541c 	.word	0x5802541c
 800401c:	58025430 	.word	0x58025430
 8004020:	58025444 	.word	0x58025444
 8004024:	58025458 	.word	0x58025458
 8004028:	5802546c 	.word	0x5802546c
 800402c:	58025480 	.word	0x58025480
 8004030:	58025494 	.word	0x58025494
 8004034:	fffe000f 	.word	0xfffe000f
 8004038:	a7fdabf8 	.word	0xa7fdabf8
 800403c:	cccccccd 	.word	0xcccccccd
 8004040:	40020010 	.word	0x40020010
 8004044:	40020028 	.word	0x40020028
 8004048:	40020040 	.word	0x40020040
 800404c:	40020058 	.word	0x40020058
 8004050:	40020070 	.word	0x40020070
 8004054:	40020088 	.word	0x40020088
 8004058:	400200a0 	.word	0x400200a0
 800405c:	400200b8 	.word	0x400200b8
 8004060:	40020410 	.word	0x40020410
 8004064:	40020428 	.word	0x40020428
 8004068:	40020440 	.word	0x40020440
 800406c:	40020458 	.word	0x40020458
 8004070:	40020470 	.word	0x40020470
 8004074:	40020488 	.word	0x40020488
 8004078:	400204a0 	.word	0x400204a0
 800407c:	400204b8 	.word	0x400204b8
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d032      	beq.n	80040ec <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f002 fa7e 	bl	8006588 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b80      	cmp	r3, #128	@ 0x80
 8004092:	d102      	bne.n	800409a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80040ae:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d010      	beq.n	80040da <HAL_DMA_Init+0x6f2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d80c      	bhi.n	80040da <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f002 fafb 	bl	80066bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80040d6:	605a      	str	r2, [r3, #4]
 80040d8:	e008      	b.n	80040ec <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e226      	b.n	800456e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_DMA_Start_IT+0x2a>
 800412a:	2302      	movs	r3, #2
 800412c:	e21f      	b.n	800456e <HAL_DMA_Start_IT+0x46a>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	f040 820a 	bne.w	8004558 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a68      	ldr	r2, [pc, #416]	@ (80042f8 <HAL_DMA_Start_IT+0x1f4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d04a      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a66      	ldr	r2, [pc, #408]	@ (80042fc <HAL_DMA_Start_IT+0x1f8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d045      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a65      	ldr	r2, [pc, #404]	@ (8004300 <HAL_DMA_Start_IT+0x1fc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d040      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a63      	ldr	r2, [pc, #396]	@ (8004304 <HAL_DMA_Start_IT+0x200>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d03b      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a62      	ldr	r2, [pc, #392]	@ (8004308 <HAL_DMA_Start_IT+0x204>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d036      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a60      	ldr	r2, [pc, #384]	@ (800430c <HAL_DMA_Start_IT+0x208>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d031      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a5f      	ldr	r2, [pc, #380]	@ (8004310 <HAL_DMA_Start_IT+0x20c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d02c      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a5d      	ldr	r2, [pc, #372]	@ (8004314 <HAL_DMA_Start_IT+0x210>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d027      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a5c      	ldr	r2, [pc, #368]	@ (8004318 <HAL_DMA_Start_IT+0x214>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a5a      	ldr	r2, [pc, #360]	@ (800431c <HAL_DMA_Start_IT+0x218>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01d      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a59      	ldr	r2, [pc, #356]	@ (8004320 <HAL_DMA_Start_IT+0x21c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d018      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a57      	ldr	r2, [pc, #348]	@ (8004324 <HAL_DMA_Start_IT+0x220>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a56      	ldr	r2, [pc, #344]	@ (8004328 <HAL_DMA_Start_IT+0x224>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00e      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a54      	ldr	r2, [pc, #336]	@ (800432c <HAL_DMA_Start_IT+0x228>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a53      	ldr	r2, [pc, #332]	@ (8004330 <HAL_DMA_Start_IT+0x22c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_DMA_Start_IT+0xee>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a51      	ldr	r2, [pc, #324]	@ (8004334 <HAL_DMA_Start_IT+0x230>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d108      	bne.n	8004204 <HAL_DMA_Start_IT+0x100>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e007      	b.n	8004214 <HAL_DMA_Start_IT+0x110>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f001 fea2 	bl	8005f64 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a34      	ldr	r2, [pc, #208]	@ (80042f8 <HAL_DMA_Start_IT+0x1f4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d04a      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a33      	ldr	r2, [pc, #204]	@ (80042fc <HAL_DMA_Start_IT+0x1f8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d045      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a31      	ldr	r2, [pc, #196]	@ (8004300 <HAL_DMA_Start_IT+0x1fc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d040      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a30      	ldr	r2, [pc, #192]	@ (8004304 <HAL_DMA_Start_IT+0x200>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d03b      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a2e      	ldr	r2, [pc, #184]	@ (8004308 <HAL_DMA_Start_IT+0x204>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d036      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2d      	ldr	r2, [pc, #180]	@ (800430c <HAL_DMA_Start_IT+0x208>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d031      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a2b      	ldr	r2, [pc, #172]	@ (8004310 <HAL_DMA_Start_IT+0x20c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d02c      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a2a      	ldr	r2, [pc, #168]	@ (8004314 <HAL_DMA_Start_IT+0x210>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d027      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a28      	ldr	r2, [pc, #160]	@ (8004318 <HAL_DMA_Start_IT+0x214>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d022      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a27      	ldr	r2, [pc, #156]	@ (800431c <HAL_DMA_Start_IT+0x218>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d01d      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a25      	ldr	r2, [pc, #148]	@ (8004320 <HAL_DMA_Start_IT+0x21c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d018      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a24      	ldr	r2, [pc, #144]	@ (8004324 <HAL_DMA_Start_IT+0x220>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a22      	ldr	r2, [pc, #136]	@ (8004328 <HAL_DMA_Start_IT+0x224>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00e      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a21      	ldr	r2, [pc, #132]	@ (800432c <HAL_DMA_Start_IT+0x228>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d009      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004330 <HAL_DMA_Start_IT+0x22c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_DMA_Start_IT+0x1bc>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004334 <HAL_DMA_Start_IT+0x230>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d101      	bne.n	80042c4 <HAL_DMA_Start_IT+0x1c0>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <HAL_DMA_Start_IT+0x1c2>
 80042c4:	2300      	movs	r3, #0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d036      	beq.n	8004338 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f023 021e 	bic.w	r2, r3, #30
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0216 	orr.w	r2, r2, #22
 80042dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d03e      	beq.n	8004364 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0208 	orr.w	r2, r2, #8
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	e035      	b.n	8004364 <HAL_DMA_Start_IT+0x260>
 80042f8:	40020010 	.word	0x40020010
 80042fc:	40020028 	.word	0x40020028
 8004300:	40020040 	.word	0x40020040
 8004304:	40020058 	.word	0x40020058
 8004308:	40020070 	.word	0x40020070
 800430c:	40020088 	.word	0x40020088
 8004310:	400200a0 	.word	0x400200a0
 8004314:	400200b8 	.word	0x400200b8
 8004318:	40020410 	.word	0x40020410
 800431c:	40020428 	.word	0x40020428
 8004320:	40020440 	.word	0x40020440
 8004324:	40020458 	.word	0x40020458
 8004328:	40020470 	.word	0x40020470
 800432c:	40020488 	.word	0x40020488
 8004330:	400204a0 	.word	0x400204a0
 8004334:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 020e 	bic.w	r2, r3, #14
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 020a 	orr.w	r2, r2, #10
 800434a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0204 	orr.w	r2, r2, #4
 8004362:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a83      	ldr	r2, [pc, #524]	@ (8004578 <HAL_DMA_Start_IT+0x474>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d072      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a82      	ldr	r2, [pc, #520]	@ (800457c <HAL_DMA_Start_IT+0x478>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d06d      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a80      	ldr	r2, [pc, #512]	@ (8004580 <HAL_DMA_Start_IT+0x47c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d068      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7f      	ldr	r2, [pc, #508]	@ (8004584 <HAL_DMA_Start_IT+0x480>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d063      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a7d      	ldr	r2, [pc, #500]	@ (8004588 <HAL_DMA_Start_IT+0x484>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d05e      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7c      	ldr	r2, [pc, #496]	@ (800458c <HAL_DMA_Start_IT+0x488>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d059      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a7a      	ldr	r2, [pc, #488]	@ (8004590 <HAL_DMA_Start_IT+0x48c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d054      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a79      	ldr	r2, [pc, #484]	@ (8004594 <HAL_DMA_Start_IT+0x490>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d04f      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a77      	ldr	r2, [pc, #476]	@ (8004598 <HAL_DMA_Start_IT+0x494>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d04a      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a76      	ldr	r2, [pc, #472]	@ (800459c <HAL_DMA_Start_IT+0x498>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d045      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a74      	ldr	r2, [pc, #464]	@ (80045a0 <HAL_DMA_Start_IT+0x49c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d040      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a73      	ldr	r2, [pc, #460]	@ (80045a4 <HAL_DMA_Start_IT+0x4a0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d03b      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a71      	ldr	r2, [pc, #452]	@ (80045a8 <HAL_DMA_Start_IT+0x4a4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d036      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a70      	ldr	r2, [pc, #448]	@ (80045ac <HAL_DMA_Start_IT+0x4a8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d031      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6e      	ldr	r2, [pc, #440]	@ (80045b0 <HAL_DMA_Start_IT+0x4ac>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d02c      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6d      	ldr	r2, [pc, #436]	@ (80045b4 <HAL_DMA_Start_IT+0x4b0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d027      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a6b      	ldr	r2, [pc, #428]	@ (80045b8 <HAL_DMA_Start_IT+0x4b4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d022      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6a      	ldr	r2, [pc, #424]	@ (80045bc <HAL_DMA_Start_IT+0x4b8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d01d      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a68      	ldr	r2, [pc, #416]	@ (80045c0 <HAL_DMA_Start_IT+0x4bc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d018      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a67      	ldr	r2, [pc, #412]	@ (80045c4 <HAL_DMA_Start_IT+0x4c0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d013      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a65      	ldr	r2, [pc, #404]	@ (80045c8 <HAL_DMA_Start_IT+0x4c4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00e      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a64      	ldr	r2, [pc, #400]	@ (80045cc <HAL_DMA_Start_IT+0x4c8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d009      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a62      	ldr	r2, [pc, #392]	@ (80045d0 <HAL_DMA_Start_IT+0x4cc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_DMA_Start_IT+0x350>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a61      	ldr	r2, [pc, #388]	@ (80045d4 <HAL_DMA_Start_IT+0x4d0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d101      	bne.n	8004458 <HAL_DMA_Start_IT+0x354>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_DMA_Start_IT+0x356>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01a      	beq.n	8004494 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004476:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800447a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d007      	beq.n	8004494 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800448e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004492:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a37      	ldr	r2, [pc, #220]	@ (8004578 <HAL_DMA_Start_IT+0x474>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d04a      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a36      	ldr	r2, [pc, #216]	@ (800457c <HAL_DMA_Start_IT+0x478>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d045      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a34      	ldr	r2, [pc, #208]	@ (8004580 <HAL_DMA_Start_IT+0x47c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d040      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a33      	ldr	r2, [pc, #204]	@ (8004584 <HAL_DMA_Start_IT+0x480>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d03b      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a31      	ldr	r2, [pc, #196]	@ (8004588 <HAL_DMA_Start_IT+0x484>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d036      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a30      	ldr	r2, [pc, #192]	@ (800458c <HAL_DMA_Start_IT+0x488>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d031      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004590 <HAL_DMA_Start_IT+0x48c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d02c      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2d      	ldr	r2, [pc, #180]	@ (8004594 <HAL_DMA_Start_IT+0x490>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d027      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004598 <HAL_DMA_Start_IT+0x494>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d022      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2a      	ldr	r2, [pc, #168]	@ (800459c <HAL_DMA_Start_IT+0x498>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d01d      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a28      	ldr	r2, [pc, #160]	@ (80045a0 <HAL_DMA_Start_IT+0x49c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d018      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a27      	ldr	r2, [pc, #156]	@ (80045a4 <HAL_DMA_Start_IT+0x4a0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d013      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a25      	ldr	r2, [pc, #148]	@ (80045a8 <HAL_DMA_Start_IT+0x4a4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a24      	ldr	r2, [pc, #144]	@ (80045ac <HAL_DMA_Start_IT+0x4a8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a22      	ldr	r2, [pc, #136]	@ (80045b0 <HAL_DMA_Start_IT+0x4ac>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_DMA_Start_IT+0x430>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a21      	ldr	r2, [pc, #132]	@ (80045b4 <HAL_DMA_Start_IT+0x4b0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d108      	bne.n	8004546 <HAL_DMA_Start_IT+0x442>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	e012      	b.n	800456c <HAL_DMA_Start_IT+0x468>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e009      	b.n	800456c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800455e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40020010 	.word	0x40020010
 800457c:	40020028 	.word	0x40020028
 8004580:	40020040 	.word	0x40020040
 8004584:	40020058 	.word	0x40020058
 8004588:	40020070 	.word	0x40020070
 800458c:	40020088 	.word	0x40020088
 8004590:	400200a0 	.word	0x400200a0
 8004594:	400200b8 	.word	0x400200b8
 8004598:	40020410 	.word	0x40020410
 800459c:	40020428 	.word	0x40020428
 80045a0:	40020440 	.word	0x40020440
 80045a4:	40020458 	.word	0x40020458
 80045a8:	40020470 	.word	0x40020470
 80045ac:	40020488 	.word	0x40020488
 80045b0:	400204a0 	.word	0x400204a0
 80045b4:	400204b8 	.word	0x400204b8
 80045b8:	58025408 	.word	0x58025408
 80045bc:	5802541c 	.word	0x5802541c
 80045c0:	58025430 	.word	0x58025430
 80045c4:	58025444 	.word	0x58025444
 80045c8:	58025458 	.word	0x58025458
 80045cc:	5802546c 	.word	0x5802546c
 80045d0:	58025480 	.word	0x58025480
 80045d4:	58025494 	.word	0x58025494

080045d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80045e0:	f7ff f84a 	bl	8003678 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e2dc      	b.n	8004baa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d008      	beq.n	800460e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2280      	movs	r2, #128	@ 0x80
 8004600:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e2cd      	b.n	8004baa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a76      	ldr	r2, [pc, #472]	@ (80047ec <HAL_DMA_Abort+0x214>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d04a      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a74      	ldr	r2, [pc, #464]	@ (80047f0 <HAL_DMA_Abort+0x218>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d045      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a73      	ldr	r2, [pc, #460]	@ (80047f4 <HAL_DMA_Abort+0x21c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d040      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a71      	ldr	r2, [pc, #452]	@ (80047f8 <HAL_DMA_Abort+0x220>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d03b      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a70      	ldr	r2, [pc, #448]	@ (80047fc <HAL_DMA_Abort+0x224>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d036      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a6e      	ldr	r2, [pc, #440]	@ (8004800 <HAL_DMA_Abort+0x228>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d031      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a6d      	ldr	r2, [pc, #436]	@ (8004804 <HAL_DMA_Abort+0x22c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d02c      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a6b      	ldr	r2, [pc, #428]	@ (8004808 <HAL_DMA_Abort+0x230>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d027      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6a      	ldr	r2, [pc, #424]	@ (800480c <HAL_DMA_Abort+0x234>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d022      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a68      	ldr	r2, [pc, #416]	@ (8004810 <HAL_DMA_Abort+0x238>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d01d      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a67      	ldr	r2, [pc, #412]	@ (8004814 <HAL_DMA_Abort+0x23c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d018      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a65      	ldr	r2, [pc, #404]	@ (8004818 <HAL_DMA_Abort+0x240>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a64      	ldr	r2, [pc, #400]	@ (800481c <HAL_DMA_Abort+0x244>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00e      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a62      	ldr	r2, [pc, #392]	@ (8004820 <HAL_DMA_Abort+0x248>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d009      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a61      	ldr	r2, [pc, #388]	@ (8004824 <HAL_DMA_Abort+0x24c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_DMA_Abort+0xd6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a5f      	ldr	r2, [pc, #380]	@ (8004828 <HAL_DMA_Abort+0x250>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d101      	bne.n	80046b2 <HAL_DMA_Abort+0xda>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_DMA_Abort+0xdc>
 80046b2:	2300      	movs	r3, #0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d013      	beq.n	80046e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 021e 	bic.w	r2, r2, #30
 80046c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e00a      	b.n	80046f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 020e 	bic.w	r2, r2, #14
 80046ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a3c      	ldr	r2, [pc, #240]	@ (80047ec <HAL_DMA_Abort+0x214>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d072      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a3a      	ldr	r2, [pc, #232]	@ (80047f0 <HAL_DMA_Abort+0x218>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d06d      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a39      	ldr	r2, [pc, #228]	@ (80047f4 <HAL_DMA_Abort+0x21c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d068      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a37      	ldr	r2, [pc, #220]	@ (80047f8 <HAL_DMA_Abort+0x220>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d063      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a36      	ldr	r2, [pc, #216]	@ (80047fc <HAL_DMA_Abort+0x224>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d05e      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a34      	ldr	r2, [pc, #208]	@ (8004800 <HAL_DMA_Abort+0x228>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d059      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a33      	ldr	r2, [pc, #204]	@ (8004804 <HAL_DMA_Abort+0x22c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d054      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a31      	ldr	r2, [pc, #196]	@ (8004808 <HAL_DMA_Abort+0x230>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d04f      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a30      	ldr	r2, [pc, #192]	@ (800480c <HAL_DMA_Abort+0x234>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d04a      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a2e      	ldr	r2, [pc, #184]	@ (8004810 <HAL_DMA_Abort+0x238>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d045      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a2d      	ldr	r2, [pc, #180]	@ (8004814 <HAL_DMA_Abort+0x23c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d040      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a2b      	ldr	r2, [pc, #172]	@ (8004818 <HAL_DMA_Abort+0x240>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d03b      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2a      	ldr	r2, [pc, #168]	@ (800481c <HAL_DMA_Abort+0x244>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d036      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a28      	ldr	r2, [pc, #160]	@ (8004820 <HAL_DMA_Abort+0x248>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d031      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a27      	ldr	r2, [pc, #156]	@ (8004824 <HAL_DMA_Abort+0x24c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d02c      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a25      	ldr	r2, [pc, #148]	@ (8004828 <HAL_DMA_Abort+0x250>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d027      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a24      	ldr	r2, [pc, #144]	@ (800482c <HAL_DMA_Abort+0x254>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d022      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a22      	ldr	r2, [pc, #136]	@ (8004830 <HAL_DMA_Abort+0x258>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01d      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a21      	ldr	r2, [pc, #132]	@ (8004834 <HAL_DMA_Abort+0x25c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d018      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004838 <HAL_DMA_Abort+0x260>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1e      	ldr	r2, [pc, #120]	@ (800483c <HAL_DMA_Abort+0x264>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004840 <HAL_DMA_Abort+0x268>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004844 <HAL_DMA_Abort+0x26c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_DMA_Abort+0x20e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a19      	ldr	r2, [pc, #100]	@ (8004848 <HAL_DMA_Abort+0x270>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d132      	bne.n	800484c <HAL_DMA_Abort+0x274>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e031      	b.n	800484e <HAL_DMA_Abort+0x276>
 80047ea:	bf00      	nop
 80047ec:	40020010 	.word	0x40020010
 80047f0:	40020028 	.word	0x40020028
 80047f4:	40020040 	.word	0x40020040
 80047f8:	40020058 	.word	0x40020058
 80047fc:	40020070 	.word	0x40020070
 8004800:	40020088 	.word	0x40020088
 8004804:	400200a0 	.word	0x400200a0
 8004808:	400200b8 	.word	0x400200b8
 800480c:	40020410 	.word	0x40020410
 8004810:	40020428 	.word	0x40020428
 8004814:	40020440 	.word	0x40020440
 8004818:	40020458 	.word	0x40020458
 800481c:	40020470 	.word	0x40020470
 8004820:	40020488 	.word	0x40020488
 8004824:	400204a0 	.word	0x400204a0
 8004828:	400204b8 	.word	0x400204b8
 800482c:	58025408 	.word	0x58025408
 8004830:	5802541c 	.word	0x5802541c
 8004834:	58025430 	.word	0x58025430
 8004838:	58025444 	.word	0x58025444
 800483c:	58025458 	.word	0x58025458
 8004840:	5802546c 	.word	0x5802546c
 8004844:	58025480 	.word	0x58025480
 8004848:	58025494 	.word	0x58025494
 800484c:	2300      	movs	r3, #0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800485c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004860:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a6d      	ldr	r2, [pc, #436]	@ (8004a1c <HAL_DMA_Abort+0x444>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d04a      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a6b      	ldr	r2, [pc, #428]	@ (8004a20 <HAL_DMA_Abort+0x448>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d045      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a6a      	ldr	r2, [pc, #424]	@ (8004a24 <HAL_DMA_Abort+0x44c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d040      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a68      	ldr	r2, [pc, #416]	@ (8004a28 <HAL_DMA_Abort+0x450>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d03b      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a67      	ldr	r2, [pc, #412]	@ (8004a2c <HAL_DMA_Abort+0x454>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d036      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a65      	ldr	r2, [pc, #404]	@ (8004a30 <HAL_DMA_Abort+0x458>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d031      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a64      	ldr	r2, [pc, #400]	@ (8004a34 <HAL_DMA_Abort+0x45c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d02c      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a62      	ldr	r2, [pc, #392]	@ (8004a38 <HAL_DMA_Abort+0x460>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d027      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a61      	ldr	r2, [pc, #388]	@ (8004a3c <HAL_DMA_Abort+0x464>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d022      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a5f      	ldr	r2, [pc, #380]	@ (8004a40 <HAL_DMA_Abort+0x468>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01d      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a5e      	ldr	r2, [pc, #376]	@ (8004a44 <HAL_DMA_Abort+0x46c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d018      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a5c      	ldr	r2, [pc, #368]	@ (8004a48 <HAL_DMA_Abort+0x470>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d013      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a5b      	ldr	r2, [pc, #364]	@ (8004a4c <HAL_DMA_Abort+0x474>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00e      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a59      	ldr	r2, [pc, #356]	@ (8004a50 <HAL_DMA_Abort+0x478>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d009      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a58      	ldr	r2, [pc, #352]	@ (8004a54 <HAL_DMA_Abort+0x47c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d004      	beq.n	8004902 <HAL_DMA_Abort+0x32a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a56      	ldr	r2, [pc, #344]	@ (8004a58 <HAL_DMA_Abort+0x480>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d108      	bne.n	8004914 <HAL_DMA_Abort+0x33c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e007      	b.n	8004924 <HAL_DMA_Abort+0x34c>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0201 	bic.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004924:	e013      	b.n	800494e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004926:	f7fe fea7 	bl	8003678 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b05      	cmp	r3, #5
 8004932:	d90c      	bls.n	800494e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2203      	movs	r2, #3
 800493e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e12d      	b.n	8004baa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e5      	bne.n	8004926 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a2f      	ldr	r2, [pc, #188]	@ (8004a1c <HAL_DMA_Abort+0x444>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d04a      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a2d      	ldr	r2, [pc, #180]	@ (8004a20 <HAL_DMA_Abort+0x448>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d045      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2c      	ldr	r2, [pc, #176]	@ (8004a24 <HAL_DMA_Abort+0x44c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d040      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a28 <HAL_DMA_Abort+0x450>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d03b      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a29      	ldr	r2, [pc, #164]	@ (8004a2c <HAL_DMA_Abort+0x454>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d036      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a27      	ldr	r2, [pc, #156]	@ (8004a30 <HAL_DMA_Abort+0x458>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d031      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a26      	ldr	r2, [pc, #152]	@ (8004a34 <HAL_DMA_Abort+0x45c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d02c      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a24      	ldr	r2, [pc, #144]	@ (8004a38 <HAL_DMA_Abort+0x460>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d027      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a23      	ldr	r2, [pc, #140]	@ (8004a3c <HAL_DMA_Abort+0x464>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d022      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a21      	ldr	r2, [pc, #132]	@ (8004a40 <HAL_DMA_Abort+0x468>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d01d      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a20      	ldr	r2, [pc, #128]	@ (8004a44 <HAL_DMA_Abort+0x46c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d018      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004a48 <HAL_DMA_Abort+0x470>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a4c <HAL_DMA_Abort+0x474>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00e      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a50 <HAL_DMA_Abort+0x478>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004a54 <HAL_DMA_Abort+0x47c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d004      	beq.n	80049fa <HAL_DMA_Abort+0x422>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a18      	ldr	r2, [pc, #96]	@ (8004a58 <HAL_DMA_Abort+0x480>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d101      	bne.n	80049fe <HAL_DMA_Abort+0x426>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <HAL_DMA_Abort+0x428>
 80049fe:	2300      	movs	r3, #0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d02b      	beq.n	8004a5c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a08:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	223f      	movs	r2, #63	@ 0x3f
 8004a14:	409a      	lsls	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	609a      	str	r2, [r3, #8]
 8004a1a:	e02a      	b.n	8004a72 <HAL_DMA_Abort+0x49a>
 8004a1c:	40020010 	.word	0x40020010
 8004a20:	40020028 	.word	0x40020028
 8004a24:	40020040 	.word	0x40020040
 8004a28:	40020058 	.word	0x40020058
 8004a2c:	40020070 	.word	0x40020070
 8004a30:	40020088 	.word	0x40020088
 8004a34:	400200a0 	.word	0x400200a0
 8004a38:	400200b8 	.word	0x400200b8
 8004a3c:	40020410 	.word	0x40020410
 8004a40:	40020428 	.word	0x40020428
 8004a44:	40020440 	.word	0x40020440
 8004a48:	40020458 	.word	0x40020458
 8004a4c:	40020470 	.word	0x40020470
 8004a50:	40020488 	.word	0x40020488
 8004a54:	400204a0 	.word	0x400204a0
 8004a58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a60:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a4f      	ldr	r2, [pc, #316]	@ (8004bb4 <HAL_DMA_Abort+0x5dc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d072      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a4d      	ldr	r2, [pc, #308]	@ (8004bb8 <HAL_DMA_Abort+0x5e0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d06d      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a4c      	ldr	r2, [pc, #304]	@ (8004bbc <HAL_DMA_Abort+0x5e4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d068      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc0 <HAL_DMA_Abort+0x5e8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d063      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a49      	ldr	r2, [pc, #292]	@ (8004bc4 <HAL_DMA_Abort+0x5ec>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d05e      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a47      	ldr	r2, [pc, #284]	@ (8004bc8 <HAL_DMA_Abort+0x5f0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d059      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a46      	ldr	r2, [pc, #280]	@ (8004bcc <HAL_DMA_Abort+0x5f4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d054      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a44      	ldr	r2, [pc, #272]	@ (8004bd0 <HAL_DMA_Abort+0x5f8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d04f      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a43      	ldr	r2, [pc, #268]	@ (8004bd4 <HAL_DMA_Abort+0x5fc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d04a      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a41      	ldr	r2, [pc, #260]	@ (8004bd8 <HAL_DMA_Abort+0x600>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d045      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a40      	ldr	r2, [pc, #256]	@ (8004bdc <HAL_DMA_Abort+0x604>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d040      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a3e      	ldr	r2, [pc, #248]	@ (8004be0 <HAL_DMA_Abort+0x608>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d03b      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a3d      	ldr	r2, [pc, #244]	@ (8004be4 <HAL_DMA_Abort+0x60c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d036      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a3b      	ldr	r2, [pc, #236]	@ (8004be8 <HAL_DMA_Abort+0x610>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d031      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a3a      	ldr	r2, [pc, #232]	@ (8004bec <HAL_DMA_Abort+0x614>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d02c      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a38      	ldr	r2, [pc, #224]	@ (8004bf0 <HAL_DMA_Abort+0x618>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d027      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a37      	ldr	r2, [pc, #220]	@ (8004bf4 <HAL_DMA_Abort+0x61c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d022      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a35      	ldr	r2, [pc, #212]	@ (8004bf8 <HAL_DMA_Abort+0x620>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d01d      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a34      	ldr	r2, [pc, #208]	@ (8004bfc <HAL_DMA_Abort+0x624>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d018      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a32      	ldr	r2, [pc, #200]	@ (8004c00 <HAL_DMA_Abort+0x628>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a31      	ldr	r2, [pc, #196]	@ (8004c04 <HAL_DMA_Abort+0x62c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a2f      	ldr	r2, [pc, #188]	@ (8004c08 <HAL_DMA_Abort+0x630>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a2e      	ldr	r2, [pc, #184]	@ (8004c0c <HAL_DMA_Abort+0x634>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_DMA_Abort+0x58a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004c10 <HAL_DMA_Abort+0x638>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d101      	bne.n	8004b66 <HAL_DMA_Abort+0x58e>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <HAL_DMA_Abort+0x590>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d015      	beq.n	8004b98 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b74:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b8c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b96:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40020010 	.word	0x40020010
 8004bb8:	40020028 	.word	0x40020028
 8004bbc:	40020040 	.word	0x40020040
 8004bc0:	40020058 	.word	0x40020058
 8004bc4:	40020070 	.word	0x40020070
 8004bc8:	40020088 	.word	0x40020088
 8004bcc:	400200a0 	.word	0x400200a0
 8004bd0:	400200b8 	.word	0x400200b8
 8004bd4:	40020410 	.word	0x40020410
 8004bd8:	40020428 	.word	0x40020428
 8004bdc:	40020440 	.word	0x40020440
 8004be0:	40020458 	.word	0x40020458
 8004be4:	40020470 	.word	0x40020470
 8004be8:	40020488 	.word	0x40020488
 8004bec:	400204a0 	.word	0x400204a0
 8004bf0:	400204b8 	.word	0x400204b8
 8004bf4:	58025408 	.word	0x58025408
 8004bf8:	5802541c 	.word	0x5802541c
 8004bfc:	58025430 	.word	0x58025430
 8004c00:	58025444 	.word	0x58025444
 8004c04:	58025458 	.word	0x58025458
 8004c08:	5802546c 	.word	0x5802546c
 8004c0c:	58025480 	.word	0x58025480
 8004c10:	58025494 	.word	0x58025494

08004c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e237      	b.n	8005096 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d004      	beq.n	8004c3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2280      	movs	r2, #128	@ 0x80
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e22c      	b.n	8005096 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a5c      	ldr	r2, [pc, #368]	@ (8004db4 <HAL_DMA_Abort_IT+0x1a0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d04a      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a5b      	ldr	r2, [pc, #364]	@ (8004db8 <HAL_DMA_Abort_IT+0x1a4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d045      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a59      	ldr	r2, [pc, #356]	@ (8004dbc <HAL_DMA_Abort_IT+0x1a8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d040      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a58      	ldr	r2, [pc, #352]	@ (8004dc0 <HAL_DMA_Abort_IT+0x1ac>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d03b      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a56      	ldr	r2, [pc, #344]	@ (8004dc4 <HAL_DMA_Abort_IT+0x1b0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d036      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a55      	ldr	r2, [pc, #340]	@ (8004dc8 <HAL_DMA_Abort_IT+0x1b4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d031      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a53      	ldr	r2, [pc, #332]	@ (8004dcc <HAL_DMA_Abort_IT+0x1b8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d02c      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a52      	ldr	r2, [pc, #328]	@ (8004dd0 <HAL_DMA_Abort_IT+0x1bc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d027      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a50      	ldr	r2, [pc, #320]	@ (8004dd4 <HAL_DMA_Abort_IT+0x1c0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d022      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a4f      	ldr	r2, [pc, #316]	@ (8004dd8 <HAL_DMA_Abort_IT+0x1c4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d01d      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a4d      	ldr	r2, [pc, #308]	@ (8004ddc <HAL_DMA_Abort_IT+0x1c8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d018      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a4c      	ldr	r2, [pc, #304]	@ (8004de0 <HAL_DMA_Abort_IT+0x1cc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d013      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8004de4 <HAL_DMA_Abort_IT+0x1d0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a49      	ldr	r2, [pc, #292]	@ (8004de8 <HAL_DMA_Abort_IT+0x1d4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a47      	ldr	r2, [pc, #284]	@ (8004dec <HAL_DMA_Abort_IT+0x1d8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_DMA_Abort_IT+0xc8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a46      	ldr	r2, [pc, #280]	@ (8004df0 <HAL_DMA_Abort_IT+0x1dc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d101      	bne.n	8004ce0 <HAL_DMA_Abort_IT+0xcc>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <HAL_DMA_Abort_IT+0xce>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 8086 	beq.w	8004df4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2204      	movs	r2, #4
 8004cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8004db4 <HAL_DMA_Abort_IT+0x1a0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d04a      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2e      	ldr	r2, [pc, #184]	@ (8004db8 <HAL_DMA_Abort_IT+0x1a4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d045      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a2c      	ldr	r2, [pc, #176]	@ (8004dbc <HAL_DMA_Abort_IT+0x1a8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d040      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <HAL_DMA_Abort_IT+0x1ac>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d03b      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a29      	ldr	r2, [pc, #164]	@ (8004dc4 <HAL_DMA_Abort_IT+0x1b0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d036      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a28      	ldr	r2, [pc, #160]	@ (8004dc8 <HAL_DMA_Abort_IT+0x1b4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d031      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a26      	ldr	r2, [pc, #152]	@ (8004dcc <HAL_DMA_Abort_IT+0x1b8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d02c      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a25      	ldr	r2, [pc, #148]	@ (8004dd0 <HAL_DMA_Abort_IT+0x1bc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d027      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a23      	ldr	r2, [pc, #140]	@ (8004dd4 <HAL_DMA_Abort_IT+0x1c0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d022      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a22      	ldr	r2, [pc, #136]	@ (8004dd8 <HAL_DMA_Abort_IT+0x1c4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d01d      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a20      	ldr	r2, [pc, #128]	@ (8004ddc <HAL_DMA_Abort_IT+0x1c8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d018      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1f      	ldr	r2, [pc, #124]	@ (8004de0 <HAL_DMA_Abort_IT+0x1cc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004de4 <HAL_DMA_Abort_IT+0x1d0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1c      	ldr	r2, [pc, #112]	@ (8004de8 <HAL_DMA_Abort_IT+0x1d4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d009      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a1a      	ldr	r2, [pc, #104]	@ (8004dec <HAL_DMA_Abort_IT+0x1d8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x17c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a19      	ldr	r2, [pc, #100]	@ (8004df0 <HAL_DMA_Abort_IT+0x1dc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d108      	bne.n	8004da2 <HAL_DMA_Abort_IT+0x18e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0201 	bic.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e178      	b.n	8005094 <HAL_DMA_Abort_IT+0x480>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	e16f      	b.n	8005094 <HAL_DMA_Abort_IT+0x480>
 8004db4:	40020010 	.word	0x40020010
 8004db8:	40020028 	.word	0x40020028
 8004dbc:	40020040 	.word	0x40020040
 8004dc0:	40020058 	.word	0x40020058
 8004dc4:	40020070 	.word	0x40020070
 8004dc8:	40020088 	.word	0x40020088
 8004dcc:	400200a0 	.word	0x400200a0
 8004dd0:	400200b8 	.word	0x400200b8
 8004dd4:	40020410 	.word	0x40020410
 8004dd8:	40020428 	.word	0x40020428
 8004ddc:	40020440 	.word	0x40020440
 8004de0:	40020458 	.word	0x40020458
 8004de4:	40020470 	.word	0x40020470
 8004de8:	40020488 	.word	0x40020488
 8004dec:	400204a0 	.word	0x400204a0
 8004df0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 020e 	bic.w	r2, r2, #14
 8004e02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a6c      	ldr	r2, [pc, #432]	@ (8004fbc <HAL_DMA_Abort_IT+0x3a8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d04a      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a6b      	ldr	r2, [pc, #428]	@ (8004fc0 <HAL_DMA_Abort_IT+0x3ac>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d045      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a69      	ldr	r2, [pc, #420]	@ (8004fc4 <HAL_DMA_Abort_IT+0x3b0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d040      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a68      	ldr	r2, [pc, #416]	@ (8004fc8 <HAL_DMA_Abort_IT+0x3b4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d03b      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a66      	ldr	r2, [pc, #408]	@ (8004fcc <HAL_DMA_Abort_IT+0x3b8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d036      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a65      	ldr	r2, [pc, #404]	@ (8004fd0 <HAL_DMA_Abort_IT+0x3bc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d031      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a63      	ldr	r2, [pc, #396]	@ (8004fd4 <HAL_DMA_Abort_IT+0x3c0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02c      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a62      	ldr	r2, [pc, #392]	@ (8004fd8 <HAL_DMA_Abort_IT+0x3c4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d027      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a60      	ldr	r2, [pc, #384]	@ (8004fdc <HAL_DMA_Abort_IT+0x3c8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d022      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a5f      	ldr	r2, [pc, #380]	@ (8004fe0 <HAL_DMA_Abort_IT+0x3cc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d01d      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a5d      	ldr	r2, [pc, #372]	@ (8004fe4 <HAL_DMA_Abort_IT+0x3d0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d018      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a5c      	ldr	r2, [pc, #368]	@ (8004fe8 <HAL_DMA_Abort_IT+0x3d4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d013      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a5a      	ldr	r2, [pc, #360]	@ (8004fec <HAL_DMA_Abort_IT+0x3d8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00e      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a59      	ldr	r2, [pc, #356]	@ (8004ff0 <HAL_DMA_Abort_IT+0x3dc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d009      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a57      	ldr	r2, [pc, #348]	@ (8004ff4 <HAL_DMA_Abort_IT+0x3e0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_DMA_Abort_IT+0x290>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a56      	ldr	r2, [pc, #344]	@ (8004ff8 <HAL_DMA_Abort_IT+0x3e4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d108      	bne.n	8004eb6 <HAL_DMA_Abort_IT+0x2a2>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e007      	b.n	8004ec6 <HAL_DMA_Abort_IT+0x2b2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0201 	bic.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a3c      	ldr	r2, [pc, #240]	@ (8004fbc <HAL_DMA_Abort_IT+0x3a8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d072      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8004fc0 <HAL_DMA_Abort_IT+0x3ac>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d06d      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a39      	ldr	r2, [pc, #228]	@ (8004fc4 <HAL_DMA_Abort_IT+0x3b0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d068      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a37      	ldr	r2, [pc, #220]	@ (8004fc8 <HAL_DMA_Abort_IT+0x3b4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d063      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a36      	ldr	r2, [pc, #216]	@ (8004fcc <HAL_DMA_Abort_IT+0x3b8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d05e      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a34      	ldr	r2, [pc, #208]	@ (8004fd0 <HAL_DMA_Abort_IT+0x3bc>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d059      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a33      	ldr	r2, [pc, #204]	@ (8004fd4 <HAL_DMA_Abort_IT+0x3c0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d054      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a31      	ldr	r2, [pc, #196]	@ (8004fd8 <HAL_DMA_Abort_IT+0x3c4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d04f      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a30      	ldr	r2, [pc, #192]	@ (8004fdc <HAL_DMA_Abort_IT+0x3c8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d04a      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a2e      	ldr	r2, [pc, #184]	@ (8004fe0 <HAL_DMA_Abort_IT+0x3cc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d045      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe4 <HAL_DMA_Abort_IT+0x3d0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d040      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe8 <HAL_DMA_Abort_IT+0x3d4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d03b      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a2a      	ldr	r2, [pc, #168]	@ (8004fec <HAL_DMA_Abort_IT+0x3d8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d036      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a28      	ldr	r2, [pc, #160]	@ (8004ff0 <HAL_DMA_Abort_IT+0x3dc>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d031      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a27      	ldr	r2, [pc, #156]	@ (8004ff4 <HAL_DMA_Abort_IT+0x3e0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d02c      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a25      	ldr	r2, [pc, #148]	@ (8004ff8 <HAL_DMA_Abort_IT+0x3e4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d027      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a24      	ldr	r2, [pc, #144]	@ (8004ffc <HAL_DMA_Abort_IT+0x3e8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d022      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a22      	ldr	r2, [pc, #136]	@ (8005000 <HAL_DMA_Abort_IT+0x3ec>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01d      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a21      	ldr	r2, [pc, #132]	@ (8005004 <HAL_DMA_Abort_IT+0x3f0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d018      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1f      	ldr	r2, [pc, #124]	@ (8005008 <HAL_DMA_Abort_IT+0x3f4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d013      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1e      	ldr	r2, [pc, #120]	@ (800500c <HAL_DMA_Abort_IT+0x3f8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00e      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005010 <HAL_DMA_Abort_IT+0x3fc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d009      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <HAL_DMA_Abort_IT+0x400>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d004      	beq.n	8004fb6 <HAL_DMA_Abort_IT+0x3a2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a19      	ldr	r2, [pc, #100]	@ (8005018 <HAL_DMA_Abort_IT+0x404>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d132      	bne.n	800501c <HAL_DMA_Abort_IT+0x408>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e031      	b.n	800501e <HAL_DMA_Abort_IT+0x40a>
 8004fba:	bf00      	nop
 8004fbc:	40020010 	.word	0x40020010
 8004fc0:	40020028 	.word	0x40020028
 8004fc4:	40020040 	.word	0x40020040
 8004fc8:	40020058 	.word	0x40020058
 8004fcc:	40020070 	.word	0x40020070
 8004fd0:	40020088 	.word	0x40020088
 8004fd4:	400200a0 	.word	0x400200a0
 8004fd8:	400200b8 	.word	0x400200b8
 8004fdc:	40020410 	.word	0x40020410
 8004fe0:	40020428 	.word	0x40020428
 8004fe4:	40020440 	.word	0x40020440
 8004fe8:	40020458 	.word	0x40020458
 8004fec:	40020470 	.word	0x40020470
 8004ff0:	40020488 	.word	0x40020488
 8004ff4:	400204a0 	.word	0x400204a0
 8004ff8:	400204b8 	.word	0x400204b8
 8004ffc:	58025408 	.word	0x58025408
 8005000:	5802541c 	.word	0x5802541c
 8005004:	58025430 	.word	0x58025430
 8005008:	58025444 	.word	0x58025444
 800500c:	58025458 	.word	0x58025458
 8005010:	5802546c 	.word	0x5802546c
 8005014:	58025480 	.word	0x58025480
 8005018:	58025494 	.word	0x58025494
 800501c:	2300      	movs	r3, #0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d028      	beq.n	8005074 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800502c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005030:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005036:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	2201      	movs	r2, #1
 8005042:	409a      	lsls	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005050:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005064:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005068:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005072:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop

080050a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	@ 0x28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050ac:	4b67      	ldr	r3, [pc, #412]	@ (800524c <HAL_DMA_IRQHandler+0x1ac>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a67      	ldr	r2, [pc, #412]	@ (8005250 <HAL_DMA_IRQHandler+0x1b0>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	0a9b      	lsrs	r3, r3, #10
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a5f      	ldr	r2, [pc, #380]	@ (8005254 <HAL_DMA_IRQHandler+0x1b4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d04a      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a5d      	ldr	r2, [pc, #372]	@ (8005258 <HAL_DMA_IRQHandler+0x1b8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d045      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a5c      	ldr	r2, [pc, #368]	@ (800525c <HAL_DMA_IRQHandler+0x1bc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d040      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005260 <HAL_DMA_IRQHandler+0x1c0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d03b      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a59      	ldr	r2, [pc, #356]	@ (8005264 <HAL_DMA_IRQHandler+0x1c4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d036      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a57      	ldr	r2, [pc, #348]	@ (8005268 <HAL_DMA_IRQHandler+0x1c8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d031      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a56      	ldr	r2, [pc, #344]	@ (800526c <HAL_DMA_IRQHandler+0x1cc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d02c      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a54      	ldr	r2, [pc, #336]	@ (8005270 <HAL_DMA_IRQHandler+0x1d0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d027      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a53      	ldr	r2, [pc, #332]	@ (8005274 <HAL_DMA_IRQHandler+0x1d4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a51      	ldr	r2, [pc, #324]	@ (8005278 <HAL_DMA_IRQHandler+0x1d8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01d      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a50      	ldr	r2, [pc, #320]	@ (800527c <HAL_DMA_IRQHandler+0x1dc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a4e      	ldr	r2, [pc, #312]	@ (8005280 <HAL_DMA_IRQHandler+0x1e0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a4d      	ldr	r2, [pc, #308]	@ (8005284 <HAL_DMA_IRQHandler+0x1e4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a4b      	ldr	r2, [pc, #300]	@ (8005288 <HAL_DMA_IRQHandler+0x1e8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a4a      	ldr	r2, [pc, #296]	@ (800528c <HAL_DMA_IRQHandler+0x1ec>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_DMA_IRQHandler+0xd2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a48      	ldr	r2, [pc, #288]	@ (8005290 <HAL_DMA_IRQHandler+0x1f0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d101      	bne.n	8005176 <HAL_DMA_IRQHandler+0xd6>
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <HAL_DMA_IRQHandler+0xd8>
 8005176:	2300      	movs	r3, #0
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 842b 	beq.w	80059d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	2208      	movs	r2, #8
 8005188:	409a      	lsls	r2, r3
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 80a2 	beq.w	80052d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a2e      	ldr	r2, [pc, #184]	@ (8005254 <HAL_DMA_IRQHandler+0x1b4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d04a      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005258 <HAL_DMA_IRQHandler+0x1b8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d045      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a2b      	ldr	r2, [pc, #172]	@ (800525c <HAL_DMA_IRQHandler+0x1bc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d040      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005260 <HAL_DMA_IRQHandler+0x1c0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d03b      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a28      	ldr	r2, [pc, #160]	@ (8005264 <HAL_DMA_IRQHandler+0x1c4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d036      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a27      	ldr	r2, [pc, #156]	@ (8005268 <HAL_DMA_IRQHandler+0x1c8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d031      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a25      	ldr	r2, [pc, #148]	@ (800526c <HAL_DMA_IRQHandler+0x1cc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d02c      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a24      	ldr	r2, [pc, #144]	@ (8005270 <HAL_DMA_IRQHandler+0x1d0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d027      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <HAL_DMA_IRQHandler+0x1d4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d022      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a21      	ldr	r2, [pc, #132]	@ (8005278 <HAL_DMA_IRQHandler+0x1d8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d01d      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1f      	ldr	r2, [pc, #124]	@ (800527c <HAL_DMA_IRQHandler+0x1dc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d018      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1e      	ldr	r2, [pc, #120]	@ (8005280 <HAL_DMA_IRQHandler+0x1e0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d013      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1c      	ldr	r2, [pc, #112]	@ (8005284 <HAL_DMA_IRQHandler+0x1e4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00e      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1b      	ldr	r2, [pc, #108]	@ (8005288 <HAL_DMA_IRQHandler+0x1e8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d009      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a19      	ldr	r2, [pc, #100]	@ (800528c <HAL_DMA_IRQHandler+0x1ec>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_DMA_IRQHandler+0x194>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a18      	ldr	r2, [pc, #96]	@ (8005290 <HAL_DMA_IRQHandler+0x1f0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d12f      	bne.n	8005294 <HAL_DMA_IRQHandler+0x1f4>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	bf14      	ite	ne
 8005242:	2301      	movne	r3, #1
 8005244:	2300      	moveq	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e02e      	b.n	80052a8 <HAL_DMA_IRQHandler+0x208>
 800524a:	bf00      	nop
 800524c:	24000098 	.word	0x24000098
 8005250:	1b4e81b5 	.word	0x1b4e81b5
 8005254:	40020010 	.word	0x40020010
 8005258:	40020028 	.word	0x40020028
 800525c:	40020040 	.word	0x40020040
 8005260:	40020058 	.word	0x40020058
 8005264:	40020070 	.word	0x40020070
 8005268:	40020088 	.word	0x40020088
 800526c:	400200a0 	.word	0x400200a0
 8005270:	400200b8 	.word	0x400200b8
 8005274:	40020410 	.word	0x40020410
 8005278:	40020428 	.word	0x40020428
 800527c:	40020440 	.word	0x40020440
 8005280:	40020458 	.word	0x40020458
 8005284:	40020470 	.word	0x40020470
 8005288:	40020488 	.word	0x40020488
 800528c:	400204a0 	.word	0x400204a0
 8005290:	400204b8 	.word	0x400204b8
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bf14      	ite	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	2300      	moveq	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d015      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0204 	bic.w	r2, r2, #4
 80052ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	2208      	movs	r2, #8
 80052c6:	409a      	lsls	r2, r3
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	fa22 f303 	lsr.w	r3, r2, r3
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d06e      	beq.n	80053cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a69      	ldr	r2, [pc, #420]	@ (8005498 <HAL_DMA_IRQHandler+0x3f8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d04a      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a67      	ldr	r2, [pc, #412]	@ (800549c <HAL_DMA_IRQHandler+0x3fc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d045      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a66      	ldr	r2, [pc, #408]	@ (80054a0 <HAL_DMA_IRQHandler+0x400>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d040      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a64      	ldr	r2, [pc, #400]	@ (80054a4 <HAL_DMA_IRQHandler+0x404>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d03b      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a63      	ldr	r2, [pc, #396]	@ (80054a8 <HAL_DMA_IRQHandler+0x408>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d036      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a61      	ldr	r2, [pc, #388]	@ (80054ac <HAL_DMA_IRQHandler+0x40c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d031      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a60      	ldr	r2, [pc, #384]	@ (80054b0 <HAL_DMA_IRQHandler+0x410>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d02c      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a5e      	ldr	r2, [pc, #376]	@ (80054b4 <HAL_DMA_IRQHandler+0x414>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d027      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a5d      	ldr	r2, [pc, #372]	@ (80054b8 <HAL_DMA_IRQHandler+0x418>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a5b      	ldr	r2, [pc, #364]	@ (80054bc <HAL_DMA_IRQHandler+0x41c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01d      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a5a      	ldr	r2, [pc, #360]	@ (80054c0 <HAL_DMA_IRQHandler+0x420>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a58      	ldr	r2, [pc, #352]	@ (80054c4 <HAL_DMA_IRQHandler+0x424>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a57      	ldr	r2, [pc, #348]	@ (80054c8 <HAL_DMA_IRQHandler+0x428>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a55      	ldr	r2, [pc, #340]	@ (80054cc <HAL_DMA_IRQHandler+0x42c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a54      	ldr	r2, [pc, #336]	@ (80054d0 <HAL_DMA_IRQHandler+0x430>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_DMA_IRQHandler+0x2ee>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a52      	ldr	r2, [pc, #328]	@ (80054d4 <HAL_DMA_IRQHandler+0x434>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10a      	bne.n	80053a4 <HAL_DMA_IRQHandler+0x304>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005398:	2b00      	cmp	r3, #0
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e003      	b.n	80053ac <HAL_DMA_IRQHandler+0x30c>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00d      	beq.n	80053cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	2201      	movs	r2, #1
 80053ba:	409a      	lsls	r2, r3
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c4:	f043 0202 	orr.w	r2, r3, #2
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2204      	movs	r2, #4
 80053d6:	409a      	lsls	r2, r3
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 808f 	beq.w	8005500 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005498 <HAL_DMA_IRQHandler+0x3f8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d04a      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a2a      	ldr	r2, [pc, #168]	@ (800549c <HAL_DMA_IRQHandler+0x3fc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d045      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a29      	ldr	r2, [pc, #164]	@ (80054a0 <HAL_DMA_IRQHandler+0x400>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d040      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a27      	ldr	r2, [pc, #156]	@ (80054a4 <HAL_DMA_IRQHandler+0x404>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d03b      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a26      	ldr	r2, [pc, #152]	@ (80054a8 <HAL_DMA_IRQHandler+0x408>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d036      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a24      	ldr	r2, [pc, #144]	@ (80054ac <HAL_DMA_IRQHandler+0x40c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d031      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a23      	ldr	r2, [pc, #140]	@ (80054b0 <HAL_DMA_IRQHandler+0x410>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d02c      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a21      	ldr	r2, [pc, #132]	@ (80054b4 <HAL_DMA_IRQHandler+0x414>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d027      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a20      	ldr	r2, [pc, #128]	@ (80054b8 <HAL_DMA_IRQHandler+0x418>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d022      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1e      	ldr	r2, [pc, #120]	@ (80054bc <HAL_DMA_IRQHandler+0x41c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01d      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1d      	ldr	r2, [pc, #116]	@ (80054c0 <HAL_DMA_IRQHandler+0x420>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1b      	ldr	r2, [pc, #108]	@ (80054c4 <HAL_DMA_IRQHandler+0x424>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1a      	ldr	r2, [pc, #104]	@ (80054c8 <HAL_DMA_IRQHandler+0x428>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a18      	ldr	r2, [pc, #96]	@ (80054cc <HAL_DMA_IRQHandler+0x42c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d009      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a17      	ldr	r2, [pc, #92]	@ (80054d0 <HAL_DMA_IRQHandler+0x430>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <HAL_DMA_IRQHandler+0x3e2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a15      	ldr	r2, [pc, #84]	@ (80054d4 <HAL_DMA_IRQHandler+0x434>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d12a      	bne.n	80054d8 <HAL_DMA_IRQHandler+0x438>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	bf14      	ite	ne
 8005490:	2301      	movne	r3, #1
 8005492:	2300      	moveq	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	e023      	b.n	80054e0 <HAL_DMA_IRQHandler+0x440>
 8005498:	40020010 	.word	0x40020010
 800549c:	40020028 	.word	0x40020028
 80054a0:	40020040 	.word	0x40020040
 80054a4:	40020058 	.word	0x40020058
 80054a8:	40020070 	.word	0x40020070
 80054ac:	40020088 	.word	0x40020088
 80054b0:	400200a0 	.word	0x400200a0
 80054b4:	400200b8 	.word	0x400200b8
 80054b8:	40020410 	.word	0x40020410
 80054bc:	40020428 	.word	0x40020428
 80054c0:	40020440 	.word	0x40020440
 80054c4:	40020458 	.word	0x40020458
 80054c8:	40020470 	.word	0x40020470
 80054cc:	40020488 	.word	0x40020488
 80054d0:	400204a0 	.word	0x400204a0
 80054d4:	400204b8 	.word	0x400204b8
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2300      	movs	r3, #0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00d      	beq.n	8005500 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	2204      	movs	r2, #4
 80054ee:	409a      	lsls	r2, r3
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f8:	f043 0204 	orr.w	r2, r3, #4
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	2210      	movs	r2, #16
 800550a:	409a      	lsls	r2, r3
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80a6 	beq.w	8005662 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a85      	ldr	r2, [pc, #532]	@ (8005730 <HAL_DMA_IRQHandler+0x690>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d04a      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a83      	ldr	r2, [pc, #524]	@ (8005734 <HAL_DMA_IRQHandler+0x694>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d045      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a82      	ldr	r2, [pc, #520]	@ (8005738 <HAL_DMA_IRQHandler+0x698>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d040      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a80      	ldr	r2, [pc, #512]	@ (800573c <HAL_DMA_IRQHandler+0x69c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d03b      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a7f      	ldr	r2, [pc, #508]	@ (8005740 <HAL_DMA_IRQHandler+0x6a0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d036      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a7d      	ldr	r2, [pc, #500]	@ (8005744 <HAL_DMA_IRQHandler+0x6a4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d031      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a7c      	ldr	r2, [pc, #496]	@ (8005748 <HAL_DMA_IRQHandler+0x6a8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d02c      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a7a      	ldr	r2, [pc, #488]	@ (800574c <HAL_DMA_IRQHandler+0x6ac>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d027      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a79      	ldr	r2, [pc, #484]	@ (8005750 <HAL_DMA_IRQHandler+0x6b0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d022      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a77      	ldr	r2, [pc, #476]	@ (8005754 <HAL_DMA_IRQHandler+0x6b4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01d      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a76      	ldr	r2, [pc, #472]	@ (8005758 <HAL_DMA_IRQHandler+0x6b8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d018      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a74      	ldr	r2, [pc, #464]	@ (800575c <HAL_DMA_IRQHandler+0x6bc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d013      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a73      	ldr	r2, [pc, #460]	@ (8005760 <HAL_DMA_IRQHandler+0x6c0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00e      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a71      	ldr	r2, [pc, #452]	@ (8005764 <HAL_DMA_IRQHandler+0x6c4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d009      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a70      	ldr	r2, [pc, #448]	@ (8005768 <HAL_DMA_IRQHandler+0x6c8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d004      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x516>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a6e      	ldr	r2, [pc, #440]	@ (800576c <HAL_DMA_IRQHandler+0x6cc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d10a      	bne.n	80055cc <HAL_DMA_IRQHandler+0x52c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	e009      	b.n	80055e0 <HAL_DMA_IRQHandler+0x540>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bf14      	ite	ne
 80055da:	2301      	movne	r3, #1
 80055dc:	2300      	moveq	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d03e      	beq.n	8005662 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2210      	movs	r2, #16
 80055ee:	409a      	lsls	r2, r3
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d018      	beq.n	8005634 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d108      	bne.n	8005622 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d024      	beq.n	8005662 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	4798      	blx	r3
 8005620:	e01f      	b.n	8005662 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005626:	2b00      	cmp	r3, #0
 8005628:	d01b      	beq.n	8005662 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	4798      	blx	r3
 8005632:	e016      	b.n	8005662 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563e:	2b00      	cmp	r3, #0
 8005640:	d107      	bne.n	8005652 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0208 	bic.w	r2, r2, #8
 8005650:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2220      	movs	r2, #32
 800566c:	409a      	lsls	r2, r3
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	4013      	ands	r3, r2
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 8110 	beq.w	8005898 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a2c      	ldr	r2, [pc, #176]	@ (8005730 <HAL_DMA_IRQHandler+0x690>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d04a      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a2b      	ldr	r2, [pc, #172]	@ (8005734 <HAL_DMA_IRQHandler+0x694>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d045      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a29      	ldr	r2, [pc, #164]	@ (8005738 <HAL_DMA_IRQHandler+0x698>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d040      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a28      	ldr	r2, [pc, #160]	@ (800573c <HAL_DMA_IRQHandler+0x69c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d03b      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a26      	ldr	r2, [pc, #152]	@ (8005740 <HAL_DMA_IRQHandler+0x6a0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d036      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a25      	ldr	r2, [pc, #148]	@ (8005744 <HAL_DMA_IRQHandler+0x6a4>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d031      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a23      	ldr	r2, [pc, #140]	@ (8005748 <HAL_DMA_IRQHandler+0x6a8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d02c      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a22      	ldr	r2, [pc, #136]	@ (800574c <HAL_DMA_IRQHandler+0x6ac>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d027      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a20      	ldr	r2, [pc, #128]	@ (8005750 <HAL_DMA_IRQHandler+0x6b0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d022      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005754 <HAL_DMA_IRQHandler+0x6b4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d01d      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005758 <HAL_DMA_IRQHandler+0x6b8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d018      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1c      	ldr	r2, [pc, #112]	@ (800575c <HAL_DMA_IRQHandler+0x6bc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d013      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005760 <HAL_DMA_IRQHandler+0x6c0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00e      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a19      	ldr	r2, [pc, #100]	@ (8005764 <HAL_DMA_IRQHandler+0x6c4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d009      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a17      	ldr	r2, [pc, #92]	@ (8005768 <HAL_DMA_IRQHandler+0x6c8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d004      	beq.n	8005718 <HAL_DMA_IRQHandler+0x678>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a16      	ldr	r2, [pc, #88]	@ (800576c <HAL_DMA_IRQHandler+0x6cc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d12b      	bne.n	8005770 <HAL_DMA_IRQHandler+0x6d0>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2301      	movne	r3, #1
 8005728:	2300      	moveq	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e02a      	b.n	8005784 <HAL_DMA_IRQHandler+0x6e4>
 800572e:	bf00      	nop
 8005730:	40020010 	.word	0x40020010
 8005734:	40020028 	.word	0x40020028
 8005738:	40020040 	.word	0x40020040
 800573c:	40020058 	.word	0x40020058
 8005740:	40020070 	.word	0x40020070
 8005744:	40020088 	.word	0x40020088
 8005748:	400200a0 	.word	0x400200a0
 800574c:	400200b8 	.word	0x400200b8
 8005750:	40020410 	.word	0x40020410
 8005754:	40020428 	.word	0x40020428
 8005758:	40020440 	.word	0x40020440
 800575c:	40020458 	.word	0x40020458
 8005760:	40020470 	.word	0x40020470
 8005764:	40020488 	.word	0x40020488
 8005768:	400204a0 	.word	0x400204a0
 800576c:	400204b8 	.word	0x400204b8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	bf14      	ite	ne
 800577e:	2301      	movne	r3, #1
 8005780:	2300      	moveq	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8087 	beq.w	8005898 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2220      	movs	r2, #32
 8005794:	409a      	lsls	r2, r3
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d139      	bne.n	800581a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0216 	bic.w	r2, r2, #22
 80057b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d103      	bne.n	80057d6 <HAL_DMA_IRQHandler+0x736>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0208 	bic.w	r2, r2, #8
 80057e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	223f      	movs	r2, #63	@ 0x3f
 80057f0:	409a      	lsls	r2, r3
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8382 	beq.w	8005f14 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4798      	blx	r3
          }
          return;
 8005818:	e37c      	b.n	8005f14 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d018      	beq.n	800585a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d108      	bne.n	8005848 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583a:	2b00      	cmp	r3, #0
 800583c:	d02c      	beq.n	8005898 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
 8005846:	e027      	b.n	8005898 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d023      	beq.n	8005898 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	4798      	blx	r3
 8005858:	e01e      	b.n	8005898 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10f      	bne.n	8005888 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0210 	bic.w	r2, r2, #16
 8005876:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 833e 	beq.w	8005f1e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8088 	beq.w	80059c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2204      	movs	r2, #4
 80058b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a89      	ldr	r2, [pc, #548]	@ (8005ae4 <HAL_DMA_IRQHandler+0xa44>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d04a      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a88      	ldr	r2, [pc, #544]	@ (8005ae8 <HAL_DMA_IRQHandler+0xa48>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d045      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a86      	ldr	r2, [pc, #536]	@ (8005aec <HAL_DMA_IRQHandler+0xa4c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d040      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a85      	ldr	r2, [pc, #532]	@ (8005af0 <HAL_DMA_IRQHandler+0xa50>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d03b      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a83      	ldr	r2, [pc, #524]	@ (8005af4 <HAL_DMA_IRQHandler+0xa54>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d036      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a82      	ldr	r2, [pc, #520]	@ (8005af8 <HAL_DMA_IRQHandler+0xa58>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d031      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a80      	ldr	r2, [pc, #512]	@ (8005afc <HAL_DMA_IRQHandler+0xa5c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d02c      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a7f      	ldr	r2, [pc, #508]	@ (8005b00 <HAL_DMA_IRQHandler+0xa60>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d027      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a7d      	ldr	r2, [pc, #500]	@ (8005b04 <HAL_DMA_IRQHandler+0xa64>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d022      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a7c      	ldr	r2, [pc, #496]	@ (8005b08 <HAL_DMA_IRQHandler+0xa68>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d01d      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a7a      	ldr	r2, [pc, #488]	@ (8005b0c <HAL_DMA_IRQHandler+0xa6c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d018      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a79      	ldr	r2, [pc, #484]	@ (8005b10 <HAL_DMA_IRQHandler+0xa70>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a77      	ldr	r2, [pc, #476]	@ (8005b14 <HAL_DMA_IRQHandler+0xa74>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00e      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a76      	ldr	r2, [pc, #472]	@ (8005b18 <HAL_DMA_IRQHandler+0xa78>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d009      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a74      	ldr	r2, [pc, #464]	@ (8005b1c <HAL_DMA_IRQHandler+0xa7c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_DMA_IRQHandler+0x8b8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a73      	ldr	r2, [pc, #460]	@ (8005b20 <HAL_DMA_IRQHandler+0xa80>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d108      	bne.n	800596a <HAL_DMA_IRQHandler+0x8ca>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0201 	bic.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e007      	b.n	800597a <HAL_DMA_IRQHandler+0x8da>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3301      	adds	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005982:	429a      	cmp	r2, r3
 8005984:	d307      	bcc.n	8005996 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f2      	bne.n	800597a <HAL_DMA_IRQHandler+0x8da>
 8005994:	e000      	b.n	8005998 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005996:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d004      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2203      	movs	r2, #3
 80059aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80059ae:	e003      	b.n	80059b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 82aa 	beq.w	8005f1e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
 80059d2:	e2a4      	b.n	8005f1e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a52      	ldr	r2, [pc, #328]	@ (8005b24 <HAL_DMA_IRQHandler+0xa84>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d04a      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a51      	ldr	r2, [pc, #324]	@ (8005b28 <HAL_DMA_IRQHandler+0xa88>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d045      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a4f      	ldr	r2, [pc, #316]	@ (8005b2c <HAL_DMA_IRQHandler+0xa8c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d040      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a4e      	ldr	r2, [pc, #312]	@ (8005b30 <HAL_DMA_IRQHandler+0xa90>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d03b      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a4c      	ldr	r2, [pc, #304]	@ (8005b34 <HAL_DMA_IRQHandler+0xa94>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d036      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a4b      	ldr	r2, [pc, #300]	@ (8005b38 <HAL_DMA_IRQHandler+0xa98>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d031      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a49      	ldr	r2, [pc, #292]	@ (8005b3c <HAL_DMA_IRQHandler+0xa9c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02c      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a48      	ldr	r2, [pc, #288]	@ (8005b40 <HAL_DMA_IRQHandler+0xaa0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d027      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a46      	ldr	r2, [pc, #280]	@ (8005b44 <HAL_DMA_IRQHandler+0xaa4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d022      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a45      	ldr	r2, [pc, #276]	@ (8005b48 <HAL_DMA_IRQHandler+0xaa8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d01d      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a43      	ldr	r2, [pc, #268]	@ (8005b4c <HAL_DMA_IRQHandler+0xaac>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d018      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a42      	ldr	r2, [pc, #264]	@ (8005b50 <HAL_DMA_IRQHandler+0xab0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a40      	ldr	r2, [pc, #256]	@ (8005b54 <HAL_DMA_IRQHandler+0xab4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00e      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8005b58 <HAL_DMA_IRQHandler+0xab8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a3d      	ldr	r2, [pc, #244]	@ (8005b5c <HAL_DMA_IRQHandler+0xabc>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_DMA_IRQHandler+0x9d4>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a3c      	ldr	r2, [pc, #240]	@ (8005b60 <HAL_DMA_IRQHandler+0xac0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d101      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x9d8>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <HAL_DMA_IRQHandler+0x9da>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 824f 	beq.w	8005f1e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	2204      	movs	r2, #4
 8005a92:	409a      	lsls	r2, r3
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4013      	ands	r3, r2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80dd 	beq.w	8005c58 <HAL_DMA_IRQHandler+0xbb8>
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 80d7 	beq.w	8005c58 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d059      	beq.n	8005b78 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d14a      	bne.n	8005b64 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 8220 	beq.w	8005f18 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ae0:	e21a      	b.n	8005f18 <HAL_DMA_IRQHandler+0xe78>
 8005ae2:	bf00      	nop
 8005ae4:	40020010 	.word	0x40020010
 8005ae8:	40020028 	.word	0x40020028
 8005aec:	40020040 	.word	0x40020040
 8005af0:	40020058 	.word	0x40020058
 8005af4:	40020070 	.word	0x40020070
 8005af8:	40020088 	.word	0x40020088
 8005afc:	400200a0 	.word	0x400200a0
 8005b00:	400200b8 	.word	0x400200b8
 8005b04:	40020410 	.word	0x40020410
 8005b08:	40020428 	.word	0x40020428
 8005b0c:	40020440 	.word	0x40020440
 8005b10:	40020458 	.word	0x40020458
 8005b14:	40020470 	.word	0x40020470
 8005b18:	40020488 	.word	0x40020488
 8005b1c:	400204a0 	.word	0x400204a0
 8005b20:	400204b8 	.word	0x400204b8
 8005b24:	48022c08 	.word	0x48022c08
 8005b28:	48022c1c 	.word	0x48022c1c
 8005b2c:	48022c30 	.word	0x48022c30
 8005b30:	48022c44 	.word	0x48022c44
 8005b34:	48022c58 	.word	0x48022c58
 8005b38:	48022c6c 	.word	0x48022c6c
 8005b3c:	48022c80 	.word	0x48022c80
 8005b40:	48022c94 	.word	0x48022c94
 8005b44:	58025408 	.word	0x58025408
 8005b48:	5802541c 	.word	0x5802541c
 8005b4c:	58025430 	.word	0x58025430
 8005b50:	58025444 	.word	0x58025444
 8005b54:	58025458 	.word	0x58025458
 8005b58:	5802546c 	.word	0x5802546c
 8005b5c:	58025480 	.word	0x58025480
 8005b60:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 81d5 	beq.w	8005f18 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b76:	e1cf      	b.n	8005f18 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d160      	bne.n	8005c44 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a7f      	ldr	r2, [pc, #508]	@ (8005d84 <HAL_DMA_IRQHandler+0xce4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d04a      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a7d      	ldr	r2, [pc, #500]	@ (8005d88 <HAL_DMA_IRQHandler+0xce8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d045      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d8c <HAL_DMA_IRQHandler+0xcec>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d040      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a7a      	ldr	r2, [pc, #488]	@ (8005d90 <HAL_DMA_IRQHandler+0xcf0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d03b      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a79      	ldr	r2, [pc, #484]	@ (8005d94 <HAL_DMA_IRQHandler+0xcf4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d036      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a77      	ldr	r2, [pc, #476]	@ (8005d98 <HAL_DMA_IRQHandler+0xcf8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d031      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a76      	ldr	r2, [pc, #472]	@ (8005d9c <HAL_DMA_IRQHandler+0xcfc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d02c      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a74      	ldr	r2, [pc, #464]	@ (8005da0 <HAL_DMA_IRQHandler+0xd00>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d027      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a73      	ldr	r2, [pc, #460]	@ (8005da4 <HAL_DMA_IRQHandler+0xd04>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a71      	ldr	r2, [pc, #452]	@ (8005da8 <HAL_DMA_IRQHandler+0xd08>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01d      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a70      	ldr	r2, [pc, #448]	@ (8005dac <HAL_DMA_IRQHandler+0xd0c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d018      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a6e      	ldr	r2, [pc, #440]	@ (8005db0 <HAL_DMA_IRQHandler+0xd10>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a6d      	ldr	r2, [pc, #436]	@ (8005db4 <HAL_DMA_IRQHandler+0xd14>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a6b      	ldr	r2, [pc, #428]	@ (8005db8 <HAL_DMA_IRQHandler+0xd18>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a6a      	ldr	r2, [pc, #424]	@ (8005dbc <HAL_DMA_IRQHandler+0xd1c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_DMA_IRQHandler+0xb82>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a68      	ldr	r2, [pc, #416]	@ (8005dc0 <HAL_DMA_IRQHandler+0xd20>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d108      	bne.n	8005c34 <HAL_DMA_IRQHandler+0xb94>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0208 	bic.w	r2, r2, #8
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e007      	b.n	8005c44 <HAL_DMA_IRQHandler+0xba4>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0204 	bic.w	r2, r2, #4
 8005c42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8165 	beq.w	8005f18 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c56:	e15f      	b.n	8005f18 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	2202      	movs	r2, #2
 8005c62:	409a      	lsls	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80c5 	beq.w	8005df8 <HAL_DMA_IRQHandler+0xd58>
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 80bf 	beq.w	8005df8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	2202      	movs	r2, #2
 8005c84:	409a      	lsls	r2, r3
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d018      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 813a 	beq.w	8005f1c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cb0:	e134      	b.n	8005f1c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8130 	beq.w	8005f1c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cc4:	e12a      	b.n	8005f1c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f040 8089 	bne.w	8005de4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8005d84 <HAL_DMA_IRQHandler+0xce4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d04a      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a29      	ldr	r2, [pc, #164]	@ (8005d88 <HAL_DMA_IRQHandler+0xce8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d045      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a28      	ldr	r2, [pc, #160]	@ (8005d8c <HAL_DMA_IRQHandler+0xcec>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d040      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a26      	ldr	r2, [pc, #152]	@ (8005d90 <HAL_DMA_IRQHandler+0xcf0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d03b      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a25      	ldr	r2, [pc, #148]	@ (8005d94 <HAL_DMA_IRQHandler+0xcf4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d036      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a23      	ldr	r2, [pc, #140]	@ (8005d98 <HAL_DMA_IRQHandler+0xcf8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d031      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a22      	ldr	r2, [pc, #136]	@ (8005d9c <HAL_DMA_IRQHandler+0xcfc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d02c      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a20      	ldr	r2, [pc, #128]	@ (8005da0 <HAL_DMA_IRQHandler+0xd00>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d027      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a1f      	ldr	r2, [pc, #124]	@ (8005da4 <HAL_DMA_IRQHandler+0xd04>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d022      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1d      	ldr	r2, [pc, #116]	@ (8005da8 <HAL_DMA_IRQHandler+0xd08>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01d      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dac <HAL_DMA_IRQHandler+0xd0c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d018      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1a      	ldr	r2, [pc, #104]	@ (8005db0 <HAL_DMA_IRQHandler+0xd10>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a19      	ldr	r2, [pc, #100]	@ (8005db4 <HAL_DMA_IRQHandler+0xd14>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00e      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a17      	ldr	r2, [pc, #92]	@ (8005db8 <HAL_DMA_IRQHandler+0xd18>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d009      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a16      	ldr	r2, [pc, #88]	@ (8005dbc <HAL_DMA_IRQHandler+0xd1c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d004      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xcd2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a14      	ldr	r2, [pc, #80]	@ (8005dc0 <HAL_DMA_IRQHandler+0xd20>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d128      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0xd24>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0214 	bic.w	r2, r2, #20
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e027      	b.n	8005dd4 <HAL_DMA_IRQHandler+0xd34>
 8005d84:	40020010 	.word	0x40020010
 8005d88:	40020028 	.word	0x40020028
 8005d8c:	40020040 	.word	0x40020040
 8005d90:	40020058 	.word	0x40020058
 8005d94:	40020070 	.word	0x40020070
 8005d98:	40020088 	.word	0x40020088
 8005d9c:	400200a0 	.word	0x400200a0
 8005da0:	400200b8 	.word	0x400200b8
 8005da4:	40020410 	.word	0x40020410
 8005da8:	40020428 	.word	0x40020428
 8005dac:	40020440 	.word	0x40020440
 8005db0:	40020458 	.word	0x40020458
 8005db4:	40020470 	.word	0x40020470
 8005db8:	40020488 	.word	0x40020488
 8005dbc:	400204a0 	.word	0x400204a0
 8005dc0:	400204b8 	.word	0x400204b8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 020a 	bic.w	r2, r2, #10
 8005dd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8097 	beq.w	8005f1c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005df6:	e091      	b.n	8005f1c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	2208      	movs	r2, #8
 8005e02:	409a      	lsls	r2, r3
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8088 	beq.w	8005f1e <HAL_DMA_IRQHandler+0xe7e>
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8082 	beq.w	8005f1e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a41      	ldr	r2, [pc, #260]	@ (8005f24 <HAL_DMA_IRQHandler+0xe84>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d04a      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a3f      	ldr	r2, [pc, #252]	@ (8005f28 <HAL_DMA_IRQHandler+0xe88>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d045      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a3e      	ldr	r2, [pc, #248]	@ (8005f2c <HAL_DMA_IRQHandler+0xe8c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d040      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f30 <HAL_DMA_IRQHandler+0xe90>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d03b      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a3b      	ldr	r2, [pc, #236]	@ (8005f34 <HAL_DMA_IRQHandler+0xe94>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d036      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a39      	ldr	r2, [pc, #228]	@ (8005f38 <HAL_DMA_IRQHandler+0xe98>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d031      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a38      	ldr	r2, [pc, #224]	@ (8005f3c <HAL_DMA_IRQHandler+0xe9c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d02c      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a36      	ldr	r2, [pc, #216]	@ (8005f40 <HAL_DMA_IRQHandler+0xea0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d027      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a35      	ldr	r2, [pc, #212]	@ (8005f44 <HAL_DMA_IRQHandler+0xea4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d022      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a33      	ldr	r2, [pc, #204]	@ (8005f48 <HAL_DMA_IRQHandler+0xea8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01d      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a32      	ldr	r2, [pc, #200]	@ (8005f4c <HAL_DMA_IRQHandler+0xeac>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d018      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a30      	ldr	r2, [pc, #192]	@ (8005f50 <HAL_DMA_IRQHandler+0xeb0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a2f      	ldr	r2, [pc, #188]	@ (8005f54 <HAL_DMA_IRQHandler+0xeb4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f58 <HAL_DMA_IRQHandler+0xeb8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8005f5c <HAL_DMA_IRQHandler+0xebc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_DMA_IRQHandler+0xe1a>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8005f60 <HAL_DMA_IRQHandler+0xec0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d108      	bne.n	8005ecc <HAL_DMA_IRQHandler+0xe2c>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 021c 	bic.w	r2, r2, #28
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e007      	b.n	8005edc <HAL_DMA_IRQHandler+0xe3c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 020e 	bic.w	r2, r2, #14
 8005eda:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
 8005f12:	e004      	b.n	8005f1e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005f14:	bf00      	nop
 8005f16:	e002      	b.n	8005f1e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f18:	bf00      	nop
 8005f1a:	e000      	b.n	8005f1e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f1c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f1e:	3728      	adds	r7, #40	@ 0x28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40020010 	.word	0x40020010
 8005f28:	40020028 	.word	0x40020028
 8005f2c:	40020040 	.word	0x40020040
 8005f30:	40020058 	.word	0x40020058
 8005f34:	40020070 	.word	0x40020070
 8005f38:	40020088 	.word	0x40020088
 8005f3c:	400200a0 	.word	0x400200a0
 8005f40:	400200b8 	.word	0x400200b8
 8005f44:	40020410 	.word	0x40020410
 8005f48:	40020428 	.word	0x40020428
 8005f4c:	40020440 	.word	0x40020440
 8005f50:	40020458 	.word	0x40020458
 8005f54:	40020470 	.word	0x40020470
 8005f58:	40020488 	.word	0x40020488
 8005f5c:	400204a0 	.word	0x400204a0
 8005f60:	400204b8 	.word	0x400204b8

08005f64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f76:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f7c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a7f      	ldr	r2, [pc, #508]	@ (8006180 <DMA_SetConfig+0x21c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d072      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a7d      	ldr	r2, [pc, #500]	@ (8006184 <DMA_SetConfig+0x220>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d06d      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a7c      	ldr	r2, [pc, #496]	@ (8006188 <DMA_SetConfig+0x224>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d068      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a7a      	ldr	r2, [pc, #488]	@ (800618c <DMA_SetConfig+0x228>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d063      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a79      	ldr	r2, [pc, #484]	@ (8006190 <DMA_SetConfig+0x22c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d05e      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a77      	ldr	r2, [pc, #476]	@ (8006194 <DMA_SetConfig+0x230>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d059      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a76      	ldr	r2, [pc, #472]	@ (8006198 <DMA_SetConfig+0x234>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d054      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a74      	ldr	r2, [pc, #464]	@ (800619c <DMA_SetConfig+0x238>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d04f      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a73      	ldr	r2, [pc, #460]	@ (80061a0 <DMA_SetConfig+0x23c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d04a      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a71      	ldr	r2, [pc, #452]	@ (80061a4 <DMA_SetConfig+0x240>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d045      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a70      	ldr	r2, [pc, #448]	@ (80061a8 <DMA_SetConfig+0x244>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d040      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a6e      	ldr	r2, [pc, #440]	@ (80061ac <DMA_SetConfig+0x248>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d03b      	beq.n	800606e <DMA_SetConfig+0x10a>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a6d      	ldr	r2, [pc, #436]	@ (80061b0 <DMA_SetConfig+0x24c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d036      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a6b      	ldr	r2, [pc, #428]	@ (80061b4 <DMA_SetConfig+0x250>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d031      	beq.n	800606e <DMA_SetConfig+0x10a>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a6a      	ldr	r2, [pc, #424]	@ (80061b8 <DMA_SetConfig+0x254>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d02c      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a68      	ldr	r2, [pc, #416]	@ (80061bc <DMA_SetConfig+0x258>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d027      	beq.n	800606e <DMA_SetConfig+0x10a>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a67      	ldr	r2, [pc, #412]	@ (80061c0 <DMA_SetConfig+0x25c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d022      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a65      	ldr	r2, [pc, #404]	@ (80061c4 <DMA_SetConfig+0x260>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01d      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a64      	ldr	r2, [pc, #400]	@ (80061c8 <DMA_SetConfig+0x264>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d018      	beq.n	800606e <DMA_SetConfig+0x10a>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a62      	ldr	r2, [pc, #392]	@ (80061cc <DMA_SetConfig+0x268>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d013      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a61      	ldr	r2, [pc, #388]	@ (80061d0 <DMA_SetConfig+0x26c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00e      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a5f      	ldr	r2, [pc, #380]	@ (80061d4 <DMA_SetConfig+0x270>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d009      	beq.n	800606e <DMA_SetConfig+0x10a>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a5e      	ldr	r2, [pc, #376]	@ (80061d8 <DMA_SetConfig+0x274>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <DMA_SetConfig+0x10a>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a5c      	ldr	r2, [pc, #368]	@ (80061dc <DMA_SetConfig+0x278>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d101      	bne.n	8006072 <DMA_SetConfig+0x10e>
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <DMA_SetConfig+0x110>
 8006072:	2300      	movs	r3, #0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00d      	beq.n	8006094 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006080:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006092:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a39      	ldr	r2, [pc, #228]	@ (8006180 <DMA_SetConfig+0x21c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d04a      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a38      	ldr	r2, [pc, #224]	@ (8006184 <DMA_SetConfig+0x220>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d045      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a36      	ldr	r2, [pc, #216]	@ (8006188 <DMA_SetConfig+0x224>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d040      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a35      	ldr	r2, [pc, #212]	@ (800618c <DMA_SetConfig+0x228>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d03b      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a33      	ldr	r2, [pc, #204]	@ (8006190 <DMA_SetConfig+0x22c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d036      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a32      	ldr	r2, [pc, #200]	@ (8006194 <DMA_SetConfig+0x230>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d031      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a30      	ldr	r2, [pc, #192]	@ (8006198 <DMA_SetConfig+0x234>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d02c      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a2f      	ldr	r2, [pc, #188]	@ (800619c <DMA_SetConfig+0x238>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d027      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a2d      	ldr	r2, [pc, #180]	@ (80061a0 <DMA_SetConfig+0x23c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d022      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a2c      	ldr	r2, [pc, #176]	@ (80061a4 <DMA_SetConfig+0x240>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d01d      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2a      	ldr	r2, [pc, #168]	@ (80061a8 <DMA_SetConfig+0x244>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d018      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a29      	ldr	r2, [pc, #164]	@ (80061ac <DMA_SetConfig+0x248>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a27      	ldr	r2, [pc, #156]	@ (80061b0 <DMA_SetConfig+0x24c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00e      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a26      	ldr	r2, [pc, #152]	@ (80061b4 <DMA_SetConfig+0x250>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d009      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a24      	ldr	r2, [pc, #144]	@ (80061b8 <DMA_SetConfig+0x254>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <DMA_SetConfig+0x1d0>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a23      	ldr	r2, [pc, #140]	@ (80061bc <DMA_SetConfig+0x258>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d101      	bne.n	8006138 <DMA_SetConfig+0x1d4>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <DMA_SetConfig+0x1d6>
 8006138:	2300      	movs	r3, #0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d059      	beq.n	80061f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	223f      	movs	r2, #63	@ 0x3f
 8006148:	409a      	lsls	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800615c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2b40      	cmp	r3, #64	@ 0x40
 800616c:	d138      	bne.n	80061e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800617e:	e0ae      	b.n	80062de <DMA_SetConfig+0x37a>
 8006180:	40020010 	.word	0x40020010
 8006184:	40020028 	.word	0x40020028
 8006188:	40020040 	.word	0x40020040
 800618c:	40020058 	.word	0x40020058
 8006190:	40020070 	.word	0x40020070
 8006194:	40020088 	.word	0x40020088
 8006198:	400200a0 	.word	0x400200a0
 800619c:	400200b8 	.word	0x400200b8
 80061a0:	40020410 	.word	0x40020410
 80061a4:	40020428 	.word	0x40020428
 80061a8:	40020440 	.word	0x40020440
 80061ac:	40020458 	.word	0x40020458
 80061b0:	40020470 	.word	0x40020470
 80061b4:	40020488 	.word	0x40020488
 80061b8:	400204a0 	.word	0x400204a0
 80061bc:	400204b8 	.word	0x400204b8
 80061c0:	58025408 	.word	0x58025408
 80061c4:	5802541c 	.word	0x5802541c
 80061c8:	58025430 	.word	0x58025430
 80061cc:	58025444 	.word	0x58025444
 80061d0:	58025458 	.word	0x58025458
 80061d4:	5802546c 	.word	0x5802546c
 80061d8:	58025480 	.word	0x58025480
 80061dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	60da      	str	r2, [r3, #12]
}
 80061f0:	e075      	b.n	80062de <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a3d      	ldr	r2, [pc, #244]	@ (80062ec <DMA_SetConfig+0x388>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d04a      	beq.n	8006292 <DMA_SetConfig+0x32e>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a3b      	ldr	r2, [pc, #236]	@ (80062f0 <DMA_SetConfig+0x38c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d045      	beq.n	8006292 <DMA_SetConfig+0x32e>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a3a      	ldr	r2, [pc, #232]	@ (80062f4 <DMA_SetConfig+0x390>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d040      	beq.n	8006292 <DMA_SetConfig+0x32e>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a38      	ldr	r2, [pc, #224]	@ (80062f8 <DMA_SetConfig+0x394>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d03b      	beq.n	8006292 <DMA_SetConfig+0x32e>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a37      	ldr	r2, [pc, #220]	@ (80062fc <DMA_SetConfig+0x398>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d036      	beq.n	8006292 <DMA_SetConfig+0x32e>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a35      	ldr	r2, [pc, #212]	@ (8006300 <DMA_SetConfig+0x39c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d031      	beq.n	8006292 <DMA_SetConfig+0x32e>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a34      	ldr	r2, [pc, #208]	@ (8006304 <DMA_SetConfig+0x3a0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d02c      	beq.n	8006292 <DMA_SetConfig+0x32e>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a32      	ldr	r2, [pc, #200]	@ (8006308 <DMA_SetConfig+0x3a4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d027      	beq.n	8006292 <DMA_SetConfig+0x32e>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a31      	ldr	r2, [pc, #196]	@ (800630c <DMA_SetConfig+0x3a8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d022      	beq.n	8006292 <DMA_SetConfig+0x32e>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2f      	ldr	r2, [pc, #188]	@ (8006310 <DMA_SetConfig+0x3ac>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d01d      	beq.n	8006292 <DMA_SetConfig+0x32e>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2e      	ldr	r2, [pc, #184]	@ (8006314 <DMA_SetConfig+0x3b0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d018      	beq.n	8006292 <DMA_SetConfig+0x32e>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a2c      	ldr	r2, [pc, #176]	@ (8006318 <DMA_SetConfig+0x3b4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <DMA_SetConfig+0x32e>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <DMA_SetConfig+0x3b8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00e      	beq.n	8006292 <DMA_SetConfig+0x32e>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a29      	ldr	r2, [pc, #164]	@ (8006320 <DMA_SetConfig+0x3bc>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d009      	beq.n	8006292 <DMA_SetConfig+0x32e>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a28      	ldr	r2, [pc, #160]	@ (8006324 <DMA_SetConfig+0x3c0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d004      	beq.n	8006292 <DMA_SetConfig+0x32e>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a26      	ldr	r2, [pc, #152]	@ (8006328 <DMA_SetConfig+0x3c4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d101      	bne.n	8006296 <DMA_SetConfig+0x332>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <DMA_SetConfig+0x334>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d020      	beq.n	80062de <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2201      	movs	r2, #1
 80062a6:	409a      	lsls	r2, r3
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b40      	cmp	r3, #64	@ 0x40
 80062ba:	d108      	bne.n	80062ce <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	60da      	str	r2, [r3, #12]
}
 80062cc:	e007      	b.n	80062de <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	60da      	str	r2, [r3, #12]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	48022c08 	.word	0x48022c08
 80062f0:	48022c1c 	.word	0x48022c1c
 80062f4:	48022c30 	.word	0x48022c30
 80062f8:	48022c44 	.word	0x48022c44
 80062fc:	48022c58 	.word	0x48022c58
 8006300:	48022c6c 	.word	0x48022c6c
 8006304:	48022c80 	.word	0x48022c80
 8006308:	48022c94 	.word	0x48022c94
 800630c:	58025408 	.word	0x58025408
 8006310:	5802541c 	.word	0x5802541c
 8006314:	58025430 	.word	0x58025430
 8006318:	58025444 	.word	0x58025444
 800631c:	58025458 	.word	0x58025458
 8006320:	5802546c 	.word	0x5802546c
 8006324:	58025480 	.word	0x58025480
 8006328:	58025494 	.word	0x58025494

0800632c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a42      	ldr	r2, [pc, #264]	@ (8006444 <DMA_CalcBaseAndBitshift+0x118>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d04a      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a41      	ldr	r2, [pc, #260]	@ (8006448 <DMA_CalcBaseAndBitshift+0x11c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d045      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a3f      	ldr	r2, [pc, #252]	@ (800644c <DMA_CalcBaseAndBitshift+0x120>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d040      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a3e      	ldr	r2, [pc, #248]	@ (8006450 <DMA_CalcBaseAndBitshift+0x124>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d03b      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a3c      	ldr	r2, [pc, #240]	@ (8006454 <DMA_CalcBaseAndBitshift+0x128>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d036      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a3b      	ldr	r2, [pc, #236]	@ (8006458 <DMA_CalcBaseAndBitshift+0x12c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d031      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a39      	ldr	r2, [pc, #228]	@ (800645c <DMA_CalcBaseAndBitshift+0x130>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d02c      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a38      	ldr	r2, [pc, #224]	@ (8006460 <DMA_CalcBaseAndBitshift+0x134>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d027      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a36      	ldr	r2, [pc, #216]	@ (8006464 <DMA_CalcBaseAndBitshift+0x138>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d022      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a35      	ldr	r2, [pc, #212]	@ (8006468 <DMA_CalcBaseAndBitshift+0x13c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d01d      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a33      	ldr	r2, [pc, #204]	@ (800646c <DMA_CalcBaseAndBitshift+0x140>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d018      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a32      	ldr	r2, [pc, #200]	@ (8006470 <DMA_CalcBaseAndBitshift+0x144>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d013      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a30      	ldr	r2, [pc, #192]	@ (8006474 <DMA_CalcBaseAndBitshift+0x148>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00e      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006478 <DMA_CalcBaseAndBitshift+0x14c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d009      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2d      	ldr	r2, [pc, #180]	@ (800647c <DMA_CalcBaseAndBitshift+0x150>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <DMA_CalcBaseAndBitshift+0xa8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006480 <DMA_CalcBaseAndBitshift+0x154>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d101      	bne.n	80063d8 <DMA_CalcBaseAndBitshift+0xac>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <DMA_CalcBaseAndBitshift+0xae>
 80063d8:	2300      	movs	r3, #0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d024      	beq.n	8006428 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	3b10      	subs	r3, #16
 80063e6:	4a27      	ldr	r2, [pc, #156]	@ (8006484 <DMA_CalcBaseAndBitshift+0x158>)
 80063e8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	4a24      	ldr	r2, [pc, #144]	@ (8006488 <DMA_CalcBaseAndBitshift+0x15c>)
 80063f8:	5cd3      	ldrb	r3, [r2, r3]
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b03      	cmp	r3, #3
 8006404:	d908      	bls.n	8006418 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	4b1f      	ldr	r3, [pc, #124]	@ (800648c <DMA_CalcBaseAndBitshift+0x160>)
 800640e:	4013      	ands	r3, r2
 8006410:	1d1a      	adds	r2, r3, #4
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	659a      	str	r2, [r3, #88]	@ 0x58
 8006416:	e00d      	b.n	8006434 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	4b1b      	ldr	r3, [pc, #108]	@ (800648c <DMA_CalcBaseAndBitshift+0x160>)
 8006420:	4013      	ands	r3, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6593      	str	r3, [r2, #88]	@ 0x58
 8006426:	e005      	b.n	8006434 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	40020010 	.word	0x40020010
 8006448:	40020028 	.word	0x40020028
 800644c:	40020040 	.word	0x40020040
 8006450:	40020058 	.word	0x40020058
 8006454:	40020070 	.word	0x40020070
 8006458:	40020088 	.word	0x40020088
 800645c:	400200a0 	.word	0x400200a0
 8006460:	400200b8 	.word	0x400200b8
 8006464:	40020410 	.word	0x40020410
 8006468:	40020428 	.word	0x40020428
 800646c:	40020440 	.word	0x40020440
 8006470:	40020458 	.word	0x40020458
 8006474:	40020470 	.word	0x40020470
 8006478:	40020488 	.word	0x40020488
 800647c:	400204a0 	.word	0x400204a0
 8006480:	400204b8 	.word	0x400204b8
 8006484:	aaaaaaab 	.word	0xaaaaaaab
 8006488:	08012dc8 	.word	0x08012dc8
 800648c:	fffffc00 	.word	0xfffffc00

08006490 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d120      	bne.n	80064e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d858      	bhi.n	800655e <DMA_CheckFifoParam+0xce>
 80064ac:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <DMA_CheckFifoParam+0x24>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	080064c5 	.word	0x080064c5
 80064b8:	080064d7 	.word	0x080064d7
 80064bc:	080064c5 	.word	0x080064c5
 80064c0:	0800655f 	.word	0x0800655f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d048      	beq.n	8006562 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064d4:	e045      	b.n	8006562 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80064de:	d142      	bne.n	8006566 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064e4:	e03f      	b.n	8006566 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064ee:	d123      	bne.n	8006538 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d838      	bhi.n	800656a <DMA_CheckFifoParam+0xda>
 80064f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006500 <DMA_CheckFifoParam+0x70>)
 80064fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fe:	bf00      	nop
 8006500:	08006511 	.word	0x08006511
 8006504:	08006517 	.word	0x08006517
 8006508:	08006511 	.word	0x08006511
 800650c:	08006529 	.word	0x08006529
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
        break;
 8006514:	e030      	b.n	8006578 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d025      	beq.n	800656e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006526:	e022      	b.n	800656e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006530:	d11f      	bne.n	8006572 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006536:	e01c      	b.n	8006572 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653c:	2b02      	cmp	r3, #2
 800653e:	d902      	bls.n	8006546 <DMA_CheckFifoParam+0xb6>
 8006540:	2b03      	cmp	r3, #3
 8006542:	d003      	beq.n	800654c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006544:	e018      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	73fb      	strb	r3, [r7, #15]
        break;
 800654a:	e015      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006550:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00e      	beq.n	8006576 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
    break;
 800655c:	e00b      	b.n	8006576 <DMA_CheckFifoParam+0xe6>
        break;
 800655e:	bf00      	nop
 8006560:	e00a      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
        break;
 8006562:	bf00      	nop
 8006564:	e008      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
        break;
 8006566:	bf00      	nop
 8006568:	e006      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
        break;
 800656a:	bf00      	nop
 800656c:	e004      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
        break;
 800656e:	bf00      	nop
 8006570:	e002      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
        break;
 8006572:	bf00      	nop
 8006574:	e000      	b.n	8006578 <DMA_CheckFifoParam+0xe8>
    break;
 8006576:	bf00      	nop
    }
  }

  return status;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop

08006588 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a38      	ldr	r2, [pc, #224]	@ (800667c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d022      	beq.n	80065e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a36      	ldr	r2, [pc, #216]	@ (8006680 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d01d      	beq.n	80065e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a35      	ldr	r2, [pc, #212]	@ (8006684 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d018      	beq.n	80065e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a33      	ldr	r2, [pc, #204]	@ (8006688 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d013      	beq.n	80065e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a32      	ldr	r2, [pc, #200]	@ (800668c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00e      	beq.n	80065e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a30      	ldr	r2, [pc, #192]	@ (8006690 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d009      	beq.n	80065e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a2f      	ldr	r2, [pc, #188]	@ (8006694 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d004      	beq.n	80065e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006698 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d101      	bne.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e000      	b.n	80065ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80065ea:	2300      	movs	r3, #0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01a      	beq.n	8006626 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	3b08      	subs	r3, #8
 80065f8:	4a28      	ldr	r2, [pc, #160]	@ (800669c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80065fa:	fba2 2303 	umull	r2, r3, r2, r3
 80065fe:	091b      	lsrs	r3, r3, #4
 8006600:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4b26      	ldr	r3, [pc, #152]	@ (80066a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	461a      	mov	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a24      	ldr	r2, [pc, #144]	@ (80066a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006614:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	2201      	movs	r2, #1
 800661e:	409a      	lsls	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006624:	e024      	b.n	8006670 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	3b10      	subs	r3, #16
 800662e:	4a1e      	ldr	r2, [pc, #120]	@ (80066a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	091b      	lsrs	r3, r3, #4
 8006636:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4a1c      	ldr	r2, [pc, #112]	@ (80066ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d806      	bhi.n	800664e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4a1b      	ldr	r2, [pc, #108]	@ (80066b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d902      	bls.n	800664e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3308      	adds	r3, #8
 800664c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4b18      	ldr	r3, [pc, #96]	@ (80066b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	461a      	mov	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a16      	ldr	r2, [pc, #88]	@ (80066b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006660:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	2201      	movs	r2, #1
 800666a:	409a      	lsls	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006670:	bf00      	nop
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	58025408 	.word	0x58025408
 8006680:	5802541c 	.word	0x5802541c
 8006684:	58025430 	.word	0x58025430
 8006688:	58025444 	.word	0x58025444
 800668c:	58025458 	.word	0x58025458
 8006690:	5802546c 	.word	0x5802546c
 8006694:	58025480 	.word	0x58025480
 8006698:	58025494 	.word	0x58025494
 800669c:	cccccccd 	.word	0xcccccccd
 80066a0:	16009600 	.word	0x16009600
 80066a4:	58025880 	.word	0x58025880
 80066a8:	aaaaaaab 	.word	0xaaaaaaab
 80066ac:	400204b8 	.word	0x400204b8
 80066b0:	4002040f 	.word	0x4002040f
 80066b4:	10008200 	.word	0x10008200
 80066b8:	40020880 	.word	0x40020880

080066bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d04a      	beq.n	8006768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d847      	bhi.n	8006768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a25      	ldr	r2, [pc, #148]	@ (8006774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d022      	beq.n	8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a24      	ldr	r2, [pc, #144]	@ (8006778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d01d      	beq.n	8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a22      	ldr	r2, [pc, #136]	@ (800677c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d018      	beq.n	8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a21      	ldr	r2, [pc, #132]	@ (8006780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1f      	ldr	r2, [pc, #124]	@ (8006784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00e      	beq.n	8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1e      	ldr	r2, [pc, #120]	@ (8006788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d009      	beq.n	8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1c      	ldr	r2, [pc, #112]	@ (800678c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d004      	beq.n	8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1b      	ldr	r2, [pc, #108]	@ (8006790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d101      	bne.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4b17      	ldr	r3, [pc, #92]	@ (8006794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a15      	ldr	r2, [pc, #84]	@ (8006798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006744:	671a      	str	r2, [r3, #112]	@ 0x70
 8006746:	e009      	b.n	800675c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4b14      	ldr	r3, [pc, #80]	@ (800679c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	461a      	mov	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a11      	ldr	r2, [pc, #68]	@ (80067a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800675a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3b01      	subs	r3, #1
 8006760:	2201      	movs	r2, #1
 8006762:	409a      	lsls	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006768:	bf00      	nop
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	58025408 	.word	0x58025408
 8006778:	5802541c 	.word	0x5802541c
 800677c:	58025430 	.word	0x58025430
 8006780:	58025444 	.word	0x58025444
 8006784:	58025458 	.word	0x58025458
 8006788:	5802546c 	.word	0x5802546c
 800678c:	58025480 	.word	0x58025480
 8006790:	58025494 	.word	0x58025494
 8006794:	1600963f 	.word	0x1600963f
 8006798:	58025940 	.word	0x58025940
 800679c:	1000823f 	.word	0x1000823f
 80067a0:	40020940 	.word	0x40020940

080067a4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b098      	sub	sp, #96	@ 0x60
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80067ac:	4a84      	ldr	r2, [pc, #528]	@ (80069c0 <HAL_FDCAN_Init+0x21c>)
 80067ae:	f107 030c 	add.w	r3, r7, #12
 80067b2:	4611      	mov	r1, r2
 80067b4:	224c      	movs	r2, #76	@ 0x4c
 80067b6:	4618      	mov	r0, r3
 80067b8:	f00c f948 	bl	8012a4c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e1c6      	b.n	8006b54 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a7e      	ldr	r2, [pc, #504]	@ (80069c4 <HAL_FDCAN_Init+0x220>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d106      	bne.n	80067de <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80067d8:	461a      	mov	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fb faf8 	bl	8001de8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0210 	bic.w	r2, r2, #16
 8006806:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006808:	f7fc ff36 	bl	8003678 <HAL_GetTick>
 800680c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800680e:	e014      	b.n	800683a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006810:	f7fc ff32 	bl	8003678 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b0a      	cmp	r3, #10
 800681c:	d90d      	bls.n	800683a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006824:	f043 0201 	orr.w	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2203      	movs	r2, #3
 8006832:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e18c      	b.n	8006b54 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b08      	cmp	r3, #8
 8006846:	d0e3      	beq.n	8006810 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006858:	f7fc ff0e 	bl	8003678 <HAL_GetTick>
 800685c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800685e:	e014      	b.n	800688a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006860:	f7fc ff0a 	bl	8003678 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b0a      	cmp	r3, #10
 800686c:	d90d      	bls.n	800688a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006874:	f043 0201 	orr.w	r2, r3, #1
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2203      	movs	r2, #3
 8006882:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e164      	b.n	8006b54 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d0e3      	beq.n	8006860 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699a      	ldr	r2, [r3, #24]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0202 	orr.w	r2, r2, #2
 80068a6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	7c1b      	ldrb	r3, [r3, #16]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d108      	bne.n	80068c2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068be:	619a      	str	r2, [r3, #24]
 80068c0:	e007      	b.n	80068d2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	7c5b      	ldrb	r3, [r3, #17]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d108      	bne.n	80068ec <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068e8:	619a      	str	r2, [r3, #24]
 80068ea:	e007      	b.n	80068fc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80068fa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	7c9b      	ldrb	r3, [r3, #18]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d108      	bne.n	8006916 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006912:	619a      	str	r2, [r3, #24]
 8006914:	e007      	b.n	8006926 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699a      	ldr	r2, [r3, #24]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006924:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	699a      	ldr	r2, [r3, #24]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800694a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0210 	bic.w	r2, r2, #16
 800695a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d108      	bne.n	8006976 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0204 	orr.w	r2, r2, #4
 8006972:	619a      	str	r2, [r3, #24]
 8006974:	e030      	b.n	80069d8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d02c      	beq.n	80069d8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d020      	beq.n	80069c8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699a      	ldr	r2, [r3, #24]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006994:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0210 	orr.w	r2, r2, #16
 80069a4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d114      	bne.n	80069d8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0220 	orr.w	r2, r2, #32
 80069bc:	619a      	str	r2, [r3, #24]
 80069be:	e00b      	b.n	80069d8 <HAL_FDCAN_Init+0x234>
 80069c0:	08012d24 	.word	0x08012d24
 80069c4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699a      	ldr	r2, [r3, #24]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0220 	orr.w	r2, r2, #32
 80069d6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	3b01      	subs	r3, #1
 80069de:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80069e8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80069f0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006a00:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a02:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a0c:	d115      	bne.n	8006a3a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a12:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a1c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a22:	3b01      	subs	r3, #1
 8006a24:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a26:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a36:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a38:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a60:	4413      	add	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d011      	beq.n	8006a8a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006a6e:	f023 0107 	bic.w	r1, r3, #7
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	3360      	adds	r3, #96	@ 0x60
 8006a7a:	443b      	add	r3, r7
 8006a7c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d011      	beq.n	8006ab6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a9a:	f023 0107 	bic.w	r1, r3, #7
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	3360      	adds	r3, #96	@ 0x60
 8006aa6:	443b      	add	r3, r7
 8006aa8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d012      	beq.n	8006ae4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006ac6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	3360      	adds	r3, #96	@ 0x60
 8006ad2:	443b      	add	r3, r7
 8006ad4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006ad8:	011a      	lsls	r2, r3, #4
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d012      	beq.n	8006b12 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006af4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	3360      	adds	r3, #96	@ 0x60
 8006b00:	443b      	add	r3, r7
 8006b02:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006b06:	021a      	lsls	r2, r3, #8
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a11      	ldr	r2, [pc, #68]	@ (8006b5c <HAL_FDCAN_Init+0x3b8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d107      	bne.n	8006b2c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f022 0203 	bic.w	r2, r2, #3
 8006b2a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f80b 	bl	8006b60 <FDCAN_CalcultateRamBlockAddresses>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006b50:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3760      	adds	r7, #96	@ 0x60
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	4000a000 	.word	0x4000a000

08006b60 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b6c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006b76:	4ba7      	ldr	r3, [pc, #668]	@ (8006e14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	0091      	lsls	r1, r2, #2
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	430b      	orrs	r3, r1
 8006b84:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b90:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b98:	041a      	lsls	r2, r3, #16
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	4413      	add	r3, r2
 8006bac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006bb6:	4b97      	ldr	r3, [pc, #604]	@ (8006e14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	0091      	lsls	r1, r2, #2
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd8:	041a      	lsls	r2, r3, #16
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	4413      	add	r3, r2
 8006bee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006bf8:	4b86      	ldr	r3, [pc, #536]	@ (8006e14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	0091      	lsls	r1, r2, #2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	430b      	orrs	r3, r1
 8006c06:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c12:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1a:	041a      	lsls	r2, r3, #16
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c2e:	fb02 f303 	mul.w	r3, r2, r3
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4413      	add	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006c40:	4b74      	ldr	r3, [pc, #464]	@ (8006e14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006c42:	4013      	ands	r3, r2
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	0091      	lsls	r1, r2, #2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c5a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c62:	041a      	lsls	r2, r3, #16
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006c88:	4b62      	ldr	r3, [pc, #392]	@ (8006e14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	0091      	lsls	r1, r2, #2
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6812      	ldr	r2, [r2, #0]
 8006c94:	430b      	orrs	r3, r1
 8006c96:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006ca2:	fb02 f303 	mul.w	r3, r2, r3
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	4413      	add	r3, r2
 8006caa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006cb4:	4b57      	ldr	r3, [pc, #348]	@ (8006e14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	0091      	lsls	r1, r2, #2
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6812      	ldr	r2, [r2, #0]
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cce:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd6:	041a      	lsls	r2, r3, #16
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	4413      	add	r3, r2
 8006cec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006cf6:	4b47      	ldr	r3, [pc, #284]	@ (8006e14 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	0091      	lsls	r1, r2, #2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	430b      	orrs	r3, r1
 8006d04:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006d10:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d18:	041a      	lsls	r2, r3, #16
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006d2c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d34:	061a      	lsls	r2, r3, #24
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d44:	4b34      	ldr	r3, [pc, #208]	@ (8006e18 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006d46:	4413      	add	r3, r2
 8006d48:	009a      	lsls	r2, r3, #2
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	441a      	add	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	441a      	add	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8006d7a:	fb01 f303 	mul.w	r3, r1, r3
 8006d7e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8006d80:	441a      	add	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8006d92:	fb01 f303 	mul.w	r3, r1, r3
 8006d96:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8006d98:	441a      	add	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8006db0:	441a      	add	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	441a      	add	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006dda:	fb01 f303 	mul.w	r3, r1, r3
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	441a      	add	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006df6:	fb01 f303 	mul.w	r3, r1, r3
 8006dfa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006dfc:	441a      	add	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0a:	4a04      	ldr	r2, [pc, #16]	@ (8006e1c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d915      	bls.n	8006e3c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006e10:	e006      	b.n	8006e20 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006e12:	bf00      	nop
 8006e14:	ffff0003 	.word	0xffff0003
 8006e18:	10002b00 	.word	0x10002b00
 8006e1c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e26:	f043 0220 	orr.w	r2, r3, #32
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2203      	movs	r2, #3
 8006e34:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e010      	b.n	8006e5e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e005      	b.n	8006e50 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d3f3      	bcc.n	8006e44 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop

08006e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b089      	sub	sp, #36	@ 0x24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006e7a:	4b89      	ldr	r3, [pc, #548]	@ (80070a0 <HAL_GPIO_Init+0x234>)
 8006e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e7e:	e194      	b.n	80071aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	2101      	movs	r1, #1
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8186 	beq.w	80071a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d005      	beq.n	8006eb0 <HAL_GPIO_Init+0x44>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f003 0303 	and.w	r3, r3, #3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d130      	bne.n	8006f12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	2203      	movs	r2, #3
 8006ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	fa02 f303 	lsl.w	r3, r2, r3
 8006eee:	43db      	mvns	r3, r3
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	091b      	lsrs	r3, r3, #4
 8006efc:	f003 0201 	and.w	r2, r3, #1
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	fa02 f303 	lsl.w	r3, r2, r3
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d017      	beq.n	8006f4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	2203      	movs	r2, #3
 8006f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	4013      	ands	r3, r2
 8006f34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d123      	bne.n	8006fa2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	08da      	lsrs	r2, r3, #3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3208      	adds	r2, #8
 8006f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	220f      	movs	r2, #15
 8006f72:	fa02 f303 	lsl.w	r3, r2, r3
 8006f76:	43db      	mvns	r3, r3
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	691a      	ldr	r2, [r3, #16]
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	08da      	lsrs	r2, r3, #3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3208      	adds	r2, #8
 8006f9c:	69b9      	ldr	r1, [r7, #24]
 8006f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	2203      	movs	r2, #3
 8006fae:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb2:	43db      	mvns	r3, r3
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f003 0203 	and.w	r2, r3, #3
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 80e0 	beq.w	80071a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80070a4 <HAL_GPIO_Init+0x238>)
 8006fe6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006fea:	4a2e      	ldr	r2, [pc, #184]	@ (80070a4 <HAL_GPIO_Init+0x238>)
 8006fec:	f043 0302 	orr.w	r3, r3, #2
 8006ff0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80070a4 <HAL_GPIO_Init+0x238>)
 8006ff6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007002:	4a29      	ldr	r2, [pc, #164]	@ (80070a8 <HAL_GPIO_Init+0x23c>)
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	089b      	lsrs	r3, r3, #2
 8007008:	3302      	adds	r3, #2
 800700a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800700e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	220f      	movs	r2, #15
 800701a:	fa02 f303 	lsl.w	r3, r2, r3
 800701e:	43db      	mvns	r3, r3
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	4013      	ands	r3, r2
 8007024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a20      	ldr	r2, [pc, #128]	@ (80070ac <HAL_GPIO_Init+0x240>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d052      	beq.n	80070d4 <HAL_GPIO_Init+0x268>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a1f      	ldr	r2, [pc, #124]	@ (80070b0 <HAL_GPIO_Init+0x244>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d031      	beq.n	800709a <HAL_GPIO_Init+0x22e>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a1e      	ldr	r2, [pc, #120]	@ (80070b4 <HAL_GPIO_Init+0x248>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d02b      	beq.n	8007096 <HAL_GPIO_Init+0x22a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a1d      	ldr	r2, [pc, #116]	@ (80070b8 <HAL_GPIO_Init+0x24c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d025      	beq.n	8007092 <HAL_GPIO_Init+0x226>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a1c      	ldr	r2, [pc, #112]	@ (80070bc <HAL_GPIO_Init+0x250>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d01f      	beq.n	800708e <HAL_GPIO_Init+0x222>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a1b      	ldr	r2, [pc, #108]	@ (80070c0 <HAL_GPIO_Init+0x254>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d019      	beq.n	800708a <HAL_GPIO_Init+0x21e>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a1a      	ldr	r2, [pc, #104]	@ (80070c4 <HAL_GPIO_Init+0x258>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <HAL_GPIO_Init+0x21a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a19      	ldr	r2, [pc, #100]	@ (80070c8 <HAL_GPIO_Init+0x25c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d00d      	beq.n	8007082 <HAL_GPIO_Init+0x216>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a18      	ldr	r2, [pc, #96]	@ (80070cc <HAL_GPIO_Init+0x260>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d007      	beq.n	800707e <HAL_GPIO_Init+0x212>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a17      	ldr	r2, [pc, #92]	@ (80070d0 <HAL_GPIO_Init+0x264>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d101      	bne.n	800707a <HAL_GPIO_Init+0x20e>
 8007076:	2309      	movs	r3, #9
 8007078:	e02d      	b.n	80070d6 <HAL_GPIO_Init+0x26a>
 800707a:	230a      	movs	r3, #10
 800707c:	e02b      	b.n	80070d6 <HAL_GPIO_Init+0x26a>
 800707e:	2308      	movs	r3, #8
 8007080:	e029      	b.n	80070d6 <HAL_GPIO_Init+0x26a>
 8007082:	2307      	movs	r3, #7
 8007084:	e027      	b.n	80070d6 <HAL_GPIO_Init+0x26a>
 8007086:	2306      	movs	r3, #6
 8007088:	e025      	b.n	80070d6 <HAL_GPIO_Init+0x26a>
 800708a:	2305      	movs	r3, #5
 800708c:	e023      	b.n	80070d6 <HAL_GPIO_Init+0x26a>
 800708e:	2304      	movs	r3, #4
 8007090:	e021      	b.n	80070d6 <HAL_GPIO_Init+0x26a>
 8007092:	2303      	movs	r3, #3
 8007094:	e01f      	b.n	80070d6 <HAL_GPIO_Init+0x26a>
 8007096:	2302      	movs	r3, #2
 8007098:	e01d      	b.n	80070d6 <HAL_GPIO_Init+0x26a>
 800709a:	2301      	movs	r3, #1
 800709c:	e01b      	b.n	80070d6 <HAL_GPIO_Init+0x26a>
 800709e:	bf00      	nop
 80070a0:	58000080 	.word	0x58000080
 80070a4:	58024400 	.word	0x58024400
 80070a8:	58000400 	.word	0x58000400
 80070ac:	58020000 	.word	0x58020000
 80070b0:	58020400 	.word	0x58020400
 80070b4:	58020800 	.word	0x58020800
 80070b8:	58020c00 	.word	0x58020c00
 80070bc:	58021000 	.word	0x58021000
 80070c0:	58021400 	.word	0x58021400
 80070c4:	58021800 	.word	0x58021800
 80070c8:	58021c00 	.word	0x58021c00
 80070cc:	58022000 	.word	0x58022000
 80070d0:	58022400 	.word	0x58022400
 80070d4:	2300      	movs	r3, #0
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	f002 0203 	and.w	r2, r2, #3
 80070dc:	0092      	lsls	r2, r2, #2
 80070de:	4093      	lsls	r3, r2
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070e6:	4938      	ldr	r1, [pc, #224]	@ (80071c8 <HAL_GPIO_Init+0x35c>)
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	089b      	lsrs	r3, r3, #2
 80070ec:	3302      	adds	r3, #2
 80070ee:	69ba      	ldr	r2, [r7, #24]
 80070f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	43db      	mvns	r3, r3
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	4013      	ands	r3, r2
 8007104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800711a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	43db      	mvns	r3, r3
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	4013      	ands	r3, r2
 8007132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	4313      	orrs	r3, r2
 8007146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	43db      	mvns	r3, r3
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	4013      	ands	r3, r2
 800715e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	4313      	orrs	r3, r2
 8007172:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	43db      	mvns	r3, r3
 8007184:	69ba      	ldr	r2, [r7, #24]
 8007186:	4013      	ands	r3, r2
 8007188:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	3301      	adds	r3, #1
 80071a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f47f ae63 	bne.w	8006e80 <HAL_GPIO_Init+0x14>
  }
}
 80071ba:	bf00      	nop
 80071bc:	bf00      	nop
 80071be:	3724      	adds	r7, #36	@ 0x24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	58000400 	.word	0x58000400

080071cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	807b      	strh	r3, [r7, #2]
 80071d8:	4613      	mov	r3, r2
 80071da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071dc:	787b      	ldrb	r3, [r7, #1]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071e2:	887a      	ldrh	r2, [r7, #2]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80071e8:	e003      	b.n	80071f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80071ea:	887b      	ldrh	r3, [r7, #2]
 80071ec:	041a      	lsls	r2, r3, #16
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	619a      	str	r2, [r3, #24]
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e08b      	b.n	800732a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fa ff4a 	bl	80020c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2224      	movs	r2, #36	@ 0x24
 8007230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0201 	bic.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007250:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007260:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d107      	bne.n	800727a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007276:	609a      	str	r2, [r3, #8]
 8007278:	e006      	b.n	8007288 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007286:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2b02      	cmp	r3, #2
 800728e:	d108      	bne.n	80072a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800729e:	605a      	str	r2, [r3, #4]
 80072a0:	e007      	b.n	80072b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6859      	ldr	r1, [r3, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007334 <HAL_I2C_Init+0x134>)
 80072be:	430b      	orrs	r3, r1
 80072c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	69d9      	ldr	r1, [r3, #28]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1a      	ldr	r2, [r3, #32]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0201 	orr.w	r2, r2, #1
 800730a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2220      	movs	r2, #32
 8007316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	02008000 	.word	0x02008000

08007338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b20      	cmp	r3, #32
 800734c:	d138      	bne.n	80073c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007354:	2b01      	cmp	r3, #1
 8007356:	d101      	bne.n	800735c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007358:	2302      	movs	r3, #2
 800735a:	e032      	b.n	80073c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2224      	movs	r2, #36	@ 0x24
 8007368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800738a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6819      	ldr	r1, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0201 	orr.w	r2, r2, #1
 80073aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	e000      	b.n	80073c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073c0:	2302      	movs	r3, #2
  }
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b085      	sub	sp, #20
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	d139      	bne.n	8007458 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d101      	bne.n	80073f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073ee:	2302      	movs	r3, #2
 80073f0:	e033      	b.n	800745a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2224      	movs	r2, #36	@ 0x24
 80073fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0201 	bic.w	r2, r2, #1
 8007410:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007420:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	021b      	lsls	r3, r3, #8
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	e000      	b.n	800745a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007458:	2302      	movs	r3, #2
  }
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
	...

08007468 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007470:	4b19      	ldr	r3, [pc, #100]	@ (80074d8 <HAL_PWREx_ConfigSupply+0x70>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b04      	cmp	r3, #4
 800747a:	d00a      	beq.n	8007492 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800747c:	4b16      	ldr	r3, [pc, #88]	@ (80074d8 <HAL_PWREx_ConfigSupply+0x70>)
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	429a      	cmp	r2, r3
 8007488:	d001      	beq.n	800748e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e01f      	b.n	80074ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	e01d      	b.n	80074ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007492:	4b11      	ldr	r3, [pc, #68]	@ (80074d8 <HAL_PWREx_ConfigSupply+0x70>)
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f023 0207 	bic.w	r2, r3, #7
 800749a:	490f      	ldr	r1, [pc, #60]	@ (80074d8 <HAL_PWREx_ConfigSupply+0x70>)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80074a2:	f7fc f8e9 	bl	8003678 <HAL_GetTick>
 80074a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074a8:	e009      	b.n	80074be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80074aa:	f7fc f8e5 	bl	8003678 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074b8:	d901      	bls.n	80074be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e007      	b.n	80074ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074be:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <HAL_PWREx_ConfigSupply+0x70>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074ca:	d1ee      	bne.n	80074aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	58024800 	.word	0x58024800

080074dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08c      	sub	sp, #48	@ 0x30
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d102      	bne.n	80074f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	f000 bc1f 	b.w	8007d2e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 80b3 	beq.w	8007664 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074fe:	4b95      	ldr	r3, [pc, #596]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007508:	4b92      	ldr	r3, [pc, #584]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 800750a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800750e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007510:	2b10      	cmp	r3, #16
 8007512:	d007      	beq.n	8007524 <HAL_RCC_OscConfig+0x48>
 8007514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007516:	2b18      	cmp	r3, #24
 8007518:	d112      	bne.n	8007540 <HAL_RCC_OscConfig+0x64>
 800751a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d10d      	bne.n	8007540 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007524:	4b8b      	ldr	r3, [pc, #556]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 8098 	beq.w	8007662 <HAL_RCC_OscConfig+0x186>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f040 8093 	bne.w	8007662 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e3f6      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007548:	d106      	bne.n	8007558 <HAL_RCC_OscConfig+0x7c>
 800754a:	4b82      	ldr	r3, [pc, #520]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a81      	ldr	r2, [pc, #516]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	e058      	b.n	800760a <HAL_RCC_OscConfig+0x12e>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d112      	bne.n	8007586 <HAL_RCC_OscConfig+0xaa>
 8007560:	4b7c      	ldr	r3, [pc, #496]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a7b      	ldr	r2, [pc, #492]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	4b79      	ldr	r3, [pc, #484]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a78      	ldr	r2, [pc, #480]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007572:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	4b76      	ldr	r3, [pc, #472]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a75      	ldr	r2, [pc, #468]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 800757e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e041      	b.n	800760a <HAL_RCC_OscConfig+0x12e>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800758e:	d112      	bne.n	80075b6 <HAL_RCC_OscConfig+0xda>
 8007590:	4b70      	ldr	r3, [pc, #448]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a6f      	ldr	r2, [pc, #444]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007596:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	4b6d      	ldr	r3, [pc, #436]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a6c      	ldr	r2, [pc, #432]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075a2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	4b6a      	ldr	r3, [pc, #424]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a69      	ldr	r2, [pc, #420]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	e029      	b.n	800760a <HAL_RCC_OscConfig+0x12e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80075be:	d112      	bne.n	80075e6 <HAL_RCC_OscConfig+0x10a>
 80075c0:	4b64      	ldr	r3, [pc, #400]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a63      	ldr	r2, [pc, #396]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	4b61      	ldr	r3, [pc, #388]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a60      	ldr	r2, [pc, #384]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	4b5e      	ldr	r3, [pc, #376]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a5d      	ldr	r2, [pc, #372]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	e011      	b.n	800760a <HAL_RCC_OscConfig+0x12e>
 80075e6:	4b5b      	ldr	r3, [pc, #364]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a5a      	ldr	r2, [pc, #360]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	4b58      	ldr	r3, [pc, #352]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a57      	ldr	r2, [pc, #348]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80075f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	4b55      	ldr	r3, [pc, #340]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a54      	ldr	r2, [pc, #336]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007604:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007608:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d013      	beq.n	800763a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007612:	f7fc f831 	bl	8003678 <HAL_GetTick>
 8007616:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007618:	e008      	b.n	800762c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800761a:	f7fc f82d 	bl	8003678 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b64      	cmp	r3, #100	@ 0x64
 8007626:	d901      	bls.n	800762c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e380      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800762c:	4b49      	ldr	r3, [pc, #292]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0f0      	beq.n	800761a <HAL_RCC_OscConfig+0x13e>
 8007638:	e014      	b.n	8007664 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763a:	f7fc f81d 	bl	8003678 <HAL_GetTick>
 800763e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007640:	e008      	b.n	8007654 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007642:	f7fc f819 	bl	8003678 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b64      	cmp	r3, #100	@ 0x64
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e36c      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007654:	4b3f      	ldr	r3, [pc, #252]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f0      	bne.n	8007642 <HAL_RCC_OscConfig+0x166>
 8007660:	e000      	b.n	8007664 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007662:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 808c 	beq.w	800778a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007672:	4b38      	ldr	r3, [pc, #224]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800767a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800767c:	4b35      	ldr	r3, [pc, #212]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 800767e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007680:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d007      	beq.n	8007698 <HAL_RCC_OscConfig+0x1bc>
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	2b18      	cmp	r3, #24
 800768c:	d137      	bne.n	80076fe <HAL_RCC_OscConfig+0x222>
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	f003 0303 	and.w	r3, r3, #3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d132      	bne.n	80076fe <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007698:	4b2e      	ldr	r3, [pc, #184]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <HAL_RCC_OscConfig+0x1d4>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e33e      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80076b0:	4b28      	ldr	r3, [pc, #160]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f023 0219 	bic.w	r2, r3, #25
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	4925      	ldr	r1, [pc, #148]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076c2:	f7fb ffd9 	bl	8003678 <HAL_GetTick>
 80076c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076c8:	e008      	b.n	80076dc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076ca:	f7fb ffd5 	bl	8003678 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d901      	bls.n	80076dc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e328      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0f0      	beq.n	80076ca <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	061b      	lsls	r3, r3, #24
 80076f6:	4917      	ldr	r1, [pc, #92]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076fc:	e045      	b.n	800778a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d028      	beq.n	8007758 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007706:	4b13      	ldr	r3, [pc, #76]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f023 0219 	bic.w	r2, r3, #25
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	4910      	ldr	r1, [pc, #64]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007714:	4313      	orrs	r3, r2
 8007716:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007718:	f7fb ffae 	bl	8003678 <HAL_GetTick>
 800771c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800771e:	e008      	b.n	8007732 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007720:	f7fb ffaa 	bl	8003678 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e2fd      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007732:	4b08      	ldr	r3, [pc, #32]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0f0      	beq.n	8007720 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800773e:	4b05      	ldr	r3, [pc, #20]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	061b      	lsls	r3, r3, #24
 800774c:	4901      	ldr	r1, [pc, #4]	@ (8007754 <HAL_RCC_OscConfig+0x278>)
 800774e:	4313      	orrs	r3, r2
 8007750:	604b      	str	r3, [r1, #4]
 8007752:	e01a      	b.n	800778a <HAL_RCC_OscConfig+0x2ae>
 8007754:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007758:	4b97      	ldr	r3, [pc, #604]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a96      	ldr	r2, [pc, #600]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 800775e:	f023 0301 	bic.w	r3, r3, #1
 8007762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007764:	f7fb ff88 	bl	8003678 <HAL_GetTick>
 8007768:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800776c:	f7fb ff84 	bl	8003678 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e2d7      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800777e:	4b8e      	ldr	r3, [pc, #568]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f0      	bne.n	800776c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0310 	and.w	r3, r3, #16
 8007792:	2b00      	cmp	r3, #0
 8007794:	d06a      	beq.n	800786c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007796:	4b88      	ldr	r3, [pc, #544]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800779e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077a0:	4b85      	ldr	r3, [pc, #532]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80077a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d007      	beq.n	80077bc <HAL_RCC_OscConfig+0x2e0>
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	2b18      	cmp	r3, #24
 80077b0:	d11b      	bne.n	80077ea <HAL_RCC_OscConfig+0x30e>
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d116      	bne.n	80077ea <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077bc:	4b7e      	ldr	r3, [pc, #504]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <HAL_RCC_OscConfig+0x2f8>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	2b80      	cmp	r3, #128	@ 0x80
 80077ce:	d001      	beq.n	80077d4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e2ac      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077d4:	4b78      	ldr	r3, [pc, #480]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	061b      	lsls	r3, r3, #24
 80077e2:	4975      	ldr	r1, [pc, #468]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077e8:	e040      	b.n	800786c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d023      	beq.n	800783a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80077f2:	4b71      	ldr	r3, [pc, #452]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a70      	ldr	r2, [pc, #448]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80077f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077fe:	f7fb ff3b 	bl	8003678 <HAL_GetTick>
 8007802:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007804:	e008      	b.n	8007818 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007806:	f7fb ff37 	bl	8003678 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d901      	bls.n	8007818 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e28a      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007818:	4b67      	ldr	r3, [pc, #412]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0f0      	beq.n	8007806 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007824:	4b64      	ldr	r3, [pc, #400]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	061b      	lsls	r3, r3, #24
 8007832:	4961      	ldr	r1, [pc, #388]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007834:	4313      	orrs	r3, r2
 8007836:	60cb      	str	r3, [r1, #12]
 8007838:	e018      	b.n	800786c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800783a:	4b5f      	ldr	r3, [pc, #380]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a5e      	ldr	r2, [pc, #376]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007846:	f7fb ff17 	bl	8003678 <HAL_GetTick>
 800784a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800784c:	e008      	b.n	8007860 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800784e:	f7fb ff13 	bl	8003678 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d901      	bls.n	8007860 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e266      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007860:	4b55      	ldr	r3, [pc, #340]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1f0      	bne.n	800784e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d036      	beq.n	80078e6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d019      	beq.n	80078b4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007880:	4b4d      	ldr	r3, [pc, #308]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007884:	4a4c      	ldr	r2, [pc, #304]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788c:	f7fb fef4 	bl	8003678 <HAL_GetTick>
 8007890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007892:	e008      	b.n	80078a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007894:	f7fb fef0 	bl	8003678 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e243      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078a6:	4b44      	ldr	r3, [pc, #272]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80078a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0f0      	beq.n	8007894 <HAL_RCC_OscConfig+0x3b8>
 80078b2:	e018      	b.n	80078e6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078b4:	4b40      	ldr	r3, [pc, #256]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80078b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078b8:	4a3f      	ldr	r2, [pc, #252]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80078ba:	f023 0301 	bic.w	r3, r3, #1
 80078be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c0:	f7fb feda 	bl	8003678 <HAL_GetTick>
 80078c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078c8:	f7fb fed6 	bl	8003678 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e229      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078da:	4b37      	ldr	r3, [pc, #220]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80078dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1f0      	bne.n	80078c8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0320 	and.w	r3, r3, #32
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d036      	beq.n	8007960 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d019      	beq.n	800792e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078fa:	4b2f      	ldr	r3, [pc, #188]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a2e      	ldr	r2, [pc, #184]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007900:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007904:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007906:	f7fb feb7 	bl	8003678 <HAL_GetTick>
 800790a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800790c:	e008      	b.n	8007920 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800790e:	f7fb feb3 	bl	8003678 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	2b02      	cmp	r3, #2
 800791a:	d901      	bls.n	8007920 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e206      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007920:	4b25      	ldr	r3, [pc, #148]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0f0      	beq.n	800790e <HAL_RCC_OscConfig+0x432>
 800792c:	e018      	b.n	8007960 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800792e:	4b22      	ldr	r3, [pc, #136]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a21      	ldr	r2, [pc, #132]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007934:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007938:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800793a:	f7fb fe9d 	bl	8003678 <HAL_GetTick>
 800793e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007942:	f7fb fe99 	bl	8003678 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e1ec      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007954:	4b18      	ldr	r3, [pc, #96]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1f0      	bne.n	8007942 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0304 	and.w	r3, r3, #4
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 80af 	beq.w	8007acc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800796e:	4b13      	ldr	r3, [pc, #76]	@ (80079bc <HAL_RCC_OscConfig+0x4e0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a12      	ldr	r2, [pc, #72]	@ (80079bc <HAL_RCC_OscConfig+0x4e0>)
 8007974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007978:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800797a:	f7fb fe7d 	bl	8003678 <HAL_GetTick>
 800797e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007980:	e008      	b.n	8007994 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007982:	f7fb fe79 	bl	8003678 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b64      	cmp	r3, #100	@ 0x64
 800798e:	d901      	bls.n	8007994 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e1cc      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007994:	4b09      	ldr	r3, [pc, #36]	@ (80079bc <HAL_RCC_OscConfig+0x4e0>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0f0      	beq.n	8007982 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d10b      	bne.n	80079c0 <HAL_RCC_OscConfig+0x4e4>
 80079a8:	4b03      	ldr	r3, [pc, #12]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80079aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ac:	4a02      	ldr	r2, [pc, #8]	@ (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80079ae:	f043 0301 	orr.w	r3, r3, #1
 80079b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80079b4:	e05b      	b.n	8007a6e <HAL_RCC_OscConfig+0x592>
 80079b6:	bf00      	nop
 80079b8:	58024400 	.word	0x58024400
 80079bc:	58024800 	.word	0x58024800
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d112      	bne.n	80079ee <HAL_RCC_OscConfig+0x512>
 80079c8:	4b9d      	ldr	r3, [pc, #628]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 80079ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079cc:	4a9c      	ldr	r2, [pc, #624]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 80079ce:	f023 0301 	bic.w	r3, r3, #1
 80079d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80079d4:	4b9a      	ldr	r3, [pc, #616]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 80079d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d8:	4a99      	ldr	r2, [pc, #612]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 80079da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079de:	6713      	str	r3, [r2, #112]	@ 0x70
 80079e0:	4b97      	ldr	r3, [pc, #604]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 80079e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079e4:	4a96      	ldr	r2, [pc, #600]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 80079e6:	f023 0304 	bic.w	r3, r3, #4
 80079ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80079ec:	e03f      	b.n	8007a6e <HAL_RCC_OscConfig+0x592>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d112      	bne.n	8007a1c <HAL_RCC_OscConfig+0x540>
 80079f6:	4b92      	ldr	r3, [pc, #584]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 80079f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079fa:	4a91      	ldr	r2, [pc, #580]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 80079fc:	f043 0304 	orr.w	r3, r3, #4
 8007a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a02:	4b8f      	ldr	r3, [pc, #572]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a06:	4a8e      	ldr	r2, [pc, #568]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a0e:	4b8c      	ldr	r3, [pc, #560]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a12:	4a8b      	ldr	r2, [pc, #556]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a14:	f043 0301 	orr.w	r3, r3, #1
 8007a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a1a:	e028      	b.n	8007a6e <HAL_RCC_OscConfig+0x592>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	2b85      	cmp	r3, #133	@ 0x85
 8007a22:	d112      	bne.n	8007a4a <HAL_RCC_OscConfig+0x56e>
 8007a24:	4b86      	ldr	r3, [pc, #536]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a28:	4a85      	ldr	r2, [pc, #532]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a2a:	f043 0304 	orr.w	r3, r3, #4
 8007a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a30:	4b83      	ldr	r3, [pc, #524]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a34:	4a82      	ldr	r2, [pc, #520]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a3c:	4b80      	ldr	r3, [pc, #512]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a40:	4a7f      	ldr	r2, [pc, #508]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a42:	f043 0301 	orr.w	r3, r3, #1
 8007a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a48:	e011      	b.n	8007a6e <HAL_RCC_OscConfig+0x592>
 8007a4a:	4b7d      	ldr	r3, [pc, #500]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a4e:	4a7c      	ldr	r2, [pc, #496]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a50:	f023 0301 	bic.w	r3, r3, #1
 8007a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a56:	4b7a      	ldr	r3, [pc, #488]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a5a:	4a79      	ldr	r2, [pc, #484]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a5c:	f023 0304 	bic.w	r3, r3, #4
 8007a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a62:	4b77      	ldr	r3, [pc, #476]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a66:	4a76      	ldr	r2, [pc, #472]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a6c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d015      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a76:	f7fb fdff 	bl	8003678 <HAL_GetTick>
 8007a7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a7c:	e00a      	b.n	8007a94 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7e:	f7fb fdfb 	bl	8003678 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e14c      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a94:	4b6a      	ldr	r3, [pc, #424]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0ee      	beq.n	8007a7e <HAL_RCC_OscConfig+0x5a2>
 8007aa0:	e014      	b.n	8007acc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa2:	f7fb fde9 	bl	8003678 <HAL_GetTick>
 8007aa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007aa8:	e00a      	b.n	8007ac0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aaa:	f7fb fde5 	bl	8003678 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e136      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ac0:	4b5f      	ldr	r3, [pc, #380]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1ee      	bne.n	8007aaa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 812b 	beq.w	8007d2c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ade:	2b18      	cmp	r3, #24
 8007ae0:	f000 80bb 	beq.w	8007c5a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	f040 8095 	bne.w	8007c18 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aee:	4b54      	ldr	r3, [pc, #336]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a53      	ldr	r2, [pc, #332]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007af4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afa:	f7fb fdbd 	bl	8003678 <HAL_GetTick>
 8007afe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b00:	e008      	b.n	8007b14 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b02:	f7fb fdb9 	bl	8003678 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d901      	bls.n	8007b14 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e10c      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b14:	4b4a      	ldr	r3, [pc, #296]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1f0      	bne.n	8007b02 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b20:	4b47      	ldr	r3, [pc, #284]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007b22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b24:	4b47      	ldr	r3, [pc, #284]	@ (8007c44 <HAL_RCC_OscConfig+0x768>)
 8007b26:	4013      	ands	r3, r2
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007b30:	0112      	lsls	r2, r2, #4
 8007b32:	430a      	orrs	r2, r1
 8007b34:	4942      	ldr	r1, [pc, #264]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	025b      	lsls	r3, r3, #9
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b54:	3b01      	subs	r3, #1
 8007b56:	041b      	lsls	r3, r3, #16
 8007b58:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b62:	3b01      	subs	r3, #1
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b6a:	4935      	ldr	r1, [pc, #212]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007b70:	4b33      	ldr	r3, [pc, #204]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b74:	4a32      	ldr	r2, [pc, #200]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007b76:	f023 0301 	bic.w	r3, r3, #1
 8007b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b7c:	4b30      	ldr	r3, [pc, #192]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007b7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b80:	4b31      	ldr	r3, [pc, #196]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007b88:	00d2      	lsls	r2, r2, #3
 8007b8a:	492d      	ldr	r1, [pc, #180]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007b90:	4b2b      	ldr	r3, [pc, #172]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b94:	f023 020c 	bic.w	r2, r3, #12
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9c:	4928      	ldr	r1, [pc, #160]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ba2:	4b27      	ldr	r3, [pc, #156]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba6:	f023 0202 	bic.w	r2, r3, #2
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bae:	4924      	ldr	r1, [pc, #144]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007bb4:	4b22      	ldr	r3, [pc, #136]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb8:	4a21      	ldr	r2, [pc, #132]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007bd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007bd8:	4b19      	ldr	r3, [pc, #100]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bdc:	4a18      	ldr	r2, [pc, #96]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007be4:	4b16      	ldr	r3, [pc, #88]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a15      	ldr	r2, [pc, #84]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf0:	f7fb fd42 	bl	8003678 <HAL_GetTick>
 8007bf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bf6:	e008      	b.n	8007c0a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf8:	f7fb fd3e 	bl	8003678 <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e091      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0f0      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x71c>
 8007c16:	e089      	b.n	8007d2c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c18:	4b09      	ldr	r3, [pc, #36]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a08      	ldr	r2, [pc, #32]	@ (8007c40 <HAL_RCC_OscConfig+0x764>)
 8007c1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c24:	f7fb fd28 	bl	8003678 <HAL_GetTick>
 8007c28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c2a:	e00f      	b.n	8007c4c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c2c:	f7fb fd24 	bl	8003678 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d908      	bls.n	8007c4c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e077      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
 8007c3e:	bf00      	nop
 8007c40:	58024400 	.word	0x58024400
 8007c44:	fffffc0c 	.word	0xfffffc0c
 8007c48:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8007d38 <HAL_RCC_OscConfig+0x85c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e9      	bne.n	8007c2c <HAL_RCC_OscConfig+0x750>
 8007c58:	e068      	b.n	8007d2c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007c5a:	4b37      	ldr	r3, [pc, #220]	@ (8007d38 <HAL_RCC_OscConfig+0x85c>)
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007c60:	4b35      	ldr	r3, [pc, #212]	@ (8007d38 <HAL_RCC_OscConfig+0x85c>)
 8007c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c64:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d031      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f003 0203 	and.w	r2, r3, #3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d12a      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	091b      	lsrs	r3, r3, #4
 8007c80:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d122      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c96:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d11a      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	0a5b      	lsrs	r3, r3, #9
 8007ca0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ca8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d111      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	0c1b      	lsrs	r3, r3, #16
 8007cb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d108      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	0e1b      	lsrs	r3, r3, #24
 8007cc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ccc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d001      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e02b      	b.n	8007d2e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007cd6:	4b18      	ldr	r3, [pc, #96]	@ (8007d38 <HAL_RCC_OscConfig+0x85c>)
 8007cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cda:	08db      	lsrs	r3, r3, #3
 8007cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ce0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d01f      	beq.n	8007d2c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007cec:	4b12      	ldr	r3, [pc, #72]	@ (8007d38 <HAL_RCC_OscConfig+0x85c>)
 8007cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf0:	4a11      	ldr	r2, [pc, #68]	@ (8007d38 <HAL_RCC_OscConfig+0x85c>)
 8007cf2:	f023 0301 	bic.w	r3, r3, #1
 8007cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007cf8:	f7fb fcbe 	bl	8003678 <HAL_GetTick>
 8007cfc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007cfe:	bf00      	nop
 8007d00:	f7fb fcba 	bl	8003678 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d0f9      	beq.n	8007d00 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d38 <HAL_RCC_OscConfig+0x85c>)
 8007d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d10:	4b0a      	ldr	r3, [pc, #40]	@ (8007d3c <HAL_RCC_OscConfig+0x860>)
 8007d12:	4013      	ands	r3, r2
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007d18:	00d2      	lsls	r2, r2, #3
 8007d1a:	4907      	ldr	r1, [pc, #28]	@ (8007d38 <HAL_RCC_OscConfig+0x85c>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007d20:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <HAL_RCC_OscConfig+0x85c>)
 8007d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d24:	4a04      	ldr	r2, [pc, #16]	@ (8007d38 <HAL_RCC_OscConfig+0x85c>)
 8007d26:	f043 0301 	orr.w	r3, r3, #1
 8007d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3730      	adds	r7, #48	@ 0x30
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	58024400 	.word	0x58024400
 8007d3c:	ffff0007 	.word	0xffff0007

08007d40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e19c      	b.n	800808e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d54:	4b8a      	ldr	r3, [pc, #552]	@ (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d910      	bls.n	8007d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d62:	4b87      	ldr	r3, [pc, #540]	@ (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f023 020f 	bic.w	r2, r3, #15
 8007d6a:	4985      	ldr	r1, [pc, #532]	@ (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d72:	4b83      	ldr	r3, [pc, #524]	@ (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d001      	beq.n	8007d84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e184      	b.n	800808e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d010      	beq.n	8007db2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	4b7b      	ldr	r3, [pc, #492]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d908      	bls.n	8007db2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007da0:	4b78      	ldr	r3, [pc, #480]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	4975      	ldr	r1, [pc, #468]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d010      	beq.n	8007de0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	695a      	ldr	r2, [r3, #20]
 8007dc2:	4b70      	ldr	r3, [pc, #448]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d908      	bls.n	8007de0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007dce:	4b6d      	ldr	r3, [pc, #436]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	496a      	ldr	r1, [pc, #424]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d010      	beq.n	8007e0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699a      	ldr	r2, [r3, #24]
 8007df0:	4b64      	ldr	r3, [pc, #400]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d908      	bls.n	8007e0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007dfc:	4b61      	ldr	r3, [pc, #388]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	495e      	ldr	r1, [pc, #376]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d010      	beq.n	8007e3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69da      	ldr	r2, [r3, #28]
 8007e1e:	4b59      	ldr	r3, [pc, #356]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d908      	bls.n	8007e3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007e2a:	4b56      	ldr	r3, [pc, #344]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	4953      	ldr	r1, [pc, #332]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d010      	beq.n	8007e6a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	4b4d      	ldr	r3, [pc, #308]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d908      	bls.n	8007e6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e58:	4b4a      	ldr	r3, [pc, #296]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	f023 020f 	bic.w	r2, r3, #15
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	4947      	ldr	r1, [pc, #284]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d055      	beq.n	8007f22 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007e76:	4b43      	ldr	r3, [pc, #268]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	4940      	ldr	r1, [pc, #256]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d107      	bne.n	8007ea0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e90:	4b3c      	ldr	r3, [pc, #240]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d121      	bne.n	8007ee0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0f6      	b.n	800808e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d107      	bne.n	8007eb8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ea8:	4b36      	ldr	r3, [pc, #216]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d115      	bne.n	8007ee0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e0ea      	b.n	800808e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d107      	bne.n	8007ed0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ec0:	4b30      	ldr	r3, [pc, #192]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d109      	bne.n	8007ee0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e0de      	b.n	800808e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e0d6      	b.n	800808e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ee0:	4b28      	ldr	r3, [pc, #160]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	f023 0207 	bic.w	r2, r3, #7
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	4925      	ldr	r1, [pc, #148]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ef2:	f7fb fbc1 	bl	8003678 <HAL_GetTick>
 8007ef6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ef8:	e00a      	b.n	8007f10 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007efa:	f7fb fbbd 	bl	8003678 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d901      	bls.n	8007f10 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e0be      	b.n	800808e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f10:	4b1c      	ldr	r3, [pc, #112]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	00db      	lsls	r3, r3, #3
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d1eb      	bne.n	8007efa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d010      	beq.n	8007f50 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68da      	ldr	r2, [r3, #12]
 8007f32:	4b14      	ldr	r3, [pc, #80]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d208      	bcs.n	8007f50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f3e:	4b11      	ldr	r3, [pc, #68]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	f023 020f 	bic.w	r2, r3, #15
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	490e      	ldr	r1, [pc, #56]	@ (8007f84 <HAL_RCC_ClockConfig+0x244>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f50:	4b0b      	ldr	r3, [pc, #44]	@ (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d214      	bcs.n	8007f88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f5e:	4b08      	ldr	r3, [pc, #32]	@ (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f023 020f 	bic.w	r2, r3, #15
 8007f66:	4906      	ldr	r1, [pc, #24]	@ (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f6e:	4b04      	ldr	r3, [pc, #16]	@ (8007f80 <HAL_RCC_ClockConfig+0x240>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d005      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e086      	b.n	800808e <HAL_RCC_ClockConfig+0x34e>
 8007f80:	52002000 	.word	0x52002000
 8007f84:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d010      	beq.n	8007fb6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	691a      	ldr	r2, [r3, #16]
 8007f98:	4b3f      	ldr	r3, [pc, #252]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d208      	bcs.n	8007fb6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	4939      	ldr	r1, [pc, #228]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d010      	beq.n	8007fe4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	695a      	ldr	r2, [r3, #20]
 8007fc6:	4b34      	ldr	r3, [pc, #208]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d208      	bcs.n	8007fe4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007fd2:	4b31      	ldr	r3, [pc, #196]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	492e      	ldr	r1, [pc, #184]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0310 	and.w	r3, r3, #16
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d010      	beq.n	8008012 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	699a      	ldr	r2, [r3, #24]
 8007ff4:	4b28      	ldr	r3, [pc, #160]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d208      	bcs.n	8008012 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008000:	4b25      	ldr	r3, [pc, #148]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	4922      	ldr	r1, [pc, #136]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 800800e:	4313      	orrs	r3, r2
 8008010:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0320 	and.w	r3, r3, #32
 800801a:	2b00      	cmp	r3, #0
 800801c:	d010      	beq.n	8008040 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	69da      	ldr	r2, [r3, #28]
 8008022:	4b1d      	ldr	r3, [pc, #116]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800802a:	429a      	cmp	r2, r3
 800802c:	d208      	bcs.n	8008040 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800802e:	4b1a      	ldr	r3, [pc, #104]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	4917      	ldr	r1, [pc, #92]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 800803c:	4313      	orrs	r3, r2
 800803e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008040:	f000 f834 	bl	80080ac <HAL_RCC_GetSysClockFreq>
 8008044:	4602      	mov	r2, r0
 8008046:	4b14      	ldr	r3, [pc, #80]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	0a1b      	lsrs	r3, r3, #8
 800804c:	f003 030f 	and.w	r3, r3, #15
 8008050:	4912      	ldr	r1, [pc, #72]	@ (800809c <HAL_RCC_ClockConfig+0x35c>)
 8008052:	5ccb      	ldrb	r3, [r1, r3]
 8008054:	f003 031f 	and.w	r3, r3, #31
 8008058:	fa22 f303 	lsr.w	r3, r2, r3
 800805c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800805e:	4b0e      	ldr	r3, [pc, #56]	@ (8008098 <HAL_RCC_ClockConfig+0x358>)
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	4a0d      	ldr	r2, [pc, #52]	@ (800809c <HAL_RCC_ClockConfig+0x35c>)
 8008068:	5cd3      	ldrb	r3, [r2, r3]
 800806a:	f003 031f 	and.w	r3, r3, #31
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	fa22 f303 	lsr.w	r3, r2, r3
 8008074:	4a0a      	ldr	r2, [pc, #40]	@ (80080a0 <HAL_RCC_ClockConfig+0x360>)
 8008076:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008078:	4a0a      	ldr	r2, [pc, #40]	@ (80080a4 <HAL_RCC_ClockConfig+0x364>)
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800807e:	4b0a      	ldr	r3, [pc, #40]	@ (80080a8 <HAL_RCC_ClockConfig+0x368>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f7fb faae 	bl	80035e4 <HAL_InitTick>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800808c:	7bfb      	ldrb	r3, [r7, #15]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	58024400 	.word	0x58024400
 800809c:	08012db8 	.word	0x08012db8
 80080a0:	2400009c 	.word	0x2400009c
 80080a4:	24000098 	.word	0x24000098
 80080a8:	240000a0 	.word	0x240000a0

080080ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b089      	sub	sp, #36	@ 0x24
 80080b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080b2:	4bb3      	ldr	r3, [pc, #716]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080ba:	2b18      	cmp	r3, #24
 80080bc:	f200 8155 	bhi.w	800836a <HAL_RCC_GetSysClockFreq+0x2be>
 80080c0:	a201      	add	r2, pc, #4	@ (adr r2, 80080c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80080c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c6:	bf00      	nop
 80080c8:	0800812d 	.word	0x0800812d
 80080cc:	0800836b 	.word	0x0800836b
 80080d0:	0800836b 	.word	0x0800836b
 80080d4:	0800836b 	.word	0x0800836b
 80080d8:	0800836b 	.word	0x0800836b
 80080dc:	0800836b 	.word	0x0800836b
 80080e0:	0800836b 	.word	0x0800836b
 80080e4:	0800836b 	.word	0x0800836b
 80080e8:	08008153 	.word	0x08008153
 80080ec:	0800836b 	.word	0x0800836b
 80080f0:	0800836b 	.word	0x0800836b
 80080f4:	0800836b 	.word	0x0800836b
 80080f8:	0800836b 	.word	0x0800836b
 80080fc:	0800836b 	.word	0x0800836b
 8008100:	0800836b 	.word	0x0800836b
 8008104:	0800836b 	.word	0x0800836b
 8008108:	08008159 	.word	0x08008159
 800810c:	0800836b 	.word	0x0800836b
 8008110:	0800836b 	.word	0x0800836b
 8008114:	0800836b 	.word	0x0800836b
 8008118:	0800836b 	.word	0x0800836b
 800811c:	0800836b 	.word	0x0800836b
 8008120:	0800836b 	.word	0x0800836b
 8008124:	0800836b 	.word	0x0800836b
 8008128:	0800815f 	.word	0x0800815f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800812c:	4b94      	ldr	r3, [pc, #592]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0320 	and.w	r3, r3, #32
 8008134:	2b00      	cmp	r3, #0
 8008136:	d009      	beq.n	800814c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008138:	4b91      	ldr	r3, [pc, #580]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	08db      	lsrs	r3, r3, #3
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	4a90      	ldr	r2, [pc, #576]	@ (8008384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008144:	fa22 f303 	lsr.w	r3, r2, r3
 8008148:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800814a:	e111      	b.n	8008370 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800814c:	4b8d      	ldr	r3, [pc, #564]	@ (8008384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800814e:	61bb      	str	r3, [r7, #24]
      break;
 8008150:	e10e      	b.n	8008370 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008152:	4b8d      	ldr	r3, [pc, #564]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008154:	61bb      	str	r3, [r7, #24]
      break;
 8008156:	e10b      	b.n	8008370 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008158:	4b8c      	ldr	r3, [pc, #560]	@ (800838c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800815a:	61bb      	str	r3, [r7, #24]
      break;
 800815c:	e108      	b.n	8008370 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800815e:	4b88      	ldr	r3, [pc, #544]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008162:	f003 0303 	and.w	r3, r3, #3
 8008166:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008168:	4b85      	ldr	r3, [pc, #532]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800816a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816c:	091b      	lsrs	r3, r3, #4
 800816e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008172:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008174:	4b82      	ldr	r3, [pc, #520]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800817e:	4b80      	ldr	r3, [pc, #512]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008182:	08db      	lsrs	r3, r3, #3
 8008184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	fb02 f303 	mul.w	r3, r2, r3
 800818e:	ee07 3a90 	vmov	s15, r3
 8008192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008196:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 80e1 	beq.w	8008364 <HAL_RCC_GetSysClockFreq+0x2b8>
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	f000 8083 	beq.w	80082b0 <HAL_RCC_GetSysClockFreq+0x204>
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	f200 80a1 	bhi.w	80082f4 <HAL_RCC_GetSysClockFreq+0x248>
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <HAL_RCC_GetSysClockFreq+0x114>
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d056      	beq.n	800826c <HAL_RCC_GetSysClockFreq+0x1c0>
 80081be:	e099      	b.n	80082f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081c0:	4b6f      	ldr	r3, [pc, #444]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0320 	and.w	r3, r3, #32
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d02d      	beq.n	8008228 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081cc:	4b6c      	ldr	r3, [pc, #432]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	08db      	lsrs	r3, r3, #3
 80081d2:	f003 0303 	and.w	r3, r3, #3
 80081d6:	4a6b      	ldr	r2, [pc, #428]	@ (8008384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
 80081dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	ee07 3a90 	vmov	s15, r3
 80081e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f6:	4b62      	ldr	r3, [pc, #392]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008206:	ed97 6a02 	vldr	s12, [r7, #8]
 800820a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008390 <HAL_RCC_GetSysClockFreq+0x2e4>
 800820e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800821a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008222:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008226:	e087      	b.n	8008338 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008232:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008394 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823a:	4b51      	ldr	r3, [pc, #324]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824a:	ed97 6a02 	vldr	s12, [r7, #8]
 800824e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008390 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800825e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800826a:	e065      	b.n	8008338 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008276:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008398 <HAL_RCC_GetSysClockFreq+0x2ec>
 800827a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800827e:	4b40      	ldr	r3, [pc, #256]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800828e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008292:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008390 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800829e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80082ae:	e043      	b.n	8008338 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800839c <HAL_RCC_GetSysClockFreq+0x2f0>
 80082be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c2:	4b2f      	ldr	r3, [pc, #188]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80082d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008390 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80082f2:	e021      	b.n	8008338 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008398 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008306:	4b1e      	ldr	r3, [pc, #120]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008316:	ed97 6a02 	vldr	s12, [r7, #8]
 800831a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008390 <HAL_RCC_GetSysClockFreq+0x2e4>
 800831e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800832a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008336:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008338:	4b11      	ldr	r3, [pc, #68]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800833a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833c:	0a5b      	lsrs	r3, r3, #9
 800833e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008342:	3301      	adds	r3, #1
 8008344:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	ee07 3a90 	vmov	s15, r3
 800834c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008350:	edd7 6a07 	vldr	s13, [r7, #28]
 8008354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800835c:	ee17 3a90 	vmov	r3, s15
 8008360:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008362:	e005      	b.n	8008370 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	61bb      	str	r3, [r7, #24]
      break;
 8008368:	e002      	b.n	8008370 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800836a:	4b07      	ldr	r3, [pc, #28]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800836c:	61bb      	str	r3, [r7, #24]
      break;
 800836e:	bf00      	nop
  }

  return sysclockfreq;
 8008370:	69bb      	ldr	r3, [r7, #24]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3724      	adds	r7, #36	@ 0x24
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	58024400 	.word	0x58024400
 8008384:	03d09000 	.word	0x03d09000
 8008388:	003d0900 	.word	0x003d0900
 800838c:	016e3600 	.word	0x016e3600
 8008390:	46000000 	.word	0x46000000
 8008394:	4c742400 	.word	0x4c742400
 8008398:	4a742400 	.word	0x4a742400
 800839c:	4bb71b00 	.word	0x4bb71b00

080083a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80083a6:	f7ff fe81 	bl	80080ac <HAL_RCC_GetSysClockFreq>
 80083aa:	4602      	mov	r2, r0
 80083ac:	4b10      	ldr	r3, [pc, #64]	@ (80083f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	0a1b      	lsrs	r3, r3, #8
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	490f      	ldr	r1, [pc, #60]	@ (80083f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80083b8:	5ccb      	ldrb	r3, [r1, r3]
 80083ba:	f003 031f 	and.w	r3, r3, #31
 80083be:	fa22 f303 	lsr.w	r3, r2, r3
 80083c2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80083c4:	4b0a      	ldr	r3, [pc, #40]	@ (80083f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f003 030f 	and.w	r3, r3, #15
 80083cc:	4a09      	ldr	r2, [pc, #36]	@ (80083f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80083ce:	5cd3      	ldrb	r3, [r2, r3]
 80083d0:	f003 031f 	and.w	r3, r3, #31
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	fa22 f303 	lsr.w	r3, r2, r3
 80083da:	4a07      	ldr	r2, [pc, #28]	@ (80083f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80083dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80083de:	4a07      	ldr	r2, [pc, #28]	@ (80083fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80083e4:	4b04      	ldr	r3, [pc, #16]	@ (80083f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80083e6:	681b      	ldr	r3, [r3, #0]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	58024400 	.word	0x58024400
 80083f4:	08012db8 	.word	0x08012db8
 80083f8:	2400009c 	.word	0x2400009c
 80083fc:	24000098 	.word	0x24000098

08008400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8008404:	f7ff ffcc 	bl	80083a0 <HAL_RCC_GetHCLKFreq>
 8008408:	4602      	mov	r2, r0
 800840a:	4b06      	ldr	r3, [pc, #24]	@ (8008424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	091b      	lsrs	r3, r3, #4
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	4904      	ldr	r1, [pc, #16]	@ (8008428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008416:	5ccb      	ldrb	r3, [r1, r3]
 8008418:	f003 031f 	and.w	r3, r3, #31
 800841c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008420:	4618      	mov	r0, r3
 8008422:	bd80      	pop	{r7, pc}
 8008424:	58024400 	.word	0x58024400
 8008428:	08012db8 	.word	0x08012db8

0800842c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008430:	f7ff ffb6 	bl	80083a0 <HAL_RCC_GetHCLKFreq>
 8008434:	4602      	mov	r2, r0
 8008436:	4b06      	ldr	r3, [pc, #24]	@ (8008450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	0a1b      	lsrs	r3, r3, #8
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	4904      	ldr	r1, [pc, #16]	@ (8008454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008442:	5ccb      	ldrb	r3, [r1, r3]
 8008444:	f003 031f 	and.w	r3, r3, #31
 8008448:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800844c:	4618      	mov	r0, r3
 800844e:	bd80      	pop	{r7, pc}
 8008450:	58024400 	.word	0x58024400
 8008454:	08012db8 	.word	0x08012db8

08008458 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800845c:	b0c8      	sub	sp, #288	@ 0x120
 800845e:	af00      	add	r7, sp, #0
 8008460:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008464:	2300      	movs	r3, #0
 8008466:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800846a:	2300      	movs	r3, #0
 800846c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800847c:	2500      	movs	r5, #0
 800847e:	ea54 0305 	orrs.w	r3, r4, r5
 8008482:	d049      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800848a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800848e:	d02f      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008490:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008494:	d828      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008496:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800849a:	d01a      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800849c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084a0:	d822      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80084a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084aa:	d007      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80084ac:	e01c      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ae:	4ba7      	ldr	r3, [pc, #668]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b2:	4aa6      	ldr	r2, [pc, #664]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80084ba:	e01a      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084c0:	3308      	adds	r3, #8
 80084c2:	2102      	movs	r1, #2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 fc43 	bl	8009d50 <RCCEx_PLL2_Config>
 80084ca:	4603      	mov	r3, r0
 80084cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80084d0:	e00f      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d6:	3328      	adds	r3, #40	@ 0x28
 80084d8:	2102      	movs	r1, #2
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 fcea 	bl	8009eb4 <RCCEx_PLL3_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80084e6:	e004      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084ee:	e000      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80084f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80084fa:	4b94      	ldr	r3, [pc, #592]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008508:	4a90      	ldr	r2, [pc, #576]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800850a:	430b      	orrs	r3, r1
 800850c:	6513      	str	r3, [r2, #80]	@ 0x50
 800850e:	e003      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008510:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008514:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008524:	f04f 0900 	mov.w	r9, #0
 8008528:	ea58 0309 	orrs.w	r3, r8, r9
 800852c:	d047      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800852e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008534:	2b04      	cmp	r3, #4
 8008536:	d82a      	bhi.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008538:	a201      	add	r2, pc, #4	@ (adr r2, 8008540 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008555 	.word	0x08008555
 8008544:	08008563 	.word	0x08008563
 8008548:	08008579 	.word	0x08008579
 800854c:	08008597 	.word	0x08008597
 8008550:	08008597 	.word	0x08008597
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008554:	4b7d      	ldr	r3, [pc, #500]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008558:	4a7c      	ldr	r2, [pc, #496]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800855a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800855e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008560:	e01a      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008566:	3308      	adds	r3, #8
 8008568:	2100      	movs	r1, #0
 800856a:	4618      	mov	r0, r3
 800856c:	f001 fbf0 	bl	8009d50 <RCCEx_PLL2_Config>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008576:	e00f      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800857c:	3328      	adds	r3, #40	@ 0x28
 800857e:	2100      	movs	r1, #0
 8008580:	4618      	mov	r0, r3
 8008582:	f001 fc97 	bl	8009eb4 <RCCEx_PLL3_Config>
 8008586:	4603      	mov	r3, r0
 8008588:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800858c:	e004      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008594:	e000      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008598:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085a0:	4b6a      	ldr	r3, [pc, #424]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085a4:	f023 0107 	bic.w	r1, r3, #7
 80085a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ae:	4a67      	ldr	r2, [pc, #412]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085b0:	430b      	orrs	r3, r1
 80085b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80085b4:	e003      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80085be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80085ca:	f04f 0b00 	mov.w	fp, #0
 80085ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80085d2:	d054      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80085d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085da:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80085de:	d036      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80085e0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80085e4:	d82f      	bhi.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80085e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ea:	d032      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80085ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085f0:	d829      	bhi.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80085f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80085f4:	d02f      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80085f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80085f8:	d825      	bhi.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80085fa:	2b80      	cmp	r3, #128	@ 0x80
 80085fc:	d018      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80085fe:	2b80      	cmp	r3, #128	@ 0x80
 8008600:	d821      	bhi.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008606:	2b40      	cmp	r3, #64	@ 0x40
 8008608:	d007      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800860a:	e01c      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800860c:	4b4f      	ldr	r3, [pc, #316]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800860e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008610:	4a4e      	ldr	r2, [pc, #312]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008618:	e01e      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800861a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861e:	3308      	adds	r3, #8
 8008620:	2100      	movs	r1, #0
 8008622:	4618      	mov	r0, r3
 8008624:	f001 fb94 	bl	8009d50 <RCCEx_PLL2_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800862e:	e013      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008634:	3328      	adds	r3, #40	@ 0x28
 8008636:	2100      	movs	r1, #0
 8008638:	4618      	mov	r0, r3
 800863a:	f001 fc3b 	bl	8009eb4 <RCCEx_PLL3_Config>
 800863e:	4603      	mov	r3, r0
 8008640:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008644:	e008      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800864c:	e004      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800864e:	bf00      	nop
 8008650:	e002      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008652:	bf00      	nop
 8008654:	e000      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008660:	4b3a      	ldr	r3, [pc, #232]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008664:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800866c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800866e:	4a37      	ldr	r2, [pc, #220]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008670:	430b      	orrs	r3, r1
 8008672:	6513      	str	r3, [r2, #80]	@ 0x50
 8008674:	e003      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008676:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800867a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800867e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800868a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800868e:	2300      	movs	r3, #0
 8008690:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008694:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008698:	460b      	mov	r3, r1
 800869a:	4313      	orrs	r3, r2
 800869c:	d05c      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800869e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086a4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80086a8:	d03b      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80086aa:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80086ae:	d834      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80086b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086b4:	d037      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80086b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086ba:	d82e      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80086bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80086c0:	d033      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80086c2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80086c6:	d828      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80086c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086cc:	d01a      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80086ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086d2:	d822      	bhi.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80086d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086dc:	d007      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x296>
 80086de:	e01c      	b.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e0:	4b1a      	ldr	r3, [pc, #104]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80086e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e4:	4a19      	ldr	r2, [pc, #100]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80086e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80086ec:	e01e      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086f2:	3308      	adds	r3, #8
 80086f4:	2100      	movs	r1, #0
 80086f6:	4618      	mov	r0, r3
 80086f8:	f001 fb2a 	bl	8009d50 <RCCEx_PLL2_Config>
 80086fc:	4603      	mov	r3, r0
 80086fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008702:	e013      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008708:	3328      	adds	r3, #40	@ 0x28
 800870a:	2100      	movs	r1, #0
 800870c:	4618      	mov	r0, r3
 800870e:	f001 fbd1 	bl	8009eb4 <RCCEx_PLL3_Config>
 8008712:	4603      	mov	r3, r0
 8008714:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008718:	e008      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008720:	e004      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008722:	bf00      	nop
 8008724:	e002      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008726:	bf00      	nop
 8008728:	e000      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800872a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800872c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10d      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008734:	4b05      	ldr	r3, [pc, #20]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008738:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800873c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008742:	4a02      	ldr	r2, [pc, #8]	@ (800874c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008744:	430b      	orrs	r3, r1
 8008746:	6513      	str	r3, [r2, #80]	@ 0x50
 8008748:	e006      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800874a:	bf00      	nop
 800874c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008750:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008754:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008760:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008764:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008768:	2300      	movs	r3, #0
 800876a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800876e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008772:	460b      	mov	r3, r1
 8008774:	4313      	orrs	r3, r2
 8008776:	d03a      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800877c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800877e:	2b30      	cmp	r3, #48	@ 0x30
 8008780:	d01f      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008782:	2b30      	cmp	r3, #48	@ 0x30
 8008784:	d819      	bhi.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008786:	2b20      	cmp	r3, #32
 8008788:	d00c      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800878a:	2b20      	cmp	r3, #32
 800878c:	d815      	bhi.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x362>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d019      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008792:	2b10      	cmp	r3, #16
 8008794:	d111      	bne.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008796:	4bae      	ldr	r3, [pc, #696]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879a:	4aad      	ldr	r2, [pc, #692]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800879c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80087a2:	e011      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087a8:	3308      	adds	r3, #8
 80087aa:	2102      	movs	r1, #2
 80087ac:	4618      	mov	r0, r3
 80087ae:	f001 facf 	bl	8009d50 <RCCEx_PLL2_Config>
 80087b2:	4603      	mov	r3, r0
 80087b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80087b8:	e006      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087c0:	e002      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80087c2:	bf00      	nop
 80087c4:	e000      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80087c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10a      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80087d0:	4b9f      	ldr	r3, [pc, #636]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80087d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087de:	4a9c      	ldr	r2, [pc, #624]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087e0:	430b      	orrs	r3, r1
 80087e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80087e4:	e003      	b.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80087ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80087fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80087fe:	2300      	movs	r3, #0
 8008800:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008804:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008808:	460b      	mov	r3, r1
 800880a:	4313      	orrs	r3, r2
 800880c:	d051      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800880e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008814:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008818:	d035      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800881a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800881e:	d82e      	bhi.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008820:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008824:	d031      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8008826:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800882a:	d828      	bhi.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800882c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008830:	d01a      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008836:	d822      	bhi.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800883c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008840:	d007      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008842:	e01c      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008844:	4b82      	ldr	r3, [pc, #520]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008848:	4a81      	ldr	r2, [pc, #516]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800884a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800884e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008850:	e01c      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008856:	3308      	adds	r3, #8
 8008858:	2100      	movs	r1, #0
 800885a:	4618      	mov	r0, r3
 800885c:	f001 fa78 	bl	8009d50 <RCCEx_PLL2_Config>
 8008860:	4603      	mov	r3, r0
 8008862:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008866:	e011      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800886c:	3328      	adds	r3, #40	@ 0x28
 800886e:	2100      	movs	r1, #0
 8008870:	4618      	mov	r0, r3
 8008872:	f001 fb1f 	bl	8009eb4 <RCCEx_PLL3_Config>
 8008876:	4603      	mov	r3, r0
 8008878:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800887c:	e006      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008884:	e002      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008886:	bf00      	nop
 8008888:	e000      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800888a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800888c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10a      	bne.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008894:	4b6e      	ldr	r3, [pc, #440]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008898:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800889c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088a2:	4a6b      	ldr	r2, [pc, #428]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80088a4:	430b      	orrs	r3, r1
 80088a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80088a8:	e003      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80088b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80088be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80088c2:	2300      	movs	r3, #0
 80088c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80088c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80088cc:	460b      	mov	r3, r1
 80088ce:	4313      	orrs	r3, r2
 80088d0:	d053      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80088d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088dc:	d033      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80088de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088e2:	d82c      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80088e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088e8:	d02f      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80088ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088ee:	d826      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80088f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088f4:	d02b      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80088f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80088fa:	d820      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80088fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008900:	d012      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008906:	d81a      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d022      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800890c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008910:	d115      	bne.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008916:	3308      	adds	r3, #8
 8008918:	2101      	movs	r1, #1
 800891a:	4618      	mov	r0, r3
 800891c:	f001 fa18 	bl	8009d50 <RCCEx_PLL2_Config>
 8008920:	4603      	mov	r3, r0
 8008922:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008926:	e015      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800892c:	3328      	adds	r3, #40	@ 0x28
 800892e:	2101      	movs	r1, #1
 8008930:	4618      	mov	r0, r3
 8008932:	f001 fabf 	bl	8009eb4 <RCCEx_PLL3_Config>
 8008936:	4603      	mov	r3, r0
 8008938:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800893c:	e00a      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008944:	e006      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008946:	bf00      	nop
 8008948:	e004      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800894a:	bf00      	nop
 800894c:	e002      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800894e:	bf00      	nop
 8008950:	e000      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008954:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800895c:	4b3c      	ldr	r3, [pc, #240]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800895e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008960:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800896a:	4a39      	ldr	r2, [pc, #228]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800896c:	430b      	orrs	r3, r1
 800896e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008970:	e003      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008972:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008976:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800897a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008986:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800898a:	2300      	movs	r3, #0
 800898c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008990:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008994:	460b      	mov	r3, r1
 8008996:	4313      	orrs	r3, r2
 8008998:	d060      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800899a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800899e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80089a2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80089a6:	d039      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80089a8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80089ac:	d832      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80089ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089b2:	d035      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80089b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089b8:	d82c      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80089ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089be:	d031      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80089c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c4:	d826      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80089c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089ca:	d02d      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80089cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089d0:	d820      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80089d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089d6:	d012      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80089d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089dc:	d81a      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d024      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80089e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089e6:	d115      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ec:	3308      	adds	r3, #8
 80089ee:	2101      	movs	r1, #1
 80089f0:	4618      	mov	r0, r3
 80089f2:	f001 f9ad 	bl	8009d50 <RCCEx_PLL2_Config>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80089fc:	e017      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a02:	3328      	adds	r3, #40	@ 0x28
 8008a04:	2101      	movs	r1, #1
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fa54 	bl	8009eb4 <RCCEx_PLL3_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008a12:	e00c      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a1a:	e008      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008a1c:	bf00      	nop
 8008a1e:	e006      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008a20:	bf00      	nop
 8008a22:	e004      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008a24:	bf00      	nop
 8008a26:	e002      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008a28:	bf00      	nop
 8008a2a:	e000      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10e      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a36:	4b06      	ldr	r3, [pc, #24]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a3a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008a46:	4a02      	ldr	r2, [pc, #8]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a48:	430b      	orrs	r3, r1
 8008a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a4c:	e006      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008a4e:	bf00      	nop
 8008a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008a68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008a72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008a76:	460b      	mov	r3, r1
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	d037      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a86:	d00e      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a8c:	d816      	bhi.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d018      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008a92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a96:	d111      	bne.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a98:	4bc4      	ldr	r3, [pc, #784]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9c:	4ac3      	ldr	r2, [pc, #780]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008aa4:	e00f      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aaa:	3308      	adds	r3, #8
 8008aac:	2101      	movs	r1, #1
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f001 f94e 	bl	8009d50 <RCCEx_PLL2_Config>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008aba:	e004      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ac2:	e000      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10a      	bne.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ace:	4bb7      	ldr	r3, [pc, #732]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ad2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ada:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008adc:	4ab3      	ldr	r2, [pc, #716]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ade:	430b      	orrs	r3, r1
 8008ae0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ae2:	e003      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ae8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008afc:	2300      	movs	r3, #0
 8008afe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008b02:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008b06:	460b      	mov	r3, r1
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	d039      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	d81c      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008b16:	a201      	add	r2, pc, #4	@ (adr r2, 8008b1c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1c:	08008b59 	.word	0x08008b59
 8008b20:	08008b2d 	.word	0x08008b2d
 8008b24:	08008b3b 	.word	0x08008b3b
 8008b28:	08008b59 	.word	0x08008b59
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b2c:	4b9f      	ldr	r3, [pc, #636]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b30:	4a9e      	ldr	r2, [pc, #632]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b38:	e00f      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b3e:	3308      	adds	r3, #8
 8008b40:	2102      	movs	r1, #2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f001 f904 	bl	8009d50 <RCCEx_PLL2_Config>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b4e:	e004      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b56:	e000      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008b62:	4b92      	ldr	r3, [pc, #584]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b66:	f023 0103 	bic.w	r1, r3, #3
 8008b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b70:	4a8e      	ldr	r2, [pc, #568]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b72:	430b      	orrs	r3, r1
 8008b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008b76:	e003      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b90:	2300      	movs	r3, #0
 8008b92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	f000 8099 	beq.w	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ba2:	4b83      	ldr	r3, [pc, #524]	@ (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a82      	ldr	r2, [pc, #520]	@ (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008bae:	f7fa fd63 	bl	8003678 <HAL_GetTick>
 8008bb2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bb6:	e00b      	b.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bb8:	f7fa fd5e 	bl	8003678 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b64      	cmp	r3, #100	@ 0x64
 8008bc6:	d903      	bls.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008bce:	e005      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bd0:	4b77      	ldr	r3, [pc, #476]	@ (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0ed      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008bdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d173      	bne.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008be4:	4b71      	ldr	r3, [pc, #452]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008be6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bf0:	4053      	eors	r3, r2
 8008bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d015      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bfa:	4b6c      	ldr	r3, [pc, #432]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c02:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c06:	4b69      	ldr	r3, [pc, #420]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c0a:	4a68      	ldr	r2, [pc, #416]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c10:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c12:	4b66      	ldr	r3, [pc, #408]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c16:	4a65      	ldr	r2, [pc, #404]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c1c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008c1e:	4a63      	ldr	r2, [pc, #396]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c24:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c32:	d118      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c34:	f7fa fd20 	bl	8003678 <HAL_GetTick>
 8008c38:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c3c:	e00d      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c3e:	f7fa fd1b 	bl	8003678 <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008c48:	1ad2      	subs	r2, r2, r3
 8008c4a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d903      	bls.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008c58:	e005      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c5a:	4b54      	ldr	r3, [pc, #336]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0eb      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008c66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d129      	bne.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c7e:	d10e      	bne.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008c80:	4b4a      	ldr	r3, [pc, #296]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c90:	091a      	lsrs	r2, r3, #4
 8008c92:	4b48      	ldr	r3, [pc, #288]	@ (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008c94:	4013      	ands	r3, r2
 8008c96:	4a45      	ldr	r2, [pc, #276]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	6113      	str	r3, [r2, #16]
 8008c9c:	e005      	b.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008c9e:	4b43      	ldr	r3, [pc, #268]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	4a42      	ldr	r2, [pc, #264]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ca4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008ca8:	6113      	str	r3, [r2, #16]
 8008caa:	4b40      	ldr	r3, [pc, #256]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cac:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cba:	4a3c      	ldr	r2, [pc, #240]	@ (8008dac <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cbc:	430b      	orrs	r3, r1
 8008cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cc0:	e008      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008cc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cc6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008cca:	e003      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cd0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f002 0301 	and.w	r3, r2, #1
 8008ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	f000 8090 	beq.w	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cfe:	2b28      	cmp	r3, #40	@ 0x28
 8008d00:	d870      	bhi.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008d02:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008ded 	.word	0x08008ded
 8008d0c:	08008de5 	.word	0x08008de5
 8008d10:	08008de5 	.word	0x08008de5
 8008d14:	08008de5 	.word	0x08008de5
 8008d18:	08008de5 	.word	0x08008de5
 8008d1c:	08008de5 	.word	0x08008de5
 8008d20:	08008de5 	.word	0x08008de5
 8008d24:	08008de5 	.word	0x08008de5
 8008d28:	08008db9 	.word	0x08008db9
 8008d2c:	08008de5 	.word	0x08008de5
 8008d30:	08008de5 	.word	0x08008de5
 8008d34:	08008de5 	.word	0x08008de5
 8008d38:	08008de5 	.word	0x08008de5
 8008d3c:	08008de5 	.word	0x08008de5
 8008d40:	08008de5 	.word	0x08008de5
 8008d44:	08008de5 	.word	0x08008de5
 8008d48:	08008dcf 	.word	0x08008dcf
 8008d4c:	08008de5 	.word	0x08008de5
 8008d50:	08008de5 	.word	0x08008de5
 8008d54:	08008de5 	.word	0x08008de5
 8008d58:	08008de5 	.word	0x08008de5
 8008d5c:	08008de5 	.word	0x08008de5
 8008d60:	08008de5 	.word	0x08008de5
 8008d64:	08008de5 	.word	0x08008de5
 8008d68:	08008ded 	.word	0x08008ded
 8008d6c:	08008de5 	.word	0x08008de5
 8008d70:	08008de5 	.word	0x08008de5
 8008d74:	08008de5 	.word	0x08008de5
 8008d78:	08008de5 	.word	0x08008de5
 8008d7c:	08008de5 	.word	0x08008de5
 8008d80:	08008de5 	.word	0x08008de5
 8008d84:	08008de5 	.word	0x08008de5
 8008d88:	08008ded 	.word	0x08008ded
 8008d8c:	08008de5 	.word	0x08008de5
 8008d90:	08008de5 	.word	0x08008de5
 8008d94:	08008de5 	.word	0x08008de5
 8008d98:	08008de5 	.word	0x08008de5
 8008d9c:	08008de5 	.word	0x08008de5
 8008da0:	08008de5 	.word	0x08008de5
 8008da4:	08008de5 	.word	0x08008de5
 8008da8:	08008ded 	.word	0x08008ded
 8008dac:	58024400 	.word	0x58024400
 8008db0:	58024800 	.word	0x58024800
 8008db4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 ffc5 	bl	8009d50 <RCCEx_PLL2_Config>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008dcc:	e00f      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dd2:	3328      	adds	r3, #40	@ 0x28
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 f86c 	bl	8009eb4 <RCCEx_PLL3_Config>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008de2:	e004      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dea:	e000      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10b      	bne.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008df6:	4bc0      	ldr	r3, [pc, #768]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dfa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e06:	4abc      	ldr	r2, [pc, #752]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e0c:	e003      	b.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	f002 0302 	and.w	r3, r2, #2
 8008e22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e26:	2300      	movs	r3, #0
 8008e28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008e2c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008e30:	460b      	mov	r3, r1
 8008e32:	4313      	orrs	r3, r2
 8008e34:	d043      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d824      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008e42:	a201      	add	r2, pc, #4	@ (adr r2, 8008e48 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e95 	.word	0x08008e95
 8008e4c:	08008e61 	.word	0x08008e61
 8008e50:	08008e77 	.word	0x08008e77
 8008e54:	08008e95 	.word	0x08008e95
 8008e58:	08008e95 	.word	0x08008e95
 8008e5c:	08008e95 	.word	0x08008e95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e64:	3308      	adds	r3, #8
 8008e66:	2101      	movs	r1, #1
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 ff71 	bl	8009d50 <RCCEx_PLL2_Config>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e74:	e00f      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e7a:	3328      	adds	r3, #40	@ 0x28
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 f818 	bl	8009eb4 <RCCEx_PLL3_Config>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e8a:	e004      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e92:	e000      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10b      	bne.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008e9e:	4b96      	ldr	r3, [pc, #600]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea2:	f023 0107 	bic.w	r1, r3, #7
 8008ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eae:	4a92      	ldr	r2, [pc, #584]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008eb0:	430b      	orrs	r3, r1
 8008eb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8008eb4:	e003      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	f002 0304 	and.w	r3, r2, #4
 8008eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ed4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	4313      	orrs	r3, r2
 8008edc:	d043      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ee6:	2b05      	cmp	r3, #5
 8008ee8:	d824      	bhi.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008eea:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef0:	08008f3d 	.word	0x08008f3d
 8008ef4:	08008f09 	.word	0x08008f09
 8008ef8:	08008f1f 	.word	0x08008f1f
 8008efc:	08008f3d 	.word	0x08008f3d
 8008f00:	08008f3d 	.word	0x08008f3d
 8008f04:	08008f3d 	.word	0x08008f3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	2101      	movs	r1, #1
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 ff1d 	bl	8009d50 <RCCEx_PLL2_Config>
 8008f16:	4603      	mov	r3, r0
 8008f18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008f1c:	e00f      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f22:	3328      	adds	r3, #40	@ 0x28
 8008f24:	2101      	movs	r1, #1
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 ffc4 	bl	8009eb4 <RCCEx_PLL3_Config>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008f32:	e004      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f3a:	e000      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10b      	bne.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f46:	4b6c      	ldr	r3, [pc, #432]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f4a:	f023 0107 	bic.w	r1, r3, #7
 8008f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f56:	4a68      	ldr	r2, [pc, #416]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f5c:	e003      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	f002 0320 	and.w	r3, r2, #32
 8008f72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008f76:	2300      	movs	r3, #0
 8008f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008f80:	460b      	mov	r3, r1
 8008f82:	4313      	orrs	r3, r2
 8008f84:	d055      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f92:	d033      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f98:	d82c      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f9e:	d02f      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fa4:	d826      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008fa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008faa:	d02b      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008fac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008fb0:	d820      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fb6:	d012      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fbc:	d81a      	bhi.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d022      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fc6:	d115      	bne.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fcc:	3308      	adds	r3, #8
 8008fce:	2100      	movs	r1, #0
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 febd 	bl	8009d50 <RCCEx_PLL2_Config>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008fdc:	e015      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe2:	3328      	adds	r3, #40	@ 0x28
 8008fe4:	2102      	movs	r1, #2
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 ff64 	bl	8009eb4 <RCCEx_PLL3_Config>
 8008fec:	4603      	mov	r3, r0
 8008fee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ff2:	e00a      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ffa:	e006      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ffc:	bf00      	nop
 8008ffe:	e004      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009000:	bf00      	nop
 8009002:	e002      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009004:	bf00      	nop
 8009006:	e000      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800900a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10b      	bne.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009012:	4b39      	ldr	r3, [pc, #228]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009016:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800901a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800901e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009022:	4a35      	ldr	r2, [pc, #212]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009024:	430b      	orrs	r3, r1
 8009026:	6553      	str	r3, [r2, #84]	@ 0x54
 8009028:	e003      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800902a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800902e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800903e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009042:	2300      	movs	r3, #0
 8009044:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009048:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800904c:	460b      	mov	r3, r1
 800904e:	4313      	orrs	r3, r2
 8009050:	d058      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009056:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800905a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800905e:	d033      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009060:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009064:	d82c      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800906a:	d02f      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800906c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009070:	d826      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009072:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009076:	d02b      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009078:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800907c:	d820      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800907e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009082:	d012      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8009084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009088:	d81a      	bhi.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800908a:	2b00      	cmp	r3, #0
 800908c:	d022      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800908e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009092:	d115      	bne.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009098:	3308      	adds	r3, #8
 800909a:	2100      	movs	r1, #0
 800909c:	4618      	mov	r0, r3
 800909e:	f000 fe57 	bl	8009d50 <RCCEx_PLL2_Config>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80090a8:	e015      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ae:	3328      	adds	r3, #40	@ 0x28
 80090b0:	2102      	movs	r1, #2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fefe 	bl	8009eb4 <RCCEx_PLL3_Config>
 80090b8:	4603      	mov	r3, r0
 80090ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80090be:	e00a      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80090c6:	e006      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80090c8:	bf00      	nop
 80090ca:	e004      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80090cc:	bf00      	nop
 80090ce:	e002      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80090d0:	bf00      	nop
 80090d2:	e000      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80090d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10e      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80090de:	4b06      	ldr	r3, [pc, #24]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80090e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80090e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090ee:	4a02      	ldr	r2, [pc, #8]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80090f0:	430b      	orrs	r3, r1
 80090f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80090f4:	e006      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80090f6:	bf00      	nop
 80090f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009100:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009114:	2300      	movs	r3, #0
 8009116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800911a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800911e:	460b      	mov	r3, r1
 8009120:	4313      	orrs	r3, r2
 8009122:	d055      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009124:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009128:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800912c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009130:	d033      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009132:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009136:	d82c      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800913c:	d02f      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800913e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009142:	d826      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009144:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009148:	d02b      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800914a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800914e:	d820      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009154:	d012      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009156:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800915a:	d81a      	bhi.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800915c:	2b00      	cmp	r3, #0
 800915e:	d022      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8009160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009164:	d115      	bne.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800916a:	3308      	adds	r3, #8
 800916c:	2100      	movs	r1, #0
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fdee 	bl	8009d50 <RCCEx_PLL2_Config>
 8009174:	4603      	mov	r3, r0
 8009176:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800917a:	e015      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800917c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009180:	3328      	adds	r3, #40	@ 0x28
 8009182:	2102      	movs	r1, #2
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fe95 	bl	8009eb4 <RCCEx_PLL3_Config>
 800918a:	4603      	mov	r3, r0
 800918c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009190:	e00a      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009198:	e006      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800919a:	bf00      	nop
 800919c:	e004      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800919e:	bf00      	nop
 80091a0:	e002      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80091a2:	bf00      	nop
 80091a4:	e000      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80091a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10b      	bne.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091b0:	4ba1      	ldr	r3, [pc, #644]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80091b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80091c0:	4a9d      	ldr	r2, [pc, #628]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091c2:	430b      	orrs	r3, r1
 80091c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80091c6:	e003      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80091d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	f002 0308 	and.w	r3, r2, #8
 80091dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091e0:	2300      	movs	r3, #0
 80091e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80091e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80091ea:	460b      	mov	r3, r1
 80091ec:	4313      	orrs	r3, r2
 80091ee:	d01e      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80091f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091fc:	d10c      	bne.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009202:	3328      	adds	r3, #40	@ 0x28
 8009204:	2102      	movs	r1, #2
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fe54 	bl	8009eb4 <RCCEx_PLL3_Config>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009218:	4b87      	ldr	r3, [pc, #540]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800921a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800921c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009228:	4a83      	ldr	r2, [pc, #524]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800922a:	430b      	orrs	r3, r1
 800922c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800922e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f002 0310 	and.w	r3, r2, #16
 800923a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800923e:	2300      	movs	r3, #0
 8009240:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009244:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009248:	460b      	mov	r3, r1
 800924a:	4313      	orrs	r3, r2
 800924c:	d01e      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800924e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800925a:	d10c      	bne.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800925c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009260:	3328      	adds	r3, #40	@ 0x28
 8009262:	2102      	movs	r1, #2
 8009264:	4618      	mov	r0, r3
 8009266:	f000 fe25 	bl	8009eb4 <RCCEx_PLL3_Config>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d002      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009276:	4b70      	ldr	r3, [pc, #448]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800927a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800927e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009282:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009286:	4a6c      	ldr	r2, [pc, #432]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009288:	430b      	orrs	r3, r1
 800928a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800928c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800929c:	2300      	movs	r3, #0
 800929e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80092a6:	460b      	mov	r3, r1
 80092a8:	4313      	orrs	r3, r2
 80092aa:	d03e      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80092ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80092b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092b8:	d022      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80092ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092be:	d81b      	bhi.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80092c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092c8:	d00b      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80092ca:	e015      	b.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092d0:	3308      	adds	r3, #8
 80092d2:	2100      	movs	r1, #0
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fd3b 	bl	8009d50 <RCCEx_PLL2_Config>
 80092da:	4603      	mov	r3, r0
 80092dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80092e0:	e00f      	b.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092e6:	3328      	adds	r3, #40	@ 0x28
 80092e8:	2102      	movs	r1, #2
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fde2 	bl	8009eb4 <RCCEx_PLL3_Config>
 80092f0:	4603      	mov	r3, r0
 80092f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80092f6:	e004      	b.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80092fe:	e000      	b.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8009300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009302:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10b      	bne.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800930a:	4b4b      	ldr	r3, [pc, #300]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800930c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800930e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009316:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800931a:	4a47      	ldr	r2, [pc, #284]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800931c:	430b      	orrs	r3, r1
 800931e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009320:	e003      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009322:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009326:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800932a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800932e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009332:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009336:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009338:	2300      	movs	r3, #0
 800933a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800933c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009340:	460b      	mov	r3, r1
 8009342:	4313      	orrs	r3, r2
 8009344:	d03b      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800934a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800934e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009352:	d01f      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8009354:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009358:	d818      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800935a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800935e:	d003      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8009360:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009364:	d007      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8009366:	e011      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009368:	4b33      	ldr	r3, [pc, #204]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800936a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936c:	4a32      	ldr	r2, [pc, #200]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800936e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009374:	e00f      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800937a:	3328      	adds	r3, #40	@ 0x28
 800937c:	2101      	movs	r1, #1
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fd98 	bl	8009eb4 <RCCEx_PLL3_Config>
 8009384:	4603      	mov	r3, r0
 8009386:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800938a:	e004      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009392:	e000      	b.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8009394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009396:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10b      	bne.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800939e:	4b26      	ldr	r3, [pc, #152]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80093a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80093a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ae:	4a22      	ldr	r2, [pc, #136]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80093b0:	430b      	orrs	r3, r1
 80093b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80093b4:	e003      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80093ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80093cc:	2300      	movs	r3, #0
 80093ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80093d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80093d4:	460b      	mov	r3, r1
 80093d6:	4313      	orrs	r3, r2
 80093d8:	d034      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80093da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d003      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80093e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093e8:	d007      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80093ea:	e011      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093ec:	4b12      	ldr	r3, [pc, #72]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80093ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f0:	4a11      	ldr	r2, [pc, #68]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80093f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80093f8:	e00e      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093fe:	3308      	adds	r3, #8
 8009400:	2102      	movs	r1, #2
 8009402:	4618      	mov	r0, r3
 8009404:	f000 fca4 	bl	8009d50 <RCCEx_PLL2_Config>
 8009408:	4603      	mov	r3, r0
 800940a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800940e:	e003      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009418:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10d      	bne.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009420:	4b05      	ldr	r3, [pc, #20]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009424:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800942c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800942e:	4a02      	ldr	r2, [pc, #8]	@ (8009438 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009430:	430b      	orrs	r3, r1
 8009432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009434:	e006      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8009436:	bf00      	nop
 8009438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800943c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009440:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009452:	2300      	movs	r3, #0
 8009454:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009456:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800945a:	460b      	mov	r3, r1
 800945c:	4313      	orrs	r3, r2
 800945e:	d00c      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009464:	3328      	adds	r3, #40	@ 0x28
 8009466:	2102      	movs	r1, #2
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fd23 	bl	8009eb4 <RCCEx_PLL3_Config>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800947a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009486:	663b      	str	r3, [r7, #96]	@ 0x60
 8009488:	2300      	movs	r3, #0
 800948a:	667b      	str	r3, [r7, #100]	@ 0x64
 800948c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009490:	460b      	mov	r3, r1
 8009492:	4313      	orrs	r3, r2
 8009494:	d038      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800949a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800949e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094a2:	d018      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80094a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094a8:	d811      	bhi.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80094aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ae:	d014      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80094b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094b4:	d80b      	bhi.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d011      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80094ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094be:	d106      	bne.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c0:	4bc3      	ldr	r3, [pc, #780]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c4:	4ac2      	ldr	r2, [pc, #776]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80094cc:	e008      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80094d4:	e004      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80094d6:	bf00      	nop
 80094d8:	e002      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80094da:	bf00      	nop
 80094dc:	e000      	b.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80094de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10b      	bne.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094e8:	4bb9      	ldr	r3, [pc, #740]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80094f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f8:	4ab5      	ldr	r2, [pc, #724]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094fa:	430b      	orrs	r3, r1
 80094fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80094fe:	e003      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009500:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009504:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009514:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009516:	2300      	movs	r3, #0
 8009518:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800951a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800951e:	460b      	mov	r3, r1
 8009520:	4313      	orrs	r3, r2
 8009522:	d009      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009524:	4baa      	ldr	r3, [pc, #680]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009528:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800952c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009532:	4aa7      	ldr	r2, [pc, #668]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009534:	430b      	orrs	r3, r1
 8009536:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009544:	653b      	str	r3, [r7, #80]	@ 0x50
 8009546:	2300      	movs	r3, #0
 8009548:	657b      	str	r3, [r7, #84]	@ 0x54
 800954a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800954e:	460b      	mov	r3, r1
 8009550:	4313      	orrs	r3, r2
 8009552:	d009      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009554:	4b9e      	ldr	r3, [pc, #632]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009558:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800955c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009562:	4a9b      	ldr	r2, [pc, #620]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009564:	430b      	orrs	r3, r1
 8009566:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009574:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009576:	2300      	movs	r3, #0
 8009578:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800957a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800957e:	460b      	mov	r3, r1
 8009580:	4313      	orrs	r3, r2
 8009582:	d009      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009584:	4b92      	ldr	r3, [pc, #584]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009588:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800958c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009592:	4a8f      	ldr	r2, [pc, #572]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009594:	430b      	orrs	r3, r1
 8009596:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80095a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80095a6:	2300      	movs	r3, #0
 80095a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80095ae:	460b      	mov	r3, r1
 80095b0:	4313      	orrs	r3, r2
 80095b2:	d00e      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095b4:	4b86      	ldr	r3, [pc, #536]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	4a85      	ldr	r2, [pc, #532]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80095ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80095be:	6113      	str	r3, [r2, #16]
 80095c0:	4b83      	ldr	r3, [pc, #524]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80095c2:	6919      	ldr	r1, [r3, #16]
 80095c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80095cc:	4a80      	ldr	r2, [pc, #512]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80095ce:	430b      	orrs	r3, r1
 80095d0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80095d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80095de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80095e0:	2300      	movs	r3, #0
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80095e8:	460b      	mov	r3, r1
 80095ea:	4313      	orrs	r3, r2
 80095ec:	d009      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80095ee:	4b78      	ldr	r3, [pc, #480]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80095f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80095f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095fc:	4a74      	ldr	r2, [pc, #464]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80095fe:	430b      	orrs	r3, r1
 8009600:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800960e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009610:	2300      	movs	r3, #0
 8009612:	637b      	str	r3, [r7, #52]	@ 0x34
 8009614:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009618:	460b      	mov	r3, r1
 800961a:	4313      	orrs	r3, r2
 800961c:	d00a      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800961e:	4b6c      	ldr	r3, [pc, #432]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009622:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800962a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800962e:	4a68      	ldr	r2, [pc, #416]	@ (80097d0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009630:	430b      	orrs	r3, r1
 8009632:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	2100      	movs	r1, #0
 800963e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009646:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800964a:	460b      	mov	r3, r1
 800964c:	4313      	orrs	r3, r2
 800964e:	d011      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009654:	3308      	adds	r3, #8
 8009656:	2100      	movs	r1, #0
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fb79 	bl	8009d50 <RCCEx_PLL2_Config>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009664:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009670:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	2100      	movs	r1, #0
 800967e:	6239      	str	r1, [r7, #32]
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	627b      	str	r3, [r7, #36]	@ 0x24
 8009686:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800968a:	460b      	mov	r3, r1
 800968c:	4313      	orrs	r3, r2
 800968e:	d011      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009694:	3308      	adds	r3, #8
 8009696:	2101      	movs	r1, #1
 8009698:	4618      	mov	r0, r3
 800969a:	f000 fb59 	bl	8009d50 <RCCEx_PLL2_Config>
 800969e:	4603      	mov	r3, r0
 80096a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80096a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80096b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	2100      	movs	r1, #0
 80096be:	61b9      	str	r1, [r7, #24]
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	61fb      	str	r3, [r7, #28]
 80096c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80096ca:	460b      	mov	r3, r1
 80096cc:	4313      	orrs	r3, r2
 80096ce:	d011      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096d4:	3308      	adds	r3, #8
 80096d6:	2102      	movs	r1, #2
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 fb39 	bl	8009d50 <RCCEx_PLL2_Config>
 80096de:	4603      	mov	r3, r0
 80096e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80096e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80096f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fc:	2100      	movs	r1, #0
 80096fe:	6139      	str	r1, [r7, #16]
 8009700:	f003 0308 	and.w	r3, r3, #8
 8009704:	617b      	str	r3, [r7, #20]
 8009706:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800970a:	460b      	mov	r3, r1
 800970c:	4313      	orrs	r3, r2
 800970e:	d011      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009714:	3328      	adds	r3, #40	@ 0x28
 8009716:	2100      	movs	r1, #0
 8009718:	4618      	mov	r0, r3
 800971a:	f000 fbcb 	bl	8009eb4 <RCCEx_PLL3_Config>
 800971e:	4603      	mov	r3, r0
 8009720:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009724:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009728:	2b00      	cmp	r3, #0
 800972a:	d003      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009730:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	2100      	movs	r1, #0
 800973e:	60b9      	str	r1, [r7, #8]
 8009740:	f003 0310 	and.w	r3, r3, #16
 8009744:	60fb      	str	r3, [r7, #12]
 8009746:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800974a:	460b      	mov	r3, r1
 800974c:	4313      	orrs	r3, r2
 800974e:	d011      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009754:	3328      	adds	r3, #40	@ 0x28
 8009756:	2101      	movs	r1, #1
 8009758:	4618      	mov	r0, r3
 800975a:	f000 fbab 	bl	8009eb4 <RCCEx_PLL3_Config>
 800975e:	4603      	mov	r3, r0
 8009760:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009764:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009768:	2b00      	cmp	r3, #0
 800976a:	d003      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009770:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	2100      	movs	r1, #0
 800977e:	6039      	str	r1, [r7, #0]
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	607b      	str	r3, [r7, #4]
 8009786:	e9d7 1200 	ldrd	r1, r2, [r7]
 800978a:	460b      	mov	r3, r1
 800978c:	4313      	orrs	r3, r2
 800978e:	d011      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009790:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009794:	3328      	adds	r3, #40	@ 0x28
 8009796:	2102      	movs	r1, #2
 8009798:	4618      	mov	r0, r3
 800979a:	f000 fb8b 	bl	8009eb4 <RCCEx_PLL3_Config>
 800979e:	4603      	mov	r3, r0
 80097a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80097a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80097b4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	e000      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80097c8:	46bd      	mov	sp, r7
 80097ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097ce:	bf00      	nop
 80097d0:	58024400 	.word	0x58024400

080097d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80097d8:	f7fe fde2 	bl	80083a0 <HAL_RCC_GetHCLKFreq>
 80097dc:	4602      	mov	r2, r0
 80097de:	4b06      	ldr	r3, [pc, #24]	@ (80097f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	091b      	lsrs	r3, r3, #4
 80097e4:	f003 0307 	and.w	r3, r3, #7
 80097e8:	4904      	ldr	r1, [pc, #16]	@ (80097fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097ea:	5ccb      	ldrb	r3, [r1, r3]
 80097ec:	f003 031f 	and.w	r3, r3, #31
 80097f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	58024400 	.word	0x58024400
 80097fc:	08012db8 	.word	0x08012db8

08009800 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009800:	b480      	push	{r7}
 8009802:	b089      	sub	sp, #36	@ 0x24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009808:	4ba1      	ldr	r3, [pc, #644]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800980a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980c:	f003 0303 	and.w	r3, r3, #3
 8009810:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009812:	4b9f      	ldr	r3, [pc, #636]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009816:	0b1b      	lsrs	r3, r3, #12
 8009818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800981c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800981e:	4b9c      	ldr	r3, [pc, #624]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009822:	091b      	lsrs	r3, r3, #4
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800982a:	4b99      	ldr	r3, [pc, #612]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800982c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800982e:	08db      	lsrs	r3, r3, #3
 8009830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	fb02 f303 	mul.w	r3, r2, r3
 800983a:	ee07 3a90 	vmov	s15, r3
 800983e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009842:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 8111 	beq.w	8009a70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	2b02      	cmp	r3, #2
 8009852:	f000 8083 	beq.w	800995c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	2b02      	cmp	r3, #2
 800985a:	f200 80a1 	bhi.w	80099a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d003      	beq.n	800986c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d056      	beq.n	8009918 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800986a:	e099      	b.n	80099a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800986c:	4b88      	ldr	r3, [pc, #544]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 0320 	and.w	r3, r3, #32
 8009874:	2b00      	cmp	r3, #0
 8009876:	d02d      	beq.n	80098d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009878:	4b85      	ldr	r3, [pc, #532]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	08db      	lsrs	r3, r3, #3
 800987e:	f003 0303 	and.w	r3, r3, #3
 8009882:	4a84      	ldr	r2, [pc, #528]	@ (8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009884:	fa22 f303 	lsr.w	r3, r2, r3
 8009888:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a2:	4b7b      	ldr	r3, [pc, #492]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098d2:	e087      	b.n	80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	ee07 3a90 	vmov	s15, r3
 80098da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009a9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098e6:	4b6a      	ldr	r3, [pc, #424]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ee:	ee07 3a90 	vmov	s15, r3
 80098f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800990a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800990e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009916:	e065      	b.n	80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	ee07 3a90 	vmov	s15, r3
 800991e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009922:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800992a:	4b59      	ldr	r3, [pc, #356]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800992c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800992e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009932:	ee07 3a90 	vmov	s15, r3
 8009936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800993a:	ed97 6a03 	vldr	s12, [r7, #12]
 800993e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800994a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800994e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800995a:	e043      	b.n	80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	ee07 3a90 	vmov	s15, r3
 8009962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009966:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800996a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996e:	4b48      	ldr	r3, [pc, #288]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800997e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009982:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800998a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800998e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800999a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800999e:	e021      	b.n	80099e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	ee07 3a90 	vmov	s15, r3
 80099a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b2:	4b37      	ldr	r3, [pc, #220]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009a98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80099e4:	4b2a      	ldr	r3, [pc, #168]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e8:	0a5b      	lsrs	r3, r3, #9
 80099ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a0a:	ee17 2a90 	vmov	r2, s15
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009a12:	4b1f      	ldr	r3, [pc, #124]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a16:	0c1b      	lsrs	r3, r3, #16
 8009a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a1c:	ee07 3a90 	vmov	s15, r3
 8009a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a38:	ee17 2a90 	vmov	r2, s15
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009a40:	4b13      	ldr	r3, [pc, #76]	@ (8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a44:	0e1b      	lsrs	r3, r3, #24
 8009a46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a66:	ee17 2a90 	vmov	r2, s15
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a6e:	e008      	b.n	8009a82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	609a      	str	r2, [r3, #8]
}
 8009a82:	bf00      	nop
 8009a84:	3724      	adds	r7, #36	@ 0x24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	58024400 	.word	0x58024400
 8009a94:	03d09000 	.word	0x03d09000
 8009a98:	46000000 	.word	0x46000000
 8009a9c:	4c742400 	.word	0x4c742400
 8009aa0:	4a742400 	.word	0x4a742400
 8009aa4:	4bb71b00 	.word	0x4bb71b00

08009aa8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b089      	sub	sp, #36	@ 0x24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ab0:	4ba1      	ldr	r3, [pc, #644]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab4:	f003 0303 	and.w	r3, r3, #3
 8009ab8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009aba:	4b9f      	ldr	r3, [pc, #636]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009abe:	0d1b      	lsrs	r3, r3, #20
 8009ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ac4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ac6:	4b9c      	ldr	r3, [pc, #624]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aca:	0a1b      	lsrs	r3, r3, #8
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009ad2:	4b99      	ldr	r3, [pc, #612]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ad6:	08db      	lsrs	r3, r3, #3
 8009ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	fb02 f303 	mul.w	r3, r2, r3
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 8111 	beq.w	8009d18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	f000 8083 	beq.w	8009c04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	f200 80a1 	bhi.w	8009c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d003      	beq.n	8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d056      	beq.n	8009bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b12:	e099      	b.n	8009c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b14:	4b88      	ldr	r3, [pc, #544]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0320 	and.w	r3, r3, #32
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d02d      	beq.n	8009b7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b20:	4b85      	ldr	r3, [pc, #532]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	08db      	lsrs	r3, r3, #3
 8009b26:	f003 0303 	and.w	r3, r3, #3
 8009b2a:	4a84      	ldr	r2, [pc, #528]	@ (8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	ee07 3a90 	vmov	s15, r3
 8009b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b52:	ee07 3a90 	vmov	s15, r3
 8009b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b7a:	e087      	b.n	8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009d44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b96:	ee07 3a90 	vmov	s15, r3
 8009b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ba2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bbe:	e065      	b.n	8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd2:	4b59      	ldr	r3, [pc, #356]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009be6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c02:	e043      	b.n	8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009d4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c16:	4b48      	ldr	r3, [pc, #288]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1e:	ee07 3a90 	vmov	s15, r3
 8009c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c46:	e021      	b.n	8009c8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c5a:	4b37      	ldr	r3, [pc, #220]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c62:	ee07 3a90 	vmov	s15, r3
 8009c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c90:	0a5b      	lsrs	r3, r3, #9
 8009c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cb2:	ee17 2a90 	vmov	r2, s15
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009cba:	4b1f      	ldr	r3, [pc, #124]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cbe:	0c1b      	lsrs	r3, r3, #16
 8009cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cc4:	ee07 3a90 	vmov	s15, r3
 8009cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ccc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ce0:	ee17 2a90 	vmov	r2, s15
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009ce8:	4b13      	ldr	r3, [pc, #76]	@ (8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cec:	0e1b      	lsrs	r3, r3, #24
 8009cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d0e:	ee17 2a90 	vmov	r2, s15
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d16:	e008      	b.n	8009d2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	609a      	str	r2, [r3, #8]
}
 8009d2a:	bf00      	nop
 8009d2c:	3724      	adds	r7, #36	@ 0x24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	58024400 	.word	0x58024400
 8009d3c:	03d09000 	.word	0x03d09000
 8009d40:	46000000 	.word	0x46000000
 8009d44:	4c742400 	.word	0x4c742400
 8009d48:	4a742400 	.word	0x4a742400
 8009d4c:	4bb71b00 	.word	0x4bb71b00

08009d50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d5e:	4b53      	ldr	r3, [pc, #332]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d62:	f003 0303 	and.w	r3, r3, #3
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d101      	bne.n	8009d6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e099      	b.n	8009ea2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a4e      	ldr	r2, [pc, #312]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009d74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d7a:	f7f9 fc7d 	bl	8003678 <HAL_GetTick>
 8009d7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d80:	e008      	b.n	8009d94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d82:	f7f9 fc79 	bl	8003678 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d901      	bls.n	8009d94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e086      	b.n	8009ea2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d94:	4b45      	ldr	r3, [pc, #276]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1f0      	bne.n	8009d82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009da0:	4b42      	ldr	r3, [pc, #264]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	031b      	lsls	r3, r3, #12
 8009dae:	493f      	ldr	r1, [pc, #252]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009db0:	4313      	orrs	r3, r2
 8009db2:	628b      	str	r3, [r1, #40]	@ 0x28
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	025b      	lsls	r3, r3, #9
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	041b      	lsls	r3, r3, #16
 8009dd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	061b      	lsls	r3, r3, #24
 8009de0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009de4:	4931      	ldr	r1, [pc, #196]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009de6:	4313      	orrs	r3, r2
 8009de8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009dea:	4b30      	ldr	r3, [pc, #192]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	492d      	ldr	r1, [pc, #180]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e00:	f023 0220 	bic.w	r2, r3, #32
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	699b      	ldr	r3, [r3, #24]
 8009e08:	4928      	ldr	r1, [pc, #160]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e0e:	4b27      	ldr	r3, [pc, #156]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e12:	4a26      	ldr	r2, [pc, #152]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e14:	f023 0310 	bic.w	r3, r3, #16
 8009e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e1a:	4b24      	ldr	r3, [pc, #144]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e1e:	4b24      	ldr	r3, [pc, #144]	@ (8009eb0 <RCCEx_PLL2_Config+0x160>)
 8009e20:	4013      	ands	r3, r2
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	69d2      	ldr	r2, [r2, #28]
 8009e26:	00d2      	lsls	r2, r2, #3
 8009e28:	4920      	ldr	r1, [pc, #128]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e32:	4a1e      	ldr	r2, [pc, #120]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e34:	f043 0310 	orr.w	r3, r3, #16
 8009e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d106      	bne.n	8009e4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e40:	4b1a      	ldr	r3, [pc, #104]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e44:	4a19      	ldr	r2, [pc, #100]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e4c:	e00f      	b.n	8009e6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d106      	bne.n	8009e62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e54:	4b15      	ldr	r3, [pc, #84]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e58:	4a14      	ldr	r2, [pc, #80]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e60:	e005      	b.n	8009e6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e62:	4b12      	ldr	r3, [pc, #72]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e66:	4a11      	ldr	r2, [pc, #68]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a0e      	ldr	r2, [pc, #56]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e7a:	f7f9 fbfd 	bl	8003678 <HAL_GetTick>
 8009e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e80:	e008      	b.n	8009e94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e82:	f7f9 fbf9 	bl	8003678 <HAL_GetTick>
 8009e86:	4602      	mov	r2, r0
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d901      	bls.n	8009e94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e006      	b.n	8009ea2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e94:	4b05      	ldr	r3, [pc, #20]	@ (8009eac <RCCEx_PLL2_Config+0x15c>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d0f0      	beq.n	8009e82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	58024400 	.word	0x58024400
 8009eb0:	ffff0007 	.word	0xffff0007

08009eb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ec2:	4b53      	ldr	r3, [pc, #332]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec6:	f003 0303 	and.w	r3, r3, #3
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d101      	bne.n	8009ed2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e099      	b.n	800a006 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009ed2:	4b4f      	ldr	r3, [pc, #316]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a4e      	ldr	r2, [pc, #312]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009ed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ede:	f7f9 fbcb 	bl	8003678 <HAL_GetTick>
 8009ee2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ee4:	e008      	b.n	8009ef8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ee6:	f7f9 fbc7 	bl	8003678 <HAL_GetTick>
 8009eea:	4602      	mov	r2, r0
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d901      	bls.n	8009ef8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e086      	b.n	800a006 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ef8:	4b45      	ldr	r3, [pc, #276]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1f0      	bne.n	8009ee6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f04:	4b42      	ldr	r3, [pc, #264]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f08:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	051b      	lsls	r3, r3, #20
 8009f12:	493f      	ldr	r1, [pc, #252]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f14:	4313      	orrs	r3, r2
 8009f16:	628b      	str	r3, [r1, #40]	@ 0x28
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	025b      	lsls	r3, r3, #9
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	431a      	orrs	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	041b      	lsls	r3, r3, #16
 8009f36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	061b      	lsls	r3, r3, #24
 8009f44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f48:	4931      	ldr	r1, [pc, #196]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f4e:	4b30      	ldr	r3, [pc, #192]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	695b      	ldr	r3, [r3, #20]
 8009f5a:	492d      	ldr	r1, [pc, #180]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f60:	4b2b      	ldr	r3, [pc, #172]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f64:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	4928      	ldr	r1, [pc, #160]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f72:	4b27      	ldr	r3, [pc, #156]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f76:	4a26      	ldr	r2, [pc, #152]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f7e:	4b24      	ldr	r3, [pc, #144]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f82:	4b24      	ldr	r3, [pc, #144]	@ (800a014 <RCCEx_PLL3_Config+0x160>)
 8009f84:	4013      	ands	r3, r2
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	69d2      	ldr	r2, [r2, #28]
 8009f8a:	00d2      	lsls	r2, r2, #3
 8009f8c:	4920      	ldr	r1, [pc, #128]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f92:	4b1f      	ldr	r3, [pc, #124]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f96:	4a1e      	ldr	r2, [pc, #120]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009fa4:	4b1a      	ldr	r3, [pc, #104]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa8:	4a19      	ldr	r2, [pc, #100]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009faa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009fae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009fb0:	e00f      	b.n	8009fd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d106      	bne.n	8009fc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009fb8:	4b15      	ldr	r3, [pc, #84]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fbc:	4a14      	ldr	r2, [pc, #80]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009fbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009fc4:	e005      	b.n	8009fd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009fc6:	4b12      	ldr	r3, [pc, #72]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fca:	4a11      	ldr	r2, [pc, #68]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009fcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009fd2:	4b0f      	ldr	r3, [pc, #60]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a0e      	ldr	r2, [pc, #56]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fde:	f7f9 fb4b 	bl	8003678 <HAL_GetTick>
 8009fe2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fe4:	e008      	b.n	8009ff8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fe6:	f7f9 fb47 	bl	8003678 <HAL_GetTick>
 8009fea:	4602      	mov	r2, r0
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d901      	bls.n	8009ff8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e006      	b.n	800a006 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ff8:	4b05      	ldr	r3, [pc, #20]	@ (800a010 <RCCEx_PLL3_Config+0x15c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d0f0      	beq.n	8009fe6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a004:	7bfb      	ldrb	r3, [r7, #15]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	58024400 	.word	0x58024400
 800a014:	ffff0007 	.word	0xffff0007

0800a018 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	e10f      	b.n	800a24a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a87      	ldr	r2, [pc, #540]	@ (800a254 <HAL_SPI_Init+0x23c>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d00f      	beq.n	800a05a <HAL_SPI_Init+0x42>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a86      	ldr	r2, [pc, #536]	@ (800a258 <HAL_SPI_Init+0x240>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d00a      	beq.n	800a05a <HAL_SPI_Init+0x42>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a84      	ldr	r2, [pc, #528]	@ (800a25c <HAL_SPI_Init+0x244>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d005      	beq.n	800a05a <HAL_SPI_Init+0x42>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	2b0f      	cmp	r3, #15
 800a054:	d901      	bls.n	800a05a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e0f7      	b.n	800a24a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 f968 	bl	800b330 <SPI_GetPacketSize>
 800a060:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a7b      	ldr	r2, [pc, #492]	@ (800a254 <HAL_SPI_Init+0x23c>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d00c      	beq.n	800a086 <HAL_SPI_Init+0x6e>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a79      	ldr	r2, [pc, #484]	@ (800a258 <HAL_SPI_Init+0x240>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d007      	beq.n	800a086 <HAL_SPI_Init+0x6e>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a78      	ldr	r2, [pc, #480]	@ (800a25c <HAL_SPI_Init+0x244>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d002      	beq.n	800a086 <HAL_SPI_Init+0x6e>
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b08      	cmp	r3, #8
 800a084:	d811      	bhi.n	800a0aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a08a:	4a72      	ldr	r2, [pc, #456]	@ (800a254 <HAL_SPI_Init+0x23c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d009      	beq.n	800a0a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a70      	ldr	r2, [pc, #448]	@ (800a258 <HAL_SPI_Init+0x240>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d004      	beq.n	800a0a4 <HAL_SPI_Init+0x8c>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a6f      	ldr	r2, [pc, #444]	@ (800a25c <HAL_SPI_Init+0x244>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d104      	bne.n	800a0ae <HAL_SPI_Init+0x96>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b10      	cmp	r3, #16
 800a0a8:	d901      	bls.n	800a0ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e0cd      	b.n	800a24a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7f8 fa6a 	bl	800259c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f022 0201 	bic.w	r2, r2, #1
 800a0de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a0ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a0f4:	d119      	bne.n	800a12a <HAL_SPI_Init+0x112>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0fe:	d103      	bne.n	800a108 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a104:	2b00      	cmp	r3, #0
 800a106:	d008      	beq.n	800a11a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10c      	bne.n	800a12a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a118:	d107      	bne.n	800a12a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a128:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d00f      	beq.n	800a156 <HAL_SPI_Init+0x13e>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	2b06      	cmp	r3, #6
 800a13c:	d90b      	bls.n	800a156 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	430a      	orrs	r2, r1
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	e007      	b.n	800a166 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a164:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	69da      	ldr	r2, [r3, #28]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a16e:	431a      	orrs	r2, r3
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	431a      	orrs	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a178:	ea42 0103 	orr.w	r1, r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68da      	ldr	r2, [r3, #12]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	430a      	orrs	r2, r1
 800a186:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a190:	431a      	orrs	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a196:	431a      	orrs	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	431a      	orrs	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	431a      	orrs	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1c6:	ea42 0103 	orr.w	r1, r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	430a      	orrs	r2, r1
 800a1d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d113      	bne.n	800a206 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a204:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f022 0201 	bic.w	r2, r2, #1
 800a214:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00a      	beq.n	800a238 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	430a      	orrs	r2, r1
 800a236:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	40013000 	.word	0x40013000
 800a258:	40003800 	.word	0x40003800
 800a25c:	40003c00 	.word	0x40003c00

0800a260 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af02      	add	r7, sp, #8
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	603b      	str	r3, [r7, #0]
 800a26c:	4613      	mov	r3, r2
 800a26e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3320      	adds	r3, #32
 800a276:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a278:	f7f9 f9fe 	bl	8003678 <HAL_GetTick>
 800a27c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b01      	cmp	r3, #1
 800a288:	d001      	beq.n	800a28e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a28a:	2302      	movs	r3, #2
 800a28c:	e1d1      	b.n	800a632 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <HAL_SPI_Transmit+0x3a>
 800a294:	88fb      	ldrh	r3, [r7, #6]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e1c9      	b.n	800a632 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d101      	bne.n	800a2ac <HAL_SPI_Transmit+0x4c>
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e1c2      	b.n	800a632 <HAL_SPI_Transmit+0x3d2>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2203      	movs	r2, #3
 800a2b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	88fa      	ldrh	r2, [r7, #6]
 800a2ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	88fa      	ldrh	r2, [r7, #6]
 800a2d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a304:	d108      	bne.n	800a318 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a314:	601a      	str	r2, [r3, #0]
 800a316:	e009      	b.n	800a32c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a32a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	4b96      	ldr	r3, [pc, #600]	@ (800a58c <HAL_SPI_Transmit+0x32c>)
 800a334:	4013      	ands	r3, r2
 800a336:	88f9      	ldrh	r1, [r7, #6]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	6812      	ldr	r2, [r2, #0]
 800a33c:	430b      	orrs	r3, r1
 800a33e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f042 0201 	orr.w	r2, r2, #1
 800a34e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a358:	d107      	bne.n	800a36a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a368:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	2b0f      	cmp	r3, #15
 800a370:	d947      	bls.n	800a402 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a372:	e03f      	b.n	800a3f4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d114      	bne.n	800a3ac <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6812      	ldr	r2, [r2, #0]
 800a38c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a392:	1d1a      	adds	r2, r3, #4
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a3aa:	e023      	b.n	800a3f4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3ac:	f7f9 f964 	bl	8003678 <HAL_GetTick>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d803      	bhi.n	800a3c4 <HAL_SPI_Transmit+0x164>
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c2:	d102      	bne.n	800a3ca <HAL_SPI_Transmit+0x16a>
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d114      	bne.n	800a3f4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f000 fee2 	bl	800b194 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	e11e      	b.n	800a632 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1b9      	bne.n	800a374 <HAL_SPI_Transmit+0x114>
 800a400:	e0f1      	b.n	800a5e6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	2b07      	cmp	r3, #7
 800a408:	f240 80e6 	bls.w	800a5d8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a40c:	e05d      	b.n	800a4ca <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d132      	bne.n	800a482 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a422:	b29b      	uxth	r3, r3
 800a424:	2b01      	cmp	r3, #1
 800a426:	d918      	bls.n	800a45a <HAL_SPI_Transmit+0x1fa>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d014      	beq.n	800a45a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	6812      	ldr	r2, [r2, #0]
 800a43a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a440:	1d1a      	adds	r2, r3, #4
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	3b02      	subs	r3, #2
 800a450:	b29a      	uxth	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a458:	e037      	b.n	800a4ca <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a45e:	881a      	ldrh	r2, [r3, #0]
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a468:	1c9a      	adds	r2, r3, #2
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a474:	b29b      	uxth	r3, r3
 800a476:	3b01      	subs	r3, #1
 800a478:	b29a      	uxth	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a480:	e023      	b.n	800a4ca <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a482:	f7f9 f8f9 	bl	8003678 <HAL_GetTick>
 800a486:	4602      	mov	r2, r0
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d803      	bhi.n	800a49a <HAL_SPI_Transmit+0x23a>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a498:	d102      	bne.n	800a4a0 <HAL_SPI_Transmit+0x240>
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d114      	bne.n	800a4ca <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 fe77 	bl	800b194 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e0b3      	b.n	800a632 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d19b      	bne.n	800a40e <HAL_SPI_Transmit+0x1ae>
 800a4d6:	e086      	b.n	800a5e6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	f003 0302 	and.w	r3, r3, #2
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d154      	bne.n	800a590 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d918      	bls.n	800a524 <HAL_SPI_Transmit+0x2c4>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4f6:	2b40      	cmp	r3, #64	@ 0x40
 800a4f8:	d914      	bls.n	800a524 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6812      	ldr	r2, [r2, #0]
 800a504:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a50a:	1d1a      	adds	r2, r3, #4
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a516:	b29b      	uxth	r3, r3
 800a518:	3b04      	subs	r3, #4
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a522:	e059      	b.n	800a5d8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d917      	bls.n	800a560 <HAL_SPI_Transmit+0x300>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a534:	2b00      	cmp	r3, #0
 800a536:	d013      	beq.n	800a560 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a53c:	881a      	ldrh	r2, [r3, #0]
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a546:	1c9a      	adds	r2, r3, #2
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a552:	b29b      	uxth	r3, r3
 800a554:	3b02      	subs	r3, #2
 800a556:	b29a      	uxth	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a55e:	e03b      	b.n	800a5d8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3320      	adds	r3, #32
 800a56a:	7812      	ldrb	r2, [r2, #0]
 800a56c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a572:	1c5a      	adds	r2, r3, #1
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a57e:	b29b      	uxth	r3, r3
 800a580:	3b01      	subs	r3, #1
 800a582:	b29a      	uxth	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a58a:	e025      	b.n	800a5d8 <HAL_SPI_Transmit+0x378>
 800a58c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a590:	f7f9 f872 	bl	8003678 <HAL_GetTick>
 800a594:	4602      	mov	r2, r0
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d803      	bhi.n	800a5a8 <HAL_SPI_Transmit+0x348>
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a6:	d102      	bne.n	800a5ae <HAL_SPI_Transmit+0x34e>
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d114      	bne.n	800a5d8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f000 fdf0 	bl	800b194 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e02c      	b.n	800a632 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f47f af79 	bne.w	800a4d8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2108      	movs	r1, #8
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 fe6f 	bl	800b2d4 <SPI_WaitOnFlagUntilTimeout>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d007      	beq.n	800a60c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a602:	f043 0220 	orr.w	r2, r3, #32
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 fdc1 	bl	800b194 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2201      	movs	r2, #1
 800a616:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e000      	b.n	800a632 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a630:	2300      	movs	r3, #0
  }
}
 800a632:	4618      	mov	r0, r3
 800a634:	3718      	adds	r7, #24
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop

0800a63c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	4613      	mov	r3, r2
 800a64a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a650:	095b      	lsrs	r3, r3, #5
 800a652:	b29b      	uxth	r3, r3
 800a654:	3301      	adds	r3, #1
 800a656:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3330      	adds	r3, #48	@ 0x30
 800a65e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a660:	f7f9 f80a 	bl	8003678 <HAL_GetTick>
 800a664:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d001      	beq.n	800a676 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800a672:	2302      	movs	r3, #2
 800a674:	e250      	b.n	800ab18 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <HAL_SPI_Receive+0x46>
 800a67c:	88fb      	ldrh	r3, [r7, #6]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e248      	b.n	800ab18 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d101      	bne.n	800a694 <HAL_SPI_Receive+0x58>
 800a690:	2302      	movs	r3, #2
 800a692:	e241      	b.n	800ab18 <HAL_SPI_Receive+0x4dc>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2204      	movs	r2, #4
 800a6a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	88fa      	ldrh	r2, [r7, #6]
 800a6b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	88fa      	ldrh	r2, [r7, #6]
 800a6be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a6ec:	d108      	bne.n	800a700 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a6fc:	601a      	str	r2, [r3, #0]
 800a6fe:	e009      	b.n	800a714 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a712:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685a      	ldr	r2, [r3, #4]
 800a71a:	4b95      	ldr	r3, [pc, #596]	@ (800a970 <HAL_SPI_Receive+0x334>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	88f9      	ldrh	r1, [r7, #6]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	6812      	ldr	r2, [r2, #0]
 800a724:	430b      	orrs	r3, r1
 800a726:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f042 0201 	orr.w	r2, r2, #1
 800a736:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a740:	d107      	bne.n	800a752 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a750:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	2b0f      	cmp	r3, #15
 800a758:	d96c      	bls.n	800a834 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a75a:	e064      	b.n	800a826 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d114      	bne.n	800a79c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a77a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a77c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a782:	1d1a      	adds	r2, r3, #4
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a78e:	b29b      	uxth	r3, r3
 800a790:	3b01      	subs	r3, #1
 800a792:	b29a      	uxth	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a79a:	e044      	b.n	800a826 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	8bfa      	ldrh	r2, [r7, #30]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d919      	bls.n	800a7de <HAL_SPI_Receive+0x1a2>
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d014      	beq.n	800a7de <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a7be:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7c4:	1d1a      	adds	r2, r3, #4
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a7dc:	e023      	b.n	800a826 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7de:	f7f8 ff4b 	bl	8003678 <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d803      	bhi.n	800a7f6 <HAL_SPI_Receive+0x1ba>
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f4:	d102      	bne.n	800a7fc <HAL_SPI_Receive+0x1c0>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d114      	bne.n	800a826 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 fcc9 	bl	800b194 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a808:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2201      	movs	r2, #1
 800a816:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a822:	2303      	movs	r3, #3
 800a824:	e178      	b.n	800ab18 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d194      	bne.n	800a75c <HAL_SPI_Receive+0x120>
 800a832:	e15e      	b.n	800aaf2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	2b07      	cmp	r3, #7
 800a83a:	f240 8153 	bls.w	800aae4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a83e:	e08f      	b.n	800a960 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b01      	cmp	r3, #1
 800a854:	d114      	bne.n	800a880 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a85a:	69ba      	ldr	r2, [r7, #24]
 800a85c:	8812      	ldrh	r2, [r2, #0]
 800a85e:	b292      	uxth	r2, r2
 800a860:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a866:	1c9a      	adds	r2, r3, #2
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a872:	b29b      	uxth	r3, r3
 800a874:	3b01      	subs	r3, #1
 800a876:	b29a      	uxth	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a87e:	e06f      	b.n	800a960 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a886:	b29b      	uxth	r3, r3
 800a888:	8bfa      	ldrh	r2, [r7, #30]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d924      	bls.n	800a8d8 <HAL_SPI_Receive+0x29c>
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a894:	2b00      	cmp	r3, #0
 800a896:	d01f      	beq.n	800a8d8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a89c:	69ba      	ldr	r2, [r7, #24]
 800a89e:	8812      	ldrh	r2, [r2, #0]
 800a8a0:	b292      	uxth	r2, r2
 800a8a2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8a8:	1c9a      	adds	r2, r3, #2
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	8812      	ldrh	r2, [r2, #0]
 800a8b6:	b292      	uxth	r2, r2
 800a8b8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8be:	1c9a      	adds	r2, r3, #2
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	3b02      	subs	r3, #2
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a8d6:	e043      	b.n	800a960 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d119      	bne.n	800a918 <HAL_SPI_Receive+0x2dc>
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d014      	beq.n	800a918 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8f2:	69ba      	ldr	r2, [r7, #24]
 800a8f4:	8812      	ldrh	r2, [r2, #0]
 800a8f6:	b292      	uxth	r2, r2
 800a8f8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8fe:	1c9a      	adds	r2, r3, #2
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	3b01      	subs	r3, #1
 800a90e:	b29a      	uxth	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a916:	e023      	b.n	800a960 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a918:	f7f8 feae 	bl	8003678 <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	429a      	cmp	r2, r3
 800a926:	d803      	bhi.n	800a930 <HAL_SPI_Receive+0x2f4>
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92e:	d102      	bne.n	800a936 <HAL_SPI_Receive+0x2fa>
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d114      	bne.n	800a960 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 fc2c 	bl	800b194 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a942:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e0db      	b.n	800ab18 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a966:	b29b      	uxth	r3, r3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f47f af69 	bne.w	800a840 <HAL_SPI_Receive+0x204>
 800a96e:	e0c0      	b.n	800aaf2 <HAL_SPI_Receive+0x4b6>
 800a970:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b01      	cmp	r3, #1
 800a988:	d117      	bne.n	800a9ba <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a996:	7812      	ldrb	r2, [r2, #0]
 800a998:	b2d2      	uxtb	r2, r2
 800a99a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9a0:	1c5a      	adds	r2, r3, #1
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a9b8:	e094      	b.n	800aae4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	8bfa      	ldrh	r2, [r7, #30]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d946      	bls.n	800aa56 <HAL_SPI_Receive+0x41a>
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d041      	beq.n	800aa56 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9de:	7812      	ldrb	r2, [r2, #0]
 800a9e0:	b2d2      	uxtb	r2, r2
 800a9e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9fa:	7812      	ldrb	r2, [r2, #0]
 800a9fc:	b2d2      	uxtb	r2, r2
 800a9fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa16:	7812      	ldrb	r2, [r2, #0]
 800aa18:	b2d2      	uxtb	r2, r2
 800aa1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa20:	1c5a      	adds	r2, r3, #1
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa32:	7812      	ldrb	r2, [r2, #0]
 800aa34:	b2d2      	uxtb	r2, r2
 800aa36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa3c:	1c5a      	adds	r2, r3, #1
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	3b04      	subs	r3, #4
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aa54:	e046      	b.n	800aae4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	2b03      	cmp	r3, #3
 800aa60:	d81c      	bhi.n	800aa9c <HAL_SPI_Receive+0x460>
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d017      	beq.n	800aa9c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa78:	7812      	ldrb	r2, [r2, #0]
 800aa7a:	b2d2      	uxtb	r2, r2
 800aa7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	3b01      	subs	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aa9a:	e023      	b.n	800aae4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa9c:	f7f8 fdec 	bl	8003678 <HAL_GetTick>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d803      	bhi.n	800aab4 <HAL_SPI_Receive+0x478>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab2:	d102      	bne.n	800aaba <HAL_SPI_Receive+0x47e>
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d114      	bne.n	800aae4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f000 fb6a 	bl	800b194 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aac6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e019      	b.n	800ab18 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f47f af41 	bne.w	800a974 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f000 fb4e 	bl	800b194 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800ab16:	2300      	movs	r3, #0
  }
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3720      	adds	r7, #32
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08e      	sub	sp, #56	@ 0x38
 800ab24:	af02      	add	r7, sp, #8
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3320      	adds	r3, #32
 800ab34:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	3330      	adds	r3, #48	@ 0x30
 800ab3c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab42:	095b      	lsrs	r3, r3, #5
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	3301      	adds	r3, #1
 800ab48:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab4a:	f7f8 fd95 	bl	8003678 <HAL_GetTick>
 800ab4e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800ab50:	887b      	ldrh	r3, [r7, #2]
 800ab52:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800ab54:	887b      	ldrh	r3, [r7, #2]
 800ab56:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d001      	beq.n	800ab68 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800ab64:	2302      	movs	r3, #2
 800ab66:	e310      	b.n	800b18a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d005      	beq.n	800ab7a <HAL_SPI_TransmitReceive+0x5a>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <HAL_SPI_TransmitReceive+0x5a>
 800ab74:	887b      	ldrh	r3, [r7, #2]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e305      	b.n	800b18a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d101      	bne.n	800ab8c <HAL_SPI_TransmitReceive+0x6c>
 800ab88:	2302      	movs	r3, #2
 800ab8a:	e2fe      	b.n	800b18a <HAL_SPI_TransmitReceive+0x66a>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2205      	movs	r2, #5
 800ab98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	887a      	ldrh	r2, [r7, #2]
 800abae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	887a      	ldrh	r2, [r7, #2]
 800abb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	887a      	ldrh	r2, [r7, #2]
 800abc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	887a      	ldrh	r2, [r7, #2]
 800abcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68da      	ldr	r2, [r3, #12]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800abea:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a70      	ldr	r2, [pc, #448]	@ (800adb4 <HAL_SPI_TransmitReceive+0x294>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d009      	beq.n	800ac0a <HAL_SPI_TransmitReceive+0xea>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a6f      	ldr	r2, [pc, #444]	@ (800adb8 <HAL_SPI_TransmitReceive+0x298>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d004      	beq.n	800ac0a <HAL_SPI_TransmitReceive+0xea>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a6d      	ldr	r2, [pc, #436]	@ (800adbc <HAL_SPI_TransmitReceive+0x29c>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d102      	bne.n	800ac10 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800ac0a:	2310      	movs	r3, #16
 800ac0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac0e:	e001      	b.n	800ac14 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800ac10:	2308      	movs	r3, #8
 800ac12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	4b69      	ldr	r3, [pc, #420]	@ (800adc0 <HAL_SPI_TransmitReceive+0x2a0>)
 800ac1c:	4013      	ands	r3, r2
 800ac1e:	8879      	ldrh	r1, [r7, #2]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	6812      	ldr	r2, [r2, #0]
 800ac24:	430b      	orrs	r3, r1
 800ac26:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f042 0201 	orr.w	r2, r2, #1
 800ac36:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac40:	d107      	bne.n	800ac52 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	2b0f      	cmp	r3, #15
 800ac58:	f240 80a2 	bls.w	800ada0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800ac5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5e:	089b      	lsrs	r3, r3, #2
 800ac60:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ac62:	e094      	b.n	800ad8e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	f003 0302 	and.w	r3, r3, #2
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d120      	bne.n	800acb4 <HAL_SPI_TransmitReceive+0x194>
 800ac72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d01d      	beq.n	800acb4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ac78:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ac7a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800ac7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d217      	bcs.n	800acb4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6812      	ldr	r2, [r2, #0]
 800ac8e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac94:	1d1a      	adds	r2, r3, #4
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	3b01      	subs	r3, #1
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800acb2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800acbc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d065      	beq.n	800ad8e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	f003 0301 	and.w	r3, r3, #1
 800accc:	2b01      	cmp	r3, #1
 800acce:	d118      	bne.n	800ad02 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acd8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800acda:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ace0:	1d1a      	adds	r2, r3, #4
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acec:	b29b      	uxth	r3, r3
 800acee:	3b01      	subs	r3, #1
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acfe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ad00:	e045      	b.n	800ad8e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ad02:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ad04:	8bfb      	ldrh	r3, [r7, #30]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d21d      	bcs.n	800ad46 <HAL_SPI_TransmitReceive+0x226>
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d018      	beq.n	800ad46 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ad1e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad24:	1d1a      	adds	r2, r3, #4
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	3b01      	subs	r3, #1
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad42:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ad44:	e023      	b.n	800ad8e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad46:	f7f8 fc97 	bl	8003678 <HAL_GetTick>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d803      	bhi.n	800ad5e <HAL_SPI_TransmitReceive+0x23e>
 800ad56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5c:	d102      	bne.n	800ad64 <HAL_SPI_TransmitReceive+0x244>
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d114      	bne.n	800ad8e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 fa15 	bl	800b194 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e1fd      	b.n	800b18a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ad8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f47f af67 	bne.w	800ac64 <HAL_SPI_TransmitReceive+0x144>
 800ad96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f47f af63 	bne.w	800ac64 <HAL_SPI_TransmitReceive+0x144>
 800ad9e:	e1ce      	b.n	800b13e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	2b07      	cmp	r3, #7
 800ada6:	f240 81c2 	bls.w	800b12e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800adaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adac:	085b      	lsrs	r3, r3, #1
 800adae:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800adb0:	e0c9      	b.n	800af46 <HAL_SPI_TransmitReceive+0x426>
 800adb2:	bf00      	nop
 800adb4:	40013000 	.word	0x40013000
 800adb8:	40003800 	.word	0x40003800
 800adbc:	40003c00 	.word	0x40003c00
 800adc0:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b02      	cmp	r3, #2
 800add0:	d11f      	bne.n	800ae12 <HAL_SPI_TransmitReceive+0x2f2>
 800add2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800add4:	2b00      	cmp	r3, #0
 800add6:	d01c      	beq.n	800ae12 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800add8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800adda:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800addc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adde:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d216      	bcs.n	800ae12 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ade8:	881a      	ldrh	r2, [r3, #0]
 800adea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adec:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adf2:	1c9a      	adds	r2, r3, #2
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	3b01      	subs	r3, #1
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae10:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	695b      	ldr	r3, [r3, #20]
 800ae18:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ae1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f000 8092 	beq.w	800af46 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	695b      	ldr	r3, [r3, #20]
 800ae28:	f003 0301 	and.w	r3, r3, #1
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d118      	bne.n	800ae62 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae34:	6a3a      	ldr	r2, [r7, #32]
 800ae36:	8812      	ldrh	r2, [r2, #0]
 800ae38:	b292      	uxth	r2, r2
 800ae3a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae40:	1c9a      	adds	r2, r3, #2
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae5e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ae60:	e071      	b.n	800af46 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ae62:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ae64:	8bfb      	ldrh	r3, [r7, #30]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d228      	bcs.n	800aebc <HAL_SPI_TransmitReceive+0x39c>
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d023      	beq.n	800aebc <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae78:	6a3a      	ldr	r2, [r7, #32]
 800ae7a:	8812      	ldrh	r2, [r2, #0]
 800ae7c:	b292      	uxth	r2, r2
 800ae7e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae84:	1c9a      	adds	r2, r3, #2
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae8e:	6a3a      	ldr	r2, [r7, #32]
 800ae90:	8812      	ldrh	r2, [r2, #0]
 800ae92:	b292      	uxth	r2, r2
 800ae94:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae9a:	1c9a      	adds	r2, r3, #2
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	3b02      	subs	r3, #2
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aeb8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aeba:	e044      	b.n	800af46 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800aebc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d11d      	bne.n	800aefe <HAL_SPI_TransmitReceive+0x3de>
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d018      	beq.n	800aefe <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aed0:	6a3a      	ldr	r2, [r7, #32]
 800aed2:	8812      	ldrh	r2, [r2, #0]
 800aed4:	b292      	uxth	r2, r2
 800aed6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aedc:	1c9a      	adds	r2, r3, #2
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	3b01      	subs	r3, #1
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aefa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aefc:	e023      	b.n	800af46 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aefe:	f7f8 fbbb 	bl	8003678 <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d803      	bhi.n	800af16 <HAL_SPI_TransmitReceive+0x3f6>
 800af0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af14:	d102      	bne.n	800af1c <HAL_SPI_TransmitReceive+0x3fc>
 800af16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d114      	bne.n	800af46 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f000 f939 	bl	800b194 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2201      	movs	r2, #1
 800af36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800af42:	2303      	movs	r3, #3
 800af44:	e121      	b.n	800b18a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800af46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f47f af3b 	bne.w	800adc4 <HAL_SPI_TransmitReceive+0x2a4>
 800af4e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800af50:	2b00      	cmp	r3, #0
 800af52:	f47f af37 	bne.w	800adc4 <HAL_SPI_TransmitReceive+0x2a4>
 800af56:	e0f2      	b.n	800b13e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b02      	cmp	r3, #2
 800af64:	d121      	bne.n	800afaa <HAL_SPI_TransmitReceive+0x48a>
 800af66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d01e      	beq.n	800afaa <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800af6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800af6e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800af70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af72:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800af74:	429a      	cmp	r2, r3
 800af76:	d218      	bcs.n	800afaa <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3320      	adds	r3, #32
 800af82:	7812      	ldrb	r2, [r2, #0]
 800af84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af96:	b29b      	uxth	r3, r3
 800af98:	3b01      	subs	r3, #1
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800afa8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800afb2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f000 80ba 	beq.w	800b12e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	695b      	ldr	r3, [r3, #20]
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d11b      	bne.n	800b000 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afd4:	7812      	ldrb	r2, [r2, #0]
 800afd6:	b2d2      	uxtb	r2, r2
 800afd8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800afea:	b29b      	uxth	r3, r3
 800afec:	3b01      	subs	r3, #1
 800afee:	b29a      	uxth	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800affc:	853b      	strh	r3, [r7, #40]	@ 0x28
 800affe:	e096      	b.n	800b12e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b000:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800b002:	8bfb      	ldrh	r3, [r7, #30]
 800b004:	429a      	cmp	r2, r3
 800b006:	d24a      	bcs.n	800b09e <HAL_SPI_TransmitReceive+0x57e>
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d045      	beq.n	800b09e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b01e:	7812      	ldrb	r2, [r2, #0]
 800b020:	b2d2      	uxtb	r2, r2
 800b022:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b028:	1c5a      	adds	r2, r3, #1
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b03a:	7812      	ldrb	r2, [r2, #0]
 800b03c:	b2d2      	uxtb	r2, r2
 800b03e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b044:	1c5a      	adds	r2, r3, #1
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b056:	7812      	ldrb	r2, [r2, #0]
 800b058:	b2d2      	uxtb	r2, r2
 800b05a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b060:	1c5a      	adds	r2, r3, #1
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b072:	7812      	ldrb	r2, [r2, #0]
 800b074:	b2d2      	uxtb	r2, r2
 800b076:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b088:	b29b      	uxth	r3, r3
 800b08a:	3b04      	subs	r3, #4
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b09a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b09c:	e047      	b.n	800b12e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b09e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d820      	bhi.n	800b0e6 <HAL_SPI_TransmitReceive+0x5c6>
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d01b      	beq.n	800b0e6 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0ba:	7812      	ldrb	r2, [r2, #0]
 800b0bc:	b2d2      	uxtb	r2, r2
 800b0be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0c4:	1c5a      	adds	r2, r3, #1
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b0e4:	e023      	b.n	800b12e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0e6:	f7f8 fac7 	bl	8003678 <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d803      	bhi.n	800b0fe <HAL_SPI_TransmitReceive+0x5de>
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fc:	d102      	bne.n	800b104 <HAL_SPI_TransmitReceive+0x5e4>
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b100:	2b00      	cmp	r3, #0
 800b102:	d114      	bne.n	800b12e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f000 f845 	bl	800b194 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b110:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e02d      	b.n	800b18a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b12e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b130:	2b00      	cmp	r3, #0
 800b132:	f47f af11 	bne.w	800af58 <HAL_SPI_TransmitReceive+0x438>
 800b136:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f47f af0d 	bne.w	800af58 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b144:	2200      	movs	r2, #0
 800b146:	2108      	movs	r1, #8
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f000 f8c3 	bl	800b2d4 <SPI_WaitOnFlagUntilTimeout>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d007      	beq.n	800b164 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b15a:	f043 0220 	orr.w	r2, r3, #32
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 f815 	bl	800b194 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2201      	movs	r2, #1
 800b16e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	e000      	b.n	800b18a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800b188:	2300      	movs	r3, #0
  }
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3730      	adds	r7, #48	@ 0x30
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop

0800b194 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	699a      	ldr	r2, [r3, #24]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f042 0208 	orr.w	r2, r2, #8
 800b1b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	699a      	ldr	r2, [r3, #24]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f042 0210 	orr.w	r2, r2, #16
 800b1c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f022 0201 	bic.w	r2, r2, #1
 800b1d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6919      	ldr	r1, [r3, #16]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	4b3c      	ldr	r3, [pc, #240]	@ (800b2d0 <SPI_CloseTransfer+0x13c>)
 800b1e0:	400b      	ands	r3, r1
 800b1e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	689a      	ldr	r2, [r3, #8]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b1f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b04      	cmp	r3, #4
 800b1fe:	d014      	beq.n	800b22a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f003 0320 	and.w	r3, r3, #32
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00f      	beq.n	800b22a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b210:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	699a      	ldr	r2, [r3, #24]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f042 0220 	orr.w	r2, r2, #32
 800b228:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b230:	b2db      	uxtb	r3, r3
 800b232:	2b03      	cmp	r3, #3
 800b234:	d014      	beq.n	800b260 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00f      	beq.n	800b260 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b246:	f043 0204 	orr.w	r2, r3, #4
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b25e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00f      	beq.n	800b28a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b270:	f043 0201 	orr.w	r2, r3, #1
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	699a      	ldr	r2, [r3, #24]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b288:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00f      	beq.n	800b2b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b29a:	f043 0208 	orr.w	r2, r3, #8
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	699a      	ldr	r2, [r3, #24]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b2b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b2c4:	bf00      	nop
 800b2c6:	3714      	adds	r7, #20
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	fffffc90 	.word	0xfffffc90

0800b2d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	603b      	str	r3, [r7, #0]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b2e4:	e010      	b.n	800b308 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b2e6:	f7f8 f9c7 	bl	8003678 <HAL_GetTick>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d803      	bhi.n	800b2fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fc:	d102      	bne.n	800b304 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	e00f      	b.n	800b328 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	695a      	ldr	r2, [r3, #20]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	4013      	ands	r3, r2
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	429a      	cmp	r2, r3
 800b316:	bf0c      	ite	eq
 800b318:	2301      	moveq	r3, #1
 800b31a:	2300      	movne	r3, #0
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	461a      	mov	r2, r3
 800b320:	79fb      	ldrb	r3, [r7, #7]
 800b322:	429a      	cmp	r2, r3
 800b324:	d0df      	beq.n	800b2e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b33c:	095b      	lsrs	r3, r3, #5
 800b33e:	3301      	adds	r3, #1
 800b340:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	3301      	adds	r3, #1
 800b348:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	3307      	adds	r3, #7
 800b34e:	08db      	lsrs	r3, r3, #3
 800b350:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	fb02 f303 	mul.w	r3, r2, r3
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b082      	sub	sp, #8
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	e049      	b.n	800b40c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d106      	bne.n	800b392 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f7f7 fcd3 	bl	8002d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2202      	movs	r2, #2
 800b396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	f000 fc57 	bl	800bc58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2201      	movs	r2, #1
 800b406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b01      	cmp	r3, #1
 800b426:	d001      	beq.n	800b42c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	e054      	b.n	800b4d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2202      	movs	r2, #2
 800b430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68da      	ldr	r2, [r3, #12]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f042 0201 	orr.w	r2, r2, #1
 800b442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a26      	ldr	r2, [pc, #152]	@ (800b4e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d022      	beq.n	800b494 <HAL_TIM_Base_Start_IT+0x80>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b456:	d01d      	beq.n	800b494 <HAL_TIM_Base_Start_IT+0x80>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a22      	ldr	r2, [pc, #136]	@ (800b4e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d018      	beq.n	800b494 <HAL_TIM_Base_Start_IT+0x80>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a21      	ldr	r2, [pc, #132]	@ (800b4ec <HAL_TIM_Base_Start_IT+0xd8>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d013      	beq.n	800b494 <HAL_TIM_Base_Start_IT+0x80>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a1f      	ldr	r2, [pc, #124]	@ (800b4f0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d00e      	beq.n	800b494 <HAL_TIM_Base_Start_IT+0x80>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a1e      	ldr	r2, [pc, #120]	@ (800b4f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d009      	beq.n	800b494 <HAL_TIM_Base_Start_IT+0x80>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a1c      	ldr	r2, [pc, #112]	@ (800b4f8 <HAL_TIM_Base_Start_IT+0xe4>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d004      	beq.n	800b494 <HAL_TIM_Base_Start_IT+0x80>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a1b      	ldr	r2, [pc, #108]	@ (800b4fc <HAL_TIM_Base_Start_IT+0xe8>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d115      	bne.n	800b4c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	4b19      	ldr	r3, [pc, #100]	@ (800b500 <HAL_TIM_Base_Start_IT+0xec>)
 800b49c:	4013      	ands	r3, r2
 800b49e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b06      	cmp	r3, #6
 800b4a4:	d015      	beq.n	800b4d2 <HAL_TIM_Base_Start_IT+0xbe>
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4ac:	d011      	beq.n	800b4d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f042 0201 	orr.w	r2, r2, #1
 800b4bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4be:	e008      	b.n	800b4d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f042 0201 	orr.w	r2, r2, #1
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	e000      	b.n	800b4d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	40010000 	.word	0x40010000
 800b4e8:	40000400 	.word	0x40000400
 800b4ec:	40000800 	.word	0x40000800
 800b4f0:	40000c00 	.word	0x40000c00
 800b4f4:	40010400 	.word	0x40010400
 800b4f8:	40001800 	.word	0x40001800
 800b4fc:	40014000 	.word	0x40014000
 800b500:	00010007 	.word	0x00010007

0800b504 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e049      	b.n	800b5aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d106      	bne.n	800b530 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7f7 fbb6 	bl	8002c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2202      	movs	r2, #2
 800b534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	3304      	adds	r3, #4
 800b540:	4619      	mov	r1, r3
 800b542:	4610      	mov	r0, r2
 800b544:	f000 fb88 	bl	800bc58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
	...

0800b5b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d109      	bne.n	800b5d8 <HAL_TIM_PWM_Start+0x24>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	bf14      	ite	ne
 800b5d0:	2301      	movne	r3, #1
 800b5d2:	2300      	moveq	r3, #0
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	e03c      	b.n	800b652 <HAL_TIM_PWM_Start+0x9e>
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	2b04      	cmp	r3, #4
 800b5dc:	d109      	bne.n	800b5f2 <HAL_TIM_PWM_Start+0x3e>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	bf14      	ite	ne
 800b5ea:	2301      	movne	r3, #1
 800b5ec:	2300      	moveq	r3, #0
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	e02f      	b.n	800b652 <HAL_TIM_PWM_Start+0x9e>
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	2b08      	cmp	r3, #8
 800b5f6:	d109      	bne.n	800b60c <HAL_TIM_PWM_Start+0x58>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	2b01      	cmp	r3, #1
 800b602:	bf14      	ite	ne
 800b604:	2301      	movne	r3, #1
 800b606:	2300      	moveq	r3, #0
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	e022      	b.n	800b652 <HAL_TIM_PWM_Start+0x9e>
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2b0c      	cmp	r3, #12
 800b610:	d109      	bne.n	800b626 <HAL_TIM_PWM_Start+0x72>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	bf14      	ite	ne
 800b61e:	2301      	movne	r3, #1
 800b620:	2300      	moveq	r3, #0
 800b622:	b2db      	uxtb	r3, r3
 800b624:	e015      	b.n	800b652 <HAL_TIM_PWM_Start+0x9e>
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	2b10      	cmp	r3, #16
 800b62a:	d109      	bne.n	800b640 <HAL_TIM_PWM_Start+0x8c>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b632:	b2db      	uxtb	r3, r3
 800b634:	2b01      	cmp	r3, #1
 800b636:	bf14      	ite	ne
 800b638:	2301      	movne	r3, #1
 800b63a:	2300      	moveq	r3, #0
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	e008      	b.n	800b652 <HAL_TIM_PWM_Start+0x9e>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b646:	b2db      	uxtb	r3, r3
 800b648:	2b01      	cmp	r3, #1
 800b64a:	bf14      	ite	ne
 800b64c:	2301      	movne	r3, #1
 800b64e:	2300      	moveq	r3, #0
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e0a1      	b.n	800b79e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d104      	bne.n	800b66a <HAL_TIM_PWM_Start+0xb6>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2202      	movs	r2, #2
 800b664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b668:	e023      	b.n	800b6b2 <HAL_TIM_PWM_Start+0xfe>
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	d104      	bne.n	800b67a <HAL_TIM_PWM_Start+0xc6>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2202      	movs	r2, #2
 800b674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b678:	e01b      	b.n	800b6b2 <HAL_TIM_PWM_Start+0xfe>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	2b08      	cmp	r3, #8
 800b67e:	d104      	bne.n	800b68a <HAL_TIM_PWM_Start+0xd6>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2202      	movs	r2, #2
 800b684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b688:	e013      	b.n	800b6b2 <HAL_TIM_PWM_Start+0xfe>
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b0c      	cmp	r3, #12
 800b68e:	d104      	bne.n	800b69a <HAL_TIM_PWM_Start+0xe6>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2202      	movs	r2, #2
 800b694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b698:	e00b      	b.n	800b6b2 <HAL_TIM_PWM_Start+0xfe>
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	2b10      	cmp	r3, #16
 800b69e:	d104      	bne.n	800b6aa <HAL_TIM_PWM_Start+0xf6>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6a8:	e003      	b.n	800b6b2 <HAL_TIM_PWM_Start+0xfe>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	6839      	ldr	r1, [r7, #0]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f000 fe48 	bl	800c350 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a38      	ldr	r2, [pc, #224]	@ (800b7a8 <HAL_TIM_PWM_Start+0x1f4>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d013      	beq.n	800b6f2 <HAL_TIM_PWM_Start+0x13e>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a37      	ldr	r2, [pc, #220]	@ (800b7ac <HAL_TIM_PWM_Start+0x1f8>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d00e      	beq.n	800b6f2 <HAL_TIM_PWM_Start+0x13e>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a35      	ldr	r2, [pc, #212]	@ (800b7b0 <HAL_TIM_PWM_Start+0x1fc>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d009      	beq.n	800b6f2 <HAL_TIM_PWM_Start+0x13e>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a34      	ldr	r2, [pc, #208]	@ (800b7b4 <HAL_TIM_PWM_Start+0x200>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d004      	beq.n	800b6f2 <HAL_TIM_PWM_Start+0x13e>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a32      	ldr	r2, [pc, #200]	@ (800b7b8 <HAL_TIM_PWM_Start+0x204>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d101      	bne.n	800b6f6 <HAL_TIM_PWM_Start+0x142>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e000      	b.n	800b6f8 <HAL_TIM_PWM_Start+0x144>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d007      	beq.n	800b70c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b70a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a25      	ldr	r2, [pc, #148]	@ (800b7a8 <HAL_TIM_PWM_Start+0x1f4>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d022      	beq.n	800b75c <HAL_TIM_PWM_Start+0x1a8>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b71e:	d01d      	beq.n	800b75c <HAL_TIM_PWM_Start+0x1a8>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a25      	ldr	r2, [pc, #148]	@ (800b7bc <HAL_TIM_PWM_Start+0x208>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d018      	beq.n	800b75c <HAL_TIM_PWM_Start+0x1a8>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a24      	ldr	r2, [pc, #144]	@ (800b7c0 <HAL_TIM_PWM_Start+0x20c>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d013      	beq.n	800b75c <HAL_TIM_PWM_Start+0x1a8>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a22      	ldr	r2, [pc, #136]	@ (800b7c4 <HAL_TIM_PWM_Start+0x210>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d00e      	beq.n	800b75c <HAL_TIM_PWM_Start+0x1a8>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a1a      	ldr	r2, [pc, #104]	@ (800b7ac <HAL_TIM_PWM_Start+0x1f8>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d009      	beq.n	800b75c <HAL_TIM_PWM_Start+0x1a8>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a1e      	ldr	r2, [pc, #120]	@ (800b7c8 <HAL_TIM_PWM_Start+0x214>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d004      	beq.n	800b75c <HAL_TIM_PWM_Start+0x1a8>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a16      	ldr	r2, [pc, #88]	@ (800b7b0 <HAL_TIM_PWM_Start+0x1fc>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d115      	bne.n	800b788 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	689a      	ldr	r2, [r3, #8]
 800b762:	4b1a      	ldr	r3, [pc, #104]	@ (800b7cc <HAL_TIM_PWM_Start+0x218>)
 800b764:	4013      	ands	r3, r2
 800b766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2b06      	cmp	r3, #6
 800b76c:	d015      	beq.n	800b79a <HAL_TIM_PWM_Start+0x1e6>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b774:	d011      	beq.n	800b79a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f042 0201 	orr.w	r2, r2, #1
 800b784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b786:	e008      	b.n	800b79a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f042 0201 	orr.w	r2, r2, #1
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	e000      	b.n	800b79c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b79a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	40010000 	.word	0x40010000
 800b7ac:	40010400 	.word	0x40010400
 800b7b0:	40014000 	.word	0x40014000
 800b7b4:	40014400 	.word	0x40014400
 800b7b8:	40014800 	.word	0x40014800
 800b7bc:	40000400 	.word	0x40000400
 800b7c0:	40000800 	.word	0x40000800
 800b7c4:	40000c00 	.word	0x40000c00
 800b7c8:	40001800 	.word	0x40001800
 800b7cc:	00010007 	.word	0x00010007

0800b7d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	f003 0302 	and.w	r3, r3, #2
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d020      	beq.n	800b834 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f003 0302 	and.w	r3, r3, #2
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d01b      	beq.n	800b834 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f06f 0202 	mvn.w	r2, #2
 800b804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	f003 0303 	and.w	r3, r3, #3
 800b816:	2b00      	cmp	r3, #0
 800b818:	d003      	beq.n	800b822 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f9fe 	bl	800bc1c <HAL_TIM_IC_CaptureCallback>
 800b820:	e005      	b.n	800b82e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 f9f0 	bl	800bc08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 fa01 	bl	800bc30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	f003 0304 	and.w	r3, r3, #4
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d020      	beq.n	800b880 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f003 0304 	and.w	r3, r3, #4
 800b844:	2b00      	cmp	r3, #0
 800b846:	d01b      	beq.n	800b880 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f06f 0204 	mvn.w	r2, #4
 800b850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2202      	movs	r2, #2
 800b856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b862:	2b00      	cmp	r3, #0
 800b864:	d003      	beq.n	800b86e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f9d8 	bl	800bc1c <HAL_TIM_IC_CaptureCallback>
 800b86c:	e005      	b.n	800b87a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 f9ca 	bl	800bc08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f9db 	bl	800bc30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	f003 0308 	and.w	r3, r3, #8
 800b886:	2b00      	cmp	r3, #0
 800b888:	d020      	beq.n	800b8cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f003 0308 	and.w	r3, r3, #8
 800b890:	2b00      	cmp	r3, #0
 800b892:	d01b      	beq.n	800b8cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f06f 0208 	mvn.w	r2, #8
 800b89c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2204      	movs	r2, #4
 800b8a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	69db      	ldr	r3, [r3, #28]
 800b8aa:	f003 0303 	and.w	r3, r3, #3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d003      	beq.n	800b8ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f9b2 	bl	800bc1c <HAL_TIM_IC_CaptureCallback>
 800b8b8:	e005      	b.n	800b8c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f9a4 	bl	800bc08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f9b5 	bl	800bc30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	f003 0310 	and.w	r3, r3, #16
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d020      	beq.n	800b918 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f003 0310 	and.w	r3, r3, #16
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d01b      	beq.n	800b918 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f06f 0210 	mvn.w	r2, #16
 800b8e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2208      	movs	r2, #8
 800b8ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	69db      	ldr	r3, [r3, #28]
 800b8f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d003      	beq.n	800b906 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f98c 	bl	800bc1c <HAL_TIM_IC_CaptureCallback>
 800b904:	e005      	b.n	800b912 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f97e 	bl	800bc08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f98f 	bl	800bc30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	f003 0301 	and.w	r3, r3, #1
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00c      	beq.n	800b93c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f003 0301 	and.w	r3, r3, #1
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d007      	beq.n	800b93c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f06f 0201 	mvn.w	r2, #1
 800b934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7f6 fd34 	bl	80023a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b942:	2b00      	cmp	r3, #0
 800b944:	d104      	bne.n	800b950 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00c      	beq.n	800b96a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b956:	2b00      	cmp	r3, #0
 800b958:	d007      	beq.n	800b96a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fdb1 	bl	800c4cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00c      	beq.n	800b98e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d007      	beq.n	800b98e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fda9 	bl	800c4e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b994:	2b00      	cmp	r3, #0
 800b996:	d00c      	beq.n	800b9b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d007      	beq.n	800b9b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b9aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 f949 	bl	800bc44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	f003 0320 	and.w	r3, r3, #32
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00c      	beq.n	800b9d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f003 0320 	and.w	r3, r3, #32
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d007      	beq.n	800b9d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f06f 0220 	mvn.w	r2, #32
 800b9ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fd71 	bl	800c4b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b9d6:	bf00      	nop
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
	...

0800b9e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d101      	bne.n	800b9fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b9fa:	2302      	movs	r3, #2
 800b9fc:	e0ff      	b.n	800bbfe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2201      	movs	r2, #1
 800ba02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b14      	cmp	r3, #20
 800ba0a:	f200 80f0 	bhi.w	800bbee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ba0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba14:	0800ba69 	.word	0x0800ba69
 800ba18:	0800bbef 	.word	0x0800bbef
 800ba1c:	0800bbef 	.word	0x0800bbef
 800ba20:	0800bbef 	.word	0x0800bbef
 800ba24:	0800baa9 	.word	0x0800baa9
 800ba28:	0800bbef 	.word	0x0800bbef
 800ba2c:	0800bbef 	.word	0x0800bbef
 800ba30:	0800bbef 	.word	0x0800bbef
 800ba34:	0800baeb 	.word	0x0800baeb
 800ba38:	0800bbef 	.word	0x0800bbef
 800ba3c:	0800bbef 	.word	0x0800bbef
 800ba40:	0800bbef 	.word	0x0800bbef
 800ba44:	0800bb2b 	.word	0x0800bb2b
 800ba48:	0800bbef 	.word	0x0800bbef
 800ba4c:	0800bbef 	.word	0x0800bbef
 800ba50:	0800bbef 	.word	0x0800bbef
 800ba54:	0800bb6d 	.word	0x0800bb6d
 800ba58:	0800bbef 	.word	0x0800bbef
 800ba5c:	0800bbef 	.word	0x0800bbef
 800ba60:	0800bbef 	.word	0x0800bbef
 800ba64:	0800bbad 	.word	0x0800bbad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68b9      	ldr	r1, [r7, #8]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 f998 	bl	800bda4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	699a      	ldr	r2, [r3, #24]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f042 0208 	orr.w	r2, r2, #8
 800ba82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	699a      	ldr	r2, [r3, #24]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 0204 	bic.w	r2, r2, #4
 800ba92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6999      	ldr	r1, [r3, #24]
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	691a      	ldr	r2, [r3, #16]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	430a      	orrs	r2, r1
 800baa4:	619a      	str	r2, [r3, #24]
      break;
 800baa6:	e0a5      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68b9      	ldr	r1, [r7, #8]
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 fa08 	bl	800bec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	699a      	ldr	r2, [r3, #24]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	699a      	ldr	r2, [r3, #24]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6999      	ldr	r1, [r3, #24]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	021a      	lsls	r2, r3, #8
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	619a      	str	r2, [r3, #24]
      break;
 800bae8:	e084      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68b9      	ldr	r1, [r7, #8]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f000 fa71 	bl	800bfd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	69da      	ldr	r2, [r3, #28]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f042 0208 	orr.w	r2, r2, #8
 800bb04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	69da      	ldr	r2, [r3, #28]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f022 0204 	bic.w	r2, r2, #4
 800bb14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	69d9      	ldr	r1, [r3, #28]
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	691a      	ldr	r2, [r3, #16]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	430a      	orrs	r2, r1
 800bb26:	61da      	str	r2, [r3, #28]
      break;
 800bb28:	e064      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68b9      	ldr	r1, [r7, #8]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 fad9 	bl	800c0e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	69da      	ldr	r2, [r3, #28]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	69da      	ldr	r2, [r3, #28]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	69d9      	ldr	r1, [r3, #28]
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	021a      	lsls	r2, r3, #8
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	430a      	orrs	r2, r1
 800bb68:	61da      	str	r2, [r3, #28]
      break;
 800bb6a:	e043      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68b9      	ldr	r1, [r7, #8]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 fb22 	bl	800c1bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f042 0208 	orr.w	r2, r2, #8
 800bb86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f022 0204 	bic.w	r2, r2, #4
 800bb96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	691a      	ldr	r2, [r3, #16]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bbaa:	e023      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68b9      	ldr	r1, [r7, #8]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 fb66 	bl	800c284 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbc6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bbd6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	021a      	lsls	r2, r3, #8
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bbec:	e002      	b.n	800bbf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	75fb      	strb	r3, [r7, #23]
      break;
 800bbf2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bbfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3718      	adds	r7, #24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop

0800bc08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a46      	ldr	r2, [pc, #280]	@ (800bd84 <TIM_Base_SetConfig+0x12c>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d013      	beq.n	800bc98 <TIM_Base_SetConfig+0x40>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc76:	d00f      	beq.n	800bc98 <TIM_Base_SetConfig+0x40>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a43      	ldr	r2, [pc, #268]	@ (800bd88 <TIM_Base_SetConfig+0x130>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d00b      	beq.n	800bc98 <TIM_Base_SetConfig+0x40>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a42      	ldr	r2, [pc, #264]	@ (800bd8c <TIM_Base_SetConfig+0x134>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d007      	beq.n	800bc98 <TIM_Base_SetConfig+0x40>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4a41      	ldr	r2, [pc, #260]	@ (800bd90 <TIM_Base_SetConfig+0x138>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d003      	beq.n	800bc98 <TIM_Base_SetConfig+0x40>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a40      	ldr	r2, [pc, #256]	@ (800bd94 <TIM_Base_SetConfig+0x13c>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d108      	bne.n	800bcaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a35      	ldr	r2, [pc, #212]	@ (800bd84 <TIM_Base_SetConfig+0x12c>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d01f      	beq.n	800bcf2 <TIM_Base_SetConfig+0x9a>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcb8:	d01b      	beq.n	800bcf2 <TIM_Base_SetConfig+0x9a>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4a32      	ldr	r2, [pc, #200]	@ (800bd88 <TIM_Base_SetConfig+0x130>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d017      	beq.n	800bcf2 <TIM_Base_SetConfig+0x9a>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a31      	ldr	r2, [pc, #196]	@ (800bd8c <TIM_Base_SetConfig+0x134>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d013      	beq.n	800bcf2 <TIM_Base_SetConfig+0x9a>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a30      	ldr	r2, [pc, #192]	@ (800bd90 <TIM_Base_SetConfig+0x138>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d00f      	beq.n	800bcf2 <TIM_Base_SetConfig+0x9a>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a2f      	ldr	r2, [pc, #188]	@ (800bd94 <TIM_Base_SetConfig+0x13c>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d00b      	beq.n	800bcf2 <TIM_Base_SetConfig+0x9a>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a2e      	ldr	r2, [pc, #184]	@ (800bd98 <TIM_Base_SetConfig+0x140>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d007      	beq.n	800bcf2 <TIM_Base_SetConfig+0x9a>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a2d      	ldr	r2, [pc, #180]	@ (800bd9c <TIM_Base_SetConfig+0x144>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d003      	beq.n	800bcf2 <TIM_Base_SetConfig+0x9a>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a2c      	ldr	r2, [pc, #176]	@ (800bda0 <TIM_Base_SetConfig+0x148>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d108      	bne.n	800bd04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	689a      	ldr	r2, [r3, #8]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a16      	ldr	r2, [pc, #88]	@ (800bd84 <TIM_Base_SetConfig+0x12c>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d00f      	beq.n	800bd50 <TIM_Base_SetConfig+0xf8>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a18      	ldr	r2, [pc, #96]	@ (800bd94 <TIM_Base_SetConfig+0x13c>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d00b      	beq.n	800bd50 <TIM_Base_SetConfig+0xf8>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a17      	ldr	r2, [pc, #92]	@ (800bd98 <TIM_Base_SetConfig+0x140>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d007      	beq.n	800bd50 <TIM_Base_SetConfig+0xf8>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a16      	ldr	r2, [pc, #88]	@ (800bd9c <TIM_Base_SetConfig+0x144>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d003      	beq.n	800bd50 <TIM_Base_SetConfig+0xf8>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a15      	ldr	r2, [pc, #84]	@ (800bda0 <TIM_Base_SetConfig+0x148>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d103      	bne.n	800bd58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	691a      	ldr	r2, [r3, #16]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	691b      	ldr	r3, [r3, #16]
 800bd62:	f003 0301 	and.w	r3, r3, #1
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d105      	bne.n	800bd76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	f023 0201 	bic.w	r2, r3, #1
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	611a      	str	r2, [r3, #16]
  }
}
 800bd76:	bf00      	nop
 800bd78:	3714      	adds	r7, #20
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	40010000 	.word	0x40010000
 800bd88:	40000400 	.word	0x40000400
 800bd8c:	40000800 	.word	0x40000800
 800bd90:	40000c00 	.word	0x40000c00
 800bd94:	40010400 	.word	0x40010400
 800bd98:	40014000 	.word	0x40014000
 800bd9c:	40014400 	.word	0x40014400
 800bda0:	40014800 	.word	0x40014800

0800bda4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b087      	sub	sp, #28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	f023 0201 	bic.w	r2, r3, #1
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	699b      	ldr	r3, [r3, #24]
 800bdca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	4b37      	ldr	r3, [pc, #220]	@ (800beac <TIM_OC1_SetConfig+0x108>)
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f023 0303 	bic.w	r3, r3, #3
 800bdda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	f023 0302 	bic.w	r3, r3, #2
 800bdec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a2d      	ldr	r2, [pc, #180]	@ (800beb0 <TIM_OC1_SetConfig+0x10c>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d00f      	beq.n	800be20 <TIM_OC1_SetConfig+0x7c>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a2c      	ldr	r2, [pc, #176]	@ (800beb4 <TIM_OC1_SetConfig+0x110>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d00b      	beq.n	800be20 <TIM_OC1_SetConfig+0x7c>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a2b      	ldr	r2, [pc, #172]	@ (800beb8 <TIM_OC1_SetConfig+0x114>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d007      	beq.n	800be20 <TIM_OC1_SetConfig+0x7c>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4a2a      	ldr	r2, [pc, #168]	@ (800bebc <TIM_OC1_SetConfig+0x118>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d003      	beq.n	800be20 <TIM_OC1_SetConfig+0x7c>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4a29      	ldr	r2, [pc, #164]	@ (800bec0 <TIM_OC1_SetConfig+0x11c>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d10c      	bne.n	800be3a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	f023 0308 	bic.w	r3, r3, #8
 800be26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	4313      	orrs	r3, r2
 800be30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	f023 0304 	bic.w	r3, r3, #4
 800be38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a1c      	ldr	r2, [pc, #112]	@ (800beb0 <TIM_OC1_SetConfig+0x10c>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d00f      	beq.n	800be62 <TIM_OC1_SetConfig+0xbe>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a1b      	ldr	r2, [pc, #108]	@ (800beb4 <TIM_OC1_SetConfig+0x110>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d00b      	beq.n	800be62 <TIM_OC1_SetConfig+0xbe>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a1a      	ldr	r2, [pc, #104]	@ (800beb8 <TIM_OC1_SetConfig+0x114>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d007      	beq.n	800be62 <TIM_OC1_SetConfig+0xbe>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a19      	ldr	r2, [pc, #100]	@ (800bebc <TIM_OC1_SetConfig+0x118>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d003      	beq.n	800be62 <TIM_OC1_SetConfig+0xbe>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a18      	ldr	r2, [pc, #96]	@ (800bec0 <TIM_OC1_SetConfig+0x11c>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d111      	bne.n	800be86 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800be70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	693a      	ldr	r2, [r7, #16]
 800be78:	4313      	orrs	r3, r2
 800be7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	699b      	ldr	r3, [r3, #24]
 800be80:	693a      	ldr	r2, [r7, #16]
 800be82:	4313      	orrs	r3, r2
 800be84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	685a      	ldr	r2, [r3, #4]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	621a      	str	r2, [r3, #32]
}
 800bea0:	bf00      	nop
 800bea2:	371c      	adds	r7, #28
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	fffeff8f 	.word	0xfffeff8f
 800beb0:	40010000 	.word	0x40010000
 800beb4:	40010400 	.word	0x40010400
 800beb8:	40014000 	.word	0x40014000
 800bebc:	40014400 	.word	0x40014400
 800bec0:	40014800 	.word	0x40014800

0800bec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b087      	sub	sp, #28
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6a1b      	ldr	r3, [r3, #32]
 800bed8:	f023 0210 	bic.w	r2, r3, #16
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	4b34      	ldr	r3, [pc, #208]	@ (800bfc0 <TIM_OC2_SetConfig+0xfc>)
 800bef0:	4013      	ands	r3, r2
 800bef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800befa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	021b      	lsls	r3, r3, #8
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f023 0320 	bic.w	r3, r3, #32
 800bf0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	011b      	lsls	r3, r3, #4
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a29      	ldr	r2, [pc, #164]	@ (800bfc4 <TIM_OC2_SetConfig+0x100>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d003      	beq.n	800bf2c <TIM_OC2_SetConfig+0x68>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a28      	ldr	r2, [pc, #160]	@ (800bfc8 <TIM_OC2_SetConfig+0x104>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d10d      	bne.n	800bf48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	011b      	lsls	r3, r3, #4
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a1e      	ldr	r2, [pc, #120]	@ (800bfc4 <TIM_OC2_SetConfig+0x100>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d00f      	beq.n	800bf70 <TIM_OC2_SetConfig+0xac>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a1d      	ldr	r2, [pc, #116]	@ (800bfc8 <TIM_OC2_SetConfig+0x104>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d00b      	beq.n	800bf70 <TIM_OC2_SetConfig+0xac>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a1c      	ldr	r2, [pc, #112]	@ (800bfcc <TIM_OC2_SetConfig+0x108>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d007      	beq.n	800bf70 <TIM_OC2_SetConfig+0xac>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a1b      	ldr	r2, [pc, #108]	@ (800bfd0 <TIM_OC2_SetConfig+0x10c>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d003      	beq.n	800bf70 <TIM_OC2_SetConfig+0xac>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a1a      	ldr	r2, [pc, #104]	@ (800bfd4 <TIM_OC2_SetConfig+0x110>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d113      	bne.n	800bf98 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bf76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bf7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	693a      	ldr	r2, [r7, #16]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	685a      	ldr	r2, [r3, #4]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	621a      	str	r2, [r3, #32]
}
 800bfb2:	bf00      	nop
 800bfb4:	371c      	adds	r7, #28
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	feff8fff 	.word	0xfeff8fff
 800bfc4:	40010000 	.word	0x40010000
 800bfc8:	40010400 	.word	0x40010400
 800bfcc:	40014000 	.word	0x40014000
 800bfd0:	40014400 	.word	0x40014400
 800bfd4:	40014800 	.word	0x40014800

0800bfd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b087      	sub	sp, #28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a1b      	ldr	r3, [r3, #32]
 800bfec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	4b33      	ldr	r3, [pc, #204]	@ (800c0d0 <TIM_OC3_SetConfig+0xf8>)
 800c004:	4013      	ands	r3, r2
 800c006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f023 0303 	bic.w	r3, r3, #3
 800c00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	4313      	orrs	r3, r2
 800c018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	021b      	lsls	r3, r3, #8
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4a28      	ldr	r2, [pc, #160]	@ (800c0d4 <TIM_OC3_SetConfig+0xfc>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d003      	beq.n	800c03e <TIM_OC3_SetConfig+0x66>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a27      	ldr	r2, [pc, #156]	@ (800c0d8 <TIM_OC3_SetConfig+0x100>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d10d      	bne.n	800c05a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	021b      	lsls	r3, r3, #8
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	4313      	orrs	r3, r2
 800c050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4a1d      	ldr	r2, [pc, #116]	@ (800c0d4 <TIM_OC3_SetConfig+0xfc>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d00f      	beq.n	800c082 <TIM_OC3_SetConfig+0xaa>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a1c      	ldr	r2, [pc, #112]	@ (800c0d8 <TIM_OC3_SetConfig+0x100>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d00b      	beq.n	800c082 <TIM_OC3_SetConfig+0xaa>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4a1b      	ldr	r2, [pc, #108]	@ (800c0dc <TIM_OC3_SetConfig+0x104>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d007      	beq.n	800c082 <TIM_OC3_SetConfig+0xaa>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4a1a      	ldr	r2, [pc, #104]	@ (800c0e0 <TIM_OC3_SetConfig+0x108>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d003      	beq.n	800c082 <TIM_OC3_SetConfig+0xaa>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4a19      	ldr	r2, [pc, #100]	@ (800c0e4 <TIM_OC3_SetConfig+0x10c>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d113      	bne.n	800c0aa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	695b      	ldr	r3, [r3, #20]
 800c096:	011b      	lsls	r3, r3, #4
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	011b      	lsls	r3, r3, #4
 800c0a4:	693a      	ldr	r2, [r7, #16]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	685a      	ldr	r2, [r3, #4]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	621a      	str	r2, [r3, #32]
}
 800c0c4:	bf00      	nop
 800c0c6:	371c      	adds	r7, #28
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr
 800c0d0:	fffeff8f 	.word	0xfffeff8f
 800c0d4:	40010000 	.word	0x40010000
 800c0d8:	40010400 	.word	0x40010400
 800c0dc:	40014000 	.word	0x40014000
 800c0e0:	40014400 	.word	0x40014400
 800c0e4:	40014800 	.word	0x40014800

0800c0e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b087      	sub	sp, #28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a1b      	ldr	r3, [r3, #32]
 800c0f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6a1b      	ldr	r3, [r3, #32]
 800c0fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	69db      	ldr	r3, [r3, #28]
 800c10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	4b24      	ldr	r3, [pc, #144]	@ (800c1a4 <TIM_OC4_SetConfig+0xbc>)
 800c114:	4013      	ands	r3, r2
 800c116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c11e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	021b      	lsls	r3, r3, #8
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	4313      	orrs	r3, r2
 800c12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	031b      	lsls	r3, r3, #12
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	4313      	orrs	r3, r2
 800c13e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4a19      	ldr	r2, [pc, #100]	@ (800c1a8 <TIM_OC4_SetConfig+0xc0>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d00f      	beq.n	800c168 <TIM_OC4_SetConfig+0x80>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a18      	ldr	r2, [pc, #96]	@ (800c1ac <TIM_OC4_SetConfig+0xc4>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d00b      	beq.n	800c168 <TIM_OC4_SetConfig+0x80>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a17      	ldr	r2, [pc, #92]	@ (800c1b0 <TIM_OC4_SetConfig+0xc8>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d007      	beq.n	800c168 <TIM_OC4_SetConfig+0x80>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a16      	ldr	r2, [pc, #88]	@ (800c1b4 <TIM_OC4_SetConfig+0xcc>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d003      	beq.n	800c168 <TIM_OC4_SetConfig+0x80>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4a15      	ldr	r2, [pc, #84]	@ (800c1b8 <TIM_OC4_SetConfig+0xd0>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d109      	bne.n	800c17c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c16e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	695b      	ldr	r3, [r3, #20]
 800c174:	019b      	lsls	r3, r3, #6
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	4313      	orrs	r3, r2
 800c17a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	621a      	str	r2, [r3, #32]
}
 800c196:	bf00      	nop
 800c198:	371c      	adds	r7, #28
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	feff8fff 	.word	0xfeff8fff
 800c1a8:	40010000 	.word	0x40010000
 800c1ac:	40010400 	.word	0x40010400
 800c1b0:	40014000 	.word	0x40014000
 800c1b4:	40014400 	.word	0x40014400
 800c1b8:	40014800 	.word	0x40014800

0800c1bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b087      	sub	sp, #28
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a1b      	ldr	r3, [r3, #32]
 800c1d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	4b21      	ldr	r3, [pc, #132]	@ (800c26c <TIM_OC5_SetConfig+0xb0>)
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c1fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	041b      	lsls	r3, r3, #16
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	4313      	orrs	r3, r2
 800c208:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4a18      	ldr	r2, [pc, #96]	@ (800c270 <TIM_OC5_SetConfig+0xb4>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d00f      	beq.n	800c232 <TIM_OC5_SetConfig+0x76>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a17      	ldr	r2, [pc, #92]	@ (800c274 <TIM_OC5_SetConfig+0xb8>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d00b      	beq.n	800c232 <TIM_OC5_SetConfig+0x76>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a16      	ldr	r2, [pc, #88]	@ (800c278 <TIM_OC5_SetConfig+0xbc>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d007      	beq.n	800c232 <TIM_OC5_SetConfig+0x76>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a15      	ldr	r2, [pc, #84]	@ (800c27c <TIM_OC5_SetConfig+0xc0>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d003      	beq.n	800c232 <TIM_OC5_SetConfig+0x76>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4a14      	ldr	r2, [pc, #80]	@ (800c280 <TIM_OC5_SetConfig+0xc4>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d109      	bne.n	800c246 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c238:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	021b      	lsls	r3, r3, #8
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	4313      	orrs	r3, r2
 800c244:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	697a      	ldr	r2, [r7, #20]
 800c24a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	685a      	ldr	r2, [r3, #4]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	621a      	str	r2, [r3, #32]
}
 800c260:	bf00      	nop
 800c262:	371c      	adds	r7, #28
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	fffeff8f 	.word	0xfffeff8f
 800c270:	40010000 	.word	0x40010000
 800c274:	40010400 	.word	0x40010400
 800c278:	40014000 	.word	0x40014000
 800c27c:	40014400 	.word	0x40014400
 800c280:	40014800 	.word	0x40014800

0800c284 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c284:	b480      	push	{r7}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a1b      	ldr	r3, [r3, #32]
 800c292:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a1b      	ldr	r3, [r3, #32]
 800c298:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	4b22      	ldr	r3, [pc, #136]	@ (800c338 <TIM_OC6_SetConfig+0xb4>)
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	021b      	lsls	r3, r3, #8
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c2c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	051b      	lsls	r3, r3, #20
 800c2ce:	693a      	ldr	r2, [r7, #16]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a19      	ldr	r2, [pc, #100]	@ (800c33c <TIM_OC6_SetConfig+0xb8>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d00f      	beq.n	800c2fc <TIM_OC6_SetConfig+0x78>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a18      	ldr	r2, [pc, #96]	@ (800c340 <TIM_OC6_SetConfig+0xbc>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d00b      	beq.n	800c2fc <TIM_OC6_SetConfig+0x78>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a17      	ldr	r2, [pc, #92]	@ (800c344 <TIM_OC6_SetConfig+0xc0>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d007      	beq.n	800c2fc <TIM_OC6_SetConfig+0x78>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4a16      	ldr	r2, [pc, #88]	@ (800c348 <TIM_OC6_SetConfig+0xc4>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d003      	beq.n	800c2fc <TIM_OC6_SetConfig+0x78>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4a15      	ldr	r2, [pc, #84]	@ (800c34c <TIM_OC6_SetConfig+0xc8>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d109      	bne.n	800c310 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c302:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	695b      	ldr	r3, [r3, #20]
 800c308:	029b      	lsls	r3, r3, #10
 800c30a:	697a      	ldr	r2, [r7, #20]
 800c30c:	4313      	orrs	r3, r2
 800c30e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	697a      	ldr	r2, [r7, #20]
 800c314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	621a      	str	r2, [r3, #32]
}
 800c32a:	bf00      	nop
 800c32c:	371c      	adds	r7, #28
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	feff8fff 	.word	0xfeff8fff
 800c33c:	40010000 	.word	0x40010000
 800c340:	40010400 	.word	0x40010400
 800c344:	40014000 	.word	0x40014000
 800c348:	40014400 	.word	0x40014400
 800c34c:	40014800 	.word	0x40014800

0800c350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c350:	b480      	push	{r7}
 800c352:	b087      	sub	sp, #28
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	f003 031f 	and.w	r3, r3, #31
 800c362:	2201      	movs	r2, #1
 800c364:	fa02 f303 	lsl.w	r3, r2, r3
 800c368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6a1a      	ldr	r2, [r3, #32]
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	43db      	mvns	r3, r3
 800c372:	401a      	ands	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6a1a      	ldr	r2, [r3, #32]
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	f003 031f 	and.w	r3, r3, #31
 800c382:	6879      	ldr	r1, [r7, #4]
 800c384:	fa01 f303 	lsl.w	r3, r1, r3
 800c388:	431a      	orrs	r2, r3
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	621a      	str	r2, [r3, #32]
}
 800c38e:	bf00      	nop
 800c390:	371c      	adds	r7, #28
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
	...

0800c39c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d101      	bne.n	800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	e06d      	b.n	800c490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2202      	movs	r2, #2
 800c3c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a30      	ldr	r2, [pc, #192]	@ (800c49c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d004      	beq.n	800c3e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a2f      	ldr	r2, [pc, #188]	@ (800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d108      	bne.n	800c3fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c3ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c400:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	4313      	orrs	r3, r2
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a20      	ldr	r2, [pc, #128]	@ (800c49c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d022      	beq.n	800c464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c426:	d01d      	beq.n	800c464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a1d      	ldr	r2, [pc, #116]	@ (800c4a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d018      	beq.n	800c464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a1c      	ldr	r2, [pc, #112]	@ (800c4a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d013      	beq.n	800c464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a1a      	ldr	r2, [pc, #104]	@ (800c4ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d00e      	beq.n	800c464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a15      	ldr	r2, [pc, #84]	@ (800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d009      	beq.n	800c464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a16      	ldr	r2, [pc, #88]	@ (800c4b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d004      	beq.n	800c464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a15      	ldr	r2, [pc, #84]	@ (800c4b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d10c      	bne.n	800c47e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c46a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	4313      	orrs	r3, r2
 800c474:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2201      	movs	r2, #1
 800c482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3714      	adds	r7, #20
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	40010000 	.word	0x40010000
 800c4a0:	40010400 	.word	0x40010400
 800c4a4:	40000400 	.word	0x40000400
 800c4a8:	40000800 	.word	0x40000800
 800c4ac:	40000c00 	.word	0x40000c00
 800c4b0:	40001800 	.word	0x40001800
 800c4b4:	40014000 	.word	0x40014000

0800c4b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4c0:	bf00      	nop
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d101      	bne.n	800c506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	e042      	b.n	800c58c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d106      	bne.n	800c51e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7f6 fe2b 	bl	8003174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2224      	movs	r2, #36	@ 0x24
 800c522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f022 0201 	bic.w	r2, r2, #1
 800c534:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d002      	beq.n	800c544 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f001 fb52 	bl	800dbe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fce3 	bl	800cf10 <UART_SetConfig>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d101      	bne.n	800c554 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c550:	2301      	movs	r3, #1
 800c552:	e01b      	b.n	800c58c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	685a      	ldr	r2, [r3, #4]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	689a      	ldr	r2, [r3, #8]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f042 0201 	orr.w	r2, r2, #1
 800c582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f001 fbd1 	bl	800dd2c <UART_CheckIdleState>
 800c58a:	4603      	mov	r3, r0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08a      	sub	sp, #40	@ 0x28
 800c598:	af02      	add	r7, sp, #8
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	603b      	str	r3, [r7, #0]
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5aa:	2b20      	cmp	r3, #32
 800c5ac:	d17b      	bne.n	800c6a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d002      	beq.n	800c5ba <HAL_UART_Transmit+0x26>
 800c5b4:	88fb      	ldrh	r3, [r7, #6]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d101      	bne.n	800c5be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	e074      	b.n	800c6a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2221      	movs	r2, #33	@ 0x21
 800c5ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5ce:	f7f7 f853 	bl	8003678 <HAL_GetTick>
 800c5d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	88fa      	ldrh	r2, [r7, #6]
 800c5d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	88fa      	ldrh	r2, [r7, #6]
 800c5e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5ec:	d108      	bne.n	800c600 <HAL_UART_Transmit+0x6c>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d104      	bne.n	800c600 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	61bb      	str	r3, [r7, #24]
 800c5fe:	e003      	b.n	800c608 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c604:	2300      	movs	r3, #0
 800c606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c608:	e030      	b.n	800c66c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	9300      	str	r3, [sp, #0]
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	2200      	movs	r2, #0
 800c612:	2180      	movs	r1, #128	@ 0x80
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f001 fc33 	bl	800de80 <UART_WaitOnFlagUntilTimeout>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d005      	beq.n	800c62c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2220      	movs	r2, #32
 800c624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c628:	2303      	movs	r3, #3
 800c62a:	e03d      	b.n	800c6a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10b      	bne.n	800c64a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	461a      	mov	r2, r3
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c640:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	3302      	adds	r3, #2
 800c646:	61bb      	str	r3, [r7, #24]
 800c648:	e007      	b.n	800c65a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	781a      	ldrb	r2, [r3, #0]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	3301      	adds	r3, #1
 800c658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c660:	b29b      	uxth	r3, r3
 800c662:	3b01      	subs	r3, #1
 800c664:	b29a      	uxth	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c672:	b29b      	uxth	r3, r3
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1c8      	bne.n	800c60a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	9300      	str	r3, [sp, #0]
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	2200      	movs	r2, #0
 800c680:	2140      	movs	r1, #64	@ 0x40
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f001 fbfc 	bl	800de80 <UART_WaitOnFlagUntilTimeout>
 800c688:	4603      	mov	r3, r0
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d005      	beq.n	800c69a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2220      	movs	r2, #32
 800c692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c696:	2303      	movs	r3, #3
 800c698:	e006      	b.n	800c6a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2220      	movs	r2, #32
 800c69e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	e000      	b.n	800c6a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c6a6:	2302      	movs	r3, #2
  }
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3720      	adds	r7, #32
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08a      	sub	sp, #40	@ 0x28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6c4:	2b20      	cmp	r3, #32
 800c6c6:	d137      	bne.n	800c738 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d002      	beq.n	800c6d4 <HAL_UART_Receive_DMA+0x24>
 800c6ce:	88fb      	ldrh	r3, [r7, #6]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	e030      	b.n	800c73a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a18      	ldr	r2, [pc, #96]	@ (800c744 <HAL_UART_Receive_DMA+0x94>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d01f      	beq.n	800c728 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d018      	beq.n	800c728 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	e853 3f00 	ldrex	r3, [r3]
 800c702:	613b      	str	r3, [r7, #16]
   return(result);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c70a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	461a      	mov	r2, r3
 800c712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c714:	623b      	str	r3, [r7, #32]
 800c716:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c718:	69f9      	ldr	r1, [r7, #28]
 800c71a:	6a3a      	ldr	r2, [r7, #32]
 800c71c:	e841 2300 	strex	r3, r2, [r1]
 800c720:	61bb      	str	r3, [r7, #24]
   return(result);
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1e6      	bne.n	800c6f6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c728:	88fb      	ldrh	r3, [r7, #6]
 800c72a:	461a      	mov	r2, r3
 800c72c:	68b9      	ldr	r1, [r7, #8]
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	f001 fc14 	bl	800df5c <UART_Start_Receive_DMA>
 800c734:	4603      	mov	r3, r0
 800c736:	e000      	b.n	800c73a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c738:	2302      	movs	r3, #2
  }
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3728      	adds	r7, #40	@ 0x28
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	58000c00 	.word	0x58000c00

0800c748 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b0ba      	sub	sp, #232	@ 0xe8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	69db      	ldr	r3, [r3, #28]
 800c756:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c76e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c772:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c776:	4013      	ands	r3, r2
 800c778:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c77c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c780:	2b00      	cmp	r3, #0
 800c782:	d11b      	bne.n	800c7bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c788:	f003 0320 	and.w	r3, r3, #32
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d015      	beq.n	800c7bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c794:	f003 0320 	and.w	r3, r3, #32
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d105      	bne.n	800c7a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c79c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d009      	beq.n	800c7bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 8377 	beq.w	800cea0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	4798      	blx	r3
      }
      return;
 800c7ba:	e371      	b.n	800cea0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c7bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 8123 	beq.w	800ca0c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c7c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c7ca:	4b8d      	ldr	r3, [pc, #564]	@ (800ca00 <HAL_UART_IRQHandler+0x2b8>)
 800c7cc:	4013      	ands	r3, r2
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d106      	bne.n	800c7e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c7d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c7d6:	4b8b      	ldr	r3, [pc, #556]	@ (800ca04 <HAL_UART_IRQHandler+0x2bc>)
 800c7d8:	4013      	ands	r3, r2
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 8116 	beq.w	800ca0c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c7e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d011      	beq.n	800c810 <HAL_UART_IRQHandler+0xc8>
 800c7ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00b      	beq.n	800c810 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c806:	f043 0201 	orr.w	r2, r3, #1
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c814:	f003 0302 	and.w	r3, r3, #2
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d011      	beq.n	800c840 <HAL_UART_IRQHandler+0xf8>
 800c81c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c820:	f003 0301 	and.w	r3, r3, #1
 800c824:	2b00      	cmp	r3, #0
 800c826:	d00b      	beq.n	800c840 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2202      	movs	r2, #2
 800c82e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c836:	f043 0204 	orr.w	r2, r3, #4
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c844:	f003 0304 	and.w	r3, r3, #4
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d011      	beq.n	800c870 <HAL_UART_IRQHandler+0x128>
 800c84c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c850:	f003 0301 	and.w	r3, r3, #1
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00b      	beq.n	800c870 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2204      	movs	r2, #4
 800c85e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c866:	f043 0202 	orr.w	r2, r3, #2
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c874:	f003 0308 	and.w	r3, r3, #8
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d017      	beq.n	800c8ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c880:	f003 0320 	and.w	r3, r3, #32
 800c884:	2b00      	cmp	r3, #0
 800c886:	d105      	bne.n	800c894 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c888:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c88c:	4b5c      	ldr	r3, [pc, #368]	@ (800ca00 <HAL_UART_IRQHandler+0x2b8>)
 800c88e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00b      	beq.n	800c8ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2208      	movs	r2, #8
 800c89a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8a2:	f043 0208 	orr.w	r2, r3, #8
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d012      	beq.n	800c8de <HAL_UART_IRQHandler+0x196>
 800c8b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00c      	beq.n	800c8de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c8cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8d4:	f043 0220 	orr.w	r2, r3, #32
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	f000 82dd 	beq.w	800cea4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c8ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8ee:	f003 0320 	and.w	r3, r3, #32
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d013      	beq.n	800c91e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c8f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8fa:	f003 0320 	and.w	r3, r3, #32
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d105      	bne.n	800c90e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d007      	beq.n	800c91e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c912:	2b00      	cmp	r3, #0
 800c914:	d003      	beq.n	800c91e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c924:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c932:	2b40      	cmp	r3, #64	@ 0x40
 800c934:	d005      	beq.n	800c942 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c93a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d054      	beq.n	800c9ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f001 fbf2 	bl	800e12c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c952:	2b40      	cmp	r3, #64	@ 0x40
 800c954:	d146      	bne.n	800c9e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	3308      	adds	r3, #8
 800c95c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c960:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c964:	e853 3f00 	ldrex	r3, [r3]
 800c968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c96c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c974:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	3308      	adds	r3, #8
 800c97e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c982:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c986:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c98a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c98e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c992:	e841 2300 	strex	r3, r2, [r1]
 800c996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c99a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1d9      	bne.n	800c956 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d017      	beq.n	800c9dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9b2:	4a15      	ldr	r2, [pc, #84]	@ (800ca08 <HAL_UART_IRQHandler+0x2c0>)
 800c9b4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7f8 f929 	bl	8004c14 <HAL_DMA_Abort_IT>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d019      	beq.n	800c9fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c9d6:	4610      	mov	r0, r2
 800c9d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9da:	e00f      	b.n	800c9fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 fa81 	bl	800cee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9e2:	e00b      	b.n	800c9fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 fa7d 	bl	800cee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9ea:	e007      	b.n	800c9fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 fa79 	bl	800cee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c9fa:	e253      	b.n	800cea4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9fc:	bf00      	nop
    return;
 800c9fe:	e251      	b.n	800cea4 <HAL_UART_IRQHandler+0x75c>
 800ca00:	10000001 	.word	0x10000001
 800ca04:	04000120 	.word	0x04000120
 800ca08:	0800e3df 	.word	0x0800e3df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	f040 81e7 	bne.w	800cde4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ca16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca1a:	f003 0310 	and.w	r3, r3, #16
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f000 81e0 	beq.w	800cde4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ca24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca28:	f003 0310 	and.w	r3, r3, #16
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 81d9 	beq.w	800cde4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2210      	movs	r2, #16
 800ca38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca44:	2b40      	cmp	r3, #64	@ 0x40
 800ca46:	f040 8151 	bne.w	800ccec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a96      	ldr	r2, [pc, #600]	@ (800ccac <HAL_UART_IRQHandler+0x564>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d068      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a93      	ldr	r2, [pc, #588]	@ (800ccb0 <HAL_UART_IRQHandler+0x568>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d061      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a91      	ldr	r2, [pc, #580]	@ (800ccb4 <HAL_UART_IRQHandler+0x56c>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d05a      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a8e      	ldr	r2, [pc, #568]	@ (800ccb8 <HAL_UART_IRQHandler+0x570>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d053      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a8c      	ldr	r2, [pc, #560]	@ (800ccbc <HAL_UART_IRQHandler+0x574>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d04c      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a89      	ldr	r2, [pc, #548]	@ (800ccc0 <HAL_UART_IRQHandler+0x578>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d045      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a87      	ldr	r2, [pc, #540]	@ (800ccc4 <HAL_UART_IRQHandler+0x57c>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d03e      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a84      	ldr	r2, [pc, #528]	@ (800ccc8 <HAL_UART_IRQHandler+0x580>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d037      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a82      	ldr	r2, [pc, #520]	@ (800cccc <HAL_UART_IRQHandler+0x584>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d030      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a7f      	ldr	r2, [pc, #508]	@ (800ccd0 <HAL_UART_IRQHandler+0x588>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d029      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a7d      	ldr	r2, [pc, #500]	@ (800ccd4 <HAL_UART_IRQHandler+0x58c>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d022      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a7a      	ldr	r2, [pc, #488]	@ (800ccd8 <HAL_UART_IRQHandler+0x590>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d01b      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a78      	ldr	r2, [pc, #480]	@ (800ccdc <HAL_UART_IRQHandler+0x594>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d014      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a75      	ldr	r2, [pc, #468]	@ (800cce0 <HAL_UART_IRQHandler+0x598>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d00d      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a73      	ldr	r2, [pc, #460]	@ (800cce4 <HAL_UART_IRQHandler+0x59c>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d006      	beq.n	800cb2a <HAL_UART_IRQHandler+0x3e2>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a70      	ldr	r2, [pc, #448]	@ (800cce8 <HAL_UART_IRQHandler+0x5a0>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d106      	bne.n	800cb38 <HAL_UART_IRQHandler+0x3f0>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	e005      	b.n	800cb44 <HAL_UART_IRQHandler+0x3fc>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cb48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f000 81ab 	beq.w	800cea8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cb58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	f080 81a3 	bcs.w	800cea8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cb68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb72:	69db      	ldr	r3, [r3, #28]
 800cb74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb78:	f000 8087 	beq.w	800cc8a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cb88:	e853 3f00 	ldrex	r3, [r3]
 800cb8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cb90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cb94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	461a      	mov	r2, r3
 800cba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cba6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cbaa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cbb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cbb6:	e841 2300 	strex	r3, r2, [r1]
 800cbba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cbbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1da      	bne.n	800cb7c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	3308      	adds	r3, #8
 800cbcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbd0:	e853 3f00 	ldrex	r3, [r3]
 800cbd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cbd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cbd8:	f023 0301 	bic.w	r3, r3, #1
 800cbdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cbea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cbee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cbf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cbf6:	e841 2300 	strex	r3, r2, [r1]
 800cbfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cbfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d1e1      	bne.n	800cbc6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	3308      	adds	r3, #8
 800cc08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc0c:	e853 3f00 	ldrex	r3, [r3]
 800cc10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cc12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3308      	adds	r3, #8
 800cc22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cc26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cc28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cc2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc2e:	e841 2300 	strex	r3, r2, [r1]
 800cc32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cc34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1e3      	bne.n	800cc02 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2220      	movs	r2, #32
 800cc3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc50:	e853 3f00 	ldrex	r3, [r3]
 800cc54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cc56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc58:	f023 0310 	bic.w	r3, r3, #16
 800cc5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	461a      	mov	r2, r3
 800cc66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cc70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc72:	e841 2300 	strex	r3, r2, [r1]
 800cc76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cc78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1e4      	bne.n	800cc48 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7f7 fca7 	bl	80045d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2202      	movs	r2, #2
 800cc8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	1ad3      	subs	r3, r2, r3
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	4619      	mov	r1, r3
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f927 	bl	800cef8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ccaa:	e0fd      	b.n	800cea8 <HAL_UART_IRQHandler+0x760>
 800ccac:	40020010 	.word	0x40020010
 800ccb0:	40020028 	.word	0x40020028
 800ccb4:	40020040 	.word	0x40020040
 800ccb8:	40020058 	.word	0x40020058
 800ccbc:	40020070 	.word	0x40020070
 800ccc0:	40020088 	.word	0x40020088
 800ccc4:	400200a0 	.word	0x400200a0
 800ccc8:	400200b8 	.word	0x400200b8
 800cccc:	40020410 	.word	0x40020410
 800ccd0:	40020428 	.word	0x40020428
 800ccd4:	40020440 	.word	0x40020440
 800ccd8:	40020458 	.word	0x40020458
 800ccdc:	40020470 	.word	0x40020470
 800cce0:	40020488 	.word	0x40020488
 800cce4:	400204a0 	.word	0x400204a0
 800cce8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 80cf 	beq.w	800ceac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800cd0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f000 80ca 	beq.w	800ceac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd20:	e853 3f00 	ldrex	r3, [r3]
 800cd24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	461a      	mov	r2, r3
 800cd36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd3a:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd3c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd42:	e841 2300 	strex	r3, r2, [r1]
 800cd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1e4      	bne.n	800cd18 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	3308      	adds	r3, #8
 800cd54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd58:	e853 3f00 	ldrex	r3, [r3]
 800cd5c:	623b      	str	r3, [r7, #32]
   return(result);
 800cd5e:	6a3a      	ldr	r2, [r7, #32]
 800cd60:	4b55      	ldr	r3, [pc, #340]	@ (800ceb8 <HAL_UART_IRQHandler+0x770>)
 800cd62:	4013      	ands	r3, r2
 800cd64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cd72:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd7a:	e841 2300 	strex	r3, r2, [r1]
 800cd7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1e3      	bne.n	800cd4e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2220      	movs	r2, #32
 800cd8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2200      	movs	r2, #0
 800cd98:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	e853 3f00 	ldrex	r3, [r3]
 800cda6:	60fb      	str	r3, [r7, #12]
   return(result);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f023 0310 	bic.w	r3, r3, #16
 800cdae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cdbc:	61fb      	str	r3, [r7, #28]
 800cdbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc0:	69b9      	ldr	r1, [r7, #24]
 800cdc2:	69fa      	ldr	r2, [r7, #28]
 800cdc4:	e841 2300 	strex	r3, r2, [r1]
 800cdc8:	617b      	str	r3, [r7, #20]
   return(result);
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1e4      	bne.n	800cd9a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cdd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cdda:	4619      	mov	r1, r3
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f88b 	bl	800cef8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cde2:	e063      	b.n	800ceac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cde4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cde8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00e      	beq.n	800ce0e <HAL_UART_IRQHandler+0x6c6>
 800cdf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d008      	beq.n	800ce0e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ce04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f001 fb2a 	bl	800e460 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce0c:	e051      	b.n	800ceb2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ce0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d014      	beq.n	800ce44 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ce1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d105      	bne.n	800ce32 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ce26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d008      	beq.n	800ce44 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d03a      	beq.n	800ceb0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	4798      	blx	r3
    }
    return;
 800ce42:	e035      	b.n	800ceb0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ce44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d009      	beq.n	800ce64 <HAL_UART_IRQHandler+0x71c>
 800ce50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d003      	beq.n	800ce64 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f001 fad4 	bl	800e40a <UART_EndTransmit_IT>
    return;
 800ce62:	e026      	b.n	800ceb2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ce64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d009      	beq.n	800ce84 <HAL_UART_IRQHandler+0x73c>
 800ce70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d003      	beq.n	800ce84 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f001 fb03 	bl	800e488 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce82:	e016      	b.n	800ceb2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ce84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d010      	beq.n	800ceb2 <HAL_UART_IRQHandler+0x76a>
 800ce90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	da0c      	bge.n	800ceb2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f001 faeb 	bl	800e474 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce9e:	e008      	b.n	800ceb2 <HAL_UART_IRQHandler+0x76a>
      return;
 800cea0:	bf00      	nop
 800cea2:	e006      	b.n	800ceb2 <HAL_UART_IRQHandler+0x76a>
    return;
 800cea4:	bf00      	nop
 800cea6:	e004      	b.n	800ceb2 <HAL_UART_IRQHandler+0x76a>
      return;
 800cea8:	bf00      	nop
 800ceaa:	e002      	b.n	800ceb2 <HAL_UART_IRQHandler+0x76a>
      return;
 800ceac:	bf00      	nop
 800ceae:	e000      	b.n	800ceb2 <HAL_UART_IRQHandler+0x76a>
    return;
 800ceb0:	bf00      	nop
  }
}
 800ceb2:	37e8      	adds	r7, #232	@ 0xe8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	effffffe 	.word	0xeffffffe

0800cebc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ced8:	bf00      	nop
 800ceda:	370c      	adds	r7, #12
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ceec:	bf00      	nop
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	460b      	mov	r3, r1
 800cf02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf04:	bf00      	nop
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf14:	b092      	sub	sp, #72	@ 0x48
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	689a      	ldr	r2, [r3, #8]
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	691b      	ldr	r3, [r3, #16]
 800cf28:	431a      	orrs	r2, r3
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	695b      	ldr	r3, [r3, #20]
 800cf2e:	431a      	orrs	r2, r3
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	69db      	ldr	r3, [r3, #28]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	4bbe      	ldr	r3, [pc, #760]	@ (800d238 <UART_SetConfig+0x328>)
 800cf40:	4013      	ands	r3, r2
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	6812      	ldr	r2, [r2, #0]
 800cf46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf48:	430b      	orrs	r3, r1
 800cf4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	68da      	ldr	r2, [r3, #12]
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	430a      	orrs	r2, r1
 800cf60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	699b      	ldr	r3, [r3, #24]
 800cf66:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4ab3      	ldr	r2, [pc, #716]	@ (800d23c <UART_SetConfig+0x32c>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d004      	beq.n	800cf7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	6a1b      	ldr	r3, [r3, #32]
 800cf76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	689a      	ldr	r2, [r3, #8]
 800cf82:	4baf      	ldr	r3, [pc, #700]	@ (800d240 <UART_SetConfig+0x330>)
 800cf84:	4013      	ands	r3, r2
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	6812      	ldr	r2, [r2, #0]
 800cf8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf8c:	430b      	orrs	r3, r1
 800cf8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf96:	f023 010f 	bic.w	r1, r3, #15
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4aa6      	ldr	r2, [pc, #664]	@ (800d244 <UART_SetConfig+0x334>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d177      	bne.n	800d0a0 <UART_SetConfig+0x190>
 800cfb0:	4ba5      	ldr	r3, [pc, #660]	@ (800d248 <UART_SetConfig+0x338>)
 800cfb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cfb8:	2b28      	cmp	r3, #40	@ 0x28
 800cfba:	d86d      	bhi.n	800d098 <UART_SetConfig+0x188>
 800cfbc:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc4 <UART_SetConfig+0xb4>)
 800cfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc2:	bf00      	nop
 800cfc4:	0800d069 	.word	0x0800d069
 800cfc8:	0800d099 	.word	0x0800d099
 800cfcc:	0800d099 	.word	0x0800d099
 800cfd0:	0800d099 	.word	0x0800d099
 800cfd4:	0800d099 	.word	0x0800d099
 800cfd8:	0800d099 	.word	0x0800d099
 800cfdc:	0800d099 	.word	0x0800d099
 800cfe0:	0800d099 	.word	0x0800d099
 800cfe4:	0800d071 	.word	0x0800d071
 800cfe8:	0800d099 	.word	0x0800d099
 800cfec:	0800d099 	.word	0x0800d099
 800cff0:	0800d099 	.word	0x0800d099
 800cff4:	0800d099 	.word	0x0800d099
 800cff8:	0800d099 	.word	0x0800d099
 800cffc:	0800d099 	.word	0x0800d099
 800d000:	0800d099 	.word	0x0800d099
 800d004:	0800d079 	.word	0x0800d079
 800d008:	0800d099 	.word	0x0800d099
 800d00c:	0800d099 	.word	0x0800d099
 800d010:	0800d099 	.word	0x0800d099
 800d014:	0800d099 	.word	0x0800d099
 800d018:	0800d099 	.word	0x0800d099
 800d01c:	0800d099 	.word	0x0800d099
 800d020:	0800d099 	.word	0x0800d099
 800d024:	0800d081 	.word	0x0800d081
 800d028:	0800d099 	.word	0x0800d099
 800d02c:	0800d099 	.word	0x0800d099
 800d030:	0800d099 	.word	0x0800d099
 800d034:	0800d099 	.word	0x0800d099
 800d038:	0800d099 	.word	0x0800d099
 800d03c:	0800d099 	.word	0x0800d099
 800d040:	0800d099 	.word	0x0800d099
 800d044:	0800d089 	.word	0x0800d089
 800d048:	0800d099 	.word	0x0800d099
 800d04c:	0800d099 	.word	0x0800d099
 800d050:	0800d099 	.word	0x0800d099
 800d054:	0800d099 	.word	0x0800d099
 800d058:	0800d099 	.word	0x0800d099
 800d05c:	0800d099 	.word	0x0800d099
 800d060:	0800d099 	.word	0x0800d099
 800d064:	0800d091 	.word	0x0800d091
 800d068:	2301      	movs	r3, #1
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06e:	e326      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d070:	2304      	movs	r3, #4
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d076:	e322      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d078:	2308      	movs	r3, #8
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07e:	e31e      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d080:	2310      	movs	r3, #16
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d086:	e31a      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d088:	2320      	movs	r3, #32
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d08e:	e316      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d090:	2340      	movs	r3, #64	@ 0x40
 800d092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d096:	e312      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d098:	2380      	movs	r3, #128	@ 0x80
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d09e:	e30e      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a69      	ldr	r2, [pc, #420]	@ (800d24c <UART_SetConfig+0x33c>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d130      	bne.n	800d10c <UART_SetConfig+0x1fc>
 800d0aa:	4b67      	ldr	r3, [pc, #412]	@ (800d248 <UART_SetConfig+0x338>)
 800d0ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0ae:	f003 0307 	and.w	r3, r3, #7
 800d0b2:	2b05      	cmp	r3, #5
 800d0b4:	d826      	bhi.n	800d104 <UART_SetConfig+0x1f4>
 800d0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0bc <UART_SetConfig+0x1ac>)
 800d0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0bc:	0800d0d5 	.word	0x0800d0d5
 800d0c0:	0800d0dd 	.word	0x0800d0dd
 800d0c4:	0800d0e5 	.word	0x0800d0e5
 800d0c8:	0800d0ed 	.word	0x0800d0ed
 800d0cc:	0800d0f5 	.word	0x0800d0f5
 800d0d0:	0800d0fd 	.word	0x0800d0fd
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0da:	e2f0      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d0dc:	2304      	movs	r3, #4
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e2ec      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d0e4:	2308      	movs	r3, #8
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e2e8      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d0ec:	2310      	movs	r3, #16
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0f2:	e2e4      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d0f4:	2320      	movs	r3, #32
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0fa:	e2e0      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d0fc:	2340      	movs	r3, #64	@ 0x40
 800d0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d102:	e2dc      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d104:	2380      	movs	r3, #128	@ 0x80
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d10a:	e2d8      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a4f      	ldr	r2, [pc, #316]	@ (800d250 <UART_SetConfig+0x340>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d130      	bne.n	800d178 <UART_SetConfig+0x268>
 800d116:	4b4c      	ldr	r3, [pc, #304]	@ (800d248 <UART_SetConfig+0x338>)
 800d118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d11a:	f003 0307 	and.w	r3, r3, #7
 800d11e:	2b05      	cmp	r3, #5
 800d120:	d826      	bhi.n	800d170 <UART_SetConfig+0x260>
 800d122:	a201      	add	r2, pc, #4	@ (adr r2, 800d128 <UART_SetConfig+0x218>)
 800d124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d128:	0800d141 	.word	0x0800d141
 800d12c:	0800d149 	.word	0x0800d149
 800d130:	0800d151 	.word	0x0800d151
 800d134:	0800d159 	.word	0x0800d159
 800d138:	0800d161 	.word	0x0800d161
 800d13c:	0800d169 	.word	0x0800d169
 800d140:	2300      	movs	r3, #0
 800d142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d146:	e2ba      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d148:	2304      	movs	r3, #4
 800d14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d14e:	e2b6      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d150:	2308      	movs	r3, #8
 800d152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d156:	e2b2      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d158:	2310      	movs	r3, #16
 800d15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d15e:	e2ae      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d160:	2320      	movs	r3, #32
 800d162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d166:	e2aa      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d168:	2340      	movs	r3, #64	@ 0x40
 800d16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d16e:	e2a6      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d170:	2380      	movs	r3, #128	@ 0x80
 800d172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d176:	e2a2      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a35      	ldr	r2, [pc, #212]	@ (800d254 <UART_SetConfig+0x344>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d130      	bne.n	800d1e4 <UART_SetConfig+0x2d4>
 800d182:	4b31      	ldr	r3, [pc, #196]	@ (800d248 <UART_SetConfig+0x338>)
 800d184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d186:	f003 0307 	and.w	r3, r3, #7
 800d18a:	2b05      	cmp	r3, #5
 800d18c:	d826      	bhi.n	800d1dc <UART_SetConfig+0x2cc>
 800d18e:	a201      	add	r2, pc, #4	@ (adr r2, 800d194 <UART_SetConfig+0x284>)
 800d190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d194:	0800d1ad 	.word	0x0800d1ad
 800d198:	0800d1b5 	.word	0x0800d1b5
 800d19c:	0800d1bd 	.word	0x0800d1bd
 800d1a0:	0800d1c5 	.word	0x0800d1c5
 800d1a4:	0800d1cd 	.word	0x0800d1cd
 800d1a8:	0800d1d5 	.word	0x0800d1d5
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1b2:	e284      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d1b4:	2304      	movs	r3, #4
 800d1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ba:	e280      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d1bc:	2308      	movs	r3, #8
 800d1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1c2:	e27c      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d1c4:	2310      	movs	r3, #16
 800d1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ca:	e278      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d1cc:	2320      	movs	r3, #32
 800d1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1d2:	e274      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d1d4:	2340      	movs	r3, #64	@ 0x40
 800d1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1da:	e270      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d1dc:	2380      	movs	r3, #128	@ 0x80
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1e2:	e26c      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a1b      	ldr	r2, [pc, #108]	@ (800d258 <UART_SetConfig+0x348>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d142      	bne.n	800d274 <UART_SetConfig+0x364>
 800d1ee:	4b16      	ldr	r3, [pc, #88]	@ (800d248 <UART_SetConfig+0x338>)
 800d1f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1f2:	f003 0307 	and.w	r3, r3, #7
 800d1f6:	2b05      	cmp	r3, #5
 800d1f8:	d838      	bhi.n	800d26c <UART_SetConfig+0x35c>
 800d1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d200 <UART_SetConfig+0x2f0>)
 800d1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d200:	0800d219 	.word	0x0800d219
 800d204:	0800d221 	.word	0x0800d221
 800d208:	0800d229 	.word	0x0800d229
 800d20c:	0800d231 	.word	0x0800d231
 800d210:	0800d25d 	.word	0x0800d25d
 800d214:	0800d265 	.word	0x0800d265
 800d218:	2300      	movs	r3, #0
 800d21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d21e:	e24e      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d220:	2304      	movs	r3, #4
 800d222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d226:	e24a      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d228:	2308      	movs	r3, #8
 800d22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d22e:	e246      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d230:	2310      	movs	r3, #16
 800d232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d236:	e242      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d238:	cfff69f3 	.word	0xcfff69f3
 800d23c:	58000c00 	.word	0x58000c00
 800d240:	11fff4ff 	.word	0x11fff4ff
 800d244:	40011000 	.word	0x40011000
 800d248:	58024400 	.word	0x58024400
 800d24c:	40004400 	.word	0x40004400
 800d250:	40004800 	.word	0x40004800
 800d254:	40004c00 	.word	0x40004c00
 800d258:	40005000 	.word	0x40005000
 800d25c:	2320      	movs	r3, #32
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d262:	e22c      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d264:	2340      	movs	r3, #64	@ 0x40
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26a:	e228      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d26c:	2380      	movs	r3, #128	@ 0x80
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d272:	e224      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4ab1      	ldr	r2, [pc, #708]	@ (800d540 <UART_SetConfig+0x630>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d176      	bne.n	800d36c <UART_SetConfig+0x45c>
 800d27e:	4bb1      	ldr	r3, [pc, #708]	@ (800d544 <UART_SetConfig+0x634>)
 800d280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d282:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d286:	2b28      	cmp	r3, #40	@ 0x28
 800d288:	d86c      	bhi.n	800d364 <UART_SetConfig+0x454>
 800d28a:	a201      	add	r2, pc, #4	@ (adr r2, 800d290 <UART_SetConfig+0x380>)
 800d28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d290:	0800d335 	.word	0x0800d335
 800d294:	0800d365 	.word	0x0800d365
 800d298:	0800d365 	.word	0x0800d365
 800d29c:	0800d365 	.word	0x0800d365
 800d2a0:	0800d365 	.word	0x0800d365
 800d2a4:	0800d365 	.word	0x0800d365
 800d2a8:	0800d365 	.word	0x0800d365
 800d2ac:	0800d365 	.word	0x0800d365
 800d2b0:	0800d33d 	.word	0x0800d33d
 800d2b4:	0800d365 	.word	0x0800d365
 800d2b8:	0800d365 	.word	0x0800d365
 800d2bc:	0800d365 	.word	0x0800d365
 800d2c0:	0800d365 	.word	0x0800d365
 800d2c4:	0800d365 	.word	0x0800d365
 800d2c8:	0800d365 	.word	0x0800d365
 800d2cc:	0800d365 	.word	0x0800d365
 800d2d0:	0800d345 	.word	0x0800d345
 800d2d4:	0800d365 	.word	0x0800d365
 800d2d8:	0800d365 	.word	0x0800d365
 800d2dc:	0800d365 	.word	0x0800d365
 800d2e0:	0800d365 	.word	0x0800d365
 800d2e4:	0800d365 	.word	0x0800d365
 800d2e8:	0800d365 	.word	0x0800d365
 800d2ec:	0800d365 	.word	0x0800d365
 800d2f0:	0800d34d 	.word	0x0800d34d
 800d2f4:	0800d365 	.word	0x0800d365
 800d2f8:	0800d365 	.word	0x0800d365
 800d2fc:	0800d365 	.word	0x0800d365
 800d300:	0800d365 	.word	0x0800d365
 800d304:	0800d365 	.word	0x0800d365
 800d308:	0800d365 	.word	0x0800d365
 800d30c:	0800d365 	.word	0x0800d365
 800d310:	0800d355 	.word	0x0800d355
 800d314:	0800d365 	.word	0x0800d365
 800d318:	0800d365 	.word	0x0800d365
 800d31c:	0800d365 	.word	0x0800d365
 800d320:	0800d365 	.word	0x0800d365
 800d324:	0800d365 	.word	0x0800d365
 800d328:	0800d365 	.word	0x0800d365
 800d32c:	0800d365 	.word	0x0800d365
 800d330:	0800d35d 	.word	0x0800d35d
 800d334:	2301      	movs	r3, #1
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d33a:	e1c0      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d33c:	2304      	movs	r3, #4
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d342:	e1bc      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d344:	2308      	movs	r3, #8
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34a:	e1b8      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d34c:	2310      	movs	r3, #16
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d352:	e1b4      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d354:	2320      	movs	r3, #32
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35a:	e1b0      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d35c:	2340      	movs	r3, #64	@ 0x40
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d362:	e1ac      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d364:	2380      	movs	r3, #128	@ 0x80
 800d366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d36a:	e1a8      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a75      	ldr	r2, [pc, #468]	@ (800d548 <UART_SetConfig+0x638>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d130      	bne.n	800d3d8 <UART_SetConfig+0x4c8>
 800d376:	4b73      	ldr	r3, [pc, #460]	@ (800d544 <UART_SetConfig+0x634>)
 800d378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d37a:	f003 0307 	and.w	r3, r3, #7
 800d37e:	2b05      	cmp	r3, #5
 800d380:	d826      	bhi.n	800d3d0 <UART_SetConfig+0x4c0>
 800d382:	a201      	add	r2, pc, #4	@ (adr r2, 800d388 <UART_SetConfig+0x478>)
 800d384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d388:	0800d3a1 	.word	0x0800d3a1
 800d38c:	0800d3a9 	.word	0x0800d3a9
 800d390:	0800d3b1 	.word	0x0800d3b1
 800d394:	0800d3b9 	.word	0x0800d3b9
 800d398:	0800d3c1 	.word	0x0800d3c1
 800d39c:	0800d3c9 	.word	0x0800d3c9
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3a6:	e18a      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d3a8:	2304      	movs	r3, #4
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ae:	e186      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d3b0:	2308      	movs	r3, #8
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b6:	e182      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d3b8:	2310      	movs	r3, #16
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3be:	e17e      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d3c0:	2320      	movs	r3, #32
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3c6:	e17a      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d3c8:	2340      	movs	r3, #64	@ 0x40
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ce:	e176      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d3d0:	2380      	movs	r3, #128	@ 0x80
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3d6:	e172      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a5b      	ldr	r2, [pc, #364]	@ (800d54c <UART_SetConfig+0x63c>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d130      	bne.n	800d444 <UART_SetConfig+0x534>
 800d3e2:	4b58      	ldr	r3, [pc, #352]	@ (800d544 <UART_SetConfig+0x634>)
 800d3e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3e6:	f003 0307 	and.w	r3, r3, #7
 800d3ea:	2b05      	cmp	r3, #5
 800d3ec:	d826      	bhi.n	800d43c <UART_SetConfig+0x52c>
 800d3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800d3f4 <UART_SetConfig+0x4e4>)
 800d3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f4:	0800d40d 	.word	0x0800d40d
 800d3f8:	0800d415 	.word	0x0800d415
 800d3fc:	0800d41d 	.word	0x0800d41d
 800d400:	0800d425 	.word	0x0800d425
 800d404:	0800d42d 	.word	0x0800d42d
 800d408:	0800d435 	.word	0x0800d435
 800d40c:	2300      	movs	r3, #0
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d412:	e154      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d414:	2304      	movs	r3, #4
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d41a:	e150      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d41c:	2308      	movs	r3, #8
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d422:	e14c      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d424:	2310      	movs	r3, #16
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d42a:	e148      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d42c:	2320      	movs	r3, #32
 800d42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d432:	e144      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d434:	2340      	movs	r3, #64	@ 0x40
 800d436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d43a:	e140      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d43c:	2380      	movs	r3, #128	@ 0x80
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d442:	e13c      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a41      	ldr	r2, [pc, #260]	@ (800d550 <UART_SetConfig+0x640>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	f040 8082 	bne.w	800d554 <UART_SetConfig+0x644>
 800d450:	4b3c      	ldr	r3, [pc, #240]	@ (800d544 <UART_SetConfig+0x634>)
 800d452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d454:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d458:	2b28      	cmp	r3, #40	@ 0x28
 800d45a:	d86d      	bhi.n	800d538 <UART_SetConfig+0x628>
 800d45c:	a201      	add	r2, pc, #4	@ (adr r2, 800d464 <UART_SetConfig+0x554>)
 800d45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d462:	bf00      	nop
 800d464:	0800d509 	.word	0x0800d509
 800d468:	0800d539 	.word	0x0800d539
 800d46c:	0800d539 	.word	0x0800d539
 800d470:	0800d539 	.word	0x0800d539
 800d474:	0800d539 	.word	0x0800d539
 800d478:	0800d539 	.word	0x0800d539
 800d47c:	0800d539 	.word	0x0800d539
 800d480:	0800d539 	.word	0x0800d539
 800d484:	0800d511 	.word	0x0800d511
 800d488:	0800d539 	.word	0x0800d539
 800d48c:	0800d539 	.word	0x0800d539
 800d490:	0800d539 	.word	0x0800d539
 800d494:	0800d539 	.word	0x0800d539
 800d498:	0800d539 	.word	0x0800d539
 800d49c:	0800d539 	.word	0x0800d539
 800d4a0:	0800d539 	.word	0x0800d539
 800d4a4:	0800d519 	.word	0x0800d519
 800d4a8:	0800d539 	.word	0x0800d539
 800d4ac:	0800d539 	.word	0x0800d539
 800d4b0:	0800d539 	.word	0x0800d539
 800d4b4:	0800d539 	.word	0x0800d539
 800d4b8:	0800d539 	.word	0x0800d539
 800d4bc:	0800d539 	.word	0x0800d539
 800d4c0:	0800d539 	.word	0x0800d539
 800d4c4:	0800d521 	.word	0x0800d521
 800d4c8:	0800d539 	.word	0x0800d539
 800d4cc:	0800d539 	.word	0x0800d539
 800d4d0:	0800d539 	.word	0x0800d539
 800d4d4:	0800d539 	.word	0x0800d539
 800d4d8:	0800d539 	.word	0x0800d539
 800d4dc:	0800d539 	.word	0x0800d539
 800d4e0:	0800d539 	.word	0x0800d539
 800d4e4:	0800d529 	.word	0x0800d529
 800d4e8:	0800d539 	.word	0x0800d539
 800d4ec:	0800d539 	.word	0x0800d539
 800d4f0:	0800d539 	.word	0x0800d539
 800d4f4:	0800d539 	.word	0x0800d539
 800d4f8:	0800d539 	.word	0x0800d539
 800d4fc:	0800d539 	.word	0x0800d539
 800d500:	0800d539 	.word	0x0800d539
 800d504:	0800d531 	.word	0x0800d531
 800d508:	2301      	movs	r3, #1
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d50e:	e0d6      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d510:	2304      	movs	r3, #4
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d516:	e0d2      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d518:	2308      	movs	r3, #8
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d51e:	e0ce      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d520:	2310      	movs	r3, #16
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d526:	e0ca      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d528:	2320      	movs	r3, #32
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d52e:	e0c6      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d530:	2340      	movs	r3, #64	@ 0x40
 800d532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d536:	e0c2      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d538:	2380      	movs	r3, #128	@ 0x80
 800d53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d53e:	e0be      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d540:	40011400 	.word	0x40011400
 800d544:	58024400 	.word	0x58024400
 800d548:	40007800 	.word	0x40007800
 800d54c:	40007c00 	.word	0x40007c00
 800d550:	40011800 	.word	0x40011800
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4aad      	ldr	r2, [pc, #692]	@ (800d810 <UART_SetConfig+0x900>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d176      	bne.n	800d64c <UART_SetConfig+0x73c>
 800d55e:	4bad      	ldr	r3, [pc, #692]	@ (800d814 <UART_SetConfig+0x904>)
 800d560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d566:	2b28      	cmp	r3, #40	@ 0x28
 800d568:	d86c      	bhi.n	800d644 <UART_SetConfig+0x734>
 800d56a:	a201      	add	r2, pc, #4	@ (adr r2, 800d570 <UART_SetConfig+0x660>)
 800d56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d570:	0800d615 	.word	0x0800d615
 800d574:	0800d645 	.word	0x0800d645
 800d578:	0800d645 	.word	0x0800d645
 800d57c:	0800d645 	.word	0x0800d645
 800d580:	0800d645 	.word	0x0800d645
 800d584:	0800d645 	.word	0x0800d645
 800d588:	0800d645 	.word	0x0800d645
 800d58c:	0800d645 	.word	0x0800d645
 800d590:	0800d61d 	.word	0x0800d61d
 800d594:	0800d645 	.word	0x0800d645
 800d598:	0800d645 	.word	0x0800d645
 800d59c:	0800d645 	.word	0x0800d645
 800d5a0:	0800d645 	.word	0x0800d645
 800d5a4:	0800d645 	.word	0x0800d645
 800d5a8:	0800d645 	.word	0x0800d645
 800d5ac:	0800d645 	.word	0x0800d645
 800d5b0:	0800d625 	.word	0x0800d625
 800d5b4:	0800d645 	.word	0x0800d645
 800d5b8:	0800d645 	.word	0x0800d645
 800d5bc:	0800d645 	.word	0x0800d645
 800d5c0:	0800d645 	.word	0x0800d645
 800d5c4:	0800d645 	.word	0x0800d645
 800d5c8:	0800d645 	.word	0x0800d645
 800d5cc:	0800d645 	.word	0x0800d645
 800d5d0:	0800d62d 	.word	0x0800d62d
 800d5d4:	0800d645 	.word	0x0800d645
 800d5d8:	0800d645 	.word	0x0800d645
 800d5dc:	0800d645 	.word	0x0800d645
 800d5e0:	0800d645 	.word	0x0800d645
 800d5e4:	0800d645 	.word	0x0800d645
 800d5e8:	0800d645 	.word	0x0800d645
 800d5ec:	0800d645 	.word	0x0800d645
 800d5f0:	0800d635 	.word	0x0800d635
 800d5f4:	0800d645 	.word	0x0800d645
 800d5f8:	0800d645 	.word	0x0800d645
 800d5fc:	0800d645 	.word	0x0800d645
 800d600:	0800d645 	.word	0x0800d645
 800d604:	0800d645 	.word	0x0800d645
 800d608:	0800d645 	.word	0x0800d645
 800d60c:	0800d645 	.word	0x0800d645
 800d610:	0800d63d 	.word	0x0800d63d
 800d614:	2301      	movs	r3, #1
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61a:	e050      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d61c:	2304      	movs	r3, #4
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d622:	e04c      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d624:	2308      	movs	r3, #8
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d62a:	e048      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d62c:	2310      	movs	r3, #16
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d632:	e044      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d634:	2320      	movs	r3, #32
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d63a:	e040      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d63c:	2340      	movs	r3, #64	@ 0x40
 800d63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d642:	e03c      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d644:	2380      	movs	r3, #128	@ 0x80
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d64a:	e038      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a71      	ldr	r2, [pc, #452]	@ (800d818 <UART_SetConfig+0x908>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d130      	bne.n	800d6b8 <UART_SetConfig+0x7a8>
 800d656:	4b6f      	ldr	r3, [pc, #444]	@ (800d814 <UART_SetConfig+0x904>)
 800d658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d65a:	f003 0307 	and.w	r3, r3, #7
 800d65e:	2b05      	cmp	r3, #5
 800d660:	d826      	bhi.n	800d6b0 <UART_SetConfig+0x7a0>
 800d662:	a201      	add	r2, pc, #4	@ (adr r2, 800d668 <UART_SetConfig+0x758>)
 800d664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d668:	0800d681 	.word	0x0800d681
 800d66c:	0800d689 	.word	0x0800d689
 800d670:	0800d691 	.word	0x0800d691
 800d674:	0800d699 	.word	0x0800d699
 800d678:	0800d6a1 	.word	0x0800d6a1
 800d67c:	0800d6a9 	.word	0x0800d6a9
 800d680:	2302      	movs	r3, #2
 800d682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d686:	e01a      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d688:	2304      	movs	r3, #4
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68e:	e016      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d690:	2308      	movs	r3, #8
 800d692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d696:	e012      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d698:	2310      	movs	r3, #16
 800d69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d69e:	e00e      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d6a0:	2320      	movs	r3, #32
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6a6:	e00a      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d6a8:	2340      	movs	r3, #64	@ 0x40
 800d6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ae:	e006      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d6b0:	2380      	movs	r3, #128	@ 0x80
 800d6b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6b6:	e002      	b.n	800d6be <UART_SetConfig+0x7ae>
 800d6b8:	2380      	movs	r3, #128	@ 0x80
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a55      	ldr	r2, [pc, #340]	@ (800d818 <UART_SetConfig+0x908>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	f040 80f8 	bne.w	800d8ba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d6ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d6ce:	2b20      	cmp	r3, #32
 800d6d0:	dc46      	bgt.n	800d760 <UART_SetConfig+0x850>
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	db75      	blt.n	800d7c2 <UART_SetConfig+0x8b2>
 800d6d6:	3b02      	subs	r3, #2
 800d6d8:	2b1e      	cmp	r3, #30
 800d6da:	d872      	bhi.n	800d7c2 <UART_SetConfig+0x8b2>
 800d6dc:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e4 <UART_SetConfig+0x7d4>)
 800d6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e2:	bf00      	nop
 800d6e4:	0800d767 	.word	0x0800d767
 800d6e8:	0800d7c3 	.word	0x0800d7c3
 800d6ec:	0800d76f 	.word	0x0800d76f
 800d6f0:	0800d7c3 	.word	0x0800d7c3
 800d6f4:	0800d7c3 	.word	0x0800d7c3
 800d6f8:	0800d7c3 	.word	0x0800d7c3
 800d6fc:	0800d77f 	.word	0x0800d77f
 800d700:	0800d7c3 	.word	0x0800d7c3
 800d704:	0800d7c3 	.word	0x0800d7c3
 800d708:	0800d7c3 	.word	0x0800d7c3
 800d70c:	0800d7c3 	.word	0x0800d7c3
 800d710:	0800d7c3 	.word	0x0800d7c3
 800d714:	0800d7c3 	.word	0x0800d7c3
 800d718:	0800d7c3 	.word	0x0800d7c3
 800d71c:	0800d78f 	.word	0x0800d78f
 800d720:	0800d7c3 	.word	0x0800d7c3
 800d724:	0800d7c3 	.word	0x0800d7c3
 800d728:	0800d7c3 	.word	0x0800d7c3
 800d72c:	0800d7c3 	.word	0x0800d7c3
 800d730:	0800d7c3 	.word	0x0800d7c3
 800d734:	0800d7c3 	.word	0x0800d7c3
 800d738:	0800d7c3 	.word	0x0800d7c3
 800d73c:	0800d7c3 	.word	0x0800d7c3
 800d740:	0800d7c3 	.word	0x0800d7c3
 800d744:	0800d7c3 	.word	0x0800d7c3
 800d748:	0800d7c3 	.word	0x0800d7c3
 800d74c:	0800d7c3 	.word	0x0800d7c3
 800d750:	0800d7c3 	.word	0x0800d7c3
 800d754:	0800d7c3 	.word	0x0800d7c3
 800d758:	0800d7c3 	.word	0x0800d7c3
 800d75c:	0800d7b5 	.word	0x0800d7b5
 800d760:	2b40      	cmp	r3, #64	@ 0x40
 800d762:	d02a      	beq.n	800d7ba <UART_SetConfig+0x8aa>
 800d764:	e02d      	b.n	800d7c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d766:	f7fc f835 	bl	80097d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800d76a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d76c:	e02f      	b.n	800d7ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d76e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d772:	4618      	mov	r0, r3
 800d774:	f7fc f844 	bl	8009800 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d77c:	e027      	b.n	800d7ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d77e:	f107 0318 	add.w	r3, r7, #24
 800d782:	4618      	mov	r0, r3
 800d784:	f7fc f990 	bl	8009aa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d78c:	e01f      	b.n	800d7ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d78e:	4b21      	ldr	r3, [pc, #132]	@ (800d814 <UART_SetConfig+0x904>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f003 0320 	and.w	r3, r3, #32
 800d796:	2b00      	cmp	r3, #0
 800d798:	d009      	beq.n	800d7ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d79a:	4b1e      	ldr	r3, [pc, #120]	@ (800d814 <UART_SetConfig+0x904>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	08db      	lsrs	r3, r3, #3
 800d7a0:	f003 0303 	and.w	r3, r3, #3
 800d7a4:	4a1d      	ldr	r2, [pc, #116]	@ (800d81c <UART_SetConfig+0x90c>)
 800d7a6:	fa22 f303 	lsr.w	r3, r2, r3
 800d7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7ac:	e00f      	b.n	800d7ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d7ae:	4b1b      	ldr	r3, [pc, #108]	@ (800d81c <UART_SetConfig+0x90c>)
 800d7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7b2:	e00c      	b.n	800d7ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7b4:	4b1a      	ldr	r3, [pc, #104]	@ (800d820 <UART_SetConfig+0x910>)
 800d7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7b8:	e009      	b.n	800d7ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7c0:	e005      	b.n	800d7ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d7cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d7ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f000 81ee 	beq.w	800dbb2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7da:	4a12      	ldr	r2, [pc, #72]	@ (800d824 <UART_SetConfig+0x914>)
 800d7dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7e8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	685a      	ldr	r2, [r3, #4]
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	005b      	lsls	r3, r3, #1
 800d7f2:	4413      	add	r3, r2
 800d7f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d305      	bcc.n	800d806 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d802:	429a      	cmp	r2, r3
 800d804:	d910      	bls.n	800d828 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d80c:	e1d1      	b.n	800dbb2 <UART_SetConfig+0xca2>
 800d80e:	bf00      	nop
 800d810:	40011c00 	.word	0x40011c00
 800d814:	58024400 	.word	0x58024400
 800d818:	58000c00 	.word	0x58000c00
 800d81c:	03d09000 	.word	0x03d09000
 800d820:	003d0900 	.word	0x003d0900
 800d824:	08012dd0 	.word	0x08012dd0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d82a:	2200      	movs	r2, #0
 800d82c:	60bb      	str	r3, [r7, #8]
 800d82e:	60fa      	str	r2, [r7, #12]
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d834:	4ac0      	ldr	r2, [pc, #768]	@ (800db38 <UART_SetConfig+0xc28>)
 800d836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	2200      	movs	r2, #0
 800d83e:	603b      	str	r3, [r7, #0]
 800d840:	607a      	str	r2, [r7, #4]
 800d842:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d84a:	f7f2 fda1 	bl	8000390 <__aeabi_uldivmod>
 800d84e:	4602      	mov	r2, r0
 800d850:	460b      	mov	r3, r1
 800d852:	4610      	mov	r0, r2
 800d854:	4619      	mov	r1, r3
 800d856:	f04f 0200 	mov.w	r2, #0
 800d85a:	f04f 0300 	mov.w	r3, #0
 800d85e:	020b      	lsls	r3, r1, #8
 800d860:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d864:	0202      	lsls	r2, r0, #8
 800d866:	6979      	ldr	r1, [r7, #20]
 800d868:	6849      	ldr	r1, [r1, #4]
 800d86a:	0849      	lsrs	r1, r1, #1
 800d86c:	2000      	movs	r0, #0
 800d86e:	460c      	mov	r4, r1
 800d870:	4605      	mov	r5, r0
 800d872:	eb12 0804 	adds.w	r8, r2, r4
 800d876:	eb43 0905 	adc.w	r9, r3, r5
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	469a      	mov	sl, r3
 800d882:	4693      	mov	fp, r2
 800d884:	4652      	mov	r2, sl
 800d886:	465b      	mov	r3, fp
 800d888:	4640      	mov	r0, r8
 800d88a:	4649      	mov	r1, r9
 800d88c:	f7f2 fd80 	bl	8000390 <__aeabi_uldivmod>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	4613      	mov	r3, r2
 800d896:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d89a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d89e:	d308      	bcc.n	800d8b2 <UART_SetConfig+0x9a2>
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d8a6:	d204      	bcs.n	800d8b2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d8ae:	60da      	str	r2, [r3, #12]
 800d8b0:	e17f      	b.n	800dbb2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d8b8:	e17b      	b.n	800dbb2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	69db      	ldr	r3, [r3, #28]
 800d8be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d8c2:	f040 80bd 	bne.w	800da40 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d8c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d8ca:	2b20      	cmp	r3, #32
 800d8cc:	dc48      	bgt.n	800d960 <UART_SetConfig+0xa50>
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	db7b      	blt.n	800d9ca <UART_SetConfig+0xaba>
 800d8d2:	2b20      	cmp	r3, #32
 800d8d4:	d879      	bhi.n	800d9ca <UART_SetConfig+0xaba>
 800d8d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d8dc <UART_SetConfig+0x9cc>)
 800d8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8dc:	0800d967 	.word	0x0800d967
 800d8e0:	0800d96f 	.word	0x0800d96f
 800d8e4:	0800d9cb 	.word	0x0800d9cb
 800d8e8:	0800d9cb 	.word	0x0800d9cb
 800d8ec:	0800d977 	.word	0x0800d977
 800d8f0:	0800d9cb 	.word	0x0800d9cb
 800d8f4:	0800d9cb 	.word	0x0800d9cb
 800d8f8:	0800d9cb 	.word	0x0800d9cb
 800d8fc:	0800d987 	.word	0x0800d987
 800d900:	0800d9cb 	.word	0x0800d9cb
 800d904:	0800d9cb 	.word	0x0800d9cb
 800d908:	0800d9cb 	.word	0x0800d9cb
 800d90c:	0800d9cb 	.word	0x0800d9cb
 800d910:	0800d9cb 	.word	0x0800d9cb
 800d914:	0800d9cb 	.word	0x0800d9cb
 800d918:	0800d9cb 	.word	0x0800d9cb
 800d91c:	0800d997 	.word	0x0800d997
 800d920:	0800d9cb 	.word	0x0800d9cb
 800d924:	0800d9cb 	.word	0x0800d9cb
 800d928:	0800d9cb 	.word	0x0800d9cb
 800d92c:	0800d9cb 	.word	0x0800d9cb
 800d930:	0800d9cb 	.word	0x0800d9cb
 800d934:	0800d9cb 	.word	0x0800d9cb
 800d938:	0800d9cb 	.word	0x0800d9cb
 800d93c:	0800d9cb 	.word	0x0800d9cb
 800d940:	0800d9cb 	.word	0x0800d9cb
 800d944:	0800d9cb 	.word	0x0800d9cb
 800d948:	0800d9cb 	.word	0x0800d9cb
 800d94c:	0800d9cb 	.word	0x0800d9cb
 800d950:	0800d9cb 	.word	0x0800d9cb
 800d954:	0800d9cb 	.word	0x0800d9cb
 800d958:	0800d9cb 	.word	0x0800d9cb
 800d95c:	0800d9bd 	.word	0x0800d9bd
 800d960:	2b40      	cmp	r3, #64	@ 0x40
 800d962:	d02e      	beq.n	800d9c2 <UART_SetConfig+0xab2>
 800d964:	e031      	b.n	800d9ca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d966:	f7fa fd4b 	bl	8008400 <HAL_RCC_GetPCLK1Freq>
 800d96a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d96c:	e033      	b.n	800d9d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d96e:	f7fa fd5d 	bl	800842c <HAL_RCC_GetPCLK2Freq>
 800d972:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d974:	e02f      	b.n	800d9d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fb ff40 	bl	8009800 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d984:	e027      	b.n	800d9d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d986:	f107 0318 	add.w	r3, r7, #24
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fc f88c 	bl	8009aa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d994:	e01f      	b.n	800d9d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d996:	4b69      	ldr	r3, [pc, #420]	@ (800db3c <UART_SetConfig+0xc2c>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f003 0320 	and.w	r3, r3, #32
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d009      	beq.n	800d9b6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d9a2:	4b66      	ldr	r3, [pc, #408]	@ (800db3c <UART_SetConfig+0xc2c>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	08db      	lsrs	r3, r3, #3
 800d9a8:	f003 0303 	and.w	r3, r3, #3
 800d9ac:	4a64      	ldr	r2, [pc, #400]	@ (800db40 <UART_SetConfig+0xc30>)
 800d9ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d9b4:	e00f      	b.n	800d9d6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d9b6:	4b62      	ldr	r3, [pc, #392]	@ (800db40 <UART_SetConfig+0xc30>)
 800d9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9ba:	e00c      	b.n	800d9d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d9bc:	4b61      	ldr	r3, [pc, #388]	@ (800db44 <UART_SetConfig+0xc34>)
 800d9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9c0:	e009      	b.n	800d9d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9c8:	e005      	b.n	800d9d6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d9d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 80ea 	beq.w	800dbb2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9e2:	4a55      	ldr	r2, [pc, #340]	@ (800db38 <UART_SetConfig+0xc28>)
 800d9e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9f0:	005a      	lsls	r2, r3, #1
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	085b      	lsrs	r3, r3, #1
 800d9f8:	441a      	add	r2, r3
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800da02:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da06:	2b0f      	cmp	r3, #15
 800da08:	d916      	bls.n	800da38 <UART_SetConfig+0xb28>
 800da0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da10:	d212      	bcs.n	800da38 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da14:	b29b      	uxth	r3, r3
 800da16:	f023 030f 	bic.w	r3, r3, #15
 800da1a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da1e:	085b      	lsrs	r3, r3, #1
 800da20:	b29b      	uxth	r3, r3
 800da22:	f003 0307 	and.w	r3, r3, #7
 800da26:	b29a      	uxth	r2, r3
 800da28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800da2a:	4313      	orrs	r3, r2
 800da2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800da34:	60da      	str	r2, [r3, #12]
 800da36:	e0bc      	b.n	800dbb2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800da38:	2301      	movs	r3, #1
 800da3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800da3e:	e0b8      	b.n	800dbb2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da40:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800da44:	2b20      	cmp	r3, #32
 800da46:	dc4b      	bgt.n	800dae0 <UART_SetConfig+0xbd0>
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f2c0 8087 	blt.w	800db5c <UART_SetConfig+0xc4c>
 800da4e:	2b20      	cmp	r3, #32
 800da50:	f200 8084 	bhi.w	800db5c <UART_SetConfig+0xc4c>
 800da54:	a201      	add	r2, pc, #4	@ (adr r2, 800da5c <UART_SetConfig+0xb4c>)
 800da56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5a:	bf00      	nop
 800da5c:	0800dae7 	.word	0x0800dae7
 800da60:	0800daef 	.word	0x0800daef
 800da64:	0800db5d 	.word	0x0800db5d
 800da68:	0800db5d 	.word	0x0800db5d
 800da6c:	0800daf7 	.word	0x0800daf7
 800da70:	0800db5d 	.word	0x0800db5d
 800da74:	0800db5d 	.word	0x0800db5d
 800da78:	0800db5d 	.word	0x0800db5d
 800da7c:	0800db07 	.word	0x0800db07
 800da80:	0800db5d 	.word	0x0800db5d
 800da84:	0800db5d 	.word	0x0800db5d
 800da88:	0800db5d 	.word	0x0800db5d
 800da8c:	0800db5d 	.word	0x0800db5d
 800da90:	0800db5d 	.word	0x0800db5d
 800da94:	0800db5d 	.word	0x0800db5d
 800da98:	0800db5d 	.word	0x0800db5d
 800da9c:	0800db17 	.word	0x0800db17
 800daa0:	0800db5d 	.word	0x0800db5d
 800daa4:	0800db5d 	.word	0x0800db5d
 800daa8:	0800db5d 	.word	0x0800db5d
 800daac:	0800db5d 	.word	0x0800db5d
 800dab0:	0800db5d 	.word	0x0800db5d
 800dab4:	0800db5d 	.word	0x0800db5d
 800dab8:	0800db5d 	.word	0x0800db5d
 800dabc:	0800db5d 	.word	0x0800db5d
 800dac0:	0800db5d 	.word	0x0800db5d
 800dac4:	0800db5d 	.word	0x0800db5d
 800dac8:	0800db5d 	.word	0x0800db5d
 800dacc:	0800db5d 	.word	0x0800db5d
 800dad0:	0800db5d 	.word	0x0800db5d
 800dad4:	0800db5d 	.word	0x0800db5d
 800dad8:	0800db5d 	.word	0x0800db5d
 800dadc:	0800db4f 	.word	0x0800db4f
 800dae0:	2b40      	cmp	r3, #64	@ 0x40
 800dae2:	d037      	beq.n	800db54 <UART_SetConfig+0xc44>
 800dae4:	e03a      	b.n	800db5c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dae6:	f7fa fc8b 	bl	8008400 <HAL_RCC_GetPCLK1Freq>
 800daea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800daec:	e03c      	b.n	800db68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800daee:	f7fa fc9d 	bl	800842c <HAL_RCC_GetPCLK2Freq>
 800daf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800daf4:	e038      	b.n	800db68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800daf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fb fe80 	bl	8009800 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db04:	e030      	b.n	800db68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db06:	f107 0318 	add.w	r3, r7, #24
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fb ffcc 	bl	8009aa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db14:	e028      	b.n	800db68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db16:	4b09      	ldr	r3, [pc, #36]	@ (800db3c <UART_SetConfig+0xc2c>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f003 0320 	and.w	r3, r3, #32
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d012      	beq.n	800db48 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db22:	4b06      	ldr	r3, [pc, #24]	@ (800db3c <UART_SetConfig+0xc2c>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	08db      	lsrs	r3, r3, #3
 800db28:	f003 0303 	and.w	r3, r3, #3
 800db2c:	4a04      	ldr	r2, [pc, #16]	@ (800db40 <UART_SetConfig+0xc30>)
 800db2e:	fa22 f303 	lsr.w	r3, r2, r3
 800db32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db34:	e018      	b.n	800db68 <UART_SetConfig+0xc58>
 800db36:	bf00      	nop
 800db38:	08012dd0 	.word	0x08012dd0
 800db3c:	58024400 	.word	0x58024400
 800db40:	03d09000 	.word	0x03d09000
 800db44:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800db48:	4b24      	ldr	r3, [pc, #144]	@ (800dbdc <UART_SetConfig+0xccc>)
 800db4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db4c:	e00c      	b.n	800db68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db4e:	4b24      	ldr	r3, [pc, #144]	@ (800dbe0 <UART_SetConfig+0xcd0>)
 800db50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db52:	e009      	b.n	800db68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db5a:	e005      	b.n	800db68 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800db5c:	2300      	movs	r3, #0
 800db5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800db60:	2301      	movs	r3, #1
 800db62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800db66:	bf00      	nop
    }

    if (pclk != 0U)
 800db68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d021      	beq.n	800dbb2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db72:	4a1c      	ldr	r2, [pc, #112]	@ (800dbe4 <UART_SetConfig+0xcd4>)
 800db74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db78:	461a      	mov	r2, r3
 800db7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db7c:	fbb3 f2f2 	udiv	r2, r3, r2
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	085b      	lsrs	r3, r3, #1
 800db86:	441a      	add	r2, r3
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db90:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db94:	2b0f      	cmp	r3, #15
 800db96:	d909      	bls.n	800dbac <UART_SetConfig+0xc9c>
 800db98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db9e:	d205      	bcs.n	800dbac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba2:	b29a      	uxth	r2, r3
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	60da      	str	r2, [r3, #12]
 800dbaa:	e002      	b.n	800dbb2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dbac:	2301      	movs	r3, #1
 800dbae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dbce:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3748      	adds	r7, #72	@ 0x48
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbdc:	03d09000 	.word	0x03d09000
 800dbe0:	003d0900 	.word	0x003d0900
 800dbe4:	08012dd0 	.word	0x08012dd0

0800dbe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbf4:	f003 0308 	and.w	r3, r3, #8
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00a      	beq.n	800dc12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	430a      	orrs	r2, r1
 800dc10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc16:	f003 0301 	and.w	r3, r3, #1
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00a      	beq.n	800dc34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	430a      	orrs	r2, r1
 800dc32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc38:	f003 0302 	and.w	r3, r3, #2
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00a      	beq.n	800dc56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	430a      	orrs	r2, r1
 800dc54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc5a:	f003 0304 	and.w	r3, r3, #4
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00a      	beq.n	800dc78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	430a      	orrs	r2, r1
 800dc76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc7c:	f003 0310 	and.w	r3, r3, #16
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00a      	beq.n	800dc9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	430a      	orrs	r2, r1
 800dc98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc9e:	f003 0320 	and.w	r3, r3, #32
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00a      	beq.n	800dcbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	430a      	orrs	r2, r1
 800dcba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d01a      	beq.n	800dcfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	430a      	orrs	r2, r1
 800dcdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dce6:	d10a      	bne.n	800dcfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	430a      	orrs	r2, r1
 800dcfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00a      	beq.n	800dd20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	430a      	orrs	r2, r1
 800dd1e:	605a      	str	r2, [r3, #4]
  }
}
 800dd20:	bf00      	nop
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b098      	sub	sp, #96	@ 0x60
 800dd30:	af02      	add	r7, sp, #8
 800dd32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd3c:	f7f5 fc9c 	bl	8003678 <HAL_GetTick>
 800dd40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 0308 	and.w	r3, r3, #8
 800dd4c:	2b08      	cmp	r3, #8
 800dd4e:	d12f      	bne.n	800ddb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f88e 	bl	800de80 <UART_WaitOnFlagUntilTimeout>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d022      	beq.n	800ddb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd72:	e853 3f00 	ldrex	r3, [r3]
 800dd76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	461a      	mov	r2, r3
 800dd86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd88:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd90:	e841 2300 	strex	r3, r2, [r1]
 800dd94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d1e6      	bne.n	800dd6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2220      	movs	r2, #32
 800dda0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddac:	2303      	movs	r3, #3
 800ddae:	e063      	b.n	800de78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f003 0304 	and.w	r3, r3, #4
 800ddba:	2b04      	cmp	r3, #4
 800ddbc:	d149      	bne.n	800de52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f857 	bl	800de80 <UART_WaitOnFlagUntilTimeout>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d03c      	beq.n	800de52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde0:	e853 3f00 	ldrex	r3, [r3]
 800dde4:	623b      	str	r3, [r7, #32]
   return(result);
 800dde6:	6a3b      	ldr	r3, [r7, #32]
 800dde8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ddec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddfe:	e841 2300 	strex	r3, r2, [r1]
 800de02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800de04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1e6      	bne.n	800ddd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	3308      	adds	r3, #8
 800de10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	e853 3f00 	ldrex	r3, [r3]
 800de18:	60fb      	str	r3, [r7, #12]
   return(result);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f023 0301 	bic.w	r3, r3, #1
 800de20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	3308      	adds	r3, #8
 800de28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de2a:	61fa      	str	r2, [r7, #28]
 800de2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de2e:	69b9      	ldr	r1, [r7, #24]
 800de30:	69fa      	ldr	r2, [r7, #28]
 800de32:	e841 2300 	strex	r3, r2, [r1]
 800de36:	617b      	str	r3, [r7, #20]
   return(result);
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d1e5      	bne.n	800de0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2220      	movs	r2, #32
 800de42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de4e:	2303      	movs	r3, #3
 800de50:	e012      	b.n	800de78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2220      	movs	r2, #32
 800de56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2220      	movs	r2, #32
 800de5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3758      	adds	r7, #88	@ 0x58
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	603b      	str	r3, [r7, #0]
 800de8c:	4613      	mov	r3, r2
 800de8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de90:	e04f      	b.n	800df32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de98:	d04b      	beq.n	800df32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de9a:	f7f5 fbed 	bl	8003678 <HAL_GetTick>
 800de9e:	4602      	mov	r2, r0
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	1ad3      	subs	r3, r2, r3
 800dea4:	69ba      	ldr	r2, [r7, #24]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d302      	bcc.n	800deb0 <UART_WaitOnFlagUntilTimeout+0x30>
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d101      	bne.n	800deb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800deb0:	2303      	movs	r3, #3
 800deb2:	e04e      	b.n	800df52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f003 0304 	and.w	r3, r3, #4
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d037      	beq.n	800df32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2b80      	cmp	r3, #128	@ 0x80
 800dec6:	d034      	beq.n	800df32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	2b40      	cmp	r3, #64	@ 0x40
 800decc:	d031      	beq.n	800df32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	69db      	ldr	r3, [r3, #28]
 800ded4:	f003 0308 	and.w	r3, r3, #8
 800ded8:	2b08      	cmp	r3, #8
 800deda:	d110      	bne.n	800defe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2208      	movs	r2, #8
 800dee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f000 f921 	bl	800e12c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2208      	movs	r2, #8
 800deee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2200      	movs	r2, #0
 800def6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800defa:	2301      	movs	r3, #1
 800defc:	e029      	b.n	800df52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	69db      	ldr	r3, [r3, #28]
 800df04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800df08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800df0c:	d111      	bne.n	800df32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800df16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f000 f907 	bl	800e12c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2220      	movs	r2, #32
 800df22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2200      	movs	r2, #0
 800df2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800df2e:	2303      	movs	r3, #3
 800df30:	e00f      	b.n	800df52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	69da      	ldr	r2, [r3, #28]
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	4013      	ands	r3, r2
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	429a      	cmp	r2, r3
 800df40:	bf0c      	ite	eq
 800df42:	2301      	moveq	r3, #1
 800df44:	2300      	movne	r3, #0
 800df46:	b2db      	uxtb	r3, r3
 800df48:	461a      	mov	r2, r3
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d0a0      	beq.n	800de92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df50:	2300      	movs	r3, #0
}
 800df52:	4618      	mov	r0, r3
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
	...

0800df5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b096      	sub	sp, #88	@ 0x58
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	4613      	mov	r3, r2
 800df68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	88fa      	ldrh	r2, [r7, #6]
 800df74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2222      	movs	r2, #34	@ 0x22
 800df84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d02d      	beq.n	800dfee <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df98:	4a40      	ldr	r2, [pc, #256]	@ (800e09c <UART_Start_Receive_DMA+0x140>)
 800df9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfa2:	4a3f      	ldr	r2, [pc, #252]	@ (800e0a0 <UART_Start_Receive_DMA+0x144>)
 800dfa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfac:	4a3d      	ldr	r2, [pc, #244]	@ (800e0a4 <UART_Start_Receive_DMA+0x148>)
 800dfae:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	3324      	adds	r3, #36	@ 0x24
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfcc:	461a      	mov	r2, r3
 800dfce:	88fb      	ldrh	r3, [r7, #6]
 800dfd0:	f7f6 f898 	bl	8004104 <HAL_DMA_Start_IT>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d009      	beq.n	800dfee <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2210      	movs	r2, #16
 800dfde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2220      	movs	r2, #32
 800dfe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800dfea:	2301      	movs	r3, #1
 800dfec:	e051      	b.n	800e092 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d018      	beq.n	800e028 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dffe:	e853 3f00 	ldrex	r3, [r3]
 800e002:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e00a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	461a      	mov	r2, r3
 800e012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e014:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e016:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e018:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e01a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e01c:	e841 2300 	strex	r3, r2, [r1]
 800e020:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1e6      	bne.n	800dff6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	3308      	adds	r3, #8
 800e02e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e032:	e853 3f00 	ldrex	r3, [r3]
 800e036:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e03a:	f043 0301 	orr.w	r3, r3, #1
 800e03e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	3308      	adds	r3, #8
 800e046:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e048:	637a      	str	r2, [r7, #52]	@ 0x34
 800e04a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e04e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e050:	e841 2300 	strex	r3, r2, [r1]
 800e054:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1e5      	bne.n	800e028 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3308      	adds	r3, #8
 800e062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	e853 3f00 	ldrex	r3, [r3]
 800e06a:	613b      	str	r3, [r7, #16]
   return(result);
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	3308      	adds	r3, #8
 800e07a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e07c:	623a      	str	r2, [r7, #32]
 800e07e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e080:	69f9      	ldr	r1, [r7, #28]
 800e082:	6a3a      	ldr	r2, [r7, #32]
 800e084:	e841 2300 	strex	r3, r2, [r1]
 800e088:	61bb      	str	r3, [r7, #24]
   return(result);
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d1e5      	bne.n	800e05c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e090:	2300      	movs	r3, #0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3758      	adds	r7, #88	@ 0x58
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	0800e1f9 	.word	0x0800e1f9
 800e0a0:	0800e321 	.word	0x0800e321
 800e0a4:	0800e35f 	.word	0x0800e35f

0800e0a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b08f      	sub	sp, #60	@ 0x3c
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	e853 3f00 	ldrex	r3, [r3]
 800e0bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e0c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0d0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e0d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0d6:	e841 2300 	strex	r3, r2, [r1]
 800e0da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d1e6      	bne.n	800e0b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	3308      	adds	r3, #8
 800e0e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	e853 3f00 	ldrex	r3, [r3]
 800e0f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e0f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	3308      	adds	r3, #8
 800e100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e102:	61ba      	str	r2, [r7, #24]
 800e104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e106:	6979      	ldr	r1, [r7, #20]
 800e108:	69ba      	ldr	r2, [r7, #24]
 800e10a:	e841 2300 	strex	r3, r2, [r1]
 800e10e:	613b      	str	r3, [r7, #16]
   return(result);
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1e5      	bne.n	800e0e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2220      	movs	r2, #32
 800e11a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e11e:	bf00      	nop
 800e120:	373c      	adds	r7, #60	@ 0x3c
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr
	...

0800e12c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b095      	sub	sp, #84	@ 0x54
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e13c:	e853 3f00 	ldrex	r3, [r3]
 800e140:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	461a      	mov	r2, r3
 800e150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e152:	643b      	str	r3, [r7, #64]	@ 0x40
 800e154:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e156:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e158:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e15a:	e841 2300 	strex	r3, r2, [r1]
 800e15e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1e6      	bne.n	800e134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3308      	adds	r3, #8
 800e16c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e16e:	6a3b      	ldr	r3, [r7, #32]
 800e170:	e853 3f00 	ldrex	r3, [r3]
 800e174:	61fb      	str	r3, [r7, #28]
   return(result);
 800e176:	69fa      	ldr	r2, [r7, #28]
 800e178:	4b1e      	ldr	r3, [pc, #120]	@ (800e1f4 <UART_EndRxTransfer+0xc8>)
 800e17a:	4013      	ands	r3, r2
 800e17c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	3308      	adds	r3, #8
 800e184:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e188:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e18a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e18c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e18e:	e841 2300 	strex	r3, r2, [r1]
 800e192:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e196:	2b00      	cmp	r3, #0
 800e198:	d1e5      	bne.n	800e166 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d118      	bne.n	800e1d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	e853 3f00 	ldrex	r3, [r3]
 800e1ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	f023 0310 	bic.w	r3, r3, #16
 800e1b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	461a      	mov	r2, r3
 800e1be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1c0:	61bb      	str	r3, [r7, #24]
 800e1c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c4:	6979      	ldr	r1, [r7, #20]
 800e1c6:	69ba      	ldr	r2, [r7, #24]
 800e1c8:	e841 2300 	strex	r3, r2, [r1]
 800e1cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d1e6      	bne.n	800e1a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2220      	movs	r2, #32
 800e1d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e1e8:	bf00      	nop
 800e1ea:	3754      	adds	r7, #84	@ 0x54
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f2:	4770      	bx	lr
 800e1f4:	effffffe 	.word	0xeffffffe

0800e1f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b09c      	sub	sp, #112	@ 0x70
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e204:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	69db      	ldr	r3, [r3, #28]
 800e20a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e20e:	d071      	beq.n	800e2f4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e212:	2200      	movs	r2, #0
 800e214:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e220:	e853 3f00 	ldrex	r3, [r3]
 800e224:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e22c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e22e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	461a      	mov	r2, r3
 800e234:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e236:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e238:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e23c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e23e:	e841 2300 	strex	r3, r2, [r1]
 800e242:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1e6      	bne.n	800e218 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e24a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	3308      	adds	r3, #8
 800e250:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e254:	e853 3f00 	ldrex	r3, [r3]
 800e258:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e25c:	f023 0301 	bic.w	r3, r3, #1
 800e260:	667b      	str	r3, [r7, #100]	@ 0x64
 800e262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	3308      	adds	r3, #8
 800e268:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e26a:	647a      	str	r2, [r7, #68]	@ 0x44
 800e26c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e272:	e841 2300 	strex	r3, r2, [r1]
 800e276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1e5      	bne.n	800e24a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e27e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	3308      	adds	r3, #8
 800e284:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e288:	e853 3f00 	ldrex	r3, [r3]
 800e28c:	623b      	str	r3, [r7, #32]
   return(result);
 800e28e:	6a3b      	ldr	r3, [r7, #32]
 800e290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e294:	663b      	str	r3, [r7, #96]	@ 0x60
 800e296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	3308      	adds	r3, #8
 800e29c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e29e:	633a      	str	r2, [r7, #48]	@ 0x30
 800e2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e2a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2a6:	e841 2300 	strex	r3, r2, [r1]
 800e2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d1e5      	bne.n	800e27e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e2b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2b4:	2220      	movs	r2, #32
 800e2b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d118      	bne.n	800e2f4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	e853 3f00 	ldrex	r3, [r3]
 800e2ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f023 0310 	bic.w	r3, r3, #16
 800e2d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e2d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	461a      	mov	r2, r3
 800e2de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e2e0:	61fb      	str	r3, [r7, #28]
 800e2e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e4:	69b9      	ldr	r1, [r7, #24]
 800e2e6:	69fa      	ldr	r2, [r7, #28]
 800e2e8:	e841 2300 	strex	r3, r2, [r1]
 800e2ec:	617b      	str	r3, [r7, #20]
   return(result);
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1e6      	bne.n	800e2c2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d107      	bne.n	800e312 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e308:	4619      	mov	r1, r3
 800e30a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e30c:	f7fe fdf4 	bl	800cef8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e310:	e002      	b.n	800e318 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e312:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e314:	f7f4 f812 	bl	800233c <HAL_UART_RxCpltCallback>
}
 800e318:	bf00      	nop
 800e31a:	3770      	adds	r7, #112	@ 0x70
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e32c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2201      	movs	r2, #1
 800e332:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d109      	bne.n	800e350 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e342:	085b      	lsrs	r3, r3, #1
 800e344:	b29b      	uxth	r3, r3
 800e346:	4619      	mov	r1, r3
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f7fe fdd5 	bl	800cef8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e34e:	e002      	b.n	800e356 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f7fe fdbd 	bl	800ced0 <HAL_UART_RxHalfCpltCallback>
}
 800e356:	bf00      	nop
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b086      	sub	sp, #24
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e36a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e372:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e37a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e386:	2b80      	cmp	r3, #128	@ 0x80
 800e388:	d109      	bne.n	800e39e <UART_DMAError+0x40>
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	2b21      	cmp	r3, #33	@ 0x21
 800e38e:	d106      	bne.n	800e39e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	2200      	movs	r2, #0
 800e394:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e398:	6978      	ldr	r0, [r7, #20]
 800e39a:	f7ff fe85 	bl	800e0a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3a8:	2b40      	cmp	r3, #64	@ 0x40
 800e3aa:	d109      	bne.n	800e3c0 <UART_DMAError+0x62>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2b22      	cmp	r3, #34	@ 0x22
 800e3b0:	d106      	bne.n	800e3c0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e3ba:	6978      	ldr	r0, [r7, #20]
 800e3bc:	f7ff feb6 	bl	800e12c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3c6:	f043 0210 	orr.w	r2, r3, #16
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e3d0:	6978      	ldr	r0, [r7, #20]
 800e3d2:	f7fe fd87 	bl	800cee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3d6:	bf00      	nop
 800e3d8:	3718      	adds	r7, #24
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b084      	sub	sp, #16
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f7fe fd71 	bl	800cee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e402:	bf00      	nop
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e40a:	b580      	push	{r7, lr}
 800e40c:	b088      	sub	sp, #32
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	e853 3f00 	ldrex	r3, [r3]
 800e41e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e426:	61fb      	str	r3, [r7, #28]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	461a      	mov	r2, r3
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	61bb      	str	r3, [r7, #24]
 800e432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e434:	6979      	ldr	r1, [r7, #20]
 800e436:	69ba      	ldr	r2, [r7, #24]
 800e438:	e841 2300 	strex	r3, r2, [r1]
 800e43c:	613b      	str	r3, [r7, #16]
   return(result);
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d1e6      	bne.n	800e412 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2220      	movs	r2, #32
 800e448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2200      	movs	r2, #0
 800e450:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7fe fd32 	bl	800cebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e458:	bf00      	nop
 800e45a:	3720      	adds	r7, #32
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e468:	bf00      	nop
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e490:	bf00      	nop
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b085      	sub	sp, #20
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d101      	bne.n	800e4b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800e4ae:	2302      	movs	r3, #2
 800e4b0:	e027      	b.n	800e502 <HAL_UARTEx_DisableFifoMode+0x66>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2224      	movs	r2, #36	@ 0x24
 800e4be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f022 0201 	bic.w	r2, r2, #1
 800e4d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e4e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2220      	movs	r2, #32
 800e4f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	3714      	adds	r7, #20
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr

0800e50e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b084      	sub	sp, #16
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
 800e516:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d101      	bne.n	800e526 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e522:	2302      	movs	r3, #2
 800e524:	e02d      	b.n	800e582 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2201      	movs	r2, #1
 800e52a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2224      	movs	r2, #36	@ 0x24
 800e532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f022 0201 	bic.w	r2, r2, #1
 800e54c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	683a      	ldr	r2, [r7, #0]
 800e55e:	430a      	orrs	r2, r1
 800e560:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f000 f850 	bl	800e608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68fa      	ldr	r2, [r7, #12]
 800e56e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2220      	movs	r2, #32
 800e574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e580:	2300      	movs	r3, #0
}
 800e582:	4618      	mov	r0, r3
 800e584:	3710      	adds	r7, #16
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b084      	sub	sp, #16
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
 800e592:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d101      	bne.n	800e5a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e59e:	2302      	movs	r3, #2
 800e5a0:	e02d      	b.n	800e5fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2224      	movs	r2, #36	@ 0x24
 800e5ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f022 0201 	bic.w	r2, r2, #1
 800e5c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	689b      	ldr	r3, [r3, #8]
 800e5d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	683a      	ldr	r2, [r7, #0]
 800e5da:	430a      	orrs	r2, r1
 800e5dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 f812 	bl	800e608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2220      	movs	r2, #32
 800e5f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e5fc:	2300      	movs	r3, #0
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
	...

0800e608 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e614:	2b00      	cmp	r3, #0
 800e616:	d108      	bne.n	800e62a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2201      	movs	r2, #1
 800e61c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2201      	movs	r2, #1
 800e624:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e628:	e031      	b.n	800e68e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e62a:	2310      	movs	r3, #16
 800e62c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e62e:	2310      	movs	r3, #16
 800e630:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	0e5b      	lsrs	r3, r3, #25
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	f003 0307 	and.w	r3, r3, #7
 800e640:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	0f5b      	lsrs	r3, r3, #29
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	f003 0307 	and.w	r3, r3, #7
 800e650:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e652:	7bbb      	ldrb	r3, [r7, #14]
 800e654:	7b3a      	ldrb	r2, [r7, #12]
 800e656:	4911      	ldr	r1, [pc, #68]	@ (800e69c <UARTEx_SetNbDataToProcess+0x94>)
 800e658:	5c8a      	ldrb	r2, [r1, r2]
 800e65a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e65e:	7b3a      	ldrb	r2, [r7, #12]
 800e660:	490f      	ldr	r1, [pc, #60]	@ (800e6a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e662:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e664:	fb93 f3f2 	sdiv	r3, r3, r2
 800e668:	b29a      	uxth	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e670:	7bfb      	ldrb	r3, [r7, #15]
 800e672:	7b7a      	ldrb	r2, [r7, #13]
 800e674:	4909      	ldr	r1, [pc, #36]	@ (800e69c <UARTEx_SetNbDataToProcess+0x94>)
 800e676:	5c8a      	ldrb	r2, [r1, r2]
 800e678:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e67c:	7b7a      	ldrb	r2, [r7, #13]
 800e67e:	4908      	ldr	r1, [pc, #32]	@ (800e6a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e680:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e682:	fb93 f3f2 	sdiv	r3, r3, r2
 800e686:	b29a      	uxth	r2, r3
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e68e:	bf00      	nop
 800e690:	3714      	adds	r7, #20
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	08012de8 	.word	0x08012de8
 800e6a0:	08012df0 	.word	0x08012df0

0800e6a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e6a8:	4904      	ldr	r1, [pc, #16]	@ (800e6bc <MX_FATFS_Init+0x18>)
 800e6aa:	4805      	ldr	r0, [pc, #20]	@ (800e6c0 <MX_FATFS_Init+0x1c>)
 800e6ac:	f004 f8c6 	bl	801283c <FATFS_LinkDriver>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	4b03      	ldr	r3, [pc, #12]	@ (800e6c4 <MX_FATFS_Init+0x20>)
 800e6b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e6b8:	bf00      	nop
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	240029cc 	.word	0x240029cc
 800e6c0:	240000a8 	.word	0x240000a8
 800e6c4:	240029c8 	.word	0x240029c8

0800e6c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e6cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d6:	4770      	bx	lr

0800e6d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	4603      	mov	r3, r0
 800e6e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800e6e2:	79fb      	ldrb	r3, [r7, #7]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f000 f9fd 	bl	800eae4 <SD_disk_initialize>
 800e6ea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3708      	adds	r7, #8
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800e6fe:	79fb      	ldrb	r3, [r7, #7]
 800e700:	4618      	mov	r0, r3
 800e702:	f000 fad5 	bl	800ecb0 <SD_disk_status>
 800e706:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b084      	sub	sp, #16
 800e714:	af00      	add	r7, sp, #0
 800e716:	60b9      	str	r1, [r7, #8]
 800e718:	607a      	str	r2, [r7, #4]
 800e71a:	603b      	str	r3, [r7, #0]
 800e71c:	4603      	mov	r3, r0
 800e71e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800e720:	7bf8      	ldrb	r0, [r7, #15]
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	68b9      	ldr	r1, [r7, #8]
 800e728:	f000 fad8 	bl	800ecdc <SD_disk_read>
 800e72c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b084      	sub	sp, #16
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
 800e740:	603b      	str	r3, [r7, #0]
 800e742:	4603      	mov	r3, r0
 800e744:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800e746:	7bf8      	ldrb	r0, [r7, #15]
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	68b9      	ldr	r1, [r7, #8]
 800e74e:	f000 fb2f 	bl	800edb0 <SD_disk_write>
 800e752:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e754:	4618      	mov	r0, r3
 800e756:	3710      	adds	r7, #16
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	4603      	mov	r3, r0
 800e764:	603a      	str	r2, [r7, #0]
 800e766:	71fb      	strb	r3, [r7, #7]
 800e768:	460b      	mov	r3, r1
 800e76a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800e76c:	79b9      	ldrb	r1, [r7, #6]
 800e76e:	79fb      	ldrb	r3, [r7, #7]
 800e770:	683a      	ldr	r2, [r7, #0]
 800e772:	4618      	mov	r0, r3
 800e774:	f000 fba0 	bl	800eeb8 <SD_disk_ioctl>
 800e778:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3708      	adds	r7, #8
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
	...

0800e784 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800e788:	2200      	movs	r2, #0
 800e78a:	2110      	movs	r1, #16
 800e78c:	4802      	ldr	r0, [pc, #8]	@ (800e798 <SELECT+0x14>)
 800e78e:	f7f8 fd1d 	bl	80071cc <HAL_GPIO_WritePin>
}
 800e792:	bf00      	nop
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	58020000 	.word	0x58020000

0800e79c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	2110      	movs	r1, #16
 800e7a4:	4802      	ldr	r0, [pc, #8]	@ (800e7b0 <DESELECT+0x14>)
 800e7a6:	f7f8 fd11 	bl	80071cc <HAL_GPIO_WritePin>
}
 800e7aa:	bf00      	nop
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	58020000 	.word	0x58020000

0800e7b4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e7be:	bf00      	nop
 800e7c0:	4b08      	ldr	r3, [pc, #32]	@ (800e7e4 <SPI_TxByte+0x30>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	695b      	ldr	r3, [r3, #20]
 800e7c6:	f003 0302 	and.w	r3, r3, #2
 800e7ca:	2b02      	cmp	r3, #2
 800e7cc:	d1f8      	bne.n	800e7c0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800e7ce:	1df9      	adds	r1, r7, #7
 800e7d0:	2364      	movs	r3, #100	@ 0x64
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	4803      	ldr	r0, [pc, #12]	@ (800e7e4 <SPI_TxByte+0x30>)
 800e7d6:	f7fb fd43 	bl	800a260 <HAL_SPI_Transmit>
}
 800e7da:	bf00      	nop
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	240023f8 	.word	0x240023f8

0800e7e8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e7f4:	bf00      	nop
 800e7f6:	4b08      	ldr	r3, [pc, #32]	@ (800e818 <SPI_TxBuffer+0x30>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	695b      	ldr	r3, [r3, #20]
 800e7fc:	f003 0302 	and.w	r3, r3, #2
 800e800:	2b02      	cmp	r3, #2
 800e802:	d1f8      	bne.n	800e7f6 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800e804:	887a      	ldrh	r2, [r7, #2]
 800e806:	2364      	movs	r3, #100	@ 0x64
 800e808:	6879      	ldr	r1, [r7, #4]
 800e80a:	4803      	ldr	r0, [pc, #12]	@ (800e818 <SPI_TxBuffer+0x30>)
 800e80c:	f7fb fd28 	bl	800a260 <HAL_SPI_Transmit>
}
 800e810:	bf00      	nop
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	240023f8 	.word	0x240023f8

0800e81c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800e822:	23ff      	movs	r3, #255	@ 0xff
 800e824:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800e826:	bf00      	nop
 800e828:	4b09      	ldr	r3, [pc, #36]	@ (800e850 <SPI_RxByte+0x34>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	695b      	ldr	r3, [r3, #20]
 800e82e:	f003 0302 	and.w	r3, r3, #2
 800e832:	2b02      	cmp	r3, #2
 800e834:	d1f8      	bne.n	800e828 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800e836:	1dba      	adds	r2, r7, #6
 800e838:	1df9      	adds	r1, r7, #7
 800e83a:	2364      	movs	r3, #100	@ 0x64
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	2301      	movs	r3, #1
 800e840:	4803      	ldr	r0, [pc, #12]	@ (800e850 <SPI_RxByte+0x34>)
 800e842:	f7fc f96d 	bl	800ab20 <HAL_SPI_TransmitReceive>
  return data;
 800e846:	79bb      	ldrb	r3, [r7, #6]
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	240023f8 	.word	0x240023f8

0800e854 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800e85c:	f7ff ffde 	bl	800e81c <SPI_RxByte>
 800e860:	4603      	mov	r3, r0
 800e862:	461a      	mov	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	701a      	strb	r2, [r3, #0]
}
 800e868:	bf00      	nop
 800e86a:	3708      	adds	r7, #8
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800e876:	4b0a      	ldr	r3, [pc, #40]	@ (800e8a0 <SD_ReadyWait+0x30>)
 800e878:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800e87c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800e87e:	f7ff ffcd 	bl	800e81c <SPI_RxByte>
 800e882:	4603      	mov	r3, r0
 800e884:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	2bff      	cmp	r3, #255	@ 0xff
 800e88a:	d003      	beq.n	800e894 <SD_ReadyWait+0x24>
 800e88c:	4b04      	ldr	r3, [pc, #16]	@ (800e8a0 <SD_ReadyWait+0x30>)
 800e88e:	881b      	ldrh	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1f4      	bne.n	800e87e <SD_ReadyWait+0xe>
  return res;
 800e894:	79fb      	ldrb	r3, [r7, #7]
}
 800e896:	4618      	mov	r0, r3
 800e898:	3708      	adds	r7, #8
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	240029d2 	.word	0x240029d2

0800e8a4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800e8aa:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800e8ae:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800e8b0:	f7ff ff74 	bl	800e79c <DESELECT>
  for(int i = 0; i < 10; i++)
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	60bb      	str	r3, [r7, #8]
 800e8b8:	e005      	b.n	800e8c6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800e8ba:	20ff      	movs	r0, #255	@ 0xff
 800e8bc:	f7ff ff7a 	bl	800e7b4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	60bb      	str	r3, [r7, #8]
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	2b09      	cmp	r3, #9
 800e8ca:	ddf6      	ble.n	800e8ba <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800e8cc:	f7ff ff5a 	bl	800e784 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800e8d0:	2340      	movs	r3, #64	@ 0x40
 800e8d2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800e8e4:	2395      	movs	r3, #149	@ 0x95
 800e8e6:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800e8e8:	463b      	mov	r3, r7
 800e8ea:	2106      	movs	r1, #6
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7ff ff7b 	bl	800e7e8 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800e8f2:	e002      	b.n	800e8fa <SD_PowerOn+0x56>
  {
    cnt--;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	3b01      	subs	r3, #1
 800e8f8:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800e8fa:	f7ff ff8f 	bl	800e81c <SPI_RxByte>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b01      	cmp	r3, #1
 800e902:	d002      	beq.n	800e90a <SD_PowerOn+0x66>
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1f4      	bne.n	800e8f4 <SD_PowerOn+0x50>
  }
  DESELECT();
 800e90a:	f7ff ff47 	bl	800e79c <DESELECT>
  SPI_TxByte(0XFF);
 800e90e:	20ff      	movs	r0, #255	@ 0xff
 800e910:	f7ff ff50 	bl	800e7b4 <SPI_TxByte>
  PowerFlag = 1;
 800e914:	4b03      	ldr	r3, [pc, #12]	@ (800e924 <SD_PowerOn+0x80>)
 800e916:	2201      	movs	r2, #1
 800e918:	701a      	strb	r2, [r3, #0]
}
 800e91a:	bf00      	nop
 800e91c:	3710      	adds	r7, #16
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	240029d5 	.word	0x240029d5

0800e928 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800e928:	b480      	push	{r7}
 800e92a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800e92c:	4b03      	ldr	r3, [pc, #12]	@ (800e93c <SD_PowerOff+0x14>)
 800e92e:	2200      	movs	r2, #0
 800e930:	701a      	strb	r2, [r3, #0]
}
 800e932:	bf00      	nop
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr
 800e93c:	240029d5 	.word	0x240029d5

0800e940 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800e940:	b480      	push	{r7}
 800e942:	af00      	add	r7, sp, #0
  return PowerFlag;
 800e944:	4b03      	ldr	r3, [pc, #12]	@ (800e954 <SD_CheckPower+0x14>)
 800e946:	781b      	ldrb	r3, [r3, #0]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	240029d5 	.word	0x240029d5

0800e958 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b084      	sub	sp, #16
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800e962:	4b13      	ldr	r3, [pc, #76]	@ (800e9b0 <SD_RxDataBlock+0x58>)
 800e964:	22c8      	movs	r2, #200	@ 0xc8
 800e966:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800e968:	f7ff ff58 	bl	800e81c <SPI_RxByte>
 800e96c:	4603      	mov	r3, r0
 800e96e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800e970:	7bfb      	ldrb	r3, [r7, #15]
 800e972:	2bff      	cmp	r3, #255	@ 0xff
 800e974:	d103      	bne.n	800e97e <SD_RxDataBlock+0x26>
 800e976:	4b0e      	ldr	r3, [pc, #56]	@ (800e9b0 <SD_RxDataBlock+0x58>)
 800e978:	881b      	ldrh	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1f4      	bne.n	800e968 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800e97e:	7bfb      	ldrb	r3, [r7, #15]
 800e980:	2bfe      	cmp	r3, #254	@ 0xfe
 800e982:	d001      	beq.n	800e988 <SD_RxDataBlock+0x30>
 800e984:	2300      	movs	r3, #0
 800e986:	e00f      	b.n	800e9a8 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	1c5a      	adds	r2, r3, #1
 800e98c:	607a      	str	r2, [r7, #4]
 800e98e:	4618      	mov	r0, r3
 800e990:	f7ff ff60 	bl	800e854 <SPI_RxBytePtr>
  } while(len--);
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	1e5a      	subs	r2, r3, #1
 800e998:	603a      	str	r2, [r7, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d1f4      	bne.n	800e988 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800e99e:	f7ff ff3d 	bl	800e81c <SPI_RxByte>
  SPI_RxByte();
 800e9a2:	f7ff ff3b 	bl	800e81c <SPI_RxByte>
  return TRUE;
 800e9a6:	2301      	movs	r3, #1
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	240029d0 	.word	0x240029d0

0800e9b4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	460b      	mov	r3, r1
 800e9be:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800e9c4:	f7ff ff54 	bl	800e870 <SD_ReadyWait>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2bff      	cmp	r3, #255	@ 0xff
 800e9cc:	d001      	beq.n	800e9d2 <SD_TxDataBlock+0x1e>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	e02f      	b.n	800ea32 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800e9d2:	78fb      	ldrb	r3, [r7, #3]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7ff feed 	bl	800e7b4 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800e9da:	78fb      	ldrb	r3, [r7, #3]
 800e9dc:	2bfd      	cmp	r3, #253	@ 0xfd
 800e9de:	d020      	beq.n	800ea22 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800e9e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7ff feff 	bl	800e7e8 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800e9ea:	f7ff ff17 	bl	800e81c <SPI_RxByte>
    SPI_RxByte();
 800e9ee:	f7ff ff15 	bl	800e81c <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800e9f2:	e00b      	b.n	800ea0c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800e9f4:	f7ff ff12 	bl	800e81c <SPI_RxByte>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800e9fc:	7bfb      	ldrb	r3, [r7, #15]
 800e9fe:	f003 031f 	and.w	r3, r3, #31
 800ea02:	2b05      	cmp	r3, #5
 800ea04:	d006      	beq.n	800ea14 <SD_TxDataBlock+0x60>
      i++;
 800ea06:	7bbb      	ldrb	r3, [r7, #14]
 800ea08:	3301      	adds	r3, #1
 800ea0a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800ea0c:	7bbb      	ldrb	r3, [r7, #14]
 800ea0e:	2b40      	cmp	r3, #64	@ 0x40
 800ea10:	d9f0      	bls.n	800e9f4 <SD_TxDataBlock+0x40>
 800ea12:	e000      	b.n	800ea16 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800ea14:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800ea16:	bf00      	nop
 800ea18:	f7ff ff00 	bl	800e81c <SPI_RxByte>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d0fa      	beq.n	800ea18 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800ea22:	7bfb      	ldrb	r3, [r7, #15]
 800ea24:	f003 031f 	and.w	r3, r3, #31
 800ea28:	2b05      	cmp	r3, #5
 800ea2a:	d101      	bne.n	800ea30 <SD_TxDataBlock+0x7c>
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e000      	b.n	800ea32 <SD_TxDataBlock+0x7e>

  return FALSE;
 800ea30:	2300      	movs	r3, #0
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b084      	sub	sp, #16
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	4603      	mov	r3, r0
 800ea42:	6039      	str	r1, [r7, #0]
 800ea44:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800ea46:	f7ff ff13 	bl	800e870 <SD_ReadyWait>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2bff      	cmp	r3, #255	@ 0xff
 800ea4e:	d001      	beq.n	800ea54 <SD_SendCmd+0x1a>
 800ea50:	23ff      	movs	r3, #255	@ 0xff
 800ea52:	e042      	b.n	800eada <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800ea54:	79fb      	ldrb	r3, [r7, #7]
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7ff feac 	bl	800e7b4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	0e1b      	lsrs	r3, r3, #24
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7ff fea6 	bl	800e7b4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	0c1b      	lsrs	r3, r3, #16
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7ff fea0 	bl	800e7b4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	0a1b      	lsrs	r3, r3, #8
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff fe9a 	bl	800e7b4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7ff fe95 	bl	800e7b4 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800ea8a:	79fb      	ldrb	r3, [r7, #7]
 800ea8c:	2b40      	cmp	r3, #64	@ 0x40
 800ea8e:	d102      	bne.n	800ea96 <SD_SendCmd+0x5c>
 800ea90:	2395      	movs	r3, #149	@ 0x95
 800ea92:	73fb      	strb	r3, [r7, #15]
 800ea94:	e007      	b.n	800eaa6 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800ea96:	79fb      	ldrb	r3, [r7, #7]
 800ea98:	2b48      	cmp	r3, #72	@ 0x48
 800ea9a:	d102      	bne.n	800eaa2 <SD_SendCmd+0x68>
 800ea9c:	2387      	movs	r3, #135	@ 0x87
 800ea9e:	73fb      	strb	r3, [r7, #15]
 800eaa0:	e001      	b.n	800eaa6 <SD_SendCmd+0x6c>
  else crc = 1;
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7ff fe83 	bl	800e7b4 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800eaae:	79fb      	ldrb	r3, [r7, #7]
 800eab0:	2b4c      	cmp	r3, #76	@ 0x4c
 800eab2:	d101      	bne.n	800eab8 <SD_SendCmd+0x7e>
 800eab4:	f7ff feb2 	bl	800e81c <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800eab8:	230a      	movs	r3, #10
 800eaba:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800eabc:	f7ff feae 	bl	800e81c <SPI_RxByte>
 800eac0:	4603      	mov	r3, r0
 800eac2:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800eac4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	da05      	bge.n	800ead8 <SD_SendCmd+0x9e>
 800eacc:	7bbb      	ldrb	r3, [r7, #14]
 800eace:	3b01      	subs	r3, #1
 800ead0:	73bb      	strb	r3, [r7, #14]
 800ead2:	7bbb      	ldrb	r3, [r7, #14]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d1f1      	bne.n	800eabc <SD_SendCmd+0x82>

  return res;
 800ead8:	7b7b      	ldrb	r3, [r7, #13]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
	...

0800eae4 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800eae4:	b590      	push	{r4, r7, lr}
 800eae6:	b085      	sub	sp, #20
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	4603      	mov	r3, r0
 800eaec:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800eaee:	79fb      	ldrb	r3, [r7, #7]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d001      	beq.n	800eaf8 <SD_disk_initialize+0x14>
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e0d1      	b.n	800ec9c <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800eaf8:	4b6a      	ldr	r3, [pc, #424]	@ (800eca4 <SD_disk_initialize+0x1c0>)
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	f003 0302 	and.w	r3, r3, #2
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d003      	beq.n	800eb0e <SD_disk_initialize+0x2a>
 800eb06:	4b67      	ldr	r3, [pc, #412]	@ (800eca4 <SD_disk_initialize+0x1c0>)
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	e0c6      	b.n	800ec9c <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800eb0e:	f7ff fec9 	bl	800e8a4 <SD_PowerOn>
  /* slave select */
  SELECT();
 800eb12:	f7ff fe37 	bl	800e784 <SELECT>
  /* check disk type */
  type = 0;
 800eb16:	2300      	movs	r3, #0
 800eb18:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	2040      	movs	r0, #64	@ 0x40
 800eb1e:	f7ff ff8c 	bl	800ea3a <SD_SendCmd>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	f040 80a1 	bne.w	800ec6c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800eb2a:	4b5f      	ldr	r3, [pc, #380]	@ (800eca8 <SD_disk_initialize+0x1c4>)
 800eb2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eb30:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800eb32:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800eb36:	2048      	movs	r0, #72	@ 0x48
 800eb38:	f7ff ff7f 	bl	800ea3a <SD_SendCmd>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d155      	bne.n	800ebee <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800eb42:	2300      	movs	r3, #0
 800eb44:	73fb      	strb	r3, [r7, #15]
 800eb46:	e00c      	b.n	800eb62 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800eb48:	7bfc      	ldrb	r4, [r7, #15]
 800eb4a:	f7ff fe67 	bl	800e81c <SPI_RxByte>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	461a      	mov	r2, r3
 800eb52:	f104 0310 	add.w	r3, r4, #16
 800eb56:	443b      	add	r3, r7
 800eb58:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800eb5c:	7bfb      	ldrb	r3, [r7, #15]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	73fb      	strb	r3, [r7, #15]
 800eb62:	7bfb      	ldrb	r3, [r7, #15]
 800eb64:	2b03      	cmp	r3, #3
 800eb66:	d9ef      	bls.n	800eb48 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800eb68:	7abb      	ldrb	r3, [r7, #10]
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d17e      	bne.n	800ec6c <SD_disk_initialize+0x188>
 800eb6e:	7afb      	ldrb	r3, [r7, #11]
 800eb70:	2baa      	cmp	r3, #170	@ 0xaa
 800eb72:	d17b      	bne.n	800ec6c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800eb74:	2100      	movs	r1, #0
 800eb76:	2077      	movs	r0, #119	@ 0x77
 800eb78:	f7ff ff5f 	bl	800ea3a <SD_SendCmd>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d807      	bhi.n	800eb92 <SD_disk_initialize+0xae>
 800eb82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800eb86:	2069      	movs	r0, #105	@ 0x69
 800eb88:	f7ff ff57 	bl	800ea3a <SD_SendCmd>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d004      	beq.n	800eb9c <SD_disk_initialize+0xb8>
        } while (Timer1);
 800eb92:	4b45      	ldr	r3, [pc, #276]	@ (800eca8 <SD_disk_initialize+0x1c4>)
 800eb94:	881b      	ldrh	r3, [r3, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d1ec      	bne.n	800eb74 <SD_disk_initialize+0x90>
 800eb9a:	e000      	b.n	800eb9e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800eb9c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800eb9e:	4b42      	ldr	r3, [pc, #264]	@ (800eca8 <SD_disk_initialize+0x1c4>)
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d062      	beq.n	800ec6c <SD_disk_initialize+0x188>
 800eba6:	2100      	movs	r1, #0
 800eba8:	207a      	movs	r0, #122	@ 0x7a
 800ebaa:	f7ff ff46 	bl	800ea3a <SD_SendCmd>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d15b      	bne.n	800ec6c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	73fb      	strb	r3, [r7, #15]
 800ebb8:	e00c      	b.n	800ebd4 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800ebba:	7bfc      	ldrb	r4, [r7, #15]
 800ebbc:	f7ff fe2e 	bl	800e81c <SPI_RxByte>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	f104 0310 	add.w	r3, r4, #16
 800ebc8:	443b      	add	r3, r7
 800ebca:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800ebce:	7bfb      	ldrb	r3, [r7, #15]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	73fb      	strb	r3, [r7, #15]
 800ebd4:	7bfb      	ldrb	r3, [r7, #15]
 800ebd6:	2b03      	cmp	r3, #3
 800ebd8:	d9ef      	bls.n	800ebba <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800ebda:	7a3b      	ldrb	r3, [r7, #8]
 800ebdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d001      	beq.n	800ebe8 <SD_disk_initialize+0x104>
 800ebe4:	230c      	movs	r3, #12
 800ebe6:	e000      	b.n	800ebea <SD_disk_initialize+0x106>
 800ebe8:	2304      	movs	r3, #4
 800ebea:	73bb      	strb	r3, [r7, #14]
 800ebec:	e03e      	b.n	800ec6c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800ebee:	2100      	movs	r1, #0
 800ebf0:	2077      	movs	r0, #119	@ 0x77
 800ebf2:	f7ff ff22 	bl	800ea3a <SD_SendCmd>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d808      	bhi.n	800ec0e <SD_disk_initialize+0x12a>
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	2069      	movs	r0, #105	@ 0x69
 800ec00:	f7ff ff1b 	bl	800ea3a <SD_SendCmd>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d801      	bhi.n	800ec0e <SD_disk_initialize+0x12a>
 800ec0a:	2302      	movs	r3, #2
 800ec0c:	e000      	b.n	800ec10 <SD_disk_initialize+0x12c>
 800ec0e:	2301      	movs	r3, #1
 800ec10:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800ec12:	7bbb      	ldrb	r3, [r7, #14]
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d10e      	bne.n	800ec36 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800ec18:	2100      	movs	r1, #0
 800ec1a:	2077      	movs	r0, #119	@ 0x77
 800ec1c:	f7ff ff0d 	bl	800ea3a <SD_SendCmd>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	d80e      	bhi.n	800ec44 <SD_disk_initialize+0x160>
 800ec26:	2100      	movs	r1, #0
 800ec28:	2069      	movs	r0, #105	@ 0x69
 800ec2a:	f7ff ff06 	bl	800ea3a <SD_SendCmd>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d107      	bne.n	800ec44 <SD_disk_initialize+0x160>
 800ec34:	e00c      	b.n	800ec50 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800ec36:	2100      	movs	r1, #0
 800ec38:	2041      	movs	r0, #65	@ 0x41
 800ec3a:	f7ff fefe 	bl	800ea3a <SD_SendCmd>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d004      	beq.n	800ec4e <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800ec44:	4b18      	ldr	r3, [pc, #96]	@ (800eca8 <SD_disk_initialize+0x1c4>)
 800ec46:	881b      	ldrh	r3, [r3, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d1e2      	bne.n	800ec12 <SD_disk_initialize+0x12e>
 800ec4c:	e000      	b.n	800ec50 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800ec4e:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800ec50:	4b15      	ldr	r3, [pc, #84]	@ (800eca8 <SD_disk_initialize+0x1c4>)
 800ec52:	881b      	ldrh	r3, [r3, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d007      	beq.n	800ec68 <SD_disk_initialize+0x184>
 800ec58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ec5c:	2050      	movs	r0, #80	@ 0x50
 800ec5e:	f7ff feec 	bl	800ea3a <SD_SendCmd>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d001      	beq.n	800ec6c <SD_disk_initialize+0x188>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800ec6c:	4a0f      	ldr	r2, [pc, #60]	@ (800ecac <SD_disk_initialize+0x1c8>)
 800ec6e:	7bbb      	ldrb	r3, [r7, #14]
 800ec70:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800ec72:	f7ff fd93 	bl	800e79c <DESELECT>
  SPI_RxByte();
 800ec76:	f7ff fdd1 	bl	800e81c <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800ec7a:	7bbb      	ldrb	r3, [r7, #14]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d008      	beq.n	800ec92 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800ec80:	4b08      	ldr	r3, [pc, #32]	@ (800eca4 <SD_disk_initialize+0x1c0>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	f023 0301 	bic.w	r3, r3, #1
 800ec8a:	b2da      	uxtb	r2, r3
 800ec8c:	4b05      	ldr	r3, [pc, #20]	@ (800eca4 <SD_disk_initialize+0x1c0>)
 800ec8e:	701a      	strb	r2, [r3, #0]
 800ec90:	e001      	b.n	800ec96 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800ec92:	f7ff fe49 	bl	800e928 <SD_PowerOff>
  }
  return Stat;
 800ec96:	4b03      	ldr	r3, [pc, #12]	@ (800eca4 <SD_disk_initialize+0x1c0>)
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	b2db      	uxtb	r3, r3
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3714      	adds	r7, #20
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd90      	pop	{r4, r7, pc}
 800eca4:	240000bc 	.word	0x240000bc
 800eca8:	240029d0 	.word	0x240029d0
 800ecac:	240029d4 	.word	0x240029d4

0800ecb0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800ecba:	79fb      	ldrb	r3, [r7, #7]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d001      	beq.n	800ecc4 <SD_disk_status+0x14>
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e002      	b.n	800ecca <SD_disk_status+0x1a>
  return Stat;
 800ecc4:	4b04      	ldr	r3, [pc, #16]	@ (800ecd8 <SD_disk_status+0x28>)
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	b2db      	uxtb	r3, r3
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	370c      	adds	r7, #12
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr
 800ecd6:	bf00      	nop
 800ecd8:	240000bc 	.word	0x240000bc

0800ecdc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60b9      	str	r1, [r7, #8]
 800ece4:	607a      	str	r2, [r7, #4]
 800ece6:	603b      	str	r3, [r7, #0]
 800ece8:	4603      	mov	r3, r0
 800ecea:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800ecec:	7bfb      	ldrb	r3, [r7, #15]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d102      	bne.n	800ecf8 <SD_disk_read+0x1c>
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d101      	bne.n	800ecfc <SD_disk_read+0x20>
 800ecf8:	2304      	movs	r3, #4
 800ecfa:	e051      	b.n	800eda0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ecfc:	4b2a      	ldr	r3, [pc, #168]	@ (800eda8 <SD_disk_read+0xcc>)
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	f003 0301 	and.w	r3, r3, #1
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d001      	beq.n	800ed0e <SD_disk_read+0x32>
 800ed0a:	2303      	movs	r3, #3
 800ed0c:	e048      	b.n	800eda0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800ed0e:	4b27      	ldr	r3, [pc, #156]	@ (800edac <SD_disk_read+0xd0>)
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	f003 0304 	and.w	r3, r3, #4
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d102      	bne.n	800ed20 <SD_disk_read+0x44>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	025b      	lsls	r3, r3, #9
 800ed1e:	607b      	str	r3, [r7, #4]

  SELECT();
 800ed20:	f7ff fd30 	bl	800e784 <SELECT>

  if (count == 1)
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d111      	bne.n	800ed4e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800ed2a:	6879      	ldr	r1, [r7, #4]
 800ed2c:	2051      	movs	r0, #81	@ 0x51
 800ed2e:	f7ff fe84 	bl	800ea3a <SD_SendCmd>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d129      	bne.n	800ed8c <SD_disk_read+0xb0>
 800ed38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ed3c:	68b8      	ldr	r0, [r7, #8]
 800ed3e:	f7ff fe0b 	bl	800e958 <SD_RxDataBlock>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d021      	beq.n	800ed8c <SD_disk_read+0xb0>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	603b      	str	r3, [r7, #0]
 800ed4c:	e01e      	b.n	800ed8c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800ed4e:	6879      	ldr	r1, [r7, #4]
 800ed50:	2052      	movs	r0, #82	@ 0x52
 800ed52:	f7ff fe72 	bl	800ea3a <SD_SendCmd>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d117      	bne.n	800ed8c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800ed5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ed60:	68b8      	ldr	r0, [r7, #8]
 800ed62:	f7ff fdf9 	bl	800e958 <SD_RxDataBlock>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d00a      	beq.n	800ed82 <SD_disk_read+0xa6>
        buff += 512;
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ed72:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	3b01      	subs	r3, #1
 800ed78:	603b      	str	r3, [r7, #0]
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d1ed      	bne.n	800ed5c <SD_disk_read+0x80>
 800ed80:	e000      	b.n	800ed84 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800ed82:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800ed84:	2100      	movs	r1, #0
 800ed86:	204c      	movs	r0, #76	@ 0x4c
 800ed88:	f7ff fe57 	bl	800ea3a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800ed8c:	f7ff fd06 	bl	800e79c <DESELECT>
  SPI_RxByte();
 800ed90:	f7ff fd44 	bl	800e81c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	bf14      	ite	ne
 800ed9a:	2301      	movne	r3, #1
 800ed9c:	2300      	moveq	r3, #0
 800ed9e:	b2db      	uxtb	r3, r3
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	240000bc 	.word	0x240000bc
 800edac:	240029d4 	.word	0x240029d4

0800edb0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60b9      	str	r1, [r7, #8]
 800edb8:	607a      	str	r2, [r7, #4]
 800edba:	603b      	str	r3, [r7, #0]
 800edbc:	4603      	mov	r3, r0
 800edbe:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800edc0:	7bfb      	ldrb	r3, [r7, #15]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d102      	bne.n	800edcc <SD_disk_write+0x1c>
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d101      	bne.n	800edd0 <SD_disk_write+0x20>
 800edcc:	2304      	movs	r3, #4
 800edce:	e06b      	b.n	800eea8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800edd0:	4b37      	ldr	r3, [pc, #220]	@ (800eeb0 <SD_disk_write+0x100>)
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	f003 0301 	and.w	r3, r3, #1
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d001      	beq.n	800ede2 <SD_disk_write+0x32>
 800edde:	2303      	movs	r3, #3
 800ede0:	e062      	b.n	800eea8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800ede2:	4b33      	ldr	r3, [pc, #204]	@ (800eeb0 <SD_disk_write+0x100>)
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	f003 0304 	and.w	r3, r3, #4
 800edec:	2b00      	cmp	r3, #0
 800edee:	d001      	beq.n	800edf4 <SD_disk_write+0x44>
 800edf0:	2302      	movs	r3, #2
 800edf2:	e059      	b.n	800eea8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800edf4:	4b2f      	ldr	r3, [pc, #188]	@ (800eeb4 <SD_disk_write+0x104>)
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	f003 0304 	and.w	r3, r3, #4
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d102      	bne.n	800ee06 <SD_disk_write+0x56>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	025b      	lsls	r3, r3, #9
 800ee04:	607b      	str	r3, [r7, #4]

  SELECT();
 800ee06:	f7ff fcbd 	bl	800e784 <SELECT>

  if (count == 1)
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d110      	bne.n	800ee32 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800ee10:	6879      	ldr	r1, [r7, #4]
 800ee12:	2058      	movs	r0, #88	@ 0x58
 800ee14:	f7ff fe11 	bl	800ea3a <SD_SendCmd>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d13a      	bne.n	800ee94 <SD_disk_write+0xe4>
 800ee1e:	21fe      	movs	r1, #254	@ 0xfe
 800ee20:	68b8      	ldr	r0, [r7, #8]
 800ee22:	f7ff fdc7 	bl	800e9b4 <SD_TxDataBlock>
 800ee26:	4603      	mov	r3, r0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d033      	beq.n	800ee94 <SD_disk_write+0xe4>
      count = 0;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	603b      	str	r3, [r7, #0]
 800ee30:	e030      	b.n	800ee94 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800ee32:	4b20      	ldr	r3, [pc, #128]	@ (800eeb4 <SD_disk_write+0x104>)
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	f003 0302 	and.w	r3, r3, #2
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d007      	beq.n	800ee4e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800ee3e:	2100      	movs	r1, #0
 800ee40:	2077      	movs	r0, #119	@ 0x77
 800ee42:	f7ff fdfa 	bl	800ea3a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800ee46:	6839      	ldr	r1, [r7, #0]
 800ee48:	2057      	movs	r0, #87	@ 0x57
 800ee4a:	f7ff fdf6 	bl	800ea3a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800ee4e:	6879      	ldr	r1, [r7, #4]
 800ee50:	2059      	movs	r0, #89	@ 0x59
 800ee52:	f7ff fdf2 	bl	800ea3a <SD_SendCmd>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d11b      	bne.n	800ee94 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800ee5c:	21fc      	movs	r1, #252	@ 0xfc
 800ee5e:	68b8      	ldr	r0, [r7, #8]
 800ee60:	f7ff fda8 	bl	800e9b4 <SD_TxDataBlock>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00a      	beq.n	800ee80 <SD_disk_write+0xd0>
        buff += 512;
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ee70:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	3b01      	subs	r3, #1
 800ee76:	603b      	str	r3, [r7, #0]
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1ee      	bne.n	800ee5c <SD_disk_write+0xac>
 800ee7e:	e000      	b.n	800ee82 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800ee80:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800ee82:	21fd      	movs	r1, #253	@ 0xfd
 800ee84:	2000      	movs	r0, #0
 800ee86:	f7ff fd95 	bl	800e9b4 <SD_TxDataBlock>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d101      	bne.n	800ee94 <SD_disk_write+0xe4>
      {
        count = 1;
 800ee90:	2301      	movs	r3, #1
 800ee92:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800ee94:	f7ff fc82 	bl	800e79c <DESELECT>
  SPI_RxByte();
 800ee98:	f7ff fcc0 	bl	800e81c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	bf14      	ite	ne
 800eea2:	2301      	movne	r3, #1
 800eea4:	2300      	moveq	r3, #0
 800eea6:	b2db      	uxtb	r3, r3
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3710      	adds	r7, #16
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	240000bc 	.word	0x240000bc
 800eeb4:	240029d4 	.word	0x240029d4

0800eeb8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800eeb8:	b590      	push	{r4, r7, lr}
 800eeba:	b08b      	sub	sp, #44	@ 0x2c
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	4603      	mov	r3, r0
 800eec0:	603a      	str	r2, [r7, #0]
 800eec2:	71fb      	strb	r3, [r7, #7]
 800eec4:	460b      	mov	r3, r1
 800eec6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800eecc:	79fb      	ldrb	r3, [r7, #7]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d001      	beq.n	800eed6 <SD_disk_ioctl+0x1e>
 800eed2:	2304      	movs	r3, #4
 800eed4:	e113      	b.n	800f0fe <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800eed6:	2301      	movs	r3, #1
 800eed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800eedc:	79bb      	ldrb	r3, [r7, #6]
 800eede:	2b05      	cmp	r3, #5
 800eee0:	d124      	bne.n	800ef2c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800eee2:	6a3b      	ldr	r3, [r7, #32]
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	2b02      	cmp	r3, #2
 800eee8:	d012      	beq.n	800ef10 <SD_disk_ioctl+0x58>
 800eeea:	2b02      	cmp	r3, #2
 800eeec:	dc1a      	bgt.n	800ef24 <SD_disk_ioctl+0x6c>
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d002      	beq.n	800eef8 <SD_disk_ioctl+0x40>
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d006      	beq.n	800ef04 <SD_disk_ioctl+0x4c>
 800eef6:	e015      	b.n	800ef24 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800eef8:	f7ff fd16 	bl	800e928 <SD_PowerOff>
      res = RES_OK;
 800eefc:	2300      	movs	r3, #0
 800eefe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ef02:	e0fa      	b.n	800f0fa <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800ef04:	f7ff fcce 	bl	800e8a4 <SD_PowerOn>
      res = RES_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ef0e:	e0f4      	b.n	800f0fa <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800ef10:	6a3b      	ldr	r3, [r7, #32]
 800ef12:	1c5c      	adds	r4, r3, #1
 800ef14:	f7ff fd14 	bl	800e940 <SD_CheckPower>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800ef22:	e0ea      	b.n	800f0fa <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800ef24:	2304      	movs	r3, #4
 800ef26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ef2a:	e0e6      	b.n	800f0fa <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800ef2c:	4b76      	ldr	r3, [pc, #472]	@ (800f108 <SD_disk_ioctl+0x250>)
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	f003 0301 	and.w	r3, r3, #1
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d001      	beq.n	800ef3e <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800ef3a:	2303      	movs	r3, #3
 800ef3c:	e0df      	b.n	800f0fe <SD_disk_ioctl+0x246>
    }
    SELECT();
 800ef3e:	f7ff fc21 	bl	800e784 <SELECT>
    switch (ctrl)
 800ef42:	79bb      	ldrb	r3, [r7, #6]
 800ef44:	2b0d      	cmp	r3, #13
 800ef46:	f200 80c9 	bhi.w	800f0dc <SD_disk_ioctl+0x224>
 800ef4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef50 <SD_disk_ioctl+0x98>)
 800ef4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef50:	0800f047 	.word	0x0800f047
 800ef54:	0800ef89 	.word	0x0800ef89
 800ef58:	0800f037 	.word	0x0800f037
 800ef5c:	0800f0dd 	.word	0x0800f0dd
 800ef60:	0800f0dd 	.word	0x0800f0dd
 800ef64:	0800f0dd 	.word	0x0800f0dd
 800ef68:	0800f0dd 	.word	0x0800f0dd
 800ef6c:	0800f0dd 	.word	0x0800f0dd
 800ef70:	0800f0dd 	.word	0x0800f0dd
 800ef74:	0800f0dd 	.word	0x0800f0dd
 800ef78:	0800f0dd 	.word	0x0800f0dd
 800ef7c:	0800f059 	.word	0x0800f059
 800ef80:	0800f07d 	.word	0x0800f07d
 800ef84:	0800f0a1 	.word	0x0800f0a1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800ef88:	2100      	movs	r1, #0
 800ef8a:	2049      	movs	r0, #73	@ 0x49
 800ef8c:	f7ff fd55 	bl	800ea3a <SD_SendCmd>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f040 80a6 	bne.w	800f0e4 <SD_disk_ioctl+0x22c>
 800ef98:	f107 030c 	add.w	r3, r7, #12
 800ef9c:	2110      	movs	r1, #16
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7ff fcda 	bl	800e958 <SD_RxDataBlock>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	f000 809c 	beq.w	800f0e4 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800efac:	7b3b      	ldrb	r3, [r7, #12]
 800efae:	099b      	lsrs	r3, r3, #6
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d10d      	bne.n	800efd2 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800efb6:	7d7b      	ldrb	r3, [r7, #21]
 800efb8:	461a      	mov	r2, r3
 800efba:	7d3b      	ldrb	r3, [r7, #20]
 800efbc:	021b      	lsls	r3, r3, #8
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	4413      	add	r3, r2
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	3301      	adds	r3, #1
 800efc6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800efc8:	8bfb      	ldrh	r3, [r7, #30]
 800efca:	029a      	lsls	r2, r3, #10
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	601a      	str	r2, [r3, #0]
 800efd0:	e02d      	b.n	800f02e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800efd2:	7c7b      	ldrb	r3, [r7, #17]
 800efd4:	f003 030f 	and.w	r3, r3, #15
 800efd8:	b2da      	uxtb	r2, r3
 800efda:	7dbb      	ldrb	r3, [r7, #22]
 800efdc:	09db      	lsrs	r3, r3, #7
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	4413      	add	r3, r2
 800efe2:	b2da      	uxtb	r2, r3
 800efe4:	7d7b      	ldrb	r3, [r7, #21]
 800efe6:	005b      	lsls	r3, r3, #1
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	f003 0306 	and.w	r3, r3, #6
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	4413      	add	r3, r2
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	3302      	adds	r3, #2
 800eff6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800effa:	7d3b      	ldrb	r3, [r7, #20]
 800effc:	099b      	lsrs	r3, r3, #6
 800effe:	b2db      	uxtb	r3, r3
 800f000:	461a      	mov	r2, r3
 800f002:	7cfb      	ldrb	r3, [r7, #19]
 800f004:	009b      	lsls	r3, r3, #2
 800f006:	b29b      	uxth	r3, r3
 800f008:	4413      	add	r3, r2
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	7cbb      	ldrb	r3, [r7, #18]
 800f00e:	029b      	lsls	r3, r3, #10
 800f010:	b29b      	uxth	r3, r3
 800f012:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f016:	b29b      	uxth	r3, r3
 800f018:	4413      	add	r3, r2
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	3301      	adds	r3, #1
 800f01e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800f020:	8bfa      	ldrh	r2, [r7, #30]
 800f022:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f026:	3b09      	subs	r3, #9
 800f028:	409a      	lsls	r2, r3
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800f02e:	2300      	movs	r3, #0
 800f030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800f034:	e056      	b.n	800f0e4 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f03c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f044:	e055      	b.n	800f0f2 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800f046:	f7ff fc13 	bl	800e870 <SD_ReadyWait>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2bff      	cmp	r3, #255	@ 0xff
 800f04e:	d14b      	bne.n	800f0e8 <SD_disk_ioctl+0x230>
 800f050:	2300      	movs	r3, #0
 800f052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f056:	e047      	b.n	800f0e8 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800f058:	2100      	movs	r1, #0
 800f05a:	2049      	movs	r0, #73	@ 0x49
 800f05c:	f7ff fced 	bl	800ea3a <SD_SendCmd>
 800f060:	4603      	mov	r3, r0
 800f062:	2b00      	cmp	r3, #0
 800f064:	d142      	bne.n	800f0ec <SD_disk_ioctl+0x234>
 800f066:	2110      	movs	r1, #16
 800f068:	6a38      	ldr	r0, [r7, #32]
 800f06a:	f7ff fc75 	bl	800e958 <SD_RxDataBlock>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d03b      	beq.n	800f0ec <SD_disk_ioctl+0x234>
 800f074:	2300      	movs	r3, #0
 800f076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f07a:	e037      	b.n	800f0ec <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800f07c:	2100      	movs	r1, #0
 800f07e:	204a      	movs	r0, #74	@ 0x4a
 800f080:	f7ff fcdb 	bl	800ea3a <SD_SendCmd>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d132      	bne.n	800f0f0 <SD_disk_ioctl+0x238>
 800f08a:	2110      	movs	r1, #16
 800f08c:	6a38      	ldr	r0, [r7, #32]
 800f08e:	f7ff fc63 	bl	800e958 <SD_RxDataBlock>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d02b      	beq.n	800f0f0 <SD_disk_ioctl+0x238>
 800f098:	2300      	movs	r3, #0
 800f09a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800f09e:	e027      	b.n	800f0f0 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	207a      	movs	r0, #122	@ 0x7a
 800f0a4:	f7ff fcc9 	bl	800ea3a <SD_SendCmd>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d116      	bne.n	800f0dc <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f0b4:	e00b      	b.n	800f0ce <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800f0b6:	6a3c      	ldr	r4, [r7, #32]
 800f0b8:	1c63      	adds	r3, r4, #1
 800f0ba:	623b      	str	r3, [r7, #32]
 800f0bc:	f7ff fbae 	bl	800e81c <SPI_RxByte>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800f0c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f0ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f0d2:	2b03      	cmp	r3, #3
 800f0d4:	d9ef      	bls.n	800f0b6 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800f0dc:	2304      	movs	r3, #4
 800f0de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f0e2:	e006      	b.n	800f0f2 <SD_disk_ioctl+0x23a>
      break;
 800f0e4:	bf00      	nop
 800f0e6:	e004      	b.n	800f0f2 <SD_disk_ioctl+0x23a>
      break;
 800f0e8:	bf00      	nop
 800f0ea:	e002      	b.n	800f0f2 <SD_disk_ioctl+0x23a>
      break;
 800f0ec:	bf00      	nop
 800f0ee:	e000      	b.n	800f0f2 <SD_disk_ioctl+0x23a>
      break;
 800f0f0:	bf00      	nop
    }
    DESELECT();
 800f0f2:	f7ff fb53 	bl	800e79c <DESELECT>
    SPI_RxByte();
 800f0f6:	f7ff fb91 	bl	800e81c <SPI_RxByte>
  }
  return res;
 800f0fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	372c      	adds	r7, #44	@ 0x2c
 800f102:	46bd      	mov	sp, r7
 800f104:	bd90      	pop	{r4, r7, pc}
 800f106:	bf00      	nop
 800f108:	240000bc 	.word	0x240000bc

0800f10c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	4603      	mov	r3, r0
 800f114:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f116:	79fb      	ldrb	r3, [r7, #7]
 800f118:	4a08      	ldr	r2, [pc, #32]	@ (800f13c <disk_status+0x30>)
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	4413      	add	r3, r2
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	79fa      	ldrb	r2, [r7, #7]
 800f124:	4905      	ldr	r1, [pc, #20]	@ (800f13c <disk_status+0x30>)
 800f126:	440a      	add	r2, r1
 800f128:	7a12      	ldrb	r2, [r2, #8]
 800f12a:	4610      	mov	r0, r2
 800f12c:	4798      	blx	r3
 800f12e:	4603      	mov	r3, r0
 800f130:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f132:	7bfb      	ldrb	r3, [r7, #15]
}
 800f134:	4618      	mov	r0, r3
 800f136:	3710      	adds	r7, #16
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	24002c00 	.word	0x24002c00

0800f140 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	4603      	mov	r3, r0
 800f148:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f14a:	2300      	movs	r3, #0
 800f14c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f14e:	79fb      	ldrb	r3, [r7, #7]
 800f150:	4a0e      	ldr	r2, [pc, #56]	@ (800f18c <disk_initialize+0x4c>)
 800f152:	5cd3      	ldrb	r3, [r2, r3]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d114      	bne.n	800f182 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f158:	79fb      	ldrb	r3, [r7, #7]
 800f15a:	4a0c      	ldr	r2, [pc, #48]	@ (800f18c <disk_initialize+0x4c>)
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	4413      	add	r3, r2
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	79fa      	ldrb	r2, [r7, #7]
 800f166:	4909      	ldr	r1, [pc, #36]	@ (800f18c <disk_initialize+0x4c>)
 800f168:	440a      	add	r2, r1
 800f16a:	7a12      	ldrb	r2, [r2, #8]
 800f16c:	4610      	mov	r0, r2
 800f16e:	4798      	blx	r3
 800f170:	4603      	mov	r3, r0
 800f172:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f174:	7bfb      	ldrb	r3, [r7, #15]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d103      	bne.n	800f182 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f17a:	79fb      	ldrb	r3, [r7, #7]
 800f17c:	4a03      	ldr	r2, [pc, #12]	@ (800f18c <disk_initialize+0x4c>)
 800f17e:	2101      	movs	r1, #1
 800f180:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f182:	7bfb      	ldrb	r3, [r7, #15]
}
 800f184:	4618      	mov	r0, r3
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	24002c00 	.word	0x24002c00

0800f190 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f190:	b590      	push	{r4, r7, lr}
 800f192:	b087      	sub	sp, #28
 800f194:	af00      	add	r7, sp, #0
 800f196:	60b9      	str	r1, [r7, #8]
 800f198:	607a      	str	r2, [r7, #4]
 800f19a:	603b      	str	r3, [r7, #0]
 800f19c:	4603      	mov	r3, r0
 800f19e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
 800f1a2:	4a0a      	ldr	r2, [pc, #40]	@ (800f1cc <disk_read+0x3c>)
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	4413      	add	r3, r2
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	689c      	ldr	r4, [r3, #8]
 800f1ac:	7bfb      	ldrb	r3, [r7, #15]
 800f1ae:	4a07      	ldr	r2, [pc, #28]	@ (800f1cc <disk_read+0x3c>)
 800f1b0:	4413      	add	r3, r2
 800f1b2:	7a18      	ldrb	r0, [r3, #8]
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	68b9      	ldr	r1, [r7, #8]
 800f1ba:	47a0      	blx	r4
 800f1bc:	4603      	mov	r3, r0
 800f1be:	75fb      	strb	r3, [r7, #23]
  return res;
 800f1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	371c      	adds	r7, #28
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd90      	pop	{r4, r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	24002c00 	.word	0x24002c00

0800f1d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f1d0:	b590      	push	{r4, r7, lr}
 800f1d2:	b087      	sub	sp, #28
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	60b9      	str	r1, [r7, #8]
 800f1d8:	607a      	str	r2, [r7, #4]
 800f1da:	603b      	str	r3, [r7, #0]
 800f1dc:	4603      	mov	r3, r0
 800f1de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f1e0:	7bfb      	ldrb	r3, [r7, #15]
 800f1e2:	4a0a      	ldr	r2, [pc, #40]	@ (800f20c <disk_write+0x3c>)
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	4413      	add	r3, r2
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	68dc      	ldr	r4, [r3, #12]
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
 800f1ee:	4a07      	ldr	r2, [pc, #28]	@ (800f20c <disk_write+0x3c>)
 800f1f0:	4413      	add	r3, r2
 800f1f2:	7a18      	ldrb	r0, [r3, #8]
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	68b9      	ldr	r1, [r7, #8]
 800f1fa:	47a0      	blx	r4
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800f200:	7dfb      	ldrb	r3, [r7, #23]
}
 800f202:	4618      	mov	r0, r3
 800f204:	371c      	adds	r7, #28
 800f206:	46bd      	mov	sp, r7
 800f208:	bd90      	pop	{r4, r7, pc}
 800f20a:	bf00      	nop
 800f20c:	24002c00 	.word	0x24002c00

0800f210 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b084      	sub	sp, #16
 800f214:	af00      	add	r7, sp, #0
 800f216:	4603      	mov	r3, r0
 800f218:	603a      	str	r2, [r7, #0]
 800f21a:	71fb      	strb	r3, [r7, #7]
 800f21c:	460b      	mov	r3, r1
 800f21e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f220:	79fb      	ldrb	r3, [r7, #7]
 800f222:	4a09      	ldr	r2, [pc, #36]	@ (800f248 <disk_ioctl+0x38>)
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	4413      	add	r3, r2
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	691b      	ldr	r3, [r3, #16]
 800f22c:	79fa      	ldrb	r2, [r7, #7]
 800f22e:	4906      	ldr	r1, [pc, #24]	@ (800f248 <disk_ioctl+0x38>)
 800f230:	440a      	add	r2, r1
 800f232:	7a10      	ldrb	r0, [r2, #8]
 800f234:	79b9      	ldrb	r1, [r7, #6]
 800f236:	683a      	ldr	r2, [r7, #0]
 800f238:	4798      	blx	r3
 800f23a:	4603      	mov	r3, r0
 800f23c:	73fb      	strb	r3, [r7, #15]
  return res;
 800f23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f240:	4618      	mov	r0, r3
 800f242:	3710      	adds	r7, #16
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	24002c00 	.word	0x24002c00

0800f24c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f24c:	b480      	push	{r7}
 800f24e:	b085      	sub	sp, #20
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	3301      	adds	r3, #1
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f25c:	89fb      	ldrh	r3, [r7, #14]
 800f25e:	021b      	lsls	r3, r3, #8
 800f260:	b21a      	sxth	r2, r3
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	b21b      	sxth	r3, r3
 800f268:	4313      	orrs	r3, r2
 800f26a:	b21b      	sxth	r3, r3
 800f26c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f26e:	89fb      	ldrh	r3, [r7, #14]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3714      	adds	r7, #20
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	3303      	adds	r3, #3
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	021b      	lsls	r3, r3, #8
 800f290:	687a      	ldr	r2, [r7, #4]
 800f292:	3202      	adds	r2, #2
 800f294:	7812      	ldrb	r2, [r2, #0]
 800f296:	4313      	orrs	r3, r2
 800f298:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	021b      	lsls	r3, r3, #8
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	3201      	adds	r2, #1
 800f2a2:	7812      	ldrb	r2, [r2, #0]
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	021b      	lsls	r3, r3, #8
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	7812      	ldrb	r2, [r2, #0]
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	60fb      	str	r3, [r7, #12]
	return rv;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3714      	adds	r7, #20
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c0:	4770      	bx	lr

0800f2c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f2c2:	b480      	push	{r7}
 800f2c4:	b083      	sub	sp, #12
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	1c5a      	adds	r2, r3, #1
 800f2d2:	607a      	str	r2, [r7, #4]
 800f2d4:	887a      	ldrh	r2, [r7, #2]
 800f2d6:	b2d2      	uxtb	r2, r2
 800f2d8:	701a      	strb	r2, [r3, #0]
 800f2da:	887b      	ldrh	r3, [r7, #2]
 800f2dc:	0a1b      	lsrs	r3, r3, #8
 800f2de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	1c5a      	adds	r2, r3, #1
 800f2e4:	607a      	str	r2, [r7, #4]
 800f2e6:	887a      	ldrh	r2, [r7, #2]
 800f2e8:	b2d2      	uxtb	r2, r2
 800f2ea:	701a      	strb	r2, [r3, #0]
}
 800f2ec:	bf00      	nop
 800f2ee:	370c      	adds	r7, #12
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	1c5a      	adds	r2, r3, #1
 800f306:	607a      	str	r2, [r7, #4]
 800f308:	683a      	ldr	r2, [r7, #0]
 800f30a:	b2d2      	uxtb	r2, r2
 800f30c:	701a      	strb	r2, [r3, #0]
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	0a1b      	lsrs	r3, r3, #8
 800f312:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	1c5a      	adds	r2, r3, #1
 800f318:	607a      	str	r2, [r7, #4]
 800f31a:	683a      	ldr	r2, [r7, #0]
 800f31c:	b2d2      	uxtb	r2, r2
 800f31e:	701a      	strb	r2, [r3, #0]
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	0a1b      	lsrs	r3, r3, #8
 800f324:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	1c5a      	adds	r2, r3, #1
 800f32a:	607a      	str	r2, [r7, #4]
 800f32c:	683a      	ldr	r2, [r7, #0]
 800f32e:	b2d2      	uxtb	r2, r2
 800f330:	701a      	strb	r2, [r3, #0]
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	0a1b      	lsrs	r3, r3, #8
 800f336:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	1c5a      	adds	r2, r3, #1
 800f33c:	607a      	str	r2, [r7, #4]
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	b2d2      	uxtb	r2, r2
 800f342:	701a      	strb	r2, [r3, #0]
}
 800f344:	bf00      	nop
 800f346:	370c      	adds	r7, #12
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f350:	b480      	push	{r7}
 800f352:	b087      	sub	sp, #28
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00d      	beq.n	800f386 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f36a:	693a      	ldr	r2, [r7, #16]
 800f36c:	1c53      	adds	r3, r2, #1
 800f36e:	613b      	str	r3, [r7, #16]
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	1c59      	adds	r1, r3, #1
 800f374:	6179      	str	r1, [r7, #20]
 800f376:	7812      	ldrb	r2, [r2, #0]
 800f378:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	3b01      	subs	r3, #1
 800f37e:	607b      	str	r3, [r7, #4]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d1f1      	bne.n	800f36a <mem_cpy+0x1a>
	}
}
 800f386:	bf00      	nop
 800f388:	371c      	adds	r7, #28
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr

0800f392 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f392:	b480      	push	{r7}
 800f394:	b087      	sub	sp, #28
 800f396:	af00      	add	r7, sp, #0
 800f398:	60f8      	str	r0, [r7, #12]
 800f39a:	60b9      	str	r1, [r7, #8]
 800f39c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	1c5a      	adds	r2, r3, #1
 800f3a6:	617a      	str	r2, [r7, #20]
 800f3a8:	68ba      	ldr	r2, [r7, #8]
 800f3aa:	b2d2      	uxtb	r2, r2
 800f3ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	3b01      	subs	r3, #1
 800f3b2:	607b      	str	r3, [r7, #4]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d1f3      	bne.n	800f3a2 <mem_set+0x10>
}
 800f3ba:	bf00      	nop
 800f3bc:	bf00      	nop
 800f3be:	371c      	adds	r7, #28
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f3c8:	b480      	push	{r7}
 800f3ca:	b089      	sub	sp, #36	@ 0x24
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	61fb      	str	r3, [r7, #28]
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	1c5a      	adds	r2, r3, #1
 800f3e4:	61fa      	str	r2, [r7, #28]
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	1c5a      	adds	r2, r3, #1
 800f3ee:	61ba      	str	r2, [r7, #24]
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	1acb      	subs	r3, r1, r3
 800f3f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	3b01      	subs	r3, #1
 800f3fa:	607b      	str	r3, [r7, #4]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d002      	beq.n	800f408 <mem_cmp+0x40>
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d0eb      	beq.n	800f3e0 <mem_cmp+0x18>

	return r;
 800f408:	697b      	ldr	r3, [r7, #20]
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3724      	adds	r7, #36	@ 0x24
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr

0800f416 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f416:	b480      	push	{r7}
 800f418:	b083      	sub	sp, #12
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
 800f41e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f420:	e002      	b.n	800f428 <chk_chr+0x12>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	3301      	adds	r3, #1
 800f426:	607b      	str	r3, [r7, #4]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d005      	beq.n	800f43c <chk_chr+0x26>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	461a      	mov	r2, r3
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	4293      	cmp	r3, r2
 800f43a:	d1f2      	bne.n	800f422 <chk_chr+0xc>
	return *str;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	781b      	ldrb	r3, [r3, #0]
}
 800f440:	4618      	mov	r0, r3
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b085      	sub	sp, #20
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f456:	2300      	movs	r3, #0
 800f458:	60bb      	str	r3, [r7, #8]
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	60fb      	str	r3, [r7, #12]
 800f45e:	e029      	b.n	800f4b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f460:	4a27      	ldr	r2, [pc, #156]	@ (800f500 <chk_lock+0xb4>)
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	011b      	lsls	r3, r3, #4
 800f466:	4413      	add	r3, r2
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d01d      	beq.n	800f4aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f46e:	4a24      	ldr	r2, [pc, #144]	@ (800f500 <chk_lock+0xb4>)
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	011b      	lsls	r3, r3, #4
 800f474:	4413      	add	r3, r2
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d116      	bne.n	800f4ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f480:	4a1f      	ldr	r2, [pc, #124]	@ (800f500 <chk_lock+0xb4>)
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	011b      	lsls	r3, r3, #4
 800f486:	4413      	add	r3, r2
 800f488:	3304      	adds	r3, #4
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f490:	429a      	cmp	r2, r3
 800f492:	d10c      	bne.n	800f4ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f494:	4a1a      	ldr	r2, [pc, #104]	@ (800f500 <chk_lock+0xb4>)
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	011b      	lsls	r3, r3, #4
 800f49a:	4413      	add	r3, r2
 800f49c:	3308      	adds	r3, #8
 800f49e:	681a      	ldr	r2, [r3, #0]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d102      	bne.n	800f4ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f4a8:	e007      	b.n	800f4ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	60fb      	str	r3, [r7, #12]
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	d9d2      	bls.n	800f460 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2b02      	cmp	r3, #2
 800f4be:	d109      	bne.n	800f4d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d102      	bne.n	800f4cc <chk_lock+0x80>
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	2b02      	cmp	r3, #2
 800f4ca:	d101      	bne.n	800f4d0 <chk_lock+0x84>
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	e010      	b.n	800f4f2 <chk_lock+0xa6>
 800f4d0:	2312      	movs	r3, #18
 800f4d2:	e00e      	b.n	800f4f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d108      	bne.n	800f4ec <chk_lock+0xa0>
 800f4da:	4a09      	ldr	r2, [pc, #36]	@ (800f500 <chk_lock+0xb4>)
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	011b      	lsls	r3, r3, #4
 800f4e0:	4413      	add	r3, r2
 800f4e2:	330c      	adds	r3, #12
 800f4e4:	881b      	ldrh	r3, [r3, #0]
 800f4e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4ea:	d101      	bne.n	800f4f0 <chk_lock+0xa4>
 800f4ec:	2310      	movs	r3, #16
 800f4ee:	e000      	b.n	800f4f2 <chk_lock+0xa6>
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3714      	adds	r7, #20
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	240029e0 	.word	0x240029e0

0800f504 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f50a:	2300      	movs	r3, #0
 800f50c:	607b      	str	r3, [r7, #4]
 800f50e:	e002      	b.n	800f516 <enq_lock+0x12>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	3301      	adds	r3, #1
 800f514:	607b      	str	r3, [r7, #4]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d806      	bhi.n	800f52a <enq_lock+0x26>
 800f51c:	4a09      	ldr	r2, [pc, #36]	@ (800f544 <enq_lock+0x40>)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	011b      	lsls	r3, r3, #4
 800f522:	4413      	add	r3, r2
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d1f2      	bne.n	800f510 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2b02      	cmp	r3, #2
 800f52e:	bf14      	ite	ne
 800f530:	2301      	movne	r3, #1
 800f532:	2300      	moveq	r3, #0
 800f534:	b2db      	uxtb	r3, r3
}
 800f536:	4618      	mov	r0, r3
 800f538:	370c      	adds	r7, #12
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop
 800f544:	240029e0 	.word	0x240029e0

0800f548 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f552:	2300      	movs	r3, #0
 800f554:	60fb      	str	r3, [r7, #12]
 800f556:	e01f      	b.n	800f598 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f558:	4a41      	ldr	r2, [pc, #260]	@ (800f660 <inc_lock+0x118>)
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	011b      	lsls	r3, r3, #4
 800f55e:	4413      	add	r3, r2
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	429a      	cmp	r2, r3
 800f568:	d113      	bne.n	800f592 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f56a:	4a3d      	ldr	r2, [pc, #244]	@ (800f660 <inc_lock+0x118>)
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	011b      	lsls	r3, r3, #4
 800f570:	4413      	add	r3, r2
 800f572:	3304      	adds	r3, #4
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d109      	bne.n	800f592 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f57e:	4a38      	ldr	r2, [pc, #224]	@ (800f660 <inc_lock+0x118>)
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	011b      	lsls	r3, r3, #4
 800f584:	4413      	add	r3, r2
 800f586:	3308      	adds	r3, #8
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f58e:	429a      	cmp	r2, r3
 800f590:	d006      	beq.n	800f5a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	3301      	adds	r3, #1
 800f596:	60fb      	str	r3, [r7, #12]
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d9dc      	bls.n	800f558 <inc_lock+0x10>
 800f59e:	e000      	b.n	800f5a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f5a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	2b02      	cmp	r3, #2
 800f5a6:	d132      	bne.n	800f60e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	60fb      	str	r3, [r7, #12]
 800f5ac:	e002      	b.n	800f5b4 <inc_lock+0x6c>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	60fb      	str	r3, [r7, #12]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d806      	bhi.n	800f5c8 <inc_lock+0x80>
 800f5ba:	4a29      	ldr	r2, [pc, #164]	@ (800f660 <inc_lock+0x118>)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	011b      	lsls	r3, r3, #4
 800f5c0:	4413      	add	r3, r2
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d1f2      	bne.n	800f5ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2b02      	cmp	r3, #2
 800f5cc:	d101      	bne.n	800f5d2 <inc_lock+0x8a>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	e040      	b.n	800f654 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681a      	ldr	r2, [r3, #0]
 800f5d6:	4922      	ldr	r1, [pc, #136]	@ (800f660 <inc_lock+0x118>)
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	011b      	lsls	r3, r3, #4
 800f5dc:	440b      	add	r3, r1
 800f5de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	689a      	ldr	r2, [r3, #8]
 800f5e4:	491e      	ldr	r1, [pc, #120]	@ (800f660 <inc_lock+0x118>)
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	011b      	lsls	r3, r3, #4
 800f5ea:	440b      	add	r3, r1
 800f5ec:	3304      	adds	r3, #4
 800f5ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	695a      	ldr	r2, [r3, #20]
 800f5f4:	491a      	ldr	r1, [pc, #104]	@ (800f660 <inc_lock+0x118>)
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	011b      	lsls	r3, r3, #4
 800f5fa:	440b      	add	r3, r1
 800f5fc:	3308      	adds	r3, #8
 800f5fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f600:	4a17      	ldr	r2, [pc, #92]	@ (800f660 <inc_lock+0x118>)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	011b      	lsls	r3, r3, #4
 800f606:	4413      	add	r3, r2
 800f608:	330c      	adds	r3, #12
 800f60a:	2200      	movs	r2, #0
 800f60c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d009      	beq.n	800f628 <inc_lock+0xe0>
 800f614:	4a12      	ldr	r2, [pc, #72]	@ (800f660 <inc_lock+0x118>)
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	011b      	lsls	r3, r3, #4
 800f61a:	4413      	add	r3, r2
 800f61c:	330c      	adds	r3, #12
 800f61e:	881b      	ldrh	r3, [r3, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d001      	beq.n	800f628 <inc_lock+0xe0>
 800f624:	2300      	movs	r3, #0
 800f626:	e015      	b.n	800f654 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d108      	bne.n	800f640 <inc_lock+0xf8>
 800f62e:	4a0c      	ldr	r2, [pc, #48]	@ (800f660 <inc_lock+0x118>)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	011b      	lsls	r3, r3, #4
 800f634:	4413      	add	r3, r2
 800f636:	330c      	adds	r3, #12
 800f638:	881b      	ldrh	r3, [r3, #0]
 800f63a:	3301      	adds	r3, #1
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	e001      	b.n	800f644 <inc_lock+0xfc>
 800f640:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f644:	4906      	ldr	r1, [pc, #24]	@ (800f660 <inc_lock+0x118>)
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	011b      	lsls	r3, r3, #4
 800f64a:	440b      	add	r3, r1
 800f64c:	330c      	adds	r3, #12
 800f64e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	3301      	adds	r3, #1
}
 800f654:	4618      	mov	r0, r3
 800f656:	3714      	adds	r7, #20
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr
 800f660:	240029e0 	.word	0x240029e0

0800f664 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	3b01      	subs	r3, #1
 800f670:	607b      	str	r3, [r7, #4]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2b01      	cmp	r3, #1
 800f676:	d825      	bhi.n	800f6c4 <dec_lock+0x60>
		n = Files[i].ctr;
 800f678:	4a17      	ldr	r2, [pc, #92]	@ (800f6d8 <dec_lock+0x74>)
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	011b      	lsls	r3, r3, #4
 800f67e:	4413      	add	r3, r2
 800f680:	330c      	adds	r3, #12
 800f682:	881b      	ldrh	r3, [r3, #0]
 800f684:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f686:	89fb      	ldrh	r3, [r7, #14]
 800f688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f68c:	d101      	bne.n	800f692 <dec_lock+0x2e>
 800f68e:	2300      	movs	r3, #0
 800f690:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f692:	89fb      	ldrh	r3, [r7, #14]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d002      	beq.n	800f69e <dec_lock+0x3a>
 800f698:	89fb      	ldrh	r3, [r7, #14]
 800f69a:	3b01      	subs	r3, #1
 800f69c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f69e:	4a0e      	ldr	r2, [pc, #56]	@ (800f6d8 <dec_lock+0x74>)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	011b      	lsls	r3, r3, #4
 800f6a4:	4413      	add	r3, r2
 800f6a6:	330c      	adds	r3, #12
 800f6a8:	89fa      	ldrh	r2, [r7, #14]
 800f6aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f6ac:	89fb      	ldrh	r3, [r7, #14]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d105      	bne.n	800f6be <dec_lock+0x5a>
 800f6b2:	4a09      	ldr	r2, [pc, #36]	@ (800f6d8 <dec_lock+0x74>)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	011b      	lsls	r3, r3, #4
 800f6b8:	4413      	add	r3, r2
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	737b      	strb	r3, [r7, #13]
 800f6c2:	e001      	b.n	800f6c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f6c4:	2302      	movs	r3, #2
 800f6c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f6c8:	7b7b      	ldrb	r3, [r7, #13]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3714      	adds	r7, #20
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop
 800f6d8:	240029e0 	.word	0x240029e0

0800f6dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b085      	sub	sp, #20
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	60fb      	str	r3, [r7, #12]
 800f6e8:	e010      	b.n	800f70c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f6ea:	4a0d      	ldr	r2, [pc, #52]	@ (800f720 <clear_lock+0x44>)
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	011b      	lsls	r3, r3, #4
 800f6f0:	4413      	add	r3, r2
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d105      	bne.n	800f706 <clear_lock+0x2a>
 800f6fa:	4a09      	ldr	r2, [pc, #36]	@ (800f720 <clear_lock+0x44>)
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	011b      	lsls	r3, r3, #4
 800f700:	4413      	add	r3, r2
 800f702:	2200      	movs	r2, #0
 800f704:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	3301      	adds	r3, #1
 800f70a:	60fb      	str	r3, [r7, #12]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d9eb      	bls.n	800f6ea <clear_lock+0xe>
	}
}
 800f712:	bf00      	nop
 800f714:	bf00      	nop
 800f716:	3714      	adds	r7, #20
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr
 800f720:	240029e0 	.word	0x240029e0

0800f724 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b086      	sub	sp, #24
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f72c:	2300      	movs	r3, #0
 800f72e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	78db      	ldrb	r3, [r3, #3]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d034      	beq.n	800f7a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f73c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	7858      	ldrb	r0, [r3, #1]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f748:	2301      	movs	r3, #1
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	f7ff fd40 	bl	800f1d0 <disk_write>
 800f750:	4603      	mov	r3, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	d002      	beq.n	800f75c <sync_window+0x38>
			res = FR_DISK_ERR;
 800f756:	2301      	movs	r3, #1
 800f758:	73fb      	strb	r3, [r7, #15]
 800f75a:	e022      	b.n	800f7a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f766:	697a      	ldr	r2, [r7, #20]
 800f768:	1ad2      	subs	r2, r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f76e:	429a      	cmp	r2, r3
 800f770:	d217      	bcs.n	800f7a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	789b      	ldrb	r3, [r3, #2]
 800f776:	613b      	str	r3, [r7, #16]
 800f778:	e010      	b.n	800f79c <sync_window+0x78>
					wsect += fs->fsize;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f77e:	697a      	ldr	r2, [r7, #20]
 800f780:	4413      	add	r3, r2
 800f782:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	7858      	ldrb	r0, [r3, #1]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f78e:	2301      	movs	r3, #1
 800f790:	697a      	ldr	r2, [r7, #20]
 800f792:	f7ff fd1d 	bl	800f1d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	3b01      	subs	r3, #1
 800f79a:	613b      	str	r3, [r7, #16]
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d8eb      	bhi.n	800f77a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3718      	adds	r7, #24
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7be:	683a      	ldr	r2, [r7, #0]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d01b      	beq.n	800f7fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f7ff ffad 	bl	800f724 <sync_window>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f7ce:	7bfb      	ldrb	r3, [r7, #15]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d113      	bne.n	800f7fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	7858      	ldrb	r0, [r3, #1]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f7de:	2301      	movs	r3, #1
 800f7e0:	683a      	ldr	r2, [r7, #0]
 800f7e2:	f7ff fcd5 	bl	800f190 <disk_read>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d004      	beq.n	800f7f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f7f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	683a      	ldr	r2, [r7, #0]
 800f7fa:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800f7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
	...

0800f808 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b084      	sub	sp, #16
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7ff ff87 	bl	800f724 <sync_window>
 800f816:	4603      	mov	r3, r0
 800f818:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f81a:	7bfb      	ldrb	r3, [r7, #15]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d159      	bne.n	800f8d4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	2b03      	cmp	r3, #3
 800f826:	d149      	bne.n	800f8bc <sync_fs+0xb4>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	791b      	ldrb	r3, [r3, #4]
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d145      	bne.n	800f8bc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	899b      	ldrh	r3, [r3, #12]
 800f83a:	461a      	mov	r2, r3
 800f83c:	2100      	movs	r1, #0
 800f83e:	f7ff fda8 	bl	800f392 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	333c      	adds	r3, #60	@ 0x3c
 800f846:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f84a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f84e:	4618      	mov	r0, r3
 800f850:	f7ff fd37 	bl	800f2c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	333c      	adds	r3, #60	@ 0x3c
 800f858:	4921      	ldr	r1, [pc, #132]	@ (800f8e0 <sync_fs+0xd8>)
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7ff fd4c 	bl	800f2f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	333c      	adds	r3, #60	@ 0x3c
 800f864:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f868:	491e      	ldr	r1, [pc, #120]	@ (800f8e4 <sync_fs+0xdc>)
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7ff fd44 	bl	800f2f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	333c      	adds	r3, #60	@ 0x3c
 800f874:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	699b      	ldr	r3, [r3, #24]
 800f87c:	4619      	mov	r1, r3
 800f87e:	4610      	mov	r0, r2
 800f880:	f7ff fd3a 	bl	800f2f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	333c      	adds	r3, #60	@ 0x3c
 800f888:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	695b      	ldr	r3, [r3, #20]
 800f890:	4619      	mov	r1, r3
 800f892:	4610      	mov	r0, r2
 800f894:	f7ff fd30 	bl	800f2f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f89c:	1c5a      	adds	r2, r3, #1
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	7858      	ldrb	r0, [r3, #1]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	f7ff fc8d 	bl	800f1d0 <disk_write>
			fs->fsi_flag = 0;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	785b      	ldrb	r3, [r3, #1]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	2100      	movs	r1, #0
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7ff fca3 	bl	800f210 <disk_ioctl>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d001      	beq.n	800f8d4 <sync_fs+0xcc>
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3710      	adds	r7, #16
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	41615252 	.word	0x41615252
 800f8e4:	61417272 	.word	0x61417272

0800f8e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	3b02      	subs	r3, #2
 800f8f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a1b      	ldr	r3, [r3, #32]
 800f8fc:	3b02      	subs	r3, #2
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	429a      	cmp	r2, r3
 800f902:	d301      	bcc.n	800f908 <clust2sect+0x20>
 800f904:	2300      	movs	r3, #0
 800f906:	e008      	b.n	800f91a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	895b      	ldrh	r3, [r3, #10]
 800f90c:	461a      	mov	r2, r3
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	fb03 f202 	mul.w	r2, r3, r2
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f918:	4413      	add	r3, r2
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	370c      	adds	r7, #12
 800f91e:	46bd      	mov	sp, r7
 800f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f924:	4770      	bx	lr

0800f926 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f926:	b580      	push	{r7, lr}
 800f928:	b086      	sub	sp, #24
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
 800f92e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d904      	bls.n	800f946 <get_fat+0x20>
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	6a1b      	ldr	r3, [r3, #32]
 800f940:	683a      	ldr	r2, [r7, #0]
 800f942:	429a      	cmp	r2, r3
 800f944:	d302      	bcc.n	800f94c <get_fat+0x26>
		val = 1;	/* Internal error */
 800f946:	2301      	movs	r3, #1
 800f948:	617b      	str	r3, [r7, #20]
 800f94a:	e0ba      	b.n	800fac2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f94c:	f04f 33ff 	mov.w	r3, #4294967295
 800f950:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	2b03      	cmp	r3, #3
 800f958:	f000 8082 	beq.w	800fa60 <get_fat+0x13a>
 800f95c:	2b03      	cmp	r3, #3
 800f95e:	f300 80a6 	bgt.w	800faae <get_fat+0x188>
 800f962:	2b01      	cmp	r3, #1
 800f964:	d002      	beq.n	800f96c <get_fat+0x46>
 800f966:	2b02      	cmp	r3, #2
 800f968:	d055      	beq.n	800fa16 <get_fat+0xf0>
 800f96a:	e0a0      	b.n	800faae <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	085b      	lsrs	r3, r3, #1
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	4413      	add	r3, r2
 800f978:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	899b      	ldrh	r3, [r3, #12]
 800f982:	4619      	mov	r1, r3
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	fbb3 f3f1 	udiv	r3, r3, r1
 800f98a:	4413      	add	r3, r2
 800f98c:	4619      	mov	r1, r3
 800f98e:	6938      	ldr	r0, [r7, #16]
 800f990:	f7ff ff0c 	bl	800f7ac <move_window>
 800f994:	4603      	mov	r3, r0
 800f996:	2b00      	cmp	r3, #0
 800f998:	f040 808c 	bne.w	800fab4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	1c5a      	adds	r2, r3, #1
 800f9a0:	60fa      	str	r2, [r7, #12]
 800f9a2:	693a      	ldr	r2, [r7, #16]
 800f9a4:	8992      	ldrh	r2, [r2, #12]
 800f9a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9aa:	fb01 f202 	mul.w	r2, r1, r2
 800f9ae:	1a9b      	subs	r3, r3, r2
 800f9b0:	693a      	ldr	r2, [r7, #16]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f9b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	899b      	ldrh	r3, [r3, #12]
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9ca:	4413      	add	r3, r2
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	6938      	ldr	r0, [r7, #16]
 800f9d0:	f7ff feec 	bl	800f7ac <move_window>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d16e      	bne.n	800fab8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	899b      	ldrh	r3, [r3, #12]
 800f9de:	461a      	mov	r2, r3
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9e6:	fb01 f202 	mul.w	r2, r1, r2
 800f9ea:	1a9b      	subs	r3, r3, r2
 800f9ec:	693a      	ldr	r2, [r7, #16]
 800f9ee:	4413      	add	r3, r2
 800f9f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f9f4:	021b      	lsls	r3, r3, #8
 800f9f6:	68ba      	ldr	r2, [r7, #8]
 800f9f8:	4313      	orrs	r3, r2
 800f9fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	f003 0301 	and.w	r3, r3, #1
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d002      	beq.n	800fa0c <get_fat+0xe6>
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	091b      	lsrs	r3, r3, #4
 800fa0a:	e002      	b.n	800fa12 <get_fat+0xec>
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa12:	617b      	str	r3, [r7, #20]
			break;
 800fa14:	e055      	b.n	800fac2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	899b      	ldrh	r3, [r3, #12]
 800fa1e:	085b      	lsrs	r3, r3, #1
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	4619      	mov	r1, r3
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa2a:	4413      	add	r3, r2
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	6938      	ldr	r0, [r7, #16]
 800fa30:	f7ff febc 	bl	800f7ac <move_window>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d140      	bne.n	800fabc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	005b      	lsls	r3, r3, #1
 800fa44:	693a      	ldr	r2, [r7, #16]
 800fa46:	8992      	ldrh	r2, [r2, #12]
 800fa48:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa4c:	fb00 f202 	mul.w	r2, r0, r2
 800fa50:	1a9b      	subs	r3, r3, r2
 800fa52:	440b      	add	r3, r1
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7ff fbf9 	bl	800f24c <ld_word>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	617b      	str	r3, [r7, #20]
			break;
 800fa5e:	e030      	b.n	800fac2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	899b      	ldrh	r3, [r3, #12]
 800fa68:	089b      	lsrs	r3, r3, #2
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa74:	4413      	add	r3, r2
 800fa76:	4619      	mov	r1, r3
 800fa78:	6938      	ldr	r0, [r7, #16]
 800fa7a:	f7ff fe97 	bl	800f7ac <move_window>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d11d      	bne.n	800fac0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	009b      	lsls	r3, r3, #2
 800fa8e:	693a      	ldr	r2, [r7, #16]
 800fa90:	8992      	ldrh	r2, [r2, #12]
 800fa92:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa96:	fb00 f202 	mul.w	r2, r0, r2
 800fa9a:	1a9b      	subs	r3, r3, r2
 800fa9c:	440b      	add	r3, r1
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7ff fbec 	bl	800f27c <ld_dword>
 800faa4:	4603      	mov	r3, r0
 800faa6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800faaa:	617b      	str	r3, [r7, #20]
			break;
 800faac:	e009      	b.n	800fac2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800faae:	2301      	movs	r3, #1
 800fab0:	617b      	str	r3, [r7, #20]
 800fab2:	e006      	b.n	800fac2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fab4:	bf00      	nop
 800fab6:	e004      	b.n	800fac2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fab8:	bf00      	nop
 800faba:	e002      	b.n	800fac2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fabc:	bf00      	nop
 800fabe:	e000      	b.n	800fac2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fac0:	bf00      	nop
		}
	}

	return val;
 800fac2:	697b      	ldr	r3, [r7, #20]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3718      	adds	r7, #24
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800facc:	b590      	push	{r4, r7, lr}
 800face:	b089      	sub	sp, #36	@ 0x24
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fad8:	2302      	movs	r3, #2
 800fada:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	2b01      	cmp	r3, #1
 800fae0:	f240 8109 	bls.w	800fcf6 <put_fat+0x22a>
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	6a1b      	ldr	r3, [r3, #32]
 800fae8:	68ba      	ldr	r2, [r7, #8]
 800faea:	429a      	cmp	r2, r3
 800faec:	f080 8103 	bcs.w	800fcf6 <put_fat+0x22a>
		switch (fs->fs_type) {
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2b03      	cmp	r3, #3
 800faf6:	f000 80b6 	beq.w	800fc66 <put_fat+0x19a>
 800fafa:	2b03      	cmp	r3, #3
 800fafc:	f300 80fb 	bgt.w	800fcf6 <put_fat+0x22a>
 800fb00:	2b01      	cmp	r3, #1
 800fb02:	d003      	beq.n	800fb0c <put_fat+0x40>
 800fb04:	2b02      	cmp	r3, #2
 800fb06:	f000 8083 	beq.w	800fc10 <put_fat+0x144>
 800fb0a:	e0f4      	b.n	800fcf6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	61bb      	str	r3, [r7, #24]
 800fb10:	69bb      	ldr	r3, [r7, #24]
 800fb12:	085b      	lsrs	r3, r3, #1
 800fb14:	69ba      	ldr	r2, [r7, #24]
 800fb16:	4413      	add	r3, r2
 800fb18:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	899b      	ldrh	r3, [r3, #12]
 800fb22:	4619      	mov	r1, r3
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb2a:	4413      	add	r3, r2
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	68f8      	ldr	r0, [r7, #12]
 800fb30:	f7ff fe3c 	bl	800f7ac <move_window>
 800fb34:	4603      	mov	r3, r0
 800fb36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fb38:	7ffb      	ldrb	r3, [r7, #31]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	f040 80d4 	bne.w	800fce8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fb46:	69bb      	ldr	r3, [r7, #24]
 800fb48:	1c5a      	adds	r2, r3, #1
 800fb4a:	61ba      	str	r2, [r7, #24]
 800fb4c:	68fa      	ldr	r2, [r7, #12]
 800fb4e:	8992      	ldrh	r2, [r2, #12]
 800fb50:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb54:	fb00 f202 	mul.w	r2, r0, r2
 800fb58:	1a9b      	subs	r3, r3, r2
 800fb5a:	440b      	add	r3, r1
 800fb5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	f003 0301 	and.w	r3, r3, #1
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d00d      	beq.n	800fb84 <put_fat+0xb8>
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	b25b      	sxtb	r3, r3
 800fb6e:	f003 030f 	and.w	r3, r3, #15
 800fb72:	b25a      	sxtb	r2, r3
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	b2db      	uxtb	r3, r3
 800fb78:	011b      	lsls	r3, r3, #4
 800fb7a:	b25b      	sxtb	r3, r3
 800fb7c:	4313      	orrs	r3, r2
 800fb7e:	b25b      	sxtb	r3, r3
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	e001      	b.n	800fb88 <put_fat+0xbc>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	697a      	ldr	r2, [r7, #20]
 800fb8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2201      	movs	r2, #1
 800fb90:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	899b      	ldrh	r3, [r3, #12]
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	69bb      	ldr	r3, [r7, #24]
 800fb9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fba2:	4413      	add	r3, r2
 800fba4:	4619      	mov	r1, r3
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	f7ff fe00 	bl	800f7ac <move_window>
 800fbac:	4603      	mov	r3, r0
 800fbae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fbb0:	7ffb      	ldrb	r3, [r7, #31]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f040 809a 	bne.w	800fcec <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	899b      	ldrh	r3, [r3, #12]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	69bb      	ldr	r3, [r7, #24]
 800fbc6:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbca:	fb00 f202 	mul.w	r2, r0, r2
 800fbce:	1a9b      	subs	r3, r3, r2
 800fbd0:	440b      	add	r3, r1
 800fbd2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	f003 0301 	and.w	r3, r3, #1
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d003      	beq.n	800fbe6 <put_fat+0x11a>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	091b      	lsrs	r3, r3, #4
 800fbe2:	b2db      	uxtb	r3, r3
 800fbe4:	e00e      	b.n	800fc04 <put_fat+0x138>
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	b25b      	sxtb	r3, r3
 800fbec:	f023 030f 	bic.w	r3, r3, #15
 800fbf0:	b25a      	sxtb	r2, r3
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	0a1b      	lsrs	r3, r3, #8
 800fbf6:	b25b      	sxtb	r3, r3
 800fbf8:	f003 030f 	and.w	r3, r3, #15
 800fbfc:	b25b      	sxtb	r3, r3
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	b25b      	sxtb	r3, r3
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	697a      	ldr	r2, [r7, #20]
 800fc06:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	70da      	strb	r2, [r3, #3]
			break;
 800fc0e:	e072      	b.n	800fcf6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	899b      	ldrh	r3, [r3, #12]
 800fc18:	085b      	lsrs	r3, r3, #1
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc24:	4413      	add	r3, r2
 800fc26:	4619      	mov	r1, r3
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f7ff fdbf 	bl	800f7ac <move_window>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc32:	7ffb      	ldrb	r3, [r7, #31]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d15b      	bne.n	800fcf0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	005b      	lsls	r3, r3, #1
 800fc42:	68fa      	ldr	r2, [r7, #12]
 800fc44:	8992      	ldrh	r2, [r2, #12]
 800fc46:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc4a:	fb00 f202 	mul.w	r2, r0, r2
 800fc4e:	1a9b      	subs	r3, r3, r2
 800fc50:	440b      	add	r3, r1
 800fc52:	687a      	ldr	r2, [r7, #4]
 800fc54:	b292      	uxth	r2, r2
 800fc56:	4611      	mov	r1, r2
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7ff fb32 	bl	800f2c2 <st_word>
			fs->wflag = 1;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2201      	movs	r2, #1
 800fc62:	70da      	strb	r2, [r3, #3]
			break;
 800fc64:	e047      	b.n	800fcf6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	899b      	ldrh	r3, [r3, #12]
 800fc6e:	089b      	lsrs	r3, r3, #2
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	4619      	mov	r1, r3
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc7a:	4413      	add	r3, r2
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f7ff fd94 	bl	800f7ac <move_window>
 800fc84:	4603      	mov	r3, r0
 800fc86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc88:	7ffb      	ldrb	r3, [r7, #31]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d132      	bne.n	800fcf4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	009b      	lsls	r3, r3, #2
 800fc9e:	68fa      	ldr	r2, [r7, #12]
 800fca0:	8992      	ldrh	r2, [r2, #12]
 800fca2:	fbb3 f0f2 	udiv	r0, r3, r2
 800fca6:	fb00 f202 	mul.w	r2, r0, r2
 800fcaa:	1a9b      	subs	r3, r3, r2
 800fcac:	440b      	add	r3, r1
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7ff fae4 	bl	800f27c <ld_dword>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800fcba:	4323      	orrs	r3, r4
 800fcbc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	8992      	ldrh	r2, [r2, #12]
 800fccc:	fbb3 f0f2 	udiv	r0, r3, r2
 800fcd0:	fb00 f202 	mul.w	r2, r0, r2
 800fcd4:	1a9b      	subs	r3, r3, r2
 800fcd6:	440b      	add	r3, r1
 800fcd8:	6879      	ldr	r1, [r7, #4]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7ff fb0c 	bl	800f2f8 <st_dword>
			fs->wflag = 1;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2201      	movs	r2, #1
 800fce4:	70da      	strb	r2, [r3, #3]
			break;
 800fce6:	e006      	b.n	800fcf6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800fce8:	bf00      	nop
 800fcea:	e004      	b.n	800fcf6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800fcec:	bf00      	nop
 800fcee:	e002      	b.n	800fcf6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800fcf0:	bf00      	nop
 800fcf2:	e000      	b.n	800fcf6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800fcf4:	bf00      	nop
		}
	}
	return res;
 800fcf6:	7ffb      	ldrb	r3, [r7, #31]
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3724      	adds	r7, #36	@ 0x24
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd90      	pop	{r4, r7, pc}

0800fd00 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b088      	sub	sp, #32
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	60f8      	str	r0, [r7, #12]
 800fd08:	60b9      	str	r1, [r7, #8]
 800fd0a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d904      	bls.n	800fd26 <remove_chain+0x26>
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	6a1b      	ldr	r3, [r3, #32]
 800fd20:	68ba      	ldr	r2, [r7, #8]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d301      	bcc.n	800fd2a <remove_chain+0x2a>
 800fd26:	2302      	movs	r3, #2
 800fd28:	e04b      	b.n	800fdc2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d00c      	beq.n	800fd4a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fd30:	f04f 32ff 	mov.w	r2, #4294967295
 800fd34:	6879      	ldr	r1, [r7, #4]
 800fd36:	69b8      	ldr	r0, [r7, #24]
 800fd38:	f7ff fec8 	bl	800facc <put_fat>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fd40:	7ffb      	ldrb	r3, [r7, #31]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d001      	beq.n	800fd4a <remove_chain+0x4a>
 800fd46:	7ffb      	ldrb	r3, [r7, #31]
 800fd48:	e03b      	b.n	800fdc2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fd4a:	68b9      	ldr	r1, [r7, #8]
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f7ff fdea 	bl	800f926 <get_fat>
 800fd52:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d031      	beq.n	800fdbe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d101      	bne.n	800fd64 <remove_chain+0x64>
 800fd60:	2302      	movs	r3, #2
 800fd62:	e02e      	b.n	800fdc2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd6a:	d101      	bne.n	800fd70 <remove_chain+0x70>
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	e028      	b.n	800fdc2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fd70:	2200      	movs	r2, #0
 800fd72:	68b9      	ldr	r1, [r7, #8]
 800fd74:	69b8      	ldr	r0, [r7, #24]
 800fd76:	f7ff fea9 	bl	800facc <put_fat>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fd7e:	7ffb      	ldrb	r3, [r7, #31]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d001      	beq.n	800fd88 <remove_chain+0x88>
 800fd84:	7ffb      	ldrb	r3, [r7, #31]
 800fd86:	e01c      	b.n	800fdc2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	699a      	ldr	r2, [r3, #24]
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	6a1b      	ldr	r3, [r3, #32]
 800fd90:	3b02      	subs	r3, #2
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d20b      	bcs.n	800fdae <remove_chain+0xae>
			fs->free_clst++;
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	699b      	ldr	r3, [r3, #24]
 800fd9a:	1c5a      	adds	r2, r3, #1
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800fda0:	69bb      	ldr	r3, [r7, #24]
 800fda2:	791b      	ldrb	r3, [r3, #4]
 800fda4:	f043 0301 	orr.w	r3, r3, #1
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	69bb      	ldr	r3, [r7, #24]
 800fdac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	6a1b      	ldr	r3, [r3, #32]
 800fdb6:	68ba      	ldr	r2, [r7, #8]
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d3c6      	bcc.n	800fd4a <remove_chain+0x4a>
 800fdbc:	e000      	b.n	800fdc0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fdbe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fdc0:	2300      	movs	r3, #0
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3720      	adds	r7, #32
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b088      	sub	sp, #32
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
 800fdd2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d10d      	bne.n	800fdfc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	695b      	ldr	r3, [r3, #20]
 800fde4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d004      	beq.n	800fdf6 <create_chain+0x2c>
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	6a1b      	ldr	r3, [r3, #32]
 800fdf0:	69ba      	ldr	r2, [r7, #24]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d31b      	bcc.n	800fe2e <create_chain+0x64>
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	61bb      	str	r3, [r7, #24]
 800fdfa:	e018      	b.n	800fe2e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fdfc:	6839      	ldr	r1, [r7, #0]
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f7ff fd91 	bl	800f926 <get_fat>
 800fe04:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d801      	bhi.n	800fe10 <create_chain+0x46>
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	e070      	b.n	800fef2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe16:	d101      	bne.n	800fe1c <create_chain+0x52>
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	e06a      	b.n	800fef2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	6a1b      	ldr	r3, [r3, #32]
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d201      	bcs.n	800fe2a <create_chain+0x60>
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	e063      	b.n	800fef2 <create_chain+0x128>
		scl = clst;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fe2e:	69bb      	ldr	r3, [r7, #24]
 800fe30:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	3301      	adds	r3, #1
 800fe36:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	6a1b      	ldr	r3, [r3, #32]
 800fe3c:	69fa      	ldr	r2, [r7, #28]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d307      	bcc.n	800fe52 <create_chain+0x88>
				ncl = 2;
 800fe42:	2302      	movs	r3, #2
 800fe44:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fe46:	69fa      	ldr	r2, [r7, #28]
 800fe48:	69bb      	ldr	r3, [r7, #24]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d901      	bls.n	800fe52 <create_chain+0x88>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	e04f      	b.n	800fef2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fe52:	69f9      	ldr	r1, [r7, #28]
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f7ff fd66 	bl	800f926 <get_fat>
 800fe5a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d00e      	beq.n	800fe80 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d003      	beq.n	800fe70 <create_chain+0xa6>
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe6e:	d101      	bne.n	800fe74 <create_chain+0xaa>
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	e03e      	b.n	800fef2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fe74:	69fa      	ldr	r2, [r7, #28]
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d1da      	bne.n	800fe32 <create_chain+0x68>
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	e038      	b.n	800fef2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fe80:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fe82:	f04f 32ff 	mov.w	r2, #4294967295
 800fe86:	69f9      	ldr	r1, [r7, #28]
 800fe88:	6938      	ldr	r0, [r7, #16]
 800fe8a:	f7ff fe1f 	bl	800facc <put_fat>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fe92:	7dfb      	ldrb	r3, [r7, #23]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d109      	bne.n	800feac <create_chain+0xe2>
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d006      	beq.n	800feac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fe9e:	69fa      	ldr	r2, [r7, #28]
 800fea0:	6839      	ldr	r1, [r7, #0]
 800fea2:	6938      	ldr	r0, [r7, #16]
 800fea4:	f7ff fe12 	bl	800facc <put_fat>
 800fea8:	4603      	mov	r3, r0
 800feaa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800feac:	7dfb      	ldrb	r3, [r7, #23]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d116      	bne.n	800fee0 <create_chain+0x116>
		fs->last_clst = ncl;
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	69fa      	ldr	r2, [r7, #28]
 800feb6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	699a      	ldr	r2, [r3, #24]
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	6a1b      	ldr	r3, [r3, #32]
 800fec0:	3b02      	subs	r3, #2
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d804      	bhi.n	800fed0 <create_chain+0x106>
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	699b      	ldr	r3, [r3, #24]
 800feca:	1e5a      	subs	r2, r3, #1
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	791b      	ldrb	r3, [r3, #4]
 800fed4:	f043 0301 	orr.w	r3, r3, #1
 800fed8:	b2da      	uxtb	r2, r3
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	711a      	strb	r2, [r3, #4]
 800fede:	e007      	b.n	800fef0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fee0:	7dfb      	ldrb	r3, [r7, #23]
 800fee2:	2b01      	cmp	r3, #1
 800fee4:	d102      	bne.n	800feec <create_chain+0x122>
 800fee6:	f04f 33ff 	mov.w	r3, #4294967295
 800feea:	e000      	b.n	800feee <create_chain+0x124>
 800feec:	2301      	movs	r3, #1
 800feee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fef0:	69fb      	ldr	r3, [r7, #28]
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3720      	adds	r7, #32
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fefa:	b480      	push	{r7}
 800fefc:	b087      	sub	sp, #28
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff0e:	3304      	adds	r3, #4
 800ff10:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	899b      	ldrh	r3, [r3, #12]
 800ff16:	461a      	mov	r2, r3
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff1e:	68fa      	ldr	r2, [r7, #12]
 800ff20:	8952      	ldrh	r2, [r2, #10]
 800ff22:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff26:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	1d1a      	adds	r2, r3, #4
 800ff2c:	613a      	str	r2, [r7, #16]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d101      	bne.n	800ff3c <clmt_clust+0x42>
 800ff38:	2300      	movs	r3, #0
 800ff3a:	e010      	b.n	800ff5e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ff3c:	697a      	ldr	r2, [r7, #20]
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d307      	bcc.n	800ff54 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ff44:	697a      	ldr	r2, [r7, #20]
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	617b      	str	r3, [r7, #20]
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	3304      	adds	r3, #4
 800ff50:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ff52:	e7e9      	b.n	800ff28 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ff54:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	4413      	add	r3, r2
}
 800ff5e:	4618      	mov	r0, r3
 800ff60:	371c      	adds	r7, #28
 800ff62:	46bd      	mov	sp, r7
 800ff64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff68:	4770      	bx	lr

0800ff6a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ff6a:	b580      	push	{r7, lr}
 800ff6c:	b086      	sub	sp, #24
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]
 800ff72:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ff80:	d204      	bcs.n	800ff8c <dir_sdi+0x22>
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	f003 031f 	and.w	r3, r3, #31
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d001      	beq.n	800ff90 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ff8c:	2302      	movs	r3, #2
 800ff8e:	e071      	b.n	8010074 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	683a      	ldr	r2, [r7, #0]
 800ff94:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	689b      	ldr	r3, [r3, #8]
 800ff9a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d106      	bne.n	800ffb0 <dir_sdi+0x46>
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	2b02      	cmp	r3, #2
 800ffa8:	d902      	bls.n	800ffb0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d10c      	bne.n	800ffd0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	095b      	lsrs	r3, r3, #5
 800ffba:	693a      	ldr	r2, [r7, #16]
 800ffbc:	8912      	ldrh	r2, [r2, #8]
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d301      	bcc.n	800ffc6 <dir_sdi+0x5c>
 800ffc2:	2302      	movs	r3, #2
 800ffc4:	e056      	b.n	8010074 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	61da      	str	r2, [r3, #28]
 800ffce:	e02d      	b.n	801002c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	895b      	ldrh	r3, [r3, #10]
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	899b      	ldrh	r3, [r3, #12]
 800ffda:	fb02 f303 	mul.w	r3, r2, r3
 800ffde:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ffe0:	e019      	b.n	8010016 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6979      	ldr	r1, [r7, #20]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7ff fc9d 	bl	800f926 <get_fat>
 800ffec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fff4:	d101      	bne.n	800fffa <dir_sdi+0x90>
 800fff6:	2301      	movs	r3, #1
 800fff8:	e03c      	b.n	8010074 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d904      	bls.n	801000a <dir_sdi+0xa0>
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	6a1b      	ldr	r3, [r3, #32]
 8010004:	697a      	ldr	r2, [r7, #20]
 8010006:	429a      	cmp	r2, r3
 8010008:	d301      	bcc.n	801000e <dir_sdi+0xa4>
 801000a:	2302      	movs	r3, #2
 801000c:	e032      	b.n	8010074 <dir_sdi+0x10a>
			ofs -= csz;
 801000e:	683a      	ldr	r2, [r7, #0]
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010016:	683a      	ldr	r2, [r7, #0]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	429a      	cmp	r2, r3
 801001c:	d2e1      	bcs.n	800ffe2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801001e:	6979      	ldr	r1, [r7, #20]
 8010020:	6938      	ldr	r0, [r7, #16]
 8010022:	f7ff fc61 	bl	800f8e8 <clust2sect>
 8010026:	4602      	mov	r2, r0
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	697a      	ldr	r2, [r7, #20]
 8010030:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	69db      	ldr	r3, [r3, #28]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d101      	bne.n	801003e <dir_sdi+0xd4>
 801003a:	2302      	movs	r3, #2
 801003c:	e01a      	b.n	8010074 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	69da      	ldr	r2, [r3, #28]
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	899b      	ldrh	r3, [r3, #12]
 8010046:	4619      	mov	r1, r3
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	fbb3 f3f1 	udiv	r3, r3, r1
 801004e:	441a      	add	r2, r3
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	899b      	ldrh	r3, [r3, #12]
 801005e:	461a      	mov	r2, r3
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	fbb3 f0f2 	udiv	r0, r3, r2
 8010066:	fb00 f202 	mul.w	r2, r0, r2
 801006a:	1a9b      	subs	r3, r3, r2
 801006c:	18ca      	adds	r2, r1, r3
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010072:	2300      	movs	r3, #0
}
 8010074:	4618      	mov	r0, r3
 8010076:	3718      	adds	r7, #24
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b086      	sub	sp, #24
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	695b      	ldr	r3, [r3, #20]
 8010090:	3320      	adds	r3, #32
 8010092:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	69db      	ldr	r3, [r3, #28]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d003      	beq.n	80100a4 <dir_next+0x28>
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80100a2:	d301      	bcc.n	80100a8 <dir_next+0x2c>
 80100a4:	2304      	movs	r3, #4
 80100a6:	e0bb      	b.n	8010220 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	899b      	ldrh	r3, [r3, #12]
 80100ac:	461a      	mov	r2, r3
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80100b4:	fb01 f202 	mul.w	r2, r1, r2
 80100b8:	1a9b      	subs	r3, r3, r2
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	f040 809d 	bne.w	80101fa <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	69db      	ldr	r3, [r3, #28]
 80100c4:	1c5a      	adds	r2, r3, #1
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	699b      	ldr	r3, [r3, #24]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d10b      	bne.n	80100ea <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	095b      	lsrs	r3, r3, #5
 80100d6:	68fa      	ldr	r2, [r7, #12]
 80100d8:	8912      	ldrh	r2, [r2, #8]
 80100da:	4293      	cmp	r3, r2
 80100dc:	f0c0 808d 	bcc.w	80101fa <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	61da      	str	r2, [r3, #28]
 80100e6:	2304      	movs	r3, #4
 80100e8:	e09a      	b.n	8010220 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	899b      	ldrh	r3, [r3, #12]
 80100ee:	461a      	mov	r2, r3
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80100f6:	68fa      	ldr	r2, [r7, #12]
 80100f8:	8952      	ldrh	r2, [r2, #10]
 80100fa:	3a01      	subs	r2, #1
 80100fc:	4013      	ands	r3, r2
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d17b      	bne.n	80101fa <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	699b      	ldr	r3, [r3, #24]
 8010108:	4619      	mov	r1, r3
 801010a:	4610      	mov	r0, r2
 801010c:	f7ff fc0b 	bl	800f926 <get_fat>
 8010110:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	2b01      	cmp	r3, #1
 8010116:	d801      	bhi.n	801011c <dir_next+0xa0>
 8010118:	2302      	movs	r3, #2
 801011a:	e081      	b.n	8010220 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010122:	d101      	bne.n	8010128 <dir_next+0xac>
 8010124:	2301      	movs	r3, #1
 8010126:	e07b      	b.n	8010220 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	6a1b      	ldr	r3, [r3, #32]
 801012c:	697a      	ldr	r2, [r7, #20]
 801012e:	429a      	cmp	r2, r3
 8010130:	d359      	bcc.n	80101e6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d104      	bne.n	8010142 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2200      	movs	r2, #0
 801013c:	61da      	str	r2, [r3, #28]
 801013e:	2304      	movs	r3, #4
 8010140:	e06e      	b.n	8010220 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010142:	687a      	ldr	r2, [r7, #4]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	699b      	ldr	r3, [r3, #24]
 8010148:	4619      	mov	r1, r3
 801014a:	4610      	mov	r0, r2
 801014c:	f7ff fe3d 	bl	800fdca <create_chain>
 8010150:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d101      	bne.n	801015c <dir_next+0xe0>
 8010158:	2307      	movs	r3, #7
 801015a:	e061      	b.n	8010220 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	2b01      	cmp	r3, #1
 8010160:	d101      	bne.n	8010166 <dir_next+0xea>
 8010162:	2302      	movs	r3, #2
 8010164:	e05c      	b.n	8010220 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801016c:	d101      	bne.n	8010172 <dir_next+0xf6>
 801016e:	2301      	movs	r3, #1
 8010170:	e056      	b.n	8010220 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f7ff fad6 	bl	800f724 <sync_window>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d001      	beq.n	8010182 <dir_next+0x106>
 801017e:	2301      	movs	r3, #1
 8010180:	e04e      	b.n	8010220 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	899b      	ldrh	r3, [r3, #12]
 801018c:	461a      	mov	r2, r3
 801018e:	2100      	movs	r1, #0
 8010190:	f7ff f8ff 	bl	800f392 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010194:	2300      	movs	r3, #0
 8010196:	613b      	str	r3, [r7, #16]
 8010198:	6979      	ldr	r1, [r7, #20]
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f7ff fba4 	bl	800f8e8 <clust2sect>
 80101a0:	4602      	mov	r2, r0
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80101a6:	e012      	b.n	80101ce <dir_next+0x152>
						fs->wflag = 1;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	2201      	movs	r2, #1
 80101ac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80101ae:	68f8      	ldr	r0, [r7, #12]
 80101b0:	f7ff fab8 	bl	800f724 <sync_window>
 80101b4:	4603      	mov	r3, r0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d001      	beq.n	80101be <dir_next+0x142>
 80101ba:	2301      	movs	r3, #1
 80101bc:	e030      	b.n	8010220 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	3301      	adds	r3, #1
 80101c2:	613b      	str	r3, [r7, #16]
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101c8:	1c5a      	adds	r2, r3, #1
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	895b      	ldrh	r3, [r3, #10]
 80101d2:	461a      	mov	r2, r3
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d3e6      	bcc.n	80101a8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	1ad2      	subs	r2, r2, r3
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	697a      	ldr	r2, [r7, #20]
 80101ea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80101ec:	6979      	ldr	r1, [r7, #20]
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	f7ff fb7a 	bl	800f8e8 <clust2sect>
 80101f4:	4602      	mov	r2, r0
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	68ba      	ldr	r2, [r7, #8]
 80101fe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	899b      	ldrh	r3, [r3, #12]
 801020a:	461a      	mov	r2, r3
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010212:	fb00 f202 	mul.w	r2, r0, r2
 8010216:	1a9b      	subs	r3, r3, r2
 8010218:	18ca      	adds	r2, r1, r3
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801021e:	2300      	movs	r3, #0
}
 8010220:	4618      	mov	r0, r3
 8010222:	3718      	adds	r7, #24
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b086      	sub	sp, #24
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010238:	2100      	movs	r1, #0
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f7ff fe95 	bl	800ff6a <dir_sdi>
 8010240:	4603      	mov	r3, r0
 8010242:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010244:	7dfb      	ldrb	r3, [r7, #23]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d12b      	bne.n	80102a2 <dir_alloc+0x7a>
		n = 0;
 801024a:	2300      	movs	r3, #0
 801024c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	69db      	ldr	r3, [r3, #28]
 8010252:	4619      	mov	r1, r3
 8010254:	68f8      	ldr	r0, [r7, #12]
 8010256:	f7ff faa9 	bl	800f7ac <move_window>
 801025a:	4603      	mov	r3, r0
 801025c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801025e:	7dfb      	ldrb	r3, [r7, #23]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d11d      	bne.n	80102a0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6a1b      	ldr	r3, [r3, #32]
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	2be5      	cmp	r3, #229	@ 0xe5
 801026c:	d004      	beq.n	8010278 <dir_alloc+0x50>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6a1b      	ldr	r3, [r3, #32]
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d107      	bne.n	8010288 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	3301      	adds	r3, #1
 801027c:	613b      	str	r3, [r7, #16]
 801027e:	693a      	ldr	r2, [r7, #16]
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	429a      	cmp	r2, r3
 8010284:	d102      	bne.n	801028c <dir_alloc+0x64>
 8010286:	e00c      	b.n	80102a2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010288:	2300      	movs	r3, #0
 801028a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801028c:	2101      	movs	r1, #1
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f7ff fef4 	bl	801007c <dir_next>
 8010294:	4603      	mov	r3, r0
 8010296:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010298:	7dfb      	ldrb	r3, [r7, #23]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d0d7      	beq.n	801024e <dir_alloc+0x26>
 801029e:	e000      	b.n	80102a2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80102a0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80102a2:	7dfb      	ldrb	r3, [r7, #23]
 80102a4:	2b04      	cmp	r3, #4
 80102a6:	d101      	bne.n	80102ac <dir_alloc+0x84>
 80102a8:	2307      	movs	r3, #7
 80102aa:	75fb      	strb	r3, [r7, #23]
	return res;
 80102ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3718      	adds	r7, #24
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b084      	sub	sp, #16
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	331a      	adds	r3, #26
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7fe ffc1 	bl	800f24c <ld_word>
 80102ca:	4603      	mov	r3, r0
 80102cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	2b03      	cmp	r3, #3
 80102d4:	d109      	bne.n	80102ea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	3314      	adds	r3, #20
 80102da:	4618      	mov	r0, r3
 80102dc:	f7fe ffb6 	bl	800f24c <ld_word>
 80102e0:	4603      	mov	r3, r0
 80102e2:	041b      	lsls	r3, r3, #16
 80102e4:	68fa      	ldr	r2, [r7, #12]
 80102e6:	4313      	orrs	r3, r2
 80102e8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80102ea:	68fb      	ldr	r3, [r7, #12]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3710      	adds	r7, #16
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	60b9      	str	r1, [r7, #8]
 80102fe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	331a      	adds	r3, #26
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	b292      	uxth	r2, r2
 8010308:	4611      	mov	r1, r2
 801030a:	4618      	mov	r0, r3
 801030c:	f7fe ffd9 	bl	800f2c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	2b03      	cmp	r3, #3
 8010316:	d109      	bne.n	801032c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	f103 0214 	add.w	r2, r3, #20
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	0c1b      	lsrs	r3, r3, #16
 8010322:	b29b      	uxth	r3, r3
 8010324:	4619      	mov	r1, r3
 8010326:	4610      	mov	r0, r2
 8010328:	f7fe ffcb 	bl	800f2c2 <st_word>
	}
}
 801032c:	bf00      	nop
 801032e:	3710      	adds	r7, #16
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8010334:	b590      	push	{r4, r7, lr}
 8010336:	b087      	sub	sp, #28
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	331a      	adds	r3, #26
 8010342:	4618      	mov	r0, r3
 8010344:	f7fe ff82 	bl	800f24c <ld_word>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d001      	beq.n	8010352 <cmp_lfn+0x1e>
 801034e:	2300      	movs	r3, #0
 8010350:	e059      	b.n	8010406 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801035a:	1e5a      	subs	r2, r3, #1
 801035c:	4613      	mov	r3, r2
 801035e:	005b      	lsls	r3, r3, #1
 8010360:	4413      	add	r3, r2
 8010362:	009b      	lsls	r3, r3, #2
 8010364:	4413      	add	r3, r2
 8010366:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010368:	2301      	movs	r3, #1
 801036a:	81fb      	strh	r3, [r7, #14]
 801036c:	2300      	movs	r3, #0
 801036e:	613b      	str	r3, [r7, #16]
 8010370:	e033      	b.n	80103da <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8010372:	4a27      	ldr	r2, [pc, #156]	@ (8010410 <cmp_lfn+0xdc>)
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	4413      	add	r3, r2
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	461a      	mov	r2, r3
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	4413      	add	r3, r2
 8010380:	4618      	mov	r0, r3
 8010382:	f7fe ff63 	bl	800f24c <ld_word>
 8010386:	4603      	mov	r3, r0
 8010388:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801038a:	89fb      	ldrh	r3, [r7, #14]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d01a      	beq.n	80103c6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	2bfe      	cmp	r3, #254	@ 0xfe
 8010394:	d812      	bhi.n	80103bc <cmp_lfn+0x88>
 8010396:	89bb      	ldrh	r3, [r7, #12]
 8010398:	4618      	mov	r0, r3
 801039a:	f002 fa9b 	bl	80128d4 <ff_wtoupper>
 801039e:	4603      	mov	r3, r0
 80103a0:	461c      	mov	r4, r3
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	1c5a      	adds	r2, r3, #1
 80103a6:	617a      	str	r2, [r7, #20]
 80103a8:	005b      	lsls	r3, r3, #1
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	4413      	add	r3, r2
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	4618      	mov	r0, r3
 80103b2:	f002 fa8f 	bl	80128d4 <ff_wtoupper>
 80103b6:	4603      	mov	r3, r0
 80103b8:	429c      	cmp	r4, r3
 80103ba:	d001      	beq.n	80103c0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80103bc:	2300      	movs	r3, #0
 80103be:	e022      	b.n	8010406 <cmp_lfn+0xd2>
			}
			wc = uc;
 80103c0:	89bb      	ldrh	r3, [r7, #12]
 80103c2:	81fb      	strh	r3, [r7, #14]
 80103c4:	e006      	b.n	80103d4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80103c6:	89bb      	ldrh	r3, [r7, #12]
 80103c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d001      	beq.n	80103d4 <cmp_lfn+0xa0>
 80103d0:	2300      	movs	r3, #0
 80103d2:	e018      	b.n	8010406 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	3301      	adds	r3, #1
 80103d8:	613b      	str	r3, [r7, #16]
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	2b0c      	cmp	r3, #12
 80103de:	d9c8      	bls.n	8010372 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d00b      	beq.n	8010404 <cmp_lfn+0xd0>
 80103ec:	89fb      	ldrh	r3, [r7, #14]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d008      	beq.n	8010404 <cmp_lfn+0xd0>
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	005b      	lsls	r3, r3, #1
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	4413      	add	r3, r2
 80103fa:	881b      	ldrh	r3, [r3, #0]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d001      	beq.n	8010404 <cmp_lfn+0xd0>
 8010400:	2300      	movs	r3, #0
 8010402:	e000      	b.n	8010406 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8010404:	2301      	movs	r3, #1
}
 8010406:	4618      	mov	r0, r3
 8010408:	371c      	adds	r7, #28
 801040a:	46bd      	mov	sp, r7
 801040c:	bd90      	pop	{r4, r7, pc}
 801040e:	bf00      	nop
 8010410:	08012e78 	.word	0x08012e78

08010414 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b088      	sub	sp, #32
 8010418:	af00      	add	r7, sp, #0
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	4611      	mov	r1, r2
 8010420:	461a      	mov	r2, r3
 8010422:	460b      	mov	r3, r1
 8010424:	71fb      	strb	r3, [r7, #7]
 8010426:	4613      	mov	r3, r2
 8010428:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	330d      	adds	r3, #13
 801042e:	79ba      	ldrb	r2, [r7, #6]
 8010430:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	330b      	adds	r3, #11
 8010436:	220f      	movs	r2, #15
 8010438:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	330c      	adds	r3, #12
 801043e:	2200      	movs	r2, #0
 8010440:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	331a      	adds	r3, #26
 8010446:	2100      	movs	r1, #0
 8010448:	4618      	mov	r0, r3
 801044a:	f7fe ff3a 	bl	800f2c2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801044e:	79fb      	ldrb	r3, [r7, #7]
 8010450:	1e5a      	subs	r2, r3, #1
 8010452:	4613      	mov	r3, r2
 8010454:	005b      	lsls	r3, r3, #1
 8010456:	4413      	add	r3, r2
 8010458:	009b      	lsls	r3, r3, #2
 801045a:	4413      	add	r3, r2
 801045c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801045e:	2300      	movs	r3, #0
 8010460:	82fb      	strh	r3, [r7, #22]
 8010462:	2300      	movs	r3, #0
 8010464:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010466:	8afb      	ldrh	r3, [r7, #22]
 8010468:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801046c:	4293      	cmp	r3, r2
 801046e:	d007      	beq.n	8010480 <put_lfn+0x6c>
 8010470:	69fb      	ldr	r3, [r7, #28]
 8010472:	1c5a      	adds	r2, r3, #1
 8010474:	61fa      	str	r2, [r7, #28]
 8010476:	005b      	lsls	r3, r3, #1
 8010478:	68fa      	ldr	r2, [r7, #12]
 801047a:	4413      	add	r3, r2
 801047c:	881b      	ldrh	r3, [r3, #0]
 801047e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010480:	4a17      	ldr	r2, [pc, #92]	@ (80104e0 <put_lfn+0xcc>)
 8010482:	69bb      	ldr	r3, [r7, #24]
 8010484:	4413      	add	r3, r2
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	461a      	mov	r2, r3
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	4413      	add	r3, r2
 801048e:	8afa      	ldrh	r2, [r7, #22]
 8010490:	4611      	mov	r1, r2
 8010492:	4618      	mov	r0, r3
 8010494:	f7fe ff15 	bl	800f2c2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010498:	8afb      	ldrh	r3, [r7, #22]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d102      	bne.n	80104a4 <put_lfn+0x90>
 801049e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80104a2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	3301      	adds	r3, #1
 80104a8:	61bb      	str	r3, [r7, #24]
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	2b0c      	cmp	r3, #12
 80104ae:	d9da      	bls.n	8010466 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80104b0:	8afb      	ldrh	r3, [r7, #22]
 80104b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d006      	beq.n	80104c8 <put_lfn+0xb4>
 80104ba:	69fb      	ldr	r3, [r7, #28]
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	68fa      	ldr	r2, [r7, #12]
 80104c0:	4413      	add	r3, r2
 80104c2:	881b      	ldrh	r3, [r3, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d103      	bne.n	80104d0 <put_lfn+0xbc>
 80104c8:	79fb      	ldrb	r3, [r7, #7]
 80104ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104ce:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	79fa      	ldrb	r2, [r7, #7]
 80104d4:	701a      	strb	r2, [r3, #0]
}
 80104d6:	bf00      	nop
 80104d8:	3720      	adds	r7, #32
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	08012e78 	.word	0x08012e78

080104e4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b08c      	sub	sp, #48	@ 0x30
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	607a      	str	r2, [r7, #4]
 80104f0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80104f2:	220b      	movs	r2, #11
 80104f4:	68b9      	ldr	r1, [r7, #8]
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f7fe ff2a 	bl	800f350 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	2b05      	cmp	r3, #5
 8010500:	d929      	bls.n	8010556 <gen_numname+0x72>
		sr = seq;
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8010506:	e020      	b.n	801054a <gen_numname+0x66>
			wc = *lfn++;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	1c9a      	adds	r2, r3, #2
 801050c:	607a      	str	r2, [r7, #4]
 801050e:	881b      	ldrh	r3, [r3, #0]
 8010510:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8010512:	2300      	movs	r3, #0
 8010514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010516:	e015      	b.n	8010544 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	005a      	lsls	r2, r3, #1
 801051c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801051e:	f003 0301 	and.w	r3, r3, #1
 8010522:	4413      	add	r3, r2
 8010524:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8010526:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010528:	085b      	lsrs	r3, r3, #1
 801052a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010532:	2b00      	cmp	r3, #0
 8010534:	d003      	beq.n	801053e <gen_numname+0x5a>
 8010536:	69fa      	ldr	r2, [r7, #28]
 8010538:	4b30      	ldr	r3, [pc, #192]	@ (80105fc <gen_numname+0x118>)
 801053a:	4053      	eors	r3, r2
 801053c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801053e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010540:	3301      	adds	r3, #1
 8010542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010546:	2b0f      	cmp	r3, #15
 8010548:	d9e6      	bls.n	8010518 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1da      	bne.n	8010508 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8010552:	69fb      	ldr	r3, [r7, #28]
 8010554:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8010556:	2307      	movs	r3, #7
 8010558:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	b2db      	uxtb	r3, r3
 801055e:	f003 030f 	and.w	r3, r3, #15
 8010562:	b2db      	uxtb	r3, r3
 8010564:	3330      	adds	r3, #48	@ 0x30
 8010566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801056a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801056e:	2b39      	cmp	r3, #57	@ 0x39
 8010570:	d904      	bls.n	801057c <gen_numname+0x98>
 8010572:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010576:	3307      	adds	r3, #7
 8010578:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801057c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801057e:	1e5a      	subs	r2, r3, #1
 8010580:	62ba      	str	r2, [r7, #40]	@ 0x28
 8010582:	3330      	adds	r3, #48	@ 0x30
 8010584:	443b      	add	r3, r7
 8010586:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801058a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	091b      	lsrs	r3, r3, #4
 8010592:	603b      	str	r3, [r7, #0]
	} while (seq);
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d1df      	bne.n	801055a <gen_numname+0x76>
	ns[i] = '~';
 801059a:	f107 0214 	add.w	r2, r7, #20
 801059e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a0:	4413      	add	r3, r2
 80105a2:	227e      	movs	r2, #126	@ 0x7e
 80105a4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80105a6:	2300      	movs	r3, #0
 80105a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80105aa:	e002      	b.n	80105b2 <gen_numname+0xce>
 80105ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ae:	3301      	adds	r3, #1
 80105b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80105b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d205      	bcs.n	80105c6 <gen_numname+0xe2>
 80105ba:	68fa      	ldr	r2, [r7, #12]
 80105bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105be:	4413      	add	r3, r2
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	2b20      	cmp	r3, #32
 80105c4:	d1f2      	bne.n	80105ac <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80105c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105c8:	2b07      	cmp	r3, #7
 80105ca:	d807      	bhi.n	80105dc <gen_numname+0xf8>
 80105cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ce:	1c5a      	adds	r2, r3, #1
 80105d0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80105d2:	3330      	adds	r3, #48	@ 0x30
 80105d4:	443b      	add	r3, r7
 80105d6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80105da:	e000      	b.n	80105de <gen_numname+0xfa>
 80105dc:	2120      	movs	r1, #32
 80105de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e0:	1c5a      	adds	r2, r3, #1
 80105e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80105e4:	68fa      	ldr	r2, [r7, #12]
 80105e6:	4413      	add	r3, r2
 80105e8:	460a      	mov	r2, r1
 80105ea:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80105ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ee:	2b07      	cmp	r3, #7
 80105f0:	d9e9      	bls.n	80105c6 <gen_numname+0xe2>
}
 80105f2:	bf00      	nop
 80105f4:	bf00      	nop
 80105f6:	3730      	adds	r7, #48	@ 0x30
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	00011021 	.word	0x00011021

08010600 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8010600:	b480      	push	{r7}
 8010602:	b085      	sub	sp, #20
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8010608:	2300      	movs	r3, #0
 801060a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801060c:	230b      	movs	r3, #11
 801060e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010610:	7bfb      	ldrb	r3, [r7, #15]
 8010612:	b2da      	uxtb	r2, r3
 8010614:	0852      	lsrs	r2, r2, #1
 8010616:	01db      	lsls	r3, r3, #7
 8010618:	4313      	orrs	r3, r2
 801061a:	b2da      	uxtb	r2, r3
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	1c59      	adds	r1, r3, #1
 8010620:	6079      	str	r1, [r7, #4]
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	4413      	add	r3, r2
 8010626:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	3b01      	subs	r3, #1
 801062c:	60bb      	str	r3, [r7, #8]
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d1ed      	bne.n	8010610 <sum_sfn+0x10>
	return sum;
 8010634:	7bfb      	ldrb	r3, [r7, #15]
}
 8010636:	4618      	mov	r0, r3
 8010638:	3714      	adds	r7, #20
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr

08010642 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b086      	sub	sp, #24
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010650:	2100      	movs	r1, #0
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f7ff fc89 	bl	800ff6a <dir_sdi>
 8010658:	4603      	mov	r3, r0
 801065a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801065c:	7dfb      	ldrb	r3, [r7, #23]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d001      	beq.n	8010666 <dir_find+0x24>
 8010662:	7dfb      	ldrb	r3, [r7, #23]
 8010664:	e0a9      	b.n	80107ba <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010666:	23ff      	movs	r3, #255	@ 0xff
 8010668:	753b      	strb	r3, [r7, #20]
 801066a:	7d3b      	ldrb	r3, [r7, #20]
 801066c:	757b      	strb	r3, [r7, #21]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f04f 32ff 	mov.w	r2, #4294967295
 8010674:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	69db      	ldr	r3, [r3, #28]
 801067a:	4619      	mov	r1, r3
 801067c:	6938      	ldr	r0, [r7, #16]
 801067e:	f7ff f895 	bl	800f7ac <move_window>
 8010682:	4603      	mov	r3, r0
 8010684:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010686:	7dfb      	ldrb	r3, [r7, #23]
 8010688:	2b00      	cmp	r3, #0
 801068a:	f040 8090 	bne.w	80107ae <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6a1b      	ldr	r3, [r3, #32]
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010696:	7dbb      	ldrb	r3, [r7, #22]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d102      	bne.n	80106a2 <dir_find+0x60>
 801069c:	2304      	movs	r3, #4
 801069e:	75fb      	strb	r3, [r7, #23]
 80106a0:	e08a      	b.n	80107b8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6a1b      	ldr	r3, [r3, #32]
 80106a6:	330b      	adds	r3, #11
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80106ae:	73fb      	strb	r3, [r7, #15]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	7bfa      	ldrb	r2, [r7, #15]
 80106b4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80106b6:	7dbb      	ldrb	r3, [r7, #22]
 80106b8:	2be5      	cmp	r3, #229	@ 0xe5
 80106ba:	d007      	beq.n	80106cc <dir_find+0x8a>
 80106bc:	7bfb      	ldrb	r3, [r7, #15]
 80106be:	f003 0308 	and.w	r3, r3, #8
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d009      	beq.n	80106da <dir_find+0x98>
 80106c6:	7bfb      	ldrb	r3, [r7, #15]
 80106c8:	2b0f      	cmp	r3, #15
 80106ca:	d006      	beq.n	80106da <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80106cc:	23ff      	movs	r3, #255	@ 0xff
 80106ce:	757b      	strb	r3, [r7, #21]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f04f 32ff 	mov.w	r2, #4294967295
 80106d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80106d8:	e05e      	b.n	8010798 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80106da:	7bfb      	ldrb	r3, [r7, #15]
 80106dc:	2b0f      	cmp	r3, #15
 80106de:	d136      	bne.n	801074e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80106e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d154      	bne.n	8010798 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80106ee:	7dbb      	ldrb	r3, [r7, #22]
 80106f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d00d      	beq.n	8010714 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6a1b      	ldr	r3, [r3, #32]
 80106fc:	7b5b      	ldrb	r3, [r3, #13]
 80106fe:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010700:	7dbb      	ldrb	r3, [r7, #22]
 8010702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010706:	75bb      	strb	r3, [r7, #22]
 8010708:	7dbb      	ldrb	r3, [r7, #22]
 801070a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	695a      	ldr	r2, [r3, #20]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010714:	7dba      	ldrb	r2, [r7, #22]
 8010716:	7d7b      	ldrb	r3, [r7, #21]
 8010718:	429a      	cmp	r2, r3
 801071a:	d115      	bne.n	8010748 <dir_find+0x106>
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6a1b      	ldr	r3, [r3, #32]
 8010720:	330d      	adds	r3, #13
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	7d3a      	ldrb	r2, [r7, #20]
 8010726:	429a      	cmp	r2, r3
 8010728:	d10e      	bne.n	8010748 <dir_find+0x106>
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	691a      	ldr	r2, [r3, #16]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6a1b      	ldr	r3, [r3, #32]
 8010732:	4619      	mov	r1, r3
 8010734:	4610      	mov	r0, r2
 8010736:	f7ff fdfd 	bl	8010334 <cmp_lfn>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d003      	beq.n	8010748 <dir_find+0x106>
 8010740:	7d7b      	ldrb	r3, [r7, #21]
 8010742:	3b01      	subs	r3, #1
 8010744:	b2db      	uxtb	r3, r3
 8010746:	e000      	b.n	801074a <dir_find+0x108>
 8010748:	23ff      	movs	r3, #255	@ 0xff
 801074a:	757b      	strb	r3, [r7, #21]
 801074c:	e024      	b.n	8010798 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801074e:	7d7b      	ldrb	r3, [r7, #21]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d109      	bne.n	8010768 <dir_find+0x126>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6a1b      	ldr	r3, [r3, #32]
 8010758:	4618      	mov	r0, r3
 801075a:	f7ff ff51 	bl	8010600 <sum_sfn>
 801075e:	4603      	mov	r3, r0
 8010760:	461a      	mov	r2, r3
 8010762:	7d3b      	ldrb	r3, [r7, #20]
 8010764:	4293      	cmp	r3, r2
 8010766:	d024      	beq.n	80107b2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801076e:	f003 0301 	and.w	r3, r3, #1
 8010772:	2b00      	cmp	r3, #0
 8010774:	d10a      	bne.n	801078c <dir_find+0x14a>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6a18      	ldr	r0, [r3, #32]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	3324      	adds	r3, #36	@ 0x24
 801077e:	220b      	movs	r2, #11
 8010780:	4619      	mov	r1, r3
 8010782:	f7fe fe21 	bl	800f3c8 <mem_cmp>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d014      	beq.n	80107b6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801078c:	23ff      	movs	r3, #255	@ 0xff
 801078e:	757b      	strb	r3, [r7, #21]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f04f 32ff 	mov.w	r2, #4294967295
 8010796:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010798:	2100      	movs	r1, #0
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f7ff fc6e 	bl	801007c <dir_next>
 80107a0:	4603      	mov	r3, r0
 80107a2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80107a4:	7dfb      	ldrb	r3, [r7, #23]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	f43f af65 	beq.w	8010676 <dir_find+0x34>
 80107ac:	e004      	b.n	80107b8 <dir_find+0x176>
		if (res != FR_OK) break;
 80107ae:	bf00      	nop
 80107b0:	e002      	b.n	80107b8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80107b2:	bf00      	nop
 80107b4:	e000      	b.n	80107b8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80107b6:	bf00      	nop

	return res;
 80107b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3718      	adds	r7, #24
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
	...

080107c4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b08c      	sub	sp, #48	@ 0x30
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80107d8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d001      	beq.n	80107e4 <dir_register+0x20>
 80107e0:	2306      	movs	r3, #6
 80107e2:	e0e0      	b.n	80109a6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80107e4:	2300      	movs	r3, #0
 80107e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80107e8:	e002      	b.n	80107f0 <dir_register+0x2c>
 80107ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ec:	3301      	adds	r3, #1
 80107ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	691a      	ldr	r2, [r3, #16]
 80107f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107f6:	005b      	lsls	r3, r3, #1
 80107f8:	4413      	add	r3, r2
 80107fa:	881b      	ldrh	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d1f4      	bne.n	80107ea <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8010806:	f107 030c 	add.w	r3, r7, #12
 801080a:	220c      	movs	r2, #12
 801080c:	4618      	mov	r0, r3
 801080e:	f7fe fd9f 	bl	800f350 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010812:	7dfb      	ldrb	r3, [r7, #23]
 8010814:	f003 0301 	and.w	r3, r3, #1
 8010818:	2b00      	cmp	r3, #0
 801081a:	d032      	beq.n	8010882 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2240      	movs	r2, #64	@ 0x40
 8010820:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8010824:	2301      	movs	r3, #1
 8010826:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010828:	e016      	b.n	8010858 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8010830:	69fb      	ldr	r3, [r7, #28]
 8010832:	691a      	ldr	r2, [r3, #16]
 8010834:	f107 010c 	add.w	r1, r7, #12
 8010838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801083a:	f7ff fe53 	bl	80104e4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7ff feff 	bl	8010642 <dir_find>
 8010844:	4603      	mov	r3, r0
 8010846:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801084a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801084e:	2b00      	cmp	r3, #0
 8010850:	d106      	bne.n	8010860 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010854:	3301      	adds	r3, #1
 8010856:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085a:	2b63      	cmp	r3, #99	@ 0x63
 801085c:	d9e5      	bls.n	801082a <dir_register+0x66>
 801085e:	e000      	b.n	8010862 <dir_register+0x9e>
			if (res != FR_OK) break;
 8010860:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010864:	2b64      	cmp	r3, #100	@ 0x64
 8010866:	d101      	bne.n	801086c <dir_register+0xa8>
 8010868:	2307      	movs	r3, #7
 801086a:	e09c      	b.n	80109a6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801086c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010870:	2b04      	cmp	r3, #4
 8010872:	d002      	beq.n	801087a <dir_register+0xb6>
 8010874:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010878:	e095      	b.n	80109a6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801087a:	7dfa      	ldrb	r2, [r7, #23]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010882:	7dfb      	ldrb	r3, [r7, #23]
 8010884:	f003 0302 	and.w	r3, r3, #2
 8010888:	2b00      	cmp	r3, #0
 801088a:	d007      	beq.n	801089c <dir_register+0xd8>
 801088c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801088e:	330c      	adds	r3, #12
 8010890:	4a47      	ldr	r2, [pc, #284]	@ (80109b0 <dir_register+0x1ec>)
 8010892:	fba2 2303 	umull	r2, r3, r2, r3
 8010896:	089b      	lsrs	r3, r3, #2
 8010898:	3301      	adds	r3, #1
 801089a:	e000      	b.n	801089e <dir_register+0xda>
 801089c:	2301      	movs	r3, #1
 801089e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80108a0:	6a39      	ldr	r1, [r7, #32]
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7ff fcc0 	bl	8010228 <dir_alloc>
 80108a8:	4603      	mov	r3, r0
 80108aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80108ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d148      	bne.n	8010948 <dir_register+0x184>
 80108b6:	6a3b      	ldr	r3, [r7, #32]
 80108b8:	3b01      	subs	r3, #1
 80108ba:	623b      	str	r3, [r7, #32]
 80108bc:	6a3b      	ldr	r3, [r7, #32]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d042      	beq.n	8010948 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	695a      	ldr	r2, [r3, #20]
 80108c6:	6a3b      	ldr	r3, [r7, #32]
 80108c8:	015b      	lsls	r3, r3, #5
 80108ca:	1ad3      	subs	r3, r2, r3
 80108cc:	4619      	mov	r1, r3
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7ff fb4b 	bl	800ff6a <dir_sdi>
 80108d4:	4603      	mov	r3, r0
 80108d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80108da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d132      	bne.n	8010948 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	3324      	adds	r3, #36	@ 0x24
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7ff fe8a 	bl	8010600 <sum_sfn>
 80108ec:	4603      	mov	r3, r0
 80108ee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	69db      	ldr	r3, [r3, #28]
 80108f4:	4619      	mov	r1, r3
 80108f6:	69f8      	ldr	r0, [r7, #28]
 80108f8:	f7fe ff58 	bl	800f7ac <move_window>
 80108fc:	4603      	mov	r3, r0
 80108fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8010902:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010906:	2b00      	cmp	r3, #0
 8010908:	d11d      	bne.n	8010946 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	6918      	ldr	r0, [r3, #16]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6a19      	ldr	r1, [r3, #32]
 8010912:	6a3b      	ldr	r3, [r7, #32]
 8010914:	b2da      	uxtb	r2, r3
 8010916:	7efb      	ldrb	r3, [r7, #27]
 8010918:	f7ff fd7c 	bl	8010414 <put_lfn>
				fs->wflag = 1;
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	2201      	movs	r2, #1
 8010920:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010922:	2100      	movs	r1, #0
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f7ff fba9 	bl	801007c <dir_next>
 801092a:	4603      	mov	r3, r0
 801092c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8010930:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010934:	2b00      	cmp	r3, #0
 8010936:	d107      	bne.n	8010948 <dir_register+0x184>
 8010938:	6a3b      	ldr	r3, [r7, #32]
 801093a:	3b01      	subs	r3, #1
 801093c:	623b      	str	r3, [r7, #32]
 801093e:	6a3b      	ldr	r3, [r7, #32]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1d5      	bne.n	80108f0 <dir_register+0x12c>
 8010944:	e000      	b.n	8010948 <dir_register+0x184>
				if (res != FR_OK) break;
 8010946:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010948:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801094c:	2b00      	cmp	r3, #0
 801094e:	d128      	bne.n	80109a2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	69db      	ldr	r3, [r3, #28]
 8010954:	4619      	mov	r1, r3
 8010956:	69f8      	ldr	r0, [r7, #28]
 8010958:	f7fe ff28 	bl	800f7ac <move_window>
 801095c:	4603      	mov	r3, r0
 801095e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8010962:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010966:	2b00      	cmp	r3, #0
 8010968:	d11b      	bne.n	80109a2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6a1b      	ldr	r3, [r3, #32]
 801096e:	2220      	movs	r2, #32
 8010970:	2100      	movs	r1, #0
 8010972:	4618      	mov	r0, r3
 8010974:	f7fe fd0d 	bl	800f392 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6a18      	ldr	r0, [r3, #32]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	3324      	adds	r3, #36	@ 0x24
 8010980:	220b      	movs	r2, #11
 8010982:	4619      	mov	r1, r3
 8010984:	f7fe fce4 	bl	800f350 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6a1b      	ldr	r3, [r3, #32]
 8010992:	330c      	adds	r3, #12
 8010994:	f002 0218 	and.w	r2, r2, #24
 8010998:	b2d2      	uxtb	r2, r2
 801099a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801099c:	69fb      	ldr	r3, [r7, #28]
 801099e:	2201      	movs	r2, #1
 80109a0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80109a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3730      	adds	r7, #48	@ 0x30
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	4ec4ec4f 	.word	0x4ec4ec4f

080109b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b08a      	sub	sp, #40	@ 0x28
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	613b      	str	r3, [r7, #16]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	691b      	ldr	r3, [r3, #16]
 80109ca:	60fb      	str	r3, [r7, #12]
 80109cc:	2300      	movs	r3, #0
 80109ce:	617b      	str	r3, [r7, #20]
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80109d4:	69bb      	ldr	r3, [r7, #24]
 80109d6:	1c5a      	adds	r2, r3, #1
 80109d8:	61ba      	str	r2, [r7, #24]
 80109da:	693a      	ldr	r2, [r7, #16]
 80109dc:	4413      	add	r3, r2
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80109e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109e4:	2b1f      	cmp	r3, #31
 80109e6:	d940      	bls.n	8010a6a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80109e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80109ec:	d006      	beq.n	80109fc <create_name+0x48>
 80109ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80109f2:	d110      	bne.n	8010a16 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80109f4:	e002      	b.n	80109fc <create_name+0x48>
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	3301      	adds	r3, #1
 80109fa:	61bb      	str	r3, [r7, #24]
 80109fc:	693a      	ldr	r2, [r7, #16]
 80109fe:	69bb      	ldr	r3, [r7, #24]
 8010a00:	4413      	add	r3, r2
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	2b2f      	cmp	r3, #47	@ 0x2f
 8010a06:	d0f6      	beq.n	80109f6 <create_name+0x42>
 8010a08:	693a      	ldr	r2, [r7, #16]
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	4413      	add	r3, r2
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	2b5c      	cmp	r3, #92	@ 0x5c
 8010a12:	d0f0      	beq.n	80109f6 <create_name+0x42>
			break;
 8010a14:	e02a      	b.n	8010a6c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	2bfe      	cmp	r3, #254	@ 0xfe
 8010a1a:	d901      	bls.n	8010a20 <create_name+0x6c>
 8010a1c:	2306      	movs	r3, #6
 8010a1e:	e1ca      	b.n	8010db6 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010a20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010a26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a28:	2101      	movs	r1, #1
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f001 ff16 	bl	801285c <ff_convert>
 8010a30:	4603      	mov	r3, r0
 8010a32:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010a34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d101      	bne.n	8010a3e <create_name+0x8a>
 8010a3a:	2306      	movs	r3, #6
 8010a3c:	e1bb      	b.n	8010db6 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010a3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a40:	2b7f      	cmp	r3, #127	@ 0x7f
 8010a42:	d809      	bhi.n	8010a58 <create_name+0xa4>
 8010a44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a46:	4619      	mov	r1, r3
 8010a48:	489e      	ldr	r0, [pc, #632]	@ (8010cc4 <create_name+0x310>)
 8010a4a:	f7fe fce4 	bl	800f416 <chk_chr>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d001      	beq.n	8010a58 <create_name+0xa4>
 8010a54:	2306      	movs	r3, #6
 8010a56:	e1ae      	b.n	8010db6 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	1c5a      	adds	r2, r3, #1
 8010a5c:	617a      	str	r2, [r7, #20]
 8010a5e:	005b      	lsls	r3, r3, #1
 8010a60:	68fa      	ldr	r2, [r7, #12]
 8010a62:	4413      	add	r3, r2
 8010a64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010a66:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010a68:	e7b4      	b.n	80109d4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010a6a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010a6c:	693a      	ldr	r2, [r7, #16]
 8010a6e:	69bb      	ldr	r3, [r7, #24]
 8010a70:	441a      	add	r2, r3
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010a76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a78:	2b1f      	cmp	r3, #31
 8010a7a:	d801      	bhi.n	8010a80 <create_name+0xcc>
 8010a7c:	2304      	movs	r3, #4
 8010a7e:	e000      	b.n	8010a82 <create_name+0xce>
 8010a80:	2300      	movs	r3, #0
 8010a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d109      	bne.n	8010aa0 <create_name+0xec>
 8010a8c:	697a      	ldr	r2, [r7, #20]
 8010a8e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010a92:	4413      	add	r3, r2
 8010a94:	005b      	lsls	r3, r3, #1
 8010a96:	68fa      	ldr	r2, [r7, #12]
 8010a98:	4413      	add	r3, r2
 8010a9a:	881b      	ldrh	r3, [r3, #0]
 8010a9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a9e:	d015      	beq.n	8010acc <create_name+0x118>
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	2b02      	cmp	r3, #2
 8010aa4:	d14d      	bne.n	8010b42 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8010aa6:	697a      	ldr	r2, [r7, #20]
 8010aa8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010aac:	4413      	add	r3, r2
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	68fa      	ldr	r2, [r7, #12]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	881b      	ldrh	r3, [r3, #0]
 8010ab6:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ab8:	d143      	bne.n	8010b42 <create_name+0x18e>
 8010aba:	697a      	ldr	r2, [r7, #20]
 8010abc:	4b82      	ldr	r3, [pc, #520]	@ (8010cc8 <create_name+0x314>)
 8010abe:	4413      	add	r3, r2
 8010ac0:	005b      	lsls	r3, r3, #1
 8010ac2:	68fa      	ldr	r2, [r7, #12]
 8010ac4:	4413      	add	r3, r2
 8010ac6:	881b      	ldrh	r3, [r3, #0]
 8010ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8010aca:	d13a      	bne.n	8010b42 <create_name+0x18e>
		lfn[di] = 0;
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	005b      	lsls	r3, r3, #1
 8010ad0:	68fa      	ldr	r2, [r7, #12]
 8010ad2:	4413      	add	r3, r2
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010ad8:	2300      	movs	r3, #0
 8010ada:	623b      	str	r3, [r7, #32]
 8010adc:	e00f      	b.n	8010afe <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8010ade:	6a3a      	ldr	r2, [r7, #32]
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d201      	bcs.n	8010aea <create_name+0x136>
 8010ae6:	212e      	movs	r1, #46	@ 0x2e
 8010ae8:	e000      	b.n	8010aec <create_name+0x138>
 8010aea:	2120      	movs	r1, #32
 8010aec:	687a      	ldr	r2, [r7, #4]
 8010aee:	6a3b      	ldr	r3, [r7, #32]
 8010af0:	4413      	add	r3, r2
 8010af2:	3324      	adds	r3, #36	@ 0x24
 8010af4:	460a      	mov	r2, r1
 8010af6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010af8:	6a3b      	ldr	r3, [r7, #32]
 8010afa:	3301      	adds	r3, #1
 8010afc:	623b      	str	r3, [r7, #32]
 8010afe:	6a3b      	ldr	r3, [r7, #32]
 8010b00:	2b0a      	cmp	r3, #10
 8010b02:	d9ec      	bls.n	8010ade <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8010b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b08:	f043 0320 	orr.w	r3, r3, #32
 8010b0c:	b2d9      	uxtb	r1, r3
 8010b0e:	687a      	ldr	r2, [r7, #4]
 8010b10:	6a3b      	ldr	r3, [r7, #32]
 8010b12:	4413      	add	r3, r2
 8010b14:	3324      	adds	r3, #36	@ 0x24
 8010b16:	460a      	mov	r2, r1
 8010b18:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	e14b      	b.n	8010db6 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 8010b1e:	697a      	ldr	r2, [r7, #20]
 8010b20:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010b24:	4413      	add	r3, r2
 8010b26:	005b      	lsls	r3, r3, #1
 8010b28:	68fa      	ldr	r2, [r7, #12]
 8010b2a:	4413      	add	r3, r2
 8010b2c:	881b      	ldrh	r3, [r3, #0]
 8010b2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8010b30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b32:	2b20      	cmp	r3, #32
 8010b34:	d002      	beq.n	8010b3c <create_name+0x188>
 8010b36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b38:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b3a:	d106      	bne.n	8010b4a <create_name+0x196>
		di--;
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	3b01      	subs	r3, #1
 8010b40:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d1ea      	bne.n	8010b1e <create_name+0x16a>
 8010b48:	e000      	b.n	8010b4c <create_name+0x198>
		if (w != ' ' && w != '.') break;
 8010b4a:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	005b      	lsls	r3, r3, #1
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	4413      	add	r3, r2
 8010b54:	2200      	movs	r2, #0
 8010b56:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d101      	bne.n	8010b62 <create_name+0x1ae>
 8010b5e:	2306      	movs	r3, #6
 8010b60:	e129      	b.n	8010db6 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	3324      	adds	r3, #36	@ 0x24
 8010b66:	220b      	movs	r2, #11
 8010b68:	2120      	movs	r1, #32
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fe fc11 	bl	800f392 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010b70:	2300      	movs	r3, #0
 8010b72:	61bb      	str	r3, [r7, #24]
 8010b74:	e002      	b.n	8010b7c <create_name+0x1c8>
 8010b76:	69bb      	ldr	r3, [r7, #24]
 8010b78:	3301      	adds	r3, #1
 8010b7a:	61bb      	str	r3, [r7, #24]
 8010b7c:	69bb      	ldr	r3, [r7, #24]
 8010b7e:	005b      	lsls	r3, r3, #1
 8010b80:	68fa      	ldr	r2, [r7, #12]
 8010b82:	4413      	add	r3, r2
 8010b84:	881b      	ldrh	r3, [r3, #0]
 8010b86:	2b20      	cmp	r3, #32
 8010b88:	d0f5      	beq.n	8010b76 <create_name+0x1c2>
 8010b8a:	69bb      	ldr	r3, [r7, #24]
 8010b8c:	005b      	lsls	r3, r3, #1
 8010b8e:	68fa      	ldr	r2, [r7, #12]
 8010b90:	4413      	add	r3, r2
 8010b92:	881b      	ldrh	r3, [r3, #0]
 8010b94:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b96:	d0ee      	beq.n	8010b76 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d009      	beq.n	8010bb2 <create_name+0x1fe>
 8010b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ba2:	f043 0303 	orr.w	r3, r3, #3
 8010ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010baa:	e002      	b.n	8010bb2 <create_name+0x1fe>
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	617b      	str	r3, [r7, #20]
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d009      	beq.n	8010bcc <create_name+0x218>
 8010bb8:	697a      	ldr	r2, [r7, #20]
 8010bba:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010bbe:	4413      	add	r3, r2
 8010bc0:	005b      	lsls	r3, r3, #1
 8010bc2:	68fa      	ldr	r2, [r7, #12]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	881b      	ldrh	r3, [r3, #0]
 8010bc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8010bca:	d1ef      	bne.n	8010bac <create_name+0x1f8>

	i = b = 0; ni = 8;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	623b      	str	r3, [r7, #32]
 8010bd6:	2308      	movs	r3, #8
 8010bd8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	1c5a      	adds	r2, r3, #1
 8010bde:	61ba      	str	r2, [r7, #24]
 8010be0:	005b      	lsls	r3, r3, #1
 8010be2:	68fa      	ldr	r2, [r7, #12]
 8010be4:	4413      	add	r3, r2
 8010be6:	881b      	ldrh	r3, [r3, #0]
 8010be8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010bea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f000 8098 	beq.w	8010d22 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010bf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010bf4:	2b20      	cmp	r3, #32
 8010bf6:	d006      	beq.n	8010c06 <create_name+0x252>
 8010bf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010bfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8010bfc:	d10a      	bne.n	8010c14 <create_name+0x260>
 8010bfe:	69ba      	ldr	r2, [r7, #24]
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	429a      	cmp	r2, r3
 8010c04:	d006      	beq.n	8010c14 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8010c06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c0a:	f043 0303 	orr.w	r3, r3, #3
 8010c0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010c12:	e085      	b.n	8010d20 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010c14:	6a3a      	ldr	r2, [r7, #32]
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d203      	bcs.n	8010c24 <create_name+0x270>
 8010c1c:	69ba      	ldr	r2, [r7, #24]
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d123      	bne.n	8010c6c <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	2b0b      	cmp	r3, #11
 8010c28:	d106      	bne.n	8010c38 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8010c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c2e:	f043 0303 	orr.w	r3, r3, #3
 8010c32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010c36:	e077      	b.n	8010d28 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010c38:	69ba      	ldr	r2, [r7, #24]
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d005      	beq.n	8010c4c <create_name+0x298>
 8010c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c44:	f043 0303 	orr.w	r3, r3, #3
 8010c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8010c4c:	69ba      	ldr	r2, [r7, #24]
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d868      	bhi.n	8010d26 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	61bb      	str	r3, [r7, #24]
 8010c58:	2308      	movs	r3, #8
 8010c5a:	623b      	str	r3, [r7, #32]
 8010c5c:	230b      	movs	r3, #11
 8010c5e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010c60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010c6a:	e059      	b.n	8010d20 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010c6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010c70:	d914      	bls.n	8010c9c <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010c72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c74:	2100      	movs	r1, #0
 8010c76:	4618      	mov	r0, r3
 8010c78:	f001 fdf0 	bl	801285c <ff_convert>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010c80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d004      	beq.n	8010c90 <create_name+0x2dc>
 8010c86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c88:	3b80      	subs	r3, #128	@ 0x80
 8010c8a:	4a10      	ldr	r2, [pc, #64]	@ (8010ccc <create_name+0x318>)
 8010c8c:	5cd3      	ldrb	r3, [r2, r3]
 8010c8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c94:	f043 0302 	orr.w	r3, r3, #2
 8010c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010c9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d007      	beq.n	8010cb2 <create_name+0x2fe>
 8010ca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	480a      	ldr	r0, [pc, #40]	@ (8010cd0 <create_name+0x31c>)
 8010ca8:	f7fe fbb5 	bl	800f416 <chk_chr>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d010      	beq.n	8010cd4 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010cb2:	235f      	movs	r3, #95	@ 0x5f
 8010cb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cba:	f043 0303 	orr.w	r3, r3, #3
 8010cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010cc2:	e023      	b.n	8010d0c <create_name+0x358>
 8010cc4:	08012d70 	.word	0x08012d70
 8010cc8:	7ffffffe 	.word	0x7ffffffe
 8010ccc:	08012df8 	.word	0x08012df8
 8010cd0:	08012d7c 	.word	0x08012d7c
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010cd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cd6:	2b40      	cmp	r3, #64	@ 0x40
 8010cd8:	d909      	bls.n	8010cee <create_name+0x33a>
 8010cda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cdc:	2b5a      	cmp	r3, #90	@ 0x5a
 8010cde:	d806      	bhi.n	8010cee <create_name+0x33a>
					b |= 2;
 8010ce0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010ce4:	f043 0302 	orr.w	r3, r3, #2
 8010ce8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010cec:	e00e      	b.n	8010d0c <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010cee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cf0:	2b60      	cmp	r3, #96	@ 0x60
 8010cf2:	d90b      	bls.n	8010d0c <create_name+0x358>
 8010cf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010cf6:	2b7a      	cmp	r3, #122	@ 0x7a
 8010cf8:	d808      	bhi.n	8010d0c <create_name+0x358>
						b |= 1; w -= 0x20;
 8010cfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010cfe:	f043 0301 	orr.w	r3, r3, #1
 8010d02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010d06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010d08:	3b20      	subs	r3, #32
 8010d0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010d0c:	6a3b      	ldr	r3, [r7, #32]
 8010d0e:	1c5a      	adds	r2, r3, #1
 8010d10:	623a      	str	r2, [r7, #32]
 8010d12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010d14:	b2d1      	uxtb	r1, r2
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	4413      	add	r3, r2
 8010d1a:	460a      	mov	r2, r1
 8010d1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8010d20:	e75b      	b.n	8010bda <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 8010d22:	bf00      	nop
 8010d24:	e000      	b.n	8010d28 <create_name+0x374>
			if (si > di) break;			/* No extension */
 8010d26:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010d2e:	2be5      	cmp	r3, #229	@ 0xe5
 8010d30:	d103      	bne.n	8010d3a <create_name+0x386>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2205      	movs	r2, #5
 8010d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8010d3a:	69fb      	ldr	r3, [r7, #28]
 8010d3c:	2b08      	cmp	r3, #8
 8010d3e:	d104      	bne.n	8010d4a <create_name+0x396>
 8010d40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010d44:	009b      	lsls	r3, r3, #2
 8010d46:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010d4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010d4e:	f003 030c 	and.w	r3, r3, #12
 8010d52:	2b0c      	cmp	r3, #12
 8010d54:	d005      	beq.n	8010d62 <create_name+0x3ae>
 8010d56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010d5a:	f003 0303 	and.w	r3, r3, #3
 8010d5e:	2b03      	cmp	r3, #3
 8010d60:	d105      	bne.n	8010d6e <create_name+0x3ba>
 8010d62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d66:	f043 0302 	orr.w	r3, r3, #2
 8010d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d72:	f003 0302 	and.w	r3, r3, #2
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d117      	bne.n	8010daa <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010d7e:	f003 0303 	and.w	r3, r3, #3
 8010d82:	2b01      	cmp	r3, #1
 8010d84:	d105      	bne.n	8010d92 <create_name+0x3de>
 8010d86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d8a:	f043 0310 	orr.w	r3, r3, #16
 8010d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010d92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010d96:	f003 030c 	and.w	r3, r3, #12
 8010d9a:	2b04      	cmp	r3, #4
 8010d9c:	d105      	bne.n	8010daa <create_name+0x3f6>
 8010d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010da2:	f043 0308 	orr.w	r3, r3, #8
 8010da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010db0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8010db4:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3728      	adds	r7, #40	@ 0x28
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop

08010dc0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b086      	sub	sp, #24
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
 8010dc8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	2b2f      	cmp	r3, #47	@ 0x2f
 8010dda:	d00b      	beq.n	8010df4 <follow_path+0x34>
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	2b5c      	cmp	r3, #92	@ 0x5c
 8010de2:	d007      	beq.n	8010df4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	69da      	ldr	r2, [r3, #28]
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	609a      	str	r2, [r3, #8]
 8010dec:	e00d      	b.n	8010e0a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	3301      	adds	r3, #1
 8010df2:	603b      	str	r3, [r7, #0]
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	2b2f      	cmp	r3, #47	@ 0x2f
 8010dfa:	d0f8      	beq.n	8010dee <follow_path+0x2e>
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	781b      	ldrb	r3, [r3, #0]
 8010e00:	2b5c      	cmp	r3, #92	@ 0x5c
 8010e02:	d0f4      	beq.n	8010dee <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	2200      	movs	r2, #0
 8010e08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	2b1f      	cmp	r3, #31
 8010e10:	d80a      	bhi.n	8010e28 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2280      	movs	r2, #128	@ 0x80
 8010e16:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8010e1a:	2100      	movs	r1, #0
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7ff f8a4 	bl	800ff6a <dir_sdi>
 8010e22:	4603      	mov	r3, r0
 8010e24:	75fb      	strb	r3, [r7, #23]
 8010e26:	e05b      	b.n	8010ee0 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010e28:	463b      	mov	r3, r7
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f7ff fdc1 	bl	80109b4 <create_name>
 8010e32:	4603      	mov	r3, r0
 8010e34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010e36:	7dfb      	ldrb	r3, [r7, #23]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d14c      	bne.n	8010ed6 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f7ff fc00 	bl	8010642 <dir_find>
 8010e42:	4603      	mov	r3, r0
 8010e44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010e4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010e4e:	7dfb      	ldrb	r3, [r7, #23]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d01b      	beq.n	8010e8c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010e54:	7dfb      	ldrb	r3, [r7, #23]
 8010e56:	2b04      	cmp	r3, #4
 8010e58:	d13f      	bne.n	8010eda <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8010e5a:	7afb      	ldrb	r3, [r7, #11]
 8010e5c:	f003 0320 	and.w	r3, r3, #32
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d00b      	beq.n	8010e7c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010e64:	7afb      	ldrb	r3, [r7, #11]
 8010e66:	f003 0304 	and.w	r3, r3, #4
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d031      	beq.n	8010ed2 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2280      	movs	r2, #128	@ 0x80
 8010e72:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 8010e76:	2300      	movs	r3, #0
 8010e78:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8010e7a:	e02e      	b.n	8010eda <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010e7c:	7afb      	ldrb	r3, [r7, #11]
 8010e7e:	f003 0304 	and.w	r3, r3, #4
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d129      	bne.n	8010eda <follow_path+0x11a>
 8010e86:	2305      	movs	r3, #5
 8010e88:	75fb      	strb	r3, [r7, #23]
				break;
 8010e8a:	e026      	b.n	8010eda <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010e8c:	7afb      	ldrb	r3, [r7, #11]
 8010e8e:	f003 0304 	and.w	r3, r3, #4
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d123      	bne.n	8010ede <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	799b      	ldrb	r3, [r3, #6]
 8010e9a:	f003 0310 	and.w	r3, r3, #16
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d102      	bne.n	8010ea8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8010ea2:	2305      	movs	r3, #5
 8010ea4:	75fb      	strb	r3, [r7, #23]
 8010ea6:	e01b      	b.n	8010ee0 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	695b      	ldr	r3, [r3, #20]
 8010eb2:	68fa      	ldr	r2, [r7, #12]
 8010eb4:	8992      	ldrh	r2, [r2, #12]
 8010eb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8010eba:	fb00 f202 	mul.w	r2, r0, r2
 8010ebe:	1a9b      	subs	r3, r3, r2
 8010ec0:	440b      	add	r3, r1
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	68f8      	ldr	r0, [r7, #12]
 8010ec6:	f7ff f9f6 	bl	80102b6 <ld_clust>
 8010eca:	4602      	mov	r2, r0
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	609a      	str	r2, [r3, #8]
 8010ed0:	e7aa      	b.n	8010e28 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010ed2:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010ed4:	e7a8      	b.n	8010e28 <follow_path+0x68>
			if (res != FR_OK) break;
 8010ed6:	bf00      	nop
 8010ed8:	e002      	b.n	8010ee0 <follow_path+0x120>
				break;
 8010eda:	bf00      	nop
 8010edc:	e000      	b.n	8010ee0 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010ede:	bf00      	nop
			}
		}
	}

	return res;
 8010ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3718      	adds	r7, #24
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010eea:	b480      	push	{r7}
 8010eec:	b087      	sub	sp, #28
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ef6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d031      	beq.n	8010f64 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	617b      	str	r3, [r7, #20]
 8010f06:	e002      	b.n	8010f0e <get_ldnumber+0x24>
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	617b      	str	r3, [r7, #20]
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	2b1f      	cmp	r3, #31
 8010f14:	d903      	bls.n	8010f1e <get_ldnumber+0x34>
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	2b3a      	cmp	r3, #58	@ 0x3a
 8010f1c:	d1f4      	bne.n	8010f08 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	2b3a      	cmp	r3, #58	@ 0x3a
 8010f24:	d11c      	bne.n	8010f60 <get_ldnumber+0x76>
			tp = *path;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	1c5a      	adds	r2, r3, #1
 8010f30:	60fa      	str	r2, [r7, #12]
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	3b30      	subs	r3, #48	@ 0x30
 8010f36:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	2b09      	cmp	r3, #9
 8010f3c:	d80e      	bhi.n	8010f5c <get_ldnumber+0x72>
 8010f3e:	68fa      	ldr	r2, [r7, #12]
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d10a      	bne.n	8010f5c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d107      	bne.n	8010f5c <get_ldnumber+0x72>
					vol = (int)i;
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	3301      	adds	r3, #1
 8010f54:	617b      	str	r3, [r7, #20]
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	697a      	ldr	r2, [r7, #20]
 8010f5a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	e002      	b.n	8010f66 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010f60:	2300      	movs	r3, #0
 8010f62:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010f64:	693b      	ldr	r3, [r7, #16]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	371c      	adds	r7, #28
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr
	...

08010f74 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2200      	movs	r2, #0
 8010f82:	70da      	strb	r2, [r3, #3]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f04f 32ff 	mov.w	r2, #4294967295
 8010f8a:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010f8c:	6839      	ldr	r1, [r7, #0]
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7fe fc0c 	bl	800f7ac <move_window>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d001      	beq.n	8010f9e <check_fs+0x2a>
 8010f9a:	2304      	movs	r3, #4
 8010f9c:	e038      	b.n	8011010 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	333c      	adds	r3, #60	@ 0x3c
 8010fa2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fe f950 	bl	800f24c <ld_word>
 8010fac:	4603      	mov	r3, r0
 8010fae:	461a      	mov	r2, r3
 8010fb0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d001      	beq.n	8010fbc <check_fs+0x48>
 8010fb8:	2303      	movs	r3, #3
 8010fba:	e029      	b.n	8011010 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010fc2:	2be9      	cmp	r3, #233	@ 0xe9
 8010fc4:	d009      	beq.n	8010fda <check_fs+0x66>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010fcc:	2beb      	cmp	r3, #235	@ 0xeb
 8010fce:	d11e      	bne.n	801100e <check_fs+0x9a>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8010fd6:	2b90      	cmp	r3, #144	@ 0x90
 8010fd8:	d119      	bne.n	801100e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	333c      	adds	r3, #60	@ 0x3c
 8010fde:	3336      	adds	r3, #54	@ 0x36
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fe f94b 	bl	800f27c <ld_dword>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010fec:	4a0a      	ldr	r2, [pc, #40]	@ (8011018 <check_fs+0xa4>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d101      	bne.n	8010ff6 <check_fs+0x82>
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	e00c      	b.n	8011010 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	333c      	adds	r3, #60	@ 0x3c
 8010ffa:	3352      	adds	r3, #82	@ 0x52
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fe f93d 	bl	800f27c <ld_dword>
 8011002:	4603      	mov	r3, r0
 8011004:	4a05      	ldr	r2, [pc, #20]	@ (801101c <check_fs+0xa8>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d101      	bne.n	801100e <check_fs+0x9a>
 801100a:	2300      	movs	r3, #0
 801100c:	e000      	b.n	8011010 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801100e:	2302      	movs	r3, #2
}
 8011010:	4618      	mov	r0, r3
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}
 8011018:	00544146 	.word	0x00544146
 801101c:	33544146 	.word	0x33544146

08011020 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b096      	sub	sp, #88	@ 0x58
 8011024:	af00      	add	r7, sp, #0
 8011026:	60f8      	str	r0, [r7, #12]
 8011028:	60b9      	str	r1, [r7, #8]
 801102a:	4613      	mov	r3, r2
 801102c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	2200      	movs	r2, #0
 8011032:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011034:	68f8      	ldr	r0, [r7, #12]
 8011036:	f7ff ff58 	bl	8010eea <get_ldnumber>
 801103a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801103c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801103e:	2b00      	cmp	r3, #0
 8011040:	da01      	bge.n	8011046 <find_volume+0x26>
 8011042:	230b      	movs	r3, #11
 8011044:	e268      	b.n	8011518 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011046:	4a9f      	ldr	r2, [pc, #636]	@ (80112c4 <find_volume+0x2a4>)
 8011048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801104e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011052:	2b00      	cmp	r3, #0
 8011054:	d101      	bne.n	801105a <find_volume+0x3a>
 8011056:	230c      	movs	r3, #12
 8011058:	e25e      	b.n	8011518 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801105a:	68bb      	ldr	r3, [r7, #8]
 801105c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801105e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011060:	79fb      	ldrb	r3, [r7, #7]
 8011062:	f023 0301 	bic.w	r3, r3, #1
 8011066:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d01a      	beq.n	80110a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011072:	785b      	ldrb	r3, [r3, #1]
 8011074:	4618      	mov	r0, r3
 8011076:	f7fe f849 	bl	800f10c <disk_status>
 801107a:	4603      	mov	r3, r0
 801107c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011080:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011084:	f003 0301 	and.w	r3, r3, #1
 8011088:	2b00      	cmp	r3, #0
 801108a:	d10c      	bne.n	80110a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801108c:	79fb      	ldrb	r3, [r7, #7]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d007      	beq.n	80110a2 <find_volume+0x82>
 8011092:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011096:	f003 0304 	and.w	r3, r3, #4
 801109a:	2b00      	cmp	r3, #0
 801109c:	d001      	beq.n	80110a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801109e:	230a      	movs	r3, #10
 80110a0:	e23a      	b.n	8011518 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80110a2:	2300      	movs	r3, #0
 80110a4:	e238      	b.n	8011518 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80110a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a8:	2200      	movs	r2, #0
 80110aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80110ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110ae:	b2da      	uxtb	r2, r3
 80110b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80110b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b6:	785b      	ldrb	r3, [r3, #1]
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7fe f841 	bl	800f140 <disk_initialize>
 80110be:	4603      	mov	r3, r0
 80110c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80110c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80110c8:	f003 0301 	and.w	r3, r3, #1
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d001      	beq.n	80110d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80110d0:	2303      	movs	r3, #3
 80110d2:	e221      	b.n	8011518 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80110d4:	79fb      	ldrb	r3, [r7, #7]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d007      	beq.n	80110ea <find_volume+0xca>
 80110da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80110de:	f003 0304 	and.w	r3, r3, #4
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d001      	beq.n	80110ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80110e6:	230a      	movs	r3, #10
 80110e8:	e216      	b.n	8011518 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80110ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ec:	7858      	ldrb	r0, [r3, #1]
 80110ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f0:	330c      	adds	r3, #12
 80110f2:	461a      	mov	r2, r3
 80110f4:	2102      	movs	r1, #2
 80110f6:	f7fe f88b 	bl	800f210 <disk_ioctl>
 80110fa:	4603      	mov	r3, r0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d001      	beq.n	8011104 <find_volume+0xe4>
 8011100:	2301      	movs	r3, #1
 8011102:	e209      	b.n	8011518 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011106:	899b      	ldrh	r3, [r3, #12]
 8011108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801110c:	d80d      	bhi.n	801112a <find_volume+0x10a>
 801110e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011110:	899b      	ldrh	r3, [r3, #12]
 8011112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011116:	d308      	bcc.n	801112a <find_volume+0x10a>
 8011118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801111a:	899b      	ldrh	r3, [r3, #12]
 801111c:	461a      	mov	r2, r3
 801111e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011120:	899b      	ldrh	r3, [r3, #12]
 8011122:	3b01      	subs	r3, #1
 8011124:	4013      	ands	r3, r2
 8011126:	2b00      	cmp	r3, #0
 8011128:	d001      	beq.n	801112e <find_volume+0x10e>
 801112a:	2301      	movs	r3, #1
 801112c:	e1f4      	b.n	8011518 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801112e:	2300      	movs	r3, #0
 8011130:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011132:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011134:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011136:	f7ff ff1d 	bl	8010f74 <check_fs>
 801113a:	4603      	mov	r3, r0
 801113c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011140:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011144:	2b02      	cmp	r3, #2
 8011146:	d149      	bne.n	80111dc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011148:	2300      	movs	r3, #0
 801114a:	643b      	str	r3, [r7, #64]	@ 0x40
 801114c:	e01e      	b.n	801118c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801114e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011150:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8011154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011156:	011b      	lsls	r3, r3, #4
 8011158:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801115c:	4413      	add	r3, r2
 801115e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011162:	3304      	adds	r3, #4
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d006      	beq.n	8011178 <find_volume+0x158>
 801116a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801116c:	3308      	adds	r3, #8
 801116e:	4618      	mov	r0, r3
 8011170:	f7fe f884 	bl	800f27c <ld_dword>
 8011174:	4602      	mov	r2, r0
 8011176:	e000      	b.n	801117a <find_volume+0x15a>
 8011178:	2200      	movs	r2, #0
 801117a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801117c:	009b      	lsls	r3, r3, #2
 801117e:	3358      	adds	r3, #88	@ 0x58
 8011180:	443b      	add	r3, r7
 8011182:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011188:	3301      	adds	r3, #1
 801118a:	643b      	str	r3, [r7, #64]	@ 0x40
 801118c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801118e:	2b03      	cmp	r3, #3
 8011190:	d9dd      	bls.n	801114e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011192:	2300      	movs	r3, #0
 8011194:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8011196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011198:	2b00      	cmp	r3, #0
 801119a:	d002      	beq.n	80111a2 <find_volume+0x182>
 801119c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801119e:	3b01      	subs	r3, #1
 80111a0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80111a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111a4:	009b      	lsls	r3, r3, #2
 80111a6:	3358      	adds	r3, #88	@ 0x58
 80111a8:	443b      	add	r3, r7
 80111aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80111ae:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80111b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d005      	beq.n	80111c2 <find_volume+0x1a2>
 80111b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80111b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80111ba:	f7ff fedb 	bl	8010f74 <check_fs>
 80111be:	4603      	mov	r3, r0
 80111c0:	e000      	b.n	80111c4 <find_volume+0x1a4>
 80111c2:	2303      	movs	r3, #3
 80111c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80111c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d905      	bls.n	80111dc <find_volume+0x1bc>
 80111d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111d2:	3301      	adds	r3, #1
 80111d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80111d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111d8:	2b03      	cmp	r3, #3
 80111da:	d9e2      	bls.n	80111a2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80111dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80111e0:	2b04      	cmp	r3, #4
 80111e2:	d101      	bne.n	80111e8 <find_volume+0x1c8>
 80111e4:	2301      	movs	r3, #1
 80111e6:	e197      	b.n	8011518 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80111e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d901      	bls.n	80111f4 <find_volume+0x1d4>
 80111f0:	230d      	movs	r3, #13
 80111f2:	e191      	b.n	8011518 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80111f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f6:	333c      	adds	r3, #60	@ 0x3c
 80111f8:	330b      	adds	r3, #11
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7fe f826 	bl	800f24c <ld_word>
 8011200:	4603      	mov	r3, r0
 8011202:	461a      	mov	r2, r3
 8011204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011206:	899b      	ldrh	r3, [r3, #12]
 8011208:	429a      	cmp	r2, r3
 801120a:	d001      	beq.n	8011210 <find_volume+0x1f0>
 801120c:	230d      	movs	r3, #13
 801120e:	e183      	b.n	8011518 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011212:	333c      	adds	r3, #60	@ 0x3c
 8011214:	3316      	adds	r3, #22
 8011216:	4618      	mov	r0, r3
 8011218:	f7fe f818 	bl	800f24c <ld_word>
 801121c:	4603      	mov	r3, r0
 801121e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011222:	2b00      	cmp	r3, #0
 8011224:	d106      	bne.n	8011234 <find_volume+0x214>
 8011226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011228:	333c      	adds	r3, #60	@ 0x3c
 801122a:	3324      	adds	r3, #36	@ 0x24
 801122c:	4618      	mov	r0, r3
 801122e:	f7fe f825 	bl	800f27c <ld_dword>
 8011232:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011236:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011238:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801123a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801123c:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8011240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011242:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011246:	789b      	ldrb	r3, [r3, #2]
 8011248:	2b01      	cmp	r3, #1
 801124a:	d005      	beq.n	8011258 <find_volume+0x238>
 801124c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801124e:	789b      	ldrb	r3, [r3, #2]
 8011250:	2b02      	cmp	r3, #2
 8011252:	d001      	beq.n	8011258 <find_volume+0x238>
 8011254:	230d      	movs	r3, #13
 8011256:	e15f      	b.n	8011518 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801125a:	789b      	ldrb	r3, [r3, #2]
 801125c:	461a      	mov	r2, r3
 801125e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011260:	fb02 f303 	mul.w	r3, r2, r3
 8011264:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011268:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 801126c:	461a      	mov	r2, r3
 801126e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011270:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011274:	895b      	ldrh	r3, [r3, #10]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d008      	beq.n	801128c <find_volume+0x26c>
 801127a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801127c:	895b      	ldrh	r3, [r3, #10]
 801127e:	461a      	mov	r2, r3
 8011280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011282:	895b      	ldrh	r3, [r3, #10]
 8011284:	3b01      	subs	r3, #1
 8011286:	4013      	ands	r3, r2
 8011288:	2b00      	cmp	r3, #0
 801128a:	d001      	beq.n	8011290 <find_volume+0x270>
 801128c:	230d      	movs	r3, #13
 801128e:	e143      	b.n	8011518 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011292:	333c      	adds	r3, #60	@ 0x3c
 8011294:	3311      	adds	r3, #17
 8011296:	4618      	mov	r0, r3
 8011298:	f7fd ffd8 	bl	800f24c <ld_word>
 801129c:	4603      	mov	r3, r0
 801129e:	461a      	mov	r2, r3
 80112a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80112a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112a6:	891b      	ldrh	r3, [r3, #8]
 80112a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112aa:	8992      	ldrh	r2, [r2, #12]
 80112ac:	0952      	lsrs	r2, r2, #5
 80112ae:	b292      	uxth	r2, r2
 80112b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80112b4:	fb01 f202 	mul.w	r2, r1, r2
 80112b8:	1a9b      	subs	r3, r3, r2
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d003      	beq.n	80112c8 <find_volume+0x2a8>
 80112c0:	230d      	movs	r3, #13
 80112c2:	e129      	b.n	8011518 <find_volume+0x4f8>
 80112c4:	240029d8 	.word	0x240029d8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80112c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ca:	333c      	adds	r3, #60	@ 0x3c
 80112cc:	3313      	adds	r3, #19
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fd ffbc 	bl	800f24c <ld_word>
 80112d4:	4603      	mov	r3, r0
 80112d6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80112d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d106      	bne.n	80112ec <find_volume+0x2cc>
 80112de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e0:	333c      	adds	r3, #60	@ 0x3c
 80112e2:	3320      	adds	r3, #32
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7fd ffc9 	bl	800f27c <ld_dword>
 80112ea:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80112ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ee:	333c      	adds	r3, #60	@ 0x3c
 80112f0:	330e      	adds	r3, #14
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7fd ffaa 	bl	800f24c <ld_word>
 80112f8:	4603      	mov	r3, r0
 80112fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80112fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d101      	bne.n	8011306 <find_volume+0x2e6>
 8011302:	230d      	movs	r3, #13
 8011304:	e108      	b.n	8011518 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011306:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801130a:	4413      	add	r3, r2
 801130c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801130e:	8911      	ldrh	r1, [r2, #8]
 8011310:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011312:	8992      	ldrh	r2, [r2, #12]
 8011314:	0952      	lsrs	r2, r2, #5
 8011316:	b292      	uxth	r2, r2
 8011318:	fbb1 f2f2 	udiv	r2, r1, r2
 801131c:	b292      	uxth	r2, r2
 801131e:	4413      	add	r3, r2
 8011320:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011326:	429a      	cmp	r2, r3
 8011328:	d201      	bcs.n	801132e <find_volume+0x30e>
 801132a:	230d      	movs	r3, #13
 801132c:	e0f4      	b.n	8011518 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801132e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011332:	1ad3      	subs	r3, r2, r3
 8011334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011336:	8952      	ldrh	r2, [r2, #10]
 8011338:	fbb3 f3f2 	udiv	r3, r3, r2
 801133c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011340:	2b00      	cmp	r3, #0
 8011342:	d101      	bne.n	8011348 <find_volume+0x328>
 8011344:	230d      	movs	r3, #13
 8011346:	e0e7      	b.n	8011518 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8011348:	2303      	movs	r3, #3
 801134a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011350:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011354:	4293      	cmp	r3, r2
 8011356:	d802      	bhi.n	801135e <find_volume+0x33e>
 8011358:	2302      	movs	r3, #2
 801135a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011360:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011364:	4293      	cmp	r3, r2
 8011366:	d802      	bhi.n	801136e <find_volume+0x34e>
 8011368:	2301      	movs	r3, #1
 801136a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011370:	1c9a      	adds	r2, r3, #2
 8011372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011374:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8011376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011378:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801137a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801137c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801137e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011380:	441a      	add	r2, r3
 8011382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011384:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8011386:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801138a:	441a      	add	r2, r3
 801138c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801138e:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8011390:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011394:	2b03      	cmp	r3, #3
 8011396:	d11e      	bne.n	80113d6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801139a:	333c      	adds	r3, #60	@ 0x3c
 801139c:	332a      	adds	r3, #42	@ 0x2a
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fd ff54 	bl	800f24c <ld_word>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d001      	beq.n	80113ae <find_volume+0x38e>
 80113aa:	230d      	movs	r3, #13
 80113ac:	e0b4      	b.n	8011518 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80113ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113b0:	891b      	ldrh	r3, [r3, #8]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d001      	beq.n	80113ba <find_volume+0x39a>
 80113b6:	230d      	movs	r3, #13
 80113b8:	e0ae      	b.n	8011518 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80113ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113bc:	333c      	adds	r3, #60	@ 0x3c
 80113be:	332c      	adds	r3, #44	@ 0x2c
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7fd ff5b 	bl	800f27c <ld_dword>
 80113c6:	4602      	mov	r2, r0
 80113c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ca:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80113cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ce:	6a1b      	ldr	r3, [r3, #32]
 80113d0:	009b      	lsls	r3, r3, #2
 80113d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80113d4:	e01f      	b.n	8011416 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80113d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113d8:	891b      	ldrh	r3, [r3, #8]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d101      	bne.n	80113e2 <find_volume+0x3c2>
 80113de:	230d      	movs	r3, #13
 80113e0:	e09a      	b.n	8011518 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80113e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113e8:	441a      	add	r2, r3
 80113ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113ec:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80113ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80113f2:	2b02      	cmp	r3, #2
 80113f4:	d103      	bne.n	80113fe <find_volume+0x3de>
 80113f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f8:	6a1b      	ldr	r3, [r3, #32]
 80113fa:	005b      	lsls	r3, r3, #1
 80113fc:	e00a      	b.n	8011414 <find_volume+0x3f4>
 80113fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011400:	6a1a      	ldr	r2, [r3, #32]
 8011402:	4613      	mov	r3, r2
 8011404:	005b      	lsls	r3, r3, #1
 8011406:	4413      	add	r3, r2
 8011408:	085a      	lsrs	r2, r3, #1
 801140a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801140c:	6a1b      	ldr	r3, [r3, #32]
 801140e:	f003 0301 	and.w	r3, r3, #1
 8011412:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011414:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011418:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801141a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801141c:	899b      	ldrh	r3, [r3, #12]
 801141e:	4619      	mov	r1, r3
 8011420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011422:	440b      	add	r3, r1
 8011424:	3b01      	subs	r3, #1
 8011426:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011428:	8989      	ldrh	r1, [r1, #12]
 801142a:	fbb3 f3f1 	udiv	r3, r3, r1
 801142e:	429a      	cmp	r2, r3
 8011430:	d201      	bcs.n	8011436 <find_volume+0x416>
 8011432:	230d      	movs	r3, #13
 8011434:	e070      	b.n	8011518 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011438:	f04f 32ff 	mov.w	r2, #4294967295
 801143c:	619a      	str	r2, [r3, #24]
 801143e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011440:	699a      	ldr	r2, [r3, #24]
 8011442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011444:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8011446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011448:	2280      	movs	r2, #128	@ 0x80
 801144a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801144c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011450:	2b03      	cmp	r3, #3
 8011452:	d149      	bne.n	80114e8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011456:	333c      	adds	r3, #60	@ 0x3c
 8011458:	3330      	adds	r3, #48	@ 0x30
 801145a:	4618      	mov	r0, r3
 801145c:	f7fd fef6 	bl	800f24c <ld_word>
 8011460:	4603      	mov	r3, r0
 8011462:	2b01      	cmp	r3, #1
 8011464:	d140      	bne.n	80114e8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011468:	3301      	adds	r3, #1
 801146a:	4619      	mov	r1, r3
 801146c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801146e:	f7fe f99d 	bl	800f7ac <move_window>
 8011472:	4603      	mov	r3, r0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d137      	bne.n	80114e8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8011478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801147a:	2200      	movs	r2, #0
 801147c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801147e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011480:	333c      	adds	r3, #60	@ 0x3c
 8011482:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011486:	4618      	mov	r0, r3
 8011488:	f7fd fee0 	bl	800f24c <ld_word>
 801148c:	4603      	mov	r3, r0
 801148e:	461a      	mov	r2, r3
 8011490:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011494:	429a      	cmp	r2, r3
 8011496:	d127      	bne.n	80114e8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801149a:	333c      	adds	r3, #60	@ 0x3c
 801149c:	4618      	mov	r0, r3
 801149e:	f7fd feed 	bl	800f27c <ld_dword>
 80114a2:	4603      	mov	r3, r0
 80114a4:	4a1e      	ldr	r2, [pc, #120]	@ (8011520 <find_volume+0x500>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d11e      	bne.n	80114e8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80114aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ac:	333c      	adds	r3, #60	@ 0x3c
 80114ae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fd fee2 	bl	800f27c <ld_dword>
 80114b8:	4603      	mov	r3, r0
 80114ba:	4a1a      	ldr	r2, [pc, #104]	@ (8011524 <find_volume+0x504>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d113      	bne.n	80114e8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80114c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114c2:	333c      	adds	r3, #60	@ 0x3c
 80114c4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fd fed7 	bl	800f27c <ld_dword>
 80114ce:	4602      	mov	r2, r0
 80114d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80114d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114d6:	333c      	adds	r3, #60	@ 0x3c
 80114d8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fd fecd 	bl	800f27c <ld_dword>
 80114e2:	4602      	mov	r2, r0
 80114e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114e6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80114e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ea:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80114ee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80114f0:	4b0d      	ldr	r3, [pc, #52]	@ (8011528 <find_volume+0x508>)
 80114f2:	881b      	ldrh	r3, [r3, #0]
 80114f4:	3301      	adds	r3, #1
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	4b0b      	ldr	r3, [pc, #44]	@ (8011528 <find_volume+0x508>)
 80114fa:	801a      	strh	r2, [r3, #0]
 80114fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011528 <find_volume+0x508>)
 80114fe:	881a      	ldrh	r2, [r3, #0]
 8011500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011502:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011506:	4a09      	ldr	r2, [pc, #36]	@ (801152c <find_volume+0x50c>)
 8011508:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801150a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801150c:	2200      	movs	r2, #0
 801150e:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011510:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011512:	f7fe f8e3 	bl	800f6dc <clear_lock>
#endif
	return FR_OK;
 8011516:	2300      	movs	r3, #0
}
 8011518:	4618      	mov	r0, r3
 801151a:	3758      	adds	r7, #88	@ 0x58
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}
 8011520:	41615252 	.word	0x41615252
 8011524:	61417272 	.word	0x61417272
 8011528:	240029dc 	.word	0x240029dc
 801152c:	24002a00 	.word	0x24002a00

08011530 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801153a:	2309      	movs	r3, #9
 801153c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d01c      	beq.n	801157e <validate+0x4e>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d018      	beq.n	801157e <validate+0x4e>
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d013      	beq.n	801157e <validate+0x4e>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	889a      	ldrh	r2, [r3, #4]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	88db      	ldrh	r3, [r3, #6]
 8011560:	429a      	cmp	r2, r3
 8011562:	d10c      	bne.n	801157e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	785b      	ldrb	r3, [r3, #1]
 801156a:	4618      	mov	r0, r3
 801156c:	f7fd fdce 	bl	800f10c <disk_status>
 8011570:	4603      	mov	r3, r0
 8011572:	f003 0301 	and.w	r3, r3, #1
 8011576:	2b00      	cmp	r3, #0
 8011578:	d101      	bne.n	801157e <validate+0x4e>
			res = FR_OK;
 801157a:	2300      	movs	r3, #0
 801157c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801157e:	7bfb      	ldrb	r3, [r7, #15]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d102      	bne.n	801158a <validate+0x5a>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	e000      	b.n	801158c <validate+0x5c>
 801158a:	2300      	movs	r3, #0
 801158c:	683a      	ldr	r2, [r7, #0]
 801158e:	6013      	str	r3, [r2, #0]
	return res;
 8011590:	7bfb      	ldrb	r3, [r7, #15]
}
 8011592:	4618      	mov	r0, r3
 8011594:	3710      	adds	r7, #16
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
	...

0801159c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b088      	sub	sp, #32
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	60f8      	str	r0, [r7, #12]
 80115a4:	60b9      	str	r1, [r7, #8]
 80115a6:	4613      	mov	r3, r2
 80115a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80115ae:	f107 0310 	add.w	r3, r7, #16
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7ff fc99 	bl	8010eea <get_ldnumber>
 80115b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80115ba:	69fb      	ldr	r3, [r7, #28]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	da01      	bge.n	80115c4 <f_mount+0x28>
 80115c0:	230b      	movs	r3, #11
 80115c2:	e02b      	b.n	801161c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80115c4:	4a17      	ldr	r2, [pc, #92]	@ (8011624 <f_mount+0x88>)
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80115ce:	69bb      	ldr	r3, [r7, #24]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d005      	beq.n	80115e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80115d4:	69b8      	ldr	r0, [r7, #24]
 80115d6:	f7fe f881 	bl	800f6dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80115da:	69bb      	ldr	r3, [r7, #24]
 80115dc:	2200      	movs	r2, #0
 80115de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d002      	beq.n	80115ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	2200      	movs	r2, #0
 80115ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80115ec:	68fa      	ldr	r2, [r7, #12]
 80115ee:	490d      	ldr	r1, [pc, #52]	@ (8011624 <f_mount+0x88>)
 80115f0:	69fb      	ldr	r3, [r7, #28]
 80115f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d002      	beq.n	8011602 <f_mount+0x66>
 80115fc:	79fb      	ldrb	r3, [r7, #7]
 80115fe:	2b01      	cmp	r3, #1
 8011600:	d001      	beq.n	8011606 <f_mount+0x6a>
 8011602:	2300      	movs	r3, #0
 8011604:	e00a      	b.n	801161c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011606:	f107 010c 	add.w	r1, r7, #12
 801160a:	f107 0308 	add.w	r3, r7, #8
 801160e:	2200      	movs	r2, #0
 8011610:	4618      	mov	r0, r3
 8011612:	f7ff fd05 	bl	8011020 <find_volume>
 8011616:	4603      	mov	r3, r0
 8011618:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801161a:	7dfb      	ldrb	r3, [r7, #23]
}
 801161c:	4618      	mov	r0, r3
 801161e:	3720      	adds	r7, #32
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}
 8011624:	240029d8 	.word	0x240029d8

08011628 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b09a      	sub	sp, #104	@ 0x68
 801162c:	af00      	add	r7, sp, #0
 801162e:	60f8      	str	r0, [r7, #12]
 8011630:	60b9      	str	r1, [r7, #8]
 8011632:	4613      	mov	r3, r2
 8011634:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d101      	bne.n	8011640 <f_open+0x18>
 801163c:	2309      	movs	r3, #9
 801163e:	e1b7      	b.n	80119b0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011640:	79fb      	ldrb	r3, [r7, #7]
 8011642:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011646:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011648:	79fa      	ldrb	r2, [r7, #7]
 801164a:	f107 0114 	add.w	r1, r7, #20
 801164e:	f107 0308 	add.w	r3, r7, #8
 8011652:	4618      	mov	r0, r3
 8011654:	f7ff fce4 	bl	8011020 <find_volume>
 8011658:	4603      	mov	r3, r0
 801165a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801165e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011662:	2b00      	cmp	r3, #0
 8011664:	f040 819b 	bne.w	801199e <f_open+0x376>
		dj.obj.fs = fs;
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801166c:	68ba      	ldr	r2, [r7, #8]
 801166e:	f107 0318 	add.w	r3, r7, #24
 8011672:	4611      	mov	r1, r2
 8011674:	4618      	mov	r0, r3
 8011676:	f7ff fba3 	bl	8010dc0 <follow_path>
 801167a:	4603      	mov	r3, r0
 801167c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011680:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011684:	2b00      	cmp	r3, #0
 8011686:	d118      	bne.n	80116ba <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011688:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801168c:	b25b      	sxtb	r3, r3
 801168e:	2b00      	cmp	r3, #0
 8011690:	da03      	bge.n	801169a <f_open+0x72>
				res = FR_INVALID_NAME;
 8011692:	2306      	movs	r3, #6
 8011694:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011698:	e00f      	b.n	80116ba <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801169a:	79fb      	ldrb	r3, [r7, #7]
 801169c:	2b01      	cmp	r3, #1
 801169e:	bf8c      	ite	hi
 80116a0:	2301      	movhi	r3, #1
 80116a2:	2300      	movls	r3, #0
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	461a      	mov	r2, r3
 80116a8:	f107 0318 	add.w	r3, r7, #24
 80116ac:	4611      	mov	r1, r2
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7fd fecc 	bl	800f44c <chk_lock>
 80116b4:	4603      	mov	r3, r0
 80116b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80116ba:	79fb      	ldrb	r3, [r7, #7]
 80116bc:	f003 031c 	and.w	r3, r3, #28
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d07f      	beq.n	80117c4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80116c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d017      	beq.n	80116fc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80116cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80116d0:	2b04      	cmp	r3, #4
 80116d2:	d10e      	bne.n	80116f2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80116d4:	f7fd ff16 	bl	800f504 <enq_lock>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d006      	beq.n	80116ec <f_open+0xc4>
 80116de:	f107 0318 	add.w	r3, r7, #24
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7ff f86e 	bl	80107c4 <dir_register>
 80116e8:	4603      	mov	r3, r0
 80116ea:	e000      	b.n	80116ee <f_open+0xc6>
 80116ec:	2312      	movs	r3, #18
 80116ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80116f2:	79fb      	ldrb	r3, [r7, #7]
 80116f4:	f043 0308 	orr.w	r3, r3, #8
 80116f8:	71fb      	strb	r3, [r7, #7]
 80116fa:	e010      	b.n	801171e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80116fc:	7fbb      	ldrb	r3, [r7, #30]
 80116fe:	f003 0311 	and.w	r3, r3, #17
 8011702:	2b00      	cmp	r3, #0
 8011704:	d003      	beq.n	801170e <f_open+0xe6>
					res = FR_DENIED;
 8011706:	2307      	movs	r3, #7
 8011708:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801170c:	e007      	b.n	801171e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801170e:	79fb      	ldrb	r3, [r7, #7]
 8011710:	f003 0304 	and.w	r3, r3, #4
 8011714:	2b00      	cmp	r3, #0
 8011716:	d002      	beq.n	801171e <f_open+0xf6>
 8011718:	2308      	movs	r3, #8
 801171a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801171e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011722:	2b00      	cmp	r3, #0
 8011724:	d168      	bne.n	80117f8 <f_open+0x1d0>
 8011726:	79fb      	ldrb	r3, [r7, #7]
 8011728:	f003 0308 	and.w	r3, r3, #8
 801172c:	2b00      	cmp	r3, #0
 801172e:	d063      	beq.n	80117f8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8011730:	f7fc ffca 	bl	800e6c8 <get_fattime>
 8011734:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011738:	330e      	adds	r3, #14
 801173a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801173c:	4618      	mov	r0, r3
 801173e:	f7fd fddb 	bl	800f2f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011744:	3316      	adds	r3, #22
 8011746:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011748:	4618      	mov	r0, r3
 801174a:	f7fd fdd5 	bl	800f2f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801174e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011750:	330b      	adds	r3, #11
 8011752:	2220      	movs	r2, #32
 8011754:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801175a:	4611      	mov	r1, r2
 801175c:	4618      	mov	r0, r3
 801175e:	f7fe fdaa 	bl	80102b6 <ld_clust>
 8011762:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011768:	2200      	movs	r2, #0
 801176a:	4618      	mov	r0, r3
 801176c:	f7fe fdc2 	bl	80102f4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011772:	331c      	adds	r3, #28
 8011774:	2100      	movs	r1, #0
 8011776:	4618      	mov	r0, r3
 8011778:	f7fd fdbe 	bl	800f2f8 <st_dword>
					fs->wflag = 1;
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	2201      	movs	r2, #1
 8011780:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011784:	2b00      	cmp	r3, #0
 8011786:	d037      	beq.n	80117f8 <f_open+0x1d0>
						dw = fs->winsect;
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801178c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801178e:	f107 0318 	add.w	r3, r7, #24
 8011792:	2200      	movs	r2, #0
 8011794:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011796:	4618      	mov	r0, r3
 8011798:	f7fe fab2 	bl	800fd00 <remove_chain>
 801179c:	4603      	mov	r3, r0
 801179e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80117a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d126      	bne.n	80117f8 <f_open+0x1d0>
							res = move_window(fs, dw);
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fd fffc 	bl	800f7ac <move_window>
 80117b4:	4603      	mov	r3, r0
 80117b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80117be:	3a01      	subs	r2, #1
 80117c0:	615a      	str	r2, [r3, #20]
 80117c2:	e019      	b.n	80117f8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80117c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d115      	bne.n	80117f8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80117cc:	7fbb      	ldrb	r3, [r7, #30]
 80117ce:	f003 0310 	and.w	r3, r3, #16
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d003      	beq.n	80117de <f_open+0x1b6>
					res = FR_NO_FILE;
 80117d6:	2304      	movs	r3, #4
 80117d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80117dc:	e00c      	b.n	80117f8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80117de:	79fb      	ldrb	r3, [r7, #7]
 80117e0:	f003 0302 	and.w	r3, r3, #2
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d007      	beq.n	80117f8 <f_open+0x1d0>
 80117e8:	7fbb      	ldrb	r3, [r7, #30]
 80117ea:	f003 0301 	and.w	r3, r3, #1
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d002      	beq.n	80117f8 <f_open+0x1d0>
						res = FR_DENIED;
 80117f2:	2307      	movs	r3, #7
 80117f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80117f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d126      	bne.n	801184e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011800:	79fb      	ldrb	r3, [r7, #7]
 8011802:	f003 0308 	and.w	r3, r3, #8
 8011806:	2b00      	cmp	r3, #0
 8011808:	d003      	beq.n	8011812 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801180a:	79fb      	ldrb	r3, [r7, #7]
 801180c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011810:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801181a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011820:	79fb      	ldrb	r3, [r7, #7]
 8011822:	2b01      	cmp	r3, #1
 8011824:	bf8c      	ite	hi
 8011826:	2301      	movhi	r3, #1
 8011828:	2300      	movls	r3, #0
 801182a:	b2db      	uxtb	r3, r3
 801182c:	461a      	mov	r2, r3
 801182e:	f107 0318 	add.w	r3, r7, #24
 8011832:	4611      	mov	r1, r2
 8011834:	4618      	mov	r0, r3
 8011836:	f7fd fe87 	bl	800f548 <inc_lock>
 801183a:	4602      	mov	r2, r0
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	691b      	ldr	r3, [r3, #16]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d102      	bne.n	801184e <f_open+0x226>
 8011848:	2302      	movs	r3, #2
 801184a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801184e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011852:	2b00      	cmp	r3, #0
 8011854:	f040 80a3 	bne.w	801199e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801185c:	4611      	mov	r1, r2
 801185e:	4618      	mov	r0, r3
 8011860:	f7fe fd29 	bl	80102b6 <ld_clust>
 8011864:	4602      	mov	r2, r0
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801186a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801186c:	331c      	adds	r3, #28
 801186e:	4618      	mov	r0, r3
 8011870:	f7fd fd04 	bl	800f27c <ld_dword>
 8011874:	4602      	mov	r2, r0
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2200      	movs	r2, #0
 801187e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011880:	697a      	ldr	r2, [r7, #20]
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	88da      	ldrh	r2, [r3, #6]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	79fa      	ldrb	r2, [r7, #7]
 8011892:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2200      	movs	r2, #0
 8011898:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2200      	movs	r2, #0
 801189e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2200      	movs	r2, #0
 80118a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	3330      	adds	r3, #48	@ 0x30
 80118aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80118ae:	2100      	movs	r1, #0
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7fd fd6e 	bl	800f392 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80118b6:	79fb      	ldrb	r3, [r7, #7]
 80118b8:	f003 0320 	and.w	r3, r3, #32
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d06e      	beq.n	801199e <f_open+0x376>
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	68db      	ldr	r3, [r3, #12]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d06a      	beq.n	801199e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	68da      	ldr	r2, [r3, #12]
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	895b      	ldrh	r3, [r3, #10]
 80118d4:	461a      	mov	r2, r3
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	899b      	ldrh	r3, [r3, #12]
 80118da:	fb02 f303 	mul.w	r3, r2, r3
 80118de:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	689b      	ldr	r3, [r3, #8]
 80118e4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	68db      	ldr	r3, [r3, #12]
 80118ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80118ec:	e016      	b.n	801191c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fe f817 	bl	800f926 <get_fat>
 80118f8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80118fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80118fc:	2b01      	cmp	r3, #1
 80118fe:	d802      	bhi.n	8011906 <f_open+0x2de>
 8011900:	2302      	movs	r3, #2
 8011902:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801190c:	d102      	bne.n	8011914 <f_open+0x2ec>
 801190e:	2301      	movs	r3, #1
 8011910:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011914:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011918:	1ad3      	subs	r3, r2, r3
 801191a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801191c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011920:	2b00      	cmp	r3, #0
 8011922:	d103      	bne.n	801192c <f_open+0x304>
 8011924:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011928:	429a      	cmp	r2, r3
 801192a:	d8e0      	bhi.n	80118ee <f_open+0x2c6>
				}
				fp->clust = clst;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011930:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011932:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011936:	2b00      	cmp	r3, #0
 8011938:	d131      	bne.n	801199e <f_open+0x376>
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	899b      	ldrh	r3, [r3, #12]
 801193e:	461a      	mov	r2, r3
 8011940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011942:	fbb3 f1f2 	udiv	r1, r3, r2
 8011946:	fb01 f202 	mul.w	r2, r1, r2
 801194a:	1a9b      	subs	r3, r3, r2
 801194c:	2b00      	cmp	r3, #0
 801194e:	d026      	beq.n	801199e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011954:	4618      	mov	r0, r3
 8011956:	f7fd ffc7 	bl	800f8e8 <clust2sect>
 801195a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801195c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801195e:	2b00      	cmp	r3, #0
 8011960:	d103      	bne.n	801196a <f_open+0x342>
						res = FR_INT_ERR;
 8011962:	2302      	movs	r3, #2
 8011964:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8011968:	e019      	b.n	801199e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	899b      	ldrh	r3, [r3, #12]
 801196e:	461a      	mov	r2, r3
 8011970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011972:	fbb3 f2f2 	udiv	r2, r3, r2
 8011976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011978:	441a      	add	r2, r3
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	7858      	ldrb	r0, [r3, #1]
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6a1a      	ldr	r2, [r3, #32]
 801198c:	2301      	movs	r3, #1
 801198e:	f7fd fbff 	bl	800f190 <disk_read>
 8011992:	4603      	mov	r3, r0
 8011994:	2b00      	cmp	r3, #0
 8011996:	d002      	beq.n	801199e <f_open+0x376>
 8011998:	2301      	movs	r3, #1
 801199a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801199e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d002      	beq.n	80119ac <f_open+0x384>
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2200      	movs	r2, #0
 80119aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80119ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3768      	adds	r7, #104	@ 0x68
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b08c      	sub	sp, #48	@ 0x30
 80119bc:	af00      	add	r7, sp, #0
 80119be:	60f8      	str	r0, [r7, #12]
 80119c0:	60b9      	str	r1, [r7, #8]
 80119c2:	607a      	str	r2, [r7, #4]
 80119c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	2200      	movs	r2, #0
 80119ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	f107 0210 	add.w	r2, r7, #16
 80119d6:	4611      	mov	r1, r2
 80119d8:	4618      	mov	r0, r3
 80119da:	f7ff fda9 	bl	8011530 <validate>
 80119de:	4603      	mov	r3, r0
 80119e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80119e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d107      	bne.n	80119fc <f_write+0x44>
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	7d5b      	ldrb	r3, [r3, #21]
 80119f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80119f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d002      	beq.n	8011a02 <f_write+0x4a>
 80119fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a00:	e16a      	b.n	8011cd8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	7d1b      	ldrb	r3, [r3, #20]
 8011a06:	f003 0302 	and.w	r3, r3, #2
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d101      	bne.n	8011a12 <f_write+0x5a>
 8011a0e:	2307      	movs	r3, #7
 8011a10:	e162      	b.n	8011cd8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	699a      	ldr	r2, [r3, #24]
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	441a      	add	r2, r3
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	699b      	ldr	r3, [r3, #24]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	f080 814c 	bcs.w	8011cbc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	699b      	ldr	r3, [r3, #24]
 8011a28:	43db      	mvns	r3, r3
 8011a2a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011a2c:	e146      	b.n	8011cbc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	699b      	ldr	r3, [r3, #24]
 8011a32:	693a      	ldr	r2, [r7, #16]
 8011a34:	8992      	ldrh	r2, [r2, #12]
 8011a36:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a3a:	fb01 f202 	mul.w	r2, r1, r2
 8011a3e:	1a9b      	subs	r3, r3, r2
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	f040 80f1 	bne.w	8011c28 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	699b      	ldr	r3, [r3, #24]
 8011a4a:	693a      	ldr	r2, [r7, #16]
 8011a4c:	8992      	ldrh	r2, [r2, #12]
 8011a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a52:	693a      	ldr	r2, [r7, #16]
 8011a54:	8952      	ldrh	r2, [r2, #10]
 8011a56:	3a01      	subs	r2, #1
 8011a58:	4013      	ands	r3, r2
 8011a5a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011a5c:	69bb      	ldr	r3, [r7, #24]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d143      	bne.n	8011aea <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	699b      	ldr	r3, [r3, #24]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d10c      	bne.n	8011a84 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	689b      	ldr	r3, [r3, #8]
 8011a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d11a      	bne.n	8011aac <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2100      	movs	r1, #0
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7fe f9a5 	bl	800fdca <create_chain>
 8011a80:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011a82:	e013      	b.n	8011aac <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d007      	beq.n	8011a9c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	699b      	ldr	r3, [r3, #24]
 8011a90:	4619      	mov	r1, r3
 8011a92:	68f8      	ldr	r0, [r7, #12]
 8011a94:	f7fe fa31 	bl	800fefa <clmt_clust>
 8011a98:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011a9a:	e007      	b.n	8011aac <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011a9c:	68fa      	ldr	r2, [r7, #12]
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	69db      	ldr	r3, [r3, #28]
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	4610      	mov	r0, r2
 8011aa6:	f7fe f990 	bl	800fdca <create_chain>
 8011aaa:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	f000 8109 	beq.w	8011cc6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d104      	bne.n	8011ac4 <f_write+0x10c>
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2202      	movs	r2, #2
 8011abe:	755a      	strb	r2, [r3, #21]
 8011ac0:	2302      	movs	r3, #2
 8011ac2:	e109      	b.n	8011cd8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aca:	d104      	bne.n	8011ad6 <f_write+0x11e>
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2201      	movs	r2, #1
 8011ad0:	755a      	strb	r2, [r3, #21]
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	e100      	b.n	8011cd8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ada:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	689b      	ldr	r3, [r3, #8]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d102      	bne.n	8011aea <f_write+0x132>
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ae8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	7d1b      	ldrb	r3, [r3, #20]
 8011aee:	b25b      	sxtb	r3, r3
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	da18      	bge.n	8011b26 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	7858      	ldrb	r0, [r3, #1]
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	6a1a      	ldr	r2, [r3, #32]
 8011b02:	2301      	movs	r3, #1
 8011b04:	f7fd fb64 	bl	800f1d0 <disk_write>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d004      	beq.n	8011b18 <f_write+0x160>
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	2201      	movs	r2, #1
 8011b12:	755a      	strb	r2, [r3, #21]
 8011b14:	2301      	movs	r3, #1
 8011b16:	e0df      	b.n	8011cd8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	7d1b      	ldrb	r3, [r3, #20]
 8011b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011b26:	693a      	ldr	r2, [r7, #16]
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	69db      	ldr	r3, [r3, #28]
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	4610      	mov	r0, r2
 8011b30:	f7fd feda 	bl	800f8e8 <clust2sect>
 8011b34:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d104      	bne.n	8011b46 <f_write+0x18e>
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2202      	movs	r2, #2
 8011b40:	755a      	strb	r2, [r3, #21]
 8011b42:	2302      	movs	r3, #2
 8011b44:	e0c8      	b.n	8011cd8 <f_write+0x320>
			sect += csect;
 8011b46:	697a      	ldr	r2, [r7, #20]
 8011b48:	69bb      	ldr	r3, [r7, #24]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	899b      	ldrh	r3, [r3, #12]
 8011b52:	461a      	mov	r2, r3
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b5a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011b5c:	6a3b      	ldr	r3, [r7, #32]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d043      	beq.n	8011bea <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011b62:	69ba      	ldr	r2, [r7, #24]
 8011b64:	6a3b      	ldr	r3, [r7, #32]
 8011b66:	4413      	add	r3, r2
 8011b68:	693a      	ldr	r2, [r7, #16]
 8011b6a:	8952      	ldrh	r2, [r2, #10]
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	d905      	bls.n	8011b7c <f_write+0x1c4>
					cc = fs->csize - csect;
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	895b      	ldrh	r3, [r3, #10]
 8011b74:	461a      	mov	r2, r3
 8011b76:	69bb      	ldr	r3, [r7, #24]
 8011b78:	1ad3      	subs	r3, r2, r3
 8011b7a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	7858      	ldrb	r0, [r3, #1]
 8011b80:	6a3b      	ldr	r3, [r7, #32]
 8011b82:	697a      	ldr	r2, [r7, #20]
 8011b84:	69f9      	ldr	r1, [r7, #28]
 8011b86:	f7fd fb23 	bl	800f1d0 <disk_write>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d004      	beq.n	8011b9a <f_write+0x1e2>
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	2201      	movs	r2, #1
 8011b94:	755a      	strb	r2, [r3, #21]
 8011b96:	2301      	movs	r3, #1
 8011b98:	e09e      	b.n	8011cd8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	6a1a      	ldr	r2, [r3, #32]
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	1ad3      	subs	r3, r2, r3
 8011ba2:	6a3a      	ldr	r2, [r7, #32]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d918      	bls.n	8011bda <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	6a1a      	ldr	r2, [r3, #32]
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	1ad3      	subs	r3, r2, r3
 8011bb6:	693a      	ldr	r2, [r7, #16]
 8011bb8:	8992      	ldrh	r2, [r2, #12]
 8011bba:	fb02 f303 	mul.w	r3, r2, r3
 8011bbe:	69fa      	ldr	r2, [r7, #28]
 8011bc0:	18d1      	adds	r1, r2, r3
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	899b      	ldrh	r3, [r3, #12]
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	f7fd fbc2 	bl	800f350 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	7d1b      	ldrb	r3, [r3, #20]
 8011bd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011bd4:	b2da      	uxtb	r2, r3
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	899b      	ldrh	r3, [r3, #12]
 8011bde:	461a      	mov	r2, r3
 8011be0:	6a3b      	ldr	r3, [r7, #32]
 8011be2:	fb02 f303 	mul.w	r3, r2, r3
 8011be6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011be8:	e04b      	b.n	8011c82 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	6a1b      	ldr	r3, [r3, #32]
 8011bee:	697a      	ldr	r2, [r7, #20]
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d016      	beq.n	8011c22 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	699a      	ldr	r2, [r3, #24]
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	d210      	bcs.n	8011c22 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	7858      	ldrb	r0, [r3, #1]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	697a      	ldr	r2, [r7, #20]
 8011c0e:	f7fd fabf 	bl	800f190 <disk_read>
 8011c12:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d004      	beq.n	8011c22 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2201      	movs	r2, #1
 8011c1c:	755a      	strb	r2, [r3, #21]
 8011c1e:	2301      	movs	r3, #1
 8011c20:	e05a      	b.n	8011cd8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	697a      	ldr	r2, [r7, #20]
 8011c26:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	899b      	ldrh	r3, [r3, #12]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	699b      	ldr	r3, [r3, #24]
 8011c32:	693a      	ldr	r2, [r7, #16]
 8011c34:	8992      	ldrh	r2, [r2, #12]
 8011c36:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c3a:	fb01 f202 	mul.w	r2, r1, r2
 8011c3e:	1a9b      	subs	r3, r3, r2
 8011c40:	1ac3      	subs	r3, r0, r3
 8011c42:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d901      	bls.n	8011c50 <f_write+0x298>
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	699b      	ldr	r3, [r3, #24]
 8011c5a:	693a      	ldr	r2, [r7, #16]
 8011c5c:	8992      	ldrh	r2, [r2, #12]
 8011c5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c62:	fb00 f202 	mul.w	r2, r0, r2
 8011c66:	1a9b      	subs	r3, r3, r2
 8011c68:	440b      	add	r3, r1
 8011c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c6c:	69f9      	ldr	r1, [r7, #28]
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7fd fb6e 	bl	800f350 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	7d1b      	ldrb	r3, [r3, #20]
 8011c78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011c7c:	b2da      	uxtb	r2, r3
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011c82:	69fa      	ldr	r2, [r7, #28]
 8011c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c86:	4413      	add	r3, r2
 8011c88:	61fb      	str	r3, [r7, #28]
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	699a      	ldr	r2, [r3, #24]
 8011c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c90:	441a      	add	r2, r3
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	619a      	str	r2, [r3, #24]
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	68da      	ldr	r2, [r3, #12]
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	699b      	ldr	r3, [r3, #24]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	bf38      	it	cc
 8011ca2:	461a      	movcc	r2, r3
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	60da      	str	r2, [r3, #12]
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cae:	441a      	add	r2, r3
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	601a      	str	r2, [r3, #0]
 8011cb4:	687a      	ldr	r2, [r7, #4]
 8011cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb8:	1ad3      	subs	r3, r2, r3
 8011cba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	f47f aeb5 	bne.w	8011a2e <f_write+0x76>
 8011cc4:	e000      	b.n	8011cc8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011cc6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	7d1b      	ldrb	r3, [r3, #20]
 8011ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cd0:	b2da      	uxtb	r2, r3
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011cd6:	2300      	movs	r3, #0
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3730      	adds	r7, #48	@ 0x30
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b086      	sub	sp, #24
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f107 0208 	add.w	r2, r7, #8
 8011cee:	4611      	mov	r1, r2
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7ff fc1d 	bl	8011530 <validate>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011cfa:	7dfb      	ldrb	r3, [r7, #23]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d168      	bne.n	8011dd2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	7d1b      	ldrb	r3, [r3, #20]
 8011d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d062      	beq.n	8011dd2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	7d1b      	ldrb	r3, [r3, #20]
 8011d10:	b25b      	sxtb	r3, r3
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	da15      	bge.n	8011d42 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	7858      	ldrb	r0, [r3, #1]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6a1a      	ldr	r2, [r3, #32]
 8011d24:	2301      	movs	r3, #1
 8011d26:	f7fd fa53 	bl	800f1d0 <disk_write>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d001      	beq.n	8011d34 <f_sync+0x54>
 8011d30:	2301      	movs	r3, #1
 8011d32:	e04f      	b.n	8011dd4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	7d1b      	ldrb	r3, [r3, #20]
 8011d38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d3c:	b2da      	uxtb	r2, r3
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011d42:	f7fc fcc1 	bl	800e6c8 <get_fattime>
 8011d46:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011d48:	68ba      	ldr	r2, [r7, #8]
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d4e:	4619      	mov	r1, r3
 8011d50:	4610      	mov	r0, r2
 8011d52:	f7fd fd2b 	bl	800f7ac <move_window>
 8011d56:	4603      	mov	r3, r0
 8011d58:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011d5a:	7dfb      	ldrb	r3, [r7, #23]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d138      	bne.n	8011dd2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d64:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	330b      	adds	r3, #11
 8011d6a:	781a      	ldrb	r2, [r3, #0]
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	330b      	adds	r3, #11
 8011d70:	f042 0220 	orr.w	r2, r2, #32
 8011d74:	b2d2      	uxtb	r2, r2
 8011d76:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6818      	ldr	r0, [r3, #0]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	689b      	ldr	r3, [r3, #8]
 8011d80:	461a      	mov	r2, r3
 8011d82:	68f9      	ldr	r1, [r7, #12]
 8011d84:	f7fe fab6 	bl	80102f4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	f103 021c 	add.w	r2, r3, #28
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	68db      	ldr	r3, [r3, #12]
 8011d92:	4619      	mov	r1, r3
 8011d94:	4610      	mov	r0, r2
 8011d96:	f7fd faaf 	bl	800f2f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	3316      	adds	r3, #22
 8011d9e:	6939      	ldr	r1, [r7, #16]
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7fd faa9 	bl	800f2f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	3312      	adds	r3, #18
 8011daa:	2100      	movs	r1, #0
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fd fa88 	bl	800f2c2 <st_word>
					fs->wflag = 1;
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	2201      	movs	r2, #1
 8011db6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7fd fd24 	bl	800f808 <sync_fs>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	7d1b      	ldrb	r3, [r3, #20]
 8011dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011dcc:	b2da      	uxtb	r2, r3
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3718      	adds	r7, #24
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7ff ff7b 	bl	8011ce0 <f_sync>
 8011dea:	4603      	mov	r3, r0
 8011dec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011dee:	7bfb      	ldrb	r3, [r7, #15]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d118      	bne.n	8011e26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f107 0208 	add.w	r2, r7, #8
 8011dfa:	4611      	mov	r1, r2
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7ff fb97 	bl	8011530 <validate>
 8011e02:	4603      	mov	r3, r0
 8011e04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011e06:	7bfb      	ldrb	r3, [r7, #15]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d10c      	bne.n	8011e26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	691b      	ldr	r3, [r3, #16]
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7fd fc27 	bl	800f664 <dec_lock>
 8011e16:	4603      	mov	r3, r0
 8011e18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011e1a:	7bfb      	ldrb	r3, [r7, #15]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d102      	bne.n	8011e26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3710      	adds	r7, #16
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b090      	sub	sp, #64	@ 0x40
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	f107 0208 	add.w	r2, r7, #8
 8011e40:	4611      	mov	r1, r2
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7ff fb74 	bl	8011530 <validate>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011e4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d103      	bne.n	8011e5e <f_lseek+0x2e>
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	7d5b      	ldrb	r3, [r3, #21]
 8011e5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d002      	beq.n	8011e6c <f_lseek+0x3c>
 8011e66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011e6a:	e201      	b.n	8012270 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	f000 80d9 	beq.w	8012028 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e7c:	d15a      	bne.n	8011f34 <f_lseek+0x104>
			tbl = fp->cltbl;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e82:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e86:	1d1a      	adds	r2, r3, #4
 8011e88:	627a      	str	r2, [r7, #36]	@ 0x24
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	617b      	str	r3, [r7, #20]
 8011e8e:	2302      	movs	r3, #2
 8011e90:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	689b      	ldr	r3, [r3, #8]
 8011e96:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8011e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d03a      	beq.n	8011f14 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ea0:	613b      	str	r3, [r7, #16]
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ea8:	3302      	adds	r3, #2
 8011eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8011eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eae:	60fb      	str	r3, [r7, #12]
 8011eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7fd fd33 	bl	800f926 <get_fat>
 8011ec0:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ec4:	2b01      	cmp	r3, #1
 8011ec6:	d804      	bhi.n	8011ed2 <f_lseek+0xa2>
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2202      	movs	r2, #2
 8011ecc:	755a      	strb	r2, [r3, #21]
 8011ece:	2302      	movs	r3, #2
 8011ed0:	e1ce      	b.n	8012270 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ed8:	d104      	bne.n	8011ee4 <f_lseek+0xb4>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2201      	movs	r2, #1
 8011ede:	755a      	strb	r2, [r3, #21]
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	e1c5      	b.n	8012270 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d0de      	beq.n	8011eac <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011eee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d809      	bhi.n	8011f0a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef8:	1d1a      	adds	r2, r3, #4
 8011efa:	627a      	str	r2, [r7, #36]	@ 0x24
 8011efc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011efe:	601a      	str	r2, [r3, #0]
 8011f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f02:	1d1a      	adds	r2, r3, #4
 8011f04:	627a      	str	r2, [r7, #36]	@ 0x24
 8011f06:	693a      	ldr	r2, [r7, #16]
 8011f08:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	6a1b      	ldr	r3, [r3, #32]
 8011f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d3c4      	bcc.n	8011e9e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f1a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011f1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d803      	bhi.n	8011f2c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f26:	2200      	movs	r2, #0
 8011f28:	601a      	str	r2, [r3, #0]
 8011f2a:	e19f      	b.n	801226c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011f2c:	2311      	movs	r3, #17
 8011f2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8011f32:	e19b      	b.n	801226c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	683a      	ldr	r2, [r7, #0]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d902      	bls.n	8011f44 <f_lseek+0x114>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	683a      	ldr	r2, [r7, #0]
 8011f48:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	f000 818d 	beq.w	801226c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	3b01      	subs	r3, #1
 8011f56:	4619      	mov	r1, r3
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f7fd ffce 	bl	800fefa <clmt_clust>
 8011f5e:	4602      	mov	r2, r0
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011f64:	68ba      	ldr	r2, [r7, #8]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	69db      	ldr	r3, [r3, #28]
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	4610      	mov	r0, r2
 8011f6e:	f7fd fcbb 	bl	800f8e8 <clust2sect>
 8011f72:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011f74:	69bb      	ldr	r3, [r7, #24]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d104      	bne.n	8011f84 <f_lseek+0x154>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2202      	movs	r2, #2
 8011f7e:	755a      	strb	r2, [r3, #21]
 8011f80:	2302      	movs	r3, #2
 8011f82:	e175      	b.n	8012270 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	3b01      	subs	r3, #1
 8011f88:	68ba      	ldr	r2, [r7, #8]
 8011f8a:	8992      	ldrh	r2, [r2, #12]
 8011f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f90:	68ba      	ldr	r2, [r7, #8]
 8011f92:	8952      	ldrh	r2, [r2, #10]
 8011f94:	3a01      	subs	r2, #1
 8011f96:	4013      	ands	r3, r2
 8011f98:	69ba      	ldr	r2, [r7, #24]
 8011f9a:	4413      	add	r3, r2
 8011f9c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	699b      	ldr	r3, [r3, #24]
 8011fa2:	68ba      	ldr	r2, [r7, #8]
 8011fa4:	8992      	ldrh	r2, [r2, #12]
 8011fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011faa:	fb01 f202 	mul.w	r2, r1, r2
 8011fae:	1a9b      	subs	r3, r3, r2
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	f000 815b 	beq.w	801226c <f_lseek+0x43c>
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6a1b      	ldr	r3, [r3, #32]
 8011fba:	69ba      	ldr	r2, [r7, #24]
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	f000 8155 	beq.w	801226c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	7d1b      	ldrb	r3, [r3, #20]
 8011fc6:	b25b      	sxtb	r3, r3
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	da18      	bge.n	8011ffe <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011fcc:	68bb      	ldr	r3, [r7, #8]
 8011fce:	7858      	ldrb	r0, [r3, #1]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6a1a      	ldr	r2, [r3, #32]
 8011fda:	2301      	movs	r3, #1
 8011fdc:	f7fd f8f8 	bl	800f1d0 <disk_write>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d004      	beq.n	8011ff0 <f_lseek+0x1c0>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2201      	movs	r2, #1
 8011fea:	755a      	strb	r2, [r3, #21]
 8011fec:	2301      	movs	r3, #1
 8011fee:	e13f      	b.n	8012270 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	7d1b      	ldrb	r3, [r3, #20]
 8011ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	7858      	ldrb	r0, [r3, #1]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012008:	2301      	movs	r3, #1
 801200a:	69ba      	ldr	r2, [r7, #24]
 801200c:	f7fd f8c0 	bl	800f190 <disk_read>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d004      	beq.n	8012020 <f_lseek+0x1f0>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2201      	movs	r2, #1
 801201a:	755a      	strb	r2, [r3, #21]
 801201c:	2301      	movs	r3, #1
 801201e:	e127      	b.n	8012270 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	69ba      	ldr	r2, [r7, #24]
 8012024:	621a      	str	r2, [r3, #32]
 8012026:	e121      	b.n	801226c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	68db      	ldr	r3, [r3, #12]
 801202c:	683a      	ldr	r2, [r7, #0]
 801202e:	429a      	cmp	r2, r3
 8012030:	d908      	bls.n	8012044 <f_lseek+0x214>
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	7d1b      	ldrb	r3, [r3, #20]
 8012036:	f003 0302 	and.w	r3, r3, #2
 801203a:	2b00      	cmp	r3, #0
 801203c:	d102      	bne.n	8012044 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	699b      	ldr	r3, [r3, #24]
 8012048:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801204a:	2300      	movs	r3, #0
 801204c:	637b      	str	r3, [r7, #52]	@ 0x34
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012052:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	f000 80b5 	beq.w	80121c6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	895b      	ldrh	r3, [r3, #10]
 8012060:	461a      	mov	r2, r3
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	899b      	ldrh	r3, [r3, #12]
 8012066:	fb02 f303 	mul.w	r3, r2, r3
 801206a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801206c:	6a3b      	ldr	r3, [r7, #32]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d01b      	beq.n	80120aa <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	1e5a      	subs	r2, r3, #1
 8012076:	69fb      	ldr	r3, [r7, #28]
 8012078:	fbb2 f2f3 	udiv	r2, r2, r3
 801207c:	6a3b      	ldr	r3, [r7, #32]
 801207e:	1e59      	subs	r1, r3, #1
 8012080:	69fb      	ldr	r3, [r7, #28]
 8012082:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012086:	429a      	cmp	r2, r3
 8012088:	d30f      	bcc.n	80120aa <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801208a:	6a3b      	ldr	r3, [r7, #32]
 801208c:	1e5a      	subs	r2, r3, #1
 801208e:	69fb      	ldr	r3, [r7, #28]
 8012090:	425b      	negs	r3, r3
 8012092:	401a      	ands	r2, r3
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	699b      	ldr	r3, [r3, #24]
 801209c:	683a      	ldr	r2, [r7, #0]
 801209e:	1ad3      	subs	r3, r2, r3
 80120a0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	69db      	ldr	r3, [r3, #28]
 80120a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80120a8:	e022      	b.n	80120f0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	689b      	ldr	r3, [r3, #8]
 80120ae:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80120b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d119      	bne.n	80120ea <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2100      	movs	r1, #0
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7fd fe85 	bl	800fdca <create_chain>
 80120c0:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80120c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	d104      	bne.n	80120d2 <f_lseek+0x2a2>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2202      	movs	r2, #2
 80120cc:	755a      	strb	r2, [r3, #21]
 80120ce:	2302      	movs	r3, #2
 80120d0:	e0ce      	b.n	8012270 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80120d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120d8:	d104      	bne.n	80120e4 <f_lseek+0x2b4>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2201      	movs	r2, #1
 80120de:	755a      	strb	r2, [r3, #21]
 80120e0:	2301      	movs	r3, #1
 80120e2:	e0c5      	b.n	8012270 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80120e8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80120ee:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80120f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d067      	beq.n	80121c6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80120f6:	e03a      	b.n	801216e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80120f8:	683a      	ldr	r2, [r7, #0]
 80120fa:	69fb      	ldr	r3, [r7, #28]
 80120fc:	1ad3      	subs	r3, r2, r3
 80120fe:	603b      	str	r3, [r7, #0]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	699a      	ldr	r2, [r3, #24]
 8012104:	69fb      	ldr	r3, [r7, #28]
 8012106:	441a      	add	r2, r3
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	7d1b      	ldrb	r3, [r3, #20]
 8012110:	f003 0302 	and.w	r3, r3, #2
 8012114:	2b00      	cmp	r3, #0
 8012116:	d00b      	beq.n	8012130 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801211c:	4618      	mov	r0, r3
 801211e:	f7fd fe54 	bl	800fdca <create_chain>
 8012122:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012126:	2b00      	cmp	r3, #0
 8012128:	d108      	bne.n	801213c <f_lseek+0x30c>
							ofs = 0; break;
 801212a:	2300      	movs	r3, #0
 801212c:	603b      	str	r3, [r7, #0]
 801212e:	e022      	b.n	8012176 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012134:	4618      	mov	r0, r3
 8012136:	f7fd fbf6 	bl	800f926 <get_fat>
 801213a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801213c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801213e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012142:	d104      	bne.n	801214e <f_lseek+0x31e>
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2201      	movs	r2, #1
 8012148:	755a      	strb	r2, [r3, #21]
 801214a:	2301      	movs	r3, #1
 801214c:	e090      	b.n	8012270 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801214e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012150:	2b01      	cmp	r3, #1
 8012152:	d904      	bls.n	801215e <f_lseek+0x32e>
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	6a1b      	ldr	r3, [r3, #32]
 8012158:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801215a:	429a      	cmp	r2, r3
 801215c:	d304      	bcc.n	8012168 <f_lseek+0x338>
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2202      	movs	r2, #2
 8012162:	755a      	strb	r2, [r3, #21]
 8012164:	2302      	movs	r3, #2
 8012166:	e083      	b.n	8012270 <f_lseek+0x440>
					fp->clust = clst;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801216c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801216e:	683a      	ldr	r2, [r7, #0]
 8012170:	69fb      	ldr	r3, [r7, #28]
 8012172:	429a      	cmp	r2, r3
 8012174:	d8c0      	bhi.n	80120f8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	699a      	ldr	r2, [r3, #24]
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	441a      	add	r2, r3
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	899b      	ldrh	r3, [r3, #12]
 8012186:	461a      	mov	r2, r3
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	fbb3 f1f2 	udiv	r1, r3, r2
 801218e:	fb01 f202 	mul.w	r2, r1, r2
 8012192:	1a9b      	subs	r3, r3, r2
 8012194:	2b00      	cmp	r3, #0
 8012196:	d016      	beq.n	80121c6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801219c:	4618      	mov	r0, r3
 801219e:	f7fd fba3 	bl	800f8e8 <clust2sect>
 80121a2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80121a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d104      	bne.n	80121b4 <f_lseek+0x384>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2202      	movs	r2, #2
 80121ae:	755a      	strb	r2, [r3, #21]
 80121b0:	2302      	movs	r3, #2
 80121b2:	e05d      	b.n	8012270 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	899b      	ldrh	r3, [r3, #12]
 80121b8:	461a      	mov	r2, r3
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80121c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121c2:	4413      	add	r3, r2
 80121c4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	699a      	ldr	r2, [r3, #24]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	68db      	ldr	r3, [r3, #12]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d90a      	bls.n	80121e8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	699a      	ldr	r2, [r3, #24]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	7d1b      	ldrb	r3, [r3, #20]
 80121de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121e2:	b2da      	uxtb	r2, r3
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	699b      	ldr	r3, [r3, #24]
 80121ec:	68ba      	ldr	r2, [r7, #8]
 80121ee:	8992      	ldrh	r2, [r2, #12]
 80121f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80121f4:	fb01 f202 	mul.w	r2, r1, r2
 80121f8:	1a9b      	subs	r3, r3, r2
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d036      	beq.n	801226c <f_lseek+0x43c>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6a1b      	ldr	r3, [r3, #32]
 8012202:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012204:	429a      	cmp	r2, r3
 8012206:	d031      	beq.n	801226c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	7d1b      	ldrb	r3, [r3, #20]
 801220c:	b25b      	sxtb	r3, r3
 801220e:	2b00      	cmp	r3, #0
 8012210:	da18      	bge.n	8012244 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	7858      	ldrb	r0, [r3, #1]
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6a1a      	ldr	r2, [r3, #32]
 8012220:	2301      	movs	r3, #1
 8012222:	f7fc ffd5 	bl	800f1d0 <disk_write>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d004      	beq.n	8012236 <f_lseek+0x406>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2201      	movs	r2, #1
 8012230:	755a      	strb	r2, [r3, #21]
 8012232:	2301      	movs	r3, #1
 8012234:	e01c      	b.n	8012270 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	7d1b      	ldrb	r3, [r3, #20]
 801223a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801223e:	b2da      	uxtb	r2, r3
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	7858      	ldrb	r0, [r3, #1]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801224e:	2301      	movs	r3, #1
 8012250:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012252:	f7fc ff9d 	bl	800f190 <disk_read>
 8012256:	4603      	mov	r3, r0
 8012258:	2b00      	cmp	r3, #0
 801225a:	d004      	beq.n	8012266 <f_lseek+0x436>
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2201      	movs	r2, #1
 8012260:	755a      	strb	r2, [r3, #21]
 8012262:	2301      	movs	r3, #1
 8012264:	e004      	b.n	8012270 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801226a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801226c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012270:	4618      	mov	r0, r3
 8012272:	3740      	adds	r7, #64	@ 0x40
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	460b      	mov	r3, r1
 8012282:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8012284:	78fb      	ldrb	r3, [r7, #3]
 8012286:	2b0a      	cmp	r3, #10
 8012288:	d103      	bne.n	8012292 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801228a:	210d      	movs	r1, #13
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7ff fff3 	bl	8012278 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	685b      	ldr	r3, [r3, #4]
 8012296:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2b00      	cmp	r3, #0
 801229c:	db25      	blt.n	80122ea <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	1c5a      	adds	r2, r3, #1
 80122a2:	60fa      	str	r2, [r7, #12]
 80122a4:	687a      	ldr	r2, [r7, #4]
 80122a6:	4413      	add	r3, r2
 80122a8:	78fa      	ldrb	r2, [r7, #3]
 80122aa:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2b3c      	cmp	r3, #60	@ 0x3c
 80122b0:	dd12      	ble.n	80122d8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6818      	ldr	r0, [r3, #0]
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f103 010c 	add.w	r1, r3, #12
 80122bc:	68fa      	ldr	r2, [r7, #12]
 80122be:	f107 0308 	add.w	r3, r7, #8
 80122c2:	f7ff fb79 	bl	80119b8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80122c6:	68ba      	ldr	r2, [r7, #8]
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d101      	bne.n	80122d2 <putc_bfd+0x5a>
 80122ce:	2300      	movs	r3, #0
 80122d0:	e001      	b.n	80122d6 <putc_bfd+0x5e>
 80122d2:	f04f 33ff 	mov.w	r3, #4294967295
 80122d6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	68fa      	ldr	r2, [r7, #12]
 80122dc:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	689b      	ldr	r3, [r3, #8]
 80122e2:	1c5a      	adds	r2, r3, #1
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	609a      	str	r2, [r3, #8]
 80122e8:	e000      	b.n	80122ec <putc_bfd+0x74>
	if (i < 0) return;
 80122ea:	bf00      	nop
}
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b084      	sub	sp, #16
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	db16      	blt.n	8012330 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6818      	ldr	r0, [r3, #0]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f103 010c 	add.w	r1, r3, #12
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	685b      	ldr	r3, [r3, #4]
 8012310:	461a      	mov	r2, r3
 8012312:	f107 030c 	add.w	r3, r7, #12
 8012316:	f7ff fb4f 	bl	80119b8 <f_write>
 801231a:	4603      	mov	r3, r0
 801231c:	2b00      	cmp	r3, #0
 801231e:	d107      	bne.n	8012330 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	68fa      	ldr	r2, [r7, #12]
 8012326:	4293      	cmp	r3, r2
 8012328:	d102      	bne.n	8012330 <putc_flush+0x3e>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	689b      	ldr	r3, [r3, #8]
 801232e:	e001      	b.n	8012334 <putc_flush+0x42>
	return EOF;
 8012330:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012334:	4618      	mov	r0, r3
 8012336:	3710      	adds	r7, #16
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801233c:	b480      	push	{r7}
 801233e:	b083      	sub	sp, #12
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	683a      	ldr	r2, [r7, #0]
 801234a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2200      	movs	r2, #0
 8012350:	605a      	str	r2, [r3, #4]
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	685a      	ldr	r2, [r3, #4]
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	609a      	str	r2, [r3, #8]
}
 801235a:	bf00      	nop
 801235c:	370c      	adds	r7, #12
 801235e:	46bd      	mov	sp, r7
 8012360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012364:	4770      	bx	lr
	...

08012368 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8012368:	b40e      	push	{r1, r2, r3}
 801236a:	b580      	push	{r7, lr}
 801236c:	b0a7      	sub	sp, #156	@ 0x9c
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8012372:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012376:	6879      	ldr	r1, [r7, #4]
 8012378:	4618      	mov	r0, r3
 801237a:	f7ff ffdf 	bl	801233c <putc_init>

	va_start(arp, fmt);
 801237e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8012382:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8012384:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012388:	1c5a      	adds	r2, r3, #1
 801238a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8012394:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012398:	2b00      	cmp	r3, #0
 801239a:	f000 81f2 	beq.w	8012782 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801239e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80123a2:	2b25      	cmp	r3, #37	@ 0x25
 80123a4:	d008      	beq.n	80123b8 <f_printf+0x50>
			putc_bfd(&pb, c);
 80123a6:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80123aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80123ae:	4611      	mov	r1, r2
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7ff ff61 	bl	8012278 <putc_bfd>
			continue;
 80123b6:	e1e3      	b.n	8012780 <f_printf+0x418>
		}
		w = f = 0;
 80123b8:	2300      	movs	r3, #0
 80123ba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80123be:	2300      	movs	r3, #0
 80123c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 80123c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80123c8:	1c5a      	adds	r2, r3, #1
 80123ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80123ce:	781b      	ldrb	r3, [r3, #0]
 80123d0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80123d4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80123d8:	2b30      	cmp	r3, #48	@ 0x30
 80123da:	d10b      	bne.n	80123f4 <f_printf+0x8c>
			f = 1; c = *fmt++;
 80123dc:	2301      	movs	r3, #1
 80123de:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80123e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80123e6:	1c5a      	adds	r2, r3, #1
 80123e8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80123f2:	e024      	b.n	801243e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80123f4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80123f8:	2b2d      	cmp	r3, #45	@ 0x2d
 80123fa:	d120      	bne.n	801243e <f_printf+0xd6>
				f = 2; c = *fmt++;
 80123fc:	2302      	movs	r3, #2
 80123fe:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8012402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012406:	1c5a      	adds	r2, r3, #1
 8012408:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801240c:	781b      	ldrb	r3, [r3, #0]
 801240e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8012412:	e014      	b.n	801243e <f_printf+0xd6>
			w = w * 10 + c - '0';
 8012414:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012418:	4613      	mov	r3, r2
 801241a:	009b      	lsls	r3, r3, #2
 801241c:	4413      	add	r3, r2
 801241e:	005b      	lsls	r3, r3, #1
 8012420:	461a      	mov	r2, r3
 8012422:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012426:	4413      	add	r3, r2
 8012428:	3b30      	subs	r3, #48	@ 0x30
 801242a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 801242e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012432:	1c5a      	adds	r2, r3, #1
 8012434:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012438:	781b      	ldrb	r3, [r3, #0]
 801243a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 801243e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012442:	2b2f      	cmp	r3, #47	@ 0x2f
 8012444:	d903      	bls.n	801244e <f_printf+0xe6>
 8012446:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801244a:	2b39      	cmp	r3, #57	@ 0x39
 801244c:	d9e2      	bls.n	8012414 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801244e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012452:	2b6c      	cmp	r3, #108	@ 0x6c
 8012454:	d003      	beq.n	801245e <f_printf+0xf6>
 8012456:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801245a:	2b4c      	cmp	r3, #76	@ 0x4c
 801245c:	d10d      	bne.n	801247a <f_printf+0x112>
			f |= 4; c = *fmt++;
 801245e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012462:	f043 0304 	orr.w	r3, r3, #4
 8012466:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801246a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801246e:	1c5a      	adds	r2, r3, #1
 8012470:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8012474:	781b      	ldrb	r3, [r3, #0]
 8012476:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 801247a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801247e:	2b00      	cmp	r3, #0
 8012480:	f000 8181 	beq.w	8012786 <f_printf+0x41e>
		d = c;
 8012484:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012488:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 801248c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012490:	2b60      	cmp	r3, #96	@ 0x60
 8012492:	d908      	bls.n	80124a6 <f_printf+0x13e>
 8012494:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012498:	2b7a      	cmp	r3, #122	@ 0x7a
 801249a:	d804      	bhi.n	80124a6 <f_printf+0x13e>
 801249c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80124a0:	3b20      	subs	r3, #32
 80124a2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 80124a6:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80124aa:	3b42      	subs	r3, #66	@ 0x42
 80124ac:	2b16      	cmp	r3, #22
 80124ae:	f200 8098 	bhi.w	80125e2 <f_printf+0x27a>
 80124b2:	a201      	add	r2, pc, #4	@ (adr r2, 80124b8 <f_printf+0x150>)
 80124b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124b8:	080125c3 	.word	0x080125c3
 80124bc:	080125ab 	.word	0x080125ab
 80124c0:	080125d3 	.word	0x080125d3
 80124c4:	080125e3 	.word	0x080125e3
 80124c8:	080125e3 	.word	0x080125e3
 80124cc:	080125e3 	.word	0x080125e3
 80124d0:	080125e3 	.word	0x080125e3
 80124d4:	080125e3 	.word	0x080125e3
 80124d8:	080125e3 	.word	0x080125e3
 80124dc:	080125e3 	.word	0x080125e3
 80124e0:	080125e3 	.word	0x080125e3
 80124e4:	080125e3 	.word	0x080125e3
 80124e8:	080125e3 	.word	0x080125e3
 80124ec:	080125cb 	.word	0x080125cb
 80124f0:	080125e3 	.word	0x080125e3
 80124f4:	080125e3 	.word	0x080125e3
 80124f8:	080125e3 	.word	0x080125e3
 80124fc:	08012515 	.word	0x08012515
 8012500:	080125e3 	.word	0x080125e3
 8012504:	080125d3 	.word	0x080125d3
 8012508:	080125e3 	.word	0x080125e3
 801250c:	080125e3 	.word	0x080125e3
 8012510:	080125db 	.word	0x080125db
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8012514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012516:	1d1a      	adds	r2, r3, #4
 8012518:	67ba      	str	r2, [r7, #120]	@ 0x78
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 801251e:	2300      	movs	r3, #0
 8012520:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012524:	e004      	b.n	8012530 <f_printf+0x1c8>
 8012526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801252a:	3301      	adds	r3, #1
 801252c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012530:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012536:	4413      	add	r3, r2
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d1f3      	bne.n	8012526 <f_printf+0x1be>
			if (!(f & 2)) {
 801253e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012542:	f003 0302 	and.w	r3, r3, #2
 8012546:	2b00      	cmp	r3, #0
 8012548:	d11a      	bne.n	8012580 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 801254a:	e005      	b.n	8012558 <f_printf+0x1f0>
 801254c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012550:	2120      	movs	r1, #32
 8012552:	4618      	mov	r0, r3
 8012554:	f7ff fe90 	bl	8012278 <putc_bfd>
 8012558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801255c:	1c5a      	adds	r2, r3, #1
 801255e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012562:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012566:	429a      	cmp	r2, r3
 8012568:	d8f0      	bhi.n	801254c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 801256a:	e009      	b.n	8012580 <f_printf+0x218>
 801256c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801256e:	1c5a      	adds	r2, r3, #1
 8012570:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8012572:	781a      	ldrb	r2, [r3, #0]
 8012574:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012578:	4611      	mov	r1, r2
 801257a:	4618      	mov	r0, r3
 801257c:	f7ff fe7c 	bl	8012278 <putc_bfd>
 8012580:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d1f1      	bne.n	801256c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8012588:	e005      	b.n	8012596 <f_printf+0x22e>
 801258a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801258e:	2120      	movs	r1, #32
 8012590:	4618      	mov	r0, r3
 8012592:	f7ff fe71 	bl	8012278 <putc_bfd>
 8012596:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801259a:	1c5a      	adds	r2, r3, #1
 801259c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80125a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d8f0      	bhi.n	801258a <f_printf+0x222>
			continue;
 80125a8:	e0ea      	b.n	8012780 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80125aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80125ac:	1d1a      	adds	r2, r3, #4
 80125ae:	67ba      	str	r2, [r7, #120]	@ 0x78
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	b2da      	uxtb	r2, r3
 80125b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80125b8:	4611      	mov	r1, r2
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7ff fe5c 	bl	8012278 <putc_bfd>
 80125c0:	e0de      	b.n	8012780 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80125c2:	2302      	movs	r3, #2
 80125c4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80125c8:	e014      	b.n	80125f4 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80125ca:	2308      	movs	r3, #8
 80125cc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80125d0:	e010      	b.n	80125f4 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80125d2:	230a      	movs	r3, #10
 80125d4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80125d8:	e00c      	b.n	80125f4 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80125da:	2310      	movs	r3, #16
 80125dc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80125e0:	e008      	b.n	80125f4 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80125e2:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80125e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80125ea:	4611      	mov	r1, r2
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7ff fe43 	bl	8012278 <putc_bfd>
 80125f2:	e0c5      	b.n	8012780 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80125f4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80125f8:	f003 0304 	and.w	r3, r3, #4
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d004      	beq.n	801260a <f_printf+0x2a2>
 8012600:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012602:	1d1a      	adds	r2, r3, #4
 8012604:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	e00c      	b.n	8012624 <f_printf+0x2bc>
 801260a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801260e:	2b44      	cmp	r3, #68	@ 0x44
 8012610:	d104      	bne.n	801261c <f_printf+0x2b4>
 8012612:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012614:	1d1a      	adds	r2, r3, #4
 8012616:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	e003      	b.n	8012624 <f_printf+0x2bc>
 801261c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801261e:	1d1a      	adds	r2, r3, #4
 8012620:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8012628:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801262c:	2b44      	cmp	r3, #68	@ 0x44
 801262e:	d10e      	bne.n	801264e <f_printf+0x2e6>
 8012630:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012634:	2b00      	cmp	r3, #0
 8012636:	da0a      	bge.n	801264e <f_printf+0x2e6>
			v = 0 - v;
 8012638:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801263c:	425b      	negs	r3, r3
 801263e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8012642:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012646:	f043 0308 	orr.w	r3, r3, #8
 801264a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 801264e:	2300      	movs	r3, #0
 8012650:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8012654:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 8012658:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801265c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012660:	fb01 f202 	mul.w	r2, r1, r2
 8012664:	1a9b      	subs	r3, r3, r2
 8012666:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 801266a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 801266e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012672:	fbb2 f3f3 	udiv	r3, r2, r3
 8012676:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801267a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801267e:	2b09      	cmp	r3, #9
 8012680:	d90b      	bls.n	801269a <f_printf+0x332>
 8012682:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8012686:	2b78      	cmp	r3, #120	@ 0x78
 8012688:	d101      	bne.n	801268e <f_printf+0x326>
 801268a:	2227      	movs	r2, #39	@ 0x27
 801268c:	e000      	b.n	8012690 <f_printf+0x328>
 801268e:	2207      	movs	r2, #7
 8012690:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8012694:	4413      	add	r3, r2
 8012696:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 801269a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801269e:	1c5a      	adds	r2, r3, #1
 80126a0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80126a4:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80126a8:	3230      	adds	r2, #48	@ 0x30
 80126aa:	b2d2      	uxtb	r2, r2
 80126ac:	3398      	adds	r3, #152	@ 0x98
 80126ae:	443b      	add	r3, r7
 80126b0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80126b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d003      	beq.n	80126c4 <f_printf+0x35c>
 80126bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80126c0:	2b1f      	cmp	r3, #31
 80126c2:	d9c7      	bls.n	8012654 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80126c4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80126c8:	f003 0308 	and.w	r3, r3, #8
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d009      	beq.n	80126e4 <f_printf+0x37c>
 80126d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80126d4:	1c5a      	adds	r2, r3, #1
 80126d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80126da:	3398      	adds	r3, #152	@ 0x98
 80126dc:	443b      	add	r3, r7
 80126de:	222d      	movs	r2, #45	@ 0x2d
 80126e0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80126e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80126e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80126ec:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80126f0:	f003 0301 	and.w	r3, r3, #1
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d001      	beq.n	80126fc <f_printf+0x394>
 80126f8:	2330      	movs	r3, #48	@ 0x30
 80126fa:	e000      	b.n	80126fe <f_printf+0x396>
 80126fc:	2320      	movs	r3, #32
 80126fe:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8012702:	e007      	b.n	8012714 <f_printf+0x3ac>
 8012704:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012708:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801270c:	4611      	mov	r1, r2
 801270e:	4618      	mov	r0, r3
 8012710:	f7ff fdb2 	bl	8012278 <putc_bfd>
 8012714:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012718:	f003 0302 	and.w	r3, r3, #2
 801271c:	2b00      	cmp	r3, #0
 801271e:	d108      	bne.n	8012732 <f_printf+0x3ca>
 8012720:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012724:	1c5a      	adds	r2, r3, #1
 8012726:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801272a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801272e:	429a      	cmp	r2, r3
 8012730:	d8e8      	bhi.n	8012704 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8012732:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012736:	3b01      	subs	r3, #1
 8012738:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801273c:	f107 020c 	add.w	r2, r7, #12
 8012740:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012744:	4413      	add	r3, r2
 8012746:	781a      	ldrb	r2, [r3, #0]
 8012748:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801274c:	4611      	mov	r1, r2
 801274e:	4618      	mov	r0, r3
 8012750:	f7ff fd92 	bl	8012278 <putc_bfd>
		} while (i);
 8012754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012758:	2b00      	cmp	r3, #0
 801275a:	d1ea      	bne.n	8012732 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 801275c:	e007      	b.n	801276e <f_printf+0x406>
 801275e:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8012762:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012766:	4611      	mov	r1, r2
 8012768:	4618      	mov	r0, r3
 801276a:	f7ff fd85 	bl	8012278 <putc_bfd>
 801276e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012772:	1c5a      	adds	r2, r3, #1
 8012774:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012778:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801277c:	429a      	cmp	r2, r3
 801277e:	d8ee      	bhi.n	801275e <f_printf+0x3f6>
		c = *fmt++;
 8012780:	e600      	b.n	8012384 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8012782:	bf00      	nop
 8012784:	e000      	b.n	8012788 <f_printf+0x420>
		if (!c) break;
 8012786:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8012788:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801278c:	4618      	mov	r0, r3
 801278e:	f7ff fdb0 	bl	80122f2 <putc_flush>
 8012792:	4603      	mov	r3, r0
}
 8012794:	4618      	mov	r0, r3
 8012796:	379c      	adds	r7, #156	@ 0x9c
 8012798:	46bd      	mov	sp, r7
 801279a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801279e:	b003      	add	sp, #12
 80127a0:	4770      	bx	lr
 80127a2:	bf00      	nop

080127a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80127a4:	b480      	push	{r7}
 80127a6:	b087      	sub	sp, #28
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	60f8      	str	r0, [r7, #12]
 80127ac:	60b9      	str	r1, [r7, #8]
 80127ae:	4613      	mov	r3, r2
 80127b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80127b2:	2301      	movs	r3, #1
 80127b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80127b6:	2300      	movs	r3, #0
 80127b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80127ba:	4b1f      	ldr	r3, [pc, #124]	@ (8012838 <FATFS_LinkDriverEx+0x94>)
 80127bc:	7a5b      	ldrb	r3, [r3, #9]
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d131      	bne.n	8012828 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80127c4:	4b1c      	ldr	r3, [pc, #112]	@ (8012838 <FATFS_LinkDriverEx+0x94>)
 80127c6:	7a5b      	ldrb	r3, [r3, #9]
 80127c8:	b2db      	uxtb	r3, r3
 80127ca:	461a      	mov	r2, r3
 80127cc:	4b1a      	ldr	r3, [pc, #104]	@ (8012838 <FATFS_LinkDriverEx+0x94>)
 80127ce:	2100      	movs	r1, #0
 80127d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80127d2:	4b19      	ldr	r3, [pc, #100]	@ (8012838 <FATFS_LinkDriverEx+0x94>)
 80127d4:	7a5b      	ldrb	r3, [r3, #9]
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	4a17      	ldr	r2, [pc, #92]	@ (8012838 <FATFS_LinkDriverEx+0x94>)
 80127da:	009b      	lsls	r3, r3, #2
 80127dc:	4413      	add	r3, r2
 80127de:	68fa      	ldr	r2, [r7, #12]
 80127e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80127e2:	4b15      	ldr	r3, [pc, #84]	@ (8012838 <FATFS_LinkDriverEx+0x94>)
 80127e4:	7a5b      	ldrb	r3, [r3, #9]
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	461a      	mov	r2, r3
 80127ea:	4b13      	ldr	r3, [pc, #76]	@ (8012838 <FATFS_LinkDriverEx+0x94>)
 80127ec:	4413      	add	r3, r2
 80127ee:	79fa      	ldrb	r2, [r7, #7]
 80127f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80127f2:	4b11      	ldr	r3, [pc, #68]	@ (8012838 <FATFS_LinkDriverEx+0x94>)
 80127f4:	7a5b      	ldrb	r3, [r3, #9]
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	1c5a      	adds	r2, r3, #1
 80127fa:	b2d1      	uxtb	r1, r2
 80127fc:	4a0e      	ldr	r2, [pc, #56]	@ (8012838 <FATFS_LinkDriverEx+0x94>)
 80127fe:	7251      	strb	r1, [r2, #9]
 8012800:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012802:	7dbb      	ldrb	r3, [r7, #22]
 8012804:	3330      	adds	r3, #48	@ 0x30
 8012806:	b2da      	uxtb	r2, r3
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	3301      	adds	r3, #1
 8012810:	223a      	movs	r2, #58	@ 0x3a
 8012812:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	3302      	adds	r3, #2
 8012818:	222f      	movs	r2, #47	@ 0x2f
 801281a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	3303      	adds	r3, #3
 8012820:	2200      	movs	r2, #0
 8012822:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012824:	2300      	movs	r3, #0
 8012826:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012828:	7dfb      	ldrb	r3, [r7, #23]
}
 801282a:	4618      	mov	r0, r3
 801282c:	371c      	adds	r7, #28
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	24002c00 	.word	0x24002c00

0801283c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b082      	sub	sp, #8
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
 8012844:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012846:	2200      	movs	r2, #0
 8012848:	6839      	ldr	r1, [r7, #0]
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f7ff ffaa 	bl	80127a4 <FATFS_LinkDriverEx>
 8012850:	4603      	mov	r3, r0
}
 8012852:	4618      	mov	r0, r3
 8012854:	3708      	adds	r7, #8
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
	...

0801285c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801285c:	b480      	push	{r7}
 801285e:	b085      	sub	sp, #20
 8012860:	af00      	add	r7, sp, #0
 8012862:	4603      	mov	r3, r0
 8012864:	6039      	str	r1, [r7, #0]
 8012866:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012868:	88fb      	ldrh	r3, [r7, #6]
 801286a:	2b7f      	cmp	r3, #127	@ 0x7f
 801286c:	d802      	bhi.n	8012874 <ff_convert+0x18>
		c = chr;
 801286e:	88fb      	ldrh	r3, [r7, #6]
 8012870:	81fb      	strh	r3, [r7, #14]
 8012872:	e025      	b.n	80128c0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d00b      	beq.n	8012892 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801287a:	88fb      	ldrh	r3, [r7, #6]
 801287c:	2bff      	cmp	r3, #255	@ 0xff
 801287e:	d805      	bhi.n	801288c <ff_convert+0x30>
 8012880:	88fb      	ldrh	r3, [r7, #6]
 8012882:	3b80      	subs	r3, #128	@ 0x80
 8012884:	4a12      	ldr	r2, [pc, #72]	@ (80128d0 <ff_convert+0x74>)
 8012886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801288a:	e000      	b.n	801288e <ff_convert+0x32>
 801288c:	2300      	movs	r3, #0
 801288e:	81fb      	strh	r3, [r7, #14]
 8012890:	e016      	b.n	80128c0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012892:	2300      	movs	r3, #0
 8012894:	81fb      	strh	r3, [r7, #14]
 8012896:	e009      	b.n	80128ac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012898:	89fb      	ldrh	r3, [r7, #14]
 801289a:	4a0d      	ldr	r2, [pc, #52]	@ (80128d0 <ff_convert+0x74>)
 801289c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80128a0:	88fa      	ldrh	r2, [r7, #6]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d006      	beq.n	80128b4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80128a6:	89fb      	ldrh	r3, [r7, #14]
 80128a8:	3301      	adds	r3, #1
 80128aa:	81fb      	strh	r3, [r7, #14]
 80128ac:	89fb      	ldrh	r3, [r7, #14]
 80128ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80128b0:	d9f2      	bls.n	8012898 <ff_convert+0x3c>
 80128b2:	e000      	b.n	80128b6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80128b4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80128b6:	89fb      	ldrh	r3, [r7, #14]
 80128b8:	3380      	adds	r3, #128	@ 0x80
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80128c0:	89fb      	ldrh	r3, [r7, #14]
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3714      	adds	r7, #20
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr
 80128ce:	bf00      	nop
 80128d0:	08012e88 	.word	0x08012e88

080128d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80128d4:	b480      	push	{r7}
 80128d6:	b087      	sub	sp, #28
 80128d8:	af00      	add	r7, sp, #0
 80128da:	4603      	mov	r3, r0
 80128dc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80128de:	88fb      	ldrh	r3, [r7, #6]
 80128e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80128e4:	d201      	bcs.n	80128ea <ff_wtoupper+0x16>
 80128e6:	4b3e      	ldr	r3, [pc, #248]	@ (80129e0 <ff_wtoupper+0x10c>)
 80128e8:	e000      	b.n	80128ec <ff_wtoupper+0x18>
 80128ea:	4b3e      	ldr	r3, [pc, #248]	@ (80129e4 <ff_wtoupper+0x110>)
 80128ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	1c9a      	adds	r2, r3, #2
 80128f2:	617a      	str	r2, [r7, #20]
 80128f4:	881b      	ldrh	r3, [r3, #0]
 80128f6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80128f8:	8a7b      	ldrh	r3, [r7, #18]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d068      	beq.n	80129d0 <ff_wtoupper+0xfc>
 80128fe:	88fa      	ldrh	r2, [r7, #6]
 8012900:	8a7b      	ldrh	r3, [r7, #18]
 8012902:	429a      	cmp	r2, r3
 8012904:	d364      	bcc.n	80129d0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	1c9a      	adds	r2, r3, #2
 801290a:	617a      	str	r2, [r7, #20]
 801290c:	881b      	ldrh	r3, [r3, #0]
 801290e:	823b      	strh	r3, [r7, #16]
 8012910:	8a3b      	ldrh	r3, [r7, #16]
 8012912:	0a1b      	lsrs	r3, r3, #8
 8012914:	81fb      	strh	r3, [r7, #14]
 8012916:	8a3b      	ldrh	r3, [r7, #16]
 8012918:	b2db      	uxtb	r3, r3
 801291a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801291c:	88fa      	ldrh	r2, [r7, #6]
 801291e:	8a79      	ldrh	r1, [r7, #18]
 8012920:	8a3b      	ldrh	r3, [r7, #16]
 8012922:	440b      	add	r3, r1
 8012924:	429a      	cmp	r2, r3
 8012926:	da49      	bge.n	80129bc <ff_wtoupper+0xe8>
			switch (cmd) {
 8012928:	89fb      	ldrh	r3, [r7, #14]
 801292a:	2b08      	cmp	r3, #8
 801292c:	d84f      	bhi.n	80129ce <ff_wtoupper+0xfa>
 801292e:	a201      	add	r2, pc, #4	@ (adr r2, 8012934 <ff_wtoupper+0x60>)
 8012930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012934:	08012959 	.word	0x08012959
 8012938:	0801296b 	.word	0x0801296b
 801293c:	08012981 	.word	0x08012981
 8012940:	08012989 	.word	0x08012989
 8012944:	08012991 	.word	0x08012991
 8012948:	08012999 	.word	0x08012999
 801294c:	080129a1 	.word	0x080129a1
 8012950:	080129a9 	.word	0x080129a9
 8012954:	080129b1 	.word	0x080129b1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012958:	88fa      	ldrh	r2, [r7, #6]
 801295a:	8a7b      	ldrh	r3, [r7, #18]
 801295c:	1ad3      	subs	r3, r2, r3
 801295e:	005b      	lsls	r3, r3, #1
 8012960:	697a      	ldr	r2, [r7, #20]
 8012962:	4413      	add	r3, r2
 8012964:	881b      	ldrh	r3, [r3, #0]
 8012966:	80fb      	strh	r3, [r7, #6]
 8012968:	e027      	b.n	80129ba <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801296a:	88fa      	ldrh	r2, [r7, #6]
 801296c:	8a7b      	ldrh	r3, [r7, #18]
 801296e:	1ad3      	subs	r3, r2, r3
 8012970:	b29b      	uxth	r3, r3
 8012972:	f003 0301 	and.w	r3, r3, #1
 8012976:	b29b      	uxth	r3, r3
 8012978:	88fa      	ldrh	r2, [r7, #6]
 801297a:	1ad3      	subs	r3, r2, r3
 801297c:	80fb      	strh	r3, [r7, #6]
 801297e:	e01c      	b.n	80129ba <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012980:	88fb      	ldrh	r3, [r7, #6]
 8012982:	3b10      	subs	r3, #16
 8012984:	80fb      	strh	r3, [r7, #6]
 8012986:	e018      	b.n	80129ba <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012988:	88fb      	ldrh	r3, [r7, #6]
 801298a:	3b20      	subs	r3, #32
 801298c:	80fb      	strh	r3, [r7, #6]
 801298e:	e014      	b.n	80129ba <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012990:	88fb      	ldrh	r3, [r7, #6]
 8012992:	3b30      	subs	r3, #48	@ 0x30
 8012994:	80fb      	strh	r3, [r7, #6]
 8012996:	e010      	b.n	80129ba <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012998:	88fb      	ldrh	r3, [r7, #6]
 801299a:	3b1a      	subs	r3, #26
 801299c:	80fb      	strh	r3, [r7, #6]
 801299e:	e00c      	b.n	80129ba <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80129a0:	88fb      	ldrh	r3, [r7, #6]
 80129a2:	3308      	adds	r3, #8
 80129a4:	80fb      	strh	r3, [r7, #6]
 80129a6:	e008      	b.n	80129ba <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80129a8:	88fb      	ldrh	r3, [r7, #6]
 80129aa:	3b50      	subs	r3, #80	@ 0x50
 80129ac:	80fb      	strh	r3, [r7, #6]
 80129ae:	e004      	b.n	80129ba <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80129b0:	88fb      	ldrh	r3, [r7, #6]
 80129b2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80129b6:	80fb      	strh	r3, [r7, #6]
 80129b8:	bf00      	nop
			}
			break;
 80129ba:	e008      	b.n	80129ce <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80129bc:	89fb      	ldrh	r3, [r7, #14]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d195      	bne.n	80128ee <ff_wtoupper+0x1a>
 80129c2:	8a3b      	ldrh	r3, [r7, #16]
 80129c4:	005b      	lsls	r3, r3, #1
 80129c6:	697a      	ldr	r2, [r7, #20]
 80129c8:	4413      	add	r3, r2
 80129ca:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80129cc:	e78f      	b.n	80128ee <ff_wtoupper+0x1a>
			break;
 80129ce:	bf00      	nop
	}

	return chr;
 80129d0:	88fb      	ldrh	r3, [r7, #6]
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	371c      	adds	r7, #28
 80129d6:	46bd      	mov	sp, r7
 80129d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129dc:	4770      	bx	lr
 80129de:	bf00      	nop
 80129e0:	08012f88 	.word	0x08012f88
 80129e4:	0801317c 	.word	0x0801317c

080129e8 <memset>:
 80129e8:	4402      	add	r2, r0
 80129ea:	4603      	mov	r3, r0
 80129ec:	4293      	cmp	r3, r2
 80129ee:	d100      	bne.n	80129f2 <memset+0xa>
 80129f0:	4770      	bx	lr
 80129f2:	f803 1b01 	strb.w	r1, [r3], #1
 80129f6:	e7f9      	b.n	80129ec <memset+0x4>

080129f8 <__errno>:
 80129f8:	4b01      	ldr	r3, [pc, #4]	@ (8012a00 <__errno+0x8>)
 80129fa:	6818      	ldr	r0, [r3, #0]
 80129fc:	4770      	bx	lr
 80129fe:	bf00      	nop
 8012a00:	240000c0 	.word	0x240000c0

08012a04 <__libc_init_array>:
 8012a04:	b570      	push	{r4, r5, r6, lr}
 8012a06:	4d0d      	ldr	r5, [pc, #52]	@ (8012a3c <__libc_init_array+0x38>)
 8012a08:	4c0d      	ldr	r4, [pc, #52]	@ (8012a40 <__libc_init_array+0x3c>)
 8012a0a:	1b64      	subs	r4, r4, r5
 8012a0c:	10a4      	asrs	r4, r4, #2
 8012a0e:	2600      	movs	r6, #0
 8012a10:	42a6      	cmp	r6, r4
 8012a12:	d109      	bne.n	8012a28 <__libc_init_array+0x24>
 8012a14:	4d0b      	ldr	r5, [pc, #44]	@ (8012a44 <__libc_init_array+0x40>)
 8012a16:	4c0c      	ldr	r4, [pc, #48]	@ (8012a48 <__libc_init_array+0x44>)
 8012a18:	f000 f952 	bl	8012cc0 <_init>
 8012a1c:	1b64      	subs	r4, r4, r5
 8012a1e:	10a4      	asrs	r4, r4, #2
 8012a20:	2600      	movs	r6, #0
 8012a22:	42a6      	cmp	r6, r4
 8012a24:	d105      	bne.n	8012a32 <__libc_init_array+0x2e>
 8012a26:	bd70      	pop	{r4, r5, r6, pc}
 8012a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a2c:	4798      	blx	r3
 8012a2e:	3601      	adds	r6, #1
 8012a30:	e7ee      	b.n	8012a10 <__libc_init_array+0xc>
 8012a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a36:	4798      	blx	r3
 8012a38:	3601      	adds	r6, #1
 8012a3a:	e7f2      	b.n	8012a22 <__libc_init_array+0x1e>
 8012a3c:	08013ad0 	.word	0x08013ad0
 8012a40:	08013ad0 	.word	0x08013ad0
 8012a44:	08013ad0 	.word	0x08013ad0
 8012a48:	08013ad4 	.word	0x08013ad4

08012a4c <memcpy>:
 8012a4c:	440a      	add	r2, r1
 8012a4e:	4291      	cmp	r1, r2
 8012a50:	f100 33ff 	add.w	r3, r0, #4294967295
 8012a54:	d100      	bne.n	8012a58 <memcpy+0xc>
 8012a56:	4770      	bx	lr
 8012a58:	b510      	push	{r4, lr}
 8012a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012a62:	4291      	cmp	r1, r2
 8012a64:	d1f9      	bne.n	8012a5a <memcpy+0xe>
 8012a66:	bd10      	pop	{r4, pc}

08012a68 <log>:
 8012a68:	b4f0      	push	{r4, r5, r6, r7}
 8012a6a:	ee10 0a90 	vmov	r0, s1
 8012a6e:	ee10 3a10 	vmov	r3, s0
 8012a72:	f04f 34ff 	mov.w	r4, #4294967295
 8012a76:	429c      	cmp	r4, r3
 8012a78:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8012a7c:	4c70      	ldr	r4, [pc, #448]	@ (8012c40 <log+0x1d8>)
 8012a7e:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8012a82:	418c      	sbcs	r4, r1
 8012a84:	ed2d 8b02 	vpush	{d8}
 8012a88:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8012a8c:	d35a      	bcc.n	8012b44 <log+0xdc>
 8012a8e:	4a6d      	ldr	r2, [pc, #436]	@ (8012c44 <log+0x1dc>)
 8012a90:	4290      	cmp	r0, r2
 8012a92:	bf08      	it	eq
 8012a94:	2b00      	cmpeq	r3, #0
 8012a96:	f000 80c4 	beq.w	8012c22 <log+0x1ba>
 8012a9a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012a9e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012aa2:	4b69      	ldr	r3, [pc, #420]	@ (8012c48 <log+0x1e0>)
 8012aa4:	ee20 2b00 	vmul.f64	d2, d0, d0
 8012aa8:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8012aac:	ee20 4b02 	vmul.f64	d4, d0, d2
 8012ab0:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8012ab4:	eea6 7b00 	vfma.f64	d7, d6, d0
 8012ab8:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8012abc:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8012ac0:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012ac4:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8012ac8:	eea5 6b00 	vfma.f64	d6, d5, d0
 8012acc:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8012ad0:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8012ad4:	eea5 6b02 	vfma.f64	d6, d5, d2
 8012ad8:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8012adc:	eea3 5b00 	vfma.f64	d5, d3, d0
 8012ae0:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8012ae4:	eea3 5b02 	vfma.f64	d5, d3, d2
 8012ae8:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8012aec:	eea3 5b04 	vfma.f64	d5, d3, d4
 8012af0:	eea5 6b04 	vfma.f64	d6, d5, d4
 8012af4:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8012af8:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012afc:	eeb0 2b47 	vmov.f64	d2, d7
 8012b00:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8012c28 <log+0x1c0>
 8012b04:	eeb0 6b40 	vmov.f64	d6, d0
 8012b08:	eeb0 3b40 	vmov.f64	d3, d0
 8012b0c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012b10:	eea0 6b47 	vfms.f64	d6, d0, d7
 8012b14:	ee30 8b46 	vsub.f64	d8, d0, d6
 8012b18:	ee26 1b06 	vmul.f64	d1, d6, d6
 8012b1c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8012b20:	ee30 7b43 	vsub.f64	d7, d0, d3
 8012b24:	ee30 0b06 	vadd.f64	d0, d0, d6
 8012b28:	eea1 7b05 	vfma.f64	d7, d1, d5
 8012b2c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8012b30:	eea5 7b00 	vfma.f64	d7, d5, d0
 8012b34:	eea2 7b04 	vfma.f64	d7, d2, d4
 8012b38:	ee33 0b07 	vadd.f64	d0, d3, d7
 8012b3c:	ecbd 8b02 	vpop	{d8}
 8012b40:	bcf0      	pop	{r4, r5, r6, r7}
 8012b42:	4770      	bx	lr
 8012b44:	f1a2 0410 	sub.w	r4, r2, #16
 8012b48:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8012b4c:	428c      	cmp	r4, r1
 8012b4e:	d923      	bls.n	8012b98 <log+0x130>
 8012b50:	18d9      	adds	r1, r3, r3
 8012b52:	eb40 0400 	adc.w	r4, r0, r0
 8012b56:	4321      	orrs	r1, r4
 8012b58:	d105      	bne.n	8012b66 <log+0xfe>
 8012b5a:	ecbd 8b02 	vpop	{d8}
 8012b5e:	2001      	movs	r0, #1
 8012b60:	bcf0      	pop	{r4, r5, r6, r7}
 8012b62:	f000 b885 	b.w	8012c70 <__math_divzero>
 8012b66:	4939      	ldr	r1, [pc, #228]	@ (8012c4c <log+0x1e4>)
 8012b68:	4288      	cmp	r0, r1
 8012b6a:	bf08      	it	eq
 8012b6c:	2b00      	cmpeq	r3, #0
 8012b6e:	d0e5      	beq.n	8012b3c <log+0xd4>
 8012b70:	0413      	lsls	r3, r2, #16
 8012b72:	d403      	bmi.n	8012b7c <log+0x114>
 8012b74:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8012b78:	4393      	bics	r3, r2
 8012b7a:	d104      	bne.n	8012b86 <log+0x11e>
 8012b7c:	ecbd 8b02 	vpop	{d8}
 8012b80:	bcf0      	pop	{r4, r5, r6, r7}
 8012b82:	f000 b88d 	b.w	8012ca0 <__math_invalid>
 8012b86:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012c30 <log+0x1c8>
 8012b8a:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012b8e:	ec53 2b17 	vmov	r2, r3, d7
 8012b92:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8012b96:	4613      	mov	r3, r2
 8012b98:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8012b9c:	492a      	ldr	r1, [pc, #168]	@ (8012c48 <log+0x1e0>)
 8012b9e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8012ba2:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8012ba6:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8012baa:	0d15      	lsrs	r5, r2, #20
 8012bac:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8012bb0:	052d      	lsls	r5, r5, #20
 8012bb2:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8012bb6:	1e1e      	subs	r6, r3, #0
 8012bb8:	1b47      	subs	r7, r0, r5
 8012bba:	ec47 6b16 	vmov	d6, r6, r7
 8012bbe:	1512      	asrs	r2, r2, #20
 8012bc0:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012bc4:	ee07 2a90 	vmov	s15, r2
 8012bc8:	ee25 2b05 	vmul.f64	d2, d5, d5
 8012bcc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012bd0:	ed91 4b00 	vldr	d4, [r1]
 8012bd4:	ee25 1b02 	vmul.f64	d1, d5, d2
 8012bd8:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8012bdc:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012be0:	ee35 4b07 	vadd.f64	d4, d5, d7
 8012be4:	ee37 0b44 	vsub.f64	d0, d7, d4
 8012be8:	ed91 7b02 	vldr	d7, [r1, #8]
 8012bec:	ee30 0b05 	vadd.f64	d0, d0, d5
 8012bf0:	eea7 0b06 	vfma.f64	d0, d7, d6
 8012bf4:	ed91 7b04 	vldr	d7, [r1, #16]
 8012bf8:	ed91 6b08 	vldr	d6, [r1, #32]
 8012bfc:	eea7 0b02 	vfma.f64	d0, d7, d2
 8012c00:	ed91 7b06 	vldr	d7, [r1, #24]
 8012c04:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8012c08:	eea6 7b05 	vfma.f64	d7, d6, d5
 8012c0c:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8012c10:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012c14:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012c18:	eea1 0b07 	vfma.f64	d0, d1, d7
 8012c1c:	ee30 0b04 	vadd.f64	d0, d0, d4
 8012c20:	e78c      	b.n	8012b3c <log+0xd4>
 8012c22:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8012c38 <log+0x1d0>
 8012c26:	e789      	b.n	8012b3c <log+0xd4>
 8012c28:	00000000 	.word	0x00000000
 8012c2c:	41a00000 	.word	0x41a00000
 8012c30:	00000000 	.word	0x00000000
 8012c34:	43300000 	.word	0x43300000
	...
 8012c40:	000308ff 	.word	0x000308ff
 8012c44:	3ff00000 	.word	0x3ff00000
 8012c48:	08013238 	.word	0x08013238
 8012c4c:	7ff00000 	.word	0x7ff00000

08012c50 <with_errno>:
 8012c50:	b510      	push	{r4, lr}
 8012c52:	ed2d 8b02 	vpush	{d8}
 8012c56:	eeb0 8b40 	vmov.f64	d8, d0
 8012c5a:	4604      	mov	r4, r0
 8012c5c:	f7ff fecc 	bl	80129f8 <__errno>
 8012c60:	eeb0 0b48 	vmov.f64	d0, d8
 8012c64:	ecbd 8b02 	vpop	{d8}
 8012c68:	6004      	str	r4, [r0, #0]
 8012c6a:	bd10      	pop	{r4, pc}
 8012c6c:	0000      	movs	r0, r0
	...

08012c70 <__math_divzero>:
 8012c70:	b082      	sub	sp, #8
 8012c72:	2800      	cmp	r0, #0
 8012c74:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8012c78:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012c7c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012c80:	ed8d 7b00 	vstr	d7, [sp]
 8012c84:	ed9d 0b00 	vldr	d0, [sp]
 8012c88:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8012c98 <__math_divzero+0x28>
 8012c8c:	2022      	movs	r0, #34	@ 0x22
 8012c8e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8012c92:	b002      	add	sp, #8
 8012c94:	f7ff bfdc 	b.w	8012c50 <with_errno>
	...

08012ca0 <__math_invalid>:
 8012ca0:	eeb0 7b40 	vmov.f64	d7, d0
 8012ca4:	eeb4 7b47 	vcmp.f64	d7, d7
 8012ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cac:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012cb0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8012cb4:	d602      	bvs.n	8012cbc <__math_invalid+0x1c>
 8012cb6:	2021      	movs	r0, #33	@ 0x21
 8012cb8:	f7ff bfca 	b.w	8012c50 <with_errno>
 8012cbc:	4770      	bx	lr
	...

08012cc0 <_init>:
 8012cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cc2:	bf00      	nop
 8012cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cc6:	bc08      	pop	{r3}
 8012cc8:	469e      	mov	lr, r3
 8012cca:	4770      	bx	lr

08012ccc <_fini>:
 8012ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cce:	bf00      	nop
 8012cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cd2:	bc08      	pop	{r3}
 8012cd4:	469e      	mov	lr, r3
 8012cd6:	4770      	bx	lr
