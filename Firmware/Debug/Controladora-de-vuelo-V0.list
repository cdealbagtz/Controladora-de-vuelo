
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014770  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f18  08014a20  08014a20  00015a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015938  08015938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015940  08015940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015944  08015944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000138  24000000  08015948  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003d60  24000138  08015a80  00017138  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003e98  08015a80  00017e98  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00017138  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a36b  00000000  00000000  00017166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000055a0  00000000  00000000  000414d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002010  00000000  00000000  00046a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018f3  00000000  00000000  00048a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037f9d  00000000  00000000  0004a37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032287  00000000  00000000  00082318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155828  00000000  00000000  000b459f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00209dc7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000089b0  00000000  00000000  00209e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  002127bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000138 	.word	0x24000138
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08014a08 	.word	0x08014a08

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400013c 	.word	0x2400013c
 80002ec:	08014a08 	.word	0x08014a08

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f007 fd96 	bl	80081c8 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f00a fdd5 	bl	800b25c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f00a fdcf 	bl	800b25c <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f007 fd7f 	bl	80081c8 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	24003588 	.word	0x24003588

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f007 fd66 	bl	80081c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f00a fda9 	bl	800b25c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f00a ff90 	bl	800b638 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f007 fd52 	bl	80081c8 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	24003588 	.word	0x24003588

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f007 fd27 	bl	80081c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f00a fd6a 	bl	800b25c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f00a ff52 	bl	800b638 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f007 fd14 	bl	80081c8 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	24003588 	.word	0x24003588
 800088c:	24000168 	.word	0x24000168
 8000890:	2400016c 	.word	0x2400016c
 8000894:	2400016e 	.word	0x2400016e
 8000898:	2400016a 	.word	0x2400016a
 800089c:	24000170 	.word	0x24000170
 80008a0:	24000172 	.word	0x24000172
 80008a4:	24000174 	.word	0x24000174
 80008a8:	24000176 	.word	0x24000176
 80008ac:	24000178 	.word	0x24000178
 80008b0:	2400017a 	.word	0x2400017a
 80008b4:	2400017c 	.word	0x2400017c
 80008b8:	2400017e 	.word	0x2400017e

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f007 fc77 	bl	80081c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f00a fcbb 	bl	800b25c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f00a fea3 	bl	800b638 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f007 fc65 	bl	80081c8 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	24003588 	.word	0x24003588
 800093c:	24000184 	.word	0x24000184
 8000940:	24000180 	.word	0x24000180

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	24000180 	.word	0x24000180
 80009bc:	24000168 	.word	0x24000168
 80009c0:	2400016c 	.word	0x2400016c
 80009c4:	2400016e 	.word	0x2400016e
 80009c8:	24000188 	.word	0x24000188

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	24000188 	.word	0x24000188
 8000c9c:	24000178 	.word	0x24000178
 8000ca0:	24000176 	.word	0x24000176
 8000ca4:	24000174 	.word	0x24000174
 8000ca8:	24000172 	.word	0x24000172
 8000cac:	24000170 	.word	0x24000170
 8000cb0:	2400016a 	.word	0x2400016a
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	2400017e 	.word	0x2400017e
 8000f50:	2400017c 	.word	0x2400017c
 8000f54:	2400017a 	.word	0x2400017a

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f013 fc15 	bl	80147b0 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f007 f8d4 	bl	80081c8 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	24000154 	.word	0x24000154
 8001058:	24000180 	.word	0x24000180

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	24000154 	.word	0x24000154
 80010c8:	24000180 	.word	0x24000180
 80010cc:	24000184 	.word	0x24000184

080010d0 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <bno055_delay+0x24>)
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4413      	add	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <bno055_delay+0x24>)
 80010e6:	701a      	strb	r2, [r3, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	2400028f 	.word	0x2400028f

080010f8 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8001108:	23aa      	movs	r3, #170	@ 0xaa
 800110a:	723b      	strb	r3, [r7, #8]
 800110c:	2301      	movs	r3, #1
 800110e:	727b      	strb	r3, [r7, #9]
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	72bb      	strb	r3, [r7, #10]
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8001118:	4a08      	ldr	r2, [pc, #32]	@ (800113c <BNO_Read+0x44>)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 800111e:	f107 0108 	add.w	r1, r7, #8
 8001122:	2364      	movs	r3, #100	@ 0x64
 8001124:	2204      	movs	r2, #4
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <BNO_Read+0x48>)
 8001128:	f00c fa32 	bl	800d590 <HAL_UART_Transmit>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2400018c 	.word	0x2400018c
 8001140:	24003900 	.word	0x24003900

08001144 <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	460a      	mov	r2, r1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	4613      	mov	r3, r2
 8001152:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8001154:	23aa      	movs	r3, #170	@ 0xaa
 8001156:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8001158:	2300      	movs	r3, #0
 800115a:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8001160:	2301      	movs	r3, #1
 8001162:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8001168:	f107 0108 	add.w	r1, r7, #8
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	2205      	movs	r2, #5
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <BNO_Write+0x40>)
 8001172:	f00c fa0d 	bl	800d590 <HAL_UART_Transmit>
 8001176:	4603      	mov	r3, r0
 8001178:	73fb      	strb	r3, [r7, #15]
	return uartError;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	24003900 	.word	0x24003900

08001188 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8001188:	b580      	push	{r7, lr}
 800118a:	b0c4      	sub	sp, #272	@ 0x110
 800118c:	af00      	add	r7, sp, #0
 800118e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001192:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800119c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80011a0:	4602      	mov	r2, r0
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011a8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80011ac:	460a      	mov	r2, r1
 80011ae:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 80011b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011b8:	22aa      	movs	r2, #170	@ 0xaa
 80011ba:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 80011bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011c4:	2200      	movs	r2, #0
 80011c6:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 80011c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011d0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011d4:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 80011dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011e4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80011e8:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 80011f0:	2300      	movs	r3, #0
 80011f2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80011f6:	e015      	b.n	8001224 <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 80011f8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80011fc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001200:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	441a      	add	r2, r3
 8001208:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800120c:	3304      	adds	r3, #4
 800120e:	7811      	ldrb	r1, [r2, #0]
 8001210:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001214:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001218:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 800121a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800121e:	3301      	adds	r3, #1
 8001220:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001224:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001228:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800122c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d3e0      	bcc.n	80011f8 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 8001236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800123a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	3304      	adds	r3, #4
 8001244:	b29a      	uxth	r2, r3
 8001246:	f107 010c 	add.w	r1, r7, #12
 800124a:	2364      	movs	r3, #100	@ 0x64
 800124c:	4806      	ldr	r0, [pc, #24]	@ (8001268 <BNO_Write_MB+0xe0>)
 800124e:	f00c f99f 	bl	800d590 <HAL_UART_Transmit>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8001258:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 800125c:	4618      	mov	r0, r3
 800125e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	24003900 	.word	0x24003900
 800126c:	00000000 	.word	0x00000000

08001270 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001274:	4ba6      	ldr	r3, [pc, #664]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b55      	cmp	r3, #85	@ 0x55
 800127a:	f300 8247 	bgt.w	800170c <BNO_Page0Adress+0x49c>
 800127e:	2b35      	cmp	r3, #53	@ 0x35
 8001280:	da0a      	bge.n	8001298 <BNO_Page0Adress+0x28>
 8001282:	2b08      	cmp	r3, #8
 8001284:	f000 814a 	beq.w	800151c <BNO_Page0Adress+0x2ac>
 8001288:	2b08      	cmp	r3, #8
 800128a:	f300 823f 	bgt.w	800170c <BNO_Page0Adress+0x49c>
 800128e:	2b00      	cmp	r3, #0
 8001290:	d04c      	beq.n	800132c <BNO_Page0Adress+0xbc>
 8001292:	2b07      	cmp	r3, #7
 8001294:	d065      	beq.n	8001362 <BNO_Page0Adress+0xf2>
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 8001296:	e239      	b.n	800170c <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8001298:	3b35      	subs	r3, #53	@ 0x35
 800129a:	2b20      	cmp	r3, #32
 800129c:	f200 8236 	bhi.w	800170c <BNO_Page0Adress+0x49c>
 80012a0:	a201      	add	r2, pc, #4	@ (adr r2, 80012a8 <BNO_Page0Adress+0x38>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080013ab 	.word	0x080013ab
 80012ac:	0800170d 	.word	0x0800170d
 80012b0:	0800170d 	.word	0x0800170d
 80012b4:	0800170d 	.word	0x0800170d
 80012b8:	08001387 	.word	0x08001387
 80012bc:	0800170d 	.word	0x0800170d
 80012c0:	08001375 	.word	0x08001375
 80012c4:	0800170d 	.word	0x0800170d
 80012c8:	08001399 	.word	0x08001399
 80012cc:	0800170d 	.word	0x0800170d
 80012d0:	0800170d 	.word	0x0800170d
 80012d4:	0800170d 	.word	0x0800170d
 80012d8:	0800170d 	.word	0x0800170d
 80012dc:	0800170d 	.word	0x0800170d
 80012e0:	0800170d 	.word	0x0800170d
 80012e4:	0800170d 	.word	0x0800170d
 80012e8:	0800170d 	.word	0x0800170d
 80012ec:	0800170d 	.word	0x0800170d
 80012f0:	0800170d 	.word	0x0800170d
 80012f4:	0800170d 	.word	0x0800170d
 80012f8:	0800170d 	.word	0x0800170d
 80012fc:	0800170d 	.word	0x0800170d
 8001300:	0800170d 	.word	0x0800170d
 8001304:	0800170d 	.word	0x0800170d
 8001308:	0800170d 	.word	0x0800170d
 800130c:	0800170d 	.word	0x0800170d
 8001310:	0800170d 	.word	0x0800170d
 8001314:	0800170d 	.word	0x0800170d
 8001318:	0800170d 	.word	0x0800170d
 800131c:	0800170d 	.word	0x0800170d
 8001320:	0800170d 	.word	0x0800170d
 8001324:	0800170d 	.word	0x0800170d
 8001328:	08001403 	.word	0x08001403
			if(BNO_RxBuffer[1] != 160) return;
 800132c:	4b78      	ldr	r3, [pc, #480]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	2ba0      	cmp	r3, #160	@ 0xa0
 8001332:	f040 81ed 	bne.w	8001710 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 8001336:	4b76      	ldr	r3, [pc, #472]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001338:	785a      	ldrb	r2, [r3, #1]
 800133a:	4b76      	ldr	r3, [pc, #472]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800133c:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 800133e:	4b74      	ldr	r3, [pc, #464]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001340:	789a      	ldrb	r2, [r3, #2]
 8001342:	4b74      	ldr	r3, [pc, #464]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001344:	721a      	strb	r2, [r3, #8]
			IMU.MAG.ID = BNO_RxBuffer[3];
 8001346:	4b72      	ldr	r3, [pc, #456]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001348:	78da      	ldrb	r2, [r3, #3]
 800134a:	4b72      	ldr	r3, [pc, #456]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800134c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			IMU.GYR.ID = BNO_RxBuffer[4];
 8001350:	4b6f      	ldr	r3, [pc, #444]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001352:	791a      	ldrb	r2, [r3, #4]
 8001354:	4b6f      	ldr	r3, [pc, #444]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001356:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 800135a:	4b6f      	ldr	r3, [pc, #444]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 800135c:	220b      	movs	r2, #11
 800135e:	701a      	strb	r2, [r3, #0]
			break;
 8001360:	e1d7      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 8001362:	4b6b      	ldr	r3, [pc, #428]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001364:	785a      	ldrb	r2, [r3, #1]
 8001366:	4b6b      	ldr	r3, [pc, #428]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001368:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 800136c:	4b6a      	ldr	r3, [pc, #424]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 800136e:	220b      	movs	r2, #11
 8001370:	701a      	strb	r2, [r3, #0]
			break;
 8001372:	e1ce      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 8001374:	4b66      	ldr	r3, [pc, #408]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001376:	785a      	ldrb	r2, [r3, #1]
 8001378:	4b66      	ldr	r3, [pc, #408]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800137a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			BNO_ErrorHandler = ReadSucces;
 800137e:	4b66      	ldr	r3, [pc, #408]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 8001380:	220b      	movs	r2, #11
 8001382:	701a      	strb	r2, [r3, #0]
			break;
 8001384:	e1c5      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 8001386:	4b62      	ldr	r3, [pc, #392]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001388:	785a      	ldrb	r2, [r3, #1]
 800138a:	4b62      	ldr	r3, [pc, #392]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800138c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			BNO_ErrorHandler = ReadSucces;
 8001390:	4b61      	ldr	r3, [pc, #388]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 8001392:	220b      	movs	r2, #11
 8001394:	701a      	strb	r2, [r3, #0]
			break;
 8001396:	e1bc      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8001398:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800139a:	785a      	ldrb	r2, [r3, #1]
 800139c:	4b5d      	ldr	r3, [pc, #372]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800139e:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			BNO_ErrorHandler = ReadSucces;
 80013a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 80013a4:	220b      	movs	r2, #11
 80013a6:	701a      	strb	r2, [r3, #0]
			break;
 80013a8:	e1b3      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 80013aa:	4b59      	ldr	r3, [pc, #356]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013ac:	785a      	ldrb	r2, [r3, #1]
 80013ae:	4b59      	ldr	r3, [pc, #356]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013b0:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 80013b4:	4b56      	ldr	r3, [pc, #344]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b55      	ldr	r3, [pc, #340]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013be:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 80013c2:	4b53      	ldr	r3, [pc, #332]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b50      	ldr	r3, [pc, #320]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013d2:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 80013d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013e6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 80013ea:	4b49      	ldr	r3, [pc, #292]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b47      	ldr	r3, [pc, #284]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80013f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			BNO_ErrorHandler = ReadSucces;
 80013fa:	4b47      	ldr	r3, [pc, #284]	@ (8001518 <BNO_Page0Adress+0x2a8>)
 80013fc:	220b      	movs	r2, #11
 80013fe:	701a      	strb	r2, [r3, #0]
			break;
 8001400:	e187      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 8001402:	4b43      	ldr	r3, [pc, #268]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001404:	789b      	ldrb	r3, [r3, #2]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001416:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 800141a:	4b3d      	ldr	r3, [pc, #244]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800141c:	791b      	ldrb	r3, [r3, #4]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	b21a      	sxth	r2, r3
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001424:	78db      	ldrb	r3, [r3, #3]
 8001426:	b21b      	sxth	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b21a      	sxth	r2, r3
 800142c:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800142e:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 8001432:	4b37      	ldr	r3, [pc, #220]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001434:	799b      	ldrb	r3, [r3, #6]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800143c:	795b      	ldrb	r3, [r3, #5]
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b33      	ldr	r3, [pc, #204]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001446:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 800144a:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800144c:	7a1b      	ldrb	r3, [r3, #8]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001454:	79db      	ldrb	r3, [r3, #7]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800145e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 8001462:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001464:	7a9b      	ldrb	r3, [r3, #10]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b21a      	sxth	r2, r3
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800146c:	7a5b      	ldrb	r3, [r3, #9]
 800146e:	b21b      	sxth	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b21a      	sxth	r2, r3
 8001474:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 8001476:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 800147a:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800147c:	7b1b      	ldrb	r3, [r3, #12]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001484:	7adb      	ldrb	r3, [r3, #11]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21a      	sxth	r2, r3
 800148c:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800148e:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 8001492:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 8001494:	7b9b      	ldrb	r3, [r3, #14]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 800149c:	7b5b      	ldrb	r3, [r3, #13]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014a6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014ac:	7c1b      	ldrb	r3, [r3, #16]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014b4:	7bdb      	ldrb	r3, [r3, #15]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014be:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014c4:	7c9b      	ldrb	r3, [r3, #18]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014cc:	7c5b      	ldrb	r3, [r3, #17]
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014d6:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014dc:	7d1b      	ldrb	r3, [r3, #20]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014e4:	7cdb      	ldrb	r3, [r3, #19]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 80014f0:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014f6:	7d9b      	ldrb	r3, [r3, #22]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <BNO_Page0Adress+0x2a0>)
 80014fe:	7d5b      	ldrb	r3, [r3, #21]
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21b      	sxth	r3, r3
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b02      	ldr	r3, [pc, #8]	@ (8001514 <BNO_Page0Adress+0x2a4>)
 800150a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			break;
 800150e:	e100      	b.n	8001712 <BNO_Page0Adress+0x4a2>
 8001510:	2400018c 	.word	0x2400018c
 8001514:	24000298 	.word	0x24000298
 8001518:	2400028d 	.word	0x2400028d
			IMU.ACC.x = ((double)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 800151c:	4b82      	ldr	r3, [pc, #520]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800151e:	789b      	ldrb	r3, [r3, #2]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b80      	ldr	r3, [pc, #512]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001526:	785b      	ldrb	r3, [r3, #1]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	ee07 3a90 	vmov	s15, r3
 8001532:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001536:	ed9f 5b7a 	vldr	d5, [pc, #488]	@ 8001720 <BNO_Page0Adress+0x4b0>
 800153a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800153e:	4b7b      	ldr	r3, [pc, #492]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001540:	ed83 7b04 	vstr	d7, [r3, #16]
			IMU.ACC.y = ((double)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8001544:	4b78      	ldr	r3, [pc, #480]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001546:	791b      	ldrb	r3, [r3, #4]
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b76      	ldr	r3, [pc, #472]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21b      	sxth	r3, r3
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800155e:	ed9f 5b70 	vldr	d5, [pc, #448]	@ 8001720 <BNO_Page0Adress+0x4b0>
 8001562:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001566:	4b71      	ldr	r3, [pc, #452]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001568:	ed83 7b06 	vstr	d7, [r3, #24]
			IMU.ACC.z = ((double)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 800156c:	4b6e      	ldr	r3, [pc, #440]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800156e:	799b      	ldrb	r3, [r3, #6]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b6c      	ldr	r3, [pc, #432]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001576:	795b      	ldrb	r3, [r3, #5]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21b      	sxth	r3, r3
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001586:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8001720 <BNO_Page0Adress+0x4b0>
 800158a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800158e:	4b67      	ldr	r3, [pc, #412]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001590:	ed83 7b08 	vstr	d7, [r3, #32]
			IMU.MAG.x = ((double)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8001594:	4b64      	ldr	r3, [pc, #400]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001596:	7a1b      	ldrb	r3, [r3, #8]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b62      	ldr	r3, [pc, #392]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800159e:	79db      	ldrb	r3, [r3, #7]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015ae:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80015b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015b6:	4b5d      	ldr	r3, [pc, #372]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80015b8:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
			IMU.MAG.y = ((double)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 80015bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015be:	7a9b      	ldrb	r3, [r3, #10]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015c6:	7a5b      	ldrb	r3, [r3, #9]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015d6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80015da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015de:	4b53      	ldr	r3, [pc, #332]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80015e0:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
			IMU.MAG.z = ((double)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 80015e4:	4b50      	ldr	r3, [pc, #320]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015e6:	7b1b      	ldrb	r3, [r3, #12]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80015ee:	7adb      	ldrb	r3, [r3, #11]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80015fe:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001602:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001606:	4b49      	ldr	r3, [pc, #292]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001608:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
			IMU.GYR.x = ((double)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 800160c:	4b46      	ldr	r3, [pc, #280]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800160e:	7b9b      	ldrb	r3, [r3, #14]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b44      	ldr	r3, [pc, #272]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001616:	7b5b      	ldrb	r3, [r3, #13]
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b21b      	sxth	r3, r3
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001626:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 800162a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800162e:	4b3f      	ldr	r3, [pc, #252]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001630:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
			IMU.GYR.y = -((double)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8001634:	4b3c      	ldr	r3, [pc, #240]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001636:	7c1b      	ldrb	r3, [r3, #16]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800163e:	7bdb      	ldrb	r3, [r3, #15]
 8001640:	b21b      	sxth	r3, r3
 8001642:	4313      	orrs	r3, r2
 8001644:	b21b      	sxth	r3, r3
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800164e:	eeb1 6b47 	vneg.f64	d6, d7
 8001652:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001656:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800165a:	4b34      	ldr	r3, [pc, #208]	@ (800172c <BNO_Page0Adress+0x4bc>)
 800165c:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
			IMU.GYR.z = -((double)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8001660:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001662:	7c9b      	ldrb	r3, [r3, #18]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800166a:	7c5b      	ldrb	r3, [r3, #17]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800167a:	eeb1 6b47 	vneg.f64	d6, d7
 800167e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001682:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001688:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
			IMU.Heading = ((double)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 800168c:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 800168e:	7d1b      	ldrb	r3, [r3, #20]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 8001696:	7cdb      	ldrb	r3, [r3, #19]
 8001698:	b21b      	sxth	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b21b      	sxth	r3, r3
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016a6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80016aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016ae:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80016b0:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
			IMU.Pitch = ((double)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016b6:	7d9b      	ldrb	r3, [r3, #22]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016be:	7d5b      	ldrb	r3, [r3, #21]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016ce:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80016d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <BNO_Page0Adress+0x4bc>)
 80016d8:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016de:	7e1b      	ldrb	r3, [r3, #24]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <BNO_Page0Adress+0x4b8>)
 80016e6:	7ddb      	ldrb	r3, [r3, #23]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016f6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 80016fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <BNO_Page0Adress+0x4bc>)
 8001700:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78
			BNO_ErrorHandler = ReadSucces;
 8001704:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <BNO_Page0Adress+0x4c0>)
 8001706:	220b      	movs	r2, #11
 8001708:	701a      	strb	r2, [r3, #0]
			break;
 800170a:	e002      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			break;
 800170c:	bf00      	nop
 800170e:	e000      	b.n	8001712 <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8001710:	bf00      	nop
	}
}
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	f3af 8000 	nop.w
 8001720:	00000000 	.word	0x00000000
 8001724:	40590000 	.word	0x40590000
 8001728:	2400018c 	.word	0x2400018c
 800172c:	24000298 	.word	0x24000298
 8001730:	2400028d 	.word	0x2400028d

08001734 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <BNO_Page1Adress+0x2c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b07      	cmp	r3, #7
 800173e:	d108      	bne.n	8001752 <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <BNO_Page1Adress+0x2c>)
 8001742:	785a      	ldrb	r2, [r3, #1]
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <BNO_Page1Adress+0x30>)
 8001746:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <BNO_Page1Adress+0x34>)
 800174c:	220b      	movs	r2, #11
 800174e:	701a      	strb	r2, [r3, #0]
			break;
 8001750:	e000      	b.n	8001754 <BNO_Page1Adress+0x20>

		default:
			break;
 8001752:	bf00      	nop
	}
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	2400018c 	.word	0x2400018c
 8001764:	24000298 	.word	0x24000298
 8001768:	2400028d 	.word	0x2400028d

0800176c <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 8001770:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <BNO_EmptyingBuffer+0x30>)
 8001772:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <BNO_EmptyingBuffer+0x14>
 800177a:	2b01      	cmp	r3, #1
 800177c:	d003      	beq.n	8001786 <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 800177e:	e005      	b.n	800178c <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 8001780:	f7ff fd76 	bl	8001270 <BNO_Page0Adress>
			break;
 8001784:	e002      	b.n	800178c <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 8001786:	f7ff ffd5 	bl	8001734 <BNO_Page1Adress>
			break;
 800178a:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 800178c:	22ff      	movs	r2, #255	@ 0xff
 800178e:	2100      	movs	r1, #0
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <BNO_EmptyingBuffer+0x34>)
 8001792:	f012 ffcb 	bl	801472c <memset>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	24000298 	.word	0x24000298
 80017a0:	2400018c 	.word	0x2400018c

080017a4 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 80017a8:	2120      	movs	r1, #32
 80017aa:	203f      	movs	r0, #63	@ 0x3f
 80017ac:	f7ff fcca 	bl	8001144 <BNO_Write>
	bno055_delay(70);
 80017b0:	2046      	movs	r0, #70	@ 0x46
 80017b2:	f7ff fc8d 	bl	80010d0 <bno055_delay>
	IMU.ID = 0x00;
 80017b6:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <BNO_SWReset+0x24>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <BNO_SWReset+0x28>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	24000298 	.word	0x24000298
 80017cc:	24000290 	.word	0x24000290

080017d0 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	4619      	mov	r1, r3
 80017de:	203d      	movs	r0, #61	@ 0x3d
 80017e0:	f7ff fcb0 	bl	8001144 <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <bno055_setOperationMode+0x22>
    bno055_delay(5);
 80017ea:	2005      	movs	r0, #5
 80017ec:	f7ff fc70 	bl	80010d0 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 80017f0:	e002      	b.n	80017f8 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 80017f2:	2003      	movs	r0, #3
 80017f4:	f7ff fc6c 	bl	80010d0 <bno055_delay>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff ffe3 	bl	80017d0 <bno055_setOperationMode>
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}

0800180e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001812:	200c      	movs	r0, #12
 8001814:	f7ff ffdc 	bl	80017d0 <bno055_setOperationMode>
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8001820:	2116      	movs	r1, #22
 8001822:	2055      	movs	r0, #85	@ 0x55
 8001824:	f7ff fc68 	bl	80010f8 <BNO_Read>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8001832:	463b      	mov	r3, r7
 8001834:	2206      	movs	r2, #6
 8001836:	4619      	mov	r1, r3
 8001838:	4814      	ldr	r0, [pc, #80]	@ (800188c <BNO_SetCalibrationData+0x60>)
 800183a:	f012 ffa9 	bl	8014790 <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 800183e:	463b      	mov	r3, r7
 8001840:	3306      	adds	r3, #6
 8001842:	2206      	movs	r2, #6
 8001844:	4619      	mov	r1, r3
 8001846:	4812      	ldr	r0, [pc, #72]	@ (8001890 <BNO_SetCalibrationData+0x64>)
 8001848:	f012 ffa2 	bl	8014790 <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 800184c:	463b      	mov	r3, r7
 800184e:	330c      	adds	r3, #12
 8001850:	2206      	movs	r2, #6
 8001852:	4619      	mov	r1, r3
 8001854:	480f      	ldr	r0, [pc, #60]	@ (8001894 <BNO_SetCalibrationData+0x68>)
 8001856:	f012 ff9b 	bl	8014790 <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 800185a:	463b      	mov	r3, r7
 800185c:	3312      	adds	r3, #18
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <BNO_SetCalibrationData+0x6c>)
 8001864:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8001868:	463b      	mov	r3, r7
 800186a:	3314      	adds	r3, #20
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <BNO_SetCalibrationData+0x6c>)
 8001872:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8001876:	463b      	mov	r3, r7
 8001878:	461a      	mov	r2, r3
 800187a:	2116      	movs	r1, #22
 800187c:	2055      	movs	r0, #85	@ 0x55
 800187e:	f7ff fc83 	bl	8001188 <BNO_Write_MB>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2400032e 	.word	0x2400032e
 8001890:	24000328 	.word	0x24000328
 8001894:	24000322 	.word	0x24000322
 8001898:	24000298 	.word	0x24000298

0800189c <BNO_Init>:

void BNO_Init(void){
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2104      	movs	r1, #4
 80018a4:	4808      	ldr	r0, [pc, #32]	@ (80018c8 <BNO_Init+0x2c>)
 80018a6:	f006 fc8f 	bl	80081c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018b0:	4806      	ldr	r0, [pc, #24]	@ (80018cc <BNO_Init+0x30>)
 80018b2:	f006 fc89 	bl	80081c8 <HAL_GPIO_WritePin>

	bno055_delay(100);
 80018b6:	2064      	movs	r0, #100	@ 0x64
 80018b8:	f7ff fc0a 	bl	80010d0 <bno055_delay>

	BNO_CurrentState = Reset;
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <BNO_Init+0x34>)
 80018be:	2204      	movs	r2, #4
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	58020c00 	.word	0x58020c00
 80018cc:	58020400 	.word	0x58020400
 80018d0:	24000290 	.word	0x24000290

080018d4 <BNO_Config>:

void BNO_Config(void){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 80018d8:	4b20      	ldr	r3, [pc, #128]	@ (800195c <BNO_Config+0x88>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d839      	bhi.n	8001954 <BNO_Config+0x80>
 80018e0:	a201      	add	r2, pc, #4	@ (adr r2, 80018e8 <BNO_Config+0x14>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	08001909 	.word	0x08001909
 80018f0:	08001915 	.word	0x08001915
 80018f4:	08001937 	.word	0x08001937
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 80018f8:	2100      	movs	r1, #0
 80018fa:	203f      	movs	r0, #63	@ 0x3f
 80018fc:	f7ff fc22 	bl	8001144 <BNO_Write>
			ConfigFlag = 1;
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <BNO_Config+0x88>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
			break;
 8001906:	e026      	b.n	8001956 <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8001908:	f7ff ff7a 	bl	8001800 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <BNO_Config+0x88>)
 800190e:	2202      	movs	r2, #2
 8001910:	701a      	strb	r2, [r3, #0]
			break;
 8001912:	e020      	b.n	8001956 <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001914:	2101      	movs	r1, #1
 8001916:	203d      	movs	r0, #61	@ 0x3d
 8001918:	f7ff fbee 	bl	80010f8 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 800191c:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <BNO_Config+0x8c>)
 800191e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001922:	2b00      	cmp	r3, #0
 8001924:	d103      	bne.n	800192e <BNO_Config+0x5a>
				ConfigFlag = 3;
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <BNO_Config+0x88>)
 8001928:	2203      	movs	r2, #3
 800192a:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 800192c:	e013      	b.n	8001956 <BNO_Config+0x82>
			else ConfigFlag = 1;
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <BNO_Config+0x88>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
			break;
 8001934:	e00f      	b.n	8001956 <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8001936:	2104      	movs	r1, #4
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff fbdd 	bl	80010f8 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <BNO_Config+0x8c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2ba0      	cmp	r3, #160	@ 0xa0
 8001944:	d102      	bne.n	800194c <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8001946:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <BNO_Config+0x90>)
 8001948:	2202      	movs	r2, #2
 800194a:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <BNO_Config+0x88>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
			break;
 8001952:	e000      	b.n	8001956 <BNO_Config+0x82>
		default:
			break;
 8001954:	bf00      	nop
	}

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	24000338 	.word	0x24000338
 8001960:	24000298 	.word	0x24000298
 8001964:	24000290 	.word	0x24000290

08001968 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 800196c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b07      	cmp	r3, #7
 8001972:	d870      	bhi.n	8001a56 <BNO_CalibrationStatus+0xee>
 8001974:	a201      	add	r2, pc, #4	@ (adr r2, 800197c <BNO_CalibrationStatus+0x14>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	0800199d 	.word	0x0800199d
 8001980:	080019ad 	.word	0x080019ad
 8001984:	080019b9 	.word	0x080019b9
 8001988:	080019f1 	.word	0x080019f1
 800198c:	08001a0b 	.word	0x08001a0b
 8001990:	08001a17 	.word	0x08001a17
 8001994:	08001a39 	.word	0x08001a39
 8001998:	08001a4b 	.word	0x08001a4b
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 800199c:	2100      	movs	r1, #0
 800199e:	203f      	movs	r0, #63	@ 0x3f
 80019a0:	f7ff fbd0 	bl	8001144 <BNO_Write>
			CalibrationFlag = 1;
 80019a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
			break;
 80019aa:	e059      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 80019ac:	f7ff ff2f 	bl	800180e <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 80019b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019b2:	2202      	movs	r2, #2
 80019b4:	701a      	strb	r2, [r3, #0]
			break;
 80019b6:	e053      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 80019b8:	2101      	movs	r1, #1
 80019ba:	203d      	movs	r0, #61	@ 0x3d
 80019bc:	f7ff fb9c 	bl	80010f8 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 80019c0:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <BNO_CalibrationStatus+0x100>)
 80019c2:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d10e      	bne.n	80019e8 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 80019ca:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <BNO_CalibrationStatus+0x104>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d006      	beq.n	80019e0 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 80019d8:	4b25      	ldr	r3, [pc, #148]	@ (8001a70 <BNO_CalibrationStatus+0x108>)
 80019da:	2203      	movs	r2, #3
 80019dc:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 80019de:	e03f      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 80019e0:	4b20      	ldr	r3, [pc, #128]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019e2:	2203      	movs	r2, #3
 80019e4:	701a      	strb	r2, [r3, #0]
			break;
 80019e6:	e03b      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
			break;
 80019ee:	e037      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 80019f0:	2101      	movs	r1, #1
 80019f2:	2035      	movs	r0, #53	@ 0x35
 80019f4:	f7ff fb80 	bl	80010f8 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <BNO_CalibrationStatus+0x100>)
 80019fa:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80019fe:	2bff      	cmp	r3, #255	@ 0xff
 8001a00:	d12d      	bne.n	8001a5e <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a04:	2204      	movs	r2, #4
 8001a06:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001a08:	e029      	b.n	8001a5e <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8001a0a:	f7ff fef9 	bl	8001800 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a10:	2205      	movs	r2, #5
 8001a12:	701a      	strb	r2, [r3, #0]
			break;
 8001a14:	e024      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001a16:	2101      	movs	r1, #1
 8001a18:	203d      	movs	r0, #61	@ 0x3d
 8001a1a:	f7ff fb6d 	bl	80010f8 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <BNO_CalibrationStatus+0x100>)
 8001a20:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d103      	bne.n	8001a30 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a2a:	2206      	movs	r2, #6
 8001a2c:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8001a2e:	e017      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a32:	2204      	movs	r2, #4
 8001a34:	701a      	strb	r2, [r3, #0]
			break;
 8001a36:	e013      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8001a38:	f7ff fef0 	bl	800181c <BNO_GetCalibrationData>
			Calibrated = 1;
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <BNO_CalibrationStatus+0x104>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8001a42:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
			break;
 8001a48:	e00a      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8001a4a:	f7ff feef 	bl	800182c <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
			break;
 8001a54:	e004      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8001a56:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <BNO_CalibrationStatus+0xfc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
			break;
 8001a5c:	e000      	b.n	8001a60 <BNO_CalibrationStatus+0xf8>
			break;
 8001a5e:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	24000339 	.word	0x24000339
 8001a68:	24000298 	.word	0x24000298
 8001a6c:	24000000 	.word	0x24000000
 8001a70:	24000290 	.word	0x24000290

08001a74 <BNO_GetData>:

void BNO_GetData(void){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8001a78:	2118      	movs	r1, #24
 8001a7a:	2008      	movs	r0, #8
 8001a7c:	f7ff fb3c 	bl	80010f8 <BNO_Read>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <BNO_Receive+0xbc>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8001a94:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <BNO_Receive+0xc0>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2bff      	cmp	r3, #255	@ 0xff
 8001a9a:	d027      	beq.n	8001aec <BNO_Receive+0x68>
 8001a9c:	2bff      	cmp	r3, #255	@ 0xff
 8001a9e:	dc46      	bgt.n	8001b2e <BNO_Receive+0xaa>
 8001aa0:	2bee      	cmp	r3, #238	@ 0xee
 8001aa2:	d017      	beq.n	8001ad4 <BNO_Receive+0x50>
 8001aa4:	2bee      	cmp	r3, #238	@ 0xee
 8001aa6:	dc42      	bgt.n	8001b2e <BNO_Receive+0xaa>
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <BNO_Receive+0x2e>
 8001aac:	2bbb      	cmp	r3, #187	@ 0xbb
 8001aae:	d00a      	beq.n	8001ac6 <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8001ab0:	e03d      	b.n	8001b2e <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2bbb      	cmp	r3, #187	@ 0xbb
 8001ab6:	d002      	beq.n	8001abe <BNO_Receive+0x3a>
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	2bee      	cmp	r3, #238	@ 0xee
 8001abc:	d139      	bne.n	8001b32 <BNO_Receive+0xae>
 8001abe:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <BNO_Receive+0xc0>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	7013      	strb	r3, [r2, #0]
			break;
 8001ac4:	e035      	b.n	8001b32 <BNO_Receive+0xae>
			MsgSize = Buffer;
 8001ac6:	4a20      	ldr	r2, [pc, #128]	@ (8001b48 <BNO_Receive+0xc4>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <BNO_Receive+0xc0>)
 8001ace:	22ff      	movs	r2, #255	@ 0xff
 8001ad0:	701a      	strb	r2, [r3, #0]
			break;
 8001ad2:	e031      	b.n	8001b38 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b4c <BNO_Receive+0xc8>)
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <BNO_Receive+0xc0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001ae0:	22ff      	movs	r2, #255	@ 0xff
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	481a      	ldr	r0, [pc, #104]	@ (8001b50 <BNO_Receive+0xcc>)
 8001ae6:	f012 fe21 	bl	801472c <memset>
			break;
 8001aea:	e025      	b.n	8001b38 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <BNO_Receive+0xd0>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4917      	ldr	r1, [pc, #92]	@ (8001b50 <BNO_Receive+0xcc>)
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8001af8:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <BNO_Receive+0xd0>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <BNO_Receive+0xd0>)
 8001b02:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8001b04:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <BNO_Receive+0xd0>)
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <BNO_Receive+0xc4>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d112      	bne.n	8001b36 <BNO_Receive+0xb2>
				Counter = 0;
 8001b10:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <BNO_Receive+0xd0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8001b16:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <BNO_Receive+0xc4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <BNO_Receive+0xc0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <BNO_Receive+0xc8>)
 8001b24:	220b      	movs	r2, #11
 8001b26:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8001b28:	f7ff fe20 	bl	800176c <BNO_EmptyingBuffer>
			break;
 8001b2c:	e003      	b.n	8001b36 <BNO_Receive+0xb2>
			break;
 8001b2e:	bf00      	nop
 8001b30:	e002      	b.n	8001b38 <BNO_Receive+0xb4>
			break;
 8001b32:	bf00      	nop
 8001b34:	e000      	b.n	8001b38 <BNO_Receive+0xb4>
			break;
 8001b36:	bf00      	nop
	}
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2400028e 	.word	0x2400028e
 8001b44:	2400028c 	.word	0x2400028c
 8001b48:	2400033a 	.word	0x2400033a
 8001b4c:	2400028d 	.word	0x2400028d
 8001b50:	2400018c 	.word	0x2400018c
 8001b54:	2400033b 	.word	0x2400033b

08001b58 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <BNO_FaultManager+0x38>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d912      	bls.n	8001b8a <BNO_FaultManager+0x32>
		Reset_UART(&huart3);
 8001b64:	480b      	ldr	r0, [pc, #44]	@ (8001b94 <BNO_FaultManager+0x3c>)
 8001b66:	f002 fce5 	bl	8004534 <Reset_UART>
		BNO_ComsCounter = 0;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <BNO_FaultManager+0x38>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
		BNO_Rx_Status = AwaitingMsg;
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <BNO_FaultManager+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8001b76:	2201      	movs	r2, #1
 8001b78:	4908      	ldr	r1, [pc, #32]	@ (8001b9c <BNO_FaultManager+0x44>)
 8001b7a:	4806      	ldr	r0, [pc, #24]	@ (8001b94 <BNO_FaultManager+0x3c>)
 8001b7c:	f00b fd96 	bl	800d6ac <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001b80:	22ff      	movs	r2, #255	@ 0xff
 8001b82:	2100      	movs	r1, #0
 8001b84:	4806      	ldr	r0, [pc, #24]	@ (8001ba0 <BNO_FaultManager+0x48>)
 8001b86:	f012 fdd1 	bl	801472c <memset>
	}
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2400028e 	.word	0x2400028e
 8001b94:	24003900 	.word	0x24003900
 8001b98:	2400028c 	.word	0x2400028c
 8001b9c:	2400028b 	.word	0x2400028b
 8001ba0:	2400018c 	.word	0x2400018c

08001ba4 <BNO_Tasks>:

void BNO_Tasks(void){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <BNO_Tasks+0x74>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d128      	bne.n	8001c02 <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <BNO_Tasks+0x78>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d81c      	bhi.n	8001bf2 <BNO_Tasks+0x4e>
 8001bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc0 <BNO_Tasks+0x1c>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001bd5 	.word	0x08001bd5
 8001bc4:	08001be1 	.word	0x08001be1
 8001bc8:	08001be7 	.word	0x08001be7
 8001bcc:	08001bed 	.word	0x08001bed
 8001bd0:	08001bdb 	.word	0x08001bdb
			case Init:
				BNO_Init();
 8001bd4:	f7ff fe62 	bl	800189c <BNO_Init>
				break;
 8001bd8:	e00c      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8001bda:	f7ff fde3 	bl	80017a4 <BNO_SWReset>
			break;
 8001bde:	e009      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8001be0:	f7ff fe78 	bl	80018d4 <BNO_Config>
				break;
 8001be4:	e006      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 8001be6:	f7ff febf 	bl	8001968 <BNO_CalibrationStatus>
				break;
 8001bea:	e003      	b.n	8001bf4 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8001bec:	f7ff ff42 	bl	8001a74 <BNO_GetData>
				break;
 8001bf0:	e000      	b.n	8001bf4 <BNO_Tasks+0x50>

			default:
				break;
 8001bf2:	bf00      	nop
		}
		++BNO_ComsCounter;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <BNO_Tasks+0x7c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <BNO_Tasks+0x7c>)
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	e005      	b.n	8001c0e <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <BNO_Tasks+0x74>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <BNO_Tasks+0x74>)
 8001c0c:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 8001c0e:	f7ff ffa3 	bl	8001b58 <BNO_FaultManager>
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2400028f 	.word	0x2400028f
 8001c1c:	24000290 	.word	0x24000290
 8001c20:	2400028e 	.word	0x2400028e

08001c24 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8001c24:	b084      	sub	sp, #16
 8001c26:	b590      	push	{r4, r7, lr}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	f107 001c 	add.w	r0, r7, #28
 8001c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 8001c36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <LED_blink+0x20>
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d010      	beq.n	8001c64 <LED_blink+0x40>
 8001c42:	e01f      	b.n	8001c84 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8001c44:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d31f      	bcc.n	8001c8c <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	8c39      	ldrh	r1, [r7, #32]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4618      	mov	r0, r3
 8001c54:	f006 fab8 	bl	80081c8 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8001c62:	e013      	b.n	8001c8c <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8001c64:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d311      	bcc.n	8001c90 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	8c39      	ldrh	r1, [r7, #32]
 8001c70:	2200      	movs	r2, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f006 faa8 	bl	80081c8 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8001c82:	e005      	b.n	8001c90 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8001c8a:	e002      	b.n	8001c92 <LED_blink+0x6e>
				break;
 8001c8c:	bf00      	nop
 8001c8e:	e000      	b.n	8001c92 <LED_blink+0x6e>
				break;
 8001c90:	bf00      	nop
		}

	LED.count++;
 8001c92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c94:	3301      	adds	r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	461c      	mov	r4, r3
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001cb2:	b004      	add	sp, #16
 8001cb4:	4770      	bx	lr

08001cb6 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	f107 001c 	add.w	r0, r7, #28
 8001cc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8001cc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d117      	bne.n	8001d00 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8001cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <LED_Rutine+0x28>
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d007      	beq.n	8001cec <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8001cdc:	e018      	b.n	8001d10 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	8c39      	ldrh	r1, [r7, #32]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f006 fa6f 	bl	80081c8 <HAL_GPIO_WritePin>
				break;
 8001cea:	e011      	b.n	8001d10 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8001cec:	f107 001c 	add.w	r0, r7, #28
 8001cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfa:	f7ff ff93 	bl	8001c24 <LED_blink>
				break;
 8001cfe:	e007      	b.n	8001d10 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	8c39      	ldrh	r1, [r7, #32]
 8001d04:	2200      	movs	r2, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 fa5e 	bl	80081c8 <HAL_GPIO_WritePin>
		LED.count = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	461c      	mov	r4, r3
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d28:	b004      	add	sp, #16
 8001d2a:	4770      	bx	lr

08001d2c <LED_Tasks>:

void LED_Tasks (void){
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8001d32:	4c24      	ldr	r4, [pc, #144]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d34:	4638      	mov	r0, r7
 8001d36:	4b23      	ldr	r3, [pc, #140]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	9200      	str	r2, [sp, #0]
 8001d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3e:	f7ff ffba 	bl	8001cb6 <LED_Rutine>
 8001d42:	463b      	mov	r3, r7
 8001d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8001d4a:	4c1e      	ldr	r4, [pc, #120]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	9200      	str	r2, [sp, #0]
 8001d54:	3310      	adds	r3, #16
 8001d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d58:	f7ff ffad 	bl	8001cb6 <LED_Rutine>
 8001d5c:	3410      	adds	r4, #16
 8001d5e:	463b      	mov	r3, r7
 8001d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8001d66:	4c17      	ldr	r4, [pc, #92]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d68:	4638      	mov	r0, r7
 8001d6a:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	3320      	adds	r3, #32
 8001d72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d74:	f7ff ff9f 	bl	8001cb6 <LED_Rutine>
 8001d78:	3420      	adds	r4, #32
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8001d82:	4c10      	ldr	r4, [pc, #64]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d84:	4638      	mov	r0, r7
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <LED_Tasks+0x98>)
 8001d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	3330      	adds	r3, #48	@ 0x30
 8001d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d90:	f7ff ff91 	bl	8001cb6 <LED_Rutine>
 8001d94:	3430      	adds	r4, #48	@ 0x30
 8001d96:	463b      	mov	r3, r7
 8001d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8001d9e:	4c09      	ldr	r4, [pc, #36]	@ (8001dc4 <LED_Tasks+0x98>)
 8001da0:	4638      	mov	r0, r7
 8001da2:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <LED_Tasks+0x98>)
 8001da4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001da6:	9200      	str	r2, [sp, #0]
 8001da8:	3340      	adds	r3, #64	@ 0x40
 8001daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dac:	f7ff ff83 	bl	8001cb6 <LED_Rutine>
 8001db0:	3440      	adds	r4, #64	@ 0x40
 8001db2:	463b      	mov	r3, r7
 8001db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	24000004 	.word	0x24000004

08001dc8 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dce:	881a      	ldrh	r2, [r3, #0]
 8001dd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dd4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 8001dd6:	4b28      	ldr	r3, [pc, #160]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dd8:	885a      	ldrh	r2, [r3, #2]
 8001dda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001dde:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 8001de0:	4b25      	ldr	r3, [pc, #148]	@ (8001e78 <PWM_Assing+0xb0>)
 8001de2:	889a      	ldrh	r2, [r3, #4]
 8001de4:	4b25      	ldr	r3, [pc, #148]	@ (8001e7c <PWM_Assing+0xb4>)
 8001de6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8001de8:	4b23      	ldr	r3, [pc, #140]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dea:	88da      	ldrh	r2, [r3, #6]
 8001dec:	4b23      	ldr	r3, [pc, #140]	@ (8001e7c <PWM_Assing+0xb4>)
 8001dee:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 8001df0:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <PWM_Assing+0xb0>)
 8001df2:	891a      	ldrh	r2, [r3, #8]
 8001df4:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <PWM_Assing+0xb8>)
 8001df6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 8001df8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e78 <PWM_Assing+0xb0>)
 8001dfa:	895a      	ldrh	r2, [r3, #10]
 8001dfc:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <PWM_Assing+0xb8>)
 8001dfe:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 8001e00:	4b1d      	ldr	r3, [pc, #116]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e02:	899a      	ldrh	r2, [r3, #12]
 8001e04:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <PWM_Assing+0xb8>)
 8001e06:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e0a:	89da      	ldrh	r2, [r3, #14]
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <PWM_Assing+0xb8>)
 8001e0e:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e12:	8a1a      	ldrh	r2, [r3, #16]
 8001e14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e18:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 8001e1a:	4b17      	ldr	r3, [pc, #92]	@ (8001e78 <PWM_Assing+0xb0>)
 8001e1c:	8a5a      	ldrh	r2, [r3, #18]
 8001e1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e22:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001e24:	2100      	movs	r1, #0
 8001e26:	4817      	ldr	r0, [pc, #92]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e28:	f00a fbc2 	bl	800c5b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	4815      	ldr	r0, [pc, #84]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e30:	f00a fbbe 	bl	800c5b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001e34:	2108      	movs	r1, #8
 8001e36:	4813      	ldr	r0, [pc, #76]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e38:	f00a fbba 	bl	800c5b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001e3c:	210c      	movs	r1, #12
 8001e3e:	4811      	ldr	r0, [pc, #68]	@ (8001e84 <PWM_Assing+0xbc>)
 8001e40:	f00a fbb6 	bl	800c5b0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e44:	2100      	movs	r1, #0
 8001e46:	4810      	ldr	r0, [pc, #64]	@ (8001e88 <PWM_Assing+0xc0>)
 8001e48:	f00a fbb2 	bl	800c5b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	480e      	ldr	r0, [pc, #56]	@ (8001e88 <PWM_Assing+0xc0>)
 8001e50:	f00a fbae 	bl	800c5b0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001e54:	2100      	movs	r1, #0
 8001e56:	480d      	ldr	r0, [pc, #52]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e58:	f00a fbaa 	bl	800c5b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	480b      	ldr	r0, [pc, #44]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e60:	f00a fba6 	bl	800c5b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001e64:	2108      	movs	r1, #8
 8001e66:	4809      	ldr	r0, [pc, #36]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e68:	f00a fba2 	bl	800c5b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001e6c:	210c      	movs	r1, #12
 8001e6e:	4807      	ldr	r0, [pc, #28]	@ (8001e8c <PWM_Assing+0xc4>)
 8001e70:	f00a fb9e 	bl	800c5b0 <HAL_TIM_PWM_Start>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	24000054 	.word	0x24000054
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	24003610 	.word	0x24003610
 8001e88:	2400365c 	.word	0x2400365c
 8001e8c:	240036a8 	.word	0x240036a8

08001e90 <SBUS_Receive>:
void SBUS_init(void){
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);

}

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8001e9a:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <SBUS_Receive+0x18>
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d017      	beq.n	8001ed6 <SBUS_Receive+0x46>
 8001ea6:	e02f      	b.n	8001f08 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	d10f      	bne.n	8001ece <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	@ (8001f20 <SBUS_Receive+0x90>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f24 <SBUS_Receive+0x94>)
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8001eba:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8001ec0:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <SBUS_Receive+0x90>)
 8001eca:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8001ecc:	e021      	b.n	8001f12 <SBUS_Receive+0x82>
				RxCount = 0;
 8001ece:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
			break;
 8001ed4:	e01d      	b.n	8001f12 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4a11      	ldr	r2, [pc, #68]	@ (8001f24 <SBUS_Receive+0x94>)
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <SBUS_Receive+0x90>)
 8001eec:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b18      	cmp	r3, #24
 8001ef4:	d10c      	bne.n	8001f10 <SBUS_Receive+0x80>
				RxCount = 0;
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <SBUS_Receive+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8001efc:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8001f02:	f000 f845 	bl	8001f90 <SBUS_getData>
			}
			break;
 8001f06:	e003      	b.n	8001f10 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <SBUS_Receive+0x8c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
			break;
 8001f0e:	e000      	b.n	8001f12 <SBUS_Receive+0x82>
			break;
 8001f10:	bf00      	nop
	}
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	24000356 	.word	0x24000356
 8001f20:	24000357 	.word	0x24000357
 8001f24:	2400033c 	.word	0x2400033c

08001f28 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f2e:	881a      	ldrh	r2, [r3, #0]
 8001f30:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f32:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f36:	885a      	ldrh	r2, [r3, #2]
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f3a:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f3e:	889a      	ldrh	r2, [r3, #4]
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f42:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 8001f44:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f46:	88da      	ldrh	r2, [r3, #6]
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f4a:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f4e:	891a      	ldrh	r2, [r3, #8]
 8001f50:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f52:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f56:	895a      	ldrh	r2, [r3, #10]
 8001f58:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f5a:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f5e:	899a      	ldrh	r2, [r3, #12]
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f62:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f66:	89da      	ldrh	r2, [r3, #14]
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f6a:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f6e:	8a1a      	ldrh	r2, [r3, #16]
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f72:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <Temp_BypassFunct+0x60>)
 8001f76:	8a5a      	ldrh	r2, [r3, #18]
 8001f78:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <Temp_BypassFunct+0x64>)
 8001f7a:	825a      	strh	r2, [r3, #18]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	24000068 	.word	0x24000068
 8001f8c:	24000054 	.word	0x24000054

08001f90 <SBUS_getData>:

void SBUS_getData(void){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8001f94:	4b95      	ldr	r3, [pc, #596]	@ (80021ec <SBUS_getData+0x25c>)
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	4b94      	ldr	r3, [pc, #592]	@ (80021ec <SBUS_getData+0x25c>)
 8001f9c:	789b      	ldrb	r3, [r3, #2]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b90      	ldr	r3, [pc, #576]	@ (80021f0 <SBUS_getData+0x260>)
 8001fb0:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8001fb2:	4b8e      	ldr	r3, [pc, #568]	@ (80021ec <SBUS_getData+0x25c>)
 8001fb4:	789b      	ldrb	r3, [r3, #2]
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	4b8b      	ldr	r3, [pc, #556]	@ (80021ec <SBUS_getData+0x25c>)
 8001fbe:	78db      	ldrb	r3, [r3, #3]
 8001fc0:	015b      	lsls	r3, r3, #5
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b87      	ldr	r3, [pc, #540]	@ (80021f0 <SBUS_getData+0x260>)
 8001fd2:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8001fd4:	4b85      	ldr	r3, [pc, #532]	@ (80021ec <SBUS_getData+0x25c>)
 8001fd6:	78db      	ldrb	r3, [r3, #3]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b83      	ldr	r3, [pc, #524]	@ (80021ec <SBUS_getData+0x25c>)
 8001fe0:	791b      	ldrb	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	4b80      	ldr	r3, [pc, #512]	@ (80021ec <SBUS_getData+0x25c>)
 8001fec:	795b      	ldrb	r3, [r3, #5]
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80021f0 <SBUS_getData+0x260>)
 8002000:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8002002:	4b7a      	ldr	r3, [pc, #488]	@ (80021ec <SBUS_getData+0x25c>)
 8002004:	795b      	ldrb	r3, [r3, #5]
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	b21a      	sxth	r2, r3
 800200c:	4b77      	ldr	r3, [pc, #476]	@ (80021ec <SBUS_getData+0x25c>)
 800200e:	799b      	ldrb	r3, [r3, #6]
 8002010:	01db      	lsls	r3, r3, #7
 8002012:	b21b      	sxth	r3, r3
 8002014:	4313      	orrs	r3, r2
 8002016:	b21b      	sxth	r3, r3
 8002018:	b29b      	uxth	r3, r3
 800201a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b73      	ldr	r3, [pc, #460]	@ (80021f0 <SBUS_getData+0x260>)
 8002022:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8002024:	4b71      	ldr	r3, [pc, #452]	@ (80021ec <SBUS_getData+0x25c>)
 8002026:	799b      	ldrb	r3, [r3, #6]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	b2db      	uxtb	r3, r3
 800202c:	b21a      	sxth	r2, r3
 800202e:	4b6f      	ldr	r3, [pc, #444]	@ (80021ec <SBUS_getData+0x25c>)
 8002030:	79db      	ldrb	r3, [r3, #7]
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	b21b      	sxth	r3, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	b21b      	sxth	r3, r3
 800203a:	b29b      	uxth	r3, r3
 800203c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b6b      	ldr	r3, [pc, #428]	@ (80021f0 <SBUS_getData+0x260>)
 8002044:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8002046:	4b69      	ldr	r3, [pc, #420]	@ (80021ec <SBUS_getData+0x25c>)
 8002048:	79db      	ldrb	r3, [r3, #7]
 800204a:	09db      	lsrs	r3, r3, #7
 800204c:	b2db      	uxtb	r3, r3
 800204e:	b21a      	sxth	r2, r3
 8002050:	4b66      	ldr	r3, [pc, #408]	@ (80021ec <SBUS_getData+0x25c>)
 8002052:	7a1b      	ldrb	r3, [r3, #8]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	b21b      	sxth	r3, r3
 8002058:	4313      	orrs	r3, r2
 800205a:	b21a      	sxth	r2, r3
 800205c:	4b63      	ldr	r3, [pc, #396]	@ (80021ec <SBUS_getData+0x25c>)
 800205e:	7a5b      	ldrb	r3, [r3, #9]
 8002060:	025b      	lsls	r3, r3, #9
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21b      	sxth	r3, r3
 8002068:	b29b      	uxth	r3, r3
 800206a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b5f      	ldr	r3, [pc, #380]	@ (80021f0 <SBUS_getData+0x260>)
 8002072:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8002074:	4b5d      	ldr	r3, [pc, #372]	@ (80021ec <SBUS_getData+0x25c>)
 8002076:	7a5b      	ldrb	r3, [r3, #9]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	b2db      	uxtb	r3, r3
 800207c:	b21a      	sxth	r2, r3
 800207e:	4b5b      	ldr	r3, [pc, #364]	@ (80021ec <SBUS_getData+0x25c>)
 8002080:	7a9b      	ldrb	r3, [r3, #10]
 8002082:	019b      	lsls	r3, r3, #6
 8002084:	b21b      	sxth	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	b21b      	sxth	r3, r3
 800208a:	b29b      	uxth	r3, r3
 800208c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b57      	ldr	r3, [pc, #348]	@ (80021f0 <SBUS_getData+0x260>)
 8002094:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8002096:	4b55      	ldr	r3, [pc, #340]	@ (80021ec <SBUS_getData+0x25c>)
 8002098:	7a9b      	ldrb	r3, [r3, #10]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	b2db      	uxtb	r3, r3
 800209e:	b21a      	sxth	r2, r3
 80020a0:	4b52      	ldr	r3, [pc, #328]	@ (80021ec <SBUS_getData+0x25c>)
 80020a2:	7adb      	ldrb	r3, [r3, #11]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b4e      	ldr	r3, [pc, #312]	@ (80021f0 <SBUS_getData+0x260>)
 80020b6:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 80020b8:	4b4c      	ldr	r3, [pc, #304]	@ (80021ec <SBUS_getData+0x25c>)
 80020ba:	7b1b      	ldrb	r3, [r3, #12]
 80020bc:	b21a      	sxth	r2, r3
 80020be:	4b4b      	ldr	r3, [pc, #300]	@ (80021ec <SBUS_getData+0x25c>)
 80020c0:	7b5b      	ldrb	r3, [r3, #13]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b47      	ldr	r3, [pc, #284]	@ (80021f0 <SBUS_getData+0x260>)
 80020d4:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 80020d6:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <SBUS_getData+0x25c>)
 80020d8:	7b5b      	ldrb	r3, [r3, #13]
 80020da:	08db      	lsrs	r3, r3, #3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	b21a      	sxth	r2, r3
 80020e0:	4b42      	ldr	r3, [pc, #264]	@ (80021ec <SBUS_getData+0x25c>)
 80020e2:	7b9b      	ldrb	r3, [r3, #14]
 80020e4:	015b      	lsls	r3, r3, #5
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	4b3e      	ldr	r3, [pc, #248]	@ (80021f0 <SBUS_getData+0x260>)
 80020f6:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80020f8:	4b3c      	ldr	r3, [pc, #240]	@ (80021ec <SBUS_getData+0x25c>)
 80020fa:	7b9b      	ldrb	r3, [r3, #14]
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	b21a      	sxth	r2, r3
 8002102:	4b3a      	ldr	r3, [pc, #232]	@ (80021ec <SBUS_getData+0x25c>)
 8002104:	7bdb      	ldrb	r3, [r3, #15]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	b21b      	sxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b21a      	sxth	r2, r3
 800210e:	4b37      	ldr	r3, [pc, #220]	@ (80021ec <SBUS_getData+0x25c>)
 8002110:	7c1b      	ldrb	r3, [r3, #16]
 8002112:	029b      	lsls	r3, r3, #10
 8002114:	b21b      	sxth	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b21b      	sxth	r3, r3
 800211a:	b29b      	uxth	r3, r3
 800211c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <SBUS_getData+0x260>)
 8002124:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8002126:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <SBUS_getData+0x25c>)
 8002128:	7c1b      	ldrb	r3, [r3, #16]
 800212a:	085b      	lsrs	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	b21a      	sxth	r2, r3
 8002130:	4b2e      	ldr	r3, [pc, #184]	@ (80021ec <SBUS_getData+0x25c>)
 8002132:	7c5b      	ldrb	r3, [r3, #17]
 8002134:	01db      	lsls	r3, r3, #7
 8002136:	b21b      	sxth	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b21b      	sxth	r3, r3
 800213c:	b29b      	uxth	r3, r3
 800213e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002142:	b29a      	uxth	r2, r3
 8002144:	4b2a      	ldr	r3, [pc, #168]	@ (80021f0 <SBUS_getData+0x260>)
 8002146:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8002148:	4b28      	ldr	r3, [pc, #160]	@ (80021ec <SBUS_getData+0x25c>)
 800214a:	7c5b      	ldrb	r3, [r3, #17]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	b2db      	uxtb	r3, r3
 8002150:	b21a      	sxth	r2, r3
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <SBUS_getData+0x25c>)
 8002154:	7c9b      	ldrb	r3, [r3, #18]
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	b21b      	sxth	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b21b      	sxth	r3, r3
 800215e:	b29b      	uxth	r3, r3
 8002160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b22      	ldr	r3, [pc, #136]	@ (80021f0 <SBUS_getData+0x260>)
 8002168:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <SBUS_getData+0x25c>)
 800216c:	7c9b      	ldrb	r3, [r3, #18]
 800216e:	09db      	lsrs	r3, r3, #7
 8002170:	b2db      	uxtb	r3, r3
 8002172:	b21a      	sxth	r2, r3
 8002174:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <SBUS_getData+0x25c>)
 8002176:	7cdb      	ldrb	r3, [r3, #19]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	b21b      	sxth	r3, r3
 800217c:	4313      	orrs	r3, r2
 800217e:	b21a      	sxth	r2, r3
 8002180:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <SBUS_getData+0x25c>)
 8002182:	7d1b      	ldrb	r3, [r3, #20]
 8002184:	025b      	lsls	r3, r3, #9
 8002186:	b21b      	sxth	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b21b      	sxth	r3, r3
 800218c:	b29b      	uxth	r3, r3
 800218e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002192:	b29a      	uxth	r2, r3
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <SBUS_getData+0x260>)
 8002196:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <SBUS_getData+0x25c>)
 800219a:	7d1b      	ldrb	r3, [r3, #20]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <SBUS_getData+0x25c>)
 80021a4:	7d5b      	ldrb	r3, [r3, #21]
 80021a6:	019b      	lsls	r3, r3, #6
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <SBUS_getData+0x260>)
 80021b8:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 80021ba:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <SBUS_getData+0x25c>)
 80021bc:	7d5b      	ldrb	r3, [r3, #21]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <SBUS_getData+0x25c>)
 80021c6:	7d9b      	ldrb	r3, [r3, #22]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <SBUS_getData+0x260>)
 80021da:	83da      	strh	r2, [r3, #30]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80021dc:	4b04      	ldr	r3, [pc, #16]	@ (80021f0 <SBUS_getData+0x260>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	ee07 3a90 	vmov	s15, r3
 80021e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e8:	e00a      	b.n	8002200 <SBUS_getData+0x270>
 80021ea:	bf00      	nop
 80021ec:	2400033c 	.word	0x2400033c
 80021f0:	24000068 	.word	0x24000068
 80021f4:	43b00000 	.word	0x43b00000
 80021f8:	44a80000 	.word	0x44a80000
 80021fc:	447a0000 	.word	0x447a0000
 8002200:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80021f4 <SBUS_getData+0x264>
 8002204:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002208:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80021f8 <SBUS_getData+0x268>
 800220c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002210:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80021fc <SBUS_getData+0x26c>
 8002214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800221c:	ee17 3a90 	vmov	r3, s15
 8002220:	b29b      	uxth	r3, r3
 8002222:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002226:	b29a      	uxth	r2, r3
 8002228:	4bd1      	ldr	r3, [pc, #836]	@ (8002570 <SBUS_getData+0x5e0>)
 800222a:	801a      	strh	r2, [r3, #0]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 800222c:	4bd0      	ldr	r3, [pc, #832]	@ (8002570 <SBUS_getData+0x5e0>)
 800222e:	885b      	ldrh	r3, [r3, #2]
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002238:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002574 <SBUS_getData+0x5e4>
 800223c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002240:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8002578 <SBUS_getData+0x5e8>
 8002244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002248:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 800257c <SBUS_getData+0x5ec>
 800224c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002254:	ee17 3a90 	vmov	r3, s15
 8002258:	b29b      	uxth	r3, r3
 800225a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800225e:	b29a      	uxth	r2, r3
 8002260:	4bc3      	ldr	r3, [pc, #780]	@ (8002570 <SBUS_getData+0x5e0>)
 8002262:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8002264:	4bc2      	ldr	r3, [pc, #776]	@ (8002570 <SBUS_getData+0x5e0>)
 8002266:	889b      	ldrh	r3, [r3, #4]
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002270:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8002574 <SBUS_getData+0x5e4>
 8002274:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002278:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8002578 <SBUS_getData+0x5e8>
 800227c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002280:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 800257c <SBUS_getData+0x5ec>
 8002284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228c:	ee17 3a90 	vmov	r3, s15
 8002290:	b29b      	uxth	r3, r3
 8002292:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002296:	b29a      	uxth	r2, r3
 8002298:	4bb5      	ldr	r3, [pc, #724]	@ (8002570 <SBUS_getData+0x5e0>)
 800229a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 800229c:	4bb4      	ldr	r3, [pc, #720]	@ (8002570 <SBUS_getData+0x5e0>)
 800229e:	88db      	ldrh	r3, [r3, #6]
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a8:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8002574 <SBUS_getData+0x5e4>
 80022ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022b0:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002578 <SBUS_getData+0x5e8>
 80022b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b8:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 800257c <SBUS_getData+0x5ec>
 80022bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022c4:	ee17 3a90 	vmov	r3, s15
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	4ba7      	ldr	r3, [pc, #668]	@ (8002570 <SBUS_getData+0x5e0>)
 80022d2:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 80022d4:	4ba6      	ldr	r3, [pc, #664]	@ (8002570 <SBUS_getData+0x5e0>)
 80022d6:	891b      	ldrh	r3, [r3, #8]
 80022d8:	ee07 3a90 	vmov	s15, r3
 80022dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e0:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8002574 <SBUS_getData+0x5e4>
 80022e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022e8:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002578 <SBUS_getData+0x5e8>
 80022ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022f0:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 800257c <SBUS_getData+0x5ec>
 80022f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022fc:	ee17 3a90 	vmov	r3, s15
 8002300:	b29b      	uxth	r3, r3
 8002302:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002306:	b29a      	uxth	r2, r3
 8002308:	4b99      	ldr	r3, [pc, #612]	@ (8002570 <SBUS_getData+0x5e0>)
 800230a:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 800230c:	4b98      	ldr	r3, [pc, #608]	@ (8002570 <SBUS_getData+0x5e0>)
 800230e:	895b      	ldrh	r3, [r3, #10]
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002318:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8002574 <SBUS_getData+0x5e4>
 800231c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002320:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002578 <SBUS_getData+0x5e8>
 8002324:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002328:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800257c <SBUS_getData+0x5ec>
 800232c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002334:	ee17 3a90 	vmov	r3, s15
 8002338:	b29b      	uxth	r3, r3
 800233a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800233e:	b29a      	uxth	r2, r3
 8002340:	4b8b      	ldr	r3, [pc, #556]	@ (8002570 <SBUS_getData+0x5e0>)
 8002342:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8002344:	4b8a      	ldr	r3, [pc, #552]	@ (8002570 <SBUS_getData+0x5e0>)
 8002346:	899b      	ldrh	r3, [r3, #12]
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002350:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002574 <SBUS_getData+0x5e4>
 8002354:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002358:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002578 <SBUS_getData+0x5e8>
 800235c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002360:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800257c <SBUS_getData+0x5ec>
 8002364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800236c:	ee17 3a90 	vmov	r3, s15
 8002370:	b29b      	uxth	r3, r3
 8002372:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002376:	b29a      	uxth	r2, r3
 8002378:	4b7d      	ldr	r3, [pc, #500]	@ (8002570 <SBUS_getData+0x5e0>)
 800237a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 800237c:	4b7c      	ldr	r3, [pc, #496]	@ (8002570 <SBUS_getData+0x5e0>)
 800237e:	89db      	ldrh	r3, [r3, #14]
 8002380:	ee07 3a90 	vmov	s15, r3
 8002384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002388:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002574 <SBUS_getData+0x5e4>
 800238c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002390:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002578 <SBUS_getData+0x5e8>
 8002394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002398:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800257c <SBUS_getData+0x5ec>
 800239c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a4:	ee17 3a90 	vmov	r3, s15
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b6f      	ldr	r3, [pc, #444]	@ (8002570 <SBUS_getData+0x5e0>)
 80023b2:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 80023b4:	4b6e      	ldr	r3, [pc, #440]	@ (8002570 <SBUS_getData+0x5e0>)
 80023b6:	8a1b      	ldrh	r3, [r3, #16]
 80023b8:	ee07 3a90 	vmov	s15, r3
 80023bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002574 <SBUS_getData+0x5e4>
 80023c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80023c8:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002578 <SBUS_getData+0x5e8>
 80023cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023d0:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800257c <SBUS_getData+0x5ec>
 80023d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023dc:	ee17 3a90 	vmov	r3, s15
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	4b61      	ldr	r3, [pc, #388]	@ (8002570 <SBUS_getData+0x5e0>)
 80023ea:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80023ec:	4b60      	ldr	r3, [pc, #384]	@ (8002570 <SBUS_getData+0x5e0>)
 80023ee:	8a5b      	ldrh	r3, [r3, #18]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002574 <SBUS_getData+0x5e4>
 80023fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002400:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002578 <SBUS_getData+0x5e8>
 8002404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002408:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800257c <SBUS_getData+0x5ec>
 800240c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002414:	ee17 3a90 	vmov	r3, s15
 8002418:	b29b      	uxth	r3, r3
 800241a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800241e:	b29a      	uxth	r2, r3
 8002420:	4b53      	ldr	r3, [pc, #332]	@ (8002570 <SBUS_getData+0x5e0>)
 8002422:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8002424:	4b52      	ldr	r3, [pc, #328]	@ (8002570 <SBUS_getData+0x5e0>)
 8002426:	8a9b      	ldrh	r3, [r3, #20]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002430:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002574 <SBUS_getData+0x5e4>
 8002434:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002438:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002578 <SBUS_getData+0x5e8>
 800243c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002440:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800257c <SBUS_getData+0x5ec>
 8002444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	b29b      	uxth	r3, r3
 8002452:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002456:	b29a      	uxth	r2, r3
 8002458:	4b45      	ldr	r3, [pc, #276]	@ (8002570 <SBUS_getData+0x5e0>)
 800245a:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 800245c:	4b44      	ldr	r3, [pc, #272]	@ (8002570 <SBUS_getData+0x5e0>)
 800245e:	8adb      	ldrh	r3, [r3, #22]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002468:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002574 <SBUS_getData+0x5e4>
 800246c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002470:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002578 <SBUS_getData+0x5e8>
 8002474:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002478:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800257c <SBUS_getData+0x5ec>
 800247c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002484:	ee17 3a90 	vmov	r3, s15
 8002488:	b29b      	uxth	r3, r3
 800248a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b37      	ldr	r3, [pc, #220]	@ (8002570 <SBUS_getData+0x5e0>)
 8002492:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8002494:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <SBUS_getData+0x5e0>)
 8002496:	8b1b      	ldrh	r3, [r3, #24]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002574 <SBUS_getData+0x5e4>
 80024a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80024a8:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002578 <SBUS_getData+0x5e8>
 80024ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800257c <SBUS_getData+0x5ec>
 80024b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024bc:	ee17 3a90 	vmov	r3, s15
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	4b29      	ldr	r3, [pc, #164]	@ (8002570 <SBUS_getData+0x5e0>)
 80024ca:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 80024cc:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <SBUS_getData+0x5e0>)
 80024ce:	8b5b      	ldrh	r3, [r3, #26]
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002574 <SBUS_getData+0x5e4>
 80024dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80024e0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002578 <SBUS_getData+0x5e8>
 80024e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024e8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800257c <SBUS_getData+0x5ec>
 80024ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f4:	ee17 3a90 	vmov	r3, s15
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80024fe:	b29a      	uxth	r2, r3
 8002500:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <SBUS_getData+0x5e0>)
 8002502:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <SBUS_getData+0x5e0>)
 8002506:	8b9b      	ldrh	r3, [r3, #28]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002510:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002574 <SBUS_getData+0x5e4>
 8002514:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002518:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002578 <SBUS_getData+0x5e8>
 800251c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002520:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800257c <SBUS_getData+0x5ec>
 8002524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252c:	ee17 3a90 	vmov	r3, s15
 8002530:	b29b      	uxth	r3, r3
 8002532:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <SBUS_getData+0x5e0>)
 800253a:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <SBUS_getData+0x5e0>)
 800253e:	8bdb      	ldrh	r3, [r3, #30]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002548:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002574 <SBUS_getData+0x5e4>
 800254c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002550:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002578 <SBUS_getData+0x5e8>
 8002554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002558:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800257c <SBUS_getData+0x5ec>
 800255c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002564:	ee17 3a90 	vmov	r3, s15
 8002568:	b29b      	uxth	r3, r3
 800256a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800256e:	e007      	b.n	8002580 <SBUS_getData+0x5f0>
 8002570:	24000068 	.word	0x24000068
 8002574:	43b00000 	.word	0x43b00000
 8002578:	44a80000 	.word	0x44a80000
 800257c:	447a0000 	.word	0x447a0000
 8002580:	b29a      	uxth	r2, r3
 8002582:	4b2a      	ldr	r3, [pc, #168]	@ (800262c <SBUS_getData+0x69c>)
 8002584:	83da      	strh	r2, [r3, #30]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8002586:	4b2a      	ldr	r3, [pc, #168]	@ (8002630 <SBUS_getData+0x6a0>)
 8002588:	7dda      	ldrb	r2, [r3, #23]
 800258a:	4b28      	ldr	r3, [pc, #160]	@ (800262c <SBUS_getData+0x69c>)
 800258c:	f883 2020 	strb.w	r2, [r3, #32]
	if(SBUS_UART_Rx[23]>=8){
 8002590:	4b27      	ldr	r3, [pc, #156]	@ (8002630 <SBUS_getData+0x6a0>)
 8002592:	7ddb      	ldrb	r3, [r3, #23]
 8002594:	2b07      	cmp	r3, #7
 8002596:	d90a      	bls.n	80025ae <SBUS_getData+0x61e>
		SBUS_UART_Rx[23]-=8;
 8002598:	4b25      	ldr	r3, [pc, #148]	@ (8002630 <SBUS_getData+0x6a0>)
 800259a:	7ddb      	ldrb	r3, [r3, #23]
 800259c:	3b08      	subs	r3, #8
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b23      	ldr	r3, [pc, #140]	@ (8002630 <SBUS_getData+0x6a0>)
 80025a2:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 80025a4:	4b21      	ldr	r3, [pc, #132]	@ (800262c <SBUS_getData+0x69c>)
 80025a6:	2235      	movs	r2, #53	@ 0x35
 80025a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80025ac:	e003      	b.n	80025b6 <SBUS_getData+0x626>
	}else Radio_input.fail_safe= Ok;
 80025ae:	4b1f      	ldr	r3, [pc, #124]	@ (800262c <SBUS_getData+0x69c>)
 80025b0:	22aa      	movs	r2, #170	@ 0xaa
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=4){
 80025b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <SBUS_getData+0x6a0>)
 80025b8:	7ddb      	ldrb	r3, [r3, #23]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d90a      	bls.n	80025d4 <SBUS_getData+0x644>
		SBUS_UART_Rx[23]-=4;
 80025be:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <SBUS_getData+0x6a0>)
 80025c0:	7ddb      	ldrb	r3, [r3, #23]
 80025c2:	3b04      	subs	r3, #4
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <SBUS_getData+0x6a0>)
 80025c8:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 80025ca:	4b18      	ldr	r3, [pc, #96]	@ (800262c <SBUS_getData+0x69c>)
 80025cc:	2210      	movs	r2, #16
 80025ce:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80025d2:	e003      	b.n	80025dc <SBUS_getData+0x64c>
	}else Radio_input.pkg_lost=Ok;
 80025d4:	4b15      	ldr	r3, [pc, #84]	@ (800262c <SBUS_getData+0x69c>)
 80025d6:	22aa      	movs	r2, #170	@ 0xaa
 80025d8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]>=2){
 80025dc:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <SBUS_getData+0x6a0>)
 80025de:	7ddb      	ldrb	r3, [r3, #23]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d90a      	bls.n	80025fa <SBUS_getData+0x66a>
		SBUS_UART_Rx[23]-=2;
 80025e4:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <SBUS_getData+0x6a0>)
 80025e6:	7ddb      	ldrb	r3, [r3, #23]
 80025e8:	3b02      	subs	r3, #2
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <SBUS_getData+0x6a0>)
 80025ee:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 80025f0:	4b0e      	ldr	r3, [pc, #56]	@ (800262c <SBUS_getData+0x69c>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80025f8:	e003      	b.n	8002602 <SBUS_getData+0x672>
	}else Radio_input.Interruptor_2=OFF;
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <SBUS_getData+0x69c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(SBUS_UART_Rx[23]){
 8002602:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <SBUS_getData+0x6a0>)
 8002604:	7ddb      	ldrb	r3, [r3, #23]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <SBUS_getData+0x684>
		Radio_input.Interruptor_1=ON;
 800260a:	4b08      	ldr	r3, [pc, #32]	@ (800262c <SBUS_getData+0x69c>)
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8002612:	e003      	b.n	800261c <SBUS_getData+0x68c>
	}else Radio_input.Interruptor_1=OFF;
 8002614:	4b05      	ldr	r3, [pc, #20]	@ (800262c <SBUS_getData+0x69c>)
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21


	Radio_input.Uart_Counter = 0;
 800261c:	4b03      	ldr	r3, [pc, #12]	@ (800262c <SBUS_getData+0x69c>)
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	Temp_BypassFunct();
 8002624:	f7ff fc80 	bl	8001f28 <Temp_BypassFunct>

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	24000068 	.word	0x24000068
 8002630:	2400033c 	.word	0x2400033c

08002634 <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8002638:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 800263a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800263e:	2bff      	cmp	r3, #255	@ 0xff
 8002640:	d00c      	beq.n	800265c <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8002642:	4b0d      	ldr	r3, [pc, #52]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 8002644:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002648:	3301      	adds	r3, #1
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 800264e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.uart_error = Ok;
 8002652:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 8002654:	22aa      	movs	r2, #170	@ 0xaa
 8002656:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 800265a:	e007      	b.n	800266c <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 800265c:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		Radio_input.fail_safe = FailSafe;
 8002664:	4b04      	ldr	r3, [pc, #16]	@ (8002678 <SBUS_IntegrityVerification+0x44>)
 8002666:	2235      	movs	r2, #53	@ 0x35
 8002668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	24000068 	.word	0x24000068

0800267c <ASCII2uint8>:
char ConfigFile[10]  = "Config.txt";
char GainsFile[9]    = "Gains.csv";

char NResetChar[3]  = {255};

uint8_t ASCII2uint8(char *buffer, uint8_t Size){
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	70fb      	strb	r3, [r7, #3]
	uint8_t inter = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < Size; ++n) {
 800268c:	2300      	movs	r3, #0
 800268e:	73bb      	strb	r3, [r7, #14]
 8002690:	e011      	b.n	80026b6 <ASCII2uint8+0x3a>
		inter *= 10;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	461a      	mov	r2, r3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4413      	add	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]

		inter += (buffer[n] - 48);
 800269e:	7bbb      	ldrb	r3, [r7, #14]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4413      	add	r3, r2
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	4413      	add	r3, r2
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3b30      	subs	r3, #48	@ 0x30
 80026ae:	73fb      	strb	r3, [r7, #15]
	for (uint8_t n = 0; n < Size; ++n) {
 80026b0:	7bbb      	ldrb	r3, [r7, #14]
 80026b2:	3301      	adds	r3, #1
 80026b4:	73bb      	strb	r3, [r7, #14]
 80026b6:	7bba      	ldrb	r2, [r7, #14]
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d3e9      	bcc.n	8002692 <ASCII2uint8+0x16>
	}
	return inter;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <uint82ASCII>:

void uint82ASCII(uint8_t Inter, char *Output){
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	71fb      	strb	r3, [r7, #7]
	Output[0] = Inter/100;
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	4a27      	ldr	r2, [pc, #156]	@ (8002778 <uint82ASCII+0xac>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	701a      	strb	r2, [r3, #0]
	Output[1] = (Inter - Output[0]*100) /10;
 80026e8:	79fa      	ldrb	r2, [r7, #7]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	4a20      	ldr	r2, [pc, #128]	@ (800277c <uint82ASCII+0xb0>)
 80026fc:	fb82 1203 	smull	r1, r2, r2, r3
 8002700:	1092      	asrs	r2, r2, #2
 8002702:	17db      	asrs	r3, r3, #31
 8002704:	1ad2      	subs	r2, r2, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
	Output[2] = (Inter - Output[0]*100 - Output[1]*10) ;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	0092      	lsls	r2, r2, #2
 8002716:	441a      	add	r2, r3
 8002718:	00d2      	lsls	r2, r2, #3
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	b2da      	uxtb	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	0149      	lsls	r1, r1, #5
 800272a:	1ac9      	subs	r1, r1, r3
 800272c:	0089      	lsls	r1, r1, #2
 800272e:	1acb      	subs	r3, r1, r3
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	4413      	add	r3, r2
 8002736:	b2d9      	uxtb	r1, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	3302      	adds	r3, #2
 800273c:	79fa      	ldrb	r2, [r7, #7]
 800273e:	440a      	add	r2, r1
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

	for (uint8_t n = 0; n < 3; ++n) {
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e00c      	b.n	8002764 <uint82ASCII+0x98>
		Output[n] +=48;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	4413      	add	r3, r2
 8002750:	781a      	ldrb	r2, [r3, #0]
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	440b      	add	r3, r1
 8002758:	3230      	adds	r2, #48	@ 0x30
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 3; ++n) {
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	3301      	adds	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d9ef      	bls.n	800274a <uint82ASCII+0x7e>
	}
}
 800276a:	bf00      	nop
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	51eb851f 	.word	0x51eb851f
 800277c:	66666667 	.word	0x66666667

08002780 <ConfigFile_Create>:
		Output[n] +=48;
		Scaler /= 10;
	}
}

void ConfigFile_Create(void){
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0

	f_unlink(ConfigFile);
 8002784:	480c      	ldr	r0, [pc, #48]	@ (80027b8 <ConfigFile_Create+0x38>)
 8002786:	f011 fa3e 	bl	8013c06 <f_unlink>

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800278a:	2213      	movs	r2, #19
 800278c:	490a      	ldr	r1, [pc, #40]	@ (80027b8 <ConfigFile_Create+0x38>)
 800278e:	480b      	ldr	r0, [pc, #44]	@ (80027bc <ConfigFile_Create+0x3c>)
 8002790:	f010 fa68 	bl	8012c64 <f_open>

	f_printf(&Config, "Version: ");
 8002794:	490a      	ldr	r1, [pc, #40]	@ (80027c0 <ConfigFile_Create+0x40>)
 8002796:	4809      	ldr	r0, [pc, #36]	@ (80027bc <ConfigFile_Create+0x3c>)
 8002798:	f011 fc88 	bl	80140ac <f_printf>
	f_printf(&Config,  SystemConfig.FWVersion);
 800279c:	4909      	ldr	r1, [pc, #36]	@ (80027c4 <ConfigFile_Create+0x44>)
 800279e:	4807      	ldr	r0, [pc, #28]	@ (80027bc <ConfigFile_Create+0x3c>)
 80027a0:	f011 fc84 	bl	80140ac <f_printf>
	f_printf(&Config, "\nN. Reset: 000\n");
 80027a4:	4908      	ldr	r1, [pc, #32]	@ (80027c8 <ConfigFile_Create+0x48>)
 80027a6:	4805      	ldr	r0, [pc, #20]	@ (80027bc <ConfigFile_Create+0x3c>)
 80027a8:	f011 fc80 	bl	80140ac <f_printf>
	f_close(&Config);
 80027ac:	4803      	ldr	r0, [pc, #12]	@ (80027bc <ConfigFile_Create+0x3c>)
 80027ae:	f010 ff92 	bl	80136d6 <f_close>
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	240000b0 	.word	0x240000b0
 80027bc:	240023c4 	.word	0x240023c4
 80027c0:	08014a20 	.word	0x08014a20
 80027c4:	24000090 	.word	0x24000090
 80027c8:	08014a2c 	.word	0x08014a2c

080027cc <SD_ConfigFileInit>:

void SD_ConfigFileInit(void){
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
	char FileVersion[5] = {0};
 80027d2:	2300      	movs	r3, #0
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	2300      	movs	r3, #0
 80027d8:	713b      	strb	r3, [r7, #4]

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80027da:	2213      	movs	r2, #19
 80027dc:	492b      	ldr	r1, [pc, #172]	@ (800288c <SD_ConfigFileInit+0xc0>)
 80027de:	482c      	ldr	r0, [pc, #176]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 80027e0:	f010 fa40 	bl	8012c64 <f_open>

	f_lseek(&Config, Config_FWVersion);
 80027e4:	2109      	movs	r1, #9
 80027e6:	482a      	ldr	r0, [pc, #168]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 80027e8:	f010 ffe9 	bl	80137be <f_lseek>

	f_read(&Config, FileVersion, 5, &br);
 80027ec:	4639      	mov	r1, r7
 80027ee:	4b29      	ldr	r3, [pc, #164]	@ (8002894 <SD_ConfigFileInit+0xc8>)
 80027f0:	2205      	movs	r2, #5
 80027f2:	4827      	ldr	r0, [pc, #156]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 80027f4:	f010 fbfe 	bl	8012ff4 <f_read>

	f_close(&Config);
 80027f8:	4825      	ldr	r0, [pc, #148]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 80027fa:	f010 ff6c 	bl	80136d6 <f_close>

	for (uint8_t n = 0; n < 5; ++n) {
 80027fe:	2300      	movs	r3, #0
 8002800:	71fb      	strb	r3, [r7, #7]
 8002802:	e010      	b.n	8002826 <SD_ConfigFileInit+0x5a>
		if(FileVersion[n] != SystemConfig.FWVersion[n]){
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	3308      	adds	r3, #8
 8002808:	443b      	add	r3, r7
 800280a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	4921      	ldr	r1, [pc, #132]	@ (8002898 <SD_ConfigFileInit+0xcc>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	429a      	cmp	r2, r3
 8002816:	d003      	beq.n	8002820 <SD_ConfigFileInit+0x54>
			ConfigFile_Create();
 8002818:	f7ff ffb2 	bl	8002780 <ConfigFile_Create>
			n = 5;
 800281c:	2305      	movs	r3, #5
 800281e:	71fb      	strb	r3, [r7, #7]
	for (uint8_t n = 0; n < 5; ++n) {
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	3301      	adds	r3, #1
 8002824:	71fb      	strb	r3, [r7, #7]
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d9eb      	bls.n	8002804 <SD_ConfigFileInit+0x38>
		}
	}
	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800282c:	2213      	movs	r2, #19
 800282e:	4917      	ldr	r1, [pc, #92]	@ (800288c <SD_ConfigFileInit+0xc0>)
 8002830:	4817      	ldr	r0, [pc, #92]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 8002832:	f010 fa17 	bl	8012c64 <f_open>

	f_lseek(&Config, 26);
 8002836:	211a      	movs	r1, #26
 8002838:	4815      	ldr	r0, [pc, #84]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 800283a:	f010 ffc0 	bl	80137be <f_lseek>
	f_read(&Config, NResetChar, 3, &br);
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <SD_ConfigFileInit+0xc8>)
 8002840:	2203      	movs	r2, #3
 8002842:	4916      	ldr	r1, [pc, #88]	@ (800289c <SD_ConfigFileInit+0xd0>)
 8002844:	4812      	ldr	r0, [pc, #72]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 8002846:	f010 fbd5 	bl	8012ff4 <f_read>

	SystemConfig.ResetCounter = ASCII2uint8(NResetChar, 3) + 1;
 800284a:	2103      	movs	r1, #3
 800284c:	4813      	ldr	r0, [pc, #76]	@ (800289c <SD_ConfigFileInit+0xd0>)
 800284e:	f7ff ff15 	bl	800267c <ASCII2uint8>
 8002852:	4603      	mov	r3, r0
 8002854:	3301      	adds	r3, #1
 8002856:	b2da      	uxtb	r2, r3
 8002858:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <SD_ConfigFileInit+0xcc>)
 800285a:	715a      	strb	r2, [r3, #5]
	uint82ASCII(SystemConfig.ResetCounter, NResetChar);
 800285c:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <SD_ConfigFileInit+0xcc>)
 800285e:	795b      	ldrb	r3, [r3, #5]
 8002860:	490e      	ldr	r1, [pc, #56]	@ (800289c <SD_ConfigFileInit+0xd0>)
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff ff32 	bl	80026cc <uint82ASCII>

	f_lseek(&Config, 26);
 8002868:	211a      	movs	r1, #26
 800286a:	4809      	ldr	r0, [pc, #36]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 800286c:	f010 ffa7 	bl	80137be <f_lseek>
	f_write(&Config, NResetChar, 3, &bw);
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <SD_ConfigFileInit+0xd4>)
 8002872:	2203      	movs	r2, #3
 8002874:	4909      	ldr	r1, [pc, #36]	@ (800289c <SD_ConfigFileInit+0xd0>)
 8002876:	4806      	ldr	r0, [pc, #24]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 8002878:	f010 fd1b 	bl	80132b2 <f_write>

	f_close(&Config);
 800287c:	4804      	ldr	r0, [pc, #16]	@ (8002890 <SD_ConfigFileInit+0xc4>)
 800287e:	f010 ff2a 	bl	80136d6 <f_close>

}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	240000b0 	.word	0x240000b0
 8002890:	240023c4 	.word	0x240023c4
 8002894:	240033f8 	.word	0x240033f8
 8002898:	24000090 	.word	0x24000090
 800289c:	240000bc 	.word	0x240000bc
 80028a0:	240033fc 	.word	0x240033fc

080028a4 <SD_GainsInit>:

void SD_GainsInit(void){
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0

}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SD_CreateFlightPath>:

void SD_CreateFlightPath(void){
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	FlightPaht[6] = NResetChar[0];
 80028b8:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <SD_CreateFlightPath+0x2c>)
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <SD_CreateFlightPath+0x30>)
 80028be:	719a      	strb	r2, [r3, #6]
	FlightPaht[7] = NResetChar[1];
 80028c0:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <SD_CreateFlightPath+0x2c>)
 80028c2:	785a      	ldrb	r2, [r3, #1]
 80028c4:	4b07      	ldr	r3, [pc, #28]	@ (80028e4 <SD_CreateFlightPath+0x30>)
 80028c6:	71da      	strb	r2, [r3, #7]
	FlightPaht[8] = NResetChar[2];
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <SD_CreateFlightPath+0x2c>)
 80028ca:	789a      	ldrb	r2, [r3, #2]
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <SD_CreateFlightPath+0x30>)
 80028ce:	721a      	strb	r2, [r3, #8]

	f_mkdir(FlightPaht);
 80028d0:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <SD_CreateFlightPath+0x30>)
 80028d2:	f011 fa59 	bl	8013d88 <f_mkdir>
	f_chdir(FlightPaht);
 80028d6:	4803      	ldr	r0, [pc, #12]	@ (80028e4 <SD_CreateFlightPath+0x30>)
 80028d8:	f010 ff27 	bl	801372a <f_chdir>
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	240000bc 	.word	0x240000bc
 80028e4:	24000098 	.word	0x24000098

080028e8 <SD_blackbox_init>:

void SD_blackbox_init(void){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80028ec:	2213      	movs	r2, #19
 80028ee:	490a      	ldr	r1, [pc, #40]	@ (8002918 <SD_blackbox_init+0x30>)
 80028f0:	480a      	ldr	r0, [pc, #40]	@ (800291c <SD_blackbox_init+0x34>)
 80028f2:	f010 f9b7 	bl	8012c64 <f_open>
	f_printf(&BlackBox,"Nmsg,Time,Ax,Ay,Az,Gx,Gy,Gz,Roll,Pitch,Heading,Alt,Lat,Lon,ARSP,Pressure,SBUS_Flags,FlightMode,");
 80028f6:	490a      	ldr	r1, [pc, #40]	@ (8002920 <SD_blackbox_init+0x38>)
 80028f8:	4808      	ldr	r0, [pc, #32]	@ (800291c <SD_blackbox_init+0x34>)
 80028fa:	f011 fbd7 	bl	80140ac <f_printf>
	f_printf(&BlackBox,"PWM1,PWM2,PWM3,PWM4,PWM5,PWM6,PWM7,PWM8,PWM9,PWM10,PWM11,PWM12,PWM13,PWM14,PWM15,PWM16,INT1,INT2,");
 80028fe:	4909      	ldr	r1, [pc, #36]	@ (8002924 <SD_blackbox_init+0x3c>)
 8002900:	4806      	ldr	r0, [pc, #24]	@ (800291c <SD_blackbox_init+0x34>)
 8002902:	f011 fbd3 	bl	80140ac <f_printf>
	f_printf(&BlackBox,"OUT1,OUT2,OUT3,OUT4,OUT5,OUT6,OUT7,OUT8,OUT9,OUT10\n");
 8002906:	4908      	ldr	r1, [pc, #32]	@ (8002928 <SD_blackbox_init+0x40>)
 8002908:	4804      	ldr	r0, [pc, #16]	@ (800291c <SD_blackbox_init+0x34>)
 800290a:	f011 fbcf 	bl	80140ac <f_printf>
	f_sync(&BlackBox);
 800290e:	4803      	ldr	r0, [pc, #12]	@ (800291c <SD_blackbox_init+0x34>)
 8002910:	f010 fe63 	bl	80135da <f_sync>

}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	240000a4 	.word	0x240000a4
 800291c:	24001394 	.word	0x24001394
 8002920:	08014a3c 	.word	0x08014a3c
 8002924:	08014a9c 	.word	0x08014a9c
 8002928:	08014b00 	.word	0x08014b00
 800292c:	00000000 	.word	0x00000000

08002930 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af04      	add	r7, sp, #16
	static uint32_t DataCount;
	static uint16_t WriteCount;

	f_printf(&BlackBox, "%d,%d,%d,%d,%d,",DataCount,TimeOn_Counter,(int32_t)(IMU.ACC.x*100),(int32_t)(IMU.ACC.y*100),(int32_t)(IMU.ACC.z*100));
 8002936:	4b96      	ldr	r3, [pc, #600]	@ (8002b90 <SD_blackbox_write+0x260>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b96      	ldr	r3, [pc, #600]	@ (8002b94 <SD_blackbox_write+0x264>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4996      	ldr	r1, [pc, #600]	@ (8002b98 <SD_blackbox_write+0x268>)
 8002940:	ed91 7b04 	vldr	d7, [r1, #16]
 8002944:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8002b88 <SD_blackbox_write+0x258>
 8002948:	ee27 7b06 	vmul.f64	d7, d7, d6
 800294c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002950:	ee17 0a90 	vmov	r0, s15
 8002954:	4990      	ldr	r1, [pc, #576]	@ (8002b98 <SD_blackbox_write+0x268>)
 8002956:	ed91 7b06 	vldr	d7, [r1, #24]
 800295a:	ed9f 6b8b 	vldr	d6, [pc, #556]	@ 8002b88 <SD_blackbox_write+0x258>
 800295e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002962:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002966:	ee17 4a90 	vmov	r4, s15
 800296a:	498b      	ldr	r1, [pc, #556]	@ (8002b98 <SD_blackbox_write+0x268>)
 800296c:	ed91 7b08 	vldr	d7, [r1, #32]
 8002970:	ed9f 6b85 	vldr	d6, [pc, #532]	@ 8002b88 <SD_blackbox_write+0x258>
 8002974:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002978:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800297c:	ee17 1a90 	vmov	r1, s15
 8002980:	9102      	str	r1, [sp, #8]
 8002982:	9401      	str	r4, [sp, #4]
 8002984:	9000      	str	r0, [sp, #0]
 8002986:	4985      	ldr	r1, [pc, #532]	@ (8002b9c <SD_blackbox_write+0x26c>)
 8002988:	4885      	ldr	r0, [pc, #532]	@ (8002ba0 <SD_blackbox_write+0x270>)
 800298a:	f011 fb8f 	bl	80140ac <f_printf>
	f_printf(&BlackBox, "%d,%d,%d,%d,%d,%d,",(int32_t)(IMU.GYR.x*100),(int32_t)(IMU.GYR.y*100),(int32_t)(IMU.GYR.z*100),(int32_t)(IMU.Roll*100),(int32_t)(IMU.Pitch*100),(int32_t)(IMU.Heading*100));
 800298e:	4b82      	ldr	r3, [pc, #520]	@ (8002b98 <SD_blackbox_write+0x268>)
 8002990:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8002994:	ed9f 6b7c 	vldr	d6, [pc, #496]	@ 8002b88 <SD_blackbox_write+0x258>
 8002998:	ee27 7b06 	vmul.f64	d7, d7, d6
 800299c:	eefd 5bc7 	vcvt.s32.f64	s11, d7
 80029a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002b98 <SD_blackbox_write+0x268>)
 80029a2:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 80029a6:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8002b88 <SD_blackbox_write+0x258>
 80029aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029ae:	eebd 5bc7 	vcvt.s32.f64	s10, d7
 80029b2:	4b79      	ldr	r3, [pc, #484]	@ (8002b98 <SD_blackbox_write+0x268>)
 80029b4:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 80029b8:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8002b88 <SD_blackbox_write+0x258>
 80029bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029c0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80029c4:	ee17 2a90 	vmov	r2, s15
 80029c8:	4b73      	ldr	r3, [pc, #460]	@ (8002b98 <SD_blackbox_write+0x268>)
 80029ca:	ed93 7b1e 	vldr	d7, [r3, #120]	@ 0x78
 80029ce:	ed9f 6b6e 	vldr	d6, [pc, #440]	@ 8002b88 <SD_blackbox_write+0x258>
 80029d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80029da:	ee17 1a90 	vmov	r1, s15
 80029de:	4b6e      	ldr	r3, [pc, #440]	@ (8002b98 <SD_blackbox_write+0x268>)
 80029e0:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80029e4:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8002b88 <SD_blackbox_write+0x258>
 80029e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80029f0:	ee17 0a90 	vmov	r0, s15
 80029f4:	4b68      	ldr	r3, [pc, #416]	@ (8002b98 <SD_blackbox_write+0x268>)
 80029f6:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 80029fa:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 8002b88 <SD_blackbox_write+0x258>
 80029fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a02:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002a06:	ee17 3a90 	vmov	r3, s15
 8002a0a:	9303      	str	r3, [sp, #12]
 8002a0c:	9002      	str	r0, [sp, #8]
 8002a0e:	9101      	str	r1, [sp, #4]
 8002a10:	9200      	str	r2, [sp, #0]
 8002a12:	ee15 3a10 	vmov	r3, s10
 8002a16:	ee15 2a90 	vmov	r2, s11
 8002a1a:	4962      	ldr	r1, [pc, #392]	@ (8002ba4 <SD_blackbox_write+0x274>)
 8002a1c:	4860      	ldr	r0, [pc, #384]	@ (8002ba0 <SD_blackbox_write+0x270>)
 8002a1e:	f011 fb45 	bl	80140ac <f_printf>
	f_printf(&BlackBox, "%d,NA,NA,NA,%d,%d,NA,",BMP280.Barometric_Altitude,BMP280.Pressure,Radio_input.Banderas);
 8002a22:	4b61      	ldr	r3, [pc, #388]	@ (8002ba8 <SD_blackbox_write+0x278>)
 8002a24:	8a1b      	ldrh	r3, [r3, #16]
 8002a26:	4619      	mov	r1, r3
 8002a28:	4b5f      	ldr	r3, [pc, #380]	@ (8002ba8 <SD_blackbox_write+0x278>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a5f      	ldr	r2, [pc, #380]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a2e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a32:	9200      	str	r2, [sp, #0]
 8002a34:	460a      	mov	r2, r1
 8002a36:	495e      	ldr	r1, [pc, #376]	@ (8002bb0 <SD_blackbox_write+0x280>)
 8002a38:	4859      	ldr	r0, [pc, #356]	@ (8002ba0 <SD_blackbox_write+0x270>)
 8002a3a:	f011 fb37 	bl	80140ac <f_printf>
	f_printf(&BlackBox, "%d,%d,%d,%d,",Radio_input.Canal_1,Radio_input.Canal_2,Radio_input.Canal_3,Radio_input.Canal_4);
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	4619      	mov	r1, r3
 8002a44:	4b59      	ldr	r3, [pc, #356]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a46:	885b      	ldrh	r3, [r3, #2]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	4b58      	ldr	r3, [pc, #352]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a4c:	889b      	ldrh	r3, [r3, #4]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4b56      	ldr	r3, [pc, #344]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a52:	88db      	ldrh	r3, [r3, #6]
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	9200      	str	r2, [sp, #0]
 8002a58:	4603      	mov	r3, r0
 8002a5a:	460a      	mov	r2, r1
 8002a5c:	4955      	ldr	r1, [pc, #340]	@ (8002bb4 <SD_blackbox_write+0x284>)
 8002a5e:	4850      	ldr	r0, [pc, #320]	@ (8002ba0 <SD_blackbox_write+0x270>)
 8002a60:	f011 fb24 	bl	80140ac <f_printf>
	f_printf(&BlackBox, "%d,%d,%d,%d,",Radio_input.Canal_5,Radio_input.Canal_6,Radio_input.Canal_7,Radio_input.Canal_8);
 8002a64:	4b51      	ldr	r3, [pc, #324]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a66:	891b      	ldrh	r3, [r3, #8]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4b50      	ldr	r3, [pc, #320]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a6c:	895b      	ldrh	r3, [r3, #10]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	4b4e      	ldr	r3, [pc, #312]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a72:	899b      	ldrh	r3, [r3, #12]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b4d      	ldr	r3, [pc, #308]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a78:	89db      	ldrh	r3, [r3, #14]
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	9200      	str	r2, [sp, #0]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	460a      	mov	r2, r1
 8002a82:	494c      	ldr	r1, [pc, #304]	@ (8002bb4 <SD_blackbox_write+0x284>)
 8002a84:	4846      	ldr	r0, [pc, #280]	@ (8002ba0 <SD_blackbox_write+0x270>)
 8002a86:	f011 fb11 	bl	80140ac <f_printf>
	f_printf(&BlackBox, "%d,%d,%d,%d,",Radio_input.Canal_9,Radio_input.Canal_10,Radio_input.Canal_11,Radio_input.Canal_12);
 8002a8a:	4b48      	ldr	r3, [pc, #288]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a8c:	8a1b      	ldrh	r3, [r3, #16]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4b46      	ldr	r3, [pc, #280]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a92:	8a5b      	ldrh	r3, [r3, #18]
 8002a94:	4618      	mov	r0, r3
 8002a96:	4b45      	ldr	r3, [pc, #276]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a98:	8a9b      	ldrh	r3, [r3, #20]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b43      	ldr	r3, [pc, #268]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002a9e:	8adb      	ldrh	r3, [r3, #22]
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	9200      	str	r2, [sp, #0]
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	460a      	mov	r2, r1
 8002aa8:	4942      	ldr	r1, [pc, #264]	@ (8002bb4 <SD_blackbox_write+0x284>)
 8002aaa:	483d      	ldr	r0, [pc, #244]	@ (8002ba0 <SD_blackbox_write+0x270>)
 8002aac:	f011 fafe 	bl	80140ac <f_printf>
	f_printf(&BlackBox, "%d,%d,%d,%d,",Radio_input.Canal_13,Radio_input.Canal_14,Radio_input.Canal_15,Radio_input.Canal_16);
 8002ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002ab2:	8b1b      	ldrh	r3, [r3, #24]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002ab8:	8b5b      	ldrh	r3, [r3, #26]
 8002aba:	4618      	mov	r0, r3
 8002abc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002abe:	8b9b      	ldrh	r3, [r3, #28]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002ac4:	8bdb      	ldrh	r3, [r3, #30]
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	9200      	str	r2, [sp, #0]
 8002aca:	4603      	mov	r3, r0
 8002acc:	460a      	mov	r2, r1
 8002ace:	4939      	ldr	r1, [pc, #228]	@ (8002bb4 <SD_blackbox_write+0x284>)
 8002ad0:	4833      	ldr	r0, [pc, #204]	@ (8002ba0 <SD_blackbox_write+0x270>)
 8002ad2:	f011 faeb 	bl	80140ac <f_printf>
	f_printf(&BlackBox, "%d,%d,%d,%d,",Radio_input.Interruptor_1,Radio_input.Interruptor_2,PWM_Output.Canal_1,PWM_Output.Canal_2);
 8002ad6:	4b35      	ldr	r3, [pc, #212]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002ad8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002adc:	4619      	mov	r1, r3
 8002ade:	4b33      	ldr	r3, [pc, #204]	@ (8002bac <SD_blackbox_write+0x27c>)
 8002ae0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	4b34      	ldr	r3, [pc, #208]	@ (8002bb8 <SD_blackbox_write+0x288>)
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b32      	ldr	r3, [pc, #200]	@ (8002bb8 <SD_blackbox_write+0x288>)
 8002aee:	885b      	ldrh	r3, [r3, #2]
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	9200      	str	r2, [sp, #0]
 8002af4:	4603      	mov	r3, r0
 8002af6:	460a      	mov	r2, r1
 8002af8:	492e      	ldr	r1, [pc, #184]	@ (8002bb4 <SD_blackbox_write+0x284>)
 8002afa:	4829      	ldr	r0, [pc, #164]	@ (8002ba0 <SD_blackbox_write+0x270>)
 8002afc:	f011 fad6 	bl	80140ac <f_printf>
	f_printf(&BlackBox, "%d,%d,%d,%d,",PWM_Output.Canal_3,PWM_Output.Canal_4,PWM_Output.Canal_5,PWM_Output.Canal_6);
 8002b00:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <SD_blackbox_write+0x288>)
 8002b02:	889b      	ldrh	r3, [r3, #4]
 8002b04:	4619      	mov	r1, r3
 8002b06:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb8 <SD_blackbox_write+0x288>)
 8002b08:	88db      	ldrh	r3, [r3, #6]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <SD_blackbox_write+0x288>)
 8002b0e:	891b      	ldrh	r3, [r3, #8]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b29      	ldr	r3, [pc, #164]	@ (8002bb8 <SD_blackbox_write+0x288>)
 8002b14:	895b      	ldrh	r3, [r3, #10]
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	9200      	str	r2, [sp, #0]
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	460a      	mov	r2, r1
 8002b1e:	4925      	ldr	r1, [pc, #148]	@ (8002bb4 <SD_blackbox_write+0x284>)
 8002b20:	481f      	ldr	r0, [pc, #124]	@ (8002ba0 <SD_blackbox_write+0x270>)
 8002b22:	f011 fac3 	bl	80140ac <f_printf>
	f_printf(&BlackBox, "%d,%d,%d,%d\n",PWM_Output.Canal_7,PWM_Output.Canal_8,PWM_Output.Canal_9,PWM_Output.Canal_10);
 8002b26:	4b24      	ldr	r3, [pc, #144]	@ (8002bb8 <SD_blackbox_write+0x288>)
 8002b28:	899b      	ldrh	r3, [r3, #12]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4b22      	ldr	r3, [pc, #136]	@ (8002bb8 <SD_blackbox_write+0x288>)
 8002b2e:	89db      	ldrh	r3, [r3, #14]
 8002b30:	4618      	mov	r0, r3
 8002b32:	4b21      	ldr	r3, [pc, #132]	@ (8002bb8 <SD_blackbox_write+0x288>)
 8002b34:	8a1b      	ldrh	r3, [r3, #16]
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb8 <SD_blackbox_write+0x288>)
 8002b3a:	8a5b      	ldrh	r3, [r3, #18]
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	9200      	str	r2, [sp, #0]
 8002b40:	4603      	mov	r3, r0
 8002b42:	460a      	mov	r2, r1
 8002b44:	491d      	ldr	r1, [pc, #116]	@ (8002bbc <SD_blackbox_write+0x28c>)
 8002b46:	4816      	ldr	r0, [pc, #88]	@ (8002ba0 <SD_blackbox_write+0x270>)
 8002b48:	f011 fab0 	bl	80140ac <f_printf>

	if(WriteCount > 100){
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc0 <SD_blackbox_write+0x290>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	2b64      	cmp	r3, #100	@ 0x64
 8002b52:	d909      	bls.n	8002b68 <SD_blackbox_write+0x238>
		fresult = f_sync(&BlackBox);
 8002b54:	4812      	ldr	r0, [pc, #72]	@ (8002ba0 <SD_blackbox_write+0x270>)
 8002b56:	f010 fd40 	bl	80135da <f_sync>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <SD_blackbox_write+0x294>)
 8002b60:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 8002b62:	4b17      	ldr	r3, [pc, #92]	@ (8002bc0 <SD_blackbox_write+0x290>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	801a      	strh	r2, [r3, #0]
	}

	++WriteCount;
 8002b68:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <SD_blackbox_write+0x290>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	4b13      	ldr	r3, [pc, #76]	@ (8002bc0 <SD_blackbox_write+0x290>)
 8002b72:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <SD_blackbox_write+0x260>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	4a05      	ldr	r2, [pc, #20]	@ (8002b90 <SD_blackbox_write+0x260>)
 8002b7c:	6013      	str	r3, [r2, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	3704      	adds	r7, #4
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd90      	pop	{r4, r7, pc}
 8002b86:	bf00      	nop
 8002b88:	00000000 	.word	0x00000000
 8002b8c:	40590000 	.word	0x40590000
 8002b90:	24003400 	.word	0x24003400
 8002b94:	240034fc 	.word	0x240034fc
 8002b98:	24000298 	.word	0x24000298
 8002b9c:	08014b34 	.word	0x08014b34
 8002ba0:	24001394 	.word	0x24001394
 8002ba4:	08014b44 	.word	0x08014b44
 8002ba8:	24000154 	.word	0x24000154
 8002bac:	24000068 	.word	0x24000068
 8002bb0:	08014b58 	.word	0x08014b58
 8002bb4:	08014b70 	.word	0x08014b70
 8002bb8:	24000054 	.word	0x24000054
 8002bbc:	08014b80 	.word	0x08014b80
 8002bc0:	24003404 	.word	0x24003404
 8002bc4:	240033f4 	.word	0x240033f4

08002bc8 <SD_init>:


void SD_init(void){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4909      	ldr	r1, [pc, #36]	@ (8002bf4 <SD_init+0x2c>)
 8002bd0:	4809      	ldr	r0, [pc, #36]	@ (8002bf8 <SD_init+0x30>)
 8002bd2:	f010 f801 	bl	8012bd8 <f_mount>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <SD_init+0x34>)
 8002bdc:	701a      	strb	r2, [r3, #0]
	  SD_ConfigFileInit();
 8002bde:	f7ff fdf5 	bl	80027cc <SD_ConfigFileInit>
	  SD_GainsInit();
 8002be2:	f7ff fe5f 	bl	80028a4 <SD_GainsInit>
	  SD_CreateFlightPath();
 8002be6:	f7ff fe65 	bl	80028b4 <SD_CreateFlightPath>
	  SD_blackbox_init();
 8002bea:	f7ff fe7d 	bl	80028e8 <SD_blackbox_init>
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	08014b90 	.word	0x08014b90
 8002bf8:	24000358 	.word	0x24000358
 8002bfc:	240033f4 	.word	0x240033f4

08002c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c06:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <MX_DMA_Init+0x4c>)
 8002c08:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002c0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c4c <MX_DMA_Init+0x4c>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8002c16:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <MX_DMA_Init+0x4c>)
 8002c18:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2100      	movs	r1, #0
 8002c28:	200b      	movs	r0, #11
 8002c2a:	f001 fe2e 	bl	800488a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c2e:	200b      	movs	r0, #11
 8002c30:	f001 fe45 	bl	80048be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2100      	movs	r1, #0
 8002c38:	200c      	movs	r0, #12
 8002c3a:	f001 fe26 	bl	800488a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c3e:	200c      	movs	r0, #12
 8002c40:	f001 fe3d 	bl	80048be <HAL_NVIC_EnableIRQ>

}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	58024400 	.word	0x58024400

08002c50 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002c54:	4b2e      	ldr	r3, [pc, #184]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c56:	4a2f      	ldr	r2, [pc, #188]	@ (8002d14 <MX_FDCAN1_Init+0xc4>)
 8002c58:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002c60:	4b2b      	ldr	r3, [pc, #172]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002c66:	4b2a      	ldr	r3, [pc, #168]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002c6c:	4b28      	ldr	r3, [pc, #160]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002c72:	4b27      	ldr	r3, [pc, #156]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002c78:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002c7e:	4b24      	ldr	r3, [pc, #144]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002c84:	4b22      	ldr	r3, [pc, #136]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c86:	2202      	movs	r2, #2
 8002c88:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002c8a:	4b21      	ldr	r3, [pc, #132]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002c90:	4b1f      	ldr	r3, [pc, #124]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002c96:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8002cae:	4b18      	ldr	r3, [pc, #96]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002cb4:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8002cba:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002cc0:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8002cc6:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002ccc:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cce:	2204      	movs	r2, #4
 8002cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cda:	2204      	movs	r2, #4
 8002cdc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8002cde:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8002cea:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002cf0:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002cfc:	4804      	ldr	r0, [pc, #16]	@ (8002d10 <MX_FDCAN1_Init+0xc0>)
 8002cfe:	f004 fd4f 	bl	80077a0 <HAL_FDCAN_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8002d08:	f000 fb46 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	24003408 	.word	0x24003408
 8002d14:	4000a000 	.word	0x4000a000

08002d18 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b0ba      	sub	sp, #232	@ 0xe8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	22c0      	movs	r2, #192	@ 0xc0
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f011 fcf7 	bl	801472c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2f      	ldr	r2, [pc, #188]	@ (8002e00 <HAL_FDCAN_MspInit+0xe8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d157      	bne.n	8002df8 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d48:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002d54:	2304      	movs	r3, #4
 8002d56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8002d58:	2308      	movs	r3, #8
 8002d5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8002d60:	2301      	movs	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002d64:	2302      	movs	r3, #2
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002d68:	23c0      	movs	r3, #192	@ 0xc0
 8002d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8002d74:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002d78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d7c:	f107 0310 	add.w	r3, r7, #16
 8002d80:	4618      	mov	r0, r3
 8002d82:	f006 fb67 	bl	8009454 <HAL_RCCEx_PeriphCLKConfig>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8002d8c:	f000 fb04 	bl	8003398 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002d90:	4b1c      	ldr	r3, [pc, #112]	@ (8002e04 <HAL_FDCAN_MspInit+0xec>)
 8002d92:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002d96:	4a1b      	ldr	r2, [pc, #108]	@ (8002e04 <HAL_FDCAN_MspInit+0xec>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8002da0:	4b18      	ldr	r3, [pc, #96]	@ (8002e04 <HAL_FDCAN_MspInit+0xec>)
 8002da2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <HAL_FDCAN_MspInit+0xec>)
 8002db0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002db4:	4a13      	ldr	r2, [pc, #76]	@ (8002e04 <HAL_FDCAN_MspInit+0xec>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002dbe:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <HAL_FDCAN_MspInit+0xec>)
 8002dc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002dcc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002de6:	2309      	movs	r3, #9
 8002de8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4805      	ldr	r0, [pc, #20]	@ (8002e08 <HAL_FDCAN_MspInit+0xf0>)
 8002df4:	f005 f838 	bl	8007e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002df8:	bf00      	nop
 8002dfa:	37e8      	adds	r7, #232	@ 0xe8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	4000a000 	.word	0x4000a000
 8002e04:	58024400 	.word	0x58024400
 8002e08:	58020000 	.word	0x58020000

08002e0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	@ 0x28
 8002e10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e12:	f107 0314 	add.w	r3, r7, #20
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e22:	4b4e      	ldr	r3, [pc, #312]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e28:	4a4c      	ldr	r2, [pc, #304]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e32:	4b4a      	ldr	r3, [pc, #296]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e40:	4b46      	ldr	r3, [pc, #280]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e46:	4a45      	ldr	r2, [pc, #276]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e50:	4b42      	ldr	r3, [pc, #264]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e64:	4a3d      	ldr	r2, [pc, #244]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e7c:	4b37      	ldr	r3, [pc, #220]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e82:	4a36      	ldr	r2, [pc, #216]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e84:	f043 0308 	orr.w	r3, r3, #8
 8002e88:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002e8c:	4b33      	ldr	r3, [pc, #204]	@ (8002f5c <MX_GPIO_Init+0x150>)
 8002e8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f242 010f 	movw	r1, #8207	@ 0x200f
 8002ea0:	482f      	ldr	r0, [pc, #188]	@ (8002f60 <MX_GPIO_Init+0x154>)
 8002ea2:	f005 f991 	bl	80081c8 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2110      	movs	r1, #16
 8002eaa:	482e      	ldr	r0, [pc, #184]	@ (8002f64 <MX_GPIO_Init+0x158>)
 8002eac:	f005 f98c 	bl	80081c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8002eb6:	482c      	ldr	r0, [pc, #176]	@ (8002f68 <MX_GPIO_Init+0x15c>)
 8002eb8:	f005 f986 	bl	80081c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2104      	movs	r1, #4
 8002ec0:	482a      	ldr	r0, [pc, #168]	@ (8002f6c <MX_GPIO_Init+0x160>)
 8002ec2:	f005 f981 	bl	80081c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8002ec6:	f242 030f 	movw	r3, #8207	@ 0x200f
 8002eca:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	4820      	ldr	r0, [pc, #128]	@ (8002f60 <MX_GPIO_Init+0x154>)
 8002ee0:	f004 ffc2 	bl	8007e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	4619      	mov	r1, r3
 8002efa:	481a      	ldr	r0, [pc, #104]	@ (8002f64 <MX_GPIO_Init+0x158>)
 8002efc:	f004 ffb4 	bl	8007e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8002f00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f06:	2301      	movs	r3, #1
 8002f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f12:	f107 0314 	add.w	r3, r7, #20
 8002f16:	4619      	mov	r1, r3
 8002f18:	4813      	ldr	r0, [pc, #76]	@ (8002f68 <MX_GPIO_Init+0x15c>)
 8002f1a:	f004 ffa5 	bl	8007e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8002f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	4619      	mov	r1, r3
 8002f32:	480b      	ldr	r0, [pc, #44]	@ (8002f60 <MX_GPIO_Init+0x154>)
 8002f34:	f004 ff98 	bl	8007e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8002f38:	2304      	movs	r3, #4
 8002f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4807      	ldr	r0, [pc, #28]	@ (8002f6c <MX_GPIO_Init+0x160>)
 8002f50:	f004 ff8a 	bl	8007e68 <HAL_GPIO_Init>

}
 8002f54:	bf00      	nop
 8002f56:	3728      	adds	r7, #40	@ 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	58020800 	.word	0x58020800
 8002f64:	58020000 	.word	0x58020000
 8002f68:	58020400 	.word	0x58020400
 8002f6c:	58020c00 	.word	0x58020c00

08002f70 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002f76:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <MX_I2C3_Init+0x78>)
 8002f78:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fec <MX_I2C3_Init+0x7c>)
 8002f7e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002f80:	4b18      	ldr	r3, [pc, #96]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f86:	4b17      	ldr	r3, [pc, #92]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f8c:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002f92:	4b14      	ldr	r3, [pc, #80]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f98:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f9e:	4b11      	ldr	r3, [pc, #68]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002faa:	480e      	ldr	r0, [pc, #56]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002fac:	f005 f926 	bl	80081fc <HAL_I2C_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002fb6:	f000 f9ef 	bl	8003398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4809      	ldr	r0, [pc, #36]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002fbe:	f005 f9b9 	bl	8008334 <HAL_I2CEx_ConfigAnalogFilter>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002fc8:	f000 f9e6 	bl	8003398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4805      	ldr	r0, [pc, #20]	@ (8002fe4 <MX_I2C3_Init+0x74>)
 8002fd0:	f005 f9fb 	bl	80083ca <HAL_I2CEx_ConfigDigitalFilter>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002fda:	f000 f9dd 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	240034a8 	.word	0x240034a8
 8002fe8:	40005c00 	.word	0x40005c00
 8002fec:	20b0ccff 	.word	0x20b0ccff

08002ff0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b0bc      	sub	sp, #240	@ 0xf0
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003008:	f107 0318 	add.w	r3, r7, #24
 800300c:	22c0      	movs	r2, #192	@ 0xc0
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f011 fb8b 	bl	801472c <memset>
  if(i2cHandle->Instance==I2C3)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a39      	ldr	r2, [pc, #228]	@ (8003100 <HAL_I2C_MspInit+0x110>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d16b      	bne.n	80030f8 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003020:	f04f 0208 	mov.w	r2, #8
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800302c:	2300      	movs	r3, #0
 800302e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003032:	f107 0318 	add.w	r3, r7, #24
 8003036:	4618      	mov	r0, r3
 8003038:	f006 fa0c 	bl	8009454 <HAL_RCCEx_PeriphCLKConfig>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003042:	f000 f9a9 	bl	8003398 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003046:	4b2f      	ldr	r3, [pc, #188]	@ (8003104 <HAL_I2C_MspInit+0x114>)
 8003048:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800304c:	4a2d      	ldr	r2, [pc, #180]	@ (8003104 <HAL_I2C_MspInit+0x114>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003056:	4b2b      	ldr	r3, [pc, #172]	@ (8003104 <HAL_I2C_MspInit+0x114>)
 8003058:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003064:	4b27      	ldr	r3, [pc, #156]	@ (8003104 <HAL_I2C_MspInit+0x114>)
 8003066:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800306a:	4a26      	ldr	r2, [pc, #152]	@ (8003104 <HAL_I2C_MspInit+0x114>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003074:	4b23      	ldr	r3, [pc, #140]	@ (8003104 <HAL_I2C_MspInit+0x114>)
 8003076:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800308a:	2312      	movs	r3, #18
 800308c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800309c:	2304      	movs	r3, #4
 800309e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030a6:	4619      	mov	r1, r3
 80030a8:	4817      	ldr	r0, [pc, #92]	@ (8003108 <HAL_I2C_MspInit+0x118>)
 80030aa:	f004 fedd 	bl	8007e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030b6:	2312      	movs	r3, #18
 80030b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030c8:	2304      	movs	r3, #4
 80030ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030d2:	4619      	mov	r1, r3
 80030d4:	480d      	ldr	r0, [pc, #52]	@ (800310c <HAL_I2C_MspInit+0x11c>)
 80030d6:	f004 fec7 	bl	8007e68 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80030da:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <HAL_I2C_MspInit+0x114>)
 80030dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80030e0:	4a08      	ldr	r2, [pc, #32]	@ (8003104 <HAL_I2C_MspInit+0x114>)
 80030e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030e6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_I2C_MspInit+0x114>)
 80030ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80030f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80030f8:	bf00      	nop
 80030fa:	37f0      	adds	r7, #240	@ 0xf0
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40005c00 	.word	0x40005c00
 8003104:	58024400 	.word	0x58024400
 8003108:	58020800 	.word	0x58020800
 800310c:	58020000 	.word	0x58020000

08003110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003114:	f000 f914 	bl	8003340 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003118:	f001 fa4a 	bl	80045b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800311c:	f000 f83c 	bl	8003198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003120:	f7ff fe74 	bl	8002e0c <MX_GPIO_Init>
  MX_DMA_Init();
 8003124:	f7ff fd6c 	bl	8002c00 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003128:	f7ff fd92 	bl	8002c50 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 800312c:	f7ff ff20 	bl	8002f70 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003130:	f000 f938 	bl	80033a4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003134:	f000 f98c 	bl	8003450 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003138:	f000 fbae 	bl	8003898 <MX_TIM2_Init>
  MX_TIM3_Init();
 800313c:	f000 fc28 	bl	8003990 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003140:	f000 fc8c 	bl	8003a5c <MX_TIM4_Init>
  MX_UART4_Init();
 8003144:	f000 fef0 	bl	8003f28 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8003148:	f000 ff3a 	bl	8003fc0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800314c:	f000 ffd4 	bl	80040f8 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8003150:	f000 fd70 	bl	8003c34 <MX_TIM13_Init>
  MX_FATFS_Init();
 8003154:	f00c fc70 	bl	800fa38 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003158:	f000 fcfc 	bl	8003b54 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800315c:	f000 ff80 	bl	8004060 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8003160:	f000 fd30 	bl	8003bc4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8003164:	f7fd ff54 	bl	8001010 <BMP280_init>
  SD_init();
 8003168:	f7ff fd2e 	bl	8002bc8 <SD_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800316c:	2201      	movs	r2, #1
 800316e:	4906      	ldr	r1, [pc, #24]	@ (8003188 <main+0x78>)
 8003170:	4806      	ldr	r0, [pc, #24]	@ (800318c <main+0x7c>)
 8003172:	f00a fa9b 	bl	800d6ac <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 8003176:	4806      	ldr	r0, [pc, #24]	@ (8003190 <main+0x80>)
 8003178:	f009 f94a 	bl	800c410 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800317c:	4805      	ldr	r0, [pc, #20]	@ (8003194 <main+0x84>)
 800317e:	f009 f947 	bl	800c410 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003182:	bf00      	nop
 8003184:	e7fd      	b.n	8003182 <main+0x72>
 8003186:	bf00      	nop
 8003188:	2400028b 	.word	0x2400028b
 800318c:	24003900 	.word	0x24003900
 8003190:	240036f4 	.word	0x240036f4
 8003194:	24003740 	.word	0x24003740

08003198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b09c      	sub	sp, #112	@ 0x70
 800319c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800319e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031a2:	224c      	movs	r2, #76	@ 0x4c
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f011 fac0 	bl	801472c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	2220      	movs	r2, #32
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f011 faba 	bl	801472c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80031b8:	4b30      	ldr	r3, [pc, #192]	@ (800327c <SystemClock_Config+0xe4>)
 80031ba:	f04f 32ff 	mov.w	r2, #4294967295
 80031be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80031c2:	2002      	movs	r0, #2
 80031c4:	f005 f94e 	bl	8008464 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80031c8:	2300      	movs	r3, #0
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003280 <SystemClock_Config+0xe8>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003280 <SystemClock_Config+0xe8>)
 80031d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031d6:	6193      	str	r3, [r2, #24]
 80031d8:	4b29      	ldr	r3, [pc, #164]	@ (8003280 <SystemClock_Config+0xe8>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80031e4:	bf00      	nop
 80031e6:	4b26      	ldr	r3, [pc, #152]	@ (8003280 <SystemClock_Config+0xe8>)
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031f2:	d1f8      	bne.n	80031e6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031f4:	2302      	movs	r3, #2
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80031fc:	2340      	movs	r3, #64	@ 0x40
 80031fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003200:	2302      	movs	r3, #2
 8003202:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003204:	2300      	movs	r3, #0
 8003206:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003208:	2304      	movs	r3, #4
 800320a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 800320c:	2323      	movs	r3, #35	@ 0x23
 800320e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003210:	2302      	movs	r3, #2
 8003212:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003214:	2302      	movs	r3, #2
 8003216:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003218:	2302      	movs	r3, #2
 800321a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800321c:	230c      	movs	r3, #12
 800321e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003220:	2300      	movs	r3, #0
 8003222:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800322c:	4618      	mov	r0, r3
 800322e:	f005 f953 	bl	80084d8 <HAL_RCC_OscConfig>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003238:	f000 f8ae 	bl	8003398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800323c:	233f      	movs	r3, #63	@ 0x3f
 800323e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003240:	2303      	movs	r3, #3
 8003242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800324c:	2340      	movs	r3, #64	@ 0x40
 800324e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003250:	2340      	movs	r3, #64	@ 0x40
 8003252:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003258:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800325a:	2340      	movs	r3, #64	@ 0x40
 800325c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	2106      	movs	r1, #6
 8003262:	4618      	mov	r0, r3
 8003264:	f005 fd6a 	bl	8008d3c <HAL_RCC_ClockConfig>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800326e:	f000 f893 	bl	8003398 <Error_Handler>
  }
}
 8003272:	bf00      	nop
 8003274:	3770      	adds	r7, #112	@ 0x70
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	58024400 	.word	0x58024400
 8003280:	58024800 	.word	0x58024800

08003284 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a10      	ldr	r2, [pc, #64]	@ (80032d4 <HAL_UART_RxCpltCallback+0x50>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10a      	bne.n	80032ac <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8003296:	4b10      	ldr	r3, [pc, #64]	@ (80032d8 <HAL_UART_RxCpltCallback+0x54>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe fdf8 	bl	8001e90 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 80032a0:	2201      	movs	r2, #1
 80032a2:	490d      	ldr	r1, [pc, #52]	@ (80032d8 <HAL_UART_RxCpltCallback+0x54>)
 80032a4:	480d      	ldr	r0, [pc, #52]	@ (80032dc <HAL_UART_RxCpltCallback+0x58>)
 80032a6:	f00a fa01 	bl	800d6ac <HAL_UART_Receive_DMA>
	}
    else if (huart -> Instance == USART3){
        BNO_Receive(BNO_BufferByte);
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
    }
}
 80032aa:	e00e      	b.n	80032ca <HAL_UART_RxCpltCallback+0x46>
    else if (huart -> Instance == USART3){
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0b      	ldr	r2, [pc, #44]	@ (80032e0 <HAL_UART_RxCpltCallback+0x5c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d109      	bne.n	80032ca <HAL_UART_RxCpltCallback+0x46>
        BNO_Receive(BNO_BufferByte);
 80032b6:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <HAL_UART_RxCpltCallback+0x60>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fbe2 	bl	8001a84 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80032c0:	2201      	movs	r2, #1
 80032c2:	4908      	ldr	r1, [pc, #32]	@ (80032e4 <HAL_UART_RxCpltCallback+0x60>)
 80032c4:	4808      	ldr	r0, [pc, #32]	@ (80032e8 <HAL_UART_RxCpltCallback+0x64>)
 80032c6:	f00a f9f1 	bl	800d6ac <HAL_UART_Receive_DMA>
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40011000 	.word	0x40011000
 80032d8:	24000355 	.word	0x24000355
 80032dc:	2400386c 	.word	0x2400386c
 80032e0:	40004800 	.word	0x40004800
 80032e4:	2400028b 	.word	0x2400028b
 80032e8:	24003900 	.word	0x24003900

080032ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003334 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d108      	bne.n	8003310 <HAL_TIM_PeriodElapsedCallback+0x24>
		TimeOn_Counter++;
 80032fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3301      	adds	r3, #1
 8003304:	4a0c      	ldr	r2, [pc, #48]	@ (8003338 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003306:	6013      	str	r3, [r2, #0]
		LED_Tasks();
 8003308:	f7fe fd10 	bl	8001d2c <LED_Tasks>
		SBUS_IntegrityVerification();
 800330c:	f7ff f992 	bl	8002634 <SBUS_IntegrityVerification>
	}
	//Interrupción cada 10 ms
	if (htim -> Instance == TIM7){
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a09      	ldr	r2, [pc, #36]	@ (800333c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d107      	bne.n	800332a <HAL_TIM_PeriodElapsedCallback+0x3e>
		BNO_Tasks();
 800331a:	f7fe fc43 	bl	8001ba4 <BNO_Tasks>
		BMP280_calculate();
 800331e:	f7fd fe9d 	bl	800105c <BMP280_calculate>

		PWM_Assing();
 8003322:	f7fe fd51 	bl	8001dc8 <PWM_Assing>
		SD_blackbox_write();
 8003326:	f7ff fb03 	bl	8002930 <SD_blackbox_write>
	}
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40001000 	.word	0x40001000
 8003338:	240034fc 	.word	0x240034fc
 800333c:	40001400 	.word	0x40001400

08003340 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003346:	463b      	mov	r3, r7
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003352:	f001 facf 	bl	80048f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003356:	2301      	movs	r3, #1
 8003358:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800335a:	2300      	movs	r3, #0
 800335c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003362:	231f      	movs	r3, #31
 8003364:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003366:	2387      	movs	r3, #135	@ 0x87
 8003368:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800336a:	2300      	movs	r3, #0
 800336c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800336e:	2300      	movs	r3, #0
 8003370:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003372:	2301      	movs	r3, #1
 8003374:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003376:	2301      	movs	r3, #1
 8003378:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003382:	463b      	mov	r3, r7
 8003384:	4618      	mov	r0, r3
 8003386:	f001 faed 	bl	8004964 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800338a:	2004      	movs	r0, #4
 800338c:	f001 faca 	bl	8004924 <HAL_MPU_Enable>

}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800339c:	b672      	cpsid	i
}
 800339e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <Error_Handler+0x8>

080033a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033a8:	4b27      	ldr	r3, [pc, #156]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033aa:	4a28      	ldr	r2, [pc, #160]	@ (800344c <MX_SPI1_Init+0xa8>)
 80033ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033ae:	4b26      	ldr	r3, [pc, #152]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80033b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033b6:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033bc:	4b22      	ldr	r3, [pc, #136]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033be:	2207      	movs	r2, #7
 80033c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033c2:	4b21      	ldr	r3, [pc, #132]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80033d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80033d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033d8:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80033dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033de:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033e4:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ea:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80033f0:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033f6:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <MX_SPI1_Init+0xa4>)
 80033f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80033fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80033fe:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <MX_SPI1_Init+0xa4>)
 8003400:	2200      	movs	r2, #0
 8003402:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003404:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <MX_SPI1_Init+0xa4>)
 8003406:	2200      	movs	r2, #0
 8003408:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800340a:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <MX_SPI1_Init+0xa4>)
 800340c:	2200      	movs	r2, #0
 800340e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003410:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <MX_SPI1_Init+0xa4>)
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003416:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <MX_SPI1_Init+0xa4>)
 8003418:	2200      	movs	r2, #0
 800341a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800341c:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <MX_SPI1_Init+0xa4>)
 800341e:	2200      	movs	r2, #0
 8003420:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003422:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <MX_SPI1_Init+0xa4>)
 8003424:	2200      	movs	r2, #0
 8003426:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003428:	4b07      	ldr	r3, [pc, #28]	@ (8003448 <MX_SPI1_Init+0xa4>)
 800342a:	2200      	movs	r2, #0
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800342e:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <MX_SPI1_Init+0xa4>)
 8003430:	2200      	movs	r2, #0
 8003432:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003434:	4804      	ldr	r0, [pc, #16]	@ (8003448 <MX_SPI1_Init+0xa4>)
 8003436:	f007 fded 	bl	800b014 <HAL_SPI_Init>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003440:	f7ff ffaa 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003444:	bf00      	nop
 8003446:	bd80      	pop	{r7, pc}
 8003448:	24003500 	.word	0x24003500
 800344c:	40013000 	.word	0x40013000

08003450 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003454:	4b27      	ldr	r3, [pc, #156]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 8003456:	4a28      	ldr	r2, [pc, #160]	@ (80034f8 <MX_SPI2_Init+0xa8>)
 8003458:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800345a:	4b26      	ldr	r3, [pc, #152]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 800345c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003460:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003462:	4b24      	ldr	r3, [pc, #144]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003468:	4b22      	ldr	r3, [pc, #136]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 800346a:	2207      	movs	r2, #7
 800346c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800346e:	4b21      	ldr	r3, [pc, #132]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003474:	4b1f      	ldr	r3, [pc, #124]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 8003476:	2200      	movs	r2, #0
 8003478:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800347a:	4b1e      	ldr	r3, [pc, #120]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 800347c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003480:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003482:	4b1c      	ldr	r3, [pc, #112]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 8003484:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8003488:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800348a:	4b1a      	ldr	r3, [pc, #104]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 800348c:	2200      	movs	r2, #0
 800348e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003490:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 8003492:	2200      	movs	r2, #0
 8003494:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003496:	4b17      	ldr	r3, [pc, #92]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 8003498:	2200      	movs	r2, #0
 800349a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800349c:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 800349e:	2200      	movs	r2, #0
 80034a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034a2:	4b14      	ldr	r3, [pc, #80]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 80034a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80034aa:	4b12      	ldr	r3, [pc, #72]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80034b0:	4b10      	ldr	r3, [pc, #64]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80034b6:	4b0f      	ldr	r3, [pc, #60]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80034bc:	4b0d      	ldr	r3, [pc, #52]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80034c2:	4b0c      	ldr	r3, [pc, #48]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80034c8:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80034ce:	4b09      	ldr	r3, [pc, #36]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80034d4:	4b07      	ldr	r3, [pc, #28]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80034da:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 80034dc:	2200      	movs	r2, #0
 80034de:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80034e0:	4804      	ldr	r0, [pc, #16]	@ (80034f4 <MX_SPI2_Init+0xa4>)
 80034e2:	f007 fd97 	bl	800b014 <HAL_SPI_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80034ec:	f7ff ff54 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	24003588 	.word	0x24003588
 80034f8:	40003800 	.word	0x40003800

080034fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b0bc      	sub	sp, #240	@ 0xf0
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003514:	f107 0318 	add.w	r3, r7, #24
 8003518:	22c0      	movs	r2, #192	@ 0xc0
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f011 f905 	bl	801472c <memset>
  if(spiHandle->Instance==SPI1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a4c      	ldr	r2, [pc, #304]	@ (8003658 <HAL_SPI_MspInit+0x15c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d145      	bne.n	80035b8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800352c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003538:	2300      	movs	r3, #0
 800353a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800353c:	f107 0318 	add.w	r3, r7, #24
 8003540:	4618      	mov	r0, r3
 8003542:	f005 ff87 	bl	8009454 <HAL_RCCEx_PeriphCLKConfig>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800354c:	f7ff ff24 	bl	8003398 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003550:	4b42      	ldr	r3, [pc, #264]	@ (800365c <HAL_SPI_MspInit+0x160>)
 8003552:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003556:	4a41      	ldr	r2, [pc, #260]	@ (800365c <HAL_SPI_MspInit+0x160>)
 8003558:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800355c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003560:	4b3e      	ldr	r3, [pc, #248]	@ (800365c <HAL_SPI_MspInit+0x160>)
 8003562:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <HAL_SPI_MspInit+0x160>)
 8003570:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003574:	4a39      	ldr	r2, [pc, #228]	@ (800365c <HAL_SPI_MspInit+0x160>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800357e:	4b37      	ldr	r3, [pc, #220]	@ (800365c <HAL_SPI_MspInit+0x160>)
 8003580:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800358c:	23e0      	movs	r3, #224	@ 0xe0
 800358e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035a4:	2305      	movs	r3, #5
 80035a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80035ae:	4619      	mov	r1, r3
 80035b0:	482b      	ldr	r0, [pc, #172]	@ (8003660 <HAL_SPI_MspInit+0x164>)
 80035b2:	f004 fc59 	bl	8007e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80035b6:	e04a      	b.n	800364e <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a29      	ldr	r2, [pc, #164]	@ (8003664 <HAL_SPI_MspInit+0x168>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d145      	bne.n	800364e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80035c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035d2:	f107 0318 	add.w	r3, r7, #24
 80035d6:	4618      	mov	r0, r3
 80035d8:	f005 ff3c 	bl	8009454 <HAL_RCCEx_PeriphCLKConfig>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80035e2:	f7ff fed9 	bl	8003398 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035e6:	4b1d      	ldr	r3, [pc, #116]	@ (800365c <HAL_SPI_MspInit+0x160>)
 80035e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80035ec:	4a1b      	ldr	r2, [pc, #108]	@ (800365c <HAL_SPI_MspInit+0x160>)
 80035ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035f2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80035f6:	4b19      	ldr	r3, [pc, #100]	@ (800365c <HAL_SPI_MspInit+0x160>)
 80035f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80035fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003604:	4b15      	ldr	r3, [pc, #84]	@ (800365c <HAL_SPI_MspInit+0x160>)
 8003606:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800360a:	4a14      	ldr	r2, [pc, #80]	@ (800365c <HAL_SPI_MspInit+0x160>)
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003614:	4b11      	ldr	r3, [pc, #68]	@ (800365c <HAL_SPI_MspInit+0x160>)
 8003616:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8003622:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003626:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800363c:	2305      	movs	r3, #5
 800363e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003642:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003646:	4619      	mov	r1, r3
 8003648:	4807      	ldr	r0, [pc, #28]	@ (8003668 <HAL_SPI_MspInit+0x16c>)
 800364a:	f004 fc0d 	bl	8007e68 <HAL_GPIO_Init>
}
 800364e:	bf00      	nop
 8003650:	37f0      	adds	r7, #240	@ 0xf0
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40013000 	.word	0x40013000
 800365c:	58024400 	.word	0x58024400
 8003660:	58020000 	.word	0x58020000
 8003664:	40003800 	.word	0x40003800
 8003668:	58020400 	.word	0x58020400

0800366c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003672:	4b0a      	ldr	r3, [pc, #40]	@ (800369c <HAL_MspInit+0x30>)
 8003674:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003678:	4a08      	ldr	r2, [pc, #32]	@ (800369c <HAL_MspInit+0x30>)
 800367a:	f043 0302 	orr.w	r3, r3, #2
 800367e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_MspInit+0x30>)
 8003684:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	58024400 	.word	0x58024400

080036a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036a4:	bf00      	nop
 80036a6:	e7fd      	b.n	80036a4 <NMI_Handler+0x4>

080036a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036ac:	bf00      	nop
 80036ae:	e7fd      	b.n	80036ac <HardFault_Handler+0x4>

080036b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036b4:	bf00      	nop
 80036b6:	e7fd      	b.n	80036b4 <MemManage_Handler+0x4>

080036b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036bc:	bf00      	nop
 80036be:	e7fd      	b.n	80036bc <BusFault_Handler+0x4>

080036c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036c4:	bf00      	nop
 80036c6:	e7fd      	b.n	80036c4 <UsageFault_Handler+0x4>

080036c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036d6:	b480      	push	{r7}
 80036d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 80036f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <SysTick_Handler+0x34>)
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <SysTick_Handler+0x18>
	    Timer1--;
 8003700:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <SysTick_Handler+0x34>)
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	4b07      	ldr	r3, [pc, #28]	@ (8003728 <SysTick_Handler+0x34>)
 800370a:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 800370c:	4b07      	ldr	r3, [pc, #28]	@ (800372c <SysTick_Handler+0x38>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <SysTick_Handler+0x2c>
	    Timer2--;
 8003714:	4b05      	ldr	r3, [pc, #20]	@ (800372c <SysTick_Handler+0x38>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	4b03      	ldr	r3, [pc, #12]	@ (800372c <SysTick_Handler+0x38>)
 800371e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003720:	f000 ffb8 	bl	8004694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}
 8003728:	24003b24 	.word	0x24003b24
 800372c:	24003b26 	.word	0x24003b26

08003730 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003734:	4802      	ldr	r0, [pc, #8]	@ (8003740 <DMA1_Stream0_IRQHandler+0x10>)
 8003736:	f002 fcb1 	bl	800609c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	24003a28 	.word	0x24003a28

08003744 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003748:	4802      	ldr	r0, [pc, #8]	@ (8003754 <DMA1_Stream1_IRQHandler+0x10>)
 800374a:	f002 fca7 	bl	800609c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	24003aa0 	.word	0x24003aa0

08003758 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800375c:	4802      	ldr	r0, [pc, #8]	@ (8003768 <USART1_IRQHandler+0x10>)
 800375e:	f00a f92d 	bl	800d9bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	2400386c 	.word	0x2400386c

0800376c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003770:	4802      	ldr	r0, [pc, #8]	@ (800377c <USART3_IRQHandler+0x10>)
 8003772:	f00a f923 	bl	800d9bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	24003900 	.word	0x24003900

08003780 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003784:	4802      	ldr	r0, [pc, #8]	@ (8003790 <TIM6_DAC_IRQHandler+0x10>)
 8003786:	f009 f821 	bl	800c7cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	240036f4 	.word	0x240036f4

08003794 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003798:	4802      	ldr	r0, [pc, #8]	@ (80037a4 <TIM7_IRQHandler+0x10>)
 800379a:	f009 f817 	bl	800c7cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	24003740 	.word	0x24003740

080037a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037ac:	4b32      	ldr	r3, [pc, #200]	@ (8003878 <SystemInit+0xd0>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b2:	4a31      	ldr	r2, [pc, #196]	@ (8003878 <SystemInit+0xd0>)
 80037b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037bc:	4b2f      	ldr	r3, [pc, #188]	@ (800387c <SystemInit+0xd4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d807      	bhi.n	80037d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037c8:	4b2c      	ldr	r3, [pc, #176]	@ (800387c <SystemInit+0xd4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 030f 	bic.w	r3, r3, #15
 80037d0:	4a2a      	ldr	r2, [pc, #168]	@ (800387c <SystemInit+0xd4>)
 80037d2:	f043 0303 	orr.w	r3, r3, #3
 80037d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80037d8:	4b29      	ldr	r3, [pc, #164]	@ (8003880 <SystemInit+0xd8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a28      	ldr	r2, [pc, #160]	@ (8003880 <SystemInit+0xd8>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037e4:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <SystemInit+0xd8>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80037ea:	4b25      	ldr	r3, [pc, #148]	@ (8003880 <SystemInit+0xd8>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4924      	ldr	r1, [pc, #144]	@ (8003880 <SystemInit+0xd8>)
 80037f0:	4b24      	ldr	r3, [pc, #144]	@ (8003884 <SystemInit+0xdc>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037f6:	4b21      	ldr	r3, [pc, #132]	@ (800387c <SystemInit+0xd4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003802:	4b1e      	ldr	r3, [pc, #120]	@ (800387c <SystemInit+0xd4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f023 030f 	bic.w	r3, r3, #15
 800380a:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <SystemInit+0xd4>)
 800380c:	f043 0303 	orr.w	r3, r3, #3
 8003810:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003812:	4b1b      	ldr	r3, [pc, #108]	@ (8003880 <SystemInit+0xd8>)
 8003814:	2200      	movs	r2, #0
 8003816:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003818:	4b19      	ldr	r3, [pc, #100]	@ (8003880 <SystemInit+0xd8>)
 800381a:	2200      	movs	r2, #0
 800381c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800381e:	4b18      	ldr	r3, [pc, #96]	@ (8003880 <SystemInit+0xd8>)
 8003820:	2200      	movs	r2, #0
 8003822:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003824:	4b16      	ldr	r3, [pc, #88]	@ (8003880 <SystemInit+0xd8>)
 8003826:	4a18      	ldr	r2, [pc, #96]	@ (8003888 <SystemInit+0xe0>)
 8003828:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800382a:	4b15      	ldr	r3, [pc, #84]	@ (8003880 <SystemInit+0xd8>)
 800382c:	4a17      	ldr	r2, [pc, #92]	@ (800388c <SystemInit+0xe4>)
 800382e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003830:	4b13      	ldr	r3, [pc, #76]	@ (8003880 <SystemInit+0xd8>)
 8003832:	4a17      	ldr	r2, [pc, #92]	@ (8003890 <SystemInit+0xe8>)
 8003834:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003836:	4b12      	ldr	r3, [pc, #72]	@ (8003880 <SystemInit+0xd8>)
 8003838:	2200      	movs	r2, #0
 800383a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800383c:	4b10      	ldr	r3, [pc, #64]	@ (8003880 <SystemInit+0xd8>)
 800383e:	4a14      	ldr	r2, [pc, #80]	@ (8003890 <SystemInit+0xe8>)
 8003840:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003842:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <SystemInit+0xd8>)
 8003844:	2200      	movs	r2, #0
 8003846:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003848:	4b0d      	ldr	r3, [pc, #52]	@ (8003880 <SystemInit+0xd8>)
 800384a:	4a11      	ldr	r2, [pc, #68]	@ (8003890 <SystemInit+0xe8>)
 800384c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800384e:	4b0c      	ldr	r3, [pc, #48]	@ (8003880 <SystemInit+0xd8>)
 8003850:	2200      	movs	r2, #0
 8003852:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <SystemInit+0xd8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a09      	ldr	r2, [pc, #36]	@ (8003880 <SystemInit+0xd8>)
 800385a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800385e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003860:	4b07      	ldr	r3, [pc, #28]	@ (8003880 <SystemInit+0xd8>)
 8003862:	2200      	movs	r2, #0
 8003864:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003866:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <SystemInit+0xec>)
 8003868:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800386c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800386e:	bf00      	nop
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000ed00 	.word	0xe000ed00
 800387c:	52002000 	.word	0x52002000
 8003880:	58024400 	.word	0x58024400
 8003884:	eaf6ed7f 	.word	0xeaf6ed7f
 8003888:	02020200 	.word	0x02020200
 800388c:	01ff0000 	.word	0x01ff0000
 8003890:	01010280 	.word	0x01010280
 8003894:	52004000 	.word	0x52004000

08003898 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	@ 0x28
 800389c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800389e:	f107 031c 	add.w	r3, r7, #28
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038aa:	463b      	mov	r3, r7
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
 80038b8:	615a      	str	r2, [r3, #20]
 80038ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038bc:	4b33      	ldr	r3, [pc, #204]	@ (800398c <MX_TIM2_Init+0xf4>)
 80038be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 80038c4:	4b31      	ldr	r3, [pc, #196]	@ (800398c <MX_TIM2_Init+0xf4>)
 80038c6:	f240 1217 	movw	r2, #279	@ 0x117
 80038ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038cc:	4b2f      	ldr	r3, [pc, #188]	@ (800398c <MX_TIM2_Init+0xf4>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 80038d2:	4b2e      	ldr	r3, [pc, #184]	@ (800398c <MX_TIM2_Init+0xf4>)
 80038d4:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80038d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038da:	4b2c      	ldr	r3, [pc, #176]	@ (800398c <MX_TIM2_Init+0xf4>)
 80038dc:	2200      	movs	r2, #0
 80038de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038e0:	4b2a      	ldr	r3, [pc, #168]	@ (800398c <MX_TIM2_Init+0xf4>)
 80038e2:	2280      	movs	r2, #128	@ 0x80
 80038e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038e6:	4829      	ldr	r0, [pc, #164]	@ (800398c <MX_TIM2_Init+0xf4>)
 80038e8:	f008 fe0a 	bl	800c500 <HAL_TIM_PWM_Init>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80038f2:	f7ff fd51 	bl	8003398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038fe:	f107 031c 	add.w	r3, r7, #28
 8003902:	4619      	mov	r1, r3
 8003904:	4821      	ldr	r0, [pc, #132]	@ (800398c <MX_TIM2_Init+0xf4>)
 8003906:	f009 fd47 	bl	800d398 <HAL_TIMEx_MasterConfigSynchronization>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003910:	f7ff fd42 	bl	8003398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003914:	2360      	movs	r3, #96	@ 0x60
 8003916:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003924:	463b      	mov	r3, r7
 8003926:	2200      	movs	r2, #0
 8003928:	4619      	mov	r1, r3
 800392a:	4818      	ldr	r0, [pc, #96]	@ (800398c <MX_TIM2_Init+0xf4>)
 800392c:	f009 f856 	bl	800c9dc <HAL_TIM_PWM_ConfigChannel>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8003936:	f7ff fd2f 	bl	8003398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800393a:	463b      	mov	r3, r7
 800393c:	2204      	movs	r2, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4812      	ldr	r0, [pc, #72]	@ (800398c <MX_TIM2_Init+0xf4>)
 8003942:	f009 f84b 	bl	800c9dc <HAL_TIM_PWM_ConfigChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800394c:	f7ff fd24 	bl	8003398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003950:	463b      	mov	r3, r7
 8003952:	2208      	movs	r2, #8
 8003954:	4619      	mov	r1, r3
 8003956:	480d      	ldr	r0, [pc, #52]	@ (800398c <MX_TIM2_Init+0xf4>)
 8003958:	f009 f840 	bl	800c9dc <HAL_TIM_PWM_ConfigChannel>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8003962:	f7ff fd19 	bl	8003398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003966:	463b      	mov	r3, r7
 8003968:	220c      	movs	r2, #12
 800396a:	4619      	mov	r1, r3
 800396c:	4807      	ldr	r0, [pc, #28]	@ (800398c <MX_TIM2_Init+0xf4>)
 800396e:	f009 f835 	bl	800c9dc <HAL_TIM_PWM_ConfigChannel>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8003978:	f7ff fd0e 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800397c:	4803      	ldr	r0, [pc, #12]	@ (800398c <MX_TIM2_Init+0xf4>)
 800397e:	f000 fa29 	bl	8003dd4 <HAL_TIM_MspPostInit>

}
 8003982:	bf00      	nop
 8003984:	3728      	adds	r7, #40	@ 0x28
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	24003610 	.word	0x24003610

08003990 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	@ 0x28
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003996:	f107 031c 	add.w	r3, r7, #28
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039a2:	463b      	mov	r3, r7
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
 80039b0:	615a      	str	r2, [r3, #20]
 80039b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039b4:	4b27      	ldr	r3, [pc, #156]	@ (8003a54 <MX_TIM3_Init+0xc4>)
 80039b6:	4a28      	ldr	r2, [pc, #160]	@ (8003a58 <MX_TIM3_Init+0xc8>)
 80039b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 80039ba:	4b26      	ldr	r3, [pc, #152]	@ (8003a54 <MX_TIM3_Init+0xc4>)
 80039bc:	f240 1217 	movw	r2, #279	@ 0x117
 80039c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c2:	4b24      	ldr	r3, [pc, #144]	@ (8003a54 <MX_TIM3_Init+0xc4>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 80039c8:	4b22      	ldr	r3, [pc, #136]	@ (8003a54 <MX_TIM3_Init+0xc4>)
 80039ca:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80039ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d0:	4b20      	ldr	r3, [pc, #128]	@ (8003a54 <MX_TIM3_Init+0xc4>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a54 <MX_TIM3_Init+0xc4>)
 80039d8:	2280      	movs	r2, #128	@ 0x80
 80039da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039dc:	481d      	ldr	r0, [pc, #116]	@ (8003a54 <MX_TIM3_Init+0xc4>)
 80039de:	f008 fd8f 	bl	800c500 <HAL_TIM_PWM_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80039e8:	f7ff fcd6 	bl	8003398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039f4:	f107 031c 	add.w	r3, r7, #28
 80039f8:	4619      	mov	r1, r3
 80039fa:	4816      	ldr	r0, [pc, #88]	@ (8003a54 <MX_TIM3_Init+0xc4>)
 80039fc:	f009 fccc 	bl	800d398 <HAL_TIMEx_MasterConfigSynchronization>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003a06:	f7ff fcc7 	bl	8003398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a0a:	2360      	movs	r3, #96	@ 0x60
 8003a0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4619      	mov	r1, r3
 8003a20:	480c      	ldr	r0, [pc, #48]	@ (8003a54 <MX_TIM3_Init+0xc4>)
 8003a22:	f008 ffdb 	bl	800c9dc <HAL_TIM_PWM_ConfigChannel>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8003a2c:	f7ff fcb4 	bl	8003398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a30:	463b      	mov	r3, r7
 8003a32:	2204      	movs	r2, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4807      	ldr	r0, [pc, #28]	@ (8003a54 <MX_TIM3_Init+0xc4>)
 8003a38:	f008 ffd0 	bl	800c9dc <HAL_TIM_PWM_ConfigChannel>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8003a42:	f7ff fca9 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a46:	4803      	ldr	r0, [pc, #12]	@ (8003a54 <MX_TIM3_Init+0xc4>)
 8003a48:	f000 f9c4 	bl	8003dd4 <HAL_TIM_MspPostInit>

}
 8003a4c:	bf00      	nop
 8003a4e:	3728      	adds	r7, #40	@ 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	2400365c 	.word	0x2400365c
 8003a58:	40000400 	.word	0x40000400

08003a5c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	@ 0x28
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a62:	f107 031c 	add.w	r3, r7, #28
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a6e:	463b      	mov	r3, r7
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	611a      	str	r2, [r3, #16]
 8003a7c:	615a      	str	r2, [r3, #20]
 8003a7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a80:	4b32      	ldr	r3, [pc, #200]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003a82:	4a33      	ldr	r2, [pc, #204]	@ (8003b50 <MX_TIM4_Init+0xf4>)
 8003a84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8003a86:	4b31      	ldr	r3, [pc, #196]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003a88:	f240 1217 	movw	r2, #279	@ 0x117
 8003a8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8003a94:	4b2d      	ldr	r3, [pc, #180]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003a96:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003a9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003aa4:	2280      	movs	r2, #128	@ 0x80
 8003aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003aa8:	4828      	ldr	r0, [pc, #160]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003aaa:	f008 fd29 	bl	800c500 <HAL_TIM_PWM_Init>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003ab4:	f7ff fc70 	bl	8003398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ac0:	f107 031c 	add.w	r3, r7, #28
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4821      	ldr	r0, [pc, #132]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003ac8:	f009 fc66 	bl	800d398 <HAL_TIMEx_MasterConfigSynchronization>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8003ad2:	f7ff fc61 	bl	8003398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ad6:	2360      	movs	r3, #96	@ 0x60
 8003ad8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4619      	mov	r1, r3
 8003aec:	4817      	ldr	r0, [pc, #92]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003aee:	f008 ff75 	bl	800c9dc <HAL_TIM_PWM_ConfigChannel>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8003af8:	f7ff fc4e 	bl	8003398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003afc:	463b      	mov	r3, r7
 8003afe:	2204      	movs	r2, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4812      	ldr	r0, [pc, #72]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003b04:	f008 ff6a 	bl	800c9dc <HAL_TIM_PWM_ConfigChannel>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003b0e:	f7ff fc43 	bl	8003398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b12:	463b      	mov	r3, r7
 8003b14:	2208      	movs	r2, #8
 8003b16:	4619      	mov	r1, r3
 8003b18:	480c      	ldr	r0, [pc, #48]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003b1a:	f008 ff5f 	bl	800c9dc <HAL_TIM_PWM_ConfigChannel>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8003b24:	f7ff fc38 	bl	8003398 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b28:	463b      	mov	r3, r7
 8003b2a:	220c      	movs	r2, #12
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4807      	ldr	r0, [pc, #28]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003b30:	f008 ff54 	bl	800c9dc <HAL_TIM_PWM_ConfigChannel>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8003b3a:	f7ff fc2d 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003b3e:	4803      	ldr	r0, [pc, #12]	@ (8003b4c <MX_TIM4_Init+0xf0>)
 8003b40:	f000 f948 	bl	8003dd4 <HAL_TIM_MspPostInit>

}
 8003b44:	bf00      	nop
 8003b46:	3728      	adds	r7, #40	@ 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	240036a8 	.word	0x240036a8
 8003b50:	40000800 	.word	0x40000800

08003b54 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003b64:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <MX_TIM6_Init+0x68>)
 8003b66:	4a16      	ldr	r2, [pc, #88]	@ (8003bc0 <MX_TIM6_Init+0x6c>)
 8003b68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8003b6a:	4b14      	ldr	r3, [pc, #80]	@ (8003bbc <MX_TIM6_Init+0x68>)
 8003b6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <MX_TIM6_Init+0x68>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8003b78:	4b10      	ldr	r3, [pc, #64]	@ (8003bbc <MX_TIM6_Init+0x68>)
 8003b7a:	f240 1217 	movw	r2, #279	@ 0x117
 8003b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b80:	4b0e      	ldr	r3, [pc, #56]	@ (8003bbc <MX_TIM6_Init+0x68>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003b86:	480d      	ldr	r0, [pc, #52]	@ (8003bbc <MX_TIM6_Init+0x68>)
 8003b88:	f008 fbeb 	bl	800c362 <HAL_TIM_Base_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003b92:	f7ff fc01 	bl	8003398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003b9e:	1d3b      	adds	r3, r7, #4
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4806      	ldr	r0, [pc, #24]	@ (8003bbc <MX_TIM6_Init+0x68>)
 8003ba4:	f009 fbf8 	bl	800d398 <HAL_TIMEx_MasterConfigSynchronization>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003bae:	f7ff fbf3 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  /* USER CODE END TIM6_Init 2 */

}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	240036f4 	.word	0x240036f4
 8003bc0:	40001000 	.word	0x40001000

08003bc4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003bd4:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <MX_TIM7_Init+0x68>)
 8003bd6:	4a16      	ldr	r2, [pc, #88]	@ (8003c30 <MX_TIM7_Init+0x6c>)
 8003bd8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8003bda:	4b14      	ldr	r3, [pc, #80]	@ (8003c2c <MX_TIM7_Init+0x68>)
 8003bdc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003be0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be2:	4b12      	ldr	r3, [pc, #72]	@ (8003c2c <MX_TIM7_Init+0x68>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 279;
 8003be8:	4b10      	ldr	r3, [pc, #64]	@ (8003c2c <MX_TIM7_Init+0x68>)
 8003bea:	f240 1217 	movw	r2, #279	@ 0x117
 8003bee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8003c2c <MX_TIM7_Init+0x68>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003bf6:	480d      	ldr	r0, [pc, #52]	@ (8003c2c <MX_TIM7_Init+0x68>)
 8003bf8:	f008 fbb3 	bl	800c362 <HAL_TIM_Base_Init>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003c02:	f7ff fbc9 	bl	8003398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003c0e:	1d3b      	adds	r3, r7, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4806      	ldr	r0, [pc, #24]	@ (8003c2c <MX_TIM7_Init+0x68>)
 8003c14:	f009 fbc0 	bl	800d398 <HAL_TIMEx_MasterConfigSynchronization>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8003c1e:	f7ff fbbb 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	24003740 	.word	0x24003740
 8003c30:	40001400 	.word	0x40001400

08003c34 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003c38:	4b0e      	ldr	r3, [pc, #56]	@ (8003c74 <MX_TIM13_Init+0x40>)
 8003c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c78 <MX_TIM13_Init+0x44>)
 8003c3c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c74 <MX_TIM13_Init+0x40>)
 8003c40:	f240 1217 	movw	r2, #279	@ 0x117
 8003c44:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c46:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <MX_TIM13_Init+0x40>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003c4c:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <MX_TIM13_Init+0x40>)
 8003c4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c52:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c54:	4b07      	ldr	r3, [pc, #28]	@ (8003c74 <MX_TIM13_Init+0x40>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c5a:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <MX_TIM13_Init+0x40>)
 8003c5c:	2280      	movs	r2, #128	@ 0x80
 8003c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003c60:	4804      	ldr	r0, [pc, #16]	@ (8003c74 <MX_TIM13_Init+0x40>)
 8003c62:	f008 fb7e 	bl	800c362 <HAL_TIM_Base_Init>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003c6c:	f7ff fb94 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003c70:	bf00      	nop
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	2400378c 	.word	0x2400378c
 8003c78:	40001c00 	.word	0x40001c00

08003c7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8c:	d10f      	bne.n	8003cae <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003d0c <HAL_TIM_PWM_MspInit+0x90>)
 8003c90:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003c94:	4a1d      	ldr	r2, [pc, #116]	@ (8003d0c <HAL_TIM_PWM_MspInit+0x90>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <HAL_TIM_PWM_MspInit+0x90>)
 8003ca0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003cac:	e028      	b.n	8003d00 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <HAL_TIM_PWM_MspInit+0x94>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10f      	bne.n	8003cd8 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cb8:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <HAL_TIM_PWM_MspInit+0x90>)
 8003cba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003cbe:	4a13      	ldr	r2, [pc, #76]	@ (8003d0c <HAL_TIM_PWM_MspInit+0x90>)
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003cc8:	4b10      	ldr	r3, [pc, #64]	@ (8003d0c <HAL_TIM_PWM_MspInit+0x90>)
 8003cca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	693b      	ldr	r3, [r7, #16]
}
 8003cd6:	e013      	b.n	8003d00 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d14 <HAL_TIM_PWM_MspInit+0x98>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10e      	bne.n	8003d00 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <HAL_TIM_PWM_MspInit+0x90>)
 8003ce4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003ce8:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <HAL_TIM_PWM_MspInit+0x90>)
 8003cea:	f043 0304 	orr.w	r3, r3, #4
 8003cee:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003cf2:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <HAL_TIM_PWM_MspInit+0x90>)
 8003cf4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800

08003d18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a27      	ldr	r2, [pc, #156]	@ (8003dc4 <HAL_TIM_Base_MspInit+0xac>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d117      	bne.n	8003d5a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d2a:	4b27      	ldr	r3, [pc, #156]	@ (8003dc8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d2c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d30:	4a25      	ldr	r2, [pc, #148]	@ (8003dc8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d32:	f043 0310 	orr.w	r3, r3, #16
 8003d36:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003d3a:	4b23      	ldr	r3, [pc, #140]	@ (8003dc8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d3c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	2036      	movs	r0, #54	@ 0x36
 8003d4e:	f000 fd9c 	bl	800488a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d52:	2036      	movs	r0, #54	@ 0x36
 8003d54:	f000 fdb3 	bl	80048be <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003d58:	e030      	b.n	8003dbc <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM7)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dcc <HAL_TIM_Base_MspInit+0xb4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d117      	bne.n	8003d94 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d64:	4b18      	ldr	r3, [pc, #96]	@ (8003dc8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d66:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d6a:	4a17      	ldr	r2, [pc, #92]	@ (8003dc8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d6c:	f043 0320 	orr.w	r3, r3, #32
 8003d70:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003d74:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d76:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003d82:	2200      	movs	r2, #0
 8003d84:	2100      	movs	r1, #0
 8003d86:	2037      	movs	r0, #55	@ 0x37
 8003d88:	f000 fd7f 	bl	800488a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003d8c:	2037      	movs	r0, #55	@ 0x37
 8003d8e:	f000 fd96 	bl	80048be <HAL_NVIC_EnableIRQ>
}
 8003d92:	e013      	b.n	8003dbc <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM13)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd0 <HAL_TIM_Base_MspInit+0xb8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <HAL_TIM_Base_MspInit+0xb0>)
 8003da0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003da4:	4a08      	ldr	r2, [pc, #32]	@ (8003dc8 <HAL_TIM_Base_MspInit+0xb0>)
 8003da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003daa:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003dae:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <HAL_TIM_Base_MspInit+0xb0>)
 8003db0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40001000 	.word	0x40001000
 8003dc8:	58024400 	.word	0x58024400
 8003dcc:	40001400 	.word	0x40001400
 8003dd0:	40001c00 	.word	0x40001c00

08003dd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08c      	sub	sp, #48	@ 0x30
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ddc:	f107 031c 	add.w	r3, r7, #28
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df4:	d13f      	bne.n	8003e76 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df6:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003dfc:	4a45      	ldr	r2, [pc, #276]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003e06:	4b43      	ldr	r3, [pc, #268]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003e08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e14:	4b3f      	ldr	r3, [pc, #252]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e1a:	4a3e      	ldr	r2, [pc, #248]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003e24:	4b3b      	ldr	r3, [pc, #236]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003e26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8003e32:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e40:	2300      	movs	r3, #0
 8003e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e44:	2301      	movs	r3, #1
 8003e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4832      	ldr	r0, [pc, #200]	@ (8003f18 <HAL_TIM_MspPostInit+0x144>)
 8003e50:	f004 f80a 	bl	8007e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e54:	2308      	movs	r3, #8
 8003e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e60:	2300      	movs	r3, #0
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e64:	2301      	movs	r3, #1
 8003e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e68:	f107 031c 	add.w	r3, r7, #28
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	482b      	ldr	r0, [pc, #172]	@ (8003f1c <HAL_TIM_MspPostInit+0x148>)
 8003e70:	f003 fffa 	bl	8007e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003e74:	e049      	b.n	8003f0a <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a29      	ldr	r2, [pc, #164]	@ (8003f20 <HAL_TIM_MspPostInit+0x14c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d11f      	bne.n	8003ec0 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e80:	4b24      	ldr	r3, [pc, #144]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003e82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e86:	4a23      	ldr	r2, [pc, #140]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003e88:	f043 0302 	orr.w	r3, r3, #2
 8003e8c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003e90:	4b20      	ldr	r3, [pc, #128]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003e92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003e9e:	2330      	movs	r3, #48	@ 0x30
 8003ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb2:	f107 031c 	add.w	r3, r7, #28
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4818      	ldr	r0, [pc, #96]	@ (8003f1c <HAL_TIM_MspPostInit+0x148>)
 8003eba:	f003 ffd5 	bl	8007e68 <HAL_GPIO_Init>
}
 8003ebe:	e024      	b.n	8003f0a <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a17      	ldr	r2, [pc, #92]	@ (8003f24 <HAL_TIM_MspPostInit+0x150>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d11f      	bne.n	8003f0a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eca:	4b12      	ldr	r3, [pc, #72]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003ecc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003ed0:	4a10      	ldr	r2, [pc, #64]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003ed2:	f043 0302 	orr.w	r3, r3, #2
 8003ed6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003eda:	4b0e      	ldr	r3, [pc, #56]	@ (8003f14 <HAL_TIM_MspPostInit+0x140>)
 8003edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003ee8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003efa:	2302      	movs	r3, #2
 8003efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003efe:	f107 031c 	add.w	r3, r7, #28
 8003f02:	4619      	mov	r1, r3
 8003f04:	4805      	ldr	r0, [pc, #20]	@ (8003f1c <HAL_TIM_MspPostInit+0x148>)
 8003f06:	f003 ffaf 	bl	8007e68 <HAL_GPIO_Init>
}
 8003f0a:	bf00      	nop
 8003f0c:	3730      	adds	r7, #48	@ 0x30
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	58024400 	.word	0x58024400
 8003f18:	58020000 	.word	0x58020000
 8003f1c:	58020400 	.word	0x58020400
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800

08003f28 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003f2c:	4b22      	ldr	r3, [pc, #136]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f2e:	4a23      	ldr	r2, [pc, #140]	@ (8003fbc <MX_UART4_Init+0x94>)
 8003f30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003f32:	4b21      	ldr	r3, [pc, #132]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003f46:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f4e:	220c      	movs	r2, #12
 8003f50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f52:	4b19      	ldr	r3, [pc, #100]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f58:	4b17      	ldr	r3, [pc, #92]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f5e:	4b16      	ldr	r3, [pc, #88]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f64:	4b14      	ldr	r3, [pc, #80]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f6a:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003f70:	4811      	ldr	r0, [pc, #68]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f72:	f009 fabd 	bl	800d4f0 <HAL_UART_Init>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003f7c:	f7ff fa0c 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f80:	2100      	movs	r1, #0
 8003f82:	480d      	ldr	r0, [pc, #52]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f84:	f00b fc8d 	bl	800f8a2 <HAL_UARTEx_SetTxFifoThreshold>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003f8e:	f7ff fa03 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f92:	2100      	movs	r1, #0
 8003f94:	4808      	ldr	r0, [pc, #32]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003f96:	f00b fcc2 	bl	800f91e <HAL_UARTEx_SetRxFifoThreshold>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003fa0:	f7ff f9fa 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003fa4:	4804      	ldr	r0, [pc, #16]	@ (8003fb8 <MX_UART4_Init+0x90>)
 8003fa6:	f00b fc43 	bl	800f830 <HAL_UARTEx_DisableFifoMode>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003fb0:	f7ff f9f2 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	240037d8 	.word	0x240037d8
 8003fbc:	40004c00 	.word	0x40004c00

08003fc0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fc4:	4b23      	ldr	r3, [pc, #140]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8003fc6:	4a24      	ldr	r2, [pc, #144]	@ (8004058 <MX_USART1_UART_Init+0x98>)
 8003fc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003fca:	4b22      	ldr	r3, [pc, #136]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8003fcc:	4a23      	ldr	r2, [pc, #140]	@ (800405c <MX_USART1_UART_Init+0x9c>)
 8003fce:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003fd0:	4b20      	ldr	r3, [pc, #128]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8003fd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003fd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8003fde:	4b1d      	ldr	r3, [pc, #116]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8003fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fe4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8003fe8:	220c      	movs	r2, #12
 8003fea:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fec:	4b19      	ldr	r3, [pc, #100]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ff2:	4b18      	ldr	r3, [pc, #96]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ff8:	4b16      	ldr	r3, [pc, #88]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ffe:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8004000:	2200      	movs	r2, #0
 8004002:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004004:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8004006:	2200      	movs	r2, #0
 8004008:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800400a:	4812      	ldr	r0, [pc, #72]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 800400c:	f009 fa70 	bl	800d4f0 <HAL_UART_Init>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004016:	f7ff f9bf 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800401a:	2100      	movs	r1, #0
 800401c:	480d      	ldr	r0, [pc, #52]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 800401e:	f00b fc40 	bl	800f8a2 <HAL_UARTEx_SetTxFifoThreshold>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8004028:	f7ff f9b6 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800402c:	2100      	movs	r1, #0
 800402e:	4809      	ldr	r0, [pc, #36]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8004030:	f00b fc75 	bl	800f91e <HAL_UARTEx_SetRxFifoThreshold>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800403a:	f7ff f9ad 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800403e:	4805      	ldr	r0, [pc, #20]	@ (8004054 <MX_USART1_UART_Init+0x94>)
 8004040:	f00b fbf6 	bl	800f830 <HAL_UARTEx_DisableFifoMode>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800404a:	f7ff f9a5 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	2400386c 	.word	0x2400386c
 8004058:	40011000 	.word	0x40011000
 800405c:	000186a0 	.word	0x000186a0

08004060 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004064:	4b22      	ldr	r3, [pc, #136]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 8004066:	4a23      	ldr	r2, [pc, #140]	@ (80040f4 <MX_USART3_UART_Init+0x94>)
 8004068:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800406a:	4b21      	ldr	r3, [pc, #132]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 800406c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004070:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004072:	4b1f      	ldr	r3, [pc, #124]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 8004074:	2200      	movs	r2, #0
 8004076:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004078:	4b1d      	ldr	r3, [pc, #116]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 800407a:	2200      	movs	r2, #0
 800407c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800407e:	4b1c      	ldr	r3, [pc, #112]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 8004080:	2200      	movs	r2, #0
 8004082:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004084:	4b1a      	ldr	r3, [pc, #104]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 8004086:	220c      	movs	r2, #12
 8004088:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800408a:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 800408c:	2200      	movs	r2, #0
 800408e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004090:	4b17      	ldr	r3, [pc, #92]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 8004092:	2200      	movs	r2, #0
 8004094:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004096:	4b16      	ldr	r3, [pc, #88]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 8004098:	2200      	movs	r2, #0
 800409a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800409c:	4b14      	ldr	r3, [pc, #80]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 800409e:	2200      	movs	r2, #0
 80040a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040a2:	4b13      	ldr	r3, [pc, #76]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040a8:	4811      	ldr	r0, [pc, #68]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 80040aa:	f009 fa21 	bl	800d4f0 <HAL_UART_Init>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80040b4:	f7ff f970 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040b8:	2100      	movs	r1, #0
 80040ba:	480d      	ldr	r0, [pc, #52]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 80040bc:	f00b fbf1 	bl	800f8a2 <HAL_UARTEx_SetTxFifoThreshold>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80040c6:	f7ff f967 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040ca:	2100      	movs	r1, #0
 80040cc:	4808      	ldr	r0, [pc, #32]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 80040ce:	f00b fc26 	bl	800f91e <HAL_UARTEx_SetRxFifoThreshold>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80040d8:	f7ff f95e 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80040dc:	4804      	ldr	r0, [pc, #16]	@ (80040f0 <MX_USART3_UART_Init+0x90>)
 80040de:	f00b fba7 	bl	800f830 <HAL_UARTEx_DisableFifoMode>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80040e8:	f7ff f956 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040ec:	bf00      	nop
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	24003900 	.word	0x24003900
 80040f4:	40004800 	.word	0x40004800

080040f8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80040fc:	4b22      	ldr	r3, [pc, #136]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 80040fe:	4a23      	ldr	r2, [pc, #140]	@ (800418c <MX_USART6_UART_Init+0x94>)
 8004100:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004102:	4b21      	ldr	r3, [pc, #132]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 8004104:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004108:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800410a:	4b1f      	ldr	r3, [pc, #124]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004110:	4b1d      	ldr	r3, [pc, #116]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004116:	4b1c      	ldr	r3, [pc, #112]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800411c:	4b1a      	ldr	r3, [pc, #104]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 800411e:	220c      	movs	r2, #12
 8004120:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004122:	4b19      	ldr	r3, [pc, #100]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004128:	4b17      	ldr	r3, [pc, #92]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 800412a:	2200      	movs	r2, #0
 800412c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800412e:	4b16      	ldr	r3, [pc, #88]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 8004130:	2200      	movs	r2, #0
 8004132:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004134:	4b14      	ldr	r3, [pc, #80]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 8004136:	2200      	movs	r2, #0
 8004138:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800413a:	4b13      	ldr	r3, [pc, #76]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 800413c:	2200      	movs	r2, #0
 800413e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004140:	4811      	ldr	r0, [pc, #68]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 8004142:	f009 f9d5 	bl	800d4f0 <HAL_UART_Init>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800414c:	f7ff f924 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004150:	2100      	movs	r1, #0
 8004152:	480d      	ldr	r0, [pc, #52]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 8004154:	f00b fba5 	bl	800f8a2 <HAL_UARTEx_SetTxFifoThreshold>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800415e:	f7ff f91b 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004162:	2100      	movs	r1, #0
 8004164:	4808      	ldr	r0, [pc, #32]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 8004166:	f00b fbda 	bl	800f91e <HAL_UARTEx_SetRxFifoThreshold>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004170:	f7ff f912 	bl	8003398 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8004174:	4804      	ldr	r0, [pc, #16]	@ (8004188 <MX_USART6_UART_Init+0x90>)
 8004176:	f00b fb5b 	bl	800f830 <HAL_UARTEx_DisableFifoMode>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004180:	f7ff f90a 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004184:	bf00      	nop
 8004186:	bd80      	pop	{r7, pc}
 8004188:	24003994 	.word	0x24003994
 800418c:	40011400 	.word	0x40011400

08004190 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b0c0      	sub	sp, #256	@ 0x100
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004198:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041ac:	22c0      	movs	r2, #192	@ 0xc0
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f010 fabb 	bl	801472c <memset>
  if(uartHandle->Instance==UART4)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4aa9      	ldr	r2, [pc, #676]	@ (8004460 <HAL_UART_MspInit+0x2d0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d146      	bne.n	800424e <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80041c0:	f04f 0202 	mov.w	r2, #2
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041d6:	4618      	mov	r0, r3
 80041d8:	f005 f93c 	bl	8009454 <HAL_RCCEx_PeriphCLKConfig>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80041e2:	f7ff f8d9 	bl	8003398 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80041e6:	4b9f      	ldr	r3, [pc, #636]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 80041e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80041ec:	4a9d      	ldr	r2, [pc, #628]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 80041ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041f2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80041f6:	4b9b      	ldr	r3, [pc, #620]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 80041f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80041fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004204:	4b97      	ldr	r3, [pc, #604]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 8004206:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800420a:	4a96      	ldr	r2, [pc, #600]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004214:	4b93      	ldr	r3, [pc, #588]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 8004216:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	623b      	str	r3, [r7, #32]
 8004220:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004222:	2303      	movs	r3, #3
 8004224:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004228:	2302      	movs	r3, #2
 800422a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422e:	2300      	movs	r3, #0
 8004230:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004234:	2300      	movs	r3, #0
 8004236:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800423a:	2308      	movs	r3, #8
 800423c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004240:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004244:	4619      	mov	r1, r3
 8004246:	4888      	ldr	r0, [pc, #544]	@ (8004468 <HAL_UART_MspInit+0x2d8>)
 8004248:	f003 fe0e 	bl	8007e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800424c:	e167      	b.n	800451e <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a86      	ldr	r2, [pc, #536]	@ (800446c <HAL_UART_MspInit+0x2dc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d17f      	bne.n	8004358 <HAL_UART_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004258:	f04f 0201 	mov.w	r2, #1
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004264:	2300      	movs	r3, #0
 8004266:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800426a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800426e:	4618      	mov	r0, r3
 8004270:	f005 f8f0 	bl	8009454 <HAL_RCCEx_PeriphCLKConfig>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_UART_MspInit+0xee>
      Error_Handler();
 800427a:	f7ff f88d 	bl	8003398 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800427e:	4b79      	ldr	r3, [pc, #484]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 8004280:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004284:	4a77      	ldr	r2, [pc, #476]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 8004286:	f043 0310 	orr.w	r3, r3, #16
 800428a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800428e:	4b75      	ldr	r3, [pc, #468]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 8004290:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800429c:	4b71      	ldr	r3, [pc, #452]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 800429e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80042a2:	4a70      	ldr	r2, [pc, #448]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80042ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 80042ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 80042ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80042be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c2:	2302      	movs	r3, #2
 80042c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ce:	2300      	movs	r3, #0
 80042d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042d4:	2307      	movs	r3, #7
 80042d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042da:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80042de:	4619      	mov	r1, r3
 80042e0:	4861      	ldr	r0, [pc, #388]	@ (8004468 <HAL_UART_MspInit+0x2d8>)
 80042e2:	f003 fdc1 	bl	8007e68 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80042e6:	4b62      	ldr	r3, [pc, #392]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 80042e8:	4a62      	ldr	r2, [pc, #392]	@ (8004474 <HAL_UART_MspInit+0x2e4>)
 80042ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80042ec:	4b60      	ldr	r3, [pc, #384]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 80042ee:	2229      	movs	r2, #41	@ 0x29
 80042f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042f8:	4b5d      	ldr	r3, [pc, #372]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 8004300:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004304:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004306:	4b5a      	ldr	r3, [pc, #360]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 8004308:	2200      	movs	r2, #0
 800430a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800430c:	4b58      	ldr	r3, [pc, #352]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 800430e:	2200      	movs	r2, #0
 8004310:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004312:	4b57      	ldr	r3, [pc, #348]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 8004314:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004318:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800431a:	4b55      	ldr	r3, [pc, #340]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 800431c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004320:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004322:	4b53      	ldr	r3, [pc, #332]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 8004324:	2200      	movs	r2, #0
 8004326:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004328:	4851      	ldr	r0, [pc, #324]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 800432a:	f000 fb5b 	bl	80049e4 <HAL_DMA_Init>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8004334:	f7ff f830 	bl	8003398 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a4d      	ldr	r2, [pc, #308]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 800433c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004340:	4a4b      	ldr	r2, [pc, #300]	@ (8004470 <HAL_UART_MspInit+0x2e0>)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004346:	2200      	movs	r2, #0
 8004348:	2100      	movs	r1, #0
 800434a:	2025      	movs	r0, #37	@ 0x25
 800434c:	f000 fa9d 	bl	800488a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004350:	2025      	movs	r0, #37	@ 0x25
 8004352:	f000 fab4 	bl	80048be <HAL_NVIC_EnableIRQ>
}
 8004356:	e0e2      	b.n	800451e <HAL_UART_MspInit+0x38e>
  else if(uartHandle->Instance==USART3)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a46      	ldr	r2, [pc, #280]	@ (8004478 <HAL_UART_MspInit+0x2e8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	f040 8092 	bne.w	8004488 <HAL_UART_MspInit+0x2f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004364:	f04f 0202 	mov.w	r2, #2
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004370:	2300      	movs	r3, #0
 8004372:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004376:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800437a:	4618      	mov	r0, r3
 800437c:	f005 f86a 	bl	8009454 <HAL_RCCEx_PeriphCLKConfig>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8004386:	f7ff f807 	bl	8003398 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800438a:	4b36      	ldr	r3, [pc, #216]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 800438c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004390:	4a34      	ldr	r2, [pc, #208]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 8004392:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004396:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800439a:	4b32      	ldr	r3, [pc, #200]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 800439c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80043a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 80043aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80043ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 80043b0:	f043 0304 	orr.w	r3, r3, #4
 80043b4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80043b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <HAL_UART_MspInit+0x2d4>)
 80043ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80043c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043ca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ce:	2302      	movs	r3, #2
 80043d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043da:	2300      	movs	r3, #0
 80043dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043e0:	2307      	movs	r3, #7
 80043e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80043ea:	4619      	mov	r1, r3
 80043ec:	4823      	ldr	r0, [pc, #140]	@ (800447c <HAL_UART_MspInit+0x2ec>)
 80043ee:	f003 fd3b 	bl	8007e68 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80043f2:	4b23      	ldr	r3, [pc, #140]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 80043f4:	4a23      	ldr	r2, [pc, #140]	@ (8004484 <HAL_UART_MspInit+0x2f4>)
 80043f6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80043f8:	4b21      	ldr	r3, [pc, #132]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 80043fa:	222d      	movs	r2, #45	@ 0x2d
 80043fc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043fe:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 8004400:	2200      	movs	r2, #0
 8004402:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004404:	4b1e      	ldr	r3, [pc, #120]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 8004406:	2200      	movs	r2, #0
 8004408:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800440a:	4b1d      	ldr	r3, [pc, #116]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 800440c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004410:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004412:	4b1b      	ldr	r3, [pc, #108]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 8004414:	2200      	movs	r2, #0
 8004416:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004418:	4b19      	ldr	r3, [pc, #100]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 800441a:	2200      	movs	r2, #0
 800441c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800441e:	4b18      	ldr	r3, [pc, #96]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 8004420:	2200      	movs	r2, #0
 8004422:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004424:	4b16      	ldr	r3, [pc, #88]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 8004426:	2200      	movs	r2, #0
 8004428:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800442a:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 800442c:	2200      	movs	r2, #0
 800442e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004430:	4813      	ldr	r0, [pc, #76]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 8004432:	f000 fad7 	bl	80049e4 <HAL_DMA_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 800443c:	f7fe ffac 	bl	8003398 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a0f      	ldr	r2, [pc, #60]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 8004444:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004448:	4a0d      	ldr	r2, [pc, #52]	@ (8004480 <HAL_UART_MspInit+0x2f0>)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800444e:	2200      	movs	r2, #0
 8004450:	2100      	movs	r1, #0
 8004452:	2027      	movs	r0, #39	@ 0x27
 8004454:	f000 fa19 	bl	800488a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004458:	2027      	movs	r0, #39	@ 0x27
 800445a:	f000 fa30 	bl	80048be <HAL_NVIC_EnableIRQ>
}
 800445e:	e05e      	b.n	800451e <HAL_UART_MspInit+0x38e>
 8004460:	40004c00 	.word	0x40004c00
 8004464:	58024400 	.word	0x58024400
 8004468:	58020000 	.word	0x58020000
 800446c:	40011000 	.word	0x40011000
 8004470:	24003a28 	.word	0x24003a28
 8004474:	40020010 	.word	0x40020010
 8004478:	40004800 	.word	0x40004800
 800447c:	58020800 	.word	0x58020800
 8004480:	24003aa0 	.word	0x24003aa0
 8004484:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART6)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a26      	ldr	r2, [pc, #152]	@ (8004528 <HAL_UART_MspInit+0x398>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d145      	bne.n	800451e <HAL_UART_MspInit+0x38e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004492:	f04f 0201 	mov.w	r2, #1
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800449e:	2300      	movs	r3, #0
 80044a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044a8:	4618      	mov	r0, r3
 80044aa:	f004 ffd3 	bl	8009454 <HAL_RCCEx_PeriphCLKConfig>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_UART_MspInit+0x328>
      Error_Handler();
 80044b4:	f7fe ff70 	bl	8003398 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80044b8:	4b1c      	ldr	r3, [pc, #112]	@ (800452c <HAL_UART_MspInit+0x39c>)
 80044ba:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80044be:	4a1b      	ldr	r2, [pc, #108]	@ (800452c <HAL_UART_MspInit+0x39c>)
 80044c0:	f043 0320 	orr.w	r3, r3, #32
 80044c4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80044c8:	4b18      	ldr	r3, [pc, #96]	@ (800452c <HAL_UART_MspInit+0x39c>)
 80044ca:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d6:	4b15      	ldr	r3, [pc, #84]	@ (800452c <HAL_UART_MspInit+0x39c>)
 80044d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80044dc:	4a13      	ldr	r2, [pc, #76]	@ (800452c <HAL_UART_MspInit+0x39c>)
 80044de:	f043 0304 	orr.w	r3, r3, #4
 80044e2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80044e6:	4b11      	ldr	r3, [pc, #68]	@ (800452c <HAL_UART_MspInit+0x39c>)
 80044e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044f4:	23c0      	movs	r3, #192	@ 0xc0
 80044f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fa:	2302      	movs	r3, #2
 80044fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800450c:	2307      	movs	r3, #7
 800450e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004512:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004516:	4619      	mov	r1, r3
 8004518:	4805      	ldr	r0, [pc, #20]	@ (8004530 <HAL_UART_MspInit+0x3a0>)
 800451a:	f003 fca5 	bl	8007e68 <HAL_GPIO_Init>
}
 800451e:	bf00      	nop
 8004520:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40011400 	.word	0x40011400
 800452c:	58024400 	.word	0x58024400
 8004530:	58020800 	.word	0x58020800

08004534 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	220f      	movs	r2, #15
 8004542:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f009 f8fd 	bl	800d744 <HAL_UART_Abort_IT>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 8004550:	f7fe ff22 	bl	8003398 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800455c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004594 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004560:	f7ff f922 	bl	80037a8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004564:	480c      	ldr	r0, [pc, #48]	@ (8004598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004566:	490d      	ldr	r1, [pc, #52]	@ (800459c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004568:	4a0d      	ldr	r2, [pc, #52]	@ (80045a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800456a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800456c:	e002      	b.n	8004574 <LoopCopyDataInit>

0800456e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800456e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004572:	3304      	adds	r3, #4

08004574 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8004574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004578:	d3f9      	bcc.n	800456e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800457a:	4a0a      	ldr	r2, [pc, #40]	@ (80045a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800457c:	4c0a      	ldr	r4, [pc, #40]	@ (80045a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800457e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004580:	e001      	b.n	8004586 <LoopFillZerobss>

08004582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004584:	3204      	adds	r2, #4

08004586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004588:	d3fb      	bcc.n	8004582 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800458a:	f010 f8dd 	bl	8014748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800458e:	f7fe fdbf 	bl	8003110 <main>
  bx  lr
 8004592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004594:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8004598:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800459c:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 80045a0:	08015948 	.word	0x08015948
  ldr r2, =_sbss
 80045a4:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 80045a8:	24003e98 	.word	0x24003e98

080045ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045ac:	e7fe      	b.n	80045ac <ADC_IRQHandler>
	...

080045b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045b6:	2003      	movs	r0, #3
 80045b8:	f000 f95c 	bl	8004874 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80045bc:	f004 fd74 	bl	80090a8 <HAL_RCC_GetSysClockFreq>
 80045c0:	4602      	mov	r2, r0
 80045c2:	4b15      	ldr	r3, [pc, #84]	@ (8004618 <HAL_Init+0x68>)
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	4913      	ldr	r1, [pc, #76]	@ (800461c <HAL_Init+0x6c>)
 80045ce:	5ccb      	ldrb	r3, [r1, r3]
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
 80045d8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80045da:	4b0f      	ldr	r3, [pc, #60]	@ (8004618 <HAL_Init+0x68>)
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	4a0e      	ldr	r2, [pc, #56]	@ (800461c <HAL_Init+0x6c>)
 80045e4:	5cd3      	ldrb	r3, [r2, r3]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	4a0b      	ldr	r2, [pc, #44]	@ (8004620 <HAL_Init+0x70>)
 80045f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004624 <HAL_Init+0x74>)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045fa:	200f      	movs	r0, #15
 80045fc:	f000 f814 	bl	8004628 <HAL_InitTick>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e002      	b.n	8004610 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800460a:	f7ff f82f 	bl	800366c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	58024400 	.word	0x58024400
 800461c:	08014c28 	.word	0x08014c28
 8004620:	240000c4 	.word	0x240000c4
 8004624:	240000c0 	.word	0x240000c0

08004628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004630:	4b15      	ldr	r3, [pc, #84]	@ (8004688 <HAL_InitTick+0x60>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e021      	b.n	8004680 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800463c:	4b13      	ldr	r3, [pc, #76]	@ (800468c <HAL_InitTick+0x64>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b11      	ldr	r3, [pc, #68]	@ (8004688 <HAL_InitTick+0x60>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	4619      	mov	r1, r3
 8004646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800464a:	fbb3 f3f1 	udiv	r3, r3, r1
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	4618      	mov	r0, r3
 8004654:	f000 f941 	bl	80048da <HAL_SYSTICK_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e00e      	b.n	8004680 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b0f      	cmp	r3, #15
 8004666:	d80a      	bhi.n	800467e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004668:	2200      	movs	r2, #0
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	f000 f90b 	bl	800488a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004674:	4a06      	ldr	r2, [pc, #24]	@ (8004690 <HAL_InitTick+0x68>)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	e000      	b.n	8004680 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	240000cc 	.word	0x240000cc
 800468c:	240000c0 	.word	0x240000c0
 8004690:	240000c8 	.word	0x240000c8

08004694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004698:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <HAL_IncTick+0x20>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <HAL_IncTick+0x24>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4413      	add	r3, r2
 80046a4:	4a04      	ldr	r2, [pc, #16]	@ (80046b8 <HAL_IncTick+0x24>)
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	240000cc 	.word	0x240000cc
 80046b8:	24003b18 	.word	0x24003b18

080046bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return uwTick;
 80046c0:	4b03      	ldr	r3, [pc, #12]	@ (80046d0 <HAL_GetTick+0x14>)
 80046c2:	681b      	ldr	r3, [r3, #0]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	24003b18 	.word	0x24003b18

080046d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <__NVIC_SetPriorityGrouping+0x40>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046f0:	4013      	ands	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80046fc:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <__NVIC_SetPriorityGrouping+0x44>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004702:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <__NVIC_SetPriorityGrouping+0x40>)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	60d3      	str	r3, [r2, #12]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	e000ed00 	.word	0xe000ed00
 8004718:	05fa0000 	.word	0x05fa0000

0800471c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004720:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <__NVIC_GetPriorityGrouping+0x18>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	f003 0307 	and.w	r3, r3, #7
}
 800472a:	4618      	mov	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	e000ed00 	.word	0xe000ed00

08004738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004746:	2b00      	cmp	r3, #0
 8004748:	db0b      	blt.n	8004762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	f003 021f 	and.w	r2, r3, #31
 8004750:	4907      	ldr	r1, [pc, #28]	@ (8004770 <__NVIC_EnableIRQ+0x38>)
 8004752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	2001      	movs	r0, #1
 800475a:	fa00 f202 	lsl.w	r2, r0, r2
 800475e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000e100 	.word	0xe000e100

08004774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	6039      	str	r1, [r7, #0]
 800477e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	db0a      	blt.n	800479e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	b2da      	uxtb	r2, r3
 800478c:	490c      	ldr	r1, [pc, #48]	@ (80047c0 <__NVIC_SetPriority+0x4c>)
 800478e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004792:	0112      	lsls	r2, r2, #4
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	440b      	add	r3, r1
 8004798:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800479c:	e00a      	b.n	80047b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	4908      	ldr	r1, [pc, #32]	@ (80047c4 <__NVIC_SetPriority+0x50>)
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	3b04      	subs	r3, #4
 80047ac:	0112      	lsls	r2, r2, #4
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	440b      	add	r3, r1
 80047b2:	761a      	strb	r2, [r3, #24]
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	e000e100 	.word	0xe000e100
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	@ 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f1c3 0307 	rsb	r3, r3, #7
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	bf28      	it	cs
 80047e6:	2304      	movcs	r3, #4
 80047e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	3304      	adds	r3, #4
 80047ee:	2b06      	cmp	r3, #6
 80047f0:	d902      	bls.n	80047f8 <NVIC_EncodePriority+0x30>
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	3b03      	subs	r3, #3
 80047f6:	e000      	b.n	80047fa <NVIC_EncodePriority+0x32>
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	43da      	mvns	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	401a      	ands	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004810:	f04f 31ff 	mov.w	r1, #4294967295
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	43d9      	mvns	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004820:	4313      	orrs	r3, r2
         );
}
 8004822:	4618      	mov	r0, r3
 8004824:	3724      	adds	r7, #36	@ 0x24
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3b01      	subs	r3, #1
 800483c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004840:	d301      	bcc.n	8004846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004842:	2301      	movs	r3, #1
 8004844:	e00f      	b.n	8004866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004846:	4a0a      	ldr	r2, [pc, #40]	@ (8004870 <SysTick_Config+0x40>)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3b01      	subs	r3, #1
 800484c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800484e:	210f      	movs	r1, #15
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	f7ff ff8e 	bl	8004774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004858:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <SysTick_Config+0x40>)
 800485a:	2200      	movs	r2, #0
 800485c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800485e:	4b04      	ldr	r3, [pc, #16]	@ (8004870 <SysTick_Config+0x40>)
 8004860:	2207      	movs	r2, #7
 8004862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	e000e010 	.word	0xe000e010

08004874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ff29 	bl	80046d4 <__NVIC_SetPriorityGrouping>
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	4603      	mov	r3, r0
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004898:	f7ff ff40 	bl	800471c <__NVIC_GetPriorityGrouping>
 800489c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	6978      	ldr	r0, [r7, #20]
 80048a4:	f7ff ff90 	bl	80047c8 <NVIC_EncodePriority>
 80048a8:	4602      	mov	r2, r0
 80048aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048ae:	4611      	mov	r1, r2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff ff5f 	bl	8004774 <__NVIC_SetPriority>
}
 80048b6:	bf00      	nop
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b082      	sub	sp, #8
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	4603      	mov	r3, r0
 80048c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff ff33 	bl	8004738 <__NVIC_EnableIRQ>
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ffa4 	bl	8004830 <SysTick_Config>
 80048e8:	4603      	mov	r3, r0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80048f8:	f3bf 8f5f 	dmb	sy
}
 80048fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80048fe:	4b07      	ldr	r3, [pc, #28]	@ (800491c <HAL_MPU_Disable+0x28>)
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	4a06      	ldr	r2, [pc, #24]	@ (800491c <HAL_MPU_Disable+0x28>)
 8004904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004908:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800490a:	4b05      	ldr	r3, [pc, #20]	@ (8004920 <HAL_MPU_Disable+0x2c>)
 800490c:	2200      	movs	r2, #0
 800490e:	605a      	str	r2, [r3, #4]
}
 8004910:	bf00      	nop
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	e000ed00 	.word	0xe000ed00
 8004920:	e000ed90 	.word	0xe000ed90

08004924 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800492c:	4a0b      	ldr	r2, [pc, #44]	@ (800495c <HAL_MPU_Enable+0x38>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004936:	4b0a      	ldr	r3, [pc, #40]	@ (8004960 <HAL_MPU_Enable+0x3c>)
 8004938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493a:	4a09      	ldr	r2, [pc, #36]	@ (8004960 <HAL_MPU_Enable+0x3c>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004940:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004942:	f3bf 8f4f 	dsb	sy
}
 8004946:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004948:	f3bf 8f6f 	isb	sy
}
 800494c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	e000ed90 	.word	0xe000ed90
 8004960:	e000ed00 	.word	0xe000ed00

08004964 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	785a      	ldrb	r2, [r3, #1]
 8004970:	4b1b      	ldr	r3, [pc, #108]	@ (80049e0 <HAL_MPU_ConfigRegion+0x7c>)
 8004972:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004974:	4b1a      	ldr	r3, [pc, #104]	@ (80049e0 <HAL_MPU_ConfigRegion+0x7c>)
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	4a19      	ldr	r2, [pc, #100]	@ (80049e0 <HAL_MPU_ConfigRegion+0x7c>)
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004980:	4a17      	ldr	r2, [pc, #92]	@ (80049e0 <HAL_MPU_ConfigRegion+0x7c>)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	7b1b      	ldrb	r3, [r3, #12]
 800498c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	7adb      	ldrb	r3, [r3, #11]
 8004992:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004994:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	7a9b      	ldrb	r3, [r3, #10]
 800499a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800499c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	7b5b      	ldrb	r3, [r3, #13]
 80049a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80049a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	7b9b      	ldrb	r3, [r3, #14]
 80049aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80049ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	7bdb      	ldrb	r3, [r3, #15]
 80049b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80049b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	7a5b      	ldrb	r3, [r3, #9]
 80049ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80049bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	7a1b      	ldrb	r3, [r3, #8]
 80049c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80049c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	7812      	ldrb	r2, [r2, #0]
 80049ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80049cc:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80049ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80049d0:	6113      	str	r3, [r2, #16]
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	e000ed90 	.word	0xe000ed90

080049e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80049ec:	f7ff fe66 	bl	80046bc <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e37d      	b.n	80050f8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a66      	ldr	r2, [pc, #408]	@ (8004b9c <HAL_DMA_Init+0x1b8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d04a      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a65      	ldr	r2, [pc, #404]	@ (8004ba0 <HAL_DMA_Init+0x1bc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d045      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a63      	ldr	r2, [pc, #396]	@ (8004ba4 <HAL_DMA_Init+0x1c0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d040      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a62      	ldr	r2, [pc, #392]	@ (8004ba8 <HAL_DMA_Init+0x1c4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d03b      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a60      	ldr	r2, [pc, #384]	@ (8004bac <HAL_DMA_Init+0x1c8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d036      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a5f      	ldr	r2, [pc, #380]	@ (8004bb0 <HAL_DMA_Init+0x1cc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d031      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a5d      	ldr	r2, [pc, #372]	@ (8004bb4 <HAL_DMA_Init+0x1d0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d02c      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a5c      	ldr	r2, [pc, #368]	@ (8004bb8 <HAL_DMA_Init+0x1d4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d027      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5a      	ldr	r2, [pc, #360]	@ (8004bbc <HAL_DMA_Init+0x1d8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d022      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a59      	ldr	r2, [pc, #356]	@ (8004bc0 <HAL_DMA_Init+0x1dc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d01d      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a57      	ldr	r2, [pc, #348]	@ (8004bc4 <HAL_DMA_Init+0x1e0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d018      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a56      	ldr	r2, [pc, #344]	@ (8004bc8 <HAL_DMA_Init+0x1e4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a54      	ldr	r2, [pc, #336]	@ (8004bcc <HAL_DMA_Init+0x1e8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00e      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a53      	ldr	r2, [pc, #332]	@ (8004bd0 <HAL_DMA_Init+0x1ec>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d009      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a51      	ldr	r2, [pc, #324]	@ (8004bd4 <HAL_DMA_Init+0x1f0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d004      	beq.n	8004a9c <HAL_DMA_Init+0xb8>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a50      	ldr	r2, [pc, #320]	@ (8004bd8 <HAL_DMA_Init+0x1f4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d101      	bne.n	8004aa0 <HAL_DMA_Init+0xbc>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <HAL_DMA_Init+0xbe>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 813c 	beq.w	8004d20 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a37      	ldr	r2, [pc, #220]	@ (8004b9c <HAL_DMA_Init+0x1b8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d04a      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a36      	ldr	r2, [pc, #216]	@ (8004ba0 <HAL_DMA_Init+0x1bc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d045      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a34      	ldr	r2, [pc, #208]	@ (8004ba4 <HAL_DMA_Init+0x1c0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d040      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a33      	ldr	r2, [pc, #204]	@ (8004ba8 <HAL_DMA_Init+0x1c4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d03b      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a31      	ldr	r2, [pc, #196]	@ (8004bac <HAL_DMA_Init+0x1c8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d036      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a30      	ldr	r2, [pc, #192]	@ (8004bb0 <HAL_DMA_Init+0x1cc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d031      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb4 <HAL_DMA_Init+0x1d0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d02c      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb8 <HAL_DMA_Init+0x1d4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d027      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004bbc <HAL_DMA_Init+0x1d8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d022      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2a      	ldr	r2, [pc, #168]	@ (8004bc0 <HAL_DMA_Init+0x1dc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d01d      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a28      	ldr	r2, [pc, #160]	@ (8004bc4 <HAL_DMA_Init+0x1e0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d018      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a27      	ldr	r2, [pc, #156]	@ (8004bc8 <HAL_DMA_Init+0x1e4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d013      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a25      	ldr	r2, [pc, #148]	@ (8004bcc <HAL_DMA_Init+0x1e8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00e      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a24      	ldr	r2, [pc, #144]	@ (8004bd0 <HAL_DMA_Init+0x1ec>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d009      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a22      	ldr	r2, [pc, #136]	@ (8004bd4 <HAL_DMA_Init+0x1f0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <HAL_DMA_Init+0x174>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a21      	ldr	r2, [pc, #132]	@ (8004bd8 <HAL_DMA_Init+0x1f4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d108      	bne.n	8004b6a <HAL_DMA_Init+0x186>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e007      	b.n	8004b7a <HAL_DMA_Init+0x196>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0201 	bic.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b7a:	e02f      	b.n	8004bdc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b7c:	f7ff fd9e 	bl	80046bc <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	d928      	bls.n	8004bdc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2203      	movs	r2, #3
 8004b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e2ad      	b.n	80050f8 <HAL_DMA_Init+0x714>
 8004b9c:	40020010 	.word	0x40020010
 8004ba0:	40020028 	.word	0x40020028
 8004ba4:	40020040 	.word	0x40020040
 8004ba8:	40020058 	.word	0x40020058
 8004bac:	40020070 	.word	0x40020070
 8004bb0:	40020088 	.word	0x40020088
 8004bb4:	400200a0 	.word	0x400200a0
 8004bb8:	400200b8 	.word	0x400200b8
 8004bbc:	40020410 	.word	0x40020410
 8004bc0:	40020428 	.word	0x40020428
 8004bc4:	40020440 	.word	0x40020440
 8004bc8:	40020458 	.word	0x40020458
 8004bcc:	40020470 	.word	0x40020470
 8004bd0:	40020488 	.word	0x40020488
 8004bd4:	400204a0 	.word	0x400204a0
 8004bd8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1c8      	bne.n	8004b7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4b73      	ldr	r3, [pc, #460]	@ (8004dc4 <HAL_DMA_Init+0x3e0>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d107      	bne.n	8004c40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b28      	cmp	r3, #40	@ 0x28
 8004c46:	d903      	bls.n	8004c50 <HAL_DMA_Init+0x26c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c4e:	d91f      	bls.n	8004c90 <HAL_DMA_Init+0x2ac>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c56:	d903      	bls.n	8004c60 <HAL_DMA_Init+0x27c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b42      	cmp	r3, #66	@ 0x42
 8004c5e:	d917      	bls.n	8004c90 <HAL_DMA_Init+0x2ac>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b46      	cmp	r3, #70	@ 0x46
 8004c66:	d903      	bls.n	8004c70 <HAL_DMA_Init+0x28c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b48      	cmp	r3, #72	@ 0x48
 8004c6e:	d90f      	bls.n	8004c90 <HAL_DMA_Init+0x2ac>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b4e      	cmp	r3, #78	@ 0x4e
 8004c76:	d903      	bls.n	8004c80 <HAL_DMA_Init+0x29c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b52      	cmp	r3, #82	@ 0x52
 8004c7e:	d907      	bls.n	8004c90 <HAL_DMA_Init+0x2ac>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b73      	cmp	r3, #115	@ 0x73
 8004c86:	d905      	bls.n	8004c94 <HAL_DMA_Init+0x2b0>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b77      	cmp	r3, #119	@ 0x77
 8004c8e:	d801      	bhi.n	8004c94 <HAL_DMA_Init+0x2b0>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_DMA_Init+0x2b2>
 8004c94:	2300      	movs	r3, #0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ca0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f023 0307 	bic.w	r3, r3, #7
 8004cb8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d117      	bne.n	8004cfc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00e      	beq.n	8004cfc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f002 fbd4 	bl	800748c <DMA_CheckFifoParam>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2240      	movs	r2, #64	@ 0x40
 8004cee:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e1fd      	b.n	80050f8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f002 fb0f 	bl	8007328 <DMA_CalcBaseAndBitshift>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	223f      	movs	r2, #63	@ 0x3f
 8004d18:	409a      	lsls	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	609a      	str	r2, [r3, #8]
 8004d1e:	e0fd      	b.n	8004f1c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a28      	ldr	r2, [pc, #160]	@ (8004dc8 <HAL_DMA_Init+0x3e4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d04a      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a27      	ldr	r2, [pc, #156]	@ (8004dcc <HAL_DMA_Init+0x3e8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d045      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a25      	ldr	r2, [pc, #148]	@ (8004dd0 <HAL_DMA_Init+0x3ec>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d040      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <HAL_DMA_Init+0x3f0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d03b      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	@ (8004dd8 <HAL_DMA_Init+0x3f4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d036      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a21      	ldr	r2, [pc, #132]	@ (8004ddc <HAL_DMA_Init+0x3f8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d031      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1f      	ldr	r2, [pc, #124]	@ (8004de0 <HAL_DMA_Init+0x3fc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d02c      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004de4 <HAL_DMA_Init+0x400>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d027      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1c      	ldr	r2, [pc, #112]	@ (8004de8 <HAL_DMA_Init+0x404>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d022      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dec <HAL_DMA_Init+0x408>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d01d      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a19      	ldr	r2, [pc, #100]	@ (8004df0 <HAL_DMA_Init+0x40c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d018      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a18      	ldr	r2, [pc, #96]	@ (8004df4 <HAL_DMA_Init+0x410>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d013      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a16      	ldr	r2, [pc, #88]	@ (8004df8 <HAL_DMA_Init+0x414>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00e      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a15      	ldr	r2, [pc, #84]	@ (8004dfc <HAL_DMA_Init+0x418>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d009      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a13      	ldr	r2, [pc, #76]	@ (8004e00 <HAL_DMA_Init+0x41c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <HAL_DMA_Init+0x3dc>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a12      	ldr	r2, [pc, #72]	@ (8004e04 <HAL_DMA_Init+0x420>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d123      	bne.n	8004e08 <HAL_DMA_Init+0x424>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e022      	b.n	8004e0a <HAL_DMA_Init+0x426>
 8004dc4:	fe10803f 	.word	0xfe10803f
 8004dc8:	48022c08 	.word	0x48022c08
 8004dcc:	48022c1c 	.word	0x48022c1c
 8004dd0:	48022c30 	.word	0x48022c30
 8004dd4:	48022c44 	.word	0x48022c44
 8004dd8:	48022c58 	.word	0x48022c58
 8004ddc:	48022c6c 	.word	0x48022c6c
 8004de0:	48022c80 	.word	0x48022c80
 8004de4:	48022c94 	.word	0x48022c94
 8004de8:	58025408 	.word	0x58025408
 8004dec:	5802541c 	.word	0x5802541c
 8004df0:	58025430 	.word	0x58025430
 8004df4:	58025444 	.word	0x58025444
 8004df8:	58025458 	.word	0x58025458
 8004dfc:	5802546c 	.word	0x5802546c
 8004e00:	58025480 	.word	0x58025480
 8004e04:	58025494 	.word	0x58025494
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d07d      	beq.n	8004f0a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a7f      	ldr	r2, [pc, #508]	@ (8005010 <HAL_DMA_Init+0x62c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d021      	beq.n	8004e5c <HAL_DMA_Init+0x478>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a7d      	ldr	r2, [pc, #500]	@ (8005014 <HAL_DMA_Init+0x630>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01c      	beq.n	8004e5c <HAL_DMA_Init+0x478>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a7c      	ldr	r2, [pc, #496]	@ (8005018 <HAL_DMA_Init+0x634>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d017      	beq.n	8004e5c <HAL_DMA_Init+0x478>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a7a      	ldr	r2, [pc, #488]	@ (800501c <HAL_DMA_Init+0x638>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d012      	beq.n	8004e5c <HAL_DMA_Init+0x478>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a79      	ldr	r2, [pc, #484]	@ (8005020 <HAL_DMA_Init+0x63c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00d      	beq.n	8004e5c <HAL_DMA_Init+0x478>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a77      	ldr	r2, [pc, #476]	@ (8005024 <HAL_DMA_Init+0x640>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d008      	beq.n	8004e5c <HAL_DMA_Init+0x478>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a76      	ldr	r2, [pc, #472]	@ (8005028 <HAL_DMA_Init+0x644>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <HAL_DMA_Init+0x478>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a74      	ldr	r2, [pc, #464]	@ (800502c <HAL_DMA_Init+0x648>)
 8004e5a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4b6e      	ldr	r3, [pc, #440]	@ (8005030 <HAL_DMA_Init+0x64c>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b40      	cmp	r3, #64	@ 0x40
 8004e82:	d008      	beq.n	8004e96 <HAL_DMA_Init+0x4b2>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b80      	cmp	r3, #128	@ 0x80
 8004e8a:	d102      	bne.n	8004e92 <HAL_DMA_Init+0x4ae>
 8004e8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e90:	e002      	b.n	8004e98 <HAL_DMA_Init+0x4b4>
 8004e92:	2300      	movs	r3, #0
 8004e94:	e000      	b.n	8004e98 <HAL_DMA_Init+0x4b4>
 8004e96:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	68d2      	ldr	r2, [r2, #12]
 8004e9c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e9e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ea6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004eae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004eb6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ebe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ec6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	4b55      	ldr	r3, [pc, #340]	@ (8005034 <HAL_DMA_Init+0x650>)
 8004ede:	4413      	add	r3, r2
 8004ee0:	4a55      	ldr	r2, [pc, #340]	@ (8005038 <HAL_DMA_Init+0x654>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	009a      	lsls	r2, r3, #2
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f002 fa1a 	bl	8007328 <DMA_CalcBaseAndBitshift>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efc:	f003 031f 	and.w	r3, r3, #31
 8004f00:	2201      	movs	r2, #1
 8004f02:	409a      	lsls	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	605a      	str	r2, [r3, #4]
 8004f08:	e008      	b.n	8004f1c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2240      	movs	r2, #64	@ 0x40
 8004f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2203      	movs	r2, #3
 8004f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0ed      	b.n	80050f8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a46      	ldr	r2, [pc, #280]	@ (800503c <HAL_DMA_Init+0x658>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d072      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a45      	ldr	r2, [pc, #276]	@ (8005040 <HAL_DMA_Init+0x65c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d06d      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a43      	ldr	r2, [pc, #268]	@ (8005044 <HAL_DMA_Init+0x660>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d068      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a42      	ldr	r2, [pc, #264]	@ (8005048 <HAL_DMA_Init+0x664>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d063      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a40      	ldr	r2, [pc, #256]	@ (800504c <HAL_DMA_Init+0x668>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d05e      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a3f      	ldr	r2, [pc, #252]	@ (8005050 <HAL_DMA_Init+0x66c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d059      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a3d      	ldr	r2, [pc, #244]	@ (8005054 <HAL_DMA_Init+0x670>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d054      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a3c      	ldr	r2, [pc, #240]	@ (8005058 <HAL_DMA_Init+0x674>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d04f      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a3a      	ldr	r2, [pc, #232]	@ (800505c <HAL_DMA_Init+0x678>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d04a      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a39      	ldr	r2, [pc, #228]	@ (8005060 <HAL_DMA_Init+0x67c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d045      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a37      	ldr	r2, [pc, #220]	@ (8005064 <HAL_DMA_Init+0x680>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d040      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a36      	ldr	r2, [pc, #216]	@ (8005068 <HAL_DMA_Init+0x684>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d03b      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a34      	ldr	r2, [pc, #208]	@ (800506c <HAL_DMA_Init+0x688>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d036      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a33      	ldr	r2, [pc, #204]	@ (8005070 <HAL_DMA_Init+0x68c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d031      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a31      	ldr	r2, [pc, #196]	@ (8005074 <HAL_DMA_Init+0x690>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d02c      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a30      	ldr	r2, [pc, #192]	@ (8005078 <HAL_DMA_Init+0x694>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d027      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a13      	ldr	r2, [pc, #76]	@ (8005010 <HAL_DMA_Init+0x62c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d022      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a12      	ldr	r2, [pc, #72]	@ (8005014 <HAL_DMA_Init+0x630>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d01d      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a10      	ldr	r2, [pc, #64]	@ (8005018 <HAL_DMA_Init+0x634>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d018      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a0f      	ldr	r2, [pc, #60]	@ (800501c <HAL_DMA_Init+0x638>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d013      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8005020 <HAL_DMA_Init+0x63c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00e      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8005024 <HAL_DMA_Init+0x640>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d009      	beq.n	800500c <HAL_DMA_Init+0x628>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8005028 <HAL_DMA_Init+0x644>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <HAL_DMA_Init+0x628>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a09      	ldr	r2, [pc, #36]	@ (800502c <HAL_DMA_Init+0x648>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d137      	bne.n	800507c <HAL_DMA_Init+0x698>
 800500c:	2301      	movs	r3, #1
 800500e:	e036      	b.n	800507e <HAL_DMA_Init+0x69a>
 8005010:	58025408 	.word	0x58025408
 8005014:	5802541c 	.word	0x5802541c
 8005018:	58025430 	.word	0x58025430
 800501c:	58025444 	.word	0x58025444
 8005020:	58025458 	.word	0x58025458
 8005024:	5802546c 	.word	0x5802546c
 8005028:	58025480 	.word	0x58025480
 800502c:	58025494 	.word	0x58025494
 8005030:	fffe000f 	.word	0xfffe000f
 8005034:	a7fdabf8 	.word	0xa7fdabf8
 8005038:	cccccccd 	.word	0xcccccccd
 800503c:	40020010 	.word	0x40020010
 8005040:	40020028 	.word	0x40020028
 8005044:	40020040 	.word	0x40020040
 8005048:	40020058 	.word	0x40020058
 800504c:	40020070 	.word	0x40020070
 8005050:	40020088 	.word	0x40020088
 8005054:	400200a0 	.word	0x400200a0
 8005058:	400200b8 	.word	0x400200b8
 800505c:	40020410 	.word	0x40020410
 8005060:	40020428 	.word	0x40020428
 8005064:	40020440 	.word	0x40020440
 8005068:	40020458 	.word	0x40020458
 800506c:	40020470 	.word	0x40020470
 8005070:	40020488 	.word	0x40020488
 8005074:	400204a0 	.word	0x400204a0
 8005078:	400204b8 	.word	0x400204b8
 800507c:	2300      	movs	r3, #0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d032      	beq.n	80050e8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f002 fa7e 	bl	8007584 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b80      	cmp	r3, #128	@ 0x80
 800508e:	d102      	bne.n	8005096 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050aa:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d010      	beq.n	80050d6 <HAL_DMA_Init+0x6f2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d80c      	bhi.n	80050d6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f002 fafb 	bl	80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	e008      	b.n	80050e8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e226      	b.n	800556a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_DMA_Start_IT+0x2a>
 8005126:	2302      	movs	r3, #2
 8005128:	e21f      	b.n	800556a <HAL_DMA_Start_IT+0x46a>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b01      	cmp	r3, #1
 800513c:	f040 820a 	bne.w	8005554 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a68      	ldr	r2, [pc, #416]	@ (80052f4 <HAL_DMA_Start_IT+0x1f4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d04a      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a66      	ldr	r2, [pc, #408]	@ (80052f8 <HAL_DMA_Start_IT+0x1f8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d045      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a65      	ldr	r2, [pc, #404]	@ (80052fc <HAL_DMA_Start_IT+0x1fc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d040      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a63      	ldr	r2, [pc, #396]	@ (8005300 <HAL_DMA_Start_IT+0x200>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d03b      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a62      	ldr	r2, [pc, #392]	@ (8005304 <HAL_DMA_Start_IT+0x204>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d036      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a60      	ldr	r2, [pc, #384]	@ (8005308 <HAL_DMA_Start_IT+0x208>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d031      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a5f      	ldr	r2, [pc, #380]	@ (800530c <HAL_DMA_Start_IT+0x20c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d02c      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a5d      	ldr	r2, [pc, #372]	@ (8005310 <HAL_DMA_Start_IT+0x210>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d027      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a5c      	ldr	r2, [pc, #368]	@ (8005314 <HAL_DMA_Start_IT+0x214>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d022      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a5a      	ldr	r2, [pc, #360]	@ (8005318 <HAL_DMA_Start_IT+0x218>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01d      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a59      	ldr	r2, [pc, #356]	@ (800531c <HAL_DMA_Start_IT+0x21c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d018      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a57      	ldr	r2, [pc, #348]	@ (8005320 <HAL_DMA_Start_IT+0x220>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d013      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a56      	ldr	r2, [pc, #344]	@ (8005324 <HAL_DMA_Start_IT+0x224>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00e      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a54      	ldr	r2, [pc, #336]	@ (8005328 <HAL_DMA_Start_IT+0x228>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d009      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a53      	ldr	r2, [pc, #332]	@ (800532c <HAL_DMA_Start_IT+0x22c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_DMA_Start_IT+0xee>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a51      	ldr	r2, [pc, #324]	@ (8005330 <HAL_DMA_Start_IT+0x230>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d108      	bne.n	8005200 <HAL_DMA_Start_IT+0x100>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e007      	b.n	8005210 <HAL_DMA_Start_IT+0x110>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0201 	bic.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f001 fea2 	bl	8006f60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a34      	ldr	r2, [pc, #208]	@ (80052f4 <HAL_DMA_Start_IT+0x1f4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d04a      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a33      	ldr	r2, [pc, #204]	@ (80052f8 <HAL_DMA_Start_IT+0x1f8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d045      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a31      	ldr	r2, [pc, #196]	@ (80052fc <HAL_DMA_Start_IT+0x1fc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d040      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a30      	ldr	r2, [pc, #192]	@ (8005300 <HAL_DMA_Start_IT+0x200>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d03b      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a2e      	ldr	r2, [pc, #184]	@ (8005304 <HAL_DMA_Start_IT+0x204>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d036      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2d      	ldr	r2, [pc, #180]	@ (8005308 <HAL_DMA_Start_IT+0x208>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d031      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2b      	ldr	r2, [pc, #172]	@ (800530c <HAL_DMA_Start_IT+0x20c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d02c      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a2a      	ldr	r2, [pc, #168]	@ (8005310 <HAL_DMA_Start_IT+0x210>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d027      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a28      	ldr	r2, [pc, #160]	@ (8005314 <HAL_DMA_Start_IT+0x214>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d022      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a27      	ldr	r2, [pc, #156]	@ (8005318 <HAL_DMA_Start_IT+0x218>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d01d      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a25      	ldr	r2, [pc, #148]	@ (800531c <HAL_DMA_Start_IT+0x21c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d018      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a24      	ldr	r2, [pc, #144]	@ (8005320 <HAL_DMA_Start_IT+0x220>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a22      	ldr	r2, [pc, #136]	@ (8005324 <HAL_DMA_Start_IT+0x224>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a21      	ldr	r2, [pc, #132]	@ (8005328 <HAL_DMA_Start_IT+0x228>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d009      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1f      	ldr	r2, [pc, #124]	@ (800532c <HAL_DMA_Start_IT+0x22c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_DMA_Start_IT+0x1bc>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005330 <HAL_DMA_Start_IT+0x230>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d101      	bne.n	80052c0 <HAL_DMA_Start_IT+0x1c0>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <HAL_DMA_Start_IT+0x1c2>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d036      	beq.n	8005334 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f023 021e 	bic.w	r2, r3, #30
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0216 	orr.w	r2, r2, #22
 80052d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d03e      	beq.n	8005360 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0208 	orr.w	r2, r2, #8
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e035      	b.n	8005360 <HAL_DMA_Start_IT+0x260>
 80052f4:	40020010 	.word	0x40020010
 80052f8:	40020028 	.word	0x40020028
 80052fc:	40020040 	.word	0x40020040
 8005300:	40020058 	.word	0x40020058
 8005304:	40020070 	.word	0x40020070
 8005308:	40020088 	.word	0x40020088
 800530c:	400200a0 	.word	0x400200a0
 8005310:	400200b8 	.word	0x400200b8
 8005314:	40020410 	.word	0x40020410
 8005318:	40020428 	.word	0x40020428
 800531c:	40020440 	.word	0x40020440
 8005320:	40020458 	.word	0x40020458
 8005324:	40020470 	.word	0x40020470
 8005328:	40020488 	.word	0x40020488
 800532c:	400204a0 	.word	0x400204a0
 8005330:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 020e 	bic.w	r2, r3, #14
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 020a 	orr.w	r2, r2, #10
 8005346:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0204 	orr.w	r2, r2, #4
 800535e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a83      	ldr	r2, [pc, #524]	@ (8005574 <HAL_DMA_Start_IT+0x474>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d072      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a82      	ldr	r2, [pc, #520]	@ (8005578 <HAL_DMA_Start_IT+0x478>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d06d      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a80      	ldr	r2, [pc, #512]	@ (800557c <HAL_DMA_Start_IT+0x47c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d068      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a7f      	ldr	r2, [pc, #508]	@ (8005580 <HAL_DMA_Start_IT+0x480>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d063      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a7d      	ldr	r2, [pc, #500]	@ (8005584 <HAL_DMA_Start_IT+0x484>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d05e      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a7c      	ldr	r2, [pc, #496]	@ (8005588 <HAL_DMA_Start_IT+0x488>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d059      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a7a      	ldr	r2, [pc, #488]	@ (800558c <HAL_DMA_Start_IT+0x48c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d054      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a79      	ldr	r2, [pc, #484]	@ (8005590 <HAL_DMA_Start_IT+0x490>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d04f      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a77      	ldr	r2, [pc, #476]	@ (8005594 <HAL_DMA_Start_IT+0x494>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d04a      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a76      	ldr	r2, [pc, #472]	@ (8005598 <HAL_DMA_Start_IT+0x498>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d045      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a74      	ldr	r2, [pc, #464]	@ (800559c <HAL_DMA_Start_IT+0x49c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d040      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a73      	ldr	r2, [pc, #460]	@ (80055a0 <HAL_DMA_Start_IT+0x4a0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d03b      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a71      	ldr	r2, [pc, #452]	@ (80055a4 <HAL_DMA_Start_IT+0x4a4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d036      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a70      	ldr	r2, [pc, #448]	@ (80055a8 <HAL_DMA_Start_IT+0x4a8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d031      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a6e      	ldr	r2, [pc, #440]	@ (80055ac <HAL_DMA_Start_IT+0x4ac>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d02c      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a6d      	ldr	r2, [pc, #436]	@ (80055b0 <HAL_DMA_Start_IT+0x4b0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d027      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a6b      	ldr	r2, [pc, #428]	@ (80055b4 <HAL_DMA_Start_IT+0x4b4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d022      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a6a      	ldr	r2, [pc, #424]	@ (80055b8 <HAL_DMA_Start_IT+0x4b8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d01d      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a68      	ldr	r2, [pc, #416]	@ (80055bc <HAL_DMA_Start_IT+0x4bc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d018      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a67      	ldr	r2, [pc, #412]	@ (80055c0 <HAL_DMA_Start_IT+0x4c0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a65      	ldr	r2, [pc, #404]	@ (80055c4 <HAL_DMA_Start_IT+0x4c4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00e      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a64      	ldr	r2, [pc, #400]	@ (80055c8 <HAL_DMA_Start_IT+0x4c8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d009      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a62      	ldr	r2, [pc, #392]	@ (80055cc <HAL_DMA_Start_IT+0x4cc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_DMA_Start_IT+0x350>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a61      	ldr	r2, [pc, #388]	@ (80055d0 <HAL_DMA_Start_IT+0x4d0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_DMA_Start_IT+0x354>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <HAL_DMA_Start_IT+0x356>
 8005454:	2300      	movs	r3, #0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01a      	beq.n	8005490 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005472:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005476:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800548a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800548e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a37      	ldr	r2, [pc, #220]	@ (8005574 <HAL_DMA_Start_IT+0x474>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d04a      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a36      	ldr	r2, [pc, #216]	@ (8005578 <HAL_DMA_Start_IT+0x478>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d045      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a34      	ldr	r2, [pc, #208]	@ (800557c <HAL_DMA_Start_IT+0x47c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d040      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a33      	ldr	r2, [pc, #204]	@ (8005580 <HAL_DMA_Start_IT+0x480>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d03b      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a31      	ldr	r2, [pc, #196]	@ (8005584 <HAL_DMA_Start_IT+0x484>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d036      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a30      	ldr	r2, [pc, #192]	@ (8005588 <HAL_DMA_Start_IT+0x488>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d031      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a2e      	ldr	r2, [pc, #184]	@ (800558c <HAL_DMA_Start_IT+0x48c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d02c      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a2d      	ldr	r2, [pc, #180]	@ (8005590 <HAL_DMA_Start_IT+0x490>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d027      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005594 <HAL_DMA_Start_IT+0x494>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d022      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005598 <HAL_DMA_Start_IT+0x498>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d01d      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a28      	ldr	r2, [pc, #160]	@ (800559c <HAL_DMA_Start_IT+0x49c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d018      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a27      	ldr	r2, [pc, #156]	@ (80055a0 <HAL_DMA_Start_IT+0x4a0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a25      	ldr	r2, [pc, #148]	@ (80055a4 <HAL_DMA_Start_IT+0x4a4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00e      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a24      	ldr	r2, [pc, #144]	@ (80055a8 <HAL_DMA_Start_IT+0x4a8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d009      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a22      	ldr	r2, [pc, #136]	@ (80055ac <HAL_DMA_Start_IT+0x4ac>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <HAL_DMA_Start_IT+0x430>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a21      	ldr	r2, [pc, #132]	@ (80055b0 <HAL_DMA_Start_IT+0x4b0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d108      	bne.n	8005542 <HAL_DMA_Start_IT+0x442>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	e012      	b.n	8005568 <HAL_DMA_Start_IT+0x468>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0201 	orr.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e009      	b.n	8005568 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800555a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40020010 	.word	0x40020010
 8005578:	40020028 	.word	0x40020028
 800557c:	40020040 	.word	0x40020040
 8005580:	40020058 	.word	0x40020058
 8005584:	40020070 	.word	0x40020070
 8005588:	40020088 	.word	0x40020088
 800558c:	400200a0 	.word	0x400200a0
 8005590:	400200b8 	.word	0x400200b8
 8005594:	40020410 	.word	0x40020410
 8005598:	40020428 	.word	0x40020428
 800559c:	40020440 	.word	0x40020440
 80055a0:	40020458 	.word	0x40020458
 80055a4:	40020470 	.word	0x40020470
 80055a8:	40020488 	.word	0x40020488
 80055ac:	400204a0 	.word	0x400204a0
 80055b0:	400204b8 	.word	0x400204b8
 80055b4:	58025408 	.word	0x58025408
 80055b8:	5802541c 	.word	0x5802541c
 80055bc:	58025430 	.word	0x58025430
 80055c0:	58025444 	.word	0x58025444
 80055c4:	58025458 	.word	0x58025458
 80055c8:	5802546c 	.word	0x5802546c
 80055cc:	58025480 	.word	0x58025480
 80055d0:	58025494 	.word	0x58025494

080055d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80055dc:	f7ff f86e 	bl	80046bc <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e2dc      	b.n	8005ba6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d008      	beq.n	800560a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2280      	movs	r2, #128	@ 0x80
 80055fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e2cd      	b.n	8005ba6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a76      	ldr	r2, [pc, #472]	@ (80057e8 <HAL_DMA_Abort+0x214>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d04a      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a74      	ldr	r2, [pc, #464]	@ (80057ec <HAL_DMA_Abort+0x218>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d045      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a73      	ldr	r2, [pc, #460]	@ (80057f0 <HAL_DMA_Abort+0x21c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d040      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a71      	ldr	r2, [pc, #452]	@ (80057f4 <HAL_DMA_Abort+0x220>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d03b      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a70      	ldr	r2, [pc, #448]	@ (80057f8 <HAL_DMA_Abort+0x224>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d036      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a6e      	ldr	r2, [pc, #440]	@ (80057fc <HAL_DMA_Abort+0x228>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d031      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a6d      	ldr	r2, [pc, #436]	@ (8005800 <HAL_DMA_Abort+0x22c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d02c      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a6b      	ldr	r2, [pc, #428]	@ (8005804 <HAL_DMA_Abort+0x230>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d027      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a6a      	ldr	r2, [pc, #424]	@ (8005808 <HAL_DMA_Abort+0x234>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d022      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a68      	ldr	r2, [pc, #416]	@ (800580c <HAL_DMA_Abort+0x238>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01d      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a67      	ldr	r2, [pc, #412]	@ (8005810 <HAL_DMA_Abort+0x23c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d018      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a65      	ldr	r2, [pc, #404]	@ (8005814 <HAL_DMA_Abort+0x240>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a64      	ldr	r2, [pc, #400]	@ (8005818 <HAL_DMA_Abort+0x244>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00e      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a62      	ldr	r2, [pc, #392]	@ (800581c <HAL_DMA_Abort+0x248>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d009      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a61      	ldr	r2, [pc, #388]	@ (8005820 <HAL_DMA_Abort+0x24c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d004      	beq.n	80056aa <HAL_DMA_Abort+0xd6>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a5f      	ldr	r2, [pc, #380]	@ (8005824 <HAL_DMA_Abort+0x250>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d101      	bne.n	80056ae <HAL_DMA_Abort+0xda>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <HAL_DMA_Abort+0xdc>
 80056ae:	2300      	movs	r3, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d013      	beq.n	80056dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 021e 	bic.w	r2, r2, #30
 80056c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	e00a      	b.n	80056f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 020e 	bic.w	r2, r2, #14
 80056ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a3c      	ldr	r2, [pc, #240]	@ (80057e8 <HAL_DMA_Abort+0x214>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d072      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a3a      	ldr	r2, [pc, #232]	@ (80057ec <HAL_DMA_Abort+0x218>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d06d      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a39      	ldr	r2, [pc, #228]	@ (80057f0 <HAL_DMA_Abort+0x21c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d068      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a37      	ldr	r2, [pc, #220]	@ (80057f4 <HAL_DMA_Abort+0x220>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d063      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a36      	ldr	r2, [pc, #216]	@ (80057f8 <HAL_DMA_Abort+0x224>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d05e      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a34      	ldr	r2, [pc, #208]	@ (80057fc <HAL_DMA_Abort+0x228>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d059      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a33      	ldr	r2, [pc, #204]	@ (8005800 <HAL_DMA_Abort+0x22c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d054      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a31      	ldr	r2, [pc, #196]	@ (8005804 <HAL_DMA_Abort+0x230>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d04f      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a30      	ldr	r2, [pc, #192]	@ (8005808 <HAL_DMA_Abort+0x234>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d04a      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a2e      	ldr	r2, [pc, #184]	@ (800580c <HAL_DMA_Abort+0x238>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d045      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2d      	ldr	r2, [pc, #180]	@ (8005810 <HAL_DMA_Abort+0x23c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d040      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2b      	ldr	r2, [pc, #172]	@ (8005814 <HAL_DMA_Abort+0x240>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d03b      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2a      	ldr	r2, [pc, #168]	@ (8005818 <HAL_DMA_Abort+0x244>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d036      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a28      	ldr	r2, [pc, #160]	@ (800581c <HAL_DMA_Abort+0x248>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d031      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a27      	ldr	r2, [pc, #156]	@ (8005820 <HAL_DMA_Abort+0x24c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d02c      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a25      	ldr	r2, [pc, #148]	@ (8005824 <HAL_DMA_Abort+0x250>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d027      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a24      	ldr	r2, [pc, #144]	@ (8005828 <HAL_DMA_Abort+0x254>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d022      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a22      	ldr	r2, [pc, #136]	@ (800582c <HAL_DMA_Abort+0x258>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01d      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a21      	ldr	r2, [pc, #132]	@ (8005830 <HAL_DMA_Abort+0x25c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d018      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005834 <HAL_DMA_Abort+0x260>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1e      	ldr	r2, [pc, #120]	@ (8005838 <HAL_DMA_Abort+0x264>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1c      	ldr	r2, [pc, #112]	@ (800583c <HAL_DMA_Abort+0x268>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005840 <HAL_DMA_Abort+0x26c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_DMA_Abort+0x20e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a19      	ldr	r2, [pc, #100]	@ (8005844 <HAL_DMA_Abort+0x270>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d132      	bne.n	8005848 <HAL_DMA_Abort+0x274>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e031      	b.n	800584a <HAL_DMA_Abort+0x276>
 80057e6:	bf00      	nop
 80057e8:	40020010 	.word	0x40020010
 80057ec:	40020028 	.word	0x40020028
 80057f0:	40020040 	.word	0x40020040
 80057f4:	40020058 	.word	0x40020058
 80057f8:	40020070 	.word	0x40020070
 80057fc:	40020088 	.word	0x40020088
 8005800:	400200a0 	.word	0x400200a0
 8005804:	400200b8 	.word	0x400200b8
 8005808:	40020410 	.word	0x40020410
 800580c:	40020428 	.word	0x40020428
 8005810:	40020440 	.word	0x40020440
 8005814:	40020458 	.word	0x40020458
 8005818:	40020470 	.word	0x40020470
 800581c:	40020488 	.word	0x40020488
 8005820:	400204a0 	.word	0x400204a0
 8005824:	400204b8 	.word	0x400204b8
 8005828:	58025408 	.word	0x58025408
 800582c:	5802541c 	.word	0x5802541c
 8005830:	58025430 	.word	0x58025430
 8005834:	58025444 	.word	0x58025444
 8005838:	58025458 	.word	0x58025458
 800583c:	5802546c 	.word	0x5802546c
 8005840:	58025480 	.word	0x58025480
 8005844:	58025494 	.word	0x58025494
 8005848:	2300      	movs	r3, #0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005858:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800585c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a6d      	ldr	r2, [pc, #436]	@ (8005a18 <HAL_DMA_Abort+0x444>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d04a      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a6b      	ldr	r2, [pc, #428]	@ (8005a1c <HAL_DMA_Abort+0x448>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d045      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a6a      	ldr	r2, [pc, #424]	@ (8005a20 <HAL_DMA_Abort+0x44c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d040      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a68      	ldr	r2, [pc, #416]	@ (8005a24 <HAL_DMA_Abort+0x450>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d03b      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a67      	ldr	r2, [pc, #412]	@ (8005a28 <HAL_DMA_Abort+0x454>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d036      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a65      	ldr	r2, [pc, #404]	@ (8005a2c <HAL_DMA_Abort+0x458>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d031      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a64      	ldr	r2, [pc, #400]	@ (8005a30 <HAL_DMA_Abort+0x45c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d02c      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a62      	ldr	r2, [pc, #392]	@ (8005a34 <HAL_DMA_Abort+0x460>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d027      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a61      	ldr	r2, [pc, #388]	@ (8005a38 <HAL_DMA_Abort+0x464>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d022      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a5f      	ldr	r2, [pc, #380]	@ (8005a3c <HAL_DMA_Abort+0x468>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d01d      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005a40 <HAL_DMA_Abort+0x46c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d018      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a5c      	ldr	r2, [pc, #368]	@ (8005a44 <HAL_DMA_Abort+0x470>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d013      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a5b      	ldr	r2, [pc, #364]	@ (8005a48 <HAL_DMA_Abort+0x474>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00e      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a59      	ldr	r2, [pc, #356]	@ (8005a4c <HAL_DMA_Abort+0x478>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a58      	ldr	r2, [pc, #352]	@ (8005a50 <HAL_DMA_Abort+0x47c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_DMA_Abort+0x32a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a56      	ldr	r2, [pc, #344]	@ (8005a54 <HAL_DMA_Abort+0x480>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d108      	bne.n	8005910 <HAL_DMA_Abort+0x33c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0201 	bic.w	r2, r2, #1
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e007      	b.n	8005920 <HAL_DMA_Abort+0x34c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005920:	e013      	b.n	800594a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005922:	f7fe fecb 	bl	80046bc <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b05      	cmp	r3, #5
 800592e:	d90c      	bls.n	800594a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2203      	movs	r2, #3
 800593a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e12d      	b.n	8005ba6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e5      	bne.n	8005922 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a2f      	ldr	r2, [pc, #188]	@ (8005a18 <HAL_DMA_Abort+0x444>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d04a      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a2d      	ldr	r2, [pc, #180]	@ (8005a1c <HAL_DMA_Abort+0x448>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d045      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a2c      	ldr	r2, [pc, #176]	@ (8005a20 <HAL_DMA_Abort+0x44c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d040      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a2a      	ldr	r2, [pc, #168]	@ (8005a24 <HAL_DMA_Abort+0x450>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d03b      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a29      	ldr	r2, [pc, #164]	@ (8005a28 <HAL_DMA_Abort+0x454>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d036      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a27      	ldr	r2, [pc, #156]	@ (8005a2c <HAL_DMA_Abort+0x458>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d031      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a26      	ldr	r2, [pc, #152]	@ (8005a30 <HAL_DMA_Abort+0x45c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d02c      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a24      	ldr	r2, [pc, #144]	@ (8005a34 <HAL_DMA_Abort+0x460>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d027      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a23      	ldr	r2, [pc, #140]	@ (8005a38 <HAL_DMA_Abort+0x464>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d022      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a21      	ldr	r2, [pc, #132]	@ (8005a3c <HAL_DMA_Abort+0x468>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d01d      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a20      	ldr	r2, [pc, #128]	@ (8005a40 <HAL_DMA_Abort+0x46c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d018      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1e      	ldr	r2, [pc, #120]	@ (8005a44 <HAL_DMA_Abort+0x470>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d013      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005a48 <HAL_DMA_Abort+0x474>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00e      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a4c <HAL_DMA_Abort+0x478>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d009      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a50 <HAL_DMA_Abort+0x47c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d004      	beq.n	80059f6 <HAL_DMA_Abort+0x422>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a18      	ldr	r2, [pc, #96]	@ (8005a54 <HAL_DMA_Abort+0x480>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d101      	bne.n	80059fa <HAL_DMA_Abort+0x426>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <HAL_DMA_Abort+0x428>
 80059fa:	2300      	movs	r3, #0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d02b      	beq.n	8005a58 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a04:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a0a:	f003 031f 	and.w	r3, r3, #31
 8005a0e:	223f      	movs	r2, #63	@ 0x3f
 8005a10:	409a      	lsls	r2, r3
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	609a      	str	r2, [r3, #8]
 8005a16:	e02a      	b.n	8005a6e <HAL_DMA_Abort+0x49a>
 8005a18:	40020010 	.word	0x40020010
 8005a1c:	40020028 	.word	0x40020028
 8005a20:	40020040 	.word	0x40020040
 8005a24:	40020058 	.word	0x40020058
 8005a28:	40020070 	.word	0x40020070
 8005a2c:	40020088 	.word	0x40020088
 8005a30:	400200a0 	.word	0x400200a0
 8005a34:	400200b8 	.word	0x400200b8
 8005a38:	40020410 	.word	0x40020410
 8005a3c:	40020428 	.word	0x40020428
 8005a40:	40020440 	.word	0x40020440
 8005a44:	40020458 	.word	0x40020458
 8005a48:	40020470 	.word	0x40020470
 8005a4c:	40020488 	.word	0x40020488
 8005a50:	400204a0 	.word	0x400204a0
 8005a54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	2201      	movs	r2, #1
 8005a68:	409a      	lsls	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a4f      	ldr	r2, [pc, #316]	@ (8005bb0 <HAL_DMA_Abort+0x5dc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d072      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a4d      	ldr	r2, [pc, #308]	@ (8005bb4 <HAL_DMA_Abort+0x5e0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d06d      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a4c      	ldr	r2, [pc, #304]	@ (8005bb8 <HAL_DMA_Abort+0x5e4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d068      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a4a      	ldr	r2, [pc, #296]	@ (8005bbc <HAL_DMA_Abort+0x5e8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d063      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a49      	ldr	r2, [pc, #292]	@ (8005bc0 <HAL_DMA_Abort+0x5ec>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d05e      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a47      	ldr	r2, [pc, #284]	@ (8005bc4 <HAL_DMA_Abort+0x5f0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d059      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a46      	ldr	r2, [pc, #280]	@ (8005bc8 <HAL_DMA_Abort+0x5f4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d054      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a44      	ldr	r2, [pc, #272]	@ (8005bcc <HAL_DMA_Abort+0x5f8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d04f      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a43      	ldr	r2, [pc, #268]	@ (8005bd0 <HAL_DMA_Abort+0x5fc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d04a      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a41      	ldr	r2, [pc, #260]	@ (8005bd4 <HAL_DMA_Abort+0x600>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d045      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a40      	ldr	r2, [pc, #256]	@ (8005bd8 <HAL_DMA_Abort+0x604>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d040      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a3e      	ldr	r2, [pc, #248]	@ (8005bdc <HAL_DMA_Abort+0x608>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d03b      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a3d      	ldr	r2, [pc, #244]	@ (8005be0 <HAL_DMA_Abort+0x60c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d036      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a3b      	ldr	r2, [pc, #236]	@ (8005be4 <HAL_DMA_Abort+0x610>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d031      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a3a      	ldr	r2, [pc, #232]	@ (8005be8 <HAL_DMA_Abort+0x614>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d02c      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a38      	ldr	r2, [pc, #224]	@ (8005bec <HAL_DMA_Abort+0x618>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d027      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a37      	ldr	r2, [pc, #220]	@ (8005bf0 <HAL_DMA_Abort+0x61c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d022      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a35      	ldr	r2, [pc, #212]	@ (8005bf4 <HAL_DMA_Abort+0x620>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d01d      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a34      	ldr	r2, [pc, #208]	@ (8005bf8 <HAL_DMA_Abort+0x624>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d018      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a32      	ldr	r2, [pc, #200]	@ (8005bfc <HAL_DMA_Abort+0x628>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a31      	ldr	r2, [pc, #196]	@ (8005c00 <HAL_DMA_Abort+0x62c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00e      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a2f      	ldr	r2, [pc, #188]	@ (8005c04 <HAL_DMA_Abort+0x630>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d009      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8005c08 <HAL_DMA_Abort+0x634>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d004      	beq.n	8005b5e <HAL_DMA_Abort+0x58a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a2c      	ldr	r2, [pc, #176]	@ (8005c0c <HAL_DMA_Abort+0x638>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_DMA_Abort+0x58e>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <HAL_DMA_Abort+0x590>
 8005b62:	2300      	movs	r3, #0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d015      	beq.n	8005b94 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b70:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00c      	beq.n	8005b94 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b88:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b92:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40020010 	.word	0x40020010
 8005bb4:	40020028 	.word	0x40020028
 8005bb8:	40020040 	.word	0x40020040
 8005bbc:	40020058 	.word	0x40020058
 8005bc0:	40020070 	.word	0x40020070
 8005bc4:	40020088 	.word	0x40020088
 8005bc8:	400200a0 	.word	0x400200a0
 8005bcc:	400200b8 	.word	0x400200b8
 8005bd0:	40020410 	.word	0x40020410
 8005bd4:	40020428 	.word	0x40020428
 8005bd8:	40020440 	.word	0x40020440
 8005bdc:	40020458 	.word	0x40020458
 8005be0:	40020470 	.word	0x40020470
 8005be4:	40020488 	.word	0x40020488
 8005be8:	400204a0 	.word	0x400204a0
 8005bec:	400204b8 	.word	0x400204b8
 8005bf0:	58025408 	.word	0x58025408
 8005bf4:	5802541c 	.word	0x5802541c
 8005bf8:	58025430 	.word	0x58025430
 8005bfc:	58025444 	.word	0x58025444
 8005c00:	58025458 	.word	0x58025458
 8005c04:	5802546c 	.word	0x5802546c
 8005c08:	58025480 	.word	0x58025480
 8005c0c:	58025494 	.word	0x58025494

08005c10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e237      	b.n	8006092 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d004      	beq.n	8005c38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2280      	movs	r2, #128	@ 0x80
 8005c32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e22c      	b.n	8006092 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a5c      	ldr	r2, [pc, #368]	@ (8005db0 <HAL_DMA_Abort_IT+0x1a0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d04a      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a5b      	ldr	r2, [pc, #364]	@ (8005db4 <HAL_DMA_Abort_IT+0x1a4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d045      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a59      	ldr	r2, [pc, #356]	@ (8005db8 <HAL_DMA_Abort_IT+0x1a8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d040      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a58      	ldr	r2, [pc, #352]	@ (8005dbc <HAL_DMA_Abort_IT+0x1ac>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d03b      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a56      	ldr	r2, [pc, #344]	@ (8005dc0 <HAL_DMA_Abort_IT+0x1b0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d036      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a55      	ldr	r2, [pc, #340]	@ (8005dc4 <HAL_DMA_Abort_IT+0x1b4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d031      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a53      	ldr	r2, [pc, #332]	@ (8005dc8 <HAL_DMA_Abort_IT+0x1b8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02c      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a52      	ldr	r2, [pc, #328]	@ (8005dcc <HAL_DMA_Abort_IT+0x1bc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d027      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a50      	ldr	r2, [pc, #320]	@ (8005dd0 <HAL_DMA_Abort_IT+0x1c0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d022      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a4f      	ldr	r2, [pc, #316]	@ (8005dd4 <HAL_DMA_Abort_IT+0x1c4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a4d      	ldr	r2, [pc, #308]	@ (8005dd8 <HAL_DMA_Abort_IT+0x1c8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a4c      	ldr	r2, [pc, #304]	@ (8005ddc <HAL_DMA_Abort_IT+0x1cc>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8005de0 <HAL_DMA_Abort_IT+0x1d0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a49      	ldr	r2, [pc, #292]	@ (8005de4 <HAL_DMA_Abort_IT+0x1d4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a47      	ldr	r2, [pc, #284]	@ (8005de8 <HAL_DMA_Abort_IT+0x1d8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_DMA_Abort_IT+0xc8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a46      	ldr	r2, [pc, #280]	@ (8005dec <HAL_DMA_Abort_IT+0x1dc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <HAL_DMA_Abort_IT+0xcc>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <HAL_DMA_Abort_IT+0xce>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 8086 	beq.w	8005df0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8005db0 <HAL_DMA_Abort_IT+0x1a0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d04a      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a2e      	ldr	r2, [pc, #184]	@ (8005db4 <HAL_DMA_Abort_IT+0x1a4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d045      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a2c      	ldr	r2, [pc, #176]	@ (8005db8 <HAL_DMA_Abort_IT+0x1a8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d040      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8005dbc <HAL_DMA_Abort_IT+0x1ac>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d03b      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a29      	ldr	r2, [pc, #164]	@ (8005dc0 <HAL_DMA_Abort_IT+0x1b0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d036      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a28      	ldr	r2, [pc, #160]	@ (8005dc4 <HAL_DMA_Abort_IT+0x1b4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d031      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a26      	ldr	r2, [pc, #152]	@ (8005dc8 <HAL_DMA_Abort_IT+0x1b8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d02c      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a25      	ldr	r2, [pc, #148]	@ (8005dcc <HAL_DMA_Abort_IT+0x1bc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d027      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a23      	ldr	r2, [pc, #140]	@ (8005dd0 <HAL_DMA_Abort_IT+0x1c0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d022      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a22      	ldr	r2, [pc, #136]	@ (8005dd4 <HAL_DMA_Abort_IT+0x1c4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d01d      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a20      	ldr	r2, [pc, #128]	@ (8005dd8 <HAL_DMA_Abort_IT+0x1c8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d018      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ddc <HAL_DMA_Abort_IT+0x1cc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d013      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1d      	ldr	r2, [pc, #116]	@ (8005de0 <HAL_DMA_Abort_IT+0x1d0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00e      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1c      	ldr	r2, [pc, #112]	@ (8005de4 <HAL_DMA_Abort_IT+0x1d4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8005de8 <HAL_DMA_Abort_IT+0x1d8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_DMA_Abort_IT+0x17c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a19      	ldr	r2, [pc, #100]	@ (8005dec <HAL_DMA_Abort_IT+0x1dc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d108      	bne.n	8005d9e <HAL_DMA_Abort_IT+0x18e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0201 	bic.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	e178      	b.n	8006090 <HAL_DMA_Abort_IT+0x480>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0201 	bic.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	e16f      	b.n	8006090 <HAL_DMA_Abort_IT+0x480>
 8005db0:	40020010 	.word	0x40020010
 8005db4:	40020028 	.word	0x40020028
 8005db8:	40020040 	.word	0x40020040
 8005dbc:	40020058 	.word	0x40020058
 8005dc0:	40020070 	.word	0x40020070
 8005dc4:	40020088 	.word	0x40020088
 8005dc8:	400200a0 	.word	0x400200a0
 8005dcc:	400200b8 	.word	0x400200b8
 8005dd0:	40020410 	.word	0x40020410
 8005dd4:	40020428 	.word	0x40020428
 8005dd8:	40020440 	.word	0x40020440
 8005ddc:	40020458 	.word	0x40020458
 8005de0:	40020470 	.word	0x40020470
 8005de4:	40020488 	.word	0x40020488
 8005de8:	400204a0 	.word	0x400204a0
 8005dec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 020e 	bic.w	r2, r2, #14
 8005dfe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a6c      	ldr	r2, [pc, #432]	@ (8005fb8 <HAL_DMA_Abort_IT+0x3a8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d04a      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a6b      	ldr	r2, [pc, #428]	@ (8005fbc <HAL_DMA_Abort_IT+0x3ac>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d045      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a69      	ldr	r2, [pc, #420]	@ (8005fc0 <HAL_DMA_Abort_IT+0x3b0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d040      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a68      	ldr	r2, [pc, #416]	@ (8005fc4 <HAL_DMA_Abort_IT+0x3b4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d03b      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a66      	ldr	r2, [pc, #408]	@ (8005fc8 <HAL_DMA_Abort_IT+0x3b8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d036      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a65      	ldr	r2, [pc, #404]	@ (8005fcc <HAL_DMA_Abort_IT+0x3bc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d031      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a63      	ldr	r2, [pc, #396]	@ (8005fd0 <HAL_DMA_Abort_IT+0x3c0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d02c      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a62      	ldr	r2, [pc, #392]	@ (8005fd4 <HAL_DMA_Abort_IT+0x3c4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d027      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a60      	ldr	r2, [pc, #384]	@ (8005fd8 <HAL_DMA_Abort_IT+0x3c8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a5f      	ldr	r2, [pc, #380]	@ (8005fdc <HAL_DMA_Abort_IT+0x3cc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d01d      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a5d      	ldr	r2, [pc, #372]	@ (8005fe0 <HAL_DMA_Abort_IT+0x3d0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a5c      	ldr	r2, [pc, #368]	@ (8005fe4 <HAL_DMA_Abort_IT+0x3d4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a5a      	ldr	r2, [pc, #360]	@ (8005fe8 <HAL_DMA_Abort_IT+0x3d8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a59      	ldr	r2, [pc, #356]	@ (8005fec <HAL_DMA_Abort_IT+0x3dc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a57      	ldr	r2, [pc, #348]	@ (8005ff0 <HAL_DMA_Abort_IT+0x3e0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_DMA_Abort_IT+0x290>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a56      	ldr	r2, [pc, #344]	@ (8005ff4 <HAL_DMA_Abort_IT+0x3e4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d108      	bne.n	8005eb2 <HAL_DMA_Abort_IT+0x2a2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0201 	bic.w	r2, r2, #1
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	e007      	b.n	8005ec2 <HAL_DMA_Abort_IT+0x2b2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb8 <HAL_DMA_Abort_IT+0x3a8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d072      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a3a      	ldr	r2, [pc, #232]	@ (8005fbc <HAL_DMA_Abort_IT+0x3ac>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d06d      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a39      	ldr	r2, [pc, #228]	@ (8005fc0 <HAL_DMA_Abort_IT+0x3b0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d068      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a37      	ldr	r2, [pc, #220]	@ (8005fc4 <HAL_DMA_Abort_IT+0x3b4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d063      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a36      	ldr	r2, [pc, #216]	@ (8005fc8 <HAL_DMA_Abort_IT+0x3b8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d05e      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a34      	ldr	r2, [pc, #208]	@ (8005fcc <HAL_DMA_Abort_IT+0x3bc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d059      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a33      	ldr	r2, [pc, #204]	@ (8005fd0 <HAL_DMA_Abort_IT+0x3c0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d054      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a31      	ldr	r2, [pc, #196]	@ (8005fd4 <HAL_DMA_Abort_IT+0x3c4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d04f      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a30      	ldr	r2, [pc, #192]	@ (8005fd8 <HAL_DMA_Abort_IT+0x3c8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d04a      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a2e      	ldr	r2, [pc, #184]	@ (8005fdc <HAL_DMA_Abort_IT+0x3cc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d045      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8005fe0 <HAL_DMA_Abort_IT+0x3d0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d040      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2b      	ldr	r2, [pc, #172]	@ (8005fe4 <HAL_DMA_Abort_IT+0x3d4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d03b      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe8 <HAL_DMA_Abort_IT+0x3d8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d036      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a28      	ldr	r2, [pc, #160]	@ (8005fec <HAL_DMA_Abort_IT+0x3dc>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d031      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a27      	ldr	r2, [pc, #156]	@ (8005ff0 <HAL_DMA_Abort_IT+0x3e0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d02c      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a25      	ldr	r2, [pc, #148]	@ (8005ff4 <HAL_DMA_Abort_IT+0x3e4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d027      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a24      	ldr	r2, [pc, #144]	@ (8005ff8 <HAL_DMA_Abort_IT+0x3e8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d022      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a22      	ldr	r2, [pc, #136]	@ (8005ffc <HAL_DMA_Abort_IT+0x3ec>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d01d      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a21      	ldr	r2, [pc, #132]	@ (8006000 <HAL_DMA_Abort_IT+0x3f0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d018      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1f      	ldr	r2, [pc, #124]	@ (8006004 <HAL_DMA_Abort_IT+0x3f4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006008 <HAL_DMA_Abort_IT+0x3f8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00e      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1c      	ldr	r2, [pc, #112]	@ (800600c <HAL_DMA_Abort_IT+0x3fc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8006010 <HAL_DMA_Abort_IT+0x400>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0x3a2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a19      	ldr	r2, [pc, #100]	@ (8006014 <HAL_DMA_Abort_IT+0x404>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d132      	bne.n	8006018 <HAL_DMA_Abort_IT+0x408>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e031      	b.n	800601a <HAL_DMA_Abort_IT+0x40a>
 8005fb6:	bf00      	nop
 8005fb8:	40020010 	.word	0x40020010
 8005fbc:	40020028 	.word	0x40020028
 8005fc0:	40020040 	.word	0x40020040
 8005fc4:	40020058 	.word	0x40020058
 8005fc8:	40020070 	.word	0x40020070
 8005fcc:	40020088 	.word	0x40020088
 8005fd0:	400200a0 	.word	0x400200a0
 8005fd4:	400200b8 	.word	0x400200b8
 8005fd8:	40020410 	.word	0x40020410
 8005fdc:	40020428 	.word	0x40020428
 8005fe0:	40020440 	.word	0x40020440
 8005fe4:	40020458 	.word	0x40020458
 8005fe8:	40020470 	.word	0x40020470
 8005fec:	40020488 	.word	0x40020488
 8005ff0:	400204a0 	.word	0x400204a0
 8005ff4:	400204b8 	.word	0x400204b8
 8005ff8:	58025408 	.word	0x58025408
 8005ffc:	5802541c 	.word	0x5802541c
 8006000:	58025430 	.word	0x58025430
 8006004:	58025444 	.word	0x58025444
 8006008:	58025458 	.word	0x58025458
 800600c:	5802546c 	.word	0x5802546c
 8006010:	58025480 	.word	0x58025480
 8006014:	58025494 	.word	0x58025494
 8006018:	2300      	movs	r3, #0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d028      	beq.n	8006070 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006028:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800602c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006032:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	2201      	movs	r2, #1
 800603e:	409a      	lsls	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800604c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00c      	beq.n	8006070 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006060:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006064:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800606e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop

0800609c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08a      	sub	sp, #40	@ 0x28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060a8:	4b67      	ldr	r3, [pc, #412]	@ (8006248 <HAL_DMA_IRQHandler+0x1ac>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a67      	ldr	r2, [pc, #412]	@ (800624c <HAL_DMA_IRQHandler+0x1b0>)
 80060ae:	fba2 2303 	umull	r2, r3, r2, r3
 80060b2:	0a9b      	lsrs	r3, r3, #10
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a5f      	ldr	r2, [pc, #380]	@ (8006250 <HAL_DMA_IRQHandler+0x1b4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d04a      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5d      	ldr	r2, [pc, #372]	@ (8006254 <HAL_DMA_IRQHandler+0x1b8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d045      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a5c      	ldr	r2, [pc, #368]	@ (8006258 <HAL_DMA_IRQHandler+0x1bc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d040      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a5a      	ldr	r2, [pc, #360]	@ (800625c <HAL_DMA_IRQHandler+0x1c0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d03b      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a59      	ldr	r2, [pc, #356]	@ (8006260 <HAL_DMA_IRQHandler+0x1c4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d036      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a57      	ldr	r2, [pc, #348]	@ (8006264 <HAL_DMA_IRQHandler+0x1c8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d031      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a56      	ldr	r2, [pc, #344]	@ (8006268 <HAL_DMA_IRQHandler+0x1cc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d02c      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a54      	ldr	r2, [pc, #336]	@ (800626c <HAL_DMA_IRQHandler+0x1d0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d027      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a53      	ldr	r2, [pc, #332]	@ (8006270 <HAL_DMA_IRQHandler+0x1d4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d022      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a51      	ldr	r2, [pc, #324]	@ (8006274 <HAL_DMA_IRQHandler+0x1d8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01d      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a50      	ldr	r2, [pc, #320]	@ (8006278 <HAL_DMA_IRQHandler+0x1dc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d018      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a4e      	ldr	r2, [pc, #312]	@ (800627c <HAL_DMA_IRQHandler+0x1e0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d013      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a4d      	ldr	r2, [pc, #308]	@ (8006280 <HAL_DMA_IRQHandler+0x1e4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00e      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a4b      	ldr	r2, [pc, #300]	@ (8006284 <HAL_DMA_IRQHandler+0x1e8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d009      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a4a      	ldr	r2, [pc, #296]	@ (8006288 <HAL_DMA_IRQHandler+0x1ec>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_DMA_IRQHandler+0xd2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a48      	ldr	r2, [pc, #288]	@ (800628c <HAL_DMA_IRQHandler+0x1f0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d101      	bne.n	8006172 <HAL_DMA_IRQHandler+0xd6>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <HAL_DMA_IRQHandler+0xd8>
 8006172:	2300      	movs	r3, #0
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 842b 	beq.w	80069d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	2208      	movs	r2, #8
 8006184:	409a      	lsls	r2, r3
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	4013      	ands	r3, r2
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80a2 	beq.w	80062d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a2e      	ldr	r2, [pc, #184]	@ (8006250 <HAL_DMA_IRQHandler+0x1b4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d04a      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a2d      	ldr	r2, [pc, #180]	@ (8006254 <HAL_DMA_IRQHandler+0x1b8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d045      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006258 <HAL_DMA_IRQHandler+0x1bc>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d040      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a2a      	ldr	r2, [pc, #168]	@ (800625c <HAL_DMA_IRQHandler+0x1c0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d03b      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a28      	ldr	r2, [pc, #160]	@ (8006260 <HAL_DMA_IRQHandler+0x1c4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d036      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a27      	ldr	r2, [pc, #156]	@ (8006264 <HAL_DMA_IRQHandler+0x1c8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d031      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a25      	ldr	r2, [pc, #148]	@ (8006268 <HAL_DMA_IRQHandler+0x1cc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d02c      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a24      	ldr	r2, [pc, #144]	@ (800626c <HAL_DMA_IRQHandler+0x1d0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d027      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a22      	ldr	r2, [pc, #136]	@ (8006270 <HAL_DMA_IRQHandler+0x1d4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d022      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a21      	ldr	r2, [pc, #132]	@ (8006274 <HAL_DMA_IRQHandler+0x1d8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d01d      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006278 <HAL_DMA_IRQHandler+0x1dc>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d018      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1e      	ldr	r2, [pc, #120]	@ (800627c <HAL_DMA_IRQHandler+0x1e0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d013      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1c      	ldr	r2, [pc, #112]	@ (8006280 <HAL_DMA_IRQHandler+0x1e4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00e      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1b      	ldr	r2, [pc, #108]	@ (8006284 <HAL_DMA_IRQHandler+0x1e8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d009      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a19      	ldr	r2, [pc, #100]	@ (8006288 <HAL_DMA_IRQHandler+0x1ec>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d004      	beq.n	8006230 <HAL_DMA_IRQHandler+0x194>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a18      	ldr	r2, [pc, #96]	@ (800628c <HAL_DMA_IRQHandler+0x1f0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d12f      	bne.n	8006290 <HAL_DMA_IRQHandler+0x1f4>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	bf14      	ite	ne
 800623e:	2301      	movne	r3, #1
 8006240:	2300      	moveq	r3, #0
 8006242:	b2db      	uxtb	r3, r3
 8006244:	e02e      	b.n	80062a4 <HAL_DMA_IRQHandler+0x208>
 8006246:	bf00      	nop
 8006248:	240000c0 	.word	0x240000c0
 800624c:	1b4e81b5 	.word	0x1b4e81b5
 8006250:	40020010 	.word	0x40020010
 8006254:	40020028 	.word	0x40020028
 8006258:	40020040 	.word	0x40020040
 800625c:	40020058 	.word	0x40020058
 8006260:	40020070 	.word	0x40020070
 8006264:	40020088 	.word	0x40020088
 8006268:	400200a0 	.word	0x400200a0
 800626c:	400200b8 	.word	0x400200b8
 8006270:	40020410 	.word	0x40020410
 8006274:	40020428 	.word	0x40020428
 8006278:	40020440 	.word	0x40020440
 800627c:	40020458 	.word	0x40020458
 8006280:	40020470 	.word	0x40020470
 8006284:	40020488 	.word	0x40020488
 8006288:	400204a0 	.word	0x400204a0
 800628c:	400204b8 	.word	0x400204b8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d015      	beq.n	80062d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0204 	bic.w	r2, r2, #4
 80062b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	2208      	movs	r2, #8
 80062c2:	409a      	lsls	r2, r3
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062cc:	f043 0201 	orr.w	r2, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	fa22 f303 	lsr.w	r3, r2, r3
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d06e      	beq.n	80063c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a69      	ldr	r2, [pc, #420]	@ (8006494 <HAL_DMA_IRQHandler+0x3f8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d04a      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a67      	ldr	r2, [pc, #412]	@ (8006498 <HAL_DMA_IRQHandler+0x3fc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d045      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a66      	ldr	r2, [pc, #408]	@ (800649c <HAL_DMA_IRQHandler+0x400>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d040      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a64      	ldr	r2, [pc, #400]	@ (80064a0 <HAL_DMA_IRQHandler+0x404>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d03b      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a63      	ldr	r2, [pc, #396]	@ (80064a4 <HAL_DMA_IRQHandler+0x408>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d036      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a61      	ldr	r2, [pc, #388]	@ (80064a8 <HAL_DMA_IRQHandler+0x40c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d031      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a60      	ldr	r2, [pc, #384]	@ (80064ac <HAL_DMA_IRQHandler+0x410>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d02c      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a5e      	ldr	r2, [pc, #376]	@ (80064b0 <HAL_DMA_IRQHandler+0x414>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d027      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a5d      	ldr	r2, [pc, #372]	@ (80064b4 <HAL_DMA_IRQHandler+0x418>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d022      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a5b      	ldr	r2, [pc, #364]	@ (80064b8 <HAL_DMA_IRQHandler+0x41c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01d      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a5a      	ldr	r2, [pc, #360]	@ (80064bc <HAL_DMA_IRQHandler+0x420>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d018      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a58      	ldr	r2, [pc, #352]	@ (80064c0 <HAL_DMA_IRQHandler+0x424>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a57      	ldr	r2, [pc, #348]	@ (80064c4 <HAL_DMA_IRQHandler+0x428>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00e      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a55      	ldr	r2, [pc, #340]	@ (80064c8 <HAL_DMA_IRQHandler+0x42c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d009      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a54      	ldr	r2, [pc, #336]	@ (80064cc <HAL_DMA_IRQHandler+0x430>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d004      	beq.n	800638a <HAL_DMA_IRQHandler+0x2ee>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a52      	ldr	r2, [pc, #328]	@ (80064d0 <HAL_DMA_IRQHandler+0x434>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d10a      	bne.n	80063a0 <HAL_DMA_IRQHandler+0x304>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e003      	b.n	80063a8 <HAL_DMA_IRQHandler+0x30c>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2300      	movs	r3, #0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00d      	beq.n	80063c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b0:	f003 031f 	and.w	r3, r3, #31
 80063b4:	2201      	movs	r2, #1
 80063b6:	409a      	lsls	r2, r3
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c0:	f043 0202 	orr.w	r2, r3, #2
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2204      	movs	r2, #4
 80063d2:	409a      	lsls	r2, r3
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	4013      	ands	r3, r2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 808f 	beq.w	80064fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006494 <HAL_DMA_IRQHandler+0x3f8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d04a      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006498 <HAL_DMA_IRQHandler+0x3fc>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d045      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a29      	ldr	r2, [pc, #164]	@ (800649c <HAL_DMA_IRQHandler+0x400>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d040      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a27      	ldr	r2, [pc, #156]	@ (80064a0 <HAL_DMA_IRQHandler+0x404>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d03b      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a26      	ldr	r2, [pc, #152]	@ (80064a4 <HAL_DMA_IRQHandler+0x408>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d036      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a24      	ldr	r2, [pc, #144]	@ (80064a8 <HAL_DMA_IRQHandler+0x40c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d031      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a23      	ldr	r2, [pc, #140]	@ (80064ac <HAL_DMA_IRQHandler+0x410>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d02c      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a21      	ldr	r2, [pc, #132]	@ (80064b0 <HAL_DMA_IRQHandler+0x414>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d027      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a20      	ldr	r2, [pc, #128]	@ (80064b4 <HAL_DMA_IRQHandler+0x418>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d022      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1e      	ldr	r2, [pc, #120]	@ (80064b8 <HAL_DMA_IRQHandler+0x41c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d01d      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1d      	ldr	r2, [pc, #116]	@ (80064bc <HAL_DMA_IRQHandler+0x420>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d018      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1b      	ldr	r2, [pc, #108]	@ (80064c0 <HAL_DMA_IRQHandler+0x424>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d013      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1a      	ldr	r2, [pc, #104]	@ (80064c4 <HAL_DMA_IRQHandler+0x428>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00e      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a18      	ldr	r2, [pc, #96]	@ (80064c8 <HAL_DMA_IRQHandler+0x42c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d009      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a17      	ldr	r2, [pc, #92]	@ (80064cc <HAL_DMA_IRQHandler+0x430>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d004      	beq.n	800647e <HAL_DMA_IRQHandler+0x3e2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a15      	ldr	r2, [pc, #84]	@ (80064d0 <HAL_DMA_IRQHandler+0x434>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d12a      	bne.n	80064d4 <HAL_DMA_IRQHandler+0x438>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b00      	cmp	r3, #0
 800648a:	bf14      	ite	ne
 800648c:	2301      	movne	r3, #1
 800648e:	2300      	moveq	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	e023      	b.n	80064dc <HAL_DMA_IRQHandler+0x440>
 8006494:	40020010 	.word	0x40020010
 8006498:	40020028 	.word	0x40020028
 800649c:	40020040 	.word	0x40020040
 80064a0:	40020058 	.word	0x40020058
 80064a4:	40020070 	.word	0x40020070
 80064a8:	40020088 	.word	0x40020088
 80064ac:	400200a0 	.word	0x400200a0
 80064b0:	400200b8 	.word	0x400200b8
 80064b4:	40020410 	.word	0x40020410
 80064b8:	40020428 	.word	0x40020428
 80064bc:	40020440 	.word	0x40020440
 80064c0:	40020458 	.word	0x40020458
 80064c4:	40020470 	.word	0x40020470
 80064c8:	40020488 	.word	0x40020488
 80064cc:	400204a0 	.word	0x400204a0
 80064d0:	400204b8 	.word	0x400204b8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00d      	beq.n	80064fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	2204      	movs	r2, #4
 80064ea:	409a      	lsls	r2, r3
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f4:	f043 0204 	orr.w	r2, r3, #4
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2210      	movs	r2, #16
 8006506:	409a      	lsls	r2, r3
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	4013      	ands	r3, r2
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80a6 	beq.w	800665e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a85      	ldr	r2, [pc, #532]	@ (800672c <HAL_DMA_IRQHandler+0x690>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d04a      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a83      	ldr	r2, [pc, #524]	@ (8006730 <HAL_DMA_IRQHandler+0x694>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d045      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a82      	ldr	r2, [pc, #520]	@ (8006734 <HAL_DMA_IRQHandler+0x698>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d040      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a80      	ldr	r2, [pc, #512]	@ (8006738 <HAL_DMA_IRQHandler+0x69c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d03b      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a7f      	ldr	r2, [pc, #508]	@ (800673c <HAL_DMA_IRQHandler+0x6a0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d036      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a7d      	ldr	r2, [pc, #500]	@ (8006740 <HAL_DMA_IRQHandler+0x6a4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d031      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a7c      	ldr	r2, [pc, #496]	@ (8006744 <HAL_DMA_IRQHandler+0x6a8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d02c      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a7a      	ldr	r2, [pc, #488]	@ (8006748 <HAL_DMA_IRQHandler+0x6ac>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d027      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a79      	ldr	r2, [pc, #484]	@ (800674c <HAL_DMA_IRQHandler+0x6b0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d022      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a77      	ldr	r2, [pc, #476]	@ (8006750 <HAL_DMA_IRQHandler+0x6b4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d01d      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a76      	ldr	r2, [pc, #472]	@ (8006754 <HAL_DMA_IRQHandler+0x6b8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d018      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a74      	ldr	r2, [pc, #464]	@ (8006758 <HAL_DMA_IRQHandler+0x6bc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d013      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a73      	ldr	r2, [pc, #460]	@ (800675c <HAL_DMA_IRQHandler+0x6c0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00e      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a71      	ldr	r2, [pc, #452]	@ (8006760 <HAL_DMA_IRQHandler+0x6c4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d009      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a70      	ldr	r2, [pc, #448]	@ (8006764 <HAL_DMA_IRQHandler+0x6c8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d004      	beq.n	80065b2 <HAL_DMA_IRQHandler+0x516>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a6e      	ldr	r2, [pc, #440]	@ (8006768 <HAL_DMA_IRQHandler+0x6cc>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d10a      	bne.n	80065c8 <HAL_DMA_IRQHandler+0x52c>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e009      	b.n	80065dc <HAL_DMA_IRQHandler+0x540>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bf14      	ite	ne
 80065d6:	2301      	movne	r3, #1
 80065d8:	2300      	moveq	r3, #0
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d03e      	beq.n	800665e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2210      	movs	r2, #16
 80065ea:	409a      	lsls	r2, r3
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d018      	beq.n	8006630 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d108      	bne.n	800661e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d024      	beq.n	800665e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
 800661c:	e01f      	b.n	800665e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006622:	2b00      	cmp	r3, #0
 8006624:	d01b      	beq.n	800665e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
 800662e:	e016      	b.n	800665e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d107      	bne.n	800664e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0208 	bic.w	r2, r2, #8
 800664c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	2220      	movs	r2, #32
 8006668:	409a      	lsls	r2, r3
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	4013      	ands	r3, r2
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 8110 	beq.w	8006894 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a2c      	ldr	r2, [pc, #176]	@ (800672c <HAL_DMA_IRQHandler+0x690>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d04a      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a2b      	ldr	r2, [pc, #172]	@ (8006730 <HAL_DMA_IRQHandler+0x694>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d045      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a29      	ldr	r2, [pc, #164]	@ (8006734 <HAL_DMA_IRQHandler+0x698>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d040      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a28      	ldr	r2, [pc, #160]	@ (8006738 <HAL_DMA_IRQHandler+0x69c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d03b      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a26      	ldr	r2, [pc, #152]	@ (800673c <HAL_DMA_IRQHandler+0x6a0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d036      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a25      	ldr	r2, [pc, #148]	@ (8006740 <HAL_DMA_IRQHandler+0x6a4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d031      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a23      	ldr	r2, [pc, #140]	@ (8006744 <HAL_DMA_IRQHandler+0x6a8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d02c      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a22      	ldr	r2, [pc, #136]	@ (8006748 <HAL_DMA_IRQHandler+0x6ac>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d027      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a20      	ldr	r2, [pc, #128]	@ (800674c <HAL_DMA_IRQHandler+0x6b0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d022      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006750 <HAL_DMA_IRQHandler+0x6b4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d01d      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006754 <HAL_DMA_IRQHandler+0x6b8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d018      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006758 <HAL_DMA_IRQHandler+0x6bc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d013      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1a      	ldr	r2, [pc, #104]	@ (800675c <HAL_DMA_IRQHandler+0x6c0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00e      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a19      	ldr	r2, [pc, #100]	@ (8006760 <HAL_DMA_IRQHandler+0x6c4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d009      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a17      	ldr	r2, [pc, #92]	@ (8006764 <HAL_DMA_IRQHandler+0x6c8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d004      	beq.n	8006714 <HAL_DMA_IRQHandler+0x678>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a16      	ldr	r2, [pc, #88]	@ (8006768 <HAL_DMA_IRQHandler+0x6cc>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d12b      	bne.n	800676c <HAL_DMA_IRQHandler+0x6d0>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0310 	and.w	r3, r3, #16
 800671e:	2b00      	cmp	r3, #0
 8006720:	bf14      	ite	ne
 8006722:	2301      	movne	r3, #1
 8006724:	2300      	moveq	r3, #0
 8006726:	b2db      	uxtb	r3, r3
 8006728:	e02a      	b.n	8006780 <HAL_DMA_IRQHandler+0x6e4>
 800672a:	bf00      	nop
 800672c:	40020010 	.word	0x40020010
 8006730:	40020028 	.word	0x40020028
 8006734:	40020040 	.word	0x40020040
 8006738:	40020058 	.word	0x40020058
 800673c:	40020070 	.word	0x40020070
 8006740:	40020088 	.word	0x40020088
 8006744:	400200a0 	.word	0x400200a0
 8006748:	400200b8 	.word	0x400200b8
 800674c:	40020410 	.word	0x40020410
 8006750:	40020428 	.word	0x40020428
 8006754:	40020440 	.word	0x40020440
 8006758:	40020458 	.word	0x40020458
 800675c:	40020470 	.word	0x40020470
 8006760:	40020488 	.word	0x40020488
 8006764:	400204a0 	.word	0x400204a0
 8006768:	400204b8 	.word	0x400204b8
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	bf14      	ite	ne
 800677a:	2301      	movne	r3, #1
 800677c:	2300      	moveq	r3, #0
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8087 	beq.w	8006894 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800678a:	f003 031f 	and.w	r3, r3, #31
 800678e:	2220      	movs	r2, #32
 8006790:	409a      	lsls	r2, r3
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d139      	bne.n	8006816 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0216 	bic.w	r2, r2, #22
 80067b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695a      	ldr	r2, [r3, #20]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d103      	bne.n	80067d2 <HAL_DMA_IRQHandler+0x736>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0208 	bic.w	r2, r2, #8
 80067e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	223f      	movs	r2, #63	@ 0x3f
 80067ec:	409a      	lsls	r2, r3
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8382 	beq.w	8006f10 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
          }
          return;
 8006814:	e37c      	b.n	8006f10 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d018      	beq.n	8006856 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d108      	bne.n	8006844 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006836:	2b00      	cmp	r3, #0
 8006838:	d02c      	beq.n	8006894 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
 8006842:	e027      	b.n	8006894 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d023      	beq.n	8006894 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
 8006854:	e01e      	b.n	8006894 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10f      	bne.n	8006884 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0210 	bic.w	r2, r2, #16
 8006872:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 833e 	beq.w	8006f1a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8088 	beq.w	80069bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2204      	movs	r2, #4
 80068b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a89      	ldr	r2, [pc, #548]	@ (8006ae0 <HAL_DMA_IRQHandler+0xa44>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d04a      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a88      	ldr	r2, [pc, #544]	@ (8006ae4 <HAL_DMA_IRQHandler+0xa48>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d045      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a86      	ldr	r2, [pc, #536]	@ (8006ae8 <HAL_DMA_IRQHandler+0xa4c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d040      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a85      	ldr	r2, [pc, #532]	@ (8006aec <HAL_DMA_IRQHandler+0xa50>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d03b      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a83      	ldr	r2, [pc, #524]	@ (8006af0 <HAL_DMA_IRQHandler+0xa54>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d036      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a82      	ldr	r2, [pc, #520]	@ (8006af4 <HAL_DMA_IRQHandler+0xa58>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d031      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a80      	ldr	r2, [pc, #512]	@ (8006af8 <HAL_DMA_IRQHandler+0xa5c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d02c      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a7f      	ldr	r2, [pc, #508]	@ (8006afc <HAL_DMA_IRQHandler+0xa60>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d027      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a7d      	ldr	r2, [pc, #500]	@ (8006b00 <HAL_DMA_IRQHandler+0xa64>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d022      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a7c      	ldr	r2, [pc, #496]	@ (8006b04 <HAL_DMA_IRQHandler+0xa68>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d01d      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a7a      	ldr	r2, [pc, #488]	@ (8006b08 <HAL_DMA_IRQHandler+0xa6c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d018      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a79      	ldr	r2, [pc, #484]	@ (8006b0c <HAL_DMA_IRQHandler+0xa70>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d013      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a77      	ldr	r2, [pc, #476]	@ (8006b10 <HAL_DMA_IRQHandler+0xa74>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00e      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a76      	ldr	r2, [pc, #472]	@ (8006b14 <HAL_DMA_IRQHandler+0xa78>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d009      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a74      	ldr	r2, [pc, #464]	@ (8006b18 <HAL_DMA_IRQHandler+0xa7c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d004      	beq.n	8006954 <HAL_DMA_IRQHandler+0x8b8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a73      	ldr	r2, [pc, #460]	@ (8006b1c <HAL_DMA_IRQHandler+0xa80>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d108      	bne.n	8006966 <HAL_DMA_IRQHandler+0x8ca>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0201 	bic.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	e007      	b.n	8006976 <HAL_DMA_IRQHandler+0x8da>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0201 	bic.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	3301      	adds	r3, #1
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800697e:	429a      	cmp	r2, r3
 8006980:	d307      	bcc.n	8006992 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f2      	bne.n	8006976 <HAL_DMA_IRQHandler+0x8da>
 8006990:	e000      	b.n	8006994 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006992:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d004      	beq.n	80069ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2203      	movs	r2, #3
 80069a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80069aa:	e003      	b.n	80069b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 82aa 	beq.w	8006f1a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	4798      	blx	r3
 80069ce:	e2a4      	b.n	8006f1a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a52      	ldr	r2, [pc, #328]	@ (8006b20 <HAL_DMA_IRQHandler+0xa84>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d04a      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a51      	ldr	r2, [pc, #324]	@ (8006b24 <HAL_DMA_IRQHandler+0xa88>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d045      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a4f      	ldr	r2, [pc, #316]	@ (8006b28 <HAL_DMA_IRQHandler+0xa8c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d040      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a4e      	ldr	r2, [pc, #312]	@ (8006b2c <HAL_DMA_IRQHandler+0xa90>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d03b      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a4c      	ldr	r2, [pc, #304]	@ (8006b30 <HAL_DMA_IRQHandler+0xa94>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d036      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a4b      	ldr	r2, [pc, #300]	@ (8006b34 <HAL_DMA_IRQHandler+0xa98>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d031      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a49      	ldr	r2, [pc, #292]	@ (8006b38 <HAL_DMA_IRQHandler+0xa9c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d02c      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a48      	ldr	r2, [pc, #288]	@ (8006b3c <HAL_DMA_IRQHandler+0xaa0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d027      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a46      	ldr	r2, [pc, #280]	@ (8006b40 <HAL_DMA_IRQHandler+0xaa4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d022      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a45      	ldr	r2, [pc, #276]	@ (8006b44 <HAL_DMA_IRQHandler+0xaa8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d01d      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a43      	ldr	r2, [pc, #268]	@ (8006b48 <HAL_DMA_IRQHandler+0xaac>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d018      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a42      	ldr	r2, [pc, #264]	@ (8006b4c <HAL_DMA_IRQHandler+0xab0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d013      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a40      	ldr	r2, [pc, #256]	@ (8006b50 <HAL_DMA_IRQHandler+0xab4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00e      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a3f      	ldr	r2, [pc, #252]	@ (8006b54 <HAL_DMA_IRQHandler+0xab8>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d009      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a3d      	ldr	r2, [pc, #244]	@ (8006b58 <HAL_DMA_IRQHandler+0xabc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <HAL_DMA_IRQHandler+0x9d4>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a3c      	ldr	r2, [pc, #240]	@ (8006b5c <HAL_DMA_IRQHandler+0xac0>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d101      	bne.n	8006a74 <HAL_DMA_IRQHandler+0x9d8>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <HAL_DMA_IRQHandler+0x9da>
 8006a74:	2300      	movs	r3, #0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 824f 	beq.w	8006f1a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2204      	movs	r2, #4
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80dd 	beq.w	8006c54 <HAL_DMA_IRQHandler+0xbb8>
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80d7 	beq.w	8006c54 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2204      	movs	r2, #4
 8006ab0:	409a      	lsls	r2, r3
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d059      	beq.n	8006b74 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d14a      	bne.n	8006b60 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 8220 	beq.w	8006f14 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006adc:	e21a      	b.n	8006f14 <HAL_DMA_IRQHandler+0xe78>
 8006ade:	bf00      	nop
 8006ae0:	40020010 	.word	0x40020010
 8006ae4:	40020028 	.word	0x40020028
 8006ae8:	40020040 	.word	0x40020040
 8006aec:	40020058 	.word	0x40020058
 8006af0:	40020070 	.word	0x40020070
 8006af4:	40020088 	.word	0x40020088
 8006af8:	400200a0 	.word	0x400200a0
 8006afc:	400200b8 	.word	0x400200b8
 8006b00:	40020410 	.word	0x40020410
 8006b04:	40020428 	.word	0x40020428
 8006b08:	40020440 	.word	0x40020440
 8006b0c:	40020458 	.word	0x40020458
 8006b10:	40020470 	.word	0x40020470
 8006b14:	40020488 	.word	0x40020488
 8006b18:	400204a0 	.word	0x400204a0
 8006b1c:	400204b8 	.word	0x400204b8
 8006b20:	48022c08 	.word	0x48022c08
 8006b24:	48022c1c 	.word	0x48022c1c
 8006b28:	48022c30 	.word	0x48022c30
 8006b2c:	48022c44 	.word	0x48022c44
 8006b30:	48022c58 	.word	0x48022c58
 8006b34:	48022c6c 	.word	0x48022c6c
 8006b38:	48022c80 	.word	0x48022c80
 8006b3c:	48022c94 	.word	0x48022c94
 8006b40:	58025408 	.word	0x58025408
 8006b44:	5802541c 	.word	0x5802541c
 8006b48:	58025430 	.word	0x58025430
 8006b4c:	58025444 	.word	0x58025444
 8006b50:	58025458 	.word	0x58025458
 8006b54:	5802546c 	.word	0x5802546c
 8006b58:	58025480 	.word	0x58025480
 8006b5c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 81d5 	beq.w	8006f14 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b72:	e1cf      	b.n	8006f14 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d160      	bne.n	8006c40 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a7f      	ldr	r2, [pc, #508]	@ (8006d80 <HAL_DMA_IRQHandler+0xce4>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d04a      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a7d      	ldr	r2, [pc, #500]	@ (8006d84 <HAL_DMA_IRQHandler+0xce8>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d045      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a7c      	ldr	r2, [pc, #496]	@ (8006d88 <HAL_DMA_IRQHandler+0xcec>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d040      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a7a      	ldr	r2, [pc, #488]	@ (8006d8c <HAL_DMA_IRQHandler+0xcf0>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d03b      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a79      	ldr	r2, [pc, #484]	@ (8006d90 <HAL_DMA_IRQHandler+0xcf4>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d036      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a77      	ldr	r2, [pc, #476]	@ (8006d94 <HAL_DMA_IRQHandler+0xcf8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d031      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a76      	ldr	r2, [pc, #472]	@ (8006d98 <HAL_DMA_IRQHandler+0xcfc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d02c      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a74      	ldr	r2, [pc, #464]	@ (8006d9c <HAL_DMA_IRQHandler+0xd00>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d027      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a73      	ldr	r2, [pc, #460]	@ (8006da0 <HAL_DMA_IRQHandler+0xd04>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d022      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a71      	ldr	r2, [pc, #452]	@ (8006da4 <HAL_DMA_IRQHandler+0xd08>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01d      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a70      	ldr	r2, [pc, #448]	@ (8006da8 <HAL_DMA_IRQHandler+0xd0c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d018      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a6e      	ldr	r2, [pc, #440]	@ (8006dac <HAL_DMA_IRQHandler+0xd10>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a6d      	ldr	r2, [pc, #436]	@ (8006db0 <HAL_DMA_IRQHandler+0xd14>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00e      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a6b      	ldr	r2, [pc, #428]	@ (8006db4 <HAL_DMA_IRQHandler+0xd18>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d009      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a6a      	ldr	r2, [pc, #424]	@ (8006db8 <HAL_DMA_IRQHandler+0xd1c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d004      	beq.n	8006c1e <HAL_DMA_IRQHandler+0xb82>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a68      	ldr	r2, [pc, #416]	@ (8006dbc <HAL_DMA_IRQHandler+0xd20>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d108      	bne.n	8006c30 <HAL_DMA_IRQHandler+0xb94>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0208 	bic.w	r2, r2, #8
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	e007      	b.n	8006c40 <HAL_DMA_IRQHandler+0xba4>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0204 	bic.w	r2, r2, #4
 8006c3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 8165 	beq.w	8006f14 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c52:	e15f      	b.n	8006f14 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c58:	f003 031f 	and.w	r3, r3, #31
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	4013      	ands	r3, r2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80c5 	beq.w	8006df4 <HAL_DMA_IRQHandler+0xd58>
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80bf 	beq.w	8006df4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	2202      	movs	r2, #2
 8006c80:	409a      	lsls	r2, r3
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d018      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 813a 	beq.w	8006f18 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cac:	e134      	b.n	8006f18 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 8130 	beq.w	8006f18 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cc0:	e12a      	b.n	8006f18 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f040 8089 	bne.w	8006de0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8006d80 <HAL_DMA_IRQHandler+0xce4>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d04a      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a29      	ldr	r2, [pc, #164]	@ (8006d84 <HAL_DMA_IRQHandler+0xce8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d045      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a28      	ldr	r2, [pc, #160]	@ (8006d88 <HAL_DMA_IRQHandler+0xcec>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d040      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a26      	ldr	r2, [pc, #152]	@ (8006d8c <HAL_DMA_IRQHandler+0xcf0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d03b      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a25      	ldr	r2, [pc, #148]	@ (8006d90 <HAL_DMA_IRQHandler+0xcf4>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d036      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a23      	ldr	r2, [pc, #140]	@ (8006d94 <HAL_DMA_IRQHandler+0xcf8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d031      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a22      	ldr	r2, [pc, #136]	@ (8006d98 <HAL_DMA_IRQHandler+0xcfc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d02c      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a20      	ldr	r2, [pc, #128]	@ (8006d9c <HAL_DMA_IRQHandler+0xd00>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d027      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1f      	ldr	r2, [pc, #124]	@ (8006da0 <HAL_DMA_IRQHandler+0xd04>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d022      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006da4 <HAL_DMA_IRQHandler+0xd08>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01d      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1c      	ldr	r2, [pc, #112]	@ (8006da8 <HAL_DMA_IRQHandler+0xd0c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d018      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1a      	ldr	r2, [pc, #104]	@ (8006dac <HAL_DMA_IRQHandler+0xd10>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a19      	ldr	r2, [pc, #100]	@ (8006db0 <HAL_DMA_IRQHandler+0xd14>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a17      	ldr	r2, [pc, #92]	@ (8006db4 <HAL_DMA_IRQHandler+0xd18>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a16      	ldr	r2, [pc, #88]	@ (8006db8 <HAL_DMA_IRQHandler+0xd1c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xcd2>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a14      	ldr	r2, [pc, #80]	@ (8006dbc <HAL_DMA_IRQHandler+0xd20>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d128      	bne.n	8006dc0 <HAL_DMA_IRQHandler+0xd24>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0214 	bic.w	r2, r2, #20
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e027      	b.n	8006dd0 <HAL_DMA_IRQHandler+0xd34>
 8006d80:	40020010 	.word	0x40020010
 8006d84:	40020028 	.word	0x40020028
 8006d88:	40020040 	.word	0x40020040
 8006d8c:	40020058 	.word	0x40020058
 8006d90:	40020070 	.word	0x40020070
 8006d94:	40020088 	.word	0x40020088
 8006d98:	400200a0 	.word	0x400200a0
 8006d9c:	400200b8 	.word	0x400200b8
 8006da0:	40020410 	.word	0x40020410
 8006da4:	40020428 	.word	0x40020428
 8006da8:	40020440 	.word	0x40020440
 8006dac:	40020458 	.word	0x40020458
 8006db0:	40020470 	.word	0x40020470
 8006db4:	40020488 	.word	0x40020488
 8006db8:	400204a0 	.word	0x400204a0
 8006dbc:	400204b8 	.word	0x400204b8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 020a 	bic.w	r2, r2, #10
 8006dce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8097 	beq.w	8006f18 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006df2:	e091      	b.n	8006f18 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	409a      	lsls	r2, r3
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	4013      	ands	r3, r2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8088 	beq.w	8006f1a <HAL_DMA_IRQHandler+0xe7e>
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 8082 	beq.w	8006f1a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a41      	ldr	r2, [pc, #260]	@ (8006f20 <HAL_DMA_IRQHandler+0xe84>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d04a      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a3f      	ldr	r2, [pc, #252]	@ (8006f24 <HAL_DMA_IRQHandler+0xe88>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d045      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a3e      	ldr	r2, [pc, #248]	@ (8006f28 <HAL_DMA_IRQHandler+0xe8c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d040      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a3c      	ldr	r2, [pc, #240]	@ (8006f2c <HAL_DMA_IRQHandler+0xe90>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d03b      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a3b      	ldr	r2, [pc, #236]	@ (8006f30 <HAL_DMA_IRQHandler+0xe94>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d036      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a39      	ldr	r2, [pc, #228]	@ (8006f34 <HAL_DMA_IRQHandler+0xe98>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d031      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a38      	ldr	r2, [pc, #224]	@ (8006f38 <HAL_DMA_IRQHandler+0xe9c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d02c      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a36      	ldr	r2, [pc, #216]	@ (8006f3c <HAL_DMA_IRQHandler+0xea0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d027      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a35      	ldr	r2, [pc, #212]	@ (8006f40 <HAL_DMA_IRQHandler+0xea4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d022      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a33      	ldr	r2, [pc, #204]	@ (8006f44 <HAL_DMA_IRQHandler+0xea8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d01d      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a32      	ldr	r2, [pc, #200]	@ (8006f48 <HAL_DMA_IRQHandler+0xeac>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d018      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a30      	ldr	r2, [pc, #192]	@ (8006f4c <HAL_DMA_IRQHandler+0xeb0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d013      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a2f      	ldr	r2, [pc, #188]	@ (8006f50 <HAL_DMA_IRQHandler+0xeb4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00e      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8006f54 <HAL_DMA_IRQHandler+0xeb8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d009      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8006f58 <HAL_DMA_IRQHandler+0xebc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d004      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0xe1a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8006f5c <HAL_DMA_IRQHandler+0xec0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d108      	bne.n	8006ec8 <HAL_DMA_IRQHandler+0xe2c>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 021c 	bic.w	r2, r2, #28
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e007      	b.n	8006ed8 <HAL_DMA_IRQHandler+0xe3c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 020e 	bic.w	r2, r2, #14
 8006ed6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006edc:	f003 031f 	and.w	r3, r3, #31
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	409a      	lsls	r2, r3
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
 8006f0e:	e004      	b.n	8006f1a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006f10:	bf00      	nop
 8006f12:	e002      	b.n	8006f1a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f14:	bf00      	nop
 8006f16:	e000      	b.n	8006f1a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f1a:	3728      	adds	r7, #40	@ 0x28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	40020010 	.word	0x40020010
 8006f24:	40020028 	.word	0x40020028
 8006f28:	40020040 	.word	0x40020040
 8006f2c:	40020058 	.word	0x40020058
 8006f30:	40020070 	.word	0x40020070
 8006f34:	40020088 	.word	0x40020088
 8006f38:	400200a0 	.word	0x400200a0
 8006f3c:	400200b8 	.word	0x400200b8
 8006f40:	40020410 	.word	0x40020410
 8006f44:	40020428 	.word	0x40020428
 8006f48:	40020440 	.word	0x40020440
 8006f4c:	40020458 	.word	0x40020458
 8006f50:	40020470 	.word	0x40020470
 8006f54:	40020488 	.word	0x40020488
 8006f58:	400204a0 	.word	0x400204a0
 8006f5c:	400204b8 	.word	0x400204b8

08006f60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a7f      	ldr	r2, [pc, #508]	@ (800717c <DMA_SetConfig+0x21c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d072      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a7d      	ldr	r2, [pc, #500]	@ (8007180 <DMA_SetConfig+0x220>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d06d      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a7c      	ldr	r2, [pc, #496]	@ (8007184 <DMA_SetConfig+0x224>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d068      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a7a      	ldr	r2, [pc, #488]	@ (8007188 <DMA_SetConfig+0x228>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d063      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a79      	ldr	r2, [pc, #484]	@ (800718c <DMA_SetConfig+0x22c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d05e      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a77      	ldr	r2, [pc, #476]	@ (8007190 <DMA_SetConfig+0x230>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d059      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a76      	ldr	r2, [pc, #472]	@ (8007194 <DMA_SetConfig+0x234>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d054      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a74      	ldr	r2, [pc, #464]	@ (8007198 <DMA_SetConfig+0x238>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d04f      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a73      	ldr	r2, [pc, #460]	@ (800719c <DMA_SetConfig+0x23c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d04a      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a71      	ldr	r2, [pc, #452]	@ (80071a0 <DMA_SetConfig+0x240>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d045      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a70      	ldr	r2, [pc, #448]	@ (80071a4 <DMA_SetConfig+0x244>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d040      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a6e      	ldr	r2, [pc, #440]	@ (80071a8 <DMA_SetConfig+0x248>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d03b      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a6d      	ldr	r2, [pc, #436]	@ (80071ac <DMA_SetConfig+0x24c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d036      	beq.n	800706a <DMA_SetConfig+0x10a>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a6b      	ldr	r2, [pc, #428]	@ (80071b0 <DMA_SetConfig+0x250>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d031      	beq.n	800706a <DMA_SetConfig+0x10a>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a6a      	ldr	r2, [pc, #424]	@ (80071b4 <DMA_SetConfig+0x254>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d02c      	beq.n	800706a <DMA_SetConfig+0x10a>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a68      	ldr	r2, [pc, #416]	@ (80071b8 <DMA_SetConfig+0x258>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d027      	beq.n	800706a <DMA_SetConfig+0x10a>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a67      	ldr	r2, [pc, #412]	@ (80071bc <DMA_SetConfig+0x25c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d022      	beq.n	800706a <DMA_SetConfig+0x10a>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a65      	ldr	r2, [pc, #404]	@ (80071c0 <DMA_SetConfig+0x260>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d01d      	beq.n	800706a <DMA_SetConfig+0x10a>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a64      	ldr	r2, [pc, #400]	@ (80071c4 <DMA_SetConfig+0x264>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d018      	beq.n	800706a <DMA_SetConfig+0x10a>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a62      	ldr	r2, [pc, #392]	@ (80071c8 <DMA_SetConfig+0x268>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d013      	beq.n	800706a <DMA_SetConfig+0x10a>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a61      	ldr	r2, [pc, #388]	@ (80071cc <DMA_SetConfig+0x26c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00e      	beq.n	800706a <DMA_SetConfig+0x10a>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a5f      	ldr	r2, [pc, #380]	@ (80071d0 <DMA_SetConfig+0x270>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d009      	beq.n	800706a <DMA_SetConfig+0x10a>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a5e      	ldr	r2, [pc, #376]	@ (80071d4 <DMA_SetConfig+0x274>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d004      	beq.n	800706a <DMA_SetConfig+0x10a>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a5c      	ldr	r2, [pc, #368]	@ (80071d8 <DMA_SetConfig+0x278>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d101      	bne.n	800706e <DMA_SetConfig+0x10e>
 800706a:	2301      	movs	r3, #1
 800706c:	e000      	b.n	8007070 <DMA_SetConfig+0x110>
 800706e:	2300      	movs	r3, #0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00d      	beq.n	8007090 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800707c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800708e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a39      	ldr	r2, [pc, #228]	@ (800717c <DMA_SetConfig+0x21c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d04a      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a38      	ldr	r2, [pc, #224]	@ (8007180 <DMA_SetConfig+0x220>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d045      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a36      	ldr	r2, [pc, #216]	@ (8007184 <DMA_SetConfig+0x224>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d040      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a35      	ldr	r2, [pc, #212]	@ (8007188 <DMA_SetConfig+0x228>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d03b      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a33      	ldr	r2, [pc, #204]	@ (800718c <DMA_SetConfig+0x22c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d036      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a32      	ldr	r2, [pc, #200]	@ (8007190 <DMA_SetConfig+0x230>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d031      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a30      	ldr	r2, [pc, #192]	@ (8007194 <DMA_SetConfig+0x234>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d02c      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a2f      	ldr	r2, [pc, #188]	@ (8007198 <DMA_SetConfig+0x238>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d027      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a2d      	ldr	r2, [pc, #180]	@ (800719c <DMA_SetConfig+0x23c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d022      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a2c      	ldr	r2, [pc, #176]	@ (80071a0 <DMA_SetConfig+0x240>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d01d      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a2a      	ldr	r2, [pc, #168]	@ (80071a4 <DMA_SetConfig+0x244>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d018      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a29      	ldr	r2, [pc, #164]	@ (80071a8 <DMA_SetConfig+0x248>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d013      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a27      	ldr	r2, [pc, #156]	@ (80071ac <DMA_SetConfig+0x24c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00e      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a26      	ldr	r2, [pc, #152]	@ (80071b0 <DMA_SetConfig+0x250>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d009      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a24      	ldr	r2, [pc, #144]	@ (80071b4 <DMA_SetConfig+0x254>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d004      	beq.n	8007130 <DMA_SetConfig+0x1d0>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a23      	ldr	r2, [pc, #140]	@ (80071b8 <DMA_SetConfig+0x258>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d101      	bne.n	8007134 <DMA_SetConfig+0x1d4>
 8007130:	2301      	movs	r3, #1
 8007132:	e000      	b.n	8007136 <DMA_SetConfig+0x1d6>
 8007134:	2300      	movs	r3, #0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d059      	beq.n	80071ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800713e:	f003 031f 	and.w	r3, r3, #31
 8007142:	223f      	movs	r2, #63	@ 0x3f
 8007144:	409a      	lsls	r2, r3
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007158:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	2b40      	cmp	r3, #64	@ 0x40
 8007168:	d138      	bne.n	80071dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800717a:	e0ae      	b.n	80072da <DMA_SetConfig+0x37a>
 800717c:	40020010 	.word	0x40020010
 8007180:	40020028 	.word	0x40020028
 8007184:	40020040 	.word	0x40020040
 8007188:	40020058 	.word	0x40020058
 800718c:	40020070 	.word	0x40020070
 8007190:	40020088 	.word	0x40020088
 8007194:	400200a0 	.word	0x400200a0
 8007198:	400200b8 	.word	0x400200b8
 800719c:	40020410 	.word	0x40020410
 80071a0:	40020428 	.word	0x40020428
 80071a4:	40020440 	.word	0x40020440
 80071a8:	40020458 	.word	0x40020458
 80071ac:	40020470 	.word	0x40020470
 80071b0:	40020488 	.word	0x40020488
 80071b4:	400204a0 	.word	0x400204a0
 80071b8:	400204b8 	.word	0x400204b8
 80071bc:	58025408 	.word	0x58025408
 80071c0:	5802541c 	.word	0x5802541c
 80071c4:	58025430 	.word	0x58025430
 80071c8:	58025444 	.word	0x58025444
 80071cc:	58025458 	.word	0x58025458
 80071d0:	5802546c 	.word	0x5802546c
 80071d4:	58025480 	.word	0x58025480
 80071d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	60da      	str	r2, [r3, #12]
}
 80071ec:	e075      	b.n	80072da <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a3d      	ldr	r2, [pc, #244]	@ (80072e8 <DMA_SetConfig+0x388>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d04a      	beq.n	800728e <DMA_SetConfig+0x32e>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a3b      	ldr	r2, [pc, #236]	@ (80072ec <DMA_SetConfig+0x38c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d045      	beq.n	800728e <DMA_SetConfig+0x32e>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a3a      	ldr	r2, [pc, #232]	@ (80072f0 <DMA_SetConfig+0x390>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d040      	beq.n	800728e <DMA_SetConfig+0x32e>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a38      	ldr	r2, [pc, #224]	@ (80072f4 <DMA_SetConfig+0x394>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d03b      	beq.n	800728e <DMA_SetConfig+0x32e>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a37      	ldr	r2, [pc, #220]	@ (80072f8 <DMA_SetConfig+0x398>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d036      	beq.n	800728e <DMA_SetConfig+0x32e>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a35      	ldr	r2, [pc, #212]	@ (80072fc <DMA_SetConfig+0x39c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d031      	beq.n	800728e <DMA_SetConfig+0x32e>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a34      	ldr	r2, [pc, #208]	@ (8007300 <DMA_SetConfig+0x3a0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d02c      	beq.n	800728e <DMA_SetConfig+0x32e>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a32      	ldr	r2, [pc, #200]	@ (8007304 <DMA_SetConfig+0x3a4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d027      	beq.n	800728e <DMA_SetConfig+0x32e>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a31      	ldr	r2, [pc, #196]	@ (8007308 <DMA_SetConfig+0x3a8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d022      	beq.n	800728e <DMA_SetConfig+0x32e>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a2f      	ldr	r2, [pc, #188]	@ (800730c <DMA_SetConfig+0x3ac>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d01d      	beq.n	800728e <DMA_SetConfig+0x32e>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a2e      	ldr	r2, [pc, #184]	@ (8007310 <DMA_SetConfig+0x3b0>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d018      	beq.n	800728e <DMA_SetConfig+0x32e>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a2c      	ldr	r2, [pc, #176]	@ (8007314 <DMA_SetConfig+0x3b4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d013      	beq.n	800728e <DMA_SetConfig+0x32e>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a2b      	ldr	r2, [pc, #172]	@ (8007318 <DMA_SetConfig+0x3b8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00e      	beq.n	800728e <DMA_SetConfig+0x32e>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a29      	ldr	r2, [pc, #164]	@ (800731c <DMA_SetConfig+0x3bc>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d009      	beq.n	800728e <DMA_SetConfig+0x32e>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a28      	ldr	r2, [pc, #160]	@ (8007320 <DMA_SetConfig+0x3c0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d004      	beq.n	800728e <DMA_SetConfig+0x32e>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a26      	ldr	r2, [pc, #152]	@ (8007324 <DMA_SetConfig+0x3c4>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d101      	bne.n	8007292 <DMA_SetConfig+0x332>
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <DMA_SetConfig+0x334>
 8007292:	2300      	movs	r3, #0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d020      	beq.n	80072da <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	2201      	movs	r2, #1
 80072a2:	409a      	lsls	r2, r3
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	2b40      	cmp	r3, #64	@ 0x40
 80072b6:	d108      	bne.n	80072ca <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	60da      	str	r2, [r3, #12]
}
 80072c8:	e007      	b.n	80072da <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	60da      	str	r2, [r3, #12]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	48022c08 	.word	0x48022c08
 80072ec:	48022c1c 	.word	0x48022c1c
 80072f0:	48022c30 	.word	0x48022c30
 80072f4:	48022c44 	.word	0x48022c44
 80072f8:	48022c58 	.word	0x48022c58
 80072fc:	48022c6c 	.word	0x48022c6c
 8007300:	48022c80 	.word	0x48022c80
 8007304:	48022c94 	.word	0x48022c94
 8007308:	58025408 	.word	0x58025408
 800730c:	5802541c 	.word	0x5802541c
 8007310:	58025430 	.word	0x58025430
 8007314:	58025444 	.word	0x58025444
 8007318:	58025458 	.word	0x58025458
 800731c:	5802546c 	.word	0x5802546c
 8007320:	58025480 	.word	0x58025480
 8007324:	58025494 	.word	0x58025494

08007328 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a42      	ldr	r2, [pc, #264]	@ (8007440 <DMA_CalcBaseAndBitshift+0x118>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d04a      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a41      	ldr	r2, [pc, #260]	@ (8007444 <DMA_CalcBaseAndBitshift+0x11c>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d045      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a3f      	ldr	r2, [pc, #252]	@ (8007448 <DMA_CalcBaseAndBitshift+0x120>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d040      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a3e      	ldr	r2, [pc, #248]	@ (800744c <DMA_CalcBaseAndBitshift+0x124>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d03b      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a3c      	ldr	r2, [pc, #240]	@ (8007450 <DMA_CalcBaseAndBitshift+0x128>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d036      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a3b      	ldr	r2, [pc, #236]	@ (8007454 <DMA_CalcBaseAndBitshift+0x12c>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d031      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a39      	ldr	r2, [pc, #228]	@ (8007458 <DMA_CalcBaseAndBitshift+0x130>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d02c      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a38      	ldr	r2, [pc, #224]	@ (800745c <DMA_CalcBaseAndBitshift+0x134>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d027      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a36      	ldr	r2, [pc, #216]	@ (8007460 <DMA_CalcBaseAndBitshift+0x138>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d022      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a35      	ldr	r2, [pc, #212]	@ (8007464 <DMA_CalcBaseAndBitshift+0x13c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d01d      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a33      	ldr	r2, [pc, #204]	@ (8007468 <DMA_CalcBaseAndBitshift+0x140>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d018      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a32      	ldr	r2, [pc, #200]	@ (800746c <DMA_CalcBaseAndBitshift+0x144>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d013      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a30      	ldr	r2, [pc, #192]	@ (8007470 <DMA_CalcBaseAndBitshift+0x148>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00e      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007474 <DMA_CalcBaseAndBitshift+0x14c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d009      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007478 <DMA_CalcBaseAndBitshift+0x150>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d004      	beq.n	80073d0 <DMA_CalcBaseAndBitshift+0xa8>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a2c      	ldr	r2, [pc, #176]	@ (800747c <DMA_CalcBaseAndBitshift+0x154>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d101      	bne.n	80073d4 <DMA_CalcBaseAndBitshift+0xac>
 80073d0:	2301      	movs	r3, #1
 80073d2:	e000      	b.n	80073d6 <DMA_CalcBaseAndBitshift+0xae>
 80073d4:	2300      	movs	r3, #0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d024      	beq.n	8007424 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	3b10      	subs	r3, #16
 80073e2:	4a27      	ldr	r2, [pc, #156]	@ (8007480 <DMA_CalcBaseAndBitshift+0x158>)
 80073e4:	fba2 2303 	umull	r2, r3, r2, r3
 80073e8:	091b      	lsrs	r3, r3, #4
 80073ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f003 0307 	and.w	r3, r3, #7
 80073f2:	4a24      	ldr	r2, [pc, #144]	@ (8007484 <DMA_CalcBaseAndBitshift+0x15c>)
 80073f4:	5cd3      	ldrb	r3, [r2, r3]
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d908      	bls.n	8007414 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	4b1f      	ldr	r3, [pc, #124]	@ (8007488 <DMA_CalcBaseAndBitshift+0x160>)
 800740a:	4013      	ands	r3, r2
 800740c:	1d1a      	adds	r2, r3, #4
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	659a      	str	r2, [r3, #88]	@ 0x58
 8007412:	e00d      	b.n	8007430 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	4b1b      	ldr	r3, [pc, #108]	@ (8007488 <DMA_CalcBaseAndBitshift+0x160>)
 800741c:	4013      	ands	r3, r2
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	6593      	str	r3, [r2, #88]	@ 0x58
 8007422:	e005      	b.n	8007430 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	40020010 	.word	0x40020010
 8007444:	40020028 	.word	0x40020028
 8007448:	40020040 	.word	0x40020040
 800744c:	40020058 	.word	0x40020058
 8007450:	40020070 	.word	0x40020070
 8007454:	40020088 	.word	0x40020088
 8007458:	400200a0 	.word	0x400200a0
 800745c:	400200b8 	.word	0x400200b8
 8007460:	40020410 	.word	0x40020410
 8007464:	40020428 	.word	0x40020428
 8007468:	40020440 	.word	0x40020440
 800746c:	40020458 	.word	0x40020458
 8007470:	40020470 	.word	0x40020470
 8007474:	40020488 	.word	0x40020488
 8007478:	400204a0 	.word	0x400204a0
 800747c:	400204b8 	.word	0x400204b8
 8007480:	aaaaaaab 	.word	0xaaaaaaab
 8007484:	08014c38 	.word	0x08014c38
 8007488:	fffffc00 	.word	0xfffffc00

0800748c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d120      	bne.n	80074e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d858      	bhi.n	800755a <DMA_CheckFifoParam+0xce>
 80074a8:	a201      	add	r2, pc, #4	@ (adr r2, 80074b0 <DMA_CheckFifoParam+0x24>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074c1 	.word	0x080074c1
 80074b4:	080074d3 	.word	0x080074d3
 80074b8:	080074c1 	.word	0x080074c1
 80074bc:	0800755b 	.word	0x0800755b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d048      	beq.n	800755e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074d0:	e045      	b.n	800755e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80074da:	d142      	bne.n	8007562 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074e0:	e03f      	b.n	8007562 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074ea:	d123      	bne.n	8007534 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d838      	bhi.n	8007566 <DMA_CheckFifoParam+0xda>
 80074f4:	a201      	add	r2, pc, #4	@ (adr r2, 80074fc <DMA_CheckFifoParam+0x70>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	0800750d 	.word	0x0800750d
 8007500:	08007513 	.word	0x08007513
 8007504:	0800750d 	.word	0x0800750d
 8007508:	08007525 	.word	0x08007525
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	73fb      	strb	r3, [r7, #15]
        break;
 8007510:	e030      	b.n	8007574 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007516:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d025      	beq.n	800756a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007522:	e022      	b.n	800756a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007528:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800752c:	d11f      	bne.n	800756e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007532:	e01c      	b.n	800756e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	2b02      	cmp	r3, #2
 800753a:	d902      	bls.n	8007542 <DMA_CheckFifoParam+0xb6>
 800753c:	2b03      	cmp	r3, #3
 800753e:	d003      	beq.n	8007548 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007540:	e018      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	73fb      	strb	r3, [r7, #15]
        break;
 8007546:	e015      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00e      	beq.n	8007572 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	73fb      	strb	r3, [r7, #15]
    break;
 8007558:	e00b      	b.n	8007572 <DMA_CheckFifoParam+0xe6>
        break;
 800755a:	bf00      	nop
 800755c:	e00a      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
        break;
 800755e:	bf00      	nop
 8007560:	e008      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
        break;
 8007562:	bf00      	nop
 8007564:	e006      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
        break;
 8007566:	bf00      	nop
 8007568:	e004      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
        break;
 800756a:	bf00      	nop
 800756c:	e002      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
        break;
 800756e:	bf00      	nop
 8007570:	e000      	b.n	8007574 <DMA_CheckFifoParam+0xe8>
    break;
 8007572:	bf00      	nop
    }
  }

  return status;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop

08007584 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a38      	ldr	r2, [pc, #224]	@ (8007678 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d022      	beq.n	80075e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a36      	ldr	r2, [pc, #216]	@ (800767c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d01d      	beq.n	80075e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a35      	ldr	r2, [pc, #212]	@ (8007680 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d018      	beq.n	80075e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a33      	ldr	r2, [pc, #204]	@ (8007684 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d013      	beq.n	80075e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a32      	ldr	r2, [pc, #200]	@ (8007688 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00e      	beq.n	80075e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a30      	ldr	r2, [pc, #192]	@ (800768c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d009      	beq.n	80075e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a2f      	ldr	r2, [pc, #188]	@ (8007690 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d004      	beq.n	80075e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007694 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d101      	bne.n	80075e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e000      	b.n	80075e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075e6:	2300      	movs	r3, #0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01a      	beq.n	8007622 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	3b08      	subs	r3, #8
 80075f4:	4a28      	ldr	r2, [pc, #160]	@ (8007698 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80075f6:	fba2 2303 	umull	r2, r3, r2, r3
 80075fa:	091b      	lsrs	r3, r3, #4
 80075fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4b26      	ldr	r3, [pc, #152]	@ (800769c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	461a      	mov	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a24      	ldr	r2, [pc, #144]	@ (80076a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007610:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f003 031f 	and.w	r3, r3, #31
 8007618:	2201      	movs	r2, #1
 800761a:	409a      	lsls	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007620:	e024      	b.n	800766c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	b2db      	uxtb	r3, r3
 8007628:	3b10      	subs	r3, #16
 800762a:	4a1e      	ldr	r2, [pc, #120]	@ (80076a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800762c:	fba2 2303 	umull	r2, r3, r2, r3
 8007630:	091b      	lsrs	r3, r3, #4
 8007632:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4a1c      	ldr	r2, [pc, #112]	@ (80076a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d806      	bhi.n	800764a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4a1b      	ldr	r2, [pc, #108]	@ (80076ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d902      	bls.n	800764a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3308      	adds	r3, #8
 8007648:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4b18      	ldr	r3, [pc, #96]	@ (80076b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	461a      	mov	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a16      	ldr	r2, [pc, #88]	@ (80076b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800765c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f003 031f 	and.w	r3, r3, #31
 8007664:	2201      	movs	r2, #1
 8007666:	409a      	lsls	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800766c:	bf00      	nop
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	58025408 	.word	0x58025408
 800767c:	5802541c 	.word	0x5802541c
 8007680:	58025430 	.word	0x58025430
 8007684:	58025444 	.word	0x58025444
 8007688:	58025458 	.word	0x58025458
 800768c:	5802546c 	.word	0x5802546c
 8007690:	58025480 	.word	0x58025480
 8007694:	58025494 	.word	0x58025494
 8007698:	cccccccd 	.word	0xcccccccd
 800769c:	16009600 	.word	0x16009600
 80076a0:	58025880 	.word	0x58025880
 80076a4:	aaaaaaab 	.word	0xaaaaaaab
 80076a8:	400204b8 	.word	0x400204b8
 80076ac:	4002040f 	.word	0x4002040f
 80076b0:	10008200 	.word	0x10008200
 80076b4:	40020880 	.word	0x40020880

080076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d04a      	beq.n	8007764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d847      	bhi.n	8007764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a25      	ldr	r2, [pc, #148]	@ (8007770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d022      	beq.n	8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a24      	ldr	r2, [pc, #144]	@ (8007774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d01d      	beq.n	8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a22      	ldr	r2, [pc, #136]	@ (8007778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d018      	beq.n	8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a21      	ldr	r2, [pc, #132]	@ (800777c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d013      	beq.n	8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1f      	ldr	r2, [pc, #124]	@ (8007780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00e      	beq.n	8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1e      	ldr	r2, [pc, #120]	@ (8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d009      	beq.n	8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1c      	ldr	r2, [pc, #112]	@ (8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d004      	beq.n	8007724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1b      	ldr	r2, [pc, #108]	@ (800778c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d101      	bne.n	8007728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007724:	2301      	movs	r3, #1
 8007726:	e000      	b.n	800772a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007728:	2300      	movs	r3, #0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	4b17      	ldr	r3, [pc, #92]	@ (8007790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a15      	ldr	r2, [pc, #84]	@ (8007794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007740:	671a      	str	r2, [r3, #112]	@ 0x70
 8007742:	e009      	b.n	8007758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4b14      	ldr	r3, [pc, #80]	@ (8007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	461a      	mov	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a11      	ldr	r2, [pc, #68]	@ (800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007756:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3b01      	subs	r3, #1
 800775c:	2201      	movs	r2, #1
 800775e:	409a      	lsls	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007764:	bf00      	nop
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	58025408 	.word	0x58025408
 8007774:	5802541c 	.word	0x5802541c
 8007778:	58025430 	.word	0x58025430
 800777c:	58025444 	.word	0x58025444
 8007780:	58025458 	.word	0x58025458
 8007784:	5802546c 	.word	0x5802546c
 8007788:	58025480 	.word	0x58025480
 800778c:	58025494 	.word	0x58025494
 8007790:	1600963f 	.word	0x1600963f
 8007794:	58025940 	.word	0x58025940
 8007798:	1000823f 	.word	0x1000823f
 800779c:	40020940 	.word	0x40020940

080077a0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b098      	sub	sp, #96	@ 0x60
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80077a8:	4a84      	ldr	r2, [pc, #528]	@ (80079bc <HAL_FDCAN_Init+0x21c>)
 80077aa:	f107 030c 	add.w	r3, r7, #12
 80077ae:	4611      	mov	r1, r2
 80077b0:	224c      	movs	r2, #76	@ 0x4c
 80077b2:	4618      	mov	r0, r3
 80077b4:	f00c ffec 	bl	8014790 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e1c6      	b.n	8007b50 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a7e      	ldr	r2, [pc, #504]	@ (80079c0 <HAL_FDCAN_Init+0x220>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d106      	bne.n	80077da <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80077d4:	461a      	mov	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fb fa92 	bl	8002d18 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699a      	ldr	r2, [r3, #24]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0210 	bic.w	r2, r2, #16
 8007802:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007804:	f7fc ff5a 	bl	80046bc <HAL_GetTick>
 8007808:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800780a:	e014      	b.n	8007836 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800780c:	f7fc ff56 	bl	80046bc <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b0a      	cmp	r3, #10
 8007818:	d90d      	bls.n	8007836 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007820:	f043 0201 	orr.w	r2, r3, #1
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2203      	movs	r2, #3
 800782e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e18c      	b.n	8007b50 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	f003 0308 	and.w	r3, r3, #8
 8007840:	2b08      	cmp	r3, #8
 8007842:	d0e3      	beq.n	800780c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0201 	orr.w	r2, r2, #1
 8007852:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007854:	f7fc ff32 	bl	80046bc <HAL_GetTick>
 8007858:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800785a:	e014      	b.n	8007886 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800785c:	f7fc ff2e 	bl	80046bc <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b0a      	cmp	r3, #10
 8007868:	d90d      	bls.n	8007886 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007870:	f043 0201 	orr.w	r2, r3, #1
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2203      	movs	r2, #3
 800787e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e164      	b.n	8007b50 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0e3      	beq.n	800785c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699a      	ldr	r2, [r3, #24]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0202 	orr.w	r2, r2, #2
 80078a2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7c1b      	ldrb	r3, [r3, #16]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d108      	bne.n	80078be <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699a      	ldr	r2, [r3, #24]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078ba:	619a      	str	r2, [r3, #24]
 80078bc:	e007      	b.n	80078ce <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	7c5b      	ldrb	r3, [r3, #17]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d108      	bne.n	80078e8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	699a      	ldr	r2, [r3, #24]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078e4:	619a      	str	r2, [r3, #24]
 80078e6:	e007      	b.n	80078f8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	7c9b      	ldrb	r3, [r3, #18]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d108      	bne.n	8007912 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800790e:	619a      	str	r2, [r3, #24]
 8007910:	e007      	b.n	8007922 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	699a      	ldr	r2, [r3, #24]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007920:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	699a      	ldr	r2, [r3, #24]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007946:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	691a      	ldr	r2, [r3, #16]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0210 	bic.w	r2, r2, #16
 8007956:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d108      	bne.n	8007972 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0204 	orr.w	r2, r2, #4
 800796e:	619a      	str	r2, [r3, #24]
 8007970:	e030      	b.n	80079d4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d02c      	beq.n	80079d4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	2b02      	cmp	r3, #2
 8007980:	d020      	beq.n	80079c4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	699a      	ldr	r2, [r3, #24]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007990:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	691a      	ldr	r2, [r3, #16]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0210 	orr.w	r2, r2, #16
 80079a0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d114      	bne.n	80079d4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	699a      	ldr	r2, [r3, #24]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0220 	orr.w	r2, r2, #32
 80079b8:	619a      	str	r2, [r3, #24]
 80079ba:	e00b      	b.n	80079d4 <HAL_FDCAN_Init+0x234>
 80079bc:	08014b94 	.word	0x08014b94
 80079c0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699a      	ldr	r2, [r3, #24]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0220 	orr.w	r2, r2, #32
 80079d2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	3b01      	subs	r3, #1
 80079da:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079e4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80079ec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80079fc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079fe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a08:	d115      	bne.n	8007a36 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a14:	3b01      	subs	r3, #1
 8007a16:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a18:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007a22:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007a32:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a34:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a5c:	4413      	add	r3, r2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d011      	beq.n	8007a86 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007a6a:	f023 0107 	bic.w	r1, r3, #7
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	3360      	adds	r3, #96	@ 0x60
 8007a76:	443b      	add	r3, r7
 8007a78:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d011      	beq.n	8007ab2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007a96:	f023 0107 	bic.w	r1, r3, #7
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	3360      	adds	r3, #96	@ 0x60
 8007aa2:	443b      	add	r3, r7
 8007aa4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d012      	beq.n	8007ae0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ac2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	3360      	adds	r3, #96	@ 0x60
 8007ace:	443b      	add	r3, r7
 8007ad0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007ad4:	011a      	lsls	r2, r3, #4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d012      	beq.n	8007b0e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007af0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	3360      	adds	r3, #96	@ 0x60
 8007afc:	443b      	add	r3, r7
 8007afe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007b02:	021a      	lsls	r2, r3, #8
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a11      	ldr	r2, [pc, #68]	@ (8007b58 <HAL_FDCAN_Init+0x3b8>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d107      	bne.n	8007b28 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f022 0203 	bic.w	r2, r2, #3
 8007b26:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f80b 	bl	8007b5c <FDCAN_CalcultateRamBlockAddresses>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007b4c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3760      	adds	r7, #96	@ 0x60
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	4000a000 	.word	0x4000a000

08007b5c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b68:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007b72:	4ba7      	ldr	r3, [pc, #668]	@ (8007e10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	0091      	lsls	r1, r2, #2
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6812      	ldr	r2, [r2, #0]
 8007b7e:	430b      	orrs	r3, r1
 8007b80:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b8c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b94:	041a      	lsls	r2, r3, #16
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007bb2:	4b97      	ldr	r3, [pc, #604]	@ (8007e10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	0091      	lsls	r1, r2, #2
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bcc:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd4:	041a      	lsls	r2, r3, #16
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	4413      	add	r3, r2
 8007bea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007bf4:	4b86      	ldr	r3, [pc, #536]	@ (8007e10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	0091      	lsls	r1, r2, #2
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	6812      	ldr	r2, [r2, #0]
 8007c00:	430b      	orrs	r3, r1
 8007c02:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c0e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	041a      	lsls	r2, r3, #16
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007c2a:	fb02 f303 	mul.w	r3, r2, r3
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	4413      	add	r3, r2
 8007c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007c3c:	4b74      	ldr	r3, [pc, #464]	@ (8007e10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	0091      	lsls	r1, r2, #2
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6812      	ldr	r2, [r2, #0]
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007c56:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c5e:	041a      	lsls	r2, r3, #16
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007c72:	fb02 f303 	mul.w	r3, r2, r3
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	4413      	add	r3, r2
 8007c7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007c84:	4b62      	ldr	r3, [pc, #392]	@ (8007e10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c86:	4013      	ands	r3, r2
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	0091      	lsls	r1, r2, #2
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	430b      	orrs	r3, r1
 8007c92:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007c9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007cb0:	4b57      	ldr	r3, [pc, #348]	@ (8007e10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	0091      	lsls	r1, r2, #2
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6812      	ldr	r2, [r2, #0]
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cca:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cd2:	041a      	lsls	r2, r3, #16
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007cf2:	4b47      	ldr	r3, [pc, #284]	@ (8007e10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	0091      	lsls	r1, r2, #2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6812      	ldr	r2, [r2, #0]
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d0c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d14:	041a      	lsls	r2, r3, #16
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d28:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d30:	061a      	lsls	r2, r3, #24
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d40:	4b34      	ldr	r3, [pc, #208]	@ (8007e14 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007d42:	4413      	add	r3, r2
 8007d44:	009a      	lsls	r2, r3, #2
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	441a      	add	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	441a      	add	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d72:	6879      	ldr	r1, [r7, #4]
 8007d74:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8007d76:	fb01 f303 	mul.w	r3, r1, r3
 8007d7a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007d7c:	441a      	add	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d8a:	6879      	ldr	r1, [r7, #4]
 8007d8c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8007d8e:	fb01 f303 	mul.w	r3, r1, r3
 8007d92:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007d94:	441a      	add	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8007da6:	fb01 f303 	mul.w	r3, r1, r3
 8007daa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007dac:	441a      	add	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	441a      	add	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	441a      	add	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007df2:	fb01 f303 	mul.w	r3, r1, r3
 8007df6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007df8:	441a      	add	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e06:	4a04      	ldr	r2, [pc, #16]	@ (8007e18 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d915      	bls.n	8007e38 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007e0c:	e006      	b.n	8007e1c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007e0e:	bf00      	nop
 8007e10:	ffff0003 	.word	0xffff0003
 8007e14:	10002b00 	.word	0x10002b00
 8007e18:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e22:	f043 0220 	orr.w	r2, r3, #32
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2203      	movs	r2, #3
 8007e30:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e010      	b.n	8007e5a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	e005      	b.n	8007e4c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d3f3      	bcc.n	8007e40 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop

08007e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b089      	sub	sp, #36	@ 0x24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e76:	4b89      	ldr	r3, [pc, #548]	@ (800809c <HAL_GPIO_Init+0x234>)
 8007e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e7a:	e194      	b.n	80081a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	2101      	movs	r1, #1
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	fa01 f303 	lsl.w	r3, r1, r3
 8007e88:	4013      	ands	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 8186 	beq.w	80081a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d005      	beq.n	8007eac <HAL_GPIO_Init+0x44>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d130      	bne.n	8007f0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	2203      	movs	r2, #3
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eea:	43db      	mvns	r3, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	091b      	lsrs	r3, r3, #4
 8007ef8:	f003 0201 	and.w	r2, r3, #1
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	fa02 f303 	lsl.w	r3, r2, r3
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d017      	beq.n	8007f4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	2203      	movs	r2, #3
 8007f26:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2a:	43db      	mvns	r3, r3
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	689a      	ldr	r2, [r3, #8]
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d123      	bne.n	8007f9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	08da      	lsrs	r2, r3, #3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3208      	adds	r2, #8
 8007f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	220f      	movs	r2, #15
 8007f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f72:	43db      	mvns	r3, r3
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	4013      	ands	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	08da      	lsrs	r2, r3, #3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3208      	adds	r2, #8
 8007f98:	69b9      	ldr	r1, [r7, #24]
 8007f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	2203      	movs	r2, #3
 8007faa:	fa02 f303 	lsl.w	r3, r2, r3
 8007fae:	43db      	mvns	r3, r3
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f003 0203 	and.w	r2, r3, #3
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 80e0 	beq.w	80081a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80080a0 <HAL_GPIO_Init+0x238>)
 8007fe2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007fe6:	4a2e      	ldr	r2, [pc, #184]	@ (80080a0 <HAL_GPIO_Init+0x238>)
 8007fe8:	f043 0302 	orr.w	r3, r3, #2
 8007fec:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8007ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80080a0 <HAL_GPIO_Init+0x238>)
 8007ff2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ffe:	4a29      	ldr	r2, [pc, #164]	@ (80080a4 <HAL_GPIO_Init+0x23c>)
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	089b      	lsrs	r3, r3, #2
 8008004:	3302      	adds	r3, #2
 8008006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800800a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	220f      	movs	r2, #15
 8008016:	fa02 f303 	lsl.w	r3, r2, r3
 800801a:	43db      	mvns	r3, r3
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	4013      	ands	r3, r2
 8008020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a20      	ldr	r2, [pc, #128]	@ (80080a8 <HAL_GPIO_Init+0x240>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d052      	beq.n	80080d0 <HAL_GPIO_Init+0x268>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a1f      	ldr	r2, [pc, #124]	@ (80080ac <HAL_GPIO_Init+0x244>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d031      	beq.n	8008096 <HAL_GPIO_Init+0x22e>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a1e      	ldr	r2, [pc, #120]	@ (80080b0 <HAL_GPIO_Init+0x248>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d02b      	beq.n	8008092 <HAL_GPIO_Init+0x22a>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a1d      	ldr	r2, [pc, #116]	@ (80080b4 <HAL_GPIO_Init+0x24c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d025      	beq.n	800808e <HAL_GPIO_Init+0x226>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a1c      	ldr	r2, [pc, #112]	@ (80080b8 <HAL_GPIO_Init+0x250>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d01f      	beq.n	800808a <HAL_GPIO_Init+0x222>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a1b      	ldr	r2, [pc, #108]	@ (80080bc <HAL_GPIO_Init+0x254>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d019      	beq.n	8008086 <HAL_GPIO_Init+0x21e>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a1a      	ldr	r2, [pc, #104]	@ (80080c0 <HAL_GPIO_Init+0x258>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d013      	beq.n	8008082 <HAL_GPIO_Init+0x21a>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a19      	ldr	r2, [pc, #100]	@ (80080c4 <HAL_GPIO_Init+0x25c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00d      	beq.n	800807e <HAL_GPIO_Init+0x216>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a18      	ldr	r2, [pc, #96]	@ (80080c8 <HAL_GPIO_Init+0x260>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d007      	beq.n	800807a <HAL_GPIO_Init+0x212>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a17      	ldr	r2, [pc, #92]	@ (80080cc <HAL_GPIO_Init+0x264>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d101      	bne.n	8008076 <HAL_GPIO_Init+0x20e>
 8008072:	2309      	movs	r3, #9
 8008074:	e02d      	b.n	80080d2 <HAL_GPIO_Init+0x26a>
 8008076:	230a      	movs	r3, #10
 8008078:	e02b      	b.n	80080d2 <HAL_GPIO_Init+0x26a>
 800807a:	2308      	movs	r3, #8
 800807c:	e029      	b.n	80080d2 <HAL_GPIO_Init+0x26a>
 800807e:	2307      	movs	r3, #7
 8008080:	e027      	b.n	80080d2 <HAL_GPIO_Init+0x26a>
 8008082:	2306      	movs	r3, #6
 8008084:	e025      	b.n	80080d2 <HAL_GPIO_Init+0x26a>
 8008086:	2305      	movs	r3, #5
 8008088:	e023      	b.n	80080d2 <HAL_GPIO_Init+0x26a>
 800808a:	2304      	movs	r3, #4
 800808c:	e021      	b.n	80080d2 <HAL_GPIO_Init+0x26a>
 800808e:	2303      	movs	r3, #3
 8008090:	e01f      	b.n	80080d2 <HAL_GPIO_Init+0x26a>
 8008092:	2302      	movs	r3, #2
 8008094:	e01d      	b.n	80080d2 <HAL_GPIO_Init+0x26a>
 8008096:	2301      	movs	r3, #1
 8008098:	e01b      	b.n	80080d2 <HAL_GPIO_Init+0x26a>
 800809a:	bf00      	nop
 800809c:	58000080 	.word	0x58000080
 80080a0:	58024400 	.word	0x58024400
 80080a4:	58000400 	.word	0x58000400
 80080a8:	58020000 	.word	0x58020000
 80080ac:	58020400 	.word	0x58020400
 80080b0:	58020800 	.word	0x58020800
 80080b4:	58020c00 	.word	0x58020c00
 80080b8:	58021000 	.word	0x58021000
 80080bc:	58021400 	.word	0x58021400
 80080c0:	58021800 	.word	0x58021800
 80080c4:	58021c00 	.word	0x58021c00
 80080c8:	58022000 	.word	0x58022000
 80080cc:	58022400 	.word	0x58022400
 80080d0:	2300      	movs	r3, #0
 80080d2:	69fa      	ldr	r2, [r7, #28]
 80080d4:	f002 0203 	and.w	r2, r2, #3
 80080d8:	0092      	lsls	r2, r2, #2
 80080da:	4093      	lsls	r3, r2
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	4313      	orrs	r3, r2
 80080e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080e2:	4938      	ldr	r1, [pc, #224]	@ (80081c4 <HAL_GPIO_Init+0x35c>)
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	089b      	lsrs	r3, r3, #2
 80080e8:	3302      	adds	r3, #2
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	43db      	mvns	r3, r3
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	4013      	ands	r3, r2
 8008100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008116:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800811e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	43db      	mvns	r3, r3
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	4013      	ands	r3, r2
 800812e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008144:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	43db      	mvns	r3, r3
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	4013      	ands	r3, r2
 800815a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	43db      	mvns	r3, r3
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	4013      	ands	r3, r2
 8008184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	4313      	orrs	r3, r2
 8008198:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	3301      	adds	r3, #1
 80081a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	fa22 f303 	lsr.w	r3, r2, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f47f ae63 	bne.w	8007e7c <HAL_GPIO_Init+0x14>
  }
}
 80081b6:	bf00      	nop
 80081b8:	bf00      	nop
 80081ba:	3724      	adds	r7, #36	@ 0x24
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	58000400 	.word	0x58000400

080081c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
 80081d4:	4613      	mov	r3, r2
 80081d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80081d8:	787b      	ldrb	r3, [r7, #1]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081de:	887a      	ldrh	r2, [r7, #2]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80081e4:	e003      	b.n	80081ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80081e6:	887b      	ldrh	r3, [r7, #2]
 80081e8:	041a      	lsls	r2, r3, #16
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	619a      	str	r2, [r3, #24]
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e08b      	b.n	8008326 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fa fee4 	bl	8002ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2224      	movs	r2, #36	@ 0x24
 800822c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0201 	bic.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800824c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800825c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d107      	bne.n	8008276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008272:	609a      	str	r2, [r3, #8]
 8008274:	e006      	b.n	8008284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d108      	bne.n	800829e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800829a:	605a      	str	r2, [r3, #4]
 800829c:	e007      	b.n	80082ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6859      	ldr	r1, [r3, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008330 <HAL_I2C_Init+0x134>)
 80082ba:	430b      	orrs	r3, r1
 80082bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	430a      	orrs	r2, r1
 80082e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	69d9      	ldr	r1, [r3, #28]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a1a      	ldr	r2, [r3, #32]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f042 0201 	orr.w	r2, r2, #1
 8008306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	02008000 	.word	0x02008000

08008334 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b20      	cmp	r3, #32
 8008348:	d138      	bne.n	80083bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008350:	2b01      	cmp	r3, #1
 8008352:	d101      	bne.n	8008358 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008354:	2302      	movs	r3, #2
 8008356:	e032      	b.n	80083be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2224      	movs	r2, #36	@ 0x24
 8008364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0201 	bic.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008386:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6819      	ldr	r1, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0201 	orr.w	r2, r2, #1
 80083a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	e000      	b.n	80083be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083bc:	2302      	movs	r3, #2
  }
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b085      	sub	sp, #20
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b20      	cmp	r3, #32
 80083de:	d139      	bne.n	8008454 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d101      	bne.n	80083ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80083ea:	2302      	movs	r3, #2
 80083ec:	e033      	b.n	8008456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2224      	movs	r2, #36	@ 0x24
 80083fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 0201 	bic.w	r2, r2, #1
 800840c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800841c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	021b      	lsls	r3, r3, #8
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0201 	orr.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	e000      	b.n	8008456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008454:	2302      	movs	r3, #2
  }
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
	...

08008464 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800846c:	4b19      	ldr	r3, [pc, #100]	@ (80084d4 <HAL_PWREx_ConfigSupply+0x70>)
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b04      	cmp	r3, #4
 8008476:	d00a      	beq.n	800848e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008478:	4b16      	ldr	r3, [pc, #88]	@ (80084d4 <HAL_PWREx_ConfigSupply+0x70>)
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f003 0307 	and.w	r3, r3, #7
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	429a      	cmp	r2, r3
 8008484:	d001      	beq.n	800848a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e01f      	b.n	80084ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	e01d      	b.n	80084ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800848e:	4b11      	ldr	r3, [pc, #68]	@ (80084d4 <HAL_PWREx_ConfigSupply+0x70>)
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f023 0207 	bic.w	r2, r3, #7
 8008496:	490f      	ldr	r1, [pc, #60]	@ (80084d4 <HAL_PWREx_ConfigSupply+0x70>)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4313      	orrs	r3, r2
 800849c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800849e:	f7fc f90d 	bl	80046bc <HAL_GetTick>
 80084a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084a4:	e009      	b.n	80084ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80084a6:	f7fc f909 	bl	80046bc <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084b4:	d901      	bls.n	80084ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e007      	b.n	80084ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084ba:	4b06      	ldr	r3, [pc, #24]	@ (80084d4 <HAL_PWREx_ConfigSupply+0x70>)
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084c6:	d1ee      	bne.n	80084a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	58024800 	.word	0x58024800

080084d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08c      	sub	sp, #48	@ 0x30
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d102      	bne.n	80084ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	f000 bc1f 	b.w	8008d2a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 80b3 	beq.w	8008660 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084fa:	4b95      	ldr	r3, [pc, #596]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008502:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008504:	4b92      	ldr	r3, [pc, #584]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008508:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800850a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850c:	2b10      	cmp	r3, #16
 800850e:	d007      	beq.n	8008520 <HAL_RCC_OscConfig+0x48>
 8008510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008512:	2b18      	cmp	r3, #24
 8008514:	d112      	bne.n	800853c <HAL_RCC_OscConfig+0x64>
 8008516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d10d      	bne.n	800853c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008520:	4b8b      	ldr	r3, [pc, #556]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8098 	beq.w	800865e <HAL_RCC_OscConfig+0x186>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	f040 8093 	bne.w	800865e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e3f6      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008544:	d106      	bne.n	8008554 <HAL_RCC_OscConfig+0x7c>
 8008546:	4b82      	ldr	r3, [pc, #520]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a81      	ldr	r2, [pc, #516]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800854c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008550:	6013      	str	r3, [r2, #0]
 8008552:	e058      	b.n	8008606 <HAL_RCC_OscConfig+0x12e>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d112      	bne.n	8008582 <HAL_RCC_OscConfig+0xaa>
 800855c:	4b7c      	ldr	r3, [pc, #496]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a7b      	ldr	r2, [pc, #492]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	4b79      	ldr	r3, [pc, #484]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a78      	ldr	r2, [pc, #480]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800856e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	4b76      	ldr	r3, [pc, #472]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a75      	ldr	r2, [pc, #468]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800857a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	e041      	b.n	8008606 <HAL_RCC_OscConfig+0x12e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800858a:	d112      	bne.n	80085b2 <HAL_RCC_OscConfig+0xda>
 800858c:	4b70      	ldr	r3, [pc, #448]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a6f      	ldr	r2, [pc, #444]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008592:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	4b6d      	ldr	r3, [pc, #436]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a6c      	ldr	r2, [pc, #432]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800859e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	4b6a      	ldr	r3, [pc, #424]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a69      	ldr	r2, [pc, #420]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	e029      	b.n	8008606 <HAL_RCC_OscConfig+0x12e>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80085ba:	d112      	bne.n	80085e2 <HAL_RCC_OscConfig+0x10a>
 80085bc:	4b64      	ldr	r3, [pc, #400]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a63      	ldr	r2, [pc, #396]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	4b61      	ldr	r3, [pc, #388]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a60      	ldr	r2, [pc, #384]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085d2:	6013      	str	r3, [r2, #0]
 80085d4:	4b5e      	ldr	r3, [pc, #376]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a5d      	ldr	r2, [pc, #372]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	e011      	b.n	8008606 <HAL_RCC_OscConfig+0x12e>
 80085e2:	4b5b      	ldr	r3, [pc, #364]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a5a      	ldr	r2, [pc, #360]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	4b58      	ldr	r3, [pc, #352]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a57      	ldr	r2, [pc, #348]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	4b55      	ldr	r3, [pc, #340]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a54      	ldr	r2, [pc, #336]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008600:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008604:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d013      	beq.n	8008636 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800860e:	f7fc f855 	bl	80046bc <HAL_GetTick>
 8008612:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008614:	e008      	b.n	8008628 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008616:	f7fc f851 	bl	80046bc <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b64      	cmp	r3, #100	@ 0x64
 8008622:	d901      	bls.n	8008628 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e380      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008628:	4b49      	ldr	r3, [pc, #292]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0f0      	beq.n	8008616 <HAL_RCC_OscConfig+0x13e>
 8008634:	e014      	b.n	8008660 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008636:	f7fc f841 	bl	80046bc <HAL_GetTick>
 800863a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800863c:	e008      	b.n	8008650 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800863e:	f7fc f83d 	bl	80046bc <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	2b64      	cmp	r3, #100	@ 0x64
 800864a:	d901      	bls.n	8008650 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e36c      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008650:	4b3f      	ldr	r3, [pc, #252]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1f0      	bne.n	800863e <HAL_RCC_OscConfig+0x166>
 800865c:	e000      	b.n	8008660 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800865e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 808c 	beq.w	8008786 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800866e:	4b38      	ldr	r3, [pc, #224]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008676:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008678:	4b35      	ldr	r3, [pc, #212]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800867a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800867e:	6a3b      	ldr	r3, [r7, #32]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d007      	beq.n	8008694 <HAL_RCC_OscConfig+0x1bc>
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	2b18      	cmp	r3, #24
 8008688:	d137      	bne.n	80086fa <HAL_RCC_OscConfig+0x222>
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	2b00      	cmp	r3, #0
 8008692:	d132      	bne.n	80086fa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008694:	4b2e      	ldr	r3, [pc, #184]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d005      	beq.n	80086ac <HAL_RCC_OscConfig+0x1d4>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d101      	bne.n	80086ac <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e33e      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086ac:	4b28      	ldr	r3, [pc, #160]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f023 0219 	bic.w	r2, r3, #25
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	4925      	ldr	r1, [pc, #148]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086be:	f7fb fffd 	bl	80046bc <HAL_GetTick>
 80086c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086c4:	e008      	b.n	80086d8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086c6:	f7fb fff9 	bl	80046bc <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d901      	bls.n	80086d8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e328      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0f0      	beq.n	80086c6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	061b      	lsls	r3, r3, #24
 80086f2:	4917      	ldr	r1, [pc, #92]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086f8:	e045      	b.n	8008786 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d028      	beq.n	8008754 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008702:	4b13      	ldr	r3, [pc, #76]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f023 0219 	bic.w	r2, r3, #25
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	4910      	ldr	r1, [pc, #64]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008710:	4313      	orrs	r3, r2
 8008712:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008714:	f7fb ffd2 	bl	80046bc <HAL_GetTick>
 8008718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800871c:	f7fb ffce 	bl	80046bc <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e2fd      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800872e:	4b08      	ldr	r3, [pc, #32]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0f0      	beq.n	800871c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800873a:	4b05      	ldr	r3, [pc, #20]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	061b      	lsls	r3, r3, #24
 8008748:	4901      	ldr	r1, [pc, #4]	@ (8008750 <HAL_RCC_OscConfig+0x278>)
 800874a:	4313      	orrs	r3, r2
 800874c:	604b      	str	r3, [r1, #4]
 800874e:	e01a      	b.n	8008786 <HAL_RCC_OscConfig+0x2ae>
 8008750:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008754:	4b97      	ldr	r3, [pc, #604]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a96      	ldr	r2, [pc, #600]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 800875a:	f023 0301 	bic.w	r3, r3, #1
 800875e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008760:	f7fb ffac 	bl	80046bc <HAL_GetTick>
 8008764:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008768:	f7fb ffa8 	bl	80046bc <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e2d7      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800877a:	4b8e      	ldr	r3, [pc, #568]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0304 	and.w	r3, r3, #4
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1f0      	bne.n	8008768 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0310 	and.w	r3, r3, #16
 800878e:	2b00      	cmp	r3, #0
 8008790:	d06a      	beq.n	8008868 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008792:	4b88      	ldr	r3, [pc, #544]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800879a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800879c:	4b85      	ldr	r3, [pc, #532]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 800879e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d007      	beq.n	80087b8 <HAL_RCC_OscConfig+0x2e0>
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	2b18      	cmp	r3, #24
 80087ac:	d11b      	bne.n	80087e6 <HAL_RCC_OscConfig+0x30e>
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f003 0303 	and.w	r3, r3, #3
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d116      	bne.n	80087e6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087b8:	4b7e      	ldr	r3, [pc, #504]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d005      	beq.n	80087d0 <HAL_RCC_OscConfig+0x2f8>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	2b80      	cmp	r3, #128	@ 0x80
 80087ca:	d001      	beq.n	80087d0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e2ac      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087d0:	4b78      	ldr	r3, [pc, #480]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	061b      	lsls	r3, r3, #24
 80087de:	4975      	ldr	r1, [pc, #468]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087e4:	e040      	b.n	8008868 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d023      	beq.n	8008836 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80087ee:	4b71      	ldr	r3, [pc, #452]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a70      	ldr	r2, [pc, #448]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80087f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087fa:	f7fb ff5f 	bl	80046bc <HAL_GetTick>
 80087fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008800:	e008      	b.n	8008814 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008802:	f7fb ff5b 	bl	80046bc <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d901      	bls.n	8008814 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e28a      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008814:	4b67      	ldr	r3, [pc, #412]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800881c:	2b00      	cmp	r3, #0
 800881e:	d0f0      	beq.n	8008802 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008820:	4b64      	ldr	r3, [pc, #400]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a1b      	ldr	r3, [r3, #32]
 800882c:	061b      	lsls	r3, r3, #24
 800882e:	4961      	ldr	r1, [pc, #388]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 8008830:	4313      	orrs	r3, r2
 8008832:	60cb      	str	r3, [r1, #12]
 8008834:	e018      	b.n	8008868 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008836:	4b5f      	ldr	r3, [pc, #380]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a5e      	ldr	r2, [pc, #376]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 800883c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008842:	f7fb ff3b 	bl	80046bc <HAL_GetTick>
 8008846:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008848:	e008      	b.n	800885c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800884a:	f7fb ff37 	bl	80046bc <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d901      	bls.n	800885c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e266      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800885c:	4b55      	ldr	r3, [pc, #340]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1f0      	bne.n	800884a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0308 	and.w	r3, r3, #8
 8008870:	2b00      	cmp	r3, #0
 8008872:	d036      	beq.n	80088e2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d019      	beq.n	80088b0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800887c:	4b4d      	ldr	r3, [pc, #308]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 800887e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008880:	4a4c      	ldr	r2, [pc, #304]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 8008882:	f043 0301 	orr.w	r3, r3, #1
 8008886:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008888:	f7fb ff18 	bl	80046bc <HAL_GetTick>
 800888c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800888e:	e008      	b.n	80088a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008890:	f7fb ff14 	bl	80046bc <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b02      	cmp	r3, #2
 800889c:	d901      	bls.n	80088a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e243      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088a2:	4b44      	ldr	r3, [pc, #272]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80088a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0f0      	beq.n	8008890 <HAL_RCC_OscConfig+0x3b8>
 80088ae:	e018      	b.n	80088e2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088b0:	4b40      	ldr	r3, [pc, #256]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80088b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088b4:	4a3f      	ldr	r2, [pc, #252]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80088b6:	f023 0301 	bic.w	r3, r3, #1
 80088ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088bc:	f7fb fefe 	bl	80046bc <HAL_GetTick>
 80088c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088c2:	e008      	b.n	80088d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088c4:	f7fb fefa 	bl	80046bc <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d901      	bls.n	80088d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e229      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088d6:	4b37      	ldr	r3, [pc, #220]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80088d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f0      	bne.n	80088c4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0320 	and.w	r3, r3, #32
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d036      	beq.n	800895c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d019      	beq.n	800892a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088f6:	4b2f      	ldr	r3, [pc, #188]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a2e      	ldr	r2, [pc, #184]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80088fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008900:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008902:	f7fb fedb 	bl	80046bc <HAL_GetTick>
 8008906:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008908:	e008      	b.n	800891c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800890a:	f7fb fed7 	bl	80046bc <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d901      	bls.n	800891c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e206      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800891c:	4b25      	ldr	r3, [pc, #148]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0f0      	beq.n	800890a <HAL_RCC_OscConfig+0x432>
 8008928:	e018      	b.n	800895c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800892a:	4b22      	ldr	r3, [pc, #136]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a21      	ldr	r2, [pc, #132]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 8008930:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008934:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008936:	f7fb fec1 	bl	80046bc <HAL_GetTick>
 800893a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800893c:	e008      	b.n	8008950 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800893e:	f7fb febd 	bl	80046bc <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d901      	bls.n	8008950 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e1ec      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008950:	4b18      	ldr	r3, [pc, #96]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f0      	bne.n	800893e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 80af 	beq.w	8008ac8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800896a:	4b13      	ldr	r3, [pc, #76]	@ (80089b8 <HAL_RCC_OscConfig+0x4e0>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a12      	ldr	r2, [pc, #72]	@ (80089b8 <HAL_RCC_OscConfig+0x4e0>)
 8008970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008974:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008976:	f7fb fea1 	bl	80046bc <HAL_GetTick>
 800897a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800897c:	e008      	b.n	8008990 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800897e:	f7fb fe9d 	bl	80046bc <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b64      	cmp	r3, #100	@ 0x64
 800898a:	d901      	bls.n	8008990 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e1cc      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008990:	4b09      	ldr	r3, [pc, #36]	@ (80089b8 <HAL_RCC_OscConfig+0x4e0>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0f0      	beq.n	800897e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d10b      	bne.n	80089bc <HAL_RCC_OscConfig+0x4e4>
 80089a4:	4b03      	ldr	r3, [pc, #12]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a8:	4a02      	ldr	r2, [pc, #8]	@ (80089b4 <HAL_RCC_OscConfig+0x4dc>)
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80089b0:	e05b      	b.n	8008a6a <HAL_RCC_OscConfig+0x592>
 80089b2:	bf00      	nop
 80089b4:	58024400 	.word	0x58024400
 80089b8:	58024800 	.word	0x58024800
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d112      	bne.n	80089ea <HAL_RCC_OscConfig+0x512>
 80089c4:	4b9d      	ldr	r3, [pc, #628]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 80089c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c8:	4a9c      	ldr	r2, [pc, #624]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 80089ca:	f023 0301 	bic.w	r3, r3, #1
 80089ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80089d0:	4b9a      	ldr	r3, [pc, #616]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 80089d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d4:	4a99      	ldr	r2, [pc, #612]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 80089d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089da:	6713      	str	r3, [r2, #112]	@ 0x70
 80089dc:	4b97      	ldr	r3, [pc, #604]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 80089de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e0:	4a96      	ldr	r2, [pc, #600]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 80089e2:	f023 0304 	bic.w	r3, r3, #4
 80089e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80089e8:	e03f      	b.n	8008a6a <HAL_RCC_OscConfig+0x592>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	d112      	bne.n	8008a18 <HAL_RCC_OscConfig+0x540>
 80089f2:	4b92      	ldr	r3, [pc, #584]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 80089f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f6:	4a91      	ldr	r2, [pc, #580]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 80089f8:	f043 0304 	orr.w	r3, r3, #4
 80089fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80089fe:	4b8f      	ldr	r3, [pc, #572]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a02:	4a8e      	ldr	r2, [pc, #568]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a0a:	4b8c      	ldr	r3, [pc, #560]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a0e:	4a8b      	ldr	r2, [pc, #556]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a10:	f043 0301 	orr.w	r3, r3, #1
 8008a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a16:	e028      	b.n	8008a6a <HAL_RCC_OscConfig+0x592>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	2b85      	cmp	r3, #133	@ 0x85
 8008a1e:	d112      	bne.n	8008a46 <HAL_RCC_OscConfig+0x56e>
 8008a20:	4b86      	ldr	r3, [pc, #536]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a24:	4a85      	ldr	r2, [pc, #532]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a26:	f043 0304 	orr.w	r3, r3, #4
 8008a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a2c:	4b83      	ldr	r3, [pc, #524]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a30:	4a82      	ldr	r2, [pc, #520]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a38:	4b80      	ldr	r3, [pc, #512]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a3c:	4a7f      	ldr	r2, [pc, #508]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a3e:	f043 0301 	orr.w	r3, r3, #1
 8008a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a44:	e011      	b.n	8008a6a <HAL_RCC_OscConfig+0x592>
 8008a46:	4b7d      	ldr	r3, [pc, #500]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a4a:	4a7c      	ldr	r2, [pc, #496]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a4c:	f023 0301 	bic.w	r3, r3, #1
 8008a50:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a52:	4b7a      	ldr	r3, [pc, #488]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a56:	4a79      	ldr	r2, [pc, #484]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a58:	f023 0304 	bic.w	r3, r3, #4
 8008a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a5e:	4b77      	ldr	r3, [pc, #476]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a62:	4a76      	ldr	r2, [pc, #472]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a68:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d015      	beq.n	8008a9e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a72:	f7fb fe23 	bl	80046bc <HAL_GetTick>
 8008a76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a78:	e00a      	b.n	8008a90 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a7a:	f7fb fe1f 	bl	80046bc <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d901      	bls.n	8008a90 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e14c      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a90:	4b6a      	ldr	r3, [pc, #424]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0ee      	beq.n	8008a7a <HAL_RCC_OscConfig+0x5a2>
 8008a9c:	e014      	b.n	8008ac8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a9e:	f7fb fe0d 	bl	80046bc <HAL_GetTick>
 8008aa2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008aa4:	e00a      	b.n	8008abc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aa6:	f7fb fe09 	bl	80046bc <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e136      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008abc:	4b5f      	ldr	r3, [pc, #380]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1ee      	bne.n	8008aa6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 812b 	beq.w	8008d28 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008ad2:	4b5a      	ldr	r3, [pc, #360]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ada:	2b18      	cmp	r3, #24
 8008adc:	f000 80bb 	beq.w	8008c56 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	f040 8095 	bne.w	8008c14 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aea:	4b54      	ldr	r3, [pc, #336]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a53      	ldr	r2, [pc, #332]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008af0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af6:	f7fb fde1 	bl	80046bc <HAL_GetTick>
 8008afa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008afc:	e008      	b.n	8008b10 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008afe:	f7fb fddd 	bl	80046bc <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e10c      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b10:	4b4a      	ldr	r3, [pc, #296]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1f0      	bne.n	8008afe <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b1c:	4b47      	ldr	r3, [pc, #284]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008b1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b20:	4b47      	ldr	r3, [pc, #284]	@ (8008c40 <HAL_RCC_OscConfig+0x768>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008b2c:	0112      	lsls	r2, r2, #4
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	4942      	ldr	r1, [pc, #264]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b44:	3b01      	subs	r3, #1
 8008b46:	025b      	lsls	r3, r3, #9
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b50:	3b01      	subs	r3, #1
 8008b52:	041b      	lsls	r3, r3, #16
 8008b54:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	061b      	lsls	r3, r3, #24
 8008b62:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b66:	4935      	ldr	r1, [pc, #212]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008b6c:	4b33      	ldr	r3, [pc, #204]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b70:	4a32      	ldr	r2, [pc, #200]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008b72:	f023 0301 	bic.w	r3, r3, #1
 8008b76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b78:	4b30      	ldr	r3, [pc, #192]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b7c:	4b31      	ldr	r3, [pc, #196]	@ (8008c44 <HAL_RCC_OscConfig+0x76c>)
 8008b7e:	4013      	ands	r3, r2
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008b84:	00d2      	lsls	r2, r2, #3
 8008b86:	492d      	ldr	r1, [pc, #180]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b90:	f023 020c 	bic.w	r2, r3, #12
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b98:	4928      	ldr	r1, [pc, #160]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b9e:	4b27      	ldr	r3, [pc, #156]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba2:	f023 0202 	bic.w	r2, r3, #2
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008baa:	4924      	ldr	r1, [pc, #144]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008bb0:	4b22      	ldr	r3, [pc, #136]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb4:	4a21      	ldr	r2, [pc, #132]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008bce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008bd4:	4b19      	ldr	r3, [pc, #100]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd8:	4a18      	ldr	r2, [pc, #96]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008bda:	f043 0301 	orr.w	r3, r3, #1
 8008bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008be0:	4b16      	ldr	r3, [pc, #88]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a15      	ldr	r2, [pc, #84]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bec:	f7fb fd66 	bl	80046bc <HAL_GetTick>
 8008bf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bf2:	e008      	b.n	8008c06 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bf4:	f7fb fd62 	bl	80046bc <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d901      	bls.n	8008c06 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e091      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c06:	4b0d      	ldr	r3, [pc, #52]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d0f0      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x71c>
 8008c12:	e089      	b.n	8008d28 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c14:	4b09      	ldr	r3, [pc, #36]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a08      	ldr	r2, [pc, #32]	@ (8008c3c <HAL_RCC_OscConfig+0x764>)
 8008c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c20:	f7fb fd4c 	bl	80046bc <HAL_GetTick>
 8008c24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c26:	e00f      	b.n	8008c48 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c28:	f7fb fd48 	bl	80046bc <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d908      	bls.n	8008c48 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e077      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
 8008c3a:	bf00      	nop
 8008c3c:	58024400 	.word	0x58024400
 8008c40:	fffffc0c 	.word	0xfffffc0c
 8008c44:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c48:	4b3a      	ldr	r3, [pc, #232]	@ (8008d34 <HAL_RCC_OscConfig+0x85c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1e9      	bne.n	8008c28 <HAL_RCC_OscConfig+0x750>
 8008c54:	e068      	b.n	8008d28 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008c56:	4b37      	ldr	r3, [pc, #220]	@ (8008d34 <HAL_RCC_OscConfig+0x85c>)
 8008c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008c5c:	4b35      	ldr	r3, [pc, #212]	@ (8008d34 <HAL_RCC_OscConfig+0x85c>)
 8008c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c60:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d031      	beq.n	8008cce <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f003 0203 	and.w	r2, r3, #3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d12a      	bne.n	8008cce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	091b      	lsrs	r3, r3, #4
 8008c7c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d122      	bne.n	8008cce <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c92:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d11a      	bne.n	8008cce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	0a5b      	lsrs	r3, r3, #9
 8008c9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ca4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d111      	bne.n	8008cce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	0c1b      	lsrs	r3, r3, #16
 8008cae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d108      	bne.n	8008cce <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	0e1b      	lsrs	r3, r3, #24
 8008cc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d001      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e02b      	b.n	8008d2a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008cd2:	4b18      	ldr	r3, [pc, #96]	@ (8008d34 <HAL_RCC_OscConfig+0x85c>)
 8008cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd6:	08db      	lsrs	r3, r3, #3
 8008cd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cdc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d01f      	beq.n	8008d28 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008ce8:	4b12      	ldr	r3, [pc, #72]	@ (8008d34 <HAL_RCC_OscConfig+0x85c>)
 8008cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cec:	4a11      	ldr	r2, [pc, #68]	@ (8008d34 <HAL_RCC_OscConfig+0x85c>)
 8008cee:	f023 0301 	bic.w	r3, r3, #1
 8008cf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008cf4:	f7fb fce2 	bl	80046bc <HAL_GetTick>
 8008cf8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008cfa:	bf00      	nop
 8008cfc:	f7fb fcde 	bl	80046bc <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d0f9      	beq.n	8008cfc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d08:	4b0a      	ldr	r3, [pc, #40]	@ (8008d34 <HAL_RCC_OscConfig+0x85c>)
 8008d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d38 <HAL_RCC_OscConfig+0x860>)
 8008d0e:	4013      	ands	r3, r2
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008d14:	00d2      	lsls	r2, r2, #3
 8008d16:	4907      	ldr	r1, [pc, #28]	@ (8008d34 <HAL_RCC_OscConfig+0x85c>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008d1c:	4b05      	ldr	r3, [pc, #20]	@ (8008d34 <HAL_RCC_OscConfig+0x85c>)
 8008d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d20:	4a04      	ldr	r2, [pc, #16]	@ (8008d34 <HAL_RCC_OscConfig+0x85c>)
 8008d22:	f043 0301 	orr.w	r3, r3, #1
 8008d26:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3730      	adds	r7, #48	@ 0x30
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	58024400 	.word	0x58024400
 8008d38:	ffff0007 	.word	0xffff0007

08008d3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e19c      	b.n	800908a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d50:	4b8a      	ldr	r3, [pc, #552]	@ (8008f7c <HAL_RCC_ClockConfig+0x240>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 030f 	and.w	r3, r3, #15
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d910      	bls.n	8008d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d5e:	4b87      	ldr	r3, [pc, #540]	@ (8008f7c <HAL_RCC_ClockConfig+0x240>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f023 020f 	bic.w	r2, r3, #15
 8008d66:	4985      	ldr	r1, [pc, #532]	@ (8008f7c <HAL_RCC_ClockConfig+0x240>)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d6e:	4b83      	ldr	r3, [pc, #524]	@ (8008f7c <HAL_RCC_ClockConfig+0x240>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d001      	beq.n	8008d80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e184      	b.n	800908a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d010      	beq.n	8008dae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	691a      	ldr	r2, [r3, #16]
 8008d90:	4b7b      	ldr	r3, [pc, #492]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d908      	bls.n	8008dae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d9c:	4b78      	ldr	r3, [pc, #480]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	4975      	ldr	r1, [pc, #468]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0308 	and.w	r3, r3, #8
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d010      	beq.n	8008ddc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	695a      	ldr	r2, [r3, #20]
 8008dbe:	4b70      	ldr	r3, [pc, #448]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d908      	bls.n	8008ddc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008dca:	4b6d      	ldr	r3, [pc, #436]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	496a      	ldr	r1, [pc, #424]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0310 	and.w	r3, r3, #16
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d010      	beq.n	8008e0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	699a      	ldr	r2, [r3, #24]
 8008dec:	4b64      	ldr	r3, [pc, #400]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008dee:	69db      	ldr	r3, [r3, #28]
 8008df0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d908      	bls.n	8008e0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008df8:	4b61      	ldr	r3, [pc, #388]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	495e      	ldr	r1, [pc, #376]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0320 	and.w	r3, r3, #32
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d010      	beq.n	8008e38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	69da      	ldr	r2, [r3, #28]
 8008e1a:	4b59      	ldr	r3, [pc, #356]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d908      	bls.n	8008e38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e26:	4b56      	ldr	r3, [pc, #344]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	4953      	ldr	r1, [pc, #332]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d010      	beq.n	8008e66 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	4b4d      	ldr	r3, [pc, #308]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	f003 030f 	and.w	r3, r3, #15
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d908      	bls.n	8008e66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e54:	4b4a      	ldr	r3, [pc, #296]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f023 020f 	bic.w	r2, r3, #15
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	4947      	ldr	r1, [pc, #284]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d055      	beq.n	8008f1e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008e72:	4b43      	ldr	r3, [pc, #268]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	4940      	ldr	r1, [pc, #256]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d107      	bne.n	8008e9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e8c:	4b3c      	ldr	r3, [pc, #240]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d121      	bne.n	8008edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e0f6      	b.n	800908a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d107      	bne.n	8008eb4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ea4:	4b36      	ldr	r3, [pc, #216]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d115      	bne.n	8008edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e0ea      	b.n	800908a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d107      	bne.n	8008ecc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ebc:	4b30      	ldr	r3, [pc, #192]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d109      	bne.n	8008edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e0de      	b.n	800908a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0304 	and.w	r3, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e0d6      	b.n	800908a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008edc:	4b28      	ldr	r3, [pc, #160]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	f023 0207 	bic.w	r2, r3, #7
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	4925      	ldr	r1, [pc, #148]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eee:	f7fb fbe5 	bl	80046bc <HAL_GetTick>
 8008ef2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ef4:	e00a      	b.n	8008f0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ef6:	f7fb fbe1 	bl	80046bc <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d901      	bls.n	8008f0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e0be      	b.n	800908a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	00db      	lsls	r3, r3, #3
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d1eb      	bne.n	8008ef6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0302 	and.w	r3, r3, #2
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d010      	beq.n	8008f4c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	4b14      	ldr	r3, [pc, #80]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	f003 030f 	and.w	r3, r3, #15
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d208      	bcs.n	8008f4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f3a:	4b11      	ldr	r3, [pc, #68]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	f023 020f 	bic.w	r2, r3, #15
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	490e      	ldr	r1, [pc, #56]	@ (8008f80 <HAL_RCC_ClockConfig+0x244>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <HAL_RCC_ClockConfig+0x240>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 030f 	and.w	r3, r3, #15
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d214      	bcs.n	8008f84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f5a:	4b08      	ldr	r3, [pc, #32]	@ (8008f7c <HAL_RCC_ClockConfig+0x240>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f023 020f 	bic.w	r2, r3, #15
 8008f62:	4906      	ldr	r1, [pc, #24]	@ (8008f7c <HAL_RCC_ClockConfig+0x240>)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f6a:	4b04      	ldr	r3, [pc, #16]	@ (8008f7c <HAL_RCC_ClockConfig+0x240>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d005      	beq.n	8008f84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e086      	b.n	800908a <HAL_RCC_ClockConfig+0x34e>
 8008f7c:	52002000 	.word	0x52002000
 8008f80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d010      	beq.n	8008fb2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	691a      	ldr	r2, [r3, #16]
 8008f94:	4b3f      	ldr	r3, [pc, #252]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d208      	bcs.n	8008fb2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	4939      	ldr	r1, [pc, #228]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d010      	beq.n	8008fe0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	695a      	ldr	r2, [r3, #20]
 8008fc2:	4b34      	ldr	r3, [pc, #208]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d208      	bcs.n	8008fe0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008fce:	4b31      	ldr	r3, [pc, #196]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	492e      	ldr	r1, [pc, #184]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0310 	and.w	r3, r3, #16
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d010      	beq.n	800900e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699a      	ldr	r2, [r3, #24]
 8008ff0:	4b28      	ldr	r3, [pc, #160]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d208      	bcs.n	800900e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ffc:	4b25      	ldr	r3, [pc, #148]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 8008ffe:	69db      	ldr	r3, [r3, #28]
 8009000:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	4922      	ldr	r1, [pc, #136]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 800900a:	4313      	orrs	r3, r2
 800900c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b00      	cmp	r3, #0
 8009018:	d010      	beq.n	800903c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	69da      	ldr	r2, [r3, #28]
 800901e:	4b1d      	ldr	r3, [pc, #116]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009026:	429a      	cmp	r2, r3
 8009028:	d208      	bcs.n	800903c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800902a:	4b1a      	ldr	r3, [pc, #104]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	4917      	ldr	r1, [pc, #92]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 8009038:	4313      	orrs	r3, r2
 800903a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800903c:	f000 f834 	bl	80090a8 <HAL_RCC_GetSysClockFreq>
 8009040:	4602      	mov	r2, r0
 8009042:	4b14      	ldr	r3, [pc, #80]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	0a1b      	lsrs	r3, r3, #8
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	4912      	ldr	r1, [pc, #72]	@ (8009098 <HAL_RCC_ClockConfig+0x35c>)
 800904e:	5ccb      	ldrb	r3, [r1, r3]
 8009050:	f003 031f 	and.w	r3, r3, #31
 8009054:	fa22 f303 	lsr.w	r3, r2, r3
 8009058:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800905a:	4b0e      	ldr	r3, [pc, #56]	@ (8009094 <HAL_RCC_ClockConfig+0x358>)
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	f003 030f 	and.w	r3, r3, #15
 8009062:	4a0d      	ldr	r2, [pc, #52]	@ (8009098 <HAL_RCC_ClockConfig+0x35c>)
 8009064:	5cd3      	ldrb	r3, [r2, r3]
 8009066:	f003 031f 	and.w	r3, r3, #31
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	fa22 f303 	lsr.w	r3, r2, r3
 8009070:	4a0a      	ldr	r2, [pc, #40]	@ (800909c <HAL_RCC_ClockConfig+0x360>)
 8009072:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009074:	4a0a      	ldr	r2, [pc, #40]	@ (80090a0 <HAL_RCC_ClockConfig+0x364>)
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800907a:	4b0a      	ldr	r3, [pc, #40]	@ (80090a4 <HAL_RCC_ClockConfig+0x368>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4618      	mov	r0, r3
 8009080:	f7fb fad2 	bl	8004628 <HAL_InitTick>
 8009084:	4603      	mov	r3, r0
 8009086:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	58024400 	.word	0x58024400
 8009098:	08014c28 	.word	0x08014c28
 800909c:	240000c4 	.word	0x240000c4
 80090a0:	240000c0 	.word	0x240000c0
 80090a4:	240000c8 	.word	0x240000c8

080090a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b089      	sub	sp, #36	@ 0x24
 80090ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090ae:	4bb3      	ldr	r3, [pc, #716]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090b6:	2b18      	cmp	r3, #24
 80090b8:	f200 8155 	bhi.w	8009366 <HAL_RCC_GetSysClockFreq+0x2be>
 80090bc:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	08009129 	.word	0x08009129
 80090c8:	08009367 	.word	0x08009367
 80090cc:	08009367 	.word	0x08009367
 80090d0:	08009367 	.word	0x08009367
 80090d4:	08009367 	.word	0x08009367
 80090d8:	08009367 	.word	0x08009367
 80090dc:	08009367 	.word	0x08009367
 80090e0:	08009367 	.word	0x08009367
 80090e4:	0800914f 	.word	0x0800914f
 80090e8:	08009367 	.word	0x08009367
 80090ec:	08009367 	.word	0x08009367
 80090f0:	08009367 	.word	0x08009367
 80090f4:	08009367 	.word	0x08009367
 80090f8:	08009367 	.word	0x08009367
 80090fc:	08009367 	.word	0x08009367
 8009100:	08009367 	.word	0x08009367
 8009104:	08009155 	.word	0x08009155
 8009108:	08009367 	.word	0x08009367
 800910c:	08009367 	.word	0x08009367
 8009110:	08009367 	.word	0x08009367
 8009114:	08009367 	.word	0x08009367
 8009118:	08009367 	.word	0x08009367
 800911c:	08009367 	.word	0x08009367
 8009120:	08009367 	.word	0x08009367
 8009124:	0800915b 	.word	0x0800915b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009128:	4b94      	ldr	r3, [pc, #592]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0320 	and.w	r3, r3, #32
 8009130:	2b00      	cmp	r3, #0
 8009132:	d009      	beq.n	8009148 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009134:	4b91      	ldr	r3, [pc, #580]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	08db      	lsrs	r3, r3, #3
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	4a90      	ldr	r2, [pc, #576]	@ (8009380 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009140:	fa22 f303 	lsr.w	r3, r2, r3
 8009144:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009146:	e111      	b.n	800936c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009148:	4b8d      	ldr	r3, [pc, #564]	@ (8009380 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800914a:	61bb      	str	r3, [r7, #24]
      break;
 800914c:	e10e      	b.n	800936c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800914e:	4b8d      	ldr	r3, [pc, #564]	@ (8009384 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009150:	61bb      	str	r3, [r7, #24]
      break;
 8009152:	e10b      	b.n	800936c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009154:	4b8c      	ldr	r3, [pc, #560]	@ (8009388 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009156:	61bb      	str	r3, [r7, #24]
      break;
 8009158:	e108      	b.n	800936c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800915a:	4b88      	ldr	r3, [pc, #544]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800915c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915e:	f003 0303 	and.w	r3, r3, #3
 8009162:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009164:	4b85      	ldr	r3, [pc, #532]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009168:	091b      	lsrs	r3, r3, #4
 800916a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800916e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009170:	4b82      	ldr	r3, [pc, #520]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800917a:	4b80      	ldr	r3, [pc, #512]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800917c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800917e:	08db      	lsrs	r3, r3, #3
 8009180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	fb02 f303 	mul.w	r3, r2, r3
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009192:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 80e1 	beq.w	8009360 <HAL_RCC_GetSysClockFreq+0x2b8>
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	f000 8083 	beq.w	80092ac <HAL_RCC_GetSysClockFreq+0x204>
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	f200 80a1 	bhi.w	80092f0 <HAL_RCC_GetSysClockFreq+0x248>
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_RCC_GetSysClockFreq+0x114>
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d056      	beq.n	8009268 <HAL_RCC_GetSysClockFreq+0x1c0>
 80091ba:	e099      	b.n	80092f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091bc:	4b6f      	ldr	r3, [pc, #444]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0320 	and.w	r3, r3, #32
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d02d      	beq.n	8009224 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091c8:	4b6c      	ldr	r3, [pc, #432]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	08db      	lsrs	r3, r3, #3
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	4a6b      	ldr	r2, [pc, #428]	@ (8009380 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091d4:	fa22 f303 	lsr.w	r3, r2, r3
 80091d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	ee07 3a90 	vmov	s15, r3
 80091e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f2:	4b62      	ldr	r3, [pc, #392]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009202:	ed97 6a02 	vldr	s12, [r7, #8]
 8009206:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800938c <HAL_RCC_GetSysClockFreq+0x2e4>
 800920a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009222:	e087      	b.n	8009334 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009390 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009236:	4b51      	ldr	r3, [pc, #324]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800923a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009246:	ed97 6a02 	vldr	s12, [r7, #8]
 800924a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800938c <HAL_RCC_GetSysClockFreq+0x2e4>
 800924e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800925a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009266:	e065      	b.n	8009334 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	ee07 3a90 	vmov	s15, r3
 800926e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009272:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009394 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800927a:	4b40      	ldr	r3, [pc, #256]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800927c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800927e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800928a:	ed97 6a02 	vldr	s12, [r7, #8]
 800928e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800938c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800929a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800929e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092aa:	e043      	b.n	8009334 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	ee07 3a90 	vmov	s15, r3
 80092b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009398 <HAL_RCC_GetSysClockFreq+0x2f0>
 80092ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092be:	4b2f      	ldr	r3, [pc, #188]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c6:	ee07 3a90 	vmov	s15, r3
 80092ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80092d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800938c <HAL_RCC_GetSysClockFreq+0x2e4>
 80092d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092ee:	e021      	b.n	8009334 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	ee07 3a90 	vmov	s15, r3
 80092f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009394 <HAL_RCC_GetSysClockFreq+0x2ec>
 80092fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009302:	4b1e      	ldr	r3, [pc, #120]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009312:	ed97 6a02 	vldr	s12, [r7, #8]
 8009316:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800938c <HAL_RCC_GetSysClockFreq+0x2e4>
 800931a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800931e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800932a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800932e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009332:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009334:	4b11      	ldr	r3, [pc, #68]	@ (800937c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009338:	0a5b      	lsrs	r3, r3, #9
 800933a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800933e:	3301      	adds	r3, #1
 8009340:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	ee07 3a90 	vmov	s15, r3
 8009348:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800934c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009358:	ee17 3a90 	vmov	r3, s15
 800935c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800935e:	e005      	b.n	800936c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	61bb      	str	r3, [r7, #24]
      break;
 8009364:	e002      	b.n	800936c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009366:	4b07      	ldr	r3, [pc, #28]	@ (8009384 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009368:	61bb      	str	r3, [r7, #24]
      break;
 800936a:	bf00      	nop
  }

  return sysclockfreq;
 800936c:	69bb      	ldr	r3, [r7, #24]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3724      	adds	r7, #36	@ 0x24
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	58024400 	.word	0x58024400
 8009380:	03d09000 	.word	0x03d09000
 8009384:	003d0900 	.word	0x003d0900
 8009388:	016e3600 	.word	0x016e3600
 800938c:	46000000 	.word	0x46000000
 8009390:	4c742400 	.word	0x4c742400
 8009394:	4a742400 	.word	0x4a742400
 8009398:	4bb71b00 	.word	0x4bb71b00

0800939c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80093a2:	f7ff fe81 	bl	80090a8 <HAL_RCC_GetSysClockFreq>
 80093a6:	4602      	mov	r2, r0
 80093a8:	4b10      	ldr	r3, [pc, #64]	@ (80093ec <HAL_RCC_GetHCLKFreq+0x50>)
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	0a1b      	lsrs	r3, r3, #8
 80093ae:	f003 030f 	and.w	r3, r3, #15
 80093b2:	490f      	ldr	r1, [pc, #60]	@ (80093f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80093b4:	5ccb      	ldrb	r3, [r1, r3]
 80093b6:	f003 031f 	and.w	r3, r3, #31
 80093ba:	fa22 f303 	lsr.w	r3, r2, r3
 80093be:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80093c0:	4b0a      	ldr	r3, [pc, #40]	@ (80093ec <HAL_RCC_GetHCLKFreq+0x50>)
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	f003 030f 	and.w	r3, r3, #15
 80093c8:	4a09      	ldr	r2, [pc, #36]	@ (80093f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80093ca:	5cd3      	ldrb	r3, [r2, r3]
 80093cc:	f003 031f 	and.w	r3, r3, #31
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	fa22 f303 	lsr.w	r3, r2, r3
 80093d6:	4a07      	ldr	r2, [pc, #28]	@ (80093f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80093d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093da:	4a07      	ldr	r2, [pc, #28]	@ (80093f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80093e0:	4b04      	ldr	r3, [pc, #16]	@ (80093f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80093e2:	681b      	ldr	r3, [r3, #0]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	58024400 	.word	0x58024400
 80093f0:	08014c28 	.word	0x08014c28
 80093f4:	240000c4 	.word	0x240000c4
 80093f8:	240000c0 	.word	0x240000c0

080093fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8009400:	f7ff ffcc 	bl	800939c <HAL_RCC_GetHCLKFreq>
 8009404:	4602      	mov	r2, r0
 8009406:	4b06      	ldr	r3, [pc, #24]	@ (8009420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	091b      	lsrs	r3, r3, #4
 800940c:	f003 0307 	and.w	r3, r3, #7
 8009410:	4904      	ldr	r1, [pc, #16]	@ (8009424 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009412:	5ccb      	ldrb	r3, [r1, r3]
 8009414:	f003 031f 	and.w	r3, r3, #31
 8009418:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800941c:	4618      	mov	r0, r3
 800941e:	bd80      	pop	{r7, pc}
 8009420:	58024400 	.word	0x58024400
 8009424:	08014c28 	.word	0x08014c28

08009428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800942c:	f7ff ffb6 	bl	800939c <HAL_RCC_GetHCLKFreq>
 8009430:	4602      	mov	r2, r0
 8009432:	4b06      	ldr	r3, [pc, #24]	@ (800944c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	0a1b      	lsrs	r3, r3, #8
 8009438:	f003 0307 	and.w	r3, r3, #7
 800943c:	4904      	ldr	r1, [pc, #16]	@ (8009450 <HAL_RCC_GetPCLK2Freq+0x28>)
 800943e:	5ccb      	ldrb	r3, [r1, r3]
 8009440:	f003 031f 	and.w	r3, r3, #31
 8009444:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009448:	4618      	mov	r0, r3
 800944a:	bd80      	pop	{r7, pc}
 800944c:	58024400 	.word	0x58024400
 8009450:	08014c28 	.word	0x08014c28

08009454 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009458:	b0c8      	sub	sp, #288	@ 0x120
 800945a:	af00      	add	r7, sp, #0
 800945c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009460:	2300      	movs	r3, #0
 8009462:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009466:	2300      	movs	r3, #0
 8009468:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800946c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009478:	2500      	movs	r5, #0
 800947a:	ea54 0305 	orrs.w	r3, r4, r5
 800947e:	d049      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009486:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800948a:	d02f      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800948c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009490:	d828      	bhi.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009492:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009496:	d01a      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009498:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800949c:	d822      	bhi.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d003      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80094a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094a6:	d007      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80094a8:	e01c      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094aa:	4ba7      	ldr	r3, [pc, #668]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ae:	4aa6      	ldr	r2, [pc, #664]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094b6:	e01a      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094bc:	3308      	adds	r3, #8
 80094be:	2102      	movs	r1, #2
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 fc43 	bl	800ad4c <RCCEx_PLL2_Config>
 80094c6:	4603      	mov	r3, r0
 80094c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094cc:	e00f      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094d2:	3328      	adds	r3, #40	@ 0x28
 80094d4:	2102      	movs	r1, #2
 80094d6:	4618      	mov	r0, r3
 80094d8:	f001 fcea 	bl	800aeb0 <RCCEx_PLL3_Config>
 80094dc:	4603      	mov	r3, r0
 80094de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80094e2:	e004      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80094ea:	e000      	b.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80094ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10a      	bne.n	800950c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80094f6:	4b94      	ldr	r3, [pc, #592]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80094fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009504:	4a90      	ldr	r2, [pc, #576]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009506:	430b      	orrs	r3, r1
 8009508:	6513      	str	r3, [r2, #80]	@ 0x50
 800950a:	e003      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009510:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009520:	f04f 0900 	mov.w	r9, #0
 8009524:	ea58 0309 	orrs.w	r3, r8, r9
 8009528:	d047      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800952a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800952e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009530:	2b04      	cmp	r3, #4
 8009532:	d82a      	bhi.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009534:	a201      	add	r2, pc, #4	@ (adr r2, 800953c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953a:	bf00      	nop
 800953c:	08009551 	.word	0x08009551
 8009540:	0800955f 	.word	0x0800955f
 8009544:	08009575 	.word	0x08009575
 8009548:	08009593 	.word	0x08009593
 800954c:	08009593 	.word	0x08009593
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009550:	4b7d      	ldr	r3, [pc, #500]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009554:	4a7c      	ldr	r2, [pc, #496]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800955a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800955c:	e01a      	b.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800955e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009562:	3308      	adds	r3, #8
 8009564:	2100      	movs	r1, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f001 fbf0 	bl	800ad4c <RCCEx_PLL2_Config>
 800956c:	4603      	mov	r3, r0
 800956e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009572:	e00f      	b.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009578:	3328      	adds	r3, #40	@ 0x28
 800957a:	2100      	movs	r1, #0
 800957c:	4618      	mov	r0, r3
 800957e:	f001 fc97 	bl	800aeb0 <RCCEx_PLL3_Config>
 8009582:	4603      	mov	r3, r0
 8009584:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009588:	e004      	b.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009590:	e000      	b.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009594:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10a      	bne.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800959c:	4b6a      	ldr	r3, [pc, #424]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800959e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a0:	f023 0107 	bic.w	r1, r3, #7
 80095a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095aa:	4a67      	ldr	r2, [pc, #412]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095ac:	430b      	orrs	r3, r1
 80095ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80095b0:	e003      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80095ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80095c6:	f04f 0b00 	mov.w	fp, #0
 80095ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80095ce:	d054      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80095d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80095da:	d036      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80095dc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80095e0:	d82f      	bhi.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80095e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095e6:	d032      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80095e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095ec:	d829      	bhi.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80095ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80095f0:	d02f      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80095f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80095f4:	d825      	bhi.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80095f6:	2b80      	cmp	r3, #128	@ 0x80
 80095f8:	d018      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80095fa:	2b80      	cmp	r3, #128	@ 0x80
 80095fc:	d821      	bhi.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d002      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8009602:	2b40      	cmp	r3, #64	@ 0x40
 8009604:	d007      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8009606:	e01c      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009608:	4b4f      	ldr	r3, [pc, #316]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800960a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960c:	4a4e      	ldr	r2, [pc, #312]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800960e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009614:	e01e      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800961a:	3308      	adds	r3, #8
 800961c:	2100      	movs	r1, #0
 800961e:	4618      	mov	r0, r3
 8009620:	f001 fb94 	bl	800ad4c <RCCEx_PLL2_Config>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800962a:	e013      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800962c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009630:	3328      	adds	r3, #40	@ 0x28
 8009632:	2100      	movs	r1, #0
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fc3b 	bl	800aeb0 <RCCEx_PLL3_Config>
 800963a:	4603      	mov	r3, r0
 800963c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009640:	e008      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009648:	e004      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800964a:	bf00      	nop
 800964c:	e002      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800964e:	bf00      	nop
 8009650:	e000      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8009652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009654:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10a      	bne.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800965c:	4b3a      	ldr	r3, [pc, #232]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800965e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009660:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800966a:	4a37      	ldr	r2, [pc, #220]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800966c:	430b      	orrs	r3, r1
 800966e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009670:	e003      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009672:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009676:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800967a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009682:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009686:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800968a:	2300      	movs	r3, #0
 800968c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009690:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009694:	460b      	mov	r3, r1
 8009696:	4313      	orrs	r3, r2
 8009698:	d05c      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800969a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800969e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096a0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80096a4:	d03b      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80096a6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80096aa:	d834      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80096ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096b0:	d037      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80096b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096b6:	d82e      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80096b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80096bc:	d033      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80096be:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80096c2:	d828      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80096c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096c8:	d01a      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80096ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096ce:	d822      	bhi.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d003      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80096d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096d8:	d007      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x296>
 80096da:	e01c      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e0:	4a19      	ldr	r2, [pc, #100]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80096e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80096e8:	e01e      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ee:	3308      	adds	r3, #8
 80096f0:	2100      	movs	r1, #0
 80096f2:	4618      	mov	r0, r3
 80096f4:	f001 fb2a 	bl	800ad4c <RCCEx_PLL2_Config>
 80096f8:	4603      	mov	r3, r0
 80096fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80096fe:	e013      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009704:	3328      	adds	r3, #40	@ 0x28
 8009706:	2100      	movs	r1, #0
 8009708:	4618      	mov	r0, r3
 800970a:	f001 fbd1 	bl	800aeb0 <RCCEx_PLL3_Config>
 800970e:	4603      	mov	r3, r0
 8009710:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009714:	e008      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800971c:	e004      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800971e:	bf00      	nop
 8009720:	e002      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009722:	bf00      	nop
 8009724:	e000      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009728:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10d      	bne.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8009730:	4b05      	ldr	r3, [pc, #20]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009734:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8009738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800973e:	4a02      	ldr	r2, [pc, #8]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009740:	430b      	orrs	r3, r1
 8009742:	6513      	str	r3, [r2, #80]	@ 0x50
 8009744:	e006      	b.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009746:	bf00      	nop
 8009748:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009750:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009760:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009764:	2300      	movs	r3, #0
 8009766:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800976a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800976e:	460b      	mov	r3, r1
 8009770:	4313      	orrs	r3, r2
 8009772:	d03a      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800977a:	2b30      	cmp	r3, #48	@ 0x30
 800977c:	d01f      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800977e:	2b30      	cmp	r3, #48	@ 0x30
 8009780:	d819      	bhi.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8009782:	2b20      	cmp	r3, #32
 8009784:	d00c      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009786:	2b20      	cmp	r3, #32
 8009788:	d815      	bhi.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d019      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800978e:	2b10      	cmp	r3, #16
 8009790:	d111      	bne.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009792:	4bae      	ldr	r3, [pc, #696]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009796:	4aad      	ldr	r2, [pc, #692]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800979c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800979e:	e011      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097a4:	3308      	adds	r3, #8
 80097a6:	2102      	movs	r1, #2
 80097a8:	4618      	mov	r0, r3
 80097aa:	f001 facf 	bl	800ad4c <RCCEx_PLL2_Config>
 80097ae:	4603      	mov	r3, r0
 80097b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80097b4:	e006      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80097bc:	e002      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80097be:	bf00      	nop
 80097c0:	e000      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80097c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80097cc:	4b9f      	ldr	r3, [pc, #636]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80097d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097da:	4a9c      	ldr	r2, [pc, #624]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097dc:	430b      	orrs	r3, r1
 80097de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097e0:	e003      	b.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80097e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80097ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80097f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80097fa:	2300      	movs	r3, #0
 80097fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009800:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009804:	460b      	mov	r3, r1
 8009806:	4313      	orrs	r3, r2
 8009808:	d051      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800980a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800980e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009810:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009814:	d035      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009816:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800981a:	d82e      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800981c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009820:	d031      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8009822:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009826:	d828      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800982c:	d01a      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800982e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009832:	d822      	bhi.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8009838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800983c:	d007      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800983e:	e01c      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009840:	4b82      	ldr	r3, [pc, #520]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009844:	4a81      	ldr	r2, [pc, #516]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800984a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800984c:	e01c      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800984e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009852:	3308      	adds	r3, #8
 8009854:	2100      	movs	r1, #0
 8009856:	4618      	mov	r0, r3
 8009858:	f001 fa78 	bl	800ad4c <RCCEx_PLL2_Config>
 800985c:	4603      	mov	r3, r0
 800985e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009862:	e011      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009868:	3328      	adds	r3, #40	@ 0x28
 800986a:	2100      	movs	r1, #0
 800986c:	4618      	mov	r0, r3
 800986e:	f001 fb1f 	bl	800aeb0 <RCCEx_PLL3_Config>
 8009872:	4603      	mov	r3, r0
 8009874:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009878:	e006      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009880:	e002      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8009882:	bf00      	nop
 8009884:	e000      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8009886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009888:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10a      	bne.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009890:	4b6e      	ldr	r3, [pc, #440]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009894:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800989c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800989e:	4a6b      	ldr	r2, [pc, #428]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098a0:	430b      	orrs	r3, r1
 80098a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80098a4:	e003      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80098aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80098ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80098ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80098be:	2300      	movs	r3, #0
 80098c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80098c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80098c8:	460b      	mov	r3, r1
 80098ca:	4313      	orrs	r3, r2
 80098cc:	d053      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80098ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098d8:	d033      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80098da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098de:	d82c      	bhi.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80098e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098e4:	d02f      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80098e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098ea:	d826      	bhi.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80098ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098f0:	d02b      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80098f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098f6:	d820      	bhi.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80098f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098fc:	d012      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80098fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009902:	d81a      	bhi.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8009904:	2b00      	cmp	r3, #0
 8009906:	d022      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8009908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800990c:	d115      	bne.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800990e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009912:	3308      	adds	r3, #8
 8009914:	2101      	movs	r1, #1
 8009916:	4618      	mov	r0, r3
 8009918:	f001 fa18 	bl	800ad4c <RCCEx_PLL2_Config>
 800991c:	4603      	mov	r3, r0
 800991e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009922:	e015      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009924:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009928:	3328      	adds	r3, #40	@ 0x28
 800992a:	2101      	movs	r1, #1
 800992c:	4618      	mov	r0, r3
 800992e:	f001 fabf 	bl	800aeb0 <RCCEx_PLL3_Config>
 8009932:	4603      	mov	r3, r0
 8009934:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009938:	e00a      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009940:	e006      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009942:	bf00      	nop
 8009944:	e004      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8009946:	bf00      	nop
 8009948:	e002      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800994a:	bf00      	nop
 800994c:	e000      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800994e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009950:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10a      	bne.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009958:	4b3c      	ldr	r3, [pc, #240]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800995a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800995c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009966:	4a39      	ldr	r2, [pc, #228]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009968:	430b      	orrs	r3, r1
 800996a:	6513      	str	r3, [r2, #80]	@ 0x50
 800996c:	e003      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800996e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009972:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009982:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009986:	2300      	movs	r3, #0
 8009988:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800998c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009990:	460b      	mov	r3, r1
 8009992:	4313      	orrs	r3, r2
 8009994:	d060      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009996:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800999a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800999e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80099a2:	d039      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80099a4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80099a8:	d832      	bhi.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80099aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099ae:	d035      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80099b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099b4:	d82c      	bhi.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80099b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ba:	d031      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80099bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099c0:	d826      	bhi.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80099c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099c6:	d02d      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80099c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099cc:	d820      	bhi.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80099ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d2:	d012      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80099d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d8:	d81a      	bhi.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d024      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80099de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099e2:	d115      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099e8:	3308      	adds	r3, #8
 80099ea:	2101      	movs	r1, #1
 80099ec:	4618      	mov	r0, r3
 80099ee:	f001 f9ad 	bl	800ad4c <RCCEx_PLL2_Config>
 80099f2:	4603      	mov	r3, r0
 80099f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80099f8:	e017      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099fe:	3328      	adds	r3, #40	@ 0x28
 8009a00:	2101      	movs	r1, #1
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 fa54 	bl	800aeb0 <RCCEx_PLL3_Config>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a0e:	e00c      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009a16:	e008      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a18:	bf00      	nop
 8009a1a:	e006      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a1c:	bf00      	nop
 8009a1e:	e004      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a20:	bf00      	nop
 8009a22:	e002      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a24:	bf00      	nop
 8009a26:	e000      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10e      	bne.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009a32:	4b06      	ldr	r3, [pc, #24]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a36:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a42:	4a02      	ldr	r2, [pc, #8]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009a44:	430b      	orrs	r3, r1
 8009a46:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a48:	e006      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009a4a:	bf00      	nop
 8009a4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009a54:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009a64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a72:	460b      	mov	r3, r1
 8009a74:	4313      	orrs	r3, r2
 8009a76:	d037      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a82:	d00e      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a88:	d816      	bhi.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d018      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009a8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a92:	d111      	bne.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a94:	4bc4      	ldr	r3, [pc, #784]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a98:	4ac3      	ldr	r2, [pc, #780]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009aa0:	e00f      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f001 f94e 	bl	800ad4c <RCCEx_PLL2_Config>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009ab6:	e004      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009abe:	e000      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ac2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10a      	bne.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009aca:	4bb7      	ldr	r3, [pc, #732]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ace:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ad6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ad8:	4ab3      	ldr	r2, [pc, #716]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ada:	430b      	orrs	r3, r1
 8009adc:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ade:	e003      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ae4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009af8:	2300      	movs	r3, #0
 8009afa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009afe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009b02:	460b      	mov	r3, r1
 8009b04:	4313      	orrs	r3, r2
 8009b06:	d039      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d81c      	bhi.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009b12:	a201      	add	r2, pc, #4	@ (adr r2, 8009b18 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b18:	08009b55 	.word	0x08009b55
 8009b1c:	08009b29 	.word	0x08009b29
 8009b20:	08009b37 	.word	0x08009b37
 8009b24:	08009b55 	.word	0x08009b55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b28:	4b9f      	ldr	r3, [pc, #636]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2c:	4a9e      	ldr	r2, [pc, #632]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009b34:	e00f      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	2102      	movs	r1, #2
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f001 f904 	bl	800ad4c <RCCEx_PLL2_Config>
 8009b44:	4603      	mov	r3, r0
 8009b46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009b4a:	e004      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009b52:	e000      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b5e:	4b92      	ldr	r3, [pc, #584]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b62:	f023 0103 	bic.w	r1, r3, #3
 8009b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b6c:	4a8e      	ldr	r2, [pc, #568]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b6e:	430b      	orrs	r3, r1
 8009b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b72:	e003      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009b78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009b88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009b96:	460b      	mov	r3, r1
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	f000 8099 	beq.w	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b9e:	4b83      	ldr	r3, [pc, #524]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a82      	ldr	r2, [pc, #520]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ba8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009baa:	f7fa fd87 	bl	80046bc <HAL_GetTick>
 8009bae:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bb2:	e00b      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bb4:	f7fa fd82 	bl	80046bc <HAL_GetTick>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	2b64      	cmp	r3, #100	@ 0x64
 8009bc2:	d903      	bls.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009bca:	e005      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bcc:	4b77      	ldr	r3, [pc, #476]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d0ed      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d173      	bne.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009be0:	4b71      	ldr	r3, [pc, #452]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009be2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009be8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bec:	4053      	eors	r3, r2
 8009bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d015      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bfe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c02:	4b69      	ldr	r3, [pc, #420]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c06:	4a68      	ldr	r2, [pc, #416]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c0c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c0e:	4b66      	ldr	r3, [pc, #408]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c12:	4a65      	ldr	r2, [pc, #404]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c18:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009c1a:	4a63      	ldr	r2, [pc, #396]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c20:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c2e:	d118      	bne.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c30:	f7fa fd44 	bl	80046bc <HAL_GetTick>
 8009c34:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c38:	e00d      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c3a:	f7fa fd3f 	bl	80046bc <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009c44:	1ad2      	subs	r2, r2, r3
 8009c46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d903      	bls.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8009c54:	e005      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c56:	4b54      	ldr	r3, [pc, #336]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c5a:	f003 0302 	and.w	r3, r3, #2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d0eb      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009c62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d129      	bne.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c7a:	d10e      	bne.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009c7c:	4b4a      	ldr	r3, [pc, #296]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c8c:	091a      	lsrs	r2, r3, #4
 8009c8e:	4b48      	ldr	r3, [pc, #288]	@ (8009db0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c90:	4013      	ands	r3, r2
 8009c92:	4a45      	ldr	r2, [pc, #276]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c94:	430b      	orrs	r3, r1
 8009c96:	6113      	str	r3, [r2, #16]
 8009c98:	e005      	b.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009c9a:	4b43      	ldr	r3, [pc, #268]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	4a42      	ldr	r2, [pc, #264]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ca0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009ca4:	6113      	str	r3, [r2, #16]
 8009ca6:	4b40      	ldr	r3, [pc, #256]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ca8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cb6:	4a3c      	ldr	r2, [pc, #240]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009cb8:	430b      	orrs	r3, r1
 8009cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8009cbc:	e008      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009cbe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009cc2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8009cc6:	e003      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ccc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f002 0301 	and.w	r3, r2, #1
 8009cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ce6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4313      	orrs	r3, r2
 8009cee:	f000 8090 	beq.w	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cfa:	2b28      	cmp	r3, #40	@ 0x28
 8009cfc:	d870      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8009d04 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d04:	08009de9 	.word	0x08009de9
 8009d08:	08009de1 	.word	0x08009de1
 8009d0c:	08009de1 	.word	0x08009de1
 8009d10:	08009de1 	.word	0x08009de1
 8009d14:	08009de1 	.word	0x08009de1
 8009d18:	08009de1 	.word	0x08009de1
 8009d1c:	08009de1 	.word	0x08009de1
 8009d20:	08009de1 	.word	0x08009de1
 8009d24:	08009db5 	.word	0x08009db5
 8009d28:	08009de1 	.word	0x08009de1
 8009d2c:	08009de1 	.word	0x08009de1
 8009d30:	08009de1 	.word	0x08009de1
 8009d34:	08009de1 	.word	0x08009de1
 8009d38:	08009de1 	.word	0x08009de1
 8009d3c:	08009de1 	.word	0x08009de1
 8009d40:	08009de1 	.word	0x08009de1
 8009d44:	08009dcb 	.word	0x08009dcb
 8009d48:	08009de1 	.word	0x08009de1
 8009d4c:	08009de1 	.word	0x08009de1
 8009d50:	08009de1 	.word	0x08009de1
 8009d54:	08009de1 	.word	0x08009de1
 8009d58:	08009de1 	.word	0x08009de1
 8009d5c:	08009de1 	.word	0x08009de1
 8009d60:	08009de1 	.word	0x08009de1
 8009d64:	08009de9 	.word	0x08009de9
 8009d68:	08009de1 	.word	0x08009de1
 8009d6c:	08009de1 	.word	0x08009de1
 8009d70:	08009de1 	.word	0x08009de1
 8009d74:	08009de1 	.word	0x08009de1
 8009d78:	08009de1 	.word	0x08009de1
 8009d7c:	08009de1 	.word	0x08009de1
 8009d80:	08009de1 	.word	0x08009de1
 8009d84:	08009de9 	.word	0x08009de9
 8009d88:	08009de1 	.word	0x08009de1
 8009d8c:	08009de1 	.word	0x08009de1
 8009d90:	08009de1 	.word	0x08009de1
 8009d94:	08009de1 	.word	0x08009de1
 8009d98:	08009de1 	.word	0x08009de1
 8009d9c:	08009de1 	.word	0x08009de1
 8009da0:	08009de1 	.word	0x08009de1
 8009da4:	08009de9 	.word	0x08009de9
 8009da8:	58024400 	.word	0x58024400
 8009dac:	58024800 	.word	0x58024800
 8009db0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009db8:	3308      	adds	r3, #8
 8009dba:	2101      	movs	r1, #1
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 ffc5 	bl	800ad4c <RCCEx_PLL2_Config>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009dc8:	e00f      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dce:	3328      	adds	r3, #40	@ 0x28
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f001 f86c 	bl	800aeb0 <RCCEx_PLL3_Config>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009dde:	e004      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009de6:	e000      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10b      	bne.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009df2:	4bc0      	ldr	r3, [pc, #768]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009df6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e02:	4abc      	ldr	r2, [pc, #752]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e04:	430b      	orrs	r3, r1
 8009e06:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e08:	e003      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	f002 0302 	and.w	r3, r2, #2
 8009e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e22:	2300      	movs	r3, #0
 8009e24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009e28:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	d043      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e3a:	2b05      	cmp	r3, #5
 8009e3c:	d824      	bhi.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8009e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e44 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e91 	.word	0x08009e91
 8009e48:	08009e5d 	.word	0x08009e5d
 8009e4c:	08009e73 	.word	0x08009e73
 8009e50:	08009e91 	.word	0x08009e91
 8009e54:	08009e91 	.word	0x08009e91
 8009e58:	08009e91 	.word	0x08009e91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e60:	3308      	adds	r3, #8
 8009e62:	2101      	movs	r1, #1
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 ff71 	bl	800ad4c <RCCEx_PLL2_Config>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009e70:	e00f      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e76:	3328      	adds	r3, #40	@ 0x28
 8009e78:	2101      	movs	r1, #1
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f001 f818 	bl	800aeb0 <RCCEx_PLL3_Config>
 8009e80:	4603      	mov	r3, r0
 8009e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009e86:	e004      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009e8e:	e000      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8009e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10b      	bne.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009e9a:	4b96      	ldr	r3, [pc, #600]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e9e:	f023 0107 	bic.w	r1, r3, #7
 8009ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eaa:	4a92      	ldr	r2, [pc, #584]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009eac:	430b      	orrs	r3, r1
 8009eae:	6553      	str	r3, [r2, #84]	@ 0x54
 8009eb0:	e003      	b.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009eb6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f002 0304 	and.w	r3, r2, #4
 8009ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ed0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	d043      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ee2:	2b05      	cmp	r3, #5
 8009ee4:	d824      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8009eec <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8009ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eec:	08009f39 	.word	0x08009f39
 8009ef0:	08009f05 	.word	0x08009f05
 8009ef4:	08009f1b 	.word	0x08009f1b
 8009ef8:	08009f39 	.word	0x08009f39
 8009efc:	08009f39 	.word	0x08009f39
 8009f00:	08009f39 	.word	0x08009f39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f08:	3308      	adds	r3, #8
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f000 ff1d 	bl	800ad4c <RCCEx_PLL2_Config>
 8009f12:	4603      	mov	r3, r0
 8009f14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009f18:	e00f      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f1e:	3328      	adds	r3, #40	@ 0x28
 8009f20:	2101      	movs	r1, #1
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 ffc4 	bl	800aeb0 <RCCEx_PLL3_Config>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009f2e:	e004      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009f36:	e000      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8009f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10b      	bne.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f42:	4b6c      	ldr	r3, [pc, #432]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f46:	f023 0107 	bic.w	r1, r3, #7
 8009f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f52:	4a68      	ldr	r2, [pc, #416]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f54:	430b      	orrs	r3, r1
 8009f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f58:	e003      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6a:	f002 0320 	and.w	r3, r2, #32
 8009f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f72:	2300      	movs	r3, #0
 8009f74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	d055      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f8e:	d033      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f94:	d82c      	bhi.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f9a:	d02f      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fa0:	d826      	bhi.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009fa2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009fa6:	d02b      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009fa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009fac:	d820      	bhi.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fb2:	d012      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fb8:	d81a      	bhi.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d022      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fc2:	d115      	bne.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fc8:	3308      	adds	r3, #8
 8009fca:	2100      	movs	r1, #0
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 febd 	bl	800ad4c <RCCEx_PLL2_Config>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009fd8:	e015      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fde:	3328      	adds	r3, #40	@ 0x28
 8009fe0:	2102      	movs	r1, #2
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 ff64 	bl	800aeb0 <RCCEx_PLL3_Config>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009fee:	e00a      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009ff6:	e006      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009ff8:	bf00      	nop
 8009ffa:	e004      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8009ffc:	bf00      	nop
 8009ffe:	e002      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a000:	bf00      	nop
 800a002:	e000      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a006:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10b      	bne.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a00e:	4b39      	ldr	r3, [pc, #228]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a012:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a01a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a01e:	4a35      	ldr	r2, [pc, #212]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a020:	430b      	orrs	r3, r1
 800a022:	6553      	str	r3, [r2, #84]	@ 0x54
 800a024:	e003      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a026:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a02a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a02e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a03a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a03e:	2300      	movs	r3, #0
 800a040:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a044:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a048:	460b      	mov	r3, r1
 800a04a:	4313      	orrs	r3, r2
 800a04c:	d058      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a04e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a052:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a056:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a05a:	d033      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a05c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a060:	d82c      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a066:	d02f      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a06c:	d826      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a06e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a072:	d02b      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a074:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a078:	d820      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a07a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a07e:	d012      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800a080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a084:	d81a      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a086:	2b00      	cmp	r3, #0
 800a088:	d022      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800a08a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a08e:	d115      	bne.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a094:	3308      	adds	r3, #8
 800a096:	2100      	movs	r1, #0
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 fe57 	bl	800ad4c <RCCEx_PLL2_Config>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a0a4:	e015      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0aa:	3328      	adds	r3, #40	@ 0x28
 800a0ac:	2102      	movs	r1, #2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fefe 	bl	800aeb0 <RCCEx_PLL3_Config>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a0ba:	e00a      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a0c2:	e006      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a0c4:	bf00      	nop
 800a0c6:	e004      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a0c8:	bf00      	nop
 800a0ca:	e002      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a0cc:	bf00      	nop
 800a0ce:	e000      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a0d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10e      	bne.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a0da:	4b06      	ldr	r3, [pc, #24]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a0dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0de:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a0e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a0ea:	4a02      	ldr	r2, [pc, #8]	@ (800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a0ec:	430b      	orrs	r3, r1
 800a0ee:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0f0:	e006      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a0f2:	bf00      	nop
 800a0f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a0fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a10c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a110:	2300      	movs	r3, #0
 800a112:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a116:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a11a:	460b      	mov	r3, r1
 800a11c:	4313      	orrs	r3, r2
 800a11e:	d055      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a120:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a124:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a128:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a12c:	d033      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a12e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a132:	d82c      	bhi.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a138:	d02f      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a13a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a13e:	d826      	bhi.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a140:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a144:	d02b      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a146:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a14a:	d820      	bhi.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a14c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a150:	d012      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a152:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a156:	d81a      	bhi.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d022      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800a15c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a160:	d115      	bne.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a166:	3308      	adds	r3, #8
 800a168:	2100      	movs	r1, #0
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 fdee 	bl	800ad4c <RCCEx_PLL2_Config>
 800a170:	4603      	mov	r3, r0
 800a172:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a176:	e015      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a178:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a17c:	3328      	adds	r3, #40	@ 0x28
 800a17e:	2102      	movs	r1, #2
 800a180:	4618      	mov	r0, r3
 800a182:	f000 fe95 	bl	800aeb0 <RCCEx_PLL3_Config>
 800a186:	4603      	mov	r3, r0
 800a188:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a18c:	e00a      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a194:	e006      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a196:	bf00      	nop
 800a198:	e004      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a19a:	bf00      	nop
 800a19c:	e002      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a19e:	bf00      	nop
 800a1a0:	e000      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800a1a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10b      	bne.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a1ac:	4ba1      	ldr	r3, [pc, #644]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1b0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a1b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a1bc:	4a9d      	ldr	r2, [pc, #628]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a1be:	430b      	orrs	r3, r1
 800a1c0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1c2:	e003      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a1c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a1cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f002 0308 	and.w	r3, r2, #8
 800a1d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a1e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	d01e      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a1ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1f8:	d10c      	bne.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a1fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1fe:	3328      	adds	r3, #40	@ 0x28
 800a200:	2102      	movs	r1, #2
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fe54 	bl	800aeb0 <RCCEx_PLL3_Config>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a214:	4b87      	ldr	r3, [pc, #540]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a218:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a21c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a224:	4a83      	ldr	r2, [pc, #524]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a226:	430b      	orrs	r3, r1
 800a228:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a22a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f002 0310 	and.w	r3, r2, #16
 800a236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a23a:	2300      	movs	r3, #0
 800a23c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a240:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a244:	460b      	mov	r3, r1
 800a246:	4313      	orrs	r3, r2
 800a248:	d01e      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a24a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a24e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a256:	d10c      	bne.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a25c:	3328      	adds	r3, #40	@ 0x28
 800a25e:	2102      	movs	r1, #2
 800a260:	4618      	mov	r0, r3
 800a262:	f000 fe25 	bl	800aeb0 <RCCEx_PLL3_Config>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a272:	4b70      	ldr	r3, [pc, #448]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a276:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a27a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a27e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a282:	4a6c      	ldr	r2, [pc, #432]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a284:	430b      	orrs	r3, r1
 800a286:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a294:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a298:	2300      	movs	r3, #0
 800a29a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a29e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	d03e      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a2a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a2b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2b4:	d022      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800a2b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2ba:	d81b      	bhi.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800a2c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2c4:	d00b      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800a2c6:	e015      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 fd3b 	bl	800ad4c <RCCEx_PLL2_Config>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a2dc:	e00f      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2e2:	3328      	adds	r3, #40	@ 0x28
 800a2e4:	2102      	movs	r1, #2
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 fde2 	bl	800aeb0 <RCCEx_PLL3_Config>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a2f2:	e004      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a2fa:	e000      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800a2fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10b      	bne.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a306:	4b4b      	ldr	r3, [pc, #300]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a30a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a312:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a316:	4a47      	ldr	r2, [pc, #284]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a318:	430b      	orrs	r3, r1
 800a31a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a31c:	e003      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a322:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a332:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a334:	2300      	movs	r3, #0
 800a336:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a338:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a33c:	460b      	mov	r3, r1
 800a33e:	4313      	orrs	r3, r2
 800a340:	d03b      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a34a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a34e:	d01f      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800a350:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a354:	d818      	bhi.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a35a:	d003      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800a35c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a360:	d007      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800a362:	e011      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a364:	4b33      	ldr	r3, [pc, #204]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a368:	4a32      	ldr	r2, [pc, #200]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a36a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a36e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a370:	e00f      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a376:	3328      	adds	r3, #40	@ 0x28
 800a378:	2101      	movs	r1, #1
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 fd98 	bl	800aeb0 <RCCEx_PLL3_Config>
 800a380:	4603      	mov	r3, r0
 800a382:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a386:	e004      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a38e:	e000      	b.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800a390:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a392:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10b      	bne.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a39a:	4b26      	ldr	r3, [pc, #152]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a39c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a39e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a3a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3aa:	4a22      	ldr	r2, [pc, #136]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3ac:	430b      	orrs	r3, r1
 800a3ae:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3b0:	e003      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a3b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a3ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a3c6:	673b      	str	r3, [r7, #112]	@ 0x70
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	677b      	str	r3, [r7, #116]	@ 0x74
 800a3cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	d034      	beq.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a3d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d003      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800a3e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3e4:	d007      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800a3e6:	e011      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3e8:	4b12      	ldr	r3, [pc, #72]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ec:	4a11      	ldr	r2, [pc, #68]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a3ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a3f4:	e00e      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	2102      	movs	r1, #2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fca4 	bl	800ad4c <RCCEx_PLL2_Config>
 800a404:	4603      	mov	r3, r0
 800a406:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a40a:	e003      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a412:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a414:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10d      	bne.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a41c:	4b05      	ldr	r3, [pc, #20]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a41e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a420:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a42a:	4a02      	ldr	r2, [pc, #8]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a42c:	430b      	orrs	r3, r1
 800a42e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a430:	e006      	b.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a432:	bf00      	nop
 800a434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a438:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a43c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a44c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a44e:	2300      	movs	r3, #0
 800a450:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a452:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a456:	460b      	mov	r3, r1
 800a458:	4313      	orrs	r3, r2
 800a45a:	d00c      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a45c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a460:	3328      	adds	r3, #40	@ 0x28
 800a462:	2102      	movs	r1, #2
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fd23 	bl	800aeb0 <RCCEx_PLL3_Config>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a482:	663b      	str	r3, [r7, #96]	@ 0x60
 800a484:	2300      	movs	r3, #0
 800a486:	667b      	str	r3, [r7, #100]	@ 0x64
 800a488:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a48c:	460b      	mov	r3, r1
 800a48e:	4313      	orrs	r3, r2
 800a490:	d038      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a49a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a49e:	d018      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800a4a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4a4:	d811      	bhi.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a4a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4aa:	d014      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800a4ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4b0:	d80b      	bhi.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d011      	beq.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800a4b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4ba:	d106      	bne.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4bc:	4bc3      	ldr	r3, [pc, #780]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c0:	4ac2      	ldr	r2, [pc, #776]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a4c8:	e008      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a4d0:	e004      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a4d2:	bf00      	nop
 800a4d4:	e002      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a4d6:	bf00      	nop
 800a4d8:	e000      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800a4da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10b      	bne.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a4e4:	4bb9      	ldr	r3, [pc, #740]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a4ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4f4:	4ab5      	ldr	r2, [pc, #724]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a4f6:	430b      	orrs	r3, r1
 800a4f8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a4fa:	e003      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a500:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a510:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a512:	2300      	movs	r3, #0
 800a514:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a516:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a51a:	460b      	mov	r3, r1
 800a51c:	4313      	orrs	r3, r2
 800a51e:	d009      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a520:	4baa      	ldr	r3, [pc, #680]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a524:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a52c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a52e:	4aa7      	ldr	r2, [pc, #668]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a530:	430b      	orrs	r3, r1
 800a532:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a540:	653b      	str	r3, [r7, #80]	@ 0x50
 800a542:	2300      	movs	r3, #0
 800a544:	657b      	str	r3, [r7, #84]	@ 0x54
 800a546:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a54a:	460b      	mov	r3, r1
 800a54c:	4313      	orrs	r3, r2
 800a54e:	d009      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a550:	4b9e      	ldr	r3, [pc, #632]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a554:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a55c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a55e:	4a9b      	ldr	r2, [pc, #620]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a560:	430b      	orrs	r3, r1
 800a562:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800a564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a570:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a572:	2300      	movs	r3, #0
 800a574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a576:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a57a:	460b      	mov	r3, r1
 800a57c:	4313      	orrs	r3, r2
 800a57e:	d009      	beq.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800a580:	4b92      	ldr	r3, [pc, #584]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a584:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800a588:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a58c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a58e:	4a8f      	ldr	r2, [pc, #572]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a590:	430b      	orrs	r3, r1
 800a592:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a5a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5a6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	d00e      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a5b0:	4b86      	ldr	r3, [pc, #536]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	4a85      	ldr	r2, [pc, #532]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a5ba:	6113      	str	r3, [r2, #16]
 800a5bc:	4b83      	ldr	r3, [pc, #524]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5be:	6919      	ldr	r1, [r3, #16]
 800a5c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a5c8:	4a80      	ldr	r2, [pc, #512]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5ca:	430b      	orrs	r3, r1
 800a5cc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a5ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a5da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a5dc:	2300      	movs	r3, #0
 800a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	d009      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a5ea:	4b78      	ldr	r3, [pc, #480]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a5f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5f8:	4a74      	ldr	r2, [pc, #464]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a5fa:	430b      	orrs	r3, r1
 800a5fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a5fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a60a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a60c:	2300      	movs	r3, #0
 800a60e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a610:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a614:	460b      	mov	r3, r1
 800a616:	4313      	orrs	r3, r2
 800a618:	d00a      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a61a:	4b6c      	ldr	r3, [pc, #432]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a61c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a61e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a622:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a62a:	4a68      	ldr	r2, [pc, #416]	@ (800a7cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800a62c:	430b      	orrs	r3, r1
 800a62e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	2100      	movs	r1, #0
 800a63a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a642:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a646:	460b      	mov	r3, r1
 800a648:	4313      	orrs	r3, r2
 800a64a:	d011      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a64c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a650:	3308      	adds	r3, #8
 800a652:	2100      	movs	r1, #0
 800a654:	4618      	mov	r0, r3
 800a656:	f000 fb79 	bl	800ad4c <RCCEx_PLL2_Config>
 800a65a:	4603      	mov	r3, r0
 800a65c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a660:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a664:	2b00      	cmp	r3, #0
 800a666:	d003      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a668:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a66c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	2100      	movs	r1, #0
 800a67a:	6239      	str	r1, [r7, #32]
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	627b      	str	r3, [r7, #36]	@ 0x24
 800a682:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a686:	460b      	mov	r3, r1
 800a688:	4313      	orrs	r3, r2
 800a68a:	d011      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a68c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a690:	3308      	adds	r3, #8
 800a692:	2101      	movs	r1, #1
 800a694:	4618      	mov	r0, r3
 800a696:	f000 fb59 	bl	800ad4c <RCCEx_PLL2_Config>
 800a69a:	4603      	mov	r3, r0
 800a69c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a6a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d003      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a6b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	61b9      	str	r1, [r7, #24]
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	61fb      	str	r3, [r7, #28]
 800a6c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	d011      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a6cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6d0:	3308      	adds	r3, #8
 800a6d2:	2102      	movs	r1, #2
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 fb39 	bl	800ad4c <RCCEx_PLL2_Config>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a6e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a6f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	6139      	str	r1, [r7, #16]
 800a6fc:	f003 0308 	and.w	r3, r3, #8
 800a700:	617b      	str	r3, [r7, #20]
 800a702:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a706:	460b      	mov	r3, r1
 800a708:	4313      	orrs	r3, r2
 800a70a:	d011      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a70c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a710:	3328      	adds	r3, #40	@ 0x28
 800a712:	2100      	movs	r1, #0
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fbcb 	bl	800aeb0 <RCCEx_PLL3_Config>
 800a71a:	4603      	mov	r3, r0
 800a71c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800a720:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a724:	2b00      	cmp	r3, #0
 800a726:	d003      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a728:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a72c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a730:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	2100      	movs	r1, #0
 800a73a:	60b9      	str	r1, [r7, #8]
 800a73c:	f003 0310 	and.w	r3, r3, #16
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a746:	460b      	mov	r3, r1
 800a748:	4313      	orrs	r3, r2
 800a74a:	d011      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a74c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a750:	3328      	adds	r3, #40	@ 0x28
 800a752:	2101      	movs	r1, #1
 800a754:	4618      	mov	r0, r3
 800a756:	f000 fbab 	bl	800aeb0 <RCCEx_PLL3_Config>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a760:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a764:	2b00      	cmp	r3, #0
 800a766:	d003      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a768:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a76c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	2100      	movs	r1, #0
 800a77a:	6039      	str	r1, [r7, #0]
 800a77c:	f003 0320 	and.w	r3, r3, #32
 800a780:	607b      	str	r3, [r7, #4]
 800a782:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a786:	460b      	mov	r3, r1
 800a788:	4313      	orrs	r3, r2
 800a78a:	d011      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a78c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a790:	3328      	adds	r3, #40	@ 0x28
 800a792:	2102      	movs	r1, #2
 800a794:	4618      	mov	r0, r3
 800a796:	f000 fb8b 	bl	800aeb0 <RCCEx_PLL3_Config>
 800a79a:	4603      	mov	r3, r0
 800a79c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800a7a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d003      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800a7b0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e000      	b.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7ca:	bf00      	nop
 800a7cc:	58024400 	.word	0x58024400

0800a7d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800a7d4:	f7fe fde2 	bl	800939c <HAL_RCC_GetHCLKFreq>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	4b06      	ldr	r3, [pc, #24]	@ (800a7f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	091b      	lsrs	r3, r3, #4
 800a7e0:	f003 0307 	and.w	r3, r3, #7
 800a7e4:	4904      	ldr	r1, [pc, #16]	@ (800a7f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a7e6:	5ccb      	ldrb	r3, [r1, r3]
 800a7e8:	f003 031f 	and.w	r3, r3, #31
 800a7ec:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	58024400 	.word	0x58024400
 800a7f8:	08014c28 	.word	0x08014c28

0800a7fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b089      	sub	sp, #36	@ 0x24
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a804:	4ba1      	ldr	r3, [pc, #644]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a808:	f003 0303 	and.w	r3, r3, #3
 800a80c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a80e:	4b9f      	ldr	r3, [pc, #636]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a812:	0b1b      	lsrs	r3, r3, #12
 800a814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a818:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a81a:	4b9c      	ldr	r3, [pc, #624]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a81e:	091b      	lsrs	r3, r3, #4
 800a820:	f003 0301 	and.w	r3, r3, #1
 800a824:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a826:	4b99      	ldr	r3, [pc, #612]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a82a:	08db      	lsrs	r3, r3, #3
 800a82c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	fb02 f303 	mul.w	r3, r2, r3
 800a836:	ee07 3a90 	vmov	s15, r3
 800a83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 8111 	beq.w	800aa6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	f000 8083 	beq.w	800a958 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	2b02      	cmp	r3, #2
 800a856:	f200 80a1 	bhi.w	800a99c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d003      	beq.n	800a868 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d056      	beq.n	800a914 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a866:	e099      	b.n	800a99c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a868:	4b88      	ldr	r3, [pc, #544]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0320 	and.w	r3, r3, #32
 800a870:	2b00      	cmp	r3, #0
 800a872:	d02d      	beq.n	800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a874:	4b85      	ldr	r3, [pc, #532]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	08db      	lsrs	r3, r3, #3
 800a87a:	f003 0303 	and.w	r3, r3, #3
 800a87e:	4a84      	ldr	r2, [pc, #528]	@ (800aa90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a880:	fa22 f303 	lsr.w	r3, r2, r3
 800a884:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	ee07 3a90 	vmov	s15, r3
 800a88c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	ee07 3a90 	vmov	s15, r3
 800a896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a89a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a89e:	4b7b      	ldr	r3, [pc, #492]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a6:	ee07 3a90 	vmov	s15, r3
 800a8aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aa94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a8ce:	e087      	b.n	800a9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aa98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a8de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8e2:	4b6a      	ldr	r3, [pc, #424]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ea:	ee07 3a90 	vmov	s15, r3
 800a8ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aa94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a90a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a90e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a912:	e065      	b.n	800a9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	ee07 3a90 	vmov	s15, r3
 800a91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a91e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aa9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a926:	4b59      	ldr	r3, [pc, #356]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a92e:	ee07 3a90 	vmov	s15, r3
 800a932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a936:	ed97 6a03 	vldr	s12, [r7, #12]
 800a93a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aa94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a93e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a94a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a94e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a956:	e043      	b.n	800a9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	ee07 3a90 	vmov	s15, r3
 800a95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a962:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a96a:	4b48      	ldr	r3, [pc, #288]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a972:	ee07 3a90 	vmov	s15, r3
 800a976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a97a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a97e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aa94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a98a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a98e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a99a:	e021      	b.n	800a9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aa9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ae:	4b37      	ldr	r3, [pc, #220]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b6:	ee07 3a90 	vmov	s15, r3
 800a9ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aa94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a9e0:	4b2a      	ldr	r3, [pc, #168]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e4:	0a5b      	lsrs	r3, r3, #9
 800a9e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9ea:	ee07 3a90 	vmov	s15, r3
 800a9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa06:	ee17 2a90 	vmov	r2, s15
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aa0e:	4b1f      	ldr	r3, [pc, #124]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa12:	0c1b      	lsrs	r3, r3, #16
 800aa14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa18:	ee07 3a90 	vmov	s15, r3
 800aa1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa28:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa34:	ee17 2a90 	vmov	r2, s15
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aa3c:	4b13      	ldr	r3, [pc, #76]	@ (800aa8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa40:	0e1b      	lsrs	r3, r3, #24
 800aa42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa56:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa62:	ee17 2a90 	vmov	r2, s15
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aa6a:	e008      	b.n	800aa7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	609a      	str	r2, [r3, #8]
}
 800aa7e:	bf00      	nop
 800aa80:	3724      	adds	r7, #36	@ 0x24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	58024400 	.word	0x58024400
 800aa90:	03d09000 	.word	0x03d09000
 800aa94:	46000000 	.word	0x46000000
 800aa98:	4c742400 	.word	0x4c742400
 800aa9c:	4a742400 	.word	0x4a742400
 800aaa0:	4bb71b00 	.word	0x4bb71b00

0800aaa4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b089      	sub	sp, #36	@ 0x24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aaac:	4ba1      	ldr	r3, [pc, #644]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab0:	f003 0303 	and.w	r3, r3, #3
 800aab4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aab6:	4b9f      	ldr	r3, [pc, #636]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaba:	0d1b      	lsrs	r3, r3, #20
 800aabc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aac0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aac2:	4b9c      	ldr	r3, [pc, #624]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac6:	0a1b      	lsrs	r3, r3, #8
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aace:	4b99      	ldr	r3, [pc, #612]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aad2:	08db      	lsrs	r3, r3, #3
 800aad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	fb02 f303 	mul.w	r3, r2, r3
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 8111 	beq.w	800ad14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	f000 8083 	beq.w	800ac00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	f200 80a1 	bhi.w	800ac44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d003      	beq.n	800ab10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d056      	beq.n	800abbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ab0e:	e099      	b.n	800ac44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab10:	4b88      	ldr	r3, [pc, #544]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0320 	and.w	r3, r3, #32
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d02d      	beq.n	800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab1c:	4b85      	ldr	r3, [pc, #532]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	08db      	lsrs	r3, r3, #3
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	4a84      	ldr	r2, [pc, #528]	@ (800ad38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ab28:	fa22 f303 	lsr.w	r3, r2, r3
 800ab2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	ee07 3a90 	vmov	s15, r3
 800ab34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab46:	4b7b      	ldr	r3, [pc, #492]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4e:	ee07 3a90 	vmov	s15, r3
 800ab52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ad3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ab76:	e087      	b.n	800ac88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	ee07 3a90 	vmov	s15, r3
 800ab7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ad40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ab86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab8a:	4b6a      	ldr	r3, [pc, #424]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab92:	ee07 3a90 	vmov	s15, r3
 800ab96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ad3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abba:	e065      	b.n	800ac88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	ee07 3a90 	vmov	s15, r3
 800abc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ad44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800abca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abce:	4b59      	ldr	r3, [pc, #356]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd6:	ee07 3a90 	vmov	s15, r3
 800abda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abde:	ed97 6a03 	vldr	s12, [r7, #12]
 800abe2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ad3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abfe:	e043      	b.n	800ac88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	ee07 3a90 	vmov	s15, r3
 800ac06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ad48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ac0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac12:	4b48      	ldr	r3, [pc, #288]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac1a:	ee07 3a90 	vmov	s15, r3
 800ac1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ad3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac42:	e021      	b.n	800ac88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	ee07 3a90 	vmov	s15, r3
 800ac4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ad44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac56:	4b37      	ldr	r3, [pc, #220]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ad3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ac88:	4b2a      	ldr	r3, [pc, #168]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8c:	0a5b      	lsrs	r3, r3, #9
 800ac8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac92:	ee07 3a90 	vmov	s15, r3
 800ac96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aca2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acae:	ee17 2a90 	vmov	r2, s15
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800acb6:	4b1f      	ldr	r3, [pc, #124]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acba:	0c1b      	lsrs	r3, r3, #16
 800acbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acc0:	ee07 3a90 	vmov	s15, r3
 800acc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800accc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800acd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acdc:	ee17 2a90 	vmov	r2, s15
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ace4:	4b13      	ldr	r3, [pc, #76]	@ (800ad34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace8:	0e1b      	lsrs	r3, r3, #24
 800acea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800acfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad0a:	ee17 2a90 	vmov	r2, s15
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ad12:	e008      	b.n	800ad26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	609a      	str	r2, [r3, #8]
}
 800ad26:	bf00      	nop
 800ad28:	3724      	adds	r7, #36	@ 0x24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	58024400 	.word	0x58024400
 800ad38:	03d09000 	.word	0x03d09000
 800ad3c:	46000000 	.word	0x46000000
 800ad40:	4c742400 	.word	0x4c742400
 800ad44:	4a742400 	.word	0x4a742400
 800ad48:	4bb71b00 	.word	0x4bb71b00

0800ad4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad5a:	4b53      	ldr	r3, [pc, #332]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ad5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad5e:	f003 0303 	and.w	r3, r3, #3
 800ad62:	2b03      	cmp	r3, #3
 800ad64:	d101      	bne.n	800ad6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e099      	b.n	800ae9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ad6a:	4b4f      	ldr	r3, [pc, #316]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a4e      	ldr	r2, [pc, #312]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ad70:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad76:	f7f9 fca1 	bl	80046bc <HAL_GetTick>
 800ad7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad7c:	e008      	b.n	800ad90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad7e:	f7f9 fc9d 	bl	80046bc <HAL_GetTick>
 800ad82:	4602      	mov	r2, r0
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d901      	bls.n	800ad90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e086      	b.n	800ae9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad90:	4b45      	ldr	r3, [pc, #276]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1f0      	bne.n	800ad7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ad9c:	4b42      	ldr	r3, [pc, #264]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ad9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	031b      	lsls	r3, r3, #12
 800adaa:	493f      	ldr	r1, [pc, #252]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800adac:	4313      	orrs	r3, r2
 800adae:	628b      	str	r3, [r1, #40]	@ 0x28
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	025b      	lsls	r3, r3, #9
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	431a      	orrs	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	3b01      	subs	r3, #1
 800adcc:	041b      	lsls	r3, r3, #16
 800adce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800add2:	431a      	orrs	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	3b01      	subs	r3, #1
 800adda:	061b      	lsls	r3, r3, #24
 800addc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ade0:	4931      	ldr	r1, [pc, #196]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ade2:	4313      	orrs	r3, r2
 800ade4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ade6:	4b30      	ldr	r3, [pc, #192]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ade8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	492d      	ldr	r1, [pc, #180]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800adf4:	4313      	orrs	r3, r2
 800adf6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800adf8:	4b2b      	ldr	r3, [pc, #172]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800adfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adfc:	f023 0220 	bic.w	r2, r3, #32
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	4928      	ldr	r1, [pc, #160]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ae0a:	4b27      	ldr	r3, [pc, #156]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae0e:	4a26      	ldr	r2, [pc, #152]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae10:	f023 0310 	bic.w	r3, r3, #16
 800ae14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ae16:	4b24      	ldr	r3, [pc, #144]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae1a:	4b24      	ldr	r3, [pc, #144]	@ (800aeac <RCCEx_PLL2_Config+0x160>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	69d2      	ldr	r2, [r2, #28]
 800ae22:	00d2      	lsls	r2, r2, #3
 800ae24:	4920      	ldr	r1, [pc, #128]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ae2a:	4b1f      	ldr	r3, [pc, #124]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae2e:	4a1e      	ldr	r2, [pc, #120]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae30:	f043 0310 	orr.w	r3, r3, #16
 800ae34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d106      	bne.n	800ae4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ae3c:	4b1a      	ldr	r3, [pc, #104]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae40:	4a19      	ldr	r2, [pc, #100]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ae48:	e00f      	b.n	800ae6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d106      	bne.n	800ae5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ae50:	4b15      	ldr	r3, [pc, #84]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae54:	4a14      	ldr	r2, [pc, #80]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ae5c:	e005      	b.n	800ae6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ae5e:	4b12      	ldr	r3, [pc, #72]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae62:	4a11      	ldr	r2, [pc, #68]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ae68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ae6a:	4b0f      	ldr	r3, [pc, #60]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a0e      	ldr	r2, [pc, #56]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae76:	f7f9 fc21 	bl	80046bc <HAL_GetTick>
 800ae7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae7c:	e008      	b.n	800ae90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae7e:	f7f9 fc1d 	bl	80046bc <HAL_GetTick>
 800ae82:	4602      	mov	r2, r0
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d901      	bls.n	800ae90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e006      	b.n	800ae9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae90:	4b05      	ldr	r3, [pc, #20]	@ (800aea8 <RCCEx_PLL2_Config+0x15c>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d0f0      	beq.n	800ae7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	58024400 	.word	0x58024400
 800aeac:	ffff0007 	.word	0xffff0007

0800aeb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aebe:	4b53      	ldr	r3, [pc, #332]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800aec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec2:	f003 0303 	and.w	r3, r3, #3
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	d101      	bne.n	800aece <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e099      	b.n	800b002 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aece:	4b4f      	ldr	r3, [pc, #316]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a4e      	ldr	r2, [pc, #312]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800aed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeda:	f7f9 fbef 	bl	80046bc <HAL_GetTick>
 800aede:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aee0:	e008      	b.n	800aef4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aee2:	f7f9 fbeb 	bl	80046bc <HAL_GetTick>
 800aee6:	4602      	mov	r2, r0
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d901      	bls.n	800aef4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e086      	b.n	800b002 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aef4:	4b45      	ldr	r3, [pc, #276]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1f0      	bne.n	800aee2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800af00:	4b42      	ldr	r3, [pc, #264]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af04:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	051b      	lsls	r3, r3, #20
 800af0e:	493f      	ldr	r1, [pc, #252]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af10:	4313      	orrs	r3, r2
 800af12:	628b      	str	r3, [r1, #40]	@ 0x28
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	3b01      	subs	r3, #1
 800af1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	3b01      	subs	r3, #1
 800af24:	025b      	lsls	r3, r3, #9
 800af26:	b29b      	uxth	r3, r3
 800af28:	431a      	orrs	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	3b01      	subs	r3, #1
 800af30:	041b      	lsls	r3, r3, #16
 800af32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800af36:	431a      	orrs	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	3b01      	subs	r3, #1
 800af3e:	061b      	lsls	r3, r3, #24
 800af40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800af44:	4931      	ldr	r1, [pc, #196]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af46:	4313      	orrs	r3, r2
 800af48:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800af4a:	4b30      	ldr	r3, [pc, #192]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	492d      	ldr	r1, [pc, #180]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af58:	4313      	orrs	r3, r2
 800af5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800af5c:	4b2b      	ldr	r3, [pc, #172]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af60:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	4928      	ldr	r1, [pc, #160]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af6a:	4313      	orrs	r3, r2
 800af6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800af6e:	4b27      	ldr	r3, [pc, #156]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af72:	4a26      	ldr	r2, [pc, #152]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800af7a:	4b24      	ldr	r3, [pc, #144]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af7e:	4b24      	ldr	r3, [pc, #144]	@ (800b010 <RCCEx_PLL3_Config+0x160>)
 800af80:	4013      	ands	r3, r2
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	69d2      	ldr	r2, [r2, #28]
 800af86:	00d2      	lsls	r2, r2, #3
 800af88:	4920      	ldr	r1, [pc, #128]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af8a:	4313      	orrs	r3, r2
 800af8c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800af8e:	4b1f      	ldr	r3, [pc, #124]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af92:	4a1e      	ldr	r2, [pc, #120]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800af94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d106      	bne.n	800afae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800afa0:	4b1a      	ldr	r3, [pc, #104]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800afa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa4:	4a19      	ldr	r2, [pc, #100]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800afa6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800afaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800afac:	e00f      	b.n	800afce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d106      	bne.n	800afc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800afb4:	4b15      	ldr	r3, [pc, #84]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800afb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb8:	4a14      	ldr	r2, [pc, #80]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800afba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800afbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800afc0:	e005      	b.n	800afce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800afc2:	4b12      	ldr	r3, [pc, #72]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800afc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc6:	4a11      	ldr	r2, [pc, #68]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800afc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800afcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800afce:	4b0f      	ldr	r3, [pc, #60]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a0e      	ldr	r2, [pc, #56]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800afd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afda:	f7f9 fb6f 	bl	80046bc <HAL_GetTick>
 800afde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800afe0:	e008      	b.n	800aff4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800afe2:	f7f9 fb6b 	bl	80046bc <HAL_GetTick>
 800afe6:	4602      	mov	r2, r0
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	2b02      	cmp	r3, #2
 800afee:	d901      	bls.n	800aff4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aff0:	2303      	movs	r3, #3
 800aff2:	e006      	b.n	800b002 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aff4:	4b05      	ldr	r3, [pc, #20]	@ (800b00c <RCCEx_PLL3_Config+0x15c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d0f0      	beq.n	800afe2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	58024400 	.word	0x58024400
 800b010:	ffff0007 	.word	0xffff0007

0800b014 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e10f      	b.n	800b246 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a87      	ldr	r2, [pc, #540]	@ (800b250 <HAL_SPI_Init+0x23c>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d00f      	beq.n	800b056 <HAL_SPI_Init+0x42>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a86      	ldr	r2, [pc, #536]	@ (800b254 <HAL_SPI_Init+0x240>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d00a      	beq.n	800b056 <HAL_SPI_Init+0x42>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a84      	ldr	r2, [pc, #528]	@ (800b258 <HAL_SPI_Init+0x244>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d005      	beq.n	800b056 <HAL_SPI_Init+0x42>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	2b0f      	cmp	r3, #15
 800b050:	d901      	bls.n	800b056 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e0f7      	b.n	800b246 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 f968 	bl	800c32c <SPI_GetPacketSize>
 800b05c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a7b      	ldr	r2, [pc, #492]	@ (800b250 <HAL_SPI_Init+0x23c>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d00c      	beq.n	800b082 <HAL_SPI_Init+0x6e>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a79      	ldr	r2, [pc, #484]	@ (800b254 <HAL_SPI_Init+0x240>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d007      	beq.n	800b082 <HAL_SPI_Init+0x6e>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a78      	ldr	r2, [pc, #480]	@ (800b258 <HAL_SPI_Init+0x244>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d002      	beq.n	800b082 <HAL_SPI_Init+0x6e>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2b08      	cmp	r3, #8
 800b080:	d811      	bhi.n	800b0a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b086:	4a72      	ldr	r2, [pc, #456]	@ (800b250 <HAL_SPI_Init+0x23c>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d009      	beq.n	800b0a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a70      	ldr	r2, [pc, #448]	@ (800b254 <HAL_SPI_Init+0x240>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d004      	beq.n	800b0a0 <HAL_SPI_Init+0x8c>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a6f      	ldr	r2, [pc, #444]	@ (800b258 <HAL_SPI_Init+0x244>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d104      	bne.n	800b0aa <HAL_SPI_Init+0x96>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b10      	cmp	r3, #16
 800b0a4:	d901      	bls.n	800b0aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e0cd      	b.n	800b246 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d106      	bne.n	800b0c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7f8 fa1c 	bl	80034fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f022 0201 	bic.w	r2, r2, #1
 800b0da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b0e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b0f0:	d119      	bne.n	800b126 <HAL_SPI_Init+0x112>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b0fa:	d103      	bne.n	800b104 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b100:	2b00      	cmp	r3, #0
 800b102:	d008      	beq.n	800b116 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10c      	bne.n	800b126 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b114:	d107      	bne.n	800b126 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b124:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00f      	beq.n	800b152 <HAL_SPI_Init+0x13e>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	2b06      	cmp	r3, #6
 800b138:	d90b      	bls.n	800b152 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	e007      	b.n	800b162 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b160:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	69da      	ldr	r2, [r3, #28]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b16a:	431a      	orrs	r2, r3
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	431a      	orrs	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b174:	ea42 0103 	orr.w	r1, r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68da      	ldr	r2, [r3, #12]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	430a      	orrs	r2, r1
 800b182:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b18c:	431a      	orrs	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b192:	431a      	orrs	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	431a      	orrs	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	431a      	orrs	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	695b      	ldr	r3, [r3, #20]
 800b1a4:	431a      	orrs	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	431a      	orrs	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	431a      	orrs	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1c2:	ea42 0103 	orr.w	r1, r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d113      	bne.n	800b202 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b1ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b200:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f022 0201 	bic.w	r2, r2, #1
 800b210:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00a      	beq.n	800b234 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	430a      	orrs	r2, r1
 800b232:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	40013000 	.word	0x40013000
 800b254:	40003800 	.word	0x40003800
 800b258:	40003c00 	.word	0x40003c00

0800b25c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af02      	add	r7, sp, #8
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	4613      	mov	r3, r2
 800b26a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3320      	adds	r3, #32
 800b272:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b274:	f7f9 fa22 	bl	80046bc <HAL_GetTick>
 800b278:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b280:	b2db      	uxtb	r3, r3
 800b282:	2b01      	cmp	r3, #1
 800b284:	d001      	beq.n	800b28a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b286:	2302      	movs	r3, #2
 800b288:	e1d1      	b.n	800b62e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <HAL_SPI_Transmit+0x3a>
 800b290:	88fb      	ldrh	r3, [r7, #6]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d101      	bne.n	800b29a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e1c9      	b.n	800b62e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d101      	bne.n	800b2a8 <HAL_SPI_Transmit+0x4c>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	e1c2      	b.n	800b62e <HAL_SPI_Transmit+0x3d2>
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	88fa      	ldrh	r2, [r7, #6]
 800b2ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	88fa      	ldrh	r2, [r7, #6]
 800b2d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b300:	d108      	bne.n	800b314 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	e009      	b.n	800b328 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b326:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	4b96      	ldr	r3, [pc, #600]	@ (800b588 <HAL_SPI_Transmit+0x32c>)
 800b330:	4013      	ands	r3, r2
 800b332:	88f9      	ldrh	r1, [r7, #6]
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	6812      	ldr	r2, [r2, #0]
 800b338:	430b      	orrs	r3, r1
 800b33a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f042 0201 	orr.w	r2, r2, #1
 800b34a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b354:	d107      	bne.n	800b366 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b364:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	2b0f      	cmp	r3, #15
 800b36c:	d947      	bls.n	800b3fe <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b36e:	e03f      	b.n	800b3f0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	f003 0302 	and.w	r3, r3, #2
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d114      	bne.n	800b3a8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	6812      	ldr	r2, [r2, #0]
 800b388:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b38e:	1d1a      	adds	r2, r3, #4
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	3b01      	subs	r3, #1
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b3a6:	e023      	b.n	800b3f0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3a8:	f7f9 f988 	bl	80046bc <HAL_GetTick>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d803      	bhi.n	800b3c0 <HAL_SPI_Transmit+0x164>
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3be:	d102      	bne.n	800b3c6 <HAL_SPI_Transmit+0x16a>
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d114      	bne.n	800b3f0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f000 fee2 	bl	800c190 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e11e      	b.n	800b62e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1b9      	bne.n	800b370 <HAL_SPI_Transmit+0x114>
 800b3fc:	e0f1      	b.n	800b5e2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	2b07      	cmp	r3, #7
 800b404:	f240 80e6 	bls.w	800b5d4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b408:	e05d      	b.n	800b4c6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	695b      	ldr	r3, [r3, #20]
 800b410:	f003 0302 	and.w	r3, r3, #2
 800b414:	2b02      	cmp	r3, #2
 800b416:	d132      	bne.n	800b47e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b41e:	b29b      	uxth	r3, r3
 800b420:	2b01      	cmp	r3, #1
 800b422:	d918      	bls.n	800b456 <HAL_SPI_Transmit+0x1fa>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d014      	beq.n	800b456 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6812      	ldr	r2, [r2, #0]
 800b436:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b43c:	1d1a      	adds	r2, r3, #4
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b448:	b29b      	uxth	r3, r3
 800b44a:	3b02      	subs	r3, #2
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b454:	e037      	b.n	800b4c6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b45a:	881a      	ldrh	r2, [r3, #0]
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b464:	1c9a      	adds	r2, r3, #2
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b470:	b29b      	uxth	r3, r3
 800b472:	3b01      	subs	r3, #1
 800b474:	b29a      	uxth	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b47c:	e023      	b.n	800b4c6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b47e:	f7f9 f91d 	bl	80046bc <HAL_GetTick>
 800b482:	4602      	mov	r2, r0
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d803      	bhi.n	800b496 <HAL_SPI_Transmit+0x23a>
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b494:	d102      	bne.n	800b49c <HAL_SPI_Transmit+0x240>
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d114      	bne.n	800b4c6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 fe77 	bl	800c190 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e0b3      	b.n	800b62e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d19b      	bne.n	800b40a <HAL_SPI_Transmit+0x1ae>
 800b4d2:	e086      	b.n	800b5e2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	f003 0302 	and.w	r3, r3, #2
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d154      	bne.n	800b58c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	d918      	bls.n	800b520 <HAL_SPI_Transmit+0x2c4>
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4f2:	2b40      	cmp	r3, #64	@ 0x40
 800b4f4:	d914      	bls.n	800b520 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6812      	ldr	r2, [r2, #0]
 800b500:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b506:	1d1a      	adds	r2, r3, #4
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b512:	b29b      	uxth	r3, r3
 800b514:	3b04      	subs	r3, #4
 800b516:	b29a      	uxth	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b51e:	e059      	b.n	800b5d4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b526:	b29b      	uxth	r3, r3
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d917      	bls.n	800b55c <HAL_SPI_Transmit+0x300>
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b530:	2b00      	cmp	r3, #0
 800b532:	d013      	beq.n	800b55c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b538:	881a      	ldrh	r2, [r3, #0]
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b542:	1c9a      	adds	r2, r3, #2
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b54e:	b29b      	uxth	r3, r3
 800b550:	3b02      	subs	r3, #2
 800b552:	b29a      	uxth	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b55a:	e03b      	b.n	800b5d4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3320      	adds	r3, #32
 800b566:	7812      	ldrb	r2, [r2, #0]
 800b568:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	3b01      	subs	r3, #1
 800b57e:	b29a      	uxth	r2, r3
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b586:	e025      	b.n	800b5d4 <HAL_SPI_Transmit+0x378>
 800b588:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b58c:	f7f9 f896 	bl	80046bc <HAL_GetTick>
 800b590:	4602      	mov	r2, r0
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d803      	bhi.n	800b5a4 <HAL_SPI_Transmit+0x348>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a2:	d102      	bne.n	800b5aa <HAL_SPI_Transmit+0x34e>
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d114      	bne.n	800b5d4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f000 fdf0 	bl	800c190 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	e02c      	b.n	800b62e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f47f af79 	bne.w	800b4d4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2108      	movs	r1, #8
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f000 fe6f 	bl	800c2d0 <SPI_WaitOnFlagUntilTimeout>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d007      	beq.n	800b608 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b5fe:	f043 0220 	orr.w	r2, r3, #32
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f000 fdc1 	bl	800c190 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2201      	movs	r2, #1
 800b612:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	e000      	b.n	800b62e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b62c:	2300      	movs	r3, #0
  }
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3718      	adds	r7, #24
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop

0800b638 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b088      	sub	sp, #32
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	603b      	str	r3, [r7, #0]
 800b644:	4613      	mov	r3, r2
 800b646:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b64c:	095b      	lsrs	r3, r3, #5
 800b64e:	b29b      	uxth	r3, r3
 800b650:	3301      	adds	r3, #1
 800b652:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3330      	adds	r3, #48	@ 0x30
 800b65a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b65c:	f7f9 f82e 	bl	80046bc <HAL_GetTick>
 800b660:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d001      	beq.n	800b672 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800b66e:	2302      	movs	r3, #2
 800b670:	e250      	b.n	800bb14 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d002      	beq.n	800b67e <HAL_SPI_Receive+0x46>
 800b678:	88fb      	ldrh	r3, [r7, #6]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e248      	b.n	800bb14 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d101      	bne.n	800b690 <HAL_SPI_Receive+0x58>
 800b68c:	2302      	movs	r3, #2
 800b68e:	e241      	b.n	800bb14 <HAL_SPI_Receive+0x4dc>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2204      	movs	r2, #4
 800b69c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	88fa      	ldrh	r2, [r7, #6]
 800b6b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	88fa      	ldrh	r2, [r7, #6]
 800b6ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b6e8:	d108      	bne.n	800b6fc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b6f8:	601a      	str	r2, [r3, #0]
 800b6fa:	e009      	b.n	800b710 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800b70e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	685a      	ldr	r2, [r3, #4]
 800b716:	4b95      	ldr	r3, [pc, #596]	@ (800b96c <HAL_SPI_Receive+0x334>)
 800b718:	4013      	ands	r3, r2
 800b71a:	88f9      	ldrh	r1, [r7, #6]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	6812      	ldr	r2, [r2, #0]
 800b720:	430b      	orrs	r3, r1
 800b722:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f042 0201 	orr.w	r2, r2, #1
 800b732:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b73c:	d107      	bne.n	800b74e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b74c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	2b0f      	cmp	r3, #15
 800b754:	d96c      	bls.n	800b830 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b756:	e064      	b.n	800b822 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	695b      	ldr	r3, [r3, #20]
 800b75e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	f003 0301 	and.w	r3, r3, #1
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d114      	bne.n	800b798 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b776:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b778:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b77e:	1d1a      	adds	r2, r3, #4
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	3b01      	subs	r3, #1
 800b78e:	b29a      	uxth	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b796:	e044      	b.n	800b822 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	8bfa      	ldrh	r2, [r7, #30]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d919      	bls.n	800b7da <HAL_SPI_Receive+0x1a2>
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d014      	beq.n	800b7da <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b7ba:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7c0:	1d1a      	adds	r2, r3, #4
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	b29a      	uxth	r2, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b7d8:	e023      	b.n	800b822 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7da:	f7f8 ff6f 	bl	80046bc <HAL_GetTick>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	683a      	ldr	r2, [r7, #0]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d803      	bhi.n	800b7f2 <HAL_SPI_Receive+0x1ba>
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f0:	d102      	bne.n	800b7f8 <HAL_SPI_Receive+0x1c0>
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d114      	bne.n	800b822 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f000 fcc9 	bl	800c190 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b804:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b81e:	2303      	movs	r3, #3
 800b820:	e178      	b.n	800bb14 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b828:	b29b      	uxth	r3, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d194      	bne.n	800b758 <HAL_SPI_Receive+0x120>
 800b82e:	e15e      	b.n	800baee <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	2b07      	cmp	r3, #7
 800b836:	f240 8153 	bls.w	800bae0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b83a:	e08f      	b.n	800b95c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d114      	bne.n	800b87c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b856:	69ba      	ldr	r2, [r7, #24]
 800b858:	8812      	ldrh	r2, [r2, #0]
 800b85a:	b292      	uxth	r2, r2
 800b85c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b862:	1c9a      	adds	r2, r3, #2
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b86e:	b29b      	uxth	r3, r3
 800b870:	3b01      	subs	r3, #1
 800b872:	b29a      	uxth	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b87a:	e06f      	b.n	800b95c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b882:	b29b      	uxth	r3, r3
 800b884:	8bfa      	ldrh	r2, [r7, #30]
 800b886:	429a      	cmp	r2, r3
 800b888:	d924      	bls.n	800b8d4 <HAL_SPI_Receive+0x29c>
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d01f      	beq.n	800b8d4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b898:	69ba      	ldr	r2, [r7, #24]
 800b89a:	8812      	ldrh	r2, [r2, #0]
 800b89c:	b292      	uxth	r2, r2
 800b89e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8a4:	1c9a      	adds	r2, r3, #2
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8ae:	69ba      	ldr	r2, [r7, #24]
 800b8b0:	8812      	ldrh	r2, [r2, #0]
 800b8b2:	b292      	uxth	r2, r2
 800b8b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8ba:	1c9a      	adds	r2, r3, #2
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	3b02      	subs	r3, #2
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b8d2:	e043      	b.n	800b95c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d119      	bne.n	800b914 <HAL_SPI_Receive+0x2dc>
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d014      	beq.n	800b914 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8ee:	69ba      	ldr	r2, [r7, #24]
 800b8f0:	8812      	ldrh	r2, [r2, #0]
 800b8f2:	b292      	uxth	r2, r2
 800b8f4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8fa:	1c9a      	adds	r2, r3, #2
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b906:	b29b      	uxth	r3, r3
 800b908:	3b01      	subs	r3, #1
 800b90a:	b29a      	uxth	r2, r3
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b912:	e023      	b.n	800b95c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b914:	f7f8 fed2 	bl	80046bc <HAL_GetTick>
 800b918:	4602      	mov	r2, r0
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	429a      	cmp	r2, r3
 800b922:	d803      	bhi.n	800b92c <HAL_SPI_Receive+0x2f4>
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92a:	d102      	bne.n	800b932 <HAL_SPI_Receive+0x2fa>
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d114      	bne.n	800b95c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f000 fc2c 	bl	800c190 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b93e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	e0db      	b.n	800bb14 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b962:	b29b      	uxth	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	f47f af69 	bne.w	800b83c <HAL_SPI_Receive+0x204>
 800b96a:	e0c0      	b.n	800baee <HAL_SPI_Receive+0x4b6>
 800b96c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	f003 0301 	and.w	r3, r3, #1
 800b982:	2b01      	cmp	r3, #1
 800b984:	d117      	bne.n	800b9b6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b992:	7812      	ldrb	r2, [r2, #0]
 800b994:	b2d2      	uxtb	r2, r2
 800b996:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b99c:	1c5a      	adds	r2, r3, #1
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	b29a      	uxth	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b9b4:	e094      	b.n	800bae0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	8bfa      	ldrh	r2, [r7, #30]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d946      	bls.n	800ba52 <HAL_SPI_Receive+0x41a>
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d041      	beq.n	800ba52 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9da:	7812      	ldrb	r2, [r2, #0]
 800b9dc:	b2d2      	uxtb	r2, r2
 800b9de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9f6:	7812      	ldrb	r2, [r2, #0]
 800b9f8:	b2d2      	uxtb	r2, r2
 800b9fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba00:	1c5a      	adds	r2, r3, #1
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba12:	7812      	ldrb	r2, [r2, #0]
 800ba14:	b2d2      	uxtb	r2, r2
 800ba16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba1c:	1c5a      	adds	r2, r3, #1
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba2e:	7812      	ldrb	r2, [r2, #0]
 800ba30:	b2d2      	uxtb	r2, r2
 800ba32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	3b04      	subs	r3, #4
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ba50:	e046      	b.n	800bae0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d81c      	bhi.n	800ba98 <HAL_SPI_Receive+0x460>
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d017      	beq.n	800ba98 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba74:	7812      	ldrb	r2, [r2, #0]
 800ba76:	b2d2      	uxtb	r2, r2
 800ba78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba7e:	1c5a      	adds	r2, r3, #1
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ba96:	e023      	b.n	800bae0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba98:	f7f8 fe10 	bl	80046bc <HAL_GetTick>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d803      	bhi.n	800bab0 <HAL_SPI_Receive+0x478>
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baae:	d102      	bne.n	800bab6 <HAL_SPI_Receive+0x47e>
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d114      	bne.n	800bae0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f000 fb6a 	bl	800c190 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bac2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800badc:	2303      	movs	r3, #3
 800bade:	e019      	b.n	800bb14 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f47f af41 	bne.w	800b970 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 fb4e 	bl	800c190 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e000      	b.n	800bb14 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800bb12:	2300      	movs	r3, #0
  }
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3720      	adds	r7, #32
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08e      	sub	sp, #56	@ 0x38
 800bb20:	af02      	add	r7, sp, #8
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3320      	adds	r3, #32
 800bb30:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3330      	adds	r3, #48	@ 0x30
 800bb38:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb3e:	095b      	lsrs	r3, r3, #5
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	3301      	adds	r3, #1
 800bb44:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb46:	f7f8 fdb9 	bl	80046bc <HAL_GetTick>
 800bb4a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800bb4c:	887b      	ldrh	r3, [r7, #2]
 800bb4e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800bb50:	887b      	ldrh	r3, [r7, #2]
 800bb52:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d001      	beq.n	800bb64 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800bb60:	2302      	movs	r3, #2
 800bb62:	e310      	b.n	800c186 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d005      	beq.n	800bb76 <HAL_SPI_TransmitReceive+0x5a>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <HAL_SPI_TransmitReceive+0x5a>
 800bb70:	887b      	ldrh	r3, [r7, #2]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d101      	bne.n	800bb7a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e305      	b.n	800c186 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d101      	bne.n	800bb88 <HAL_SPI_TransmitReceive+0x6c>
 800bb84:	2302      	movs	r3, #2
 800bb86:	e2fe      	b.n	800c186 <HAL_SPI_TransmitReceive+0x66a>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2205      	movs	r2, #5
 800bb94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	887a      	ldrh	r2, [r7, #2]
 800bbaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	887a      	ldrh	r2, [r7, #2]
 800bbb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	887a      	ldrh	r2, [r7, #2]
 800bbc0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	887a      	ldrh	r2, [r7, #2]
 800bbc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68da      	ldr	r2, [r3, #12]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800bbe6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a70      	ldr	r2, [pc, #448]	@ (800bdb0 <HAL_SPI_TransmitReceive+0x294>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d009      	beq.n	800bc06 <HAL_SPI_TransmitReceive+0xea>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a6f      	ldr	r2, [pc, #444]	@ (800bdb4 <HAL_SPI_TransmitReceive+0x298>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d004      	beq.n	800bc06 <HAL_SPI_TransmitReceive+0xea>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a6d      	ldr	r2, [pc, #436]	@ (800bdb8 <HAL_SPI_TransmitReceive+0x29c>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d102      	bne.n	800bc0c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800bc06:	2310      	movs	r3, #16
 800bc08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc0a:	e001      	b.n	800bc10 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800bc0c:	2308      	movs	r3, #8
 800bc0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	685a      	ldr	r2, [r3, #4]
 800bc16:	4b69      	ldr	r3, [pc, #420]	@ (800bdbc <HAL_SPI_TransmitReceive+0x2a0>)
 800bc18:	4013      	ands	r3, r2
 800bc1a:	8879      	ldrh	r1, [r7, #2]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	6812      	ldr	r2, [r2, #0]
 800bc20:	430b      	orrs	r3, r1
 800bc22:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f042 0201 	orr.w	r2, r2, #1
 800bc32:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc3c:	d107      	bne.n	800bc4e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	2b0f      	cmp	r3, #15
 800bc54:	f240 80a2 	bls.w	800bd9c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800bc58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5a:	089b      	lsrs	r3, r3, #2
 800bc5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bc5e:	e094      	b.n	800bd8a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	695b      	ldr	r3, [r3, #20]
 800bc66:	f003 0302 	and.w	r3, r3, #2
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d120      	bne.n	800bcb0 <HAL_SPI_TransmitReceive+0x194>
 800bc6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d01d      	beq.n	800bcb0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bc74:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bc76:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d217      	bcs.n	800bcb0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6812      	ldr	r2, [r2, #0]
 800bc8a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc90:	1d1a      	adds	r2, r3, #4
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bcae:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	695b      	ldr	r3, [r3, #20]
 800bcb6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bcb8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d065      	beq.n	800bd8a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	f003 0301 	and.w	r3, r3, #1
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d118      	bne.n	800bcfe <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bcd6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcdc:	1d1a      	adds	r2, r3, #4
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	3b01      	subs	r3, #1
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcfa:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bcfc:	e045      	b.n	800bd8a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bcfe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bd00:	8bfb      	ldrh	r3, [r7, #30]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d21d      	bcs.n	800bd42 <HAL_SPI_TransmitReceive+0x226>
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d018      	beq.n	800bd42 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bd1a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd20:	1d1a      	adds	r2, r3, #4
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd3e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bd40:	e023      	b.n	800bd8a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd42:	f7f8 fcbb 	bl	80046bc <HAL_GetTick>
 800bd46:	4602      	mov	r2, r0
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d803      	bhi.n	800bd5a <HAL_SPI_TransmitReceive+0x23e>
 800bd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd58:	d102      	bne.n	800bd60 <HAL_SPI_TransmitReceive+0x244>
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d114      	bne.n	800bd8a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f000 fa15 	bl	800c190 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	e1fd      	b.n	800c186 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bd8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f47f af67 	bne.w	800bc60 <HAL_SPI_TransmitReceive+0x144>
 800bd92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f47f af63 	bne.w	800bc60 <HAL_SPI_TransmitReceive+0x144>
 800bd9a:	e1ce      	b.n	800c13a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	2b07      	cmp	r3, #7
 800bda2:	f240 81c2 	bls.w	800c12a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800bda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda8:	085b      	lsrs	r3, r3, #1
 800bdaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bdac:	e0c9      	b.n	800bf42 <HAL_SPI_TransmitReceive+0x426>
 800bdae:	bf00      	nop
 800bdb0:	40013000 	.word	0x40013000
 800bdb4:	40003800 	.word	0x40003800
 800bdb8:	40003c00 	.word	0x40003c00
 800bdbc:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	f003 0302 	and.w	r3, r3, #2
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d11f      	bne.n	800be0e <HAL_SPI_TransmitReceive+0x2f2>
 800bdce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d01c      	beq.n	800be0e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bdd4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bdd6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdda:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d216      	bcs.n	800be0e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bde4:	881a      	ldrh	r2, [r3, #0]
 800bde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdee:	1c9a      	adds	r2, r3, #2
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be0c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800be16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 8092 	beq.w	800bf42 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	695b      	ldr	r3, [r3, #20]
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d118      	bne.n	800be5e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be30:	6a3a      	ldr	r2, [r7, #32]
 800be32:	8812      	ldrh	r2, [r2, #0]
 800be34:	b292      	uxth	r2, r2
 800be36:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be3c:	1c9a      	adds	r2, r3, #2
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be48:	b29b      	uxth	r3, r3
 800be4a:	3b01      	subs	r3, #1
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be5a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800be5c:	e071      	b.n	800bf42 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800be5e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800be60:	8bfb      	ldrh	r3, [r7, #30]
 800be62:	429a      	cmp	r2, r3
 800be64:	d228      	bcs.n	800beb8 <HAL_SPI_TransmitReceive+0x39c>
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d023      	beq.n	800beb8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be74:	6a3a      	ldr	r2, [r7, #32]
 800be76:	8812      	ldrh	r2, [r2, #0]
 800be78:	b292      	uxth	r2, r2
 800be7a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be80:	1c9a      	adds	r2, r3, #2
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be8a:	6a3a      	ldr	r2, [r7, #32]
 800be8c:	8812      	ldrh	r2, [r2, #0]
 800be8e:	b292      	uxth	r2, r2
 800be90:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be96:	1c9a      	adds	r2, r3, #2
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	3b02      	subs	r3, #2
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800beb4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800beb6:	e044      	b.n	800bf42 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800beb8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d11d      	bne.n	800befa <HAL_SPI_TransmitReceive+0x3de>
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d018      	beq.n	800befa <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800becc:	6a3a      	ldr	r2, [r7, #32]
 800bece:	8812      	ldrh	r2, [r2, #0]
 800bed0:	b292      	uxth	r2, r2
 800bed2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bed8:	1c9a      	adds	r2, r3, #2
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	3b01      	subs	r3, #1
 800bee8:	b29a      	uxth	r2, r3
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bef6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bef8:	e023      	b.n	800bf42 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800befa:	f7f8 fbdf 	bl	80046bc <HAL_GetTick>
 800befe:	4602      	mov	r2, r0
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d803      	bhi.n	800bf12 <HAL_SPI_TransmitReceive+0x3f6>
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf10:	d102      	bne.n	800bf18 <HAL_SPI_TransmitReceive+0x3fc>
 800bf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d114      	bne.n	800bf42 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 f939 	bl	800c190 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2201      	movs	r2, #1
 800bf32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	e121      	b.n	800c186 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f47f af3b 	bne.w	800bdc0 <HAL_SPI_TransmitReceive+0x2a4>
 800bf4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f47f af37 	bne.w	800bdc0 <HAL_SPI_TransmitReceive+0x2a4>
 800bf52:	e0f2      	b.n	800c13a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	695b      	ldr	r3, [r3, #20]
 800bf5a:	f003 0302 	and.w	r3, r3, #2
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d121      	bne.n	800bfa6 <HAL_SPI_TransmitReceive+0x48a>
 800bf62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d01e      	beq.n	800bfa6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bf68:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bf6a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d218      	bcs.n	800bfa6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3320      	adds	r3, #32
 800bf7e:	7812      	ldrb	r2, [r2, #0]
 800bf80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf86:	1c5a      	adds	r2, r3, #1
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	3b01      	subs	r3, #1
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfa4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	695b      	ldr	r3, [r3, #20]
 800bfac:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bfae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f000 80ba 	beq.w	800c12a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	695b      	ldr	r3, [r3, #20]
 800bfbc:	f003 0301 	and.w	r3, r3, #1
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d11b      	bne.n	800bffc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfd0:	7812      	ldrb	r2, [r2, #0]
 800bfd2:	b2d2      	uxtb	r2, r2
 800bfd4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfda:	1c5a      	adds	r2, r3, #1
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bff8:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bffa:	e096      	b.n	800c12a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bffc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bffe:	8bfb      	ldrh	r3, [r7, #30]
 800c000:	429a      	cmp	r2, r3
 800c002:	d24a      	bcs.n	800c09a <HAL_SPI_TransmitReceive+0x57e>
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d045      	beq.n	800c09a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c01a:	7812      	ldrb	r2, [r2, #0]
 800c01c:	b2d2      	uxtb	r2, r2
 800c01e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c024:	1c5a      	adds	r2, r3, #1
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c036:	7812      	ldrb	r2, [r2, #0]
 800c038:	b2d2      	uxtb	r2, r2
 800c03a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c052:	7812      	ldrb	r2, [r2, #0]
 800c054:	b2d2      	uxtb	r2, r2
 800c056:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c05c:	1c5a      	adds	r2, r3, #1
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c06e:	7812      	ldrb	r2, [r2, #0]
 800c070:	b2d2      	uxtb	r2, r2
 800c072:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c078:	1c5a      	adds	r2, r3, #1
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c084:	b29b      	uxth	r3, r3
 800c086:	3b04      	subs	r3, #4
 800c088:	b29a      	uxth	r2, r3
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c096:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c098:	e047      	b.n	800c12a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c09a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c09c:	2b03      	cmp	r3, #3
 800c09e:	d820      	bhi.n	800c0e2 <HAL_SPI_TransmitReceive+0x5c6>
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d01b      	beq.n	800c0e2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0b6:	7812      	ldrb	r2, [r2, #0]
 800c0b8:	b2d2      	uxtb	r2, r2
 800c0ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0c0:	1c5a      	adds	r2, r3, #1
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0de:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c0e0:	e023      	b.n	800c12a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0e2:	f7f8 faeb 	bl	80046bc <HAL_GetTick>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	1ad3      	subs	r3, r2, r3
 800c0ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d803      	bhi.n	800c0fa <HAL_SPI_TransmitReceive+0x5de>
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f8:	d102      	bne.n	800c100 <HAL_SPI_TransmitReceive+0x5e4>
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d114      	bne.n	800c12a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f000 f845 	bl	800c190 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c10c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2201      	movs	r2, #1
 800c11a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800c126:	2303      	movs	r3, #3
 800c128:	e02d      	b.n	800c186 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c12a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f47f af11 	bne.w	800bf54 <HAL_SPI_TransmitReceive+0x438>
 800c132:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c134:	2b00      	cmp	r3, #0
 800c136:	f47f af0d 	bne.w	800bf54 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c140:	2200      	movs	r2, #0
 800c142:	2108      	movs	r1, #8
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f000 f8c3 	bl	800c2d0 <SPI_WaitOnFlagUntilTimeout>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d007      	beq.n	800c160 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c156:	f043 0220 	orr.w	r2, r3, #32
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f000 f815 	bl	800c190 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d001      	beq.n	800c184 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e000      	b.n	800c186 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800c184:	2300      	movs	r3, #0
  }
}
 800c186:	4618      	mov	r0, r3
 800c188:	3730      	adds	r7, #48	@ 0x30
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop

0800c190 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	699a      	ldr	r2, [r3, #24]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f042 0208 	orr.w	r2, r2, #8
 800c1ae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	699a      	ldr	r2, [r3, #24]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f042 0210 	orr.w	r2, r2, #16
 800c1be:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f022 0201 	bic.w	r2, r2, #1
 800c1ce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6919      	ldr	r1, [r3, #16]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	4b3c      	ldr	r3, [pc, #240]	@ (800c2cc <SPI_CloseTransfer+0x13c>)
 800c1dc:	400b      	ands	r3, r1
 800c1de:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	689a      	ldr	r2, [r3, #8]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c1ee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	d014      	beq.n	800c226 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f003 0320 	and.w	r3, r3, #32
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00f      	beq.n	800c226 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c20c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	699a      	ldr	r2, [r3, #24]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f042 0220 	orr.w	r2, r2, #32
 800c224:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b03      	cmp	r3, #3
 800c230:	d014      	beq.n	800c25c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00f      	beq.n	800c25c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c242:	f043 0204 	orr.w	r2, r3, #4
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	699a      	ldr	r2, [r3, #24]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c25a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00f      	beq.n	800c286 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c26c:	f043 0201 	orr.w	r2, r3, #1
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	699a      	ldr	r2, [r3, #24]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c284:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00f      	beq.n	800c2b0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c296:	f043 0208 	orr.w	r2, r3, #8
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	699a      	ldr	r2, [r3, #24]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c2ae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c2c0:	bf00      	nop
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	fffffc90 	.word	0xfffffc90

0800c2d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	603b      	str	r3, [r7, #0]
 800c2dc:	4613      	mov	r3, r2
 800c2de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c2e0:	e010      	b.n	800c304 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2e2:	f7f8 f9eb 	bl	80046bc <HAL_GetTick>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	683a      	ldr	r2, [r7, #0]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d803      	bhi.n	800c2fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f8:	d102      	bne.n	800c300 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c300:	2303      	movs	r3, #3
 800c302:	e00f      	b.n	800c324 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	695a      	ldr	r2, [r3, #20]
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	4013      	ands	r3, r2
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	429a      	cmp	r2, r3
 800c312:	bf0c      	ite	eq
 800c314:	2301      	moveq	r3, #1
 800c316:	2300      	movne	r3, #0
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	461a      	mov	r2, r3
 800c31c:	79fb      	ldrb	r3, [r7, #7]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d0df      	beq.n	800c2e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c338:	095b      	lsrs	r3, r3, #5
 800c33a:	3301      	adds	r3, #1
 800c33c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	3301      	adds	r3, #1
 800c344:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	3307      	adds	r3, #7
 800c34a:	08db      	lsrs	r3, r3, #3
 800c34c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	fb02 f303 	mul.w	r3, r2, r3
}
 800c356:	4618      	mov	r0, r3
 800c358:	3714      	adds	r7, #20
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr

0800c362 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b082      	sub	sp, #8
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d101      	bne.n	800c374 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c370:	2301      	movs	r3, #1
 800c372:	e049      	b.n	800c408 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d106      	bne.n	800c38e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7f7 fcc5 	bl	8003d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2202      	movs	r2, #2
 800c392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	3304      	adds	r3, #4
 800c39e:	4619      	mov	r1, r3
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	f000 fc57 	bl	800cc54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	2b01      	cmp	r3, #1
 800c422:	d001      	beq.n	800c428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c424:	2301      	movs	r3, #1
 800c426:	e054      	b.n	800c4d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2202      	movs	r2, #2
 800c42c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68da      	ldr	r2, [r3, #12]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f042 0201 	orr.w	r2, r2, #1
 800c43e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a26      	ldr	r2, [pc, #152]	@ (800c4e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d022      	beq.n	800c490 <HAL_TIM_Base_Start_IT+0x80>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c452:	d01d      	beq.n	800c490 <HAL_TIM_Base_Start_IT+0x80>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a22      	ldr	r2, [pc, #136]	@ (800c4e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d018      	beq.n	800c490 <HAL_TIM_Base_Start_IT+0x80>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a21      	ldr	r2, [pc, #132]	@ (800c4e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d013      	beq.n	800c490 <HAL_TIM_Base_Start_IT+0x80>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a1f      	ldr	r2, [pc, #124]	@ (800c4ec <HAL_TIM_Base_Start_IT+0xdc>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d00e      	beq.n	800c490 <HAL_TIM_Base_Start_IT+0x80>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a1e      	ldr	r2, [pc, #120]	@ (800c4f0 <HAL_TIM_Base_Start_IT+0xe0>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d009      	beq.n	800c490 <HAL_TIM_Base_Start_IT+0x80>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a1c      	ldr	r2, [pc, #112]	@ (800c4f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d004      	beq.n	800c490 <HAL_TIM_Base_Start_IT+0x80>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a1b      	ldr	r2, [pc, #108]	@ (800c4f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d115      	bne.n	800c4bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	689a      	ldr	r2, [r3, #8]
 800c496:	4b19      	ldr	r3, [pc, #100]	@ (800c4fc <HAL_TIM_Base_Start_IT+0xec>)
 800c498:	4013      	ands	r3, r2
 800c49a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2b06      	cmp	r3, #6
 800c4a0:	d015      	beq.n	800c4ce <HAL_TIM_Base_Start_IT+0xbe>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4a8:	d011      	beq.n	800c4ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f042 0201 	orr.w	r2, r2, #1
 800c4b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4ba:	e008      	b.n	800c4ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f042 0201 	orr.w	r2, r2, #1
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	e000      	b.n	800c4d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	40010000 	.word	0x40010000
 800c4e4:	40000400 	.word	0x40000400
 800c4e8:	40000800 	.word	0x40000800
 800c4ec:	40000c00 	.word	0x40000c00
 800c4f0:	40010400 	.word	0x40010400
 800c4f4:	40001800 	.word	0x40001800
 800c4f8:	40014000 	.word	0x40014000
 800c4fc:	00010007 	.word	0x00010007

0800c500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d101      	bne.n	800c512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	e049      	b.n	800c5a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d106      	bne.n	800c52c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7f7 fba8 	bl	8003c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2202      	movs	r2, #2
 800c530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3304      	adds	r3, #4
 800c53c:	4619      	mov	r1, r3
 800c53e:	4610      	mov	r0, r2
 800c540:	f000 fb88 	bl	800cc54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2201      	movs	r2, #1
 800c560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
	...

0800c5b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d109      	bne.n	800c5d4 <HAL_TIM_PWM_Start+0x24>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	bf14      	ite	ne
 800c5cc:	2301      	movne	r3, #1
 800c5ce:	2300      	moveq	r3, #0
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	e03c      	b.n	800c64e <HAL_TIM_PWM_Start+0x9e>
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	d109      	bne.n	800c5ee <HAL_TIM_PWM_Start+0x3e>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	bf14      	ite	ne
 800c5e6:	2301      	movne	r3, #1
 800c5e8:	2300      	moveq	r3, #0
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	e02f      	b.n	800c64e <HAL_TIM_PWM_Start+0x9e>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b08      	cmp	r3, #8
 800c5f2:	d109      	bne.n	800c608 <HAL_TIM_PWM_Start+0x58>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	bf14      	ite	ne
 800c600:	2301      	movne	r3, #1
 800c602:	2300      	moveq	r3, #0
 800c604:	b2db      	uxtb	r3, r3
 800c606:	e022      	b.n	800c64e <HAL_TIM_PWM_Start+0x9e>
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	2b0c      	cmp	r3, #12
 800c60c:	d109      	bne.n	800c622 <HAL_TIM_PWM_Start+0x72>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c614:	b2db      	uxtb	r3, r3
 800c616:	2b01      	cmp	r3, #1
 800c618:	bf14      	ite	ne
 800c61a:	2301      	movne	r3, #1
 800c61c:	2300      	moveq	r3, #0
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	e015      	b.n	800c64e <HAL_TIM_PWM_Start+0x9e>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b10      	cmp	r3, #16
 800c626:	d109      	bne.n	800c63c <HAL_TIM_PWM_Start+0x8c>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	2b01      	cmp	r3, #1
 800c632:	bf14      	ite	ne
 800c634:	2301      	movne	r3, #1
 800c636:	2300      	moveq	r3, #0
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	e008      	b.n	800c64e <HAL_TIM_PWM_Start+0x9e>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c642:	b2db      	uxtb	r3, r3
 800c644:	2b01      	cmp	r3, #1
 800c646:	bf14      	ite	ne
 800c648:	2301      	movne	r3, #1
 800c64a:	2300      	moveq	r3, #0
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	e0a1      	b.n	800c79a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d104      	bne.n	800c666 <HAL_TIM_PWM_Start+0xb6>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2202      	movs	r2, #2
 800c660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c664:	e023      	b.n	800c6ae <HAL_TIM_PWM_Start+0xfe>
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	2b04      	cmp	r3, #4
 800c66a:	d104      	bne.n	800c676 <HAL_TIM_PWM_Start+0xc6>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2202      	movs	r2, #2
 800c670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c674:	e01b      	b.n	800c6ae <HAL_TIM_PWM_Start+0xfe>
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2b08      	cmp	r3, #8
 800c67a:	d104      	bne.n	800c686 <HAL_TIM_PWM_Start+0xd6>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2202      	movs	r2, #2
 800c680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c684:	e013      	b.n	800c6ae <HAL_TIM_PWM_Start+0xfe>
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	2b0c      	cmp	r3, #12
 800c68a:	d104      	bne.n	800c696 <HAL_TIM_PWM_Start+0xe6>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2202      	movs	r2, #2
 800c690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c694:	e00b      	b.n	800c6ae <HAL_TIM_PWM_Start+0xfe>
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b10      	cmp	r3, #16
 800c69a:	d104      	bne.n	800c6a6 <HAL_TIM_PWM_Start+0xf6>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2202      	movs	r2, #2
 800c6a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6a4:	e003      	b.n	800c6ae <HAL_TIM_PWM_Start+0xfe>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2202      	movs	r2, #2
 800c6aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 fe48 	bl	800d34c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a38      	ldr	r2, [pc, #224]	@ (800c7a4 <HAL_TIM_PWM_Start+0x1f4>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d013      	beq.n	800c6ee <HAL_TIM_PWM_Start+0x13e>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a37      	ldr	r2, [pc, #220]	@ (800c7a8 <HAL_TIM_PWM_Start+0x1f8>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d00e      	beq.n	800c6ee <HAL_TIM_PWM_Start+0x13e>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a35      	ldr	r2, [pc, #212]	@ (800c7ac <HAL_TIM_PWM_Start+0x1fc>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d009      	beq.n	800c6ee <HAL_TIM_PWM_Start+0x13e>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a34      	ldr	r2, [pc, #208]	@ (800c7b0 <HAL_TIM_PWM_Start+0x200>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d004      	beq.n	800c6ee <HAL_TIM_PWM_Start+0x13e>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a32      	ldr	r2, [pc, #200]	@ (800c7b4 <HAL_TIM_PWM_Start+0x204>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d101      	bne.n	800c6f2 <HAL_TIM_PWM_Start+0x142>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e000      	b.n	800c6f4 <HAL_TIM_PWM_Start+0x144>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d007      	beq.n	800c708 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c706:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a25      	ldr	r2, [pc, #148]	@ (800c7a4 <HAL_TIM_PWM_Start+0x1f4>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d022      	beq.n	800c758 <HAL_TIM_PWM_Start+0x1a8>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c71a:	d01d      	beq.n	800c758 <HAL_TIM_PWM_Start+0x1a8>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a25      	ldr	r2, [pc, #148]	@ (800c7b8 <HAL_TIM_PWM_Start+0x208>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d018      	beq.n	800c758 <HAL_TIM_PWM_Start+0x1a8>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a24      	ldr	r2, [pc, #144]	@ (800c7bc <HAL_TIM_PWM_Start+0x20c>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d013      	beq.n	800c758 <HAL_TIM_PWM_Start+0x1a8>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a22      	ldr	r2, [pc, #136]	@ (800c7c0 <HAL_TIM_PWM_Start+0x210>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d00e      	beq.n	800c758 <HAL_TIM_PWM_Start+0x1a8>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a1a      	ldr	r2, [pc, #104]	@ (800c7a8 <HAL_TIM_PWM_Start+0x1f8>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d009      	beq.n	800c758 <HAL_TIM_PWM_Start+0x1a8>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a1e      	ldr	r2, [pc, #120]	@ (800c7c4 <HAL_TIM_PWM_Start+0x214>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d004      	beq.n	800c758 <HAL_TIM_PWM_Start+0x1a8>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a16      	ldr	r2, [pc, #88]	@ (800c7ac <HAL_TIM_PWM_Start+0x1fc>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d115      	bne.n	800c784 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	689a      	ldr	r2, [r3, #8]
 800c75e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7c8 <HAL_TIM_PWM_Start+0x218>)
 800c760:	4013      	ands	r3, r2
 800c762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b06      	cmp	r3, #6
 800c768:	d015      	beq.n	800c796 <HAL_TIM_PWM_Start+0x1e6>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c770:	d011      	beq.n	800c796 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f042 0201 	orr.w	r2, r2, #1
 800c780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c782:	e008      	b.n	800c796 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f042 0201 	orr.w	r2, r2, #1
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	e000      	b.n	800c798 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c796:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	40010000 	.word	0x40010000
 800c7a8:	40010400 	.word	0x40010400
 800c7ac:	40014000 	.word	0x40014000
 800c7b0:	40014400 	.word	0x40014400
 800c7b4:	40014800 	.word	0x40014800
 800c7b8:	40000400 	.word	0x40000400
 800c7bc:	40000800 	.word	0x40000800
 800c7c0:	40000c00 	.word	0x40000c00
 800c7c4:	40001800 	.word	0x40001800
 800c7c8:	00010007 	.word	0x00010007

0800c7cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	f003 0302 	and.w	r3, r3, #2
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d020      	beq.n	800c830 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f003 0302 	and.w	r3, r3, #2
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d01b      	beq.n	800c830 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f06f 0202 	mvn.w	r2, #2
 800c800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2201      	movs	r2, #1
 800c806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	f003 0303 	and.w	r3, r3, #3
 800c812:	2b00      	cmp	r3, #0
 800c814:	d003      	beq.n	800c81e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f9fe 	bl	800cc18 <HAL_TIM_IC_CaptureCallback>
 800c81c:	e005      	b.n	800c82a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f9f0 	bl	800cc04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 fa01 	bl	800cc2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	f003 0304 	and.w	r3, r3, #4
 800c836:	2b00      	cmp	r3, #0
 800c838:	d020      	beq.n	800c87c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f003 0304 	and.w	r3, r3, #4
 800c840:	2b00      	cmp	r3, #0
 800c842:	d01b      	beq.n	800c87c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f06f 0204 	mvn.w	r2, #4
 800c84c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2202      	movs	r2, #2
 800c852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	699b      	ldr	r3, [r3, #24]
 800c85a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d003      	beq.n	800c86a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f9d8 	bl	800cc18 <HAL_TIM_IC_CaptureCallback>
 800c868:	e005      	b.n	800c876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f9ca 	bl	800cc04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 f9db 	bl	800cc2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	f003 0308 	and.w	r3, r3, #8
 800c882:	2b00      	cmp	r3, #0
 800c884:	d020      	beq.n	800c8c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f003 0308 	and.w	r3, r3, #8
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d01b      	beq.n	800c8c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f06f 0208 	mvn.w	r2, #8
 800c898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2204      	movs	r2, #4
 800c89e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	f003 0303 	and.w	r3, r3, #3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f9b2 	bl	800cc18 <HAL_TIM_IC_CaptureCallback>
 800c8b4:	e005      	b.n	800c8c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 f9a4 	bl	800cc04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f9b5 	bl	800cc2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	f003 0310 	and.w	r3, r3, #16
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d020      	beq.n	800c914 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f003 0310 	and.w	r3, r3, #16
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d01b      	beq.n	800c914 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f06f 0210 	mvn.w	r2, #16
 800c8e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2208      	movs	r2, #8
 800c8ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	69db      	ldr	r3, [r3, #28]
 800c8f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d003      	beq.n	800c902 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f98c 	bl	800cc18 <HAL_TIM_IC_CaptureCallback>
 800c900:	e005      	b.n	800c90e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f97e 	bl	800cc04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f98f 	bl	800cc2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	f003 0301 	and.w	r3, r3, #1
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00c      	beq.n	800c938 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f003 0301 	and.w	r3, r3, #1
 800c924:	2b00      	cmp	r3, #0
 800c926:	d007      	beq.n	800c938 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f06f 0201 	mvn.w	r2, #1
 800c930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f7f6 fcda 	bl	80032ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d104      	bne.n	800c94c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00c      	beq.n	800c966 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c952:	2b00      	cmp	r3, #0
 800c954:	d007      	beq.n	800c966 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c95e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fdb1 	bl	800d4c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00c      	beq.n	800c98a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c976:	2b00      	cmp	r3, #0
 800c978:	d007      	beq.n	800c98a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fda9 	bl	800d4dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00c      	beq.n	800c9ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d007      	beq.n	800c9ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c9a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f949 	bl	800cc40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	f003 0320 	and.w	r3, r3, #32
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00c      	beq.n	800c9d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f003 0320 	and.w	r3, r3, #32
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d007      	beq.n	800c9d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f06f 0220 	mvn.w	r2, #32
 800c9ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 fd71 	bl	800d4b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
	...

0800c9dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d101      	bne.n	800c9fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c9f6:	2302      	movs	r3, #2
 800c9f8:	e0ff      	b.n	800cbfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b14      	cmp	r3, #20
 800ca06:	f200 80f0 	bhi.w	800cbea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ca0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ca10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ca0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca10:	0800ca65 	.word	0x0800ca65
 800ca14:	0800cbeb 	.word	0x0800cbeb
 800ca18:	0800cbeb 	.word	0x0800cbeb
 800ca1c:	0800cbeb 	.word	0x0800cbeb
 800ca20:	0800caa5 	.word	0x0800caa5
 800ca24:	0800cbeb 	.word	0x0800cbeb
 800ca28:	0800cbeb 	.word	0x0800cbeb
 800ca2c:	0800cbeb 	.word	0x0800cbeb
 800ca30:	0800cae7 	.word	0x0800cae7
 800ca34:	0800cbeb 	.word	0x0800cbeb
 800ca38:	0800cbeb 	.word	0x0800cbeb
 800ca3c:	0800cbeb 	.word	0x0800cbeb
 800ca40:	0800cb27 	.word	0x0800cb27
 800ca44:	0800cbeb 	.word	0x0800cbeb
 800ca48:	0800cbeb 	.word	0x0800cbeb
 800ca4c:	0800cbeb 	.word	0x0800cbeb
 800ca50:	0800cb69 	.word	0x0800cb69
 800ca54:	0800cbeb 	.word	0x0800cbeb
 800ca58:	0800cbeb 	.word	0x0800cbeb
 800ca5c:	0800cbeb 	.word	0x0800cbeb
 800ca60:	0800cba9 	.word	0x0800cba9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	68b9      	ldr	r1, [r7, #8]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 f998 	bl	800cda0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	699a      	ldr	r2, [r3, #24]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f042 0208 	orr.w	r2, r2, #8
 800ca7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	699a      	ldr	r2, [r3, #24]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f022 0204 	bic.w	r2, r2, #4
 800ca8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6999      	ldr	r1, [r3, #24]
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	691a      	ldr	r2, [r3, #16]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	430a      	orrs	r2, r1
 800caa0:	619a      	str	r2, [r3, #24]
      break;
 800caa2:	e0a5      	b.n	800cbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	68b9      	ldr	r1, [r7, #8]
 800caaa:	4618      	mov	r0, r3
 800caac:	f000 fa08 	bl	800cec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	699a      	ldr	r2, [r3, #24]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cabe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	699a      	ldr	r2, [r3, #24]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6999      	ldr	r1, [r3, #24]
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	021a      	lsls	r2, r3, #8
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	430a      	orrs	r2, r1
 800cae2:	619a      	str	r2, [r3, #24]
      break;
 800cae4:	e084      	b.n	800cbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	68b9      	ldr	r1, [r7, #8]
 800caec:	4618      	mov	r0, r3
 800caee:	f000 fa71 	bl	800cfd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	69da      	ldr	r2, [r3, #28]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f042 0208 	orr.w	r2, r2, #8
 800cb00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	69da      	ldr	r2, [r3, #28]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f022 0204 	bic.w	r2, r2, #4
 800cb10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	69d9      	ldr	r1, [r3, #28]
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	691a      	ldr	r2, [r3, #16]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	430a      	orrs	r2, r1
 800cb22:	61da      	str	r2, [r3, #28]
      break;
 800cb24:	e064      	b.n	800cbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68b9      	ldr	r1, [r7, #8]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 fad9 	bl	800d0e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	69da      	ldr	r2, [r3, #28]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	69da      	ldr	r2, [r3, #28]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cb50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	69d9      	ldr	r1, [r3, #28]
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	691b      	ldr	r3, [r3, #16]
 800cb5c:	021a      	lsls	r2, r3, #8
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	430a      	orrs	r2, r1
 800cb64:	61da      	str	r2, [r3, #28]
      break;
 800cb66:	e043      	b.n	800cbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68b9      	ldr	r1, [r7, #8]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f000 fb22 	bl	800d1b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f042 0208 	orr.w	r2, r2, #8
 800cb82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f022 0204 	bic.w	r2, r2, #4
 800cb92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	691a      	ldr	r2, [r3, #16]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	430a      	orrs	r2, r1
 800cba4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cba6:	e023      	b.n	800cbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68b9      	ldr	r1, [r7, #8]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 fb66 	bl	800d280 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cbc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cbd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	691b      	ldr	r3, [r3, #16]
 800cbde:	021a      	lsls	r2, r3, #8
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	430a      	orrs	r2, r1
 800cbe6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cbe8:	e002      	b.n	800cbf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	75fb      	strb	r3, [r7, #23]
      break;
 800cbee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cbf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3718      	adds	r7, #24
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop

0800cc04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc0c:	bf00      	nop
 800cc0e:	370c      	adds	r7, #12
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc34:	bf00      	nop
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc48:	bf00      	nop
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a46      	ldr	r2, [pc, #280]	@ (800cd80 <TIM_Base_SetConfig+0x12c>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d013      	beq.n	800cc94 <TIM_Base_SetConfig+0x40>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc72:	d00f      	beq.n	800cc94 <TIM_Base_SetConfig+0x40>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a43      	ldr	r2, [pc, #268]	@ (800cd84 <TIM_Base_SetConfig+0x130>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d00b      	beq.n	800cc94 <TIM_Base_SetConfig+0x40>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a42      	ldr	r2, [pc, #264]	@ (800cd88 <TIM_Base_SetConfig+0x134>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d007      	beq.n	800cc94 <TIM_Base_SetConfig+0x40>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a41      	ldr	r2, [pc, #260]	@ (800cd8c <TIM_Base_SetConfig+0x138>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d003      	beq.n	800cc94 <TIM_Base_SetConfig+0x40>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4a40      	ldr	r2, [pc, #256]	@ (800cd90 <TIM_Base_SetConfig+0x13c>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d108      	bne.n	800cca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4a35      	ldr	r2, [pc, #212]	@ (800cd80 <TIM_Base_SetConfig+0x12c>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d01f      	beq.n	800ccee <TIM_Base_SetConfig+0x9a>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccb4:	d01b      	beq.n	800ccee <TIM_Base_SetConfig+0x9a>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4a32      	ldr	r2, [pc, #200]	@ (800cd84 <TIM_Base_SetConfig+0x130>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d017      	beq.n	800ccee <TIM_Base_SetConfig+0x9a>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4a31      	ldr	r2, [pc, #196]	@ (800cd88 <TIM_Base_SetConfig+0x134>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d013      	beq.n	800ccee <TIM_Base_SetConfig+0x9a>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	4a30      	ldr	r2, [pc, #192]	@ (800cd8c <TIM_Base_SetConfig+0x138>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d00f      	beq.n	800ccee <TIM_Base_SetConfig+0x9a>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4a2f      	ldr	r2, [pc, #188]	@ (800cd90 <TIM_Base_SetConfig+0x13c>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d00b      	beq.n	800ccee <TIM_Base_SetConfig+0x9a>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4a2e      	ldr	r2, [pc, #184]	@ (800cd94 <TIM_Base_SetConfig+0x140>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d007      	beq.n	800ccee <TIM_Base_SetConfig+0x9a>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4a2d      	ldr	r2, [pc, #180]	@ (800cd98 <TIM_Base_SetConfig+0x144>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d003      	beq.n	800ccee <TIM_Base_SetConfig+0x9a>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4a2c      	ldr	r2, [pc, #176]	@ (800cd9c <TIM_Base_SetConfig+0x148>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d108      	bne.n	800cd00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ccf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	695b      	ldr	r3, [r3, #20]
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	689a      	ldr	r2, [r3, #8]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	681a      	ldr	r2, [r3, #0]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	4a16      	ldr	r2, [pc, #88]	@ (800cd80 <TIM_Base_SetConfig+0x12c>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d00f      	beq.n	800cd4c <TIM_Base_SetConfig+0xf8>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a18      	ldr	r2, [pc, #96]	@ (800cd90 <TIM_Base_SetConfig+0x13c>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d00b      	beq.n	800cd4c <TIM_Base_SetConfig+0xf8>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a17      	ldr	r2, [pc, #92]	@ (800cd94 <TIM_Base_SetConfig+0x140>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d007      	beq.n	800cd4c <TIM_Base_SetConfig+0xf8>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4a16      	ldr	r2, [pc, #88]	@ (800cd98 <TIM_Base_SetConfig+0x144>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d003      	beq.n	800cd4c <TIM_Base_SetConfig+0xf8>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4a15      	ldr	r2, [pc, #84]	@ (800cd9c <TIM_Base_SetConfig+0x148>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d103      	bne.n	800cd54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	691a      	ldr	r2, [r3, #16]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2201      	movs	r2, #1
 800cd58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	f003 0301 	and.w	r3, r3, #1
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d105      	bne.n	800cd72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	f023 0201 	bic.w	r2, r3, #1
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	611a      	str	r2, [r3, #16]
  }
}
 800cd72:	bf00      	nop
 800cd74:	3714      	adds	r7, #20
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	40010000 	.word	0x40010000
 800cd84:	40000400 	.word	0x40000400
 800cd88:	40000800 	.word	0x40000800
 800cd8c:	40000c00 	.word	0x40000c00
 800cd90:	40010400 	.word	0x40010400
 800cd94:	40014000 	.word	0x40014000
 800cd98:	40014400 	.word	0x40014400
 800cd9c:	40014800 	.word	0x40014800

0800cda0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b087      	sub	sp, #28
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6a1b      	ldr	r3, [r3, #32]
 800cdae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6a1b      	ldr	r3, [r3, #32]
 800cdb4:	f023 0201 	bic.w	r2, r3, #1
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	699b      	ldr	r3, [r3, #24]
 800cdc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	4b37      	ldr	r3, [pc, #220]	@ (800cea8 <TIM_OC1_SetConfig+0x108>)
 800cdcc:	4013      	ands	r3, r2
 800cdce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f023 0303 	bic.w	r3, r3, #3
 800cdd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	4313      	orrs	r3, r2
 800cde0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	f023 0302 	bic.w	r3, r3, #2
 800cde8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	697a      	ldr	r2, [r7, #20]
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4a2d      	ldr	r2, [pc, #180]	@ (800ceac <TIM_OC1_SetConfig+0x10c>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d00f      	beq.n	800ce1c <TIM_OC1_SetConfig+0x7c>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4a2c      	ldr	r2, [pc, #176]	@ (800ceb0 <TIM_OC1_SetConfig+0x110>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d00b      	beq.n	800ce1c <TIM_OC1_SetConfig+0x7c>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	4a2b      	ldr	r2, [pc, #172]	@ (800ceb4 <TIM_OC1_SetConfig+0x114>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d007      	beq.n	800ce1c <TIM_OC1_SetConfig+0x7c>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	4a2a      	ldr	r2, [pc, #168]	@ (800ceb8 <TIM_OC1_SetConfig+0x118>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d003      	beq.n	800ce1c <TIM_OC1_SetConfig+0x7c>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	4a29      	ldr	r2, [pc, #164]	@ (800cebc <TIM_OC1_SetConfig+0x11c>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d10c      	bne.n	800ce36 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	f023 0308 	bic.w	r3, r3, #8
 800ce22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	697a      	ldr	r2, [r7, #20]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f023 0304 	bic.w	r3, r3, #4
 800ce34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4a1c      	ldr	r2, [pc, #112]	@ (800ceac <TIM_OC1_SetConfig+0x10c>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d00f      	beq.n	800ce5e <TIM_OC1_SetConfig+0xbe>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	4a1b      	ldr	r2, [pc, #108]	@ (800ceb0 <TIM_OC1_SetConfig+0x110>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d00b      	beq.n	800ce5e <TIM_OC1_SetConfig+0xbe>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4a1a      	ldr	r2, [pc, #104]	@ (800ceb4 <TIM_OC1_SetConfig+0x114>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d007      	beq.n	800ce5e <TIM_OC1_SetConfig+0xbe>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a19      	ldr	r2, [pc, #100]	@ (800ceb8 <TIM_OC1_SetConfig+0x118>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d003      	beq.n	800ce5e <TIM_OC1_SetConfig+0xbe>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4a18      	ldr	r2, [pc, #96]	@ (800cebc <TIM_OC1_SetConfig+0x11c>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d111      	bne.n	800ce82 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ce6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	693a      	ldr	r2, [r7, #16]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	699b      	ldr	r3, [r3, #24]
 800ce7c:	693a      	ldr	r2, [r7, #16]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	693a      	ldr	r2, [r7, #16]
 800ce86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	685a      	ldr	r2, [r3, #4]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	697a      	ldr	r2, [r7, #20]
 800ce9a:	621a      	str	r2, [r3, #32]
}
 800ce9c:	bf00      	nop
 800ce9e:	371c      	adds	r7, #28
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	fffeff8f 	.word	0xfffeff8f
 800ceac:	40010000 	.word	0x40010000
 800ceb0:	40010400 	.word	0x40010400
 800ceb4:	40014000 	.word	0x40014000
 800ceb8:	40014400 	.word	0x40014400
 800cebc:	40014800 	.word	0x40014800

0800cec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b087      	sub	sp, #28
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6a1b      	ldr	r3, [r3, #32]
 800cece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6a1b      	ldr	r3, [r3, #32]
 800ced4:	f023 0210 	bic.w	r2, r3, #16
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	699b      	ldr	r3, [r3, #24]
 800cee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	4b34      	ldr	r3, [pc, #208]	@ (800cfbc <TIM_OC2_SetConfig+0xfc>)
 800ceec:	4013      	ands	r3, r2
 800ceee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	021b      	lsls	r3, r3, #8
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	4313      	orrs	r3, r2
 800cf02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	f023 0320 	bic.w	r3, r3, #32
 800cf0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	689b      	ldr	r3, [r3, #8]
 800cf10:	011b      	lsls	r3, r3, #4
 800cf12:	697a      	ldr	r2, [r7, #20]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a29      	ldr	r2, [pc, #164]	@ (800cfc0 <TIM_OC2_SetConfig+0x100>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d003      	beq.n	800cf28 <TIM_OC2_SetConfig+0x68>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a28      	ldr	r2, [pc, #160]	@ (800cfc4 <TIM_OC2_SetConfig+0x104>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d10d      	bne.n	800cf44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	011b      	lsls	r3, r3, #4
 800cf36:	697a      	ldr	r2, [r7, #20]
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	4a1e      	ldr	r2, [pc, #120]	@ (800cfc0 <TIM_OC2_SetConfig+0x100>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d00f      	beq.n	800cf6c <TIM_OC2_SetConfig+0xac>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	4a1d      	ldr	r2, [pc, #116]	@ (800cfc4 <TIM_OC2_SetConfig+0x104>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d00b      	beq.n	800cf6c <TIM_OC2_SetConfig+0xac>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	4a1c      	ldr	r2, [pc, #112]	@ (800cfc8 <TIM_OC2_SetConfig+0x108>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d007      	beq.n	800cf6c <TIM_OC2_SetConfig+0xac>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4a1b      	ldr	r2, [pc, #108]	@ (800cfcc <TIM_OC2_SetConfig+0x10c>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d003      	beq.n	800cf6c <TIM_OC2_SetConfig+0xac>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4a1a      	ldr	r2, [pc, #104]	@ (800cfd0 <TIM_OC2_SetConfig+0x110>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d113      	bne.n	800cf94 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cf72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cf7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	695b      	ldr	r3, [r3, #20]
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	699b      	ldr	r3, [r3, #24]
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	693a      	ldr	r2, [r7, #16]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	693a      	ldr	r2, [r7, #16]
 800cf98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	697a      	ldr	r2, [r7, #20]
 800cfac:	621a      	str	r2, [r3, #32]
}
 800cfae:	bf00      	nop
 800cfb0:	371c      	adds	r7, #28
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	feff8fff 	.word	0xfeff8fff
 800cfc0:	40010000 	.word	0x40010000
 800cfc4:	40010400 	.word	0x40010400
 800cfc8:	40014000 	.word	0x40014000
 800cfcc:	40014400 	.word	0x40014400
 800cfd0:	40014800 	.word	0x40014800

0800cfd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b087      	sub	sp, #28
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6a1b      	ldr	r3, [r3, #32]
 800cfe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a1b      	ldr	r3, [r3, #32]
 800cfe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	69db      	ldr	r3, [r3, #28]
 800cffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	4b33      	ldr	r3, [pc, #204]	@ (800d0cc <TIM_OC3_SetConfig+0xf8>)
 800d000:	4013      	ands	r3, r2
 800d002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f023 0303 	bic.w	r3, r3, #3
 800d00a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	4313      	orrs	r3, r2
 800d014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d01c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	021b      	lsls	r3, r3, #8
 800d024:	697a      	ldr	r2, [r7, #20]
 800d026:	4313      	orrs	r3, r2
 800d028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	4a28      	ldr	r2, [pc, #160]	@ (800d0d0 <TIM_OC3_SetConfig+0xfc>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d003      	beq.n	800d03a <TIM_OC3_SetConfig+0x66>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a27      	ldr	r2, [pc, #156]	@ (800d0d4 <TIM_OC3_SetConfig+0x100>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d10d      	bne.n	800d056 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	021b      	lsls	r3, r3, #8
 800d048:	697a      	ldr	r2, [r7, #20]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4a1d      	ldr	r2, [pc, #116]	@ (800d0d0 <TIM_OC3_SetConfig+0xfc>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d00f      	beq.n	800d07e <TIM_OC3_SetConfig+0xaa>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4a1c      	ldr	r2, [pc, #112]	@ (800d0d4 <TIM_OC3_SetConfig+0x100>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d00b      	beq.n	800d07e <TIM_OC3_SetConfig+0xaa>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4a1b      	ldr	r2, [pc, #108]	@ (800d0d8 <TIM_OC3_SetConfig+0x104>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d007      	beq.n	800d07e <TIM_OC3_SetConfig+0xaa>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4a1a      	ldr	r2, [pc, #104]	@ (800d0dc <TIM_OC3_SetConfig+0x108>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d003      	beq.n	800d07e <TIM_OC3_SetConfig+0xaa>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4a19      	ldr	r2, [pc, #100]	@ (800d0e0 <TIM_OC3_SetConfig+0x10c>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d113      	bne.n	800d0a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d08c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	695b      	ldr	r3, [r3, #20]
 800d092:	011b      	lsls	r3, r3, #4
 800d094:	693a      	ldr	r2, [r7, #16]
 800d096:	4313      	orrs	r3, r2
 800d098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	699b      	ldr	r3, [r3, #24]
 800d09e:	011b      	lsls	r3, r3, #4
 800d0a0:	693a      	ldr	r2, [r7, #16]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	693a      	ldr	r2, [r7, #16]
 800d0aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	697a      	ldr	r2, [r7, #20]
 800d0be:	621a      	str	r2, [r3, #32]
}
 800d0c0:	bf00      	nop
 800d0c2:	371c      	adds	r7, #28
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	fffeff8f 	.word	0xfffeff8f
 800d0d0:	40010000 	.word	0x40010000
 800d0d4:	40010400 	.word	0x40010400
 800d0d8:	40014000 	.word	0x40014000
 800d0dc:	40014400 	.word	0x40014400
 800d0e0:	40014800 	.word	0x40014800

0800d0e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b087      	sub	sp, #28
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6a1b      	ldr	r3, [r3, #32]
 800d0f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6a1b      	ldr	r3, [r3, #32]
 800d0f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	69db      	ldr	r3, [r3, #28]
 800d10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	4b24      	ldr	r3, [pc, #144]	@ (800d1a0 <TIM_OC4_SetConfig+0xbc>)
 800d110:	4013      	ands	r3, r2
 800d112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d11a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	021b      	lsls	r3, r3, #8
 800d122:	68fa      	ldr	r2, [r7, #12]
 800d124:	4313      	orrs	r3, r2
 800d126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d12e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	031b      	lsls	r3, r3, #12
 800d136:	693a      	ldr	r2, [r7, #16]
 800d138:	4313      	orrs	r3, r2
 800d13a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4a19      	ldr	r2, [pc, #100]	@ (800d1a4 <TIM_OC4_SetConfig+0xc0>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d00f      	beq.n	800d164 <TIM_OC4_SetConfig+0x80>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	4a18      	ldr	r2, [pc, #96]	@ (800d1a8 <TIM_OC4_SetConfig+0xc4>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d00b      	beq.n	800d164 <TIM_OC4_SetConfig+0x80>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4a17      	ldr	r2, [pc, #92]	@ (800d1ac <TIM_OC4_SetConfig+0xc8>)
 800d150:	4293      	cmp	r3, r2
 800d152:	d007      	beq.n	800d164 <TIM_OC4_SetConfig+0x80>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4a16      	ldr	r2, [pc, #88]	@ (800d1b0 <TIM_OC4_SetConfig+0xcc>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d003      	beq.n	800d164 <TIM_OC4_SetConfig+0x80>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	4a15      	ldr	r2, [pc, #84]	@ (800d1b4 <TIM_OC4_SetConfig+0xd0>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d109      	bne.n	800d178 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d16a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	695b      	ldr	r3, [r3, #20]
 800d170:	019b      	lsls	r3, r3, #6
 800d172:	697a      	ldr	r2, [r7, #20]
 800d174:	4313      	orrs	r3, r2
 800d176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	685a      	ldr	r2, [r3, #4]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	693a      	ldr	r2, [r7, #16]
 800d190:	621a      	str	r2, [r3, #32]
}
 800d192:	bf00      	nop
 800d194:	371c      	adds	r7, #28
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	feff8fff 	.word	0xfeff8fff
 800d1a4:	40010000 	.word	0x40010000
 800d1a8:	40010400 	.word	0x40010400
 800d1ac:	40014000 	.word	0x40014000
 800d1b0:	40014400 	.word	0x40014400
 800d1b4:	40014800 	.word	0x40014800

0800d1b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a1b      	ldr	r3, [r3, #32]
 800d1cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	4b21      	ldr	r3, [pc, #132]	@ (800d268 <TIM_OC5_SetConfig+0xb0>)
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d1f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	041b      	lsls	r3, r3, #16
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	4313      	orrs	r3, r2
 800d204:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4a18      	ldr	r2, [pc, #96]	@ (800d26c <TIM_OC5_SetConfig+0xb4>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d00f      	beq.n	800d22e <TIM_OC5_SetConfig+0x76>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4a17      	ldr	r2, [pc, #92]	@ (800d270 <TIM_OC5_SetConfig+0xb8>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d00b      	beq.n	800d22e <TIM_OC5_SetConfig+0x76>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	4a16      	ldr	r2, [pc, #88]	@ (800d274 <TIM_OC5_SetConfig+0xbc>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d007      	beq.n	800d22e <TIM_OC5_SetConfig+0x76>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4a15      	ldr	r2, [pc, #84]	@ (800d278 <TIM_OC5_SetConfig+0xc0>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d003      	beq.n	800d22e <TIM_OC5_SetConfig+0x76>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4a14      	ldr	r2, [pc, #80]	@ (800d27c <TIM_OC5_SetConfig+0xc4>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d109      	bne.n	800d242 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d234:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	695b      	ldr	r3, [r3, #20]
 800d23a:	021b      	lsls	r3, r3, #8
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	4313      	orrs	r3, r2
 800d240:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	68fa      	ldr	r2, [r7, #12]
 800d24c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	685a      	ldr	r2, [r3, #4]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	621a      	str	r2, [r3, #32]
}
 800d25c:	bf00      	nop
 800d25e:	371c      	adds	r7, #28
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	fffeff8f 	.word	0xfffeff8f
 800d26c:	40010000 	.word	0x40010000
 800d270:	40010400 	.word	0x40010400
 800d274:	40014000 	.word	0x40014000
 800d278:	40014400 	.word	0x40014400
 800d27c:	40014800 	.word	0x40014800

0800d280 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d280:	b480      	push	{r7}
 800d282:	b087      	sub	sp, #28
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6a1b      	ldr	r3, [r3, #32]
 800d28e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6a1b      	ldr	r3, [r3, #32]
 800d294:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	4b22      	ldr	r3, [pc, #136]	@ (800d334 <TIM_OC6_SetConfig+0xb4>)
 800d2ac:	4013      	ands	r3, r2
 800d2ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	021b      	lsls	r3, r3, #8
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d2c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	051b      	lsls	r3, r3, #20
 800d2ca:	693a      	ldr	r2, [r7, #16]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4a19      	ldr	r2, [pc, #100]	@ (800d338 <TIM_OC6_SetConfig+0xb8>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d00f      	beq.n	800d2f8 <TIM_OC6_SetConfig+0x78>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	4a18      	ldr	r2, [pc, #96]	@ (800d33c <TIM_OC6_SetConfig+0xbc>)
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d00b      	beq.n	800d2f8 <TIM_OC6_SetConfig+0x78>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	4a17      	ldr	r2, [pc, #92]	@ (800d340 <TIM_OC6_SetConfig+0xc0>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d007      	beq.n	800d2f8 <TIM_OC6_SetConfig+0x78>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4a16      	ldr	r2, [pc, #88]	@ (800d344 <TIM_OC6_SetConfig+0xc4>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d003      	beq.n	800d2f8 <TIM_OC6_SetConfig+0x78>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	4a15      	ldr	r2, [pc, #84]	@ (800d348 <TIM_OC6_SetConfig+0xc8>)
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d109      	bne.n	800d30c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d2fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	695b      	ldr	r3, [r3, #20]
 800d304:	029b      	lsls	r3, r3, #10
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	4313      	orrs	r3, r2
 800d30a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	697a      	ldr	r2, [r7, #20]
 800d310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	693a      	ldr	r2, [r7, #16]
 800d324:	621a      	str	r2, [r3, #32]
}
 800d326:	bf00      	nop
 800d328:	371c      	adds	r7, #28
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	feff8fff 	.word	0xfeff8fff
 800d338:	40010000 	.word	0x40010000
 800d33c:	40010400 	.word	0x40010400
 800d340:	40014000 	.word	0x40014000
 800d344:	40014400 	.word	0x40014400
 800d348:	40014800 	.word	0x40014800

0800d34c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b087      	sub	sp, #28
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	f003 031f 	and.w	r3, r3, #31
 800d35e:	2201      	movs	r2, #1
 800d360:	fa02 f303 	lsl.w	r3, r2, r3
 800d364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6a1a      	ldr	r2, [r3, #32]
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	43db      	mvns	r3, r3
 800d36e:	401a      	ands	r2, r3
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6a1a      	ldr	r2, [r3, #32]
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	f003 031f 	and.w	r3, r3, #31
 800d37e:	6879      	ldr	r1, [r7, #4]
 800d380:	fa01 f303 	lsl.w	r3, r1, r3
 800d384:	431a      	orrs	r2, r3
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	621a      	str	r2, [r3, #32]
}
 800d38a:	bf00      	nop
 800d38c:	371c      	adds	r7, #28
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr
	...

0800d398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d101      	bne.n	800d3b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	e06d      	b.n	800d48c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a30      	ldr	r2, [pc, #192]	@ (800d498 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d004      	beq.n	800d3e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a2f      	ldr	r2, [pc, #188]	@ (800d49c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d108      	bne.n	800d3f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d3ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	4313      	orrs	r3, r2
 800d406:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a20      	ldr	r2, [pc, #128]	@ (800d498 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d022      	beq.n	800d460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d422:	d01d      	beq.n	800d460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a1d      	ldr	r2, [pc, #116]	@ (800d4a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d018      	beq.n	800d460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4a1c      	ldr	r2, [pc, #112]	@ (800d4a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d013      	beq.n	800d460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4a1a      	ldr	r2, [pc, #104]	@ (800d4a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d00e      	beq.n	800d460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a15      	ldr	r2, [pc, #84]	@ (800d49c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d009      	beq.n	800d460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a16      	ldr	r2, [pc, #88]	@ (800d4ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d004      	beq.n	800d460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a15      	ldr	r2, [pc, #84]	@ (800d4b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d10c      	bne.n	800d47a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d466:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	68ba      	ldr	r2, [r7, #8]
 800d46e:	4313      	orrs	r3, r2
 800d470:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2201      	movs	r2, #1
 800d47e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3714      	adds	r7, #20
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr
 800d498:	40010000 	.word	0x40010000
 800d49c:	40010400 	.word	0x40010400
 800d4a0:	40000400 	.word	0x40000400
 800d4a4:	40000800 	.word	0x40000800
 800d4a8:	40000c00 	.word	0x40000c00
 800d4ac:	40001800 	.word	0x40001800
 800d4b0:	40014000 	.word	0x40014000

0800d4b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d101      	bne.n	800d502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4fe:	2301      	movs	r3, #1
 800d500:	e042      	b.n	800d588 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d106      	bne.n	800d51a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7f6 fe3b 	bl	8004190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2224      	movs	r2, #36	@ 0x24
 800d51e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f022 0201 	bic.w	r2, r2, #1
 800d530:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d536:	2b00      	cmp	r3, #0
 800d538:	d002      	beq.n	800d540 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f001 fc98 	bl	800ee70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 fe29 	bl	800e198 <UART_SetConfig>
 800d546:	4603      	mov	r3, r0
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d101      	bne.n	800d550 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d54c:	2301      	movs	r3, #1
 800d54e:	e01b      	b.n	800d588 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	685a      	ldr	r2, [r3, #4]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d55e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	689a      	ldr	r2, [r3, #8]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d56e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f042 0201 	orr.w	r2, r2, #1
 800d57e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f001 fd17 	bl	800efb4 <UART_CheckIdleState>
 800d586:	4603      	mov	r3, r0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b08a      	sub	sp, #40	@ 0x28
 800d594:	af02      	add	r7, sp, #8
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	603b      	str	r3, [r7, #0]
 800d59c:	4613      	mov	r3, r2
 800d59e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5a6:	2b20      	cmp	r3, #32
 800d5a8:	d17b      	bne.n	800d6a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <HAL_UART_Transmit+0x26>
 800d5b0:	88fb      	ldrh	r3, [r7, #6]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d101      	bne.n	800d5ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	e074      	b.n	800d6a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2221      	movs	r2, #33	@ 0x21
 800d5c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5ca:	f7f7 f877 	bl	80046bc <HAL_GetTick>
 800d5ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	88fa      	ldrh	r2, [r7, #6]
 800d5d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	88fa      	ldrh	r2, [r7, #6]
 800d5dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5e8:	d108      	bne.n	800d5fc <HAL_UART_Transmit+0x6c>
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	691b      	ldr	r3, [r3, #16]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d104      	bne.n	800d5fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	61bb      	str	r3, [r7, #24]
 800d5fa:	e003      	b.n	800d604 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d600:	2300      	movs	r3, #0
 800d602:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d604:	e030      	b.n	800d668 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	9300      	str	r3, [sp, #0]
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	2200      	movs	r2, #0
 800d60e:	2180      	movs	r1, #128	@ 0x80
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f001 fd79 	bl	800f108 <UART_WaitOnFlagUntilTimeout>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d005      	beq.n	800d628 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2220      	movs	r2, #32
 800d620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d624:	2303      	movs	r3, #3
 800d626:	e03d      	b.n	800d6a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10b      	bne.n	800d646 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	461a      	mov	r2, r3
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d63c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d63e:	69bb      	ldr	r3, [r7, #24]
 800d640:	3302      	adds	r3, #2
 800d642:	61bb      	str	r3, [r7, #24]
 800d644:	e007      	b.n	800d656 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	781a      	ldrb	r2, [r3, #0]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	3301      	adds	r3, #1
 800d654:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	3b01      	subs	r3, #1
 800d660:	b29a      	uxth	r2, r3
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d66e:	b29b      	uxth	r3, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	d1c8      	bne.n	800d606 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	2200      	movs	r2, #0
 800d67c:	2140      	movs	r1, #64	@ 0x40
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f001 fd42 	bl	800f108 <UART_WaitOnFlagUntilTimeout>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d005      	beq.n	800d696 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2220      	movs	r2, #32
 800d68e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d692:	2303      	movs	r3, #3
 800d694:	e006      	b.n	800d6a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2220      	movs	r2, #32
 800d69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	e000      	b.n	800d6a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d6a2:	2302      	movs	r3, #2
  }
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3720      	adds	r7, #32
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b08a      	sub	sp, #40	@ 0x28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d6c0:	2b20      	cmp	r3, #32
 800d6c2:	d137      	bne.n	800d734 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d002      	beq.n	800d6d0 <HAL_UART_Receive_DMA+0x24>
 800d6ca:	88fb      	ldrh	r3, [r7, #6]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d101      	bne.n	800d6d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	e030      	b.n	800d736 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4a18      	ldr	r2, [pc, #96]	@ (800d740 <HAL_UART_Receive_DMA+0x94>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d01f      	beq.n	800d724 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d018      	beq.n	800d724 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	e853 3f00 	ldrex	r3, [r3]
 800d6fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d706:	627b      	str	r3, [r7, #36]	@ 0x24
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	461a      	mov	r2, r3
 800d70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d710:	623b      	str	r3, [r7, #32]
 800d712:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d714:	69f9      	ldr	r1, [r7, #28]
 800d716:	6a3a      	ldr	r2, [r7, #32]
 800d718:	e841 2300 	strex	r3, r2, [r1]
 800d71c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1e6      	bne.n	800d6f2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d724:	88fb      	ldrh	r3, [r7, #6]
 800d726:	461a      	mov	r2, r3
 800d728:	68b9      	ldr	r1, [r7, #8]
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f001 fd5a 	bl	800f1e4 <UART_Start_Receive_DMA>
 800d730:	4603      	mov	r3, r0
 800d732:	e000      	b.n	800d736 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d734:	2302      	movs	r3, #2
  }
}
 800d736:	4618      	mov	r0, r3
 800d738:	3728      	adds	r7, #40	@ 0x28
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	58000c00 	.word	0x58000c00

0800d744 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b0a2      	sub	sp, #136	@ 0x88
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800d74c:	2301      	movs	r3, #1
 800d74e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d758:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d75a:	e853 3f00 	ldrex	r3, [r3]
 800d75e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d762:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800d766:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	461a      	mov	r2, r3
 800d770:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d774:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d776:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d778:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d77a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d77c:	e841 2300 	strex	r3, r2, [r1]
 800d780:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d782:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d784:	2b00      	cmp	r3, #0
 800d786:	d1e4      	bne.n	800d752 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	3308      	adds	r3, #8
 800d78e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d792:	e853 3f00 	ldrex	r3, [r3]
 800d796:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d79a:	4b85      	ldr	r3, [pc, #532]	@ (800d9b0 <HAL_UART_Abort_IT+0x26c>)
 800d79c:	4013      	ands	r3, r2
 800d79e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	3308      	adds	r3, #8
 800d7a6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d7a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d7aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d7ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7b0:	e841 2300 	strex	r3, r2, [r1]
 800d7b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d7b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1e5      	bne.n	800d788 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d118      	bne.n	800d7f6 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7cc:	e853 3f00 	ldrex	r3, [r3]
 800d7d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7d4:	f023 0310 	bic.w	r3, r3, #16
 800d7d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d7e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d7e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7ea:	e841 2300 	strex	r3, r2, [r1]
 800d7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1e6      	bne.n	800d7c4 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00f      	beq.n	800d81e <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	689b      	ldr	r3, [r3, #8]
 800d804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d808:	2b80      	cmp	r3, #128	@ 0x80
 800d80a:	d104      	bne.n	800d816 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d810:	4a68      	ldr	r2, [pc, #416]	@ (800d9b4 <HAL_UART_Abort_IT+0x270>)
 800d812:	651a      	str	r2, [r3, #80]	@ 0x50
 800d814:	e003      	b.n	800d81e <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d81a:	2200      	movs	r2, #0
 800d81c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d824:	2b00      	cmp	r3, #0
 800d826:	d011      	beq.n	800d84c <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d832:	2b40      	cmp	r3, #64	@ 0x40
 800d834:	d105      	bne.n	800d842 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d83c:	4a5e      	ldr	r2, [pc, #376]	@ (800d9b8 <HAL_UART_Abort_IT+0x274>)
 800d83e:	651a      	str	r2, [r3, #80]	@ 0x50
 800d840:	e004      	b.n	800d84c <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d848:	2200      	movs	r2, #0
 800d84a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d856:	2b80      	cmp	r3, #128	@ 0x80
 800d858:	d12d      	bne.n	800d8b6 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	3308      	adds	r3, #8
 800d860:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d864:	e853 3f00 	ldrex	r3, [r3]
 800d868:	623b      	str	r3, [r7, #32]
   return(result);
 800d86a:	6a3b      	ldr	r3, [r7, #32]
 800d86c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d870:	677b      	str	r3, [r7, #116]	@ 0x74
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	3308      	adds	r3, #8
 800d878:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800d87a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d87c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d882:	e841 2300 	strex	r3, r2, [r1]
 800d886:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d1e5      	bne.n	800d85a <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00f      	beq.n	800d8b6 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7f8 f9b8 	bl	8005c10 <HAL_DMA_Abort_IT>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d004      	beq.n	800d8b0 <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	651a      	str	r2, [r3, #80]	@ 0x50
 800d8ae:	e002      	b.n	800d8b6 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	689b      	ldr	r3, [r3, #8]
 800d8bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8c0:	2b40      	cmp	r3, #64	@ 0x40
 800d8c2:	d133      	bne.n	800d92c <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3308      	adds	r3, #8
 800d8ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	e853 3f00 	ldrex	r3, [r3]
 800d8d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8da:	673b      	str	r3, [r7, #112]	@ 0x70
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3308      	adds	r3, #8
 800d8e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d8e4:	61fa      	str	r2, [r7, #28]
 800d8e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e8:	69b9      	ldr	r1, [r7, #24]
 800d8ea:	69fa      	ldr	r2, [r7, #28]
 800d8ec:	e841 2300 	strex	r3, r2, [r1]
 800d8f0:	617b      	str	r3, [r7, #20]
   return(result);
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1e5      	bne.n	800d8c4 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d014      	beq.n	800d92c <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f8 f981 	bl	8005c10 <HAL_DMA_Abort_IT>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d008      	beq.n	800d926 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d91a:	2200      	movs	r2, #0
 800d91c:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800d91e:	2301      	movs	r3, #1
 800d920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d924:	e002      	b.n	800d92c <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800d926:	2300      	movs	r3, #0
 800d928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800d92c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d930:	2b01      	cmp	r3, #1
 800d932:	d138      	bne.n	800d9a6 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	220f      	movs	r2, #15
 800d95e:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d968:	d107      	bne.n	800d97a <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	699a      	ldr	r2, [r3, #24]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f042 0210 	orr.w	r2, r2, #16
 800d978:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	699a      	ldr	r2, [r3, #24]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f042 0208 	orr.w	r2, r2, #8
 800d988:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2220      	movs	r2, #32
 800d98e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2220      	movs	r2, #32
 800d996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 fbe3 	bl	800e16c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3788      	adds	r7, #136	@ 0x88
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	ef7ffffe 	.word	0xef7ffffe
 800d9b4:	0800f693 	.word	0x0800f693
 800d9b8:	0800f71f 	.word	0x0800f71f

0800d9bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b0ba      	sub	sp, #232	@ 0xe8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	69db      	ldr	r3, [r3, #28]
 800d9ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d9e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d9e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d9ea:	4013      	ands	r3, r2
 800d9ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d9f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d11b      	bne.n	800da30 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9fc:	f003 0320 	and.w	r3, r3, #32
 800da00:	2b00      	cmp	r3, #0
 800da02:	d015      	beq.n	800da30 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800da04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da08:	f003 0320 	and.w	r3, r3, #32
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d105      	bne.n	800da1c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800da10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d009      	beq.n	800da30 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da20:	2b00      	cmp	r3, #0
 800da22:	f000 8377 	beq.w	800e114 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	4798      	blx	r3
      }
      return;
 800da2e:	e371      	b.n	800e114 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800da30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800da34:	2b00      	cmp	r3, #0
 800da36:	f000 8123 	beq.w	800dc80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800da3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800da3e:	4b8d      	ldr	r3, [pc, #564]	@ (800dc74 <HAL_UART_IRQHandler+0x2b8>)
 800da40:	4013      	ands	r3, r2
 800da42:	2b00      	cmp	r3, #0
 800da44:	d106      	bne.n	800da54 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800da46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800da4a:	4b8b      	ldr	r3, [pc, #556]	@ (800dc78 <HAL_UART_IRQHandler+0x2bc>)
 800da4c:	4013      	ands	r3, r2
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f000 8116 	beq.w	800dc80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800da54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da58:	f003 0301 	and.w	r3, r3, #1
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d011      	beq.n	800da84 <HAL_UART_IRQHandler+0xc8>
 800da60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00b      	beq.n	800da84 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2201      	movs	r2, #1
 800da72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da7a:	f043 0201 	orr.w	r2, r3, #1
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da88:	f003 0302 	and.w	r3, r3, #2
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d011      	beq.n	800dab4 <HAL_UART_IRQHandler+0xf8>
 800da90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da94:	f003 0301 	and.w	r3, r3, #1
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d00b      	beq.n	800dab4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2202      	movs	r2, #2
 800daa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800daaa:	f043 0204 	orr.w	r2, r3, #4
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dab8:	f003 0304 	and.w	r3, r3, #4
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d011      	beq.n	800dae4 <HAL_UART_IRQHandler+0x128>
 800dac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dac4:	f003 0301 	and.w	r3, r3, #1
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00b      	beq.n	800dae4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2204      	movs	r2, #4
 800dad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dada:	f043 0202 	orr.w	r2, r3, #2
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dae8:	f003 0308 	and.w	r3, r3, #8
 800daec:	2b00      	cmp	r3, #0
 800daee:	d017      	beq.n	800db20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800daf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800daf4:	f003 0320 	and.w	r3, r3, #32
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d105      	bne.n	800db08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dafc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800db00:	4b5c      	ldr	r3, [pc, #368]	@ (800dc74 <HAL_UART_IRQHandler+0x2b8>)
 800db02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00b      	beq.n	800db20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2208      	movs	r2, #8
 800db0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db16:	f043 0208 	orr.w	r2, r3, #8
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800db20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d012      	beq.n	800db52 <HAL_UART_IRQHandler+0x196>
 800db2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00c      	beq.n	800db52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800db40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db48:	f043 0220 	orr.w	r2, r3, #32
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f000 82dd 	beq.w	800e118 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800db5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db62:	f003 0320 	and.w	r3, r3, #32
 800db66:	2b00      	cmp	r3, #0
 800db68:	d013      	beq.n	800db92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800db6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db6e:	f003 0320 	and.w	r3, r3, #32
 800db72:	2b00      	cmp	r3, #0
 800db74:	d105      	bne.n	800db82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800db76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d007      	beq.n	800db92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db86:	2b00      	cmp	r3, #0
 800db88:	d003      	beq.n	800db92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dba6:	2b40      	cmp	r3, #64	@ 0x40
 800dba8:	d005      	beq.n	800dbb6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dbaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dbae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d054      	beq.n	800dc60 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f001 fbfc 	bl	800f3b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbc6:	2b40      	cmp	r3, #64	@ 0x40
 800dbc8:	d146      	bne.n	800dc58 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	3308      	adds	r3, #8
 800dbd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dbd8:	e853 3f00 	ldrex	r3, [r3]
 800dbdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800dbe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dbe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	3308      	adds	r3, #8
 800dbf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dbf6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dbfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800dc02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dc06:	e841 2300 	strex	r3, r2, [r1]
 800dc0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800dc0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d1d9      	bne.n	800dbca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d017      	beq.n	800dc50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc26:	4a15      	ldr	r2, [pc, #84]	@ (800dc7c <HAL_UART_IRQHandler+0x2c0>)
 800dc28:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7f7 ffed 	bl	8005c10 <HAL_DMA_Abort_IT>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d019      	beq.n	800dc70 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800dc4a:	4610      	mov	r0, r2
 800dc4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc4e:	e00f      	b.n	800dc70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 fa81 	bl	800e158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc56:	e00b      	b.n	800dc70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 fa7d 	bl	800e158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc5e:	e007      	b.n	800dc70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fa79 	bl	800e158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800dc6e:	e253      	b.n	800e118 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc70:	bf00      	nop
    return;
 800dc72:	e251      	b.n	800e118 <HAL_UART_IRQHandler+0x75c>
 800dc74:	10000001 	.word	0x10000001
 800dc78:	04000120 	.word	0x04000120
 800dc7c:	0800f667 	.word	0x0800f667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	f040 81e7 	bne.w	800e058 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dc8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc8e:	f003 0310 	and.w	r3, r3, #16
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f000 81e0 	beq.w	800e058 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dc98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc9c:	f003 0310 	and.w	r3, r3, #16
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f000 81d9 	beq.w	800e058 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2210      	movs	r2, #16
 800dcac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcb8:	2b40      	cmp	r3, #64	@ 0x40
 800dcba:	f040 8151 	bne.w	800df60 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a96      	ldr	r2, [pc, #600]	@ (800df20 <HAL_UART_IRQHandler+0x564>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d068      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a93      	ldr	r2, [pc, #588]	@ (800df24 <HAL_UART_IRQHandler+0x568>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d061      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4a91      	ldr	r2, [pc, #580]	@ (800df28 <HAL_UART_IRQHandler+0x56c>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d05a      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a8e      	ldr	r2, [pc, #568]	@ (800df2c <HAL_UART_IRQHandler+0x570>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d053      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a8c      	ldr	r2, [pc, #560]	@ (800df30 <HAL_UART_IRQHandler+0x574>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d04c      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a89      	ldr	r2, [pc, #548]	@ (800df34 <HAL_UART_IRQHandler+0x578>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d045      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a87      	ldr	r2, [pc, #540]	@ (800df38 <HAL_UART_IRQHandler+0x57c>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d03e      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a84      	ldr	r2, [pc, #528]	@ (800df3c <HAL_UART_IRQHandler+0x580>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d037      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a82      	ldr	r2, [pc, #520]	@ (800df40 <HAL_UART_IRQHandler+0x584>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d030      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4a7f      	ldr	r2, [pc, #508]	@ (800df44 <HAL_UART_IRQHandler+0x588>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d029      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4a7d      	ldr	r2, [pc, #500]	@ (800df48 <HAL_UART_IRQHandler+0x58c>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d022      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a7a      	ldr	r2, [pc, #488]	@ (800df4c <HAL_UART_IRQHandler+0x590>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d01b      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a78      	ldr	r2, [pc, #480]	@ (800df50 <HAL_UART_IRQHandler+0x594>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d014      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a75      	ldr	r2, [pc, #468]	@ (800df54 <HAL_UART_IRQHandler+0x598>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d00d      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a73      	ldr	r2, [pc, #460]	@ (800df58 <HAL_UART_IRQHandler+0x59c>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d006      	beq.n	800dd9e <HAL_UART_IRQHandler+0x3e2>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4a70      	ldr	r2, [pc, #448]	@ (800df5c <HAL_UART_IRQHandler+0x5a0>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d106      	bne.n	800ddac <HAL_UART_IRQHandler+0x3f0>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	e005      	b.n	800ddb8 <HAL_UART_IRQHandler+0x3fc>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ddbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f000 81ab 	beq.w	800e11c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ddcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	f080 81a3 	bcs.w	800e11c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dddc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dde6:	69db      	ldr	r3, [r3, #28]
 800dde8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ddec:	f000 8087 	beq.w	800defe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ddfc:	e853 3f00 	ldrex	r3, [r3]
 800de00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800de04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800de08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	461a      	mov	r2, r3
 800de16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800de1e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800de26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800de2a:	e841 2300 	strex	r3, r2, [r1]
 800de2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800de32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1da      	bne.n	800ddf0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	3308      	adds	r3, #8
 800de40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800de44:	e853 3f00 	ldrex	r3, [r3]
 800de48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800de4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de4c:	f023 0301 	bic.w	r3, r3, #1
 800de50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	3308      	adds	r3, #8
 800de5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800de5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800de62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800de66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800de6a:	e841 2300 	strex	r3, r2, [r1]
 800de6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800de70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1e1      	bne.n	800de3a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	3308      	adds	r3, #8
 800de7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de80:	e853 3f00 	ldrex	r3, [r3]
 800de84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800de86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	3308      	adds	r3, #8
 800de96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800de9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800de9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dea0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dea2:	e841 2300 	strex	r3, r2, [r1]
 800dea6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800dea8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d1e3      	bne.n	800de76 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2220      	movs	r2, #32
 800deb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dec4:	e853 3f00 	ldrex	r3, [r3]
 800dec8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800deca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800decc:	f023 0310 	bic.w	r3, r3, #16
 800ded0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	461a      	mov	r2, r3
 800deda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dede:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dee0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dee4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dee6:	e841 2300 	strex	r3, r2, [r1]
 800deea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800deec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1e4      	bne.n	800debc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800def8:	4618      	mov	r0, r3
 800defa:	f7f7 fb6b 	bl	80055d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2202      	movs	r2, #2
 800df02:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df10:	b29b      	uxth	r3, r3
 800df12:	1ad3      	subs	r3, r2, r3
 800df14:	b29b      	uxth	r3, r3
 800df16:	4619      	mov	r1, r3
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f000 f931 	bl	800e180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df1e:	e0fd      	b.n	800e11c <HAL_UART_IRQHandler+0x760>
 800df20:	40020010 	.word	0x40020010
 800df24:	40020028 	.word	0x40020028
 800df28:	40020040 	.word	0x40020040
 800df2c:	40020058 	.word	0x40020058
 800df30:	40020070 	.word	0x40020070
 800df34:	40020088 	.word	0x40020088
 800df38:	400200a0 	.word	0x400200a0
 800df3c:	400200b8 	.word	0x400200b8
 800df40:	40020410 	.word	0x40020410
 800df44:	40020428 	.word	0x40020428
 800df48:	40020440 	.word	0x40020440
 800df4c:	40020458 	.word	0x40020458
 800df50:	40020470 	.word	0x40020470
 800df54:	40020488 	.word	0x40020488
 800df58:	400204a0 	.word	0x400204a0
 800df5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	f000 80cf 	beq.w	800e120 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800df82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800df86:	2b00      	cmp	r3, #0
 800df88:	f000 80ca 	beq.w	800e120 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df94:	e853 3f00 	ldrex	r3, [r3]
 800df98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dfa0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dfae:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfb0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfb6:	e841 2300 	strex	r3, r2, [r1]
 800dfba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dfbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1e4      	bne.n	800df8c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfcc:	e853 3f00 	ldrex	r3, [r3]
 800dfd0:	623b      	str	r3, [r7, #32]
   return(result);
 800dfd2:	6a3a      	ldr	r2, [r7, #32]
 800dfd4:	4b55      	ldr	r3, [pc, #340]	@ (800e12c <HAL_UART_IRQHandler+0x770>)
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dfe6:	633a      	str	r2, [r7, #48]	@ 0x30
 800dfe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dfec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfee:	e841 2300 	strex	r3, r2, [r1]
 800dff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1e3      	bne.n	800dfc2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2220      	movs	r2, #32
 800dffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2200      	movs	r2, #0
 800e006:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	e853 3f00 	ldrex	r3, [r3]
 800e01a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f023 0310 	bic.w	r3, r3, #16
 800e022:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	461a      	mov	r2, r3
 800e02c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e030:	61fb      	str	r3, [r7, #28]
 800e032:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e034:	69b9      	ldr	r1, [r7, #24]
 800e036:	69fa      	ldr	r2, [r7, #28]
 800e038:	e841 2300 	strex	r3, r2, [r1]
 800e03c:	617b      	str	r3, [r7, #20]
   return(result);
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d1e4      	bne.n	800e00e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2202      	movs	r2, #2
 800e048:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e04a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 f895 	bl	800e180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e056:	e063      	b.n	800e120 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e05c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00e      	beq.n	800e082 <HAL_UART_IRQHandler+0x6c6>
 800e064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d008      	beq.n	800e082 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f001 fbba 	bl	800f7f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e080:	e051      	b.n	800e126 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d014      	beq.n	800e0b8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e096:	2b00      	cmp	r3, #0
 800e098:	d105      	bne.n	800e0a6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e09a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e09e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d008      	beq.n	800e0b8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d03a      	beq.n	800e124 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	4798      	blx	r3
    }
    return;
 800e0b6:	e035      	b.n	800e124 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d009      	beq.n	800e0d8 <HAL_UART_IRQHandler+0x71c>
 800e0c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d003      	beq.n	800e0d8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f001 fb64 	bl	800f79e <UART_EndTransmit_IT>
    return;
 800e0d6:	e026      	b.n	800e126 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d009      	beq.n	800e0f8 <HAL_UART_IRQHandler+0x73c>
 800e0e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d003      	beq.n	800e0f8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f001 fb93 	bl	800f81c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e0f6:	e016      	b.n	800e126 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e100:	2b00      	cmp	r3, #0
 800e102:	d010      	beq.n	800e126 <HAL_UART_IRQHandler+0x76a>
 800e104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	da0c      	bge.n	800e126 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f001 fb7b 	bl	800f808 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e112:	e008      	b.n	800e126 <HAL_UART_IRQHandler+0x76a>
      return;
 800e114:	bf00      	nop
 800e116:	e006      	b.n	800e126 <HAL_UART_IRQHandler+0x76a>
    return;
 800e118:	bf00      	nop
 800e11a:	e004      	b.n	800e126 <HAL_UART_IRQHandler+0x76a>
      return;
 800e11c:	bf00      	nop
 800e11e:	e002      	b.n	800e126 <HAL_UART_IRQHandler+0x76a>
      return;
 800e120:	bf00      	nop
 800e122:	e000      	b.n	800e126 <HAL_UART_IRQHandler+0x76a>
    return;
 800e124:	bf00      	nop
  }
}
 800e126:	37e8      	adds	r7, #232	@ 0xe8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	effffffe 	.word	0xeffffffe

0800e130 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e138:	bf00      	nop
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e14c:	bf00      	nop
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e160:	bf00      	nop
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800e174:	bf00      	nop
 800e176:	370c      	adds	r7, #12
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	460b      	mov	r3, r1
 800e18a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e19c:	b092      	sub	sp, #72	@ 0x48
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	689a      	ldr	r2, [r3, #8]
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	691b      	ldr	r3, [r3, #16]
 800e1b0:	431a      	orrs	r2, r3
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	695b      	ldr	r3, [r3, #20]
 800e1b6:	431a      	orrs	r2, r3
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	69db      	ldr	r3, [r3, #28]
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	4bbe      	ldr	r3, [pc, #760]	@ (800e4c0 <UART_SetConfig+0x328>)
 800e1c8:	4013      	ands	r3, r2
 800e1ca:	697a      	ldr	r2, [r7, #20]
 800e1cc:	6812      	ldr	r2, [r2, #0]
 800e1ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e1d0:	430b      	orrs	r3, r1
 800e1d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	68da      	ldr	r2, [r3, #12]
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	430a      	orrs	r2, r1
 800e1e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	699b      	ldr	r3, [r3, #24]
 800e1ee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4ab3      	ldr	r2, [pc, #716]	@ (800e4c4 <UART_SetConfig+0x32c>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d004      	beq.n	800e204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	6a1b      	ldr	r3, [r3, #32]
 800e1fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e200:	4313      	orrs	r3, r2
 800e202:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	689a      	ldr	r2, [r3, #8]
 800e20a:	4baf      	ldr	r3, [pc, #700]	@ (800e4c8 <UART_SetConfig+0x330>)
 800e20c:	4013      	ands	r3, r2
 800e20e:	697a      	ldr	r2, [r7, #20]
 800e210:	6812      	ldr	r2, [r2, #0]
 800e212:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e214:	430b      	orrs	r3, r1
 800e216:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e21e:	f023 010f 	bic.w	r1, r3, #15
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	430a      	orrs	r2, r1
 800e22c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4aa6      	ldr	r2, [pc, #664]	@ (800e4cc <UART_SetConfig+0x334>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d177      	bne.n	800e328 <UART_SetConfig+0x190>
 800e238:	4ba5      	ldr	r3, [pc, #660]	@ (800e4d0 <UART_SetConfig+0x338>)
 800e23a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e23c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e240:	2b28      	cmp	r3, #40	@ 0x28
 800e242:	d86d      	bhi.n	800e320 <UART_SetConfig+0x188>
 800e244:	a201      	add	r2, pc, #4	@ (adr r2, 800e24c <UART_SetConfig+0xb4>)
 800e246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24a:	bf00      	nop
 800e24c:	0800e2f1 	.word	0x0800e2f1
 800e250:	0800e321 	.word	0x0800e321
 800e254:	0800e321 	.word	0x0800e321
 800e258:	0800e321 	.word	0x0800e321
 800e25c:	0800e321 	.word	0x0800e321
 800e260:	0800e321 	.word	0x0800e321
 800e264:	0800e321 	.word	0x0800e321
 800e268:	0800e321 	.word	0x0800e321
 800e26c:	0800e2f9 	.word	0x0800e2f9
 800e270:	0800e321 	.word	0x0800e321
 800e274:	0800e321 	.word	0x0800e321
 800e278:	0800e321 	.word	0x0800e321
 800e27c:	0800e321 	.word	0x0800e321
 800e280:	0800e321 	.word	0x0800e321
 800e284:	0800e321 	.word	0x0800e321
 800e288:	0800e321 	.word	0x0800e321
 800e28c:	0800e301 	.word	0x0800e301
 800e290:	0800e321 	.word	0x0800e321
 800e294:	0800e321 	.word	0x0800e321
 800e298:	0800e321 	.word	0x0800e321
 800e29c:	0800e321 	.word	0x0800e321
 800e2a0:	0800e321 	.word	0x0800e321
 800e2a4:	0800e321 	.word	0x0800e321
 800e2a8:	0800e321 	.word	0x0800e321
 800e2ac:	0800e309 	.word	0x0800e309
 800e2b0:	0800e321 	.word	0x0800e321
 800e2b4:	0800e321 	.word	0x0800e321
 800e2b8:	0800e321 	.word	0x0800e321
 800e2bc:	0800e321 	.word	0x0800e321
 800e2c0:	0800e321 	.word	0x0800e321
 800e2c4:	0800e321 	.word	0x0800e321
 800e2c8:	0800e321 	.word	0x0800e321
 800e2cc:	0800e311 	.word	0x0800e311
 800e2d0:	0800e321 	.word	0x0800e321
 800e2d4:	0800e321 	.word	0x0800e321
 800e2d8:	0800e321 	.word	0x0800e321
 800e2dc:	0800e321 	.word	0x0800e321
 800e2e0:	0800e321 	.word	0x0800e321
 800e2e4:	0800e321 	.word	0x0800e321
 800e2e8:	0800e321 	.word	0x0800e321
 800e2ec:	0800e319 	.word	0x0800e319
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2f6:	e326      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e2f8:	2304      	movs	r3, #4
 800e2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2fe:	e322      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e300:	2308      	movs	r3, #8
 800e302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e306:	e31e      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e308:	2310      	movs	r3, #16
 800e30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e30e:	e31a      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e310:	2320      	movs	r3, #32
 800e312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e316:	e316      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e318:	2340      	movs	r3, #64	@ 0x40
 800e31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e31e:	e312      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e320:	2380      	movs	r3, #128	@ 0x80
 800e322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e326:	e30e      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a69      	ldr	r2, [pc, #420]	@ (800e4d4 <UART_SetConfig+0x33c>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d130      	bne.n	800e394 <UART_SetConfig+0x1fc>
 800e332:	4b67      	ldr	r3, [pc, #412]	@ (800e4d0 <UART_SetConfig+0x338>)
 800e334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e336:	f003 0307 	and.w	r3, r3, #7
 800e33a:	2b05      	cmp	r3, #5
 800e33c:	d826      	bhi.n	800e38c <UART_SetConfig+0x1f4>
 800e33e:	a201      	add	r2, pc, #4	@ (adr r2, 800e344 <UART_SetConfig+0x1ac>)
 800e340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e344:	0800e35d 	.word	0x0800e35d
 800e348:	0800e365 	.word	0x0800e365
 800e34c:	0800e36d 	.word	0x0800e36d
 800e350:	0800e375 	.word	0x0800e375
 800e354:	0800e37d 	.word	0x0800e37d
 800e358:	0800e385 	.word	0x0800e385
 800e35c:	2300      	movs	r3, #0
 800e35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e362:	e2f0      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e364:	2304      	movs	r3, #4
 800e366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e36a:	e2ec      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e36c:	2308      	movs	r3, #8
 800e36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e372:	e2e8      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e374:	2310      	movs	r3, #16
 800e376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e37a:	e2e4      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e37c:	2320      	movs	r3, #32
 800e37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e382:	e2e0      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e384:	2340      	movs	r3, #64	@ 0x40
 800e386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e38a:	e2dc      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e38c:	2380      	movs	r3, #128	@ 0x80
 800e38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e392:	e2d8      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a4f      	ldr	r2, [pc, #316]	@ (800e4d8 <UART_SetConfig+0x340>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d130      	bne.n	800e400 <UART_SetConfig+0x268>
 800e39e:	4b4c      	ldr	r3, [pc, #304]	@ (800e4d0 <UART_SetConfig+0x338>)
 800e3a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3a2:	f003 0307 	and.w	r3, r3, #7
 800e3a6:	2b05      	cmp	r3, #5
 800e3a8:	d826      	bhi.n	800e3f8 <UART_SetConfig+0x260>
 800e3aa:	a201      	add	r2, pc, #4	@ (adr r2, 800e3b0 <UART_SetConfig+0x218>)
 800e3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b0:	0800e3c9 	.word	0x0800e3c9
 800e3b4:	0800e3d1 	.word	0x0800e3d1
 800e3b8:	0800e3d9 	.word	0x0800e3d9
 800e3bc:	0800e3e1 	.word	0x0800e3e1
 800e3c0:	0800e3e9 	.word	0x0800e3e9
 800e3c4:	0800e3f1 	.word	0x0800e3f1
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3ce:	e2ba      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e3d0:	2304      	movs	r3, #4
 800e3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3d6:	e2b6      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e3d8:	2308      	movs	r3, #8
 800e3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3de:	e2b2      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e3e0:	2310      	movs	r3, #16
 800e3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3e6:	e2ae      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e3e8:	2320      	movs	r3, #32
 800e3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3ee:	e2aa      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e3f0:	2340      	movs	r3, #64	@ 0x40
 800e3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3f6:	e2a6      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e3f8:	2380      	movs	r3, #128	@ 0x80
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3fe:	e2a2      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a35      	ldr	r2, [pc, #212]	@ (800e4dc <UART_SetConfig+0x344>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d130      	bne.n	800e46c <UART_SetConfig+0x2d4>
 800e40a:	4b31      	ldr	r3, [pc, #196]	@ (800e4d0 <UART_SetConfig+0x338>)
 800e40c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e40e:	f003 0307 	and.w	r3, r3, #7
 800e412:	2b05      	cmp	r3, #5
 800e414:	d826      	bhi.n	800e464 <UART_SetConfig+0x2cc>
 800e416:	a201      	add	r2, pc, #4	@ (adr r2, 800e41c <UART_SetConfig+0x284>)
 800e418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41c:	0800e435 	.word	0x0800e435
 800e420:	0800e43d 	.word	0x0800e43d
 800e424:	0800e445 	.word	0x0800e445
 800e428:	0800e44d 	.word	0x0800e44d
 800e42c:	0800e455 	.word	0x0800e455
 800e430:	0800e45d 	.word	0x0800e45d
 800e434:	2300      	movs	r3, #0
 800e436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e43a:	e284      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e43c:	2304      	movs	r3, #4
 800e43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e442:	e280      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e444:	2308      	movs	r3, #8
 800e446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e44a:	e27c      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e44c:	2310      	movs	r3, #16
 800e44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e452:	e278      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e454:	2320      	movs	r3, #32
 800e456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e45a:	e274      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e45c:	2340      	movs	r3, #64	@ 0x40
 800e45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e462:	e270      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e464:	2380      	movs	r3, #128	@ 0x80
 800e466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e46a:	e26c      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a1b      	ldr	r2, [pc, #108]	@ (800e4e0 <UART_SetConfig+0x348>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d142      	bne.n	800e4fc <UART_SetConfig+0x364>
 800e476:	4b16      	ldr	r3, [pc, #88]	@ (800e4d0 <UART_SetConfig+0x338>)
 800e478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e47a:	f003 0307 	and.w	r3, r3, #7
 800e47e:	2b05      	cmp	r3, #5
 800e480:	d838      	bhi.n	800e4f4 <UART_SetConfig+0x35c>
 800e482:	a201      	add	r2, pc, #4	@ (adr r2, 800e488 <UART_SetConfig+0x2f0>)
 800e484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e488:	0800e4a1 	.word	0x0800e4a1
 800e48c:	0800e4a9 	.word	0x0800e4a9
 800e490:	0800e4b1 	.word	0x0800e4b1
 800e494:	0800e4b9 	.word	0x0800e4b9
 800e498:	0800e4e5 	.word	0x0800e4e5
 800e49c:	0800e4ed 	.word	0x0800e4ed
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4a6:	e24e      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e4a8:	2304      	movs	r3, #4
 800e4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4ae:	e24a      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e4b0:	2308      	movs	r3, #8
 800e4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4b6:	e246      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e4b8:	2310      	movs	r3, #16
 800e4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4be:	e242      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e4c0:	cfff69f3 	.word	0xcfff69f3
 800e4c4:	58000c00 	.word	0x58000c00
 800e4c8:	11fff4ff 	.word	0x11fff4ff
 800e4cc:	40011000 	.word	0x40011000
 800e4d0:	58024400 	.word	0x58024400
 800e4d4:	40004400 	.word	0x40004400
 800e4d8:	40004800 	.word	0x40004800
 800e4dc:	40004c00 	.word	0x40004c00
 800e4e0:	40005000 	.word	0x40005000
 800e4e4:	2320      	movs	r3, #32
 800e4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4ea:	e22c      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e4ec:	2340      	movs	r3, #64	@ 0x40
 800e4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4f2:	e228      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e4f4:	2380      	movs	r3, #128	@ 0x80
 800e4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e4fa:	e224      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4ab1      	ldr	r2, [pc, #708]	@ (800e7c8 <UART_SetConfig+0x630>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d176      	bne.n	800e5f4 <UART_SetConfig+0x45c>
 800e506:	4bb1      	ldr	r3, [pc, #708]	@ (800e7cc <UART_SetConfig+0x634>)
 800e508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e50a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e50e:	2b28      	cmp	r3, #40	@ 0x28
 800e510:	d86c      	bhi.n	800e5ec <UART_SetConfig+0x454>
 800e512:	a201      	add	r2, pc, #4	@ (adr r2, 800e518 <UART_SetConfig+0x380>)
 800e514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e518:	0800e5bd 	.word	0x0800e5bd
 800e51c:	0800e5ed 	.word	0x0800e5ed
 800e520:	0800e5ed 	.word	0x0800e5ed
 800e524:	0800e5ed 	.word	0x0800e5ed
 800e528:	0800e5ed 	.word	0x0800e5ed
 800e52c:	0800e5ed 	.word	0x0800e5ed
 800e530:	0800e5ed 	.word	0x0800e5ed
 800e534:	0800e5ed 	.word	0x0800e5ed
 800e538:	0800e5c5 	.word	0x0800e5c5
 800e53c:	0800e5ed 	.word	0x0800e5ed
 800e540:	0800e5ed 	.word	0x0800e5ed
 800e544:	0800e5ed 	.word	0x0800e5ed
 800e548:	0800e5ed 	.word	0x0800e5ed
 800e54c:	0800e5ed 	.word	0x0800e5ed
 800e550:	0800e5ed 	.word	0x0800e5ed
 800e554:	0800e5ed 	.word	0x0800e5ed
 800e558:	0800e5cd 	.word	0x0800e5cd
 800e55c:	0800e5ed 	.word	0x0800e5ed
 800e560:	0800e5ed 	.word	0x0800e5ed
 800e564:	0800e5ed 	.word	0x0800e5ed
 800e568:	0800e5ed 	.word	0x0800e5ed
 800e56c:	0800e5ed 	.word	0x0800e5ed
 800e570:	0800e5ed 	.word	0x0800e5ed
 800e574:	0800e5ed 	.word	0x0800e5ed
 800e578:	0800e5d5 	.word	0x0800e5d5
 800e57c:	0800e5ed 	.word	0x0800e5ed
 800e580:	0800e5ed 	.word	0x0800e5ed
 800e584:	0800e5ed 	.word	0x0800e5ed
 800e588:	0800e5ed 	.word	0x0800e5ed
 800e58c:	0800e5ed 	.word	0x0800e5ed
 800e590:	0800e5ed 	.word	0x0800e5ed
 800e594:	0800e5ed 	.word	0x0800e5ed
 800e598:	0800e5dd 	.word	0x0800e5dd
 800e59c:	0800e5ed 	.word	0x0800e5ed
 800e5a0:	0800e5ed 	.word	0x0800e5ed
 800e5a4:	0800e5ed 	.word	0x0800e5ed
 800e5a8:	0800e5ed 	.word	0x0800e5ed
 800e5ac:	0800e5ed 	.word	0x0800e5ed
 800e5b0:	0800e5ed 	.word	0x0800e5ed
 800e5b4:	0800e5ed 	.word	0x0800e5ed
 800e5b8:	0800e5e5 	.word	0x0800e5e5
 800e5bc:	2301      	movs	r3, #1
 800e5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5c2:	e1c0      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e5c4:	2304      	movs	r3, #4
 800e5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5ca:	e1bc      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e5cc:	2308      	movs	r3, #8
 800e5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5d2:	e1b8      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e5d4:	2310      	movs	r3, #16
 800e5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5da:	e1b4      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e5dc:	2320      	movs	r3, #32
 800e5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5e2:	e1b0      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e5e4:	2340      	movs	r3, #64	@ 0x40
 800e5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5ea:	e1ac      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e5ec:	2380      	movs	r3, #128	@ 0x80
 800e5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e5f2:	e1a8      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a75      	ldr	r2, [pc, #468]	@ (800e7d0 <UART_SetConfig+0x638>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d130      	bne.n	800e660 <UART_SetConfig+0x4c8>
 800e5fe:	4b73      	ldr	r3, [pc, #460]	@ (800e7cc <UART_SetConfig+0x634>)
 800e600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e602:	f003 0307 	and.w	r3, r3, #7
 800e606:	2b05      	cmp	r3, #5
 800e608:	d826      	bhi.n	800e658 <UART_SetConfig+0x4c0>
 800e60a:	a201      	add	r2, pc, #4	@ (adr r2, 800e610 <UART_SetConfig+0x478>)
 800e60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e610:	0800e629 	.word	0x0800e629
 800e614:	0800e631 	.word	0x0800e631
 800e618:	0800e639 	.word	0x0800e639
 800e61c:	0800e641 	.word	0x0800e641
 800e620:	0800e649 	.word	0x0800e649
 800e624:	0800e651 	.word	0x0800e651
 800e628:	2300      	movs	r3, #0
 800e62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e62e:	e18a      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e630:	2304      	movs	r3, #4
 800e632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e636:	e186      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e638:	2308      	movs	r3, #8
 800e63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e63e:	e182      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e640:	2310      	movs	r3, #16
 800e642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e646:	e17e      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e648:	2320      	movs	r3, #32
 800e64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e64e:	e17a      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e650:	2340      	movs	r3, #64	@ 0x40
 800e652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e656:	e176      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e658:	2380      	movs	r3, #128	@ 0x80
 800e65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e65e:	e172      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	4a5b      	ldr	r2, [pc, #364]	@ (800e7d4 <UART_SetConfig+0x63c>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d130      	bne.n	800e6cc <UART_SetConfig+0x534>
 800e66a:	4b58      	ldr	r3, [pc, #352]	@ (800e7cc <UART_SetConfig+0x634>)
 800e66c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e66e:	f003 0307 	and.w	r3, r3, #7
 800e672:	2b05      	cmp	r3, #5
 800e674:	d826      	bhi.n	800e6c4 <UART_SetConfig+0x52c>
 800e676:	a201      	add	r2, pc, #4	@ (adr r2, 800e67c <UART_SetConfig+0x4e4>)
 800e678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e67c:	0800e695 	.word	0x0800e695
 800e680:	0800e69d 	.word	0x0800e69d
 800e684:	0800e6a5 	.word	0x0800e6a5
 800e688:	0800e6ad 	.word	0x0800e6ad
 800e68c:	0800e6b5 	.word	0x0800e6b5
 800e690:	0800e6bd 	.word	0x0800e6bd
 800e694:	2300      	movs	r3, #0
 800e696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e69a:	e154      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e69c:	2304      	movs	r3, #4
 800e69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6a2:	e150      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e6a4:	2308      	movs	r3, #8
 800e6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6aa:	e14c      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e6ac:	2310      	movs	r3, #16
 800e6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6b2:	e148      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e6b4:	2320      	movs	r3, #32
 800e6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ba:	e144      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e6bc:	2340      	movs	r3, #64	@ 0x40
 800e6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6c2:	e140      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e6c4:	2380      	movs	r3, #128	@ 0x80
 800e6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6ca:	e13c      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a41      	ldr	r2, [pc, #260]	@ (800e7d8 <UART_SetConfig+0x640>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	f040 8082 	bne.w	800e7dc <UART_SetConfig+0x644>
 800e6d8:	4b3c      	ldr	r3, [pc, #240]	@ (800e7cc <UART_SetConfig+0x634>)
 800e6da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e6e0:	2b28      	cmp	r3, #40	@ 0x28
 800e6e2:	d86d      	bhi.n	800e7c0 <UART_SetConfig+0x628>
 800e6e4:	a201      	add	r2, pc, #4	@ (adr r2, 800e6ec <UART_SetConfig+0x554>)
 800e6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ea:	bf00      	nop
 800e6ec:	0800e791 	.word	0x0800e791
 800e6f0:	0800e7c1 	.word	0x0800e7c1
 800e6f4:	0800e7c1 	.word	0x0800e7c1
 800e6f8:	0800e7c1 	.word	0x0800e7c1
 800e6fc:	0800e7c1 	.word	0x0800e7c1
 800e700:	0800e7c1 	.word	0x0800e7c1
 800e704:	0800e7c1 	.word	0x0800e7c1
 800e708:	0800e7c1 	.word	0x0800e7c1
 800e70c:	0800e799 	.word	0x0800e799
 800e710:	0800e7c1 	.word	0x0800e7c1
 800e714:	0800e7c1 	.word	0x0800e7c1
 800e718:	0800e7c1 	.word	0x0800e7c1
 800e71c:	0800e7c1 	.word	0x0800e7c1
 800e720:	0800e7c1 	.word	0x0800e7c1
 800e724:	0800e7c1 	.word	0x0800e7c1
 800e728:	0800e7c1 	.word	0x0800e7c1
 800e72c:	0800e7a1 	.word	0x0800e7a1
 800e730:	0800e7c1 	.word	0x0800e7c1
 800e734:	0800e7c1 	.word	0x0800e7c1
 800e738:	0800e7c1 	.word	0x0800e7c1
 800e73c:	0800e7c1 	.word	0x0800e7c1
 800e740:	0800e7c1 	.word	0x0800e7c1
 800e744:	0800e7c1 	.word	0x0800e7c1
 800e748:	0800e7c1 	.word	0x0800e7c1
 800e74c:	0800e7a9 	.word	0x0800e7a9
 800e750:	0800e7c1 	.word	0x0800e7c1
 800e754:	0800e7c1 	.word	0x0800e7c1
 800e758:	0800e7c1 	.word	0x0800e7c1
 800e75c:	0800e7c1 	.word	0x0800e7c1
 800e760:	0800e7c1 	.word	0x0800e7c1
 800e764:	0800e7c1 	.word	0x0800e7c1
 800e768:	0800e7c1 	.word	0x0800e7c1
 800e76c:	0800e7b1 	.word	0x0800e7b1
 800e770:	0800e7c1 	.word	0x0800e7c1
 800e774:	0800e7c1 	.word	0x0800e7c1
 800e778:	0800e7c1 	.word	0x0800e7c1
 800e77c:	0800e7c1 	.word	0x0800e7c1
 800e780:	0800e7c1 	.word	0x0800e7c1
 800e784:	0800e7c1 	.word	0x0800e7c1
 800e788:	0800e7c1 	.word	0x0800e7c1
 800e78c:	0800e7b9 	.word	0x0800e7b9
 800e790:	2301      	movs	r3, #1
 800e792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e796:	e0d6      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e798:	2304      	movs	r3, #4
 800e79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e79e:	e0d2      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e7a0:	2308      	movs	r3, #8
 800e7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7a6:	e0ce      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e7a8:	2310      	movs	r3, #16
 800e7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ae:	e0ca      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e7b0:	2320      	movs	r3, #32
 800e7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7b6:	e0c6      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e7b8:	2340      	movs	r3, #64	@ 0x40
 800e7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7be:	e0c2      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e7c0:	2380      	movs	r3, #128	@ 0x80
 800e7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7c6:	e0be      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e7c8:	40011400 	.word	0x40011400
 800e7cc:	58024400 	.word	0x58024400
 800e7d0:	40007800 	.word	0x40007800
 800e7d4:	40007c00 	.word	0x40007c00
 800e7d8:	40011800 	.word	0x40011800
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4aad      	ldr	r2, [pc, #692]	@ (800ea98 <UART_SetConfig+0x900>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d176      	bne.n	800e8d4 <UART_SetConfig+0x73c>
 800e7e6:	4bad      	ldr	r3, [pc, #692]	@ (800ea9c <UART_SetConfig+0x904>)
 800e7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e7ee:	2b28      	cmp	r3, #40	@ 0x28
 800e7f0:	d86c      	bhi.n	800e8cc <UART_SetConfig+0x734>
 800e7f2:	a201      	add	r2, pc, #4	@ (adr r2, 800e7f8 <UART_SetConfig+0x660>)
 800e7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f8:	0800e89d 	.word	0x0800e89d
 800e7fc:	0800e8cd 	.word	0x0800e8cd
 800e800:	0800e8cd 	.word	0x0800e8cd
 800e804:	0800e8cd 	.word	0x0800e8cd
 800e808:	0800e8cd 	.word	0x0800e8cd
 800e80c:	0800e8cd 	.word	0x0800e8cd
 800e810:	0800e8cd 	.word	0x0800e8cd
 800e814:	0800e8cd 	.word	0x0800e8cd
 800e818:	0800e8a5 	.word	0x0800e8a5
 800e81c:	0800e8cd 	.word	0x0800e8cd
 800e820:	0800e8cd 	.word	0x0800e8cd
 800e824:	0800e8cd 	.word	0x0800e8cd
 800e828:	0800e8cd 	.word	0x0800e8cd
 800e82c:	0800e8cd 	.word	0x0800e8cd
 800e830:	0800e8cd 	.word	0x0800e8cd
 800e834:	0800e8cd 	.word	0x0800e8cd
 800e838:	0800e8ad 	.word	0x0800e8ad
 800e83c:	0800e8cd 	.word	0x0800e8cd
 800e840:	0800e8cd 	.word	0x0800e8cd
 800e844:	0800e8cd 	.word	0x0800e8cd
 800e848:	0800e8cd 	.word	0x0800e8cd
 800e84c:	0800e8cd 	.word	0x0800e8cd
 800e850:	0800e8cd 	.word	0x0800e8cd
 800e854:	0800e8cd 	.word	0x0800e8cd
 800e858:	0800e8b5 	.word	0x0800e8b5
 800e85c:	0800e8cd 	.word	0x0800e8cd
 800e860:	0800e8cd 	.word	0x0800e8cd
 800e864:	0800e8cd 	.word	0x0800e8cd
 800e868:	0800e8cd 	.word	0x0800e8cd
 800e86c:	0800e8cd 	.word	0x0800e8cd
 800e870:	0800e8cd 	.word	0x0800e8cd
 800e874:	0800e8cd 	.word	0x0800e8cd
 800e878:	0800e8bd 	.word	0x0800e8bd
 800e87c:	0800e8cd 	.word	0x0800e8cd
 800e880:	0800e8cd 	.word	0x0800e8cd
 800e884:	0800e8cd 	.word	0x0800e8cd
 800e888:	0800e8cd 	.word	0x0800e8cd
 800e88c:	0800e8cd 	.word	0x0800e8cd
 800e890:	0800e8cd 	.word	0x0800e8cd
 800e894:	0800e8cd 	.word	0x0800e8cd
 800e898:	0800e8c5 	.word	0x0800e8c5
 800e89c:	2301      	movs	r3, #1
 800e89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8a2:	e050      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e8a4:	2304      	movs	r3, #4
 800e8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8aa:	e04c      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e8ac:	2308      	movs	r3, #8
 800e8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8b2:	e048      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e8b4:	2310      	movs	r3, #16
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ba:	e044      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e8bc:	2320      	movs	r3, #32
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8c2:	e040      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e8c4:	2340      	movs	r3, #64	@ 0x40
 800e8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ca:	e03c      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e8cc:	2380      	movs	r3, #128	@ 0x80
 800e8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8d2:	e038      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a71      	ldr	r2, [pc, #452]	@ (800eaa0 <UART_SetConfig+0x908>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d130      	bne.n	800e940 <UART_SetConfig+0x7a8>
 800e8de:	4b6f      	ldr	r3, [pc, #444]	@ (800ea9c <UART_SetConfig+0x904>)
 800e8e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8e2:	f003 0307 	and.w	r3, r3, #7
 800e8e6:	2b05      	cmp	r3, #5
 800e8e8:	d826      	bhi.n	800e938 <UART_SetConfig+0x7a0>
 800e8ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e8f0 <UART_SetConfig+0x758>)
 800e8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f0:	0800e909 	.word	0x0800e909
 800e8f4:	0800e911 	.word	0x0800e911
 800e8f8:	0800e919 	.word	0x0800e919
 800e8fc:	0800e921 	.word	0x0800e921
 800e900:	0800e929 	.word	0x0800e929
 800e904:	0800e931 	.word	0x0800e931
 800e908:	2302      	movs	r3, #2
 800e90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e90e:	e01a      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e910:	2304      	movs	r3, #4
 800e912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e916:	e016      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e918:	2308      	movs	r3, #8
 800e91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e91e:	e012      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e920:	2310      	movs	r3, #16
 800e922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e926:	e00e      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e928:	2320      	movs	r3, #32
 800e92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e92e:	e00a      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e930:	2340      	movs	r3, #64	@ 0x40
 800e932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e936:	e006      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e938:	2380      	movs	r3, #128	@ 0x80
 800e93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e93e:	e002      	b.n	800e946 <UART_SetConfig+0x7ae>
 800e940:	2380      	movs	r3, #128	@ 0x80
 800e942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a55      	ldr	r2, [pc, #340]	@ (800eaa0 <UART_SetConfig+0x908>)
 800e94c:	4293      	cmp	r3, r2
 800e94e:	f040 80f8 	bne.w	800eb42 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e952:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e956:	2b20      	cmp	r3, #32
 800e958:	dc46      	bgt.n	800e9e8 <UART_SetConfig+0x850>
 800e95a:	2b02      	cmp	r3, #2
 800e95c:	db75      	blt.n	800ea4a <UART_SetConfig+0x8b2>
 800e95e:	3b02      	subs	r3, #2
 800e960:	2b1e      	cmp	r3, #30
 800e962:	d872      	bhi.n	800ea4a <UART_SetConfig+0x8b2>
 800e964:	a201      	add	r2, pc, #4	@ (adr r2, 800e96c <UART_SetConfig+0x7d4>)
 800e966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e96a:	bf00      	nop
 800e96c:	0800e9ef 	.word	0x0800e9ef
 800e970:	0800ea4b 	.word	0x0800ea4b
 800e974:	0800e9f7 	.word	0x0800e9f7
 800e978:	0800ea4b 	.word	0x0800ea4b
 800e97c:	0800ea4b 	.word	0x0800ea4b
 800e980:	0800ea4b 	.word	0x0800ea4b
 800e984:	0800ea07 	.word	0x0800ea07
 800e988:	0800ea4b 	.word	0x0800ea4b
 800e98c:	0800ea4b 	.word	0x0800ea4b
 800e990:	0800ea4b 	.word	0x0800ea4b
 800e994:	0800ea4b 	.word	0x0800ea4b
 800e998:	0800ea4b 	.word	0x0800ea4b
 800e99c:	0800ea4b 	.word	0x0800ea4b
 800e9a0:	0800ea4b 	.word	0x0800ea4b
 800e9a4:	0800ea17 	.word	0x0800ea17
 800e9a8:	0800ea4b 	.word	0x0800ea4b
 800e9ac:	0800ea4b 	.word	0x0800ea4b
 800e9b0:	0800ea4b 	.word	0x0800ea4b
 800e9b4:	0800ea4b 	.word	0x0800ea4b
 800e9b8:	0800ea4b 	.word	0x0800ea4b
 800e9bc:	0800ea4b 	.word	0x0800ea4b
 800e9c0:	0800ea4b 	.word	0x0800ea4b
 800e9c4:	0800ea4b 	.word	0x0800ea4b
 800e9c8:	0800ea4b 	.word	0x0800ea4b
 800e9cc:	0800ea4b 	.word	0x0800ea4b
 800e9d0:	0800ea4b 	.word	0x0800ea4b
 800e9d4:	0800ea4b 	.word	0x0800ea4b
 800e9d8:	0800ea4b 	.word	0x0800ea4b
 800e9dc:	0800ea4b 	.word	0x0800ea4b
 800e9e0:	0800ea4b 	.word	0x0800ea4b
 800e9e4:	0800ea3d 	.word	0x0800ea3d
 800e9e8:	2b40      	cmp	r3, #64	@ 0x40
 800e9ea:	d02a      	beq.n	800ea42 <UART_SetConfig+0x8aa>
 800e9ec:	e02d      	b.n	800ea4a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e9ee:	f7fb feef 	bl	800a7d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e9f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e9f4:	e02f      	b.n	800ea56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fb fefe 	bl	800a7fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea04:	e027      	b.n	800ea56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea06:	f107 0318 	add.w	r3, r7, #24
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fc f84a 	bl	800aaa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea14:	e01f      	b.n	800ea56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea16:	4b21      	ldr	r3, [pc, #132]	@ (800ea9c <UART_SetConfig+0x904>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f003 0320 	and.w	r3, r3, #32
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d009      	beq.n	800ea36 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea22:	4b1e      	ldr	r3, [pc, #120]	@ (800ea9c <UART_SetConfig+0x904>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	08db      	lsrs	r3, r3, #3
 800ea28:	f003 0303 	and.w	r3, r3, #3
 800ea2c:	4a1d      	ldr	r2, [pc, #116]	@ (800eaa4 <UART_SetConfig+0x90c>)
 800ea2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ea32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea34:	e00f      	b.n	800ea56 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ea36:	4b1b      	ldr	r3, [pc, #108]	@ (800eaa4 <UART_SetConfig+0x90c>)
 800ea38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea3a:	e00c      	b.n	800ea56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea3c:	4b1a      	ldr	r3, [pc, #104]	@ (800eaa8 <UART_SetConfig+0x910>)
 800ea3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea40:	e009      	b.n	800ea56 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea48:	e005      	b.n	800ea56 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ea54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ea56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f000 81ee 	beq.w	800ee3a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea62:	4a12      	ldr	r2, [pc, #72]	@ (800eaac <UART_SetConfig+0x914>)
 800ea64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea68:	461a      	mov	r2, r3
 800ea6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea70:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	685a      	ldr	r2, [r3, #4]
 800ea76:	4613      	mov	r3, r2
 800ea78:	005b      	lsls	r3, r3, #1
 800ea7a:	4413      	add	r3, r2
 800ea7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d305      	bcc.n	800ea8e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d910      	bls.n	800eab0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ea94:	e1d1      	b.n	800ee3a <UART_SetConfig+0xca2>
 800ea96:	bf00      	nop
 800ea98:	40011c00 	.word	0x40011c00
 800ea9c:	58024400 	.word	0x58024400
 800eaa0:	58000c00 	.word	0x58000c00
 800eaa4:	03d09000 	.word	0x03d09000
 800eaa8:	003d0900 	.word	0x003d0900
 800eaac:	08014c40 	.word	0x08014c40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eab2:	2200      	movs	r2, #0
 800eab4:	60bb      	str	r3, [r7, #8]
 800eab6:	60fa      	str	r2, [r7, #12]
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eabc:	4ac0      	ldr	r2, [pc, #768]	@ (800edc0 <UART_SetConfig+0xc28>)
 800eabe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	2200      	movs	r2, #0
 800eac6:	603b      	str	r3, [r7, #0]
 800eac8:	607a      	str	r2, [r7, #4]
 800eaca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eace:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ead2:	f7f1 fc5d 	bl	8000390 <__aeabi_uldivmod>
 800ead6:	4602      	mov	r2, r0
 800ead8:	460b      	mov	r3, r1
 800eada:	4610      	mov	r0, r2
 800eadc:	4619      	mov	r1, r3
 800eade:	f04f 0200 	mov.w	r2, #0
 800eae2:	f04f 0300 	mov.w	r3, #0
 800eae6:	020b      	lsls	r3, r1, #8
 800eae8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eaec:	0202      	lsls	r2, r0, #8
 800eaee:	6979      	ldr	r1, [r7, #20]
 800eaf0:	6849      	ldr	r1, [r1, #4]
 800eaf2:	0849      	lsrs	r1, r1, #1
 800eaf4:	2000      	movs	r0, #0
 800eaf6:	460c      	mov	r4, r1
 800eaf8:	4605      	mov	r5, r0
 800eafa:	eb12 0804 	adds.w	r8, r2, r4
 800eafe:	eb43 0905 	adc.w	r9, r3, r5
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	685b      	ldr	r3, [r3, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	469a      	mov	sl, r3
 800eb0a:	4693      	mov	fp, r2
 800eb0c:	4652      	mov	r2, sl
 800eb0e:	465b      	mov	r3, fp
 800eb10:	4640      	mov	r0, r8
 800eb12:	4649      	mov	r1, r9
 800eb14:	f7f1 fc3c 	bl	8000390 <__aeabi_uldivmod>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eb26:	d308      	bcc.n	800eb3a <UART_SetConfig+0x9a2>
 800eb28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb2e:	d204      	bcs.n	800eb3a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb36:	60da      	str	r2, [r3, #12]
 800eb38:	e17f      	b.n	800ee3a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eb40:	e17b      	b.n	800ee3a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	69db      	ldr	r3, [r3, #28]
 800eb46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb4a:	f040 80bd 	bne.w	800ecc8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800eb4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800eb52:	2b20      	cmp	r3, #32
 800eb54:	dc48      	bgt.n	800ebe8 <UART_SetConfig+0xa50>
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	db7b      	blt.n	800ec52 <UART_SetConfig+0xaba>
 800eb5a:	2b20      	cmp	r3, #32
 800eb5c:	d879      	bhi.n	800ec52 <UART_SetConfig+0xaba>
 800eb5e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb64 <UART_SetConfig+0x9cc>)
 800eb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb64:	0800ebef 	.word	0x0800ebef
 800eb68:	0800ebf7 	.word	0x0800ebf7
 800eb6c:	0800ec53 	.word	0x0800ec53
 800eb70:	0800ec53 	.word	0x0800ec53
 800eb74:	0800ebff 	.word	0x0800ebff
 800eb78:	0800ec53 	.word	0x0800ec53
 800eb7c:	0800ec53 	.word	0x0800ec53
 800eb80:	0800ec53 	.word	0x0800ec53
 800eb84:	0800ec0f 	.word	0x0800ec0f
 800eb88:	0800ec53 	.word	0x0800ec53
 800eb8c:	0800ec53 	.word	0x0800ec53
 800eb90:	0800ec53 	.word	0x0800ec53
 800eb94:	0800ec53 	.word	0x0800ec53
 800eb98:	0800ec53 	.word	0x0800ec53
 800eb9c:	0800ec53 	.word	0x0800ec53
 800eba0:	0800ec53 	.word	0x0800ec53
 800eba4:	0800ec1f 	.word	0x0800ec1f
 800eba8:	0800ec53 	.word	0x0800ec53
 800ebac:	0800ec53 	.word	0x0800ec53
 800ebb0:	0800ec53 	.word	0x0800ec53
 800ebb4:	0800ec53 	.word	0x0800ec53
 800ebb8:	0800ec53 	.word	0x0800ec53
 800ebbc:	0800ec53 	.word	0x0800ec53
 800ebc0:	0800ec53 	.word	0x0800ec53
 800ebc4:	0800ec53 	.word	0x0800ec53
 800ebc8:	0800ec53 	.word	0x0800ec53
 800ebcc:	0800ec53 	.word	0x0800ec53
 800ebd0:	0800ec53 	.word	0x0800ec53
 800ebd4:	0800ec53 	.word	0x0800ec53
 800ebd8:	0800ec53 	.word	0x0800ec53
 800ebdc:	0800ec53 	.word	0x0800ec53
 800ebe0:	0800ec53 	.word	0x0800ec53
 800ebe4:	0800ec45 	.word	0x0800ec45
 800ebe8:	2b40      	cmp	r3, #64	@ 0x40
 800ebea:	d02e      	beq.n	800ec4a <UART_SetConfig+0xab2>
 800ebec:	e031      	b.n	800ec52 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebee:	f7fa fc05 	bl	80093fc <HAL_RCC_GetPCLK1Freq>
 800ebf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ebf4:	e033      	b.n	800ec5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebf6:	f7fa fc17 	bl	8009428 <HAL_RCC_GetPCLK2Freq>
 800ebfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ebfc:	e02f      	b.n	800ec5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7fb fdfa 	bl	800a7fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec0c:	e027      	b.n	800ec5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec0e:	f107 0318 	add.w	r3, r7, #24
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fb ff46 	bl	800aaa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec1c:	e01f      	b.n	800ec5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec1e:	4b69      	ldr	r3, [pc, #420]	@ (800edc4 <UART_SetConfig+0xc2c>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f003 0320 	and.w	r3, r3, #32
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d009      	beq.n	800ec3e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec2a:	4b66      	ldr	r3, [pc, #408]	@ (800edc4 <UART_SetConfig+0xc2c>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	08db      	lsrs	r3, r3, #3
 800ec30:	f003 0303 	and.w	r3, r3, #3
 800ec34:	4a64      	ldr	r2, [pc, #400]	@ (800edc8 <UART_SetConfig+0xc30>)
 800ec36:	fa22 f303 	lsr.w	r3, r2, r3
 800ec3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec3c:	e00f      	b.n	800ec5e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ec3e:	4b62      	ldr	r3, [pc, #392]	@ (800edc8 <UART_SetConfig+0xc30>)
 800ec40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec42:	e00c      	b.n	800ec5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec44:	4b61      	ldr	r3, [pc, #388]	@ (800edcc <UART_SetConfig+0xc34>)
 800ec46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec48:	e009      	b.n	800ec5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ec4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec50:	e005      	b.n	800ec5e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ec52:	2300      	movs	r3, #0
 800ec54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ec56:	2301      	movs	r3, #1
 800ec58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ec5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ec5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	f000 80ea 	beq.w	800ee3a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec6a:	4a55      	ldr	r2, [pc, #340]	@ (800edc0 <UART_SetConfig+0xc28>)
 800ec6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec70:	461a      	mov	r2, r3
 800ec72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec78:	005a      	lsls	r2, r3, #1
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	085b      	lsrs	r3, r3, #1
 800ec80:	441a      	add	r2, r3
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec8e:	2b0f      	cmp	r3, #15
 800ec90:	d916      	bls.n	800ecc0 <UART_SetConfig+0xb28>
 800ec92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec98:	d212      	bcs.n	800ecc0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	f023 030f 	bic.w	r3, r3, #15
 800eca2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eca6:	085b      	lsrs	r3, r3, #1
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	f003 0307 	and.w	r3, r3, #7
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ecbc:	60da      	str	r2, [r3, #12]
 800ecbe:	e0bc      	b.n	800ee3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ecc6:	e0b8      	b.n	800ee3a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ecc8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800eccc:	2b20      	cmp	r3, #32
 800ecce:	dc4b      	bgt.n	800ed68 <UART_SetConfig+0xbd0>
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f2c0 8087 	blt.w	800ede4 <UART_SetConfig+0xc4c>
 800ecd6:	2b20      	cmp	r3, #32
 800ecd8:	f200 8084 	bhi.w	800ede4 <UART_SetConfig+0xc4c>
 800ecdc:	a201      	add	r2, pc, #4	@ (adr r2, 800ece4 <UART_SetConfig+0xb4c>)
 800ecde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece2:	bf00      	nop
 800ece4:	0800ed6f 	.word	0x0800ed6f
 800ece8:	0800ed77 	.word	0x0800ed77
 800ecec:	0800ede5 	.word	0x0800ede5
 800ecf0:	0800ede5 	.word	0x0800ede5
 800ecf4:	0800ed7f 	.word	0x0800ed7f
 800ecf8:	0800ede5 	.word	0x0800ede5
 800ecfc:	0800ede5 	.word	0x0800ede5
 800ed00:	0800ede5 	.word	0x0800ede5
 800ed04:	0800ed8f 	.word	0x0800ed8f
 800ed08:	0800ede5 	.word	0x0800ede5
 800ed0c:	0800ede5 	.word	0x0800ede5
 800ed10:	0800ede5 	.word	0x0800ede5
 800ed14:	0800ede5 	.word	0x0800ede5
 800ed18:	0800ede5 	.word	0x0800ede5
 800ed1c:	0800ede5 	.word	0x0800ede5
 800ed20:	0800ede5 	.word	0x0800ede5
 800ed24:	0800ed9f 	.word	0x0800ed9f
 800ed28:	0800ede5 	.word	0x0800ede5
 800ed2c:	0800ede5 	.word	0x0800ede5
 800ed30:	0800ede5 	.word	0x0800ede5
 800ed34:	0800ede5 	.word	0x0800ede5
 800ed38:	0800ede5 	.word	0x0800ede5
 800ed3c:	0800ede5 	.word	0x0800ede5
 800ed40:	0800ede5 	.word	0x0800ede5
 800ed44:	0800ede5 	.word	0x0800ede5
 800ed48:	0800ede5 	.word	0x0800ede5
 800ed4c:	0800ede5 	.word	0x0800ede5
 800ed50:	0800ede5 	.word	0x0800ede5
 800ed54:	0800ede5 	.word	0x0800ede5
 800ed58:	0800ede5 	.word	0x0800ede5
 800ed5c:	0800ede5 	.word	0x0800ede5
 800ed60:	0800ede5 	.word	0x0800ede5
 800ed64:	0800edd7 	.word	0x0800edd7
 800ed68:	2b40      	cmp	r3, #64	@ 0x40
 800ed6a:	d037      	beq.n	800eddc <UART_SetConfig+0xc44>
 800ed6c:	e03a      	b.n	800ede4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed6e:	f7fa fb45 	bl	80093fc <HAL_RCC_GetPCLK1Freq>
 800ed72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ed74:	e03c      	b.n	800edf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed76:	f7fa fb57 	bl	8009428 <HAL_RCC_GetPCLK2Freq>
 800ed7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ed7c:	e038      	b.n	800edf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fb fd3a 	bl	800a7fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed8c:	e030      	b.n	800edf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed8e:	f107 0318 	add.w	r3, r7, #24
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fb fe86 	bl	800aaa4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed9c:	e028      	b.n	800edf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed9e:	4b09      	ldr	r3, [pc, #36]	@ (800edc4 <UART_SetConfig+0xc2c>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f003 0320 	and.w	r3, r3, #32
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d012      	beq.n	800edd0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800edaa:	4b06      	ldr	r3, [pc, #24]	@ (800edc4 <UART_SetConfig+0xc2c>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	08db      	lsrs	r3, r3, #3
 800edb0:	f003 0303 	and.w	r3, r3, #3
 800edb4:	4a04      	ldr	r2, [pc, #16]	@ (800edc8 <UART_SetConfig+0xc30>)
 800edb6:	fa22 f303 	lsr.w	r3, r2, r3
 800edba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edbc:	e018      	b.n	800edf0 <UART_SetConfig+0xc58>
 800edbe:	bf00      	nop
 800edc0:	08014c40 	.word	0x08014c40
 800edc4:	58024400 	.word	0x58024400
 800edc8:	03d09000 	.word	0x03d09000
 800edcc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800edd0:	4b24      	ldr	r3, [pc, #144]	@ (800ee64 <UART_SetConfig+0xccc>)
 800edd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edd4:	e00c      	b.n	800edf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800edd6:	4b24      	ldr	r3, [pc, #144]	@ (800ee68 <UART_SetConfig+0xcd0>)
 800edd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edda:	e009      	b.n	800edf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eddc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ede0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ede2:	e005      	b.n	800edf0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ede4:	2300      	movs	r3, #0
 800ede6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ede8:	2301      	movs	r3, #1
 800edea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800edee:	bf00      	nop
    }

    if (pclk != 0U)
 800edf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d021      	beq.n	800ee3a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edfa:	4a1c      	ldr	r2, [pc, #112]	@ (800ee6c <UART_SetConfig+0xcd4>)
 800edfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee00:	461a      	mov	r2, r3
 800ee02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee04:	fbb3 f2f2 	udiv	r2, r3, r2
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	085b      	lsrs	r3, r3, #1
 800ee0e:	441a      	add	r2, r3
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	685b      	ldr	r3, [r3, #4]
 800ee14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee18:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee1c:	2b0f      	cmp	r3, #15
 800ee1e:	d909      	bls.n	800ee34 <UART_SetConfig+0xc9c>
 800ee20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee26:	d205      	bcs.n	800ee34 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ee28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	60da      	str	r2, [r3, #12]
 800ee32:	e002      	b.n	800ee3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ee34:	2301      	movs	r3, #1
 800ee36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	2201      	movs	r2, #1
 800ee46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	2200      	movs	r2, #0
 800ee54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ee56:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3748      	adds	r7, #72	@ 0x48
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ee64:	03d09000 	.word	0x03d09000
 800ee68:	003d0900 	.word	0x003d0900
 800ee6c:	08014c40 	.word	0x08014c40

0800ee70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b083      	sub	sp, #12
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee7c:	f003 0308 	and.w	r3, r3, #8
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d00a      	beq.n	800ee9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	430a      	orrs	r2, r1
 800ee98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee9e:	f003 0301 	and.w	r3, r3, #1
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00a      	beq.n	800eebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	430a      	orrs	r2, r1
 800eeba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eec0:	f003 0302 	and.w	r3, r3, #2
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00a      	beq.n	800eede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	430a      	orrs	r2, r1
 800eedc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eee2:	f003 0304 	and.w	r3, r3, #4
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00a      	beq.n	800ef00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	430a      	orrs	r2, r1
 800eefe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef04:	f003 0310 	and.w	r3, r3, #16
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d00a      	beq.n	800ef22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	430a      	orrs	r2, r1
 800ef20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef26:	f003 0320 	and.w	r3, r3, #32
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00a      	beq.n	800ef44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	430a      	orrs	r2, r1
 800ef42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d01a      	beq.n	800ef86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	430a      	orrs	r2, r1
 800ef64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ef6e:	d10a      	bne.n	800ef86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	430a      	orrs	r2, r1
 800ef84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00a      	beq.n	800efa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	430a      	orrs	r2, r1
 800efa6:	605a      	str	r2, [r3, #4]
  }
}
 800efa8:	bf00      	nop
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr

0800efb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b098      	sub	sp, #96	@ 0x60
 800efb8:	af02      	add	r7, sp, #8
 800efba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2200      	movs	r2, #0
 800efc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800efc4:	f7f5 fb7a 	bl	80046bc <HAL_GetTick>
 800efc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f003 0308 	and.w	r3, r3, #8
 800efd4:	2b08      	cmp	r3, #8
 800efd6:	d12f      	bne.n	800f038 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efe0:	2200      	movs	r2, #0
 800efe2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 f88e 	bl	800f108 <UART_WaitOnFlagUntilTimeout>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d022      	beq.n	800f038 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800effa:	e853 3f00 	ldrex	r3, [r3]
 800effe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f006:	653b      	str	r3, [r7, #80]	@ 0x50
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	461a      	mov	r2, r3
 800f00e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f010:	647b      	str	r3, [r7, #68]	@ 0x44
 800f012:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f018:	e841 2300 	strex	r3, r2, [r1]
 800f01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f020:	2b00      	cmp	r3, #0
 800f022:	d1e6      	bne.n	800eff2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2220      	movs	r2, #32
 800f028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f034:	2303      	movs	r3, #3
 800f036:	e063      	b.n	800f100 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f003 0304 	and.w	r3, r3, #4
 800f042:	2b04      	cmp	r3, #4
 800f044:	d149      	bne.n	800f0da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f046:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f04a:	9300      	str	r3, [sp, #0]
 800f04c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f04e:	2200      	movs	r2, #0
 800f050:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f000 f857 	bl	800f108 <UART_WaitOnFlagUntilTimeout>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d03c      	beq.n	800f0da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f068:	e853 3f00 	ldrex	r3, [r3]
 800f06c:	623b      	str	r3, [r7, #32]
   return(result);
 800f06e:	6a3b      	ldr	r3, [r7, #32]
 800f070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	461a      	mov	r2, r3
 800f07c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f07e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f080:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f086:	e841 2300 	strex	r3, r2, [r1]
 800f08a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d1e6      	bne.n	800f060 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	3308      	adds	r3, #8
 800f098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	e853 3f00 	ldrex	r3, [r3]
 800f0a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f023 0301 	bic.w	r3, r3, #1
 800f0a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	3308      	adds	r3, #8
 800f0b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f0b2:	61fa      	str	r2, [r7, #28]
 800f0b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b6:	69b9      	ldr	r1, [r7, #24]
 800f0b8:	69fa      	ldr	r2, [r7, #28]
 800f0ba:	e841 2300 	strex	r3, r2, [r1]
 800f0be:	617b      	str	r3, [r7, #20]
   return(result);
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d1e5      	bne.n	800f092 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2220      	movs	r2, #32
 800f0ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f0d6:	2303      	movs	r3, #3
 800f0d8:	e012      	b.n	800f100 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2220      	movs	r2, #32
 800f0de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2220      	movs	r2, #32
 800f0e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f0fe:	2300      	movs	r3, #0
}
 800f100:	4618      	mov	r0, r3
 800f102:	3758      	adds	r7, #88	@ 0x58
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	603b      	str	r3, [r7, #0]
 800f114:	4613      	mov	r3, r2
 800f116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f118:	e04f      	b.n	800f1ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f11a:	69bb      	ldr	r3, [r7, #24]
 800f11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f120:	d04b      	beq.n	800f1ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f122:	f7f5 facb 	bl	80046bc <HAL_GetTick>
 800f126:	4602      	mov	r2, r0
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	69ba      	ldr	r2, [r7, #24]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d302      	bcc.n	800f138 <UART_WaitOnFlagUntilTimeout+0x30>
 800f132:	69bb      	ldr	r3, [r7, #24]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d101      	bne.n	800f13c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f138:	2303      	movs	r3, #3
 800f13a:	e04e      	b.n	800f1da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f003 0304 	and.w	r3, r3, #4
 800f146:	2b00      	cmp	r3, #0
 800f148:	d037      	beq.n	800f1ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	2b80      	cmp	r3, #128	@ 0x80
 800f14e:	d034      	beq.n	800f1ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	2b40      	cmp	r3, #64	@ 0x40
 800f154:	d031      	beq.n	800f1ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	69db      	ldr	r3, [r3, #28]
 800f15c:	f003 0308 	and.w	r3, r3, #8
 800f160:	2b08      	cmp	r3, #8
 800f162:	d110      	bne.n	800f186 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2208      	movs	r2, #8
 800f16a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f000 f921 	bl	800f3b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2208      	movs	r2, #8
 800f176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2200      	movs	r2, #0
 800f17e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f182:	2301      	movs	r3, #1
 800f184:	e029      	b.n	800f1da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	69db      	ldr	r3, [r3, #28]
 800f18c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f190:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f194:	d111      	bne.n	800f1ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f19e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f1a0:	68f8      	ldr	r0, [r7, #12]
 800f1a2:	f000 f907 	bl	800f3b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2220      	movs	r2, #32
 800f1aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f1b6:	2303      	movs	r3, #3
 800f1b8:	e00f      	b.n	800f1da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	69da      	ldr	r2, [r3, #28]
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	4013      	ands	r3, r2
 800f1c4:	68ba      	ldr	r2, [r7, #8]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	bf0c      	ite	eq
 800f1ca:	2301      	moveq	r3, #1
 800f1cc:	2300      	movne	r3, #0
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d0a0      	beq.n	800f11a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f1d8:	2300      	movs	r3, #0
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
	...

0800f1e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b096      	sub	sp, #88	@ 0x58
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	4613      	mov	r3, r2
 800f1f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	68ba      	ldr	r2, [r7, #8]
 800f1f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	88fa      	ldrh	r2, [r7, #6]
 800f1fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	2222      	movs	r2, #34	@ 0x22
 800f20c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f216:	2b00      	cmp	r3, #0
 800f218:	d02d      	beq.n	800f276 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f220:	4a40      	ldr	r2, [pc, #256]	@ (800f324 <UART_Start_Receive_DMA+0x140>)
 800f222:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f22a:	4a3f      	ldr	r2, [pc, #252]	@ (800f328 <UART_Start_Receive_DMA+0x144>)
 800f22c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f234:	4a3d      	ldr	r2, [pc, #244]	@ (800f32c <UART_Start_Receive_DMA+0x148>)
 800f236:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f23e:	2200      	movs	r2, #0
 800f240:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	3324      	adds	r3, #36	@ 0x24
 800f24e:	4619      	mov	r1, r3
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f254:	461a      	mov	r2, r3
 800f256:	88fb      	ldrh	r3, [r7, #6]
 800f258:	f7f5 ff52 	bl	8005100 <HAL_DMA_Start_IT>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d009      	beq.n	800f276 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2210      	movs	r2, #16
 800f266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2220      	movs	r2, #32
 800f26e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800f272:	2301      	movs	r3, #1
 800f274:	e051      	b.n	800f31a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	691b      	ldr	r3, [r3, #16]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d018      	beq.n	800f2b0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f286:	e853 3f00 	ldrex	r3, [r3]
 800f28a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f28e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f292:	657b      	str	r3, [r7, #84]	@ 0x54
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	461a      	mov	r2, r3
 800f29a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f29c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f29e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f2a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f2a4:	e841 2300 	strex	r3, r2, [r1]
 800f2a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f2aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d1e6      	bne.n	800f27e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	3308      	adds	r3, #8
 800f2b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ba:	e853 3f00 	ldrex	r3, [r3]
 800f2be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c2:	f043 0301 	orr.w	r3, r3, #1
 800f2c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	3308      	adds	r3, #8
 800f2ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f2d0:	637a      	str	r2, [r7, #52]	@ 0x34
 800f2d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f2d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f2d8:	e841 2300 	strex	r3, r2, [r1]
 800f2dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d1e5      	bne.n	800f2b0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	3308      	adds	r3, #8
 800f2ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	e853 3f00 	ldrex	r3, [r3]
 800f2f2:	613b      	str	r3, [r7, #16]
   return(result);
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	3308      	adds	r3, #8
 800f302:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f304:	623a      	str	r2, [r7, #32]
 800f306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f308:	69f9      	ldr	r1, [r7, #28]
 800f30a:	6a3a      	ldr	r2, [r7, #32]
 800f30c:	e841 2300 	strex	r3, r2, [r1]
 800f310:	61bb      	str	r3, [r7, #24]
   return(result);
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d1e5      	bne.n	800f2e4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f318:	2300      	movs	r3, #0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3758      	adds	r7, #88	@ 0x58
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	0800f481 	.word	0x0800f481
 800f328:	0800f5a9 	.word	0x0800f5a9
 800f32c:	0800f5e7 	.word	0x0800f5e7

0800f330 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f330:	b480      	push	{r7}
 800f332:	b08f      	sub	sp, #60	@ 0x3c
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f33e:	6a3b      	ldr	r3, [r7, #32]
 800f340:	e853 3f00 	ldrex	r3, [r3]
 800f344:	61fb      	str	r3, [r7, #28]
   return(result);
 800f346:	69fb      	ldr	r3, [r7, #28]
 800f348:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f34c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	461a      	mov	r2, r3
 800f354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f356:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f358:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f35c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f35e:	e841 2300 	strex	r3, r2, [r1]
 800f362:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1e6      	bne.n	800f338 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	3308      	adds	r3, #8
 800f370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	e853 3f00 	ldrex	r3, [r3]
 800f378:	60bb      	str	r3, [r7, #8]
   return(result);
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f380:	633b      	str	r3, [r7, #48]	@ 0x30
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	3308      	adds	r3, #8
 800f388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f38a:	61ba      	str	r2, [r7, #24]
 800f38c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f38e:	6979      	ldr	r1, [r7, #20]
 800f390:	69ba      	ldr	r2, [r7, #24]
 800f392:	e841 2300 	strex	r3, r2, [r1]
 800f396:	613b      	str	r3, [r7, #16]
   return(result);
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d1e5      	bne.n	800f36a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2220      	movs	r2, #32
 800f3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800f3a6:	bf00      	nop
 800f3a8:	373c      	adds	r7, #60	@ 0x3c
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr
	...

0800f3b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b095      	sub	sp, #84	@ 0x54
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3c4:	e853 3f00 	ldrex	r3, [r3]
 800f3c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f3d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3da:	643b      	str	r3, [r7, #64]	@ 0x40
 800f3dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f3e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f3e2:	e841 2300 	strex	r3, r2, [r1]
 800f3e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d1e6      	bne.n	800f3bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	3308      	adds	r3, #8
 800f3f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3f6:	6a3b      	ldr	r3, [r7, #32]
 800f3f8:	e853 3f00 	ldrex	r3, [r3]
 800f3fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800f3fe:	69fa      	ldr	r2, [r7, #28]
 800f400:	4b1e      	ldr	r3, [pc, #120]	@ (800f47c <UART_EndRxTransfer+0xc8>)
 800f402:	4013      	ands	r3, r2
 800f404:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	3308      	adds	r3, #8
 800f40c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f40e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f410:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f412:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f414:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f416:	e841 2300 	strex	r3, r2, [r1]
 800f41a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d1e5      	bne.n	800f3ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f426:	2b01      	cmp	r3, #1
 800f428:	d118      	bne.n	800f45c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	e853 3f00 	ldrex	r3, [r3]
 800f436:	60bb      	str	r3, [r7, #8]
   return(result);
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	f023 0310 	bic.w	r3, r3, #16
 800f43e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	461a      	mov	r2, r3
 800f446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f448:	61bb      	str	r3, [r7, #24]
 800f44a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44c:	6979      	ldr	r1, [r7, #20]
 800f44e:	69ba      	ldr	r2, [r7, #24]
 800f450:	e841 2300 	strex	r3, r2, [r1]
 800f454:	613b      	str	r3, [r7, #16]
   return(result);
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d1e6      	bne.n	800f42a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2220      	movs	r2, #32
 800f460:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2200      	movs	r2, #0
 800f468:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2200      	movs	r2, #0
 800f46e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f470:	bf00      	nop
 800f472:	3754      	adds	r7, #84	@ 0x54
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr
 800f47c:	effffffe 	.word	0xeffffffe

0800f480 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b09c      	sub	sp, #112	@ 0x70
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f48c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	69db      	ldr	r3, [r3, #28]
 800f492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f496:	d071      	beq.n	800f57c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f49a:	2200      	movs	r2, #0
 800f49c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4a8:	e853 3f00 	ldrex	r3, [r3]
 800f4ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f4ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f4b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f4b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f4b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f4be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f4c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f4c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f4c6:	e841 2300 	strex	r3, r2, [r1]
 800f4ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f4cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1e6      	bne.n	800f4a0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	3308      	adds	r3, #8
 800f4d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4dc:	e853 3f00 	ldrex	r3, [r3]
 800f4e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4e4:	f023 0301 	bic.w	r3, r3, #1
 800f4e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800f4ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	3308      	adds	r3, #8
 800f4f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f4f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800f4f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f4f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f4fa:	e841 2300 	strex	r3, r2, [r1]
 800f4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1e5      	bne.n	800f4d2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	3308      	adds	r3, #8
 800f50c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f510:	e853 3f00 	ldrex	r3, [r3]
 800f514:	623b      	str	r3, [r7, #32]
   return(result);
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f51c:	663b      	str	r3, [r7, #96]	@ 0x60
 800f51e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3308      	adds	r3, #8
 800f524:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f526:	633a      	str	r2, [r7, #48]	@ 0x30
 800f528:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f52a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f52c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f52e:	e841 2300 	strex	r3, r2, [r1]
 800f532:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f536:	2b00      	cmp	r3, #0
 800f538:	d1e5      	bne.n	800f506 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f53a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f53c:	2220      	movs	r2, #32
 800f53e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f546:	2b01      	cmp	r3, #1
 800f548:	d118      	bne.n	800f57c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f54a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	e853 3f00 	ldrex	r3, [r3]
 800f556:	60fb      	str	r3, [r7, #12]
   return(result);
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f023 0310 	bic.w	r3, r3, #16
 800f55e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	461a      	mov	r2, r3
 800f566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f568:	61fb      	str	r3, [r7, #28]
 800f56a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f56c:	69b9      	ldr	r1, [r7, #24]
 800f56e:	69fa      	ldr	r2, [r7, #28]
 800f570:	e841 2300 	strex	r3, r2, [r1]
 800f574:	617b      	str	r3, [r7, #20]
   return(result);
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d1e6      	bne.n	800f54a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f57c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f57e:	2200      	movs	r2, #0
 800f580:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f586:	2b01      	cmp	r3, #1
 800f588:	d107      	bne.n	800f59a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f58a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f58c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f590:	4619      	mov	r1, r3
 800f592:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f594:	f7fe fdf4 	bl	800e180 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f598:	e002      	b.n	800f5a0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f59a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f59c:	f7f3 fe72 	bl	8003284 <HAL_UART_RxCpltCallback>
}
 800f5a0:	bf00      	nop
 800f5a2:	3770      	adds	r7, #112	@ 0x70
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b084      	sub	sp, #16
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d109      	bne.n	800f5d8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f5ca:	085b      	lsrs	r3, r3, #1
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	f7fe fdd5 	bl	800e180 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f5d6:	e002      	b.n	800f5de <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f5d8:	68f8      	ldr	r0, [r7, #12]
 800f5da:	f7fe fdb3 	bl	800e144 <HAL_UART_RxHalfCpltCallback>
}
 800f5de:	bf00      	nop
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b086      	sub	sp, #24
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f5fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f602:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f60e:	2b80      	cmp	r3, #128	@ 0x80
 800f610:	d109      	bne.n	800f626 <UART_DMAError+0x40>
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	2b21      	cmp	r3, #33	@ 0x21
 800f616:	d106      	bne.n	800f626 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800f620:	6978      	ldr	r0, [r7, #20]
 800f622:	f7ff fe85 	bl	800f330 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f630:	2b40      	cmp	r3, #64	@ 0x40
 800f632:	d109      	bne.n	800f648 <UART_DMAError+0x62>
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2b22      	cmp	r3, #34	@ 0x22
 800f638:	d106      	bne.n	800f648 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	2200      	movs	r2, #0
 800f63e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800f642:	6978      	ldr	r0, [r7, #20]
 800f644:	f7ff feb6 	bl	800f3b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f64e:	f043 0210 	orr.w	r2, r3, #16
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f658:	6978      	ldr	r0, [r7, #20]
 800f65a:	f7fe fd7d 	bl	800e158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f65e:	bf00      	nop
 800f660:	3718      	adds	r7, #24
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}

0800f666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f666:	b580      	push	{r7, lr}
 800f668:	b084      	sub	sp, #16
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2200      	movs	r2, #0
 800f678:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f7fe fd67 	bl	800e158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f68a:	bf00      	nop
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b084      	sub	sp, #16
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f69e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d005      	beq.n	800f6be <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d12b      	bne.n	800f716 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	220f      	movs	r2, #15
 800f6dc:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f6e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f6e6:	d107      	bne.n	800f6f8 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	699a      	ldr	r2, [r3, #24]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f042 0210 	orr.w	r2, r2, #16
 800f6f6:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2220      	movs	r2, #32
 800f6fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2220      	movs	r2, #32
 800f704:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2200      	movs	r2, #0
 800f70c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800f70e:	68f8      	ldr	r0, [r7, #12]
 800f710:	f7fe fd2c 	bl	800e16c <HAL_UART_AbortCpltCallback>
 800f714:	e000      	b.n	800f718 <UART_DMATxAbortCallback+0x86>
      return;
 800f716:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f718:	3710      	adds	r7, #16
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f71e:	b580      	push	{r7, lr}
 800f720:	b084      	sub	sp, #16
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f72a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f732:	2200      	movs	r2, #0
 800f734:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d004      	beq.n	800f748 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f744:	2b00      	cmp	r3, #0
 800f746:	d126      	bne.n	800f796 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2200      	movs	r2, #0
 800f754:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2200      	movs	r2, #0
 800f75c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	220f      	movs	r2, #15
 800f766:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	699a      	ldr	r2, [r3, #24]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f042 0208 	orr.w	r2, r2, #8
 800f776:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2220      	movs	r2, #32
 800f77c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2220      	movs	r2, #32
 800f784:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2200      	movs	r2, #0
 800f78c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f7fe fcec 	bl	800e16c <HAL_UART_AbortCpltCallback>
 800f794:	e000      	b.n	800f798 <UART_DMARxAbortCallback+0x7a>
      return;
 800f796:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f798:	3710      	adds	r7, #16
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b088      	sub	sp, #32
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	e853 3f00 	ldrex	r3, [r3]
 800f7b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f7ba:	61fb      	str	r3, [r7, #28]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	61bb      	str	r3, [r7, #24]
 800f7c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c8:	6979      	ldr	r1, [r7, #20]
 800f7ca:	69ba      	ldr	r2, [r7, #24]
 800f7cc:	e841 2300 	strex	r3, r2, [r1]
 800f7d0:	613b      	str	r3, [r7, #16]
   return(result);
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d1e6      	bne.n	800f7a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2220      	movs	r2, #32
 800f7dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f7fe fca2 	bl	800e130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7ec:	bf00      	nop
 800f7ee:	3720      	adds	r7, #32
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f7fc:	bf00      	nop
 800f7fe:	370c      	adds	r7, #12
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f810:	bf00      	nop
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr

0800f81c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b083      	sub	sp, #12
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f824:	bf00      	nop
 800f826:	370c      	adds	r7, #12
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d101      	bne.n	800f846 <HAL_UARTEx_DisableFifoMode+0x16>
 800f842:	2302      	movs	r3, #2
 800f844:	e027      	b.n	800f896 <HAL_UARTEx_DisableFifoMode+0x66>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2201      	movs	r2, #1
 800f84a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2224      	movs	r2, #36	@ 0x24
 800f852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f022 0201 	bic.w	r2, r2, #1
 800f86c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f874:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2220      	movs	r2, #32
 800f888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2200      	movs	r2, #0
 800f890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f894:	2300      	movs	r3, #0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3714      	adds	r7, #20
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr

0800f8a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b084      	sub	sp, #16
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	6078      	str	r0, [r7, #4]
 800f8aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d101      	bne.n	800f8ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f8b6:	2302      	movs	r3, #2
 800f8b8:	e02d      	b.n	800f916 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2201      	movs	r2, #1
 800f8be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2224      	movs	r2, #36	@ 0x24
 800f8c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	f022 0201 	bic.w	r2, r2, #1
 800f8e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	683a      	ldr	r2, [r7, #0]
 800f8f2:	430a      	orrs	r2, r1
 800f8f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 f850 	bl	800f99c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2220      	movs	r2, #32
 800f908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2200      	movs	r2, #0
 800f910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f914:	2300      	movs	r3, #0
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b084      	sub	sp, #16
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f92e:	2b01      	cmp	r3, #1
 800f930:	d101      	bne.n	800f936 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f932:	2302      	movs	r3, #2
 800f934:	e02d      	b.n	800f992 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2201      	movs	r2, #1
 800f93a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2224      	movs	r2, #36	@ 0x24
 800f942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f022 0201 	bic.w	r2, r2, #1
 800f95c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	683a      	ldr	r2, [r7, #0]
 800f96e:	430a      	orrs	r2, r1
 800f970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f000 f812 	bl	800f99c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	68fa      	ldr	r2, [r7, #12]
 800f97e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2220      	movs	r2, #32
 800f984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2200      	movs	r2, #0
 800f98c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f990:	2300      	movs	r3, #0
}
 800f992:	4618      	mov	r0, r3
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
	...

0800f99c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b085      	sub	sp, #20
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d108      	bne.n	800f9be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f9bc:	e031      	b.n	800fa22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f9be:	2310      	movs	r3, #16
 800f9c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f9c2:	2310      	movs	r3, #16
 800f9c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	0e5b      	lsrs	r3, r3, #25
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	f003 0307 	and.w	r3, r3, #7
 800f9d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	0f5b      	lsrs	r3, r3, #29
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	f003 0307 	and.w	r3, r3, #7
 800f9e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f9e6:	7bbb      	ldrb	r3, [r7, #14]
 800f9e8:	7b3a      	ldrb	r2, [r7, #12]
 800f9ea:	4911      	ldr	r1, [pc, #68]	@ (800fa30 <UARTEx_SetNbDataToProcess+0x94>)
 800f9ec:	5c8a      	ldrb	r2, [r1, r2]
 800f9ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f9f2:	7b3a      	ldrb	r2, [r7, #12]
 800f9f4:	490f      	ldr	r1, [pc, #60]	@ (800fa34 <UARTEx_SetNbDataToProcess+0x98>)
 800f9f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f9f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9fc:	b29a      	uxth	r2, r3
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fa04:	7bfb      	ldrb	r3, [r7, #15]
 800fa06:	7b7a      	ldrb	r2, [r7, #13]
 800fa08:	4909      	ldr	r1, [pc, #36]	@ (800fa30 <UARTEx_SetNbDataToProcess+0x94>)
 800fa0a:	5c8a      	ldrb	r2, [r1, r2]
 800fa0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fa10:	7b7a      	ldrb	r2, [r7, #13]
 800fa12:	4908      	ldr	r1, [pc, #32]	@ (800fa34 <UARTEx_SetNbDataToProcess+0x98>)
 800fa14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fa16:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa1a:	b29a      	uxth	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fa22:	bf00      	nop
 800fa24:	3714      	adds	r7, #20
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr
 800fa2e:	bf00      	nop
 800fa30:	08014c58 	.word	0x08014c58
 800fa34:	08014c60 	.word	0x08014c60

0800fa38 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800fa3c:	4904      	ldr	r1, [pc, #16]	@ (800fa50 <MX_FATFS_Init+0x18>)
 800fa3e:	4805      	ldr	r0, [pc, #20]	@ (800fa54 <MX_FATFS_Init+0x1c>)
 800fa40:	f004 fd9e 	bl	8014580 <FATFS_LinkDriver>
 800fa44:	4603      	mov	r3, r0
 800fa46:	461a      	mov	r2, r3
 800fa48:	4b03      	ldr	r3, [pc, #12]	@ (800fa58 <MX_FATFS_Init+0x20>)
 800fa4a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fa4c:	bf00      	nop
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	24003b20 	.word	0x24003b20
 800fa54:	240000d0 	.word	0x240000d0
 800fa58:	24003b1c 	.word	0x24003b1c

0800fa5c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fa60:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	4603      	mov	r3, r0
 800fa74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800fa76:	79fb      	ldrb	r3, [r7, #7]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f000 f9fd 	bl	800fe78 <SD_disk_initialize>
 800fa7e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	4603      	mov	r3, r0
 800fa90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800fa92:	79fb      	ldrb	r3, [r7, #7]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f000 fad5 	bl	8010044 <SD_disk_status>
 800fa9a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3708      	adds	r7, #8
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b084      	sub	sp, #16
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	60b9      	str	r1, [r7, #8]
 800faac:	607a      	str	r2, [r7, #4]
 800faae:	603b      	str	r3, [r7, #0]
 800fab0:	4603      	mov	r3, r0
 800fab2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800fab4:	7bf8      	ldrb	r0, [r7, #15]
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	687a      	ldr	r2, [r7, #4]
 800faba:	68b9      	ldr	r1, [r7, #8]
 800fabc:	f000 fad8 	bl	8010070 <SD_disk_read>
 800fac0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800faca:	b580      	push	{r7, lr}
 800facc:	b084      	sub	sp, #16
 800face:	af00      	add	r7, sp, #0
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
 800fad4:	603b      	str	r3, [r7, #0]
 800fad6:	4603      	mov	r3, r0
 800fad8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800fada:	7bf8      	ldrb	r0, [r7, #15]
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	68b9      	ldr	r1, [r7, #8]
 800fae2:	f000 fb2f 	bl	8010144 <SD_disk_write>
 800fae6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3710      	adds	r7, #16
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	4603      	mov	r3, r0
 800faf8:	603a      	str	r2, [r7, #0]
 800fafa:	71fb      	strb	r3, [r7, #7]
 800fafc:	460b      	mov	r3, r1
 800fafe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800fb00:	79b9      	ldrb	r1, [r7, #6]
 800fb02:	79fb      	ldrb	r3, [r7, #7]
 800fb04:	683a      	ldr	r2, [r7, #0]
 800fb06:	4618      	mov	r0, r3
 800fb08:	f000 fba0 	bl	801024c <SD_disk_ioctl>
 800fb0c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3708      	adds	r7, #8
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
	...

0800fb18 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	2110      	movs	r1, #16
 800fb20:	4802      	ldr	r0, [pc, #8]	@ (800fb2c <SELECT+0x14>)
 800fb22:	f7f8 fb51 	bl	80081c8 <HAL_GPIO_WritePin>
}
 800fb26:	bf00      	nop
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	58020000 	.word	0x58020000

0800fb30 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800fb34:	2201      	movs	r2, #1
 800fb36:	2110      	movs	r1, #16
 800fb38:	4802      	ldr	r0, [pc, #8]	@ (800fb44 <DESELECT+0x14>)
 800fb3a:	f7f8 fb45 	bl	80081c8 <HAL_GPIO_WritePin>
}
 800fb3e:	bf00      	nop
 800fb40:	bd80      	pop	{r7, pc}
 800fb42:	bf00      	nop
 800fb44:	58020000 	.word	0x58020000

0800fb48 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	4603      	mov	r3, r0
 800fb50:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800fb52:	bf00      	nop
 800fb54:	4b08      	ldr	r3, [pc, #32]	@ (800fb78 <SPI_TxByte+0x30>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	695b      	ldr	r3, [r3, #20]
 800fb5a:	f003 0302 	and.w	r3, r3, #2
 800fb5e:	2b02      	cmp	r3, #2
 800fb60:	d1f8      	bne.n	800fb54 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800fb62:	1df9      	adds	r1, r7, #7
 800fb64:	2364      	movs	r3, #100	@ 0x64
 800fb66:	2201      	movs	r2, #1
 800fb68:	4803      	ldr	r0, [pc, #12]	@ (800fb78 <SPI_TxByte+0x30>)
 800fb6a:	f7fb fb77 	bl	800b25c <HAL_SPI_Transmit>
}
 800fb6e:	bf00      	nop
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	24003500 	.word	0x24003500

0800fb7c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	460b      	mov	r3, r1
 800fb86:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800fb88:	bf00      	nop
 800fb8a:	4b08      	ldr	r3, [pc, #32]	@ (800fbac <SPI_TxBuffer+0x30>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	695b      	ldr	r3, [r3, #20]
 800fb90:	f003 0302 	and.w	r3, r3, #2
 800fb94:	2b02      	cmp	r3, #2
 800fb96:	d1f8      	bne.n	800fb8a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800fb98:	887a      	ldrh	r2, [r7, #2]
 800fb9a:	2364      	movs	r3, #100	@ 0x64
 800fb9c:	6879      	ldr	r1, [r7, #4]
 800fb9e:	4803      	ldr	r0, [pc, #12]	@ (800fbac <SPI_TxBuffer+0x30>)
 800fba0:	f7fb fb5c 	bl	800b25c <HAL_SPI_Transmit>
}
 800fba4:	bf00      	nop
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	24003500 	.word	0x24003500

0800fbb0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800fbb6:	23ff      	movs	r3, #255	@ 0xff
 800fbb8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800fbba:	bf00      	nop
 800fbbc:	4b09      	ldr	r3, [pc, #36]	@ (800fbe4 <SPI_RxByte+0x34>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	695b      	ldr	r3, [r3, #20]
 800fbc2:	f003 0302 	and.w	r3, r3, #2
 800fbc6:	2b02      	cmp	r3, #2
 800fbc8:	d1f8      	bne.n	800fbbc <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800fbca:	1dba      	adds	r2, r7, #6
 800fbcc:	1df9      	adds	r1, r7, #7
 800fbce:	2364      	movs	r3, #100	@ 0x64
 800fbd0:	9300      	str	r3, [sp, #0]
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	4803      	ldr	r0, [pc, #12]	@ (800fbe4 <SPI_RxByte+0x34>)
 800fbd6:	f7fb ffa1 	bl	800bb1c <HAL_SPI_TransmitReceive>
  return data;
 800fbda:	79bb      	ldrb	r3, [r7, #6]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	24003500 	.word	0x24003500

0800fbe8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800fbf0:	f7ff ffde 	bl	800fbb0 <SPI_RxByte>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	701a      	strb	r2, [r3, #0]
}
 800fbfc:	bf00      	nop
 800fbfe:	3708      	adds	r7, #8
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800fc0a:	4b0a      	ldr	r3, [pc, #40]	@ (800fc34 <SD_ReadyWait+0x30>)
 800fc0c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800fc10:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800fc12:	f7ff ffcd 	bl	800fbb0 <SPI_RxByte>
 800fc16:	4603      	mov	r3, r0
 800fc18:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800fc1a:	79fb      	ldrb	r3, [r7, #7]
 800fc1c:	2bff      	cmp	r3, #255	@ 0xff
 800fc1e:	d003      	beq.n	800fc28 <SD_ReadyWait+0x24>
 800fc20:	4b04      	ldr	r3, [pc, #16]	@ (800fc34 <SD_ReadyWait+0x30>)
 800fc22:	881b      	ldrh	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1f4      	bne.n	800fc12 <SD_ReadyWait+0xe>
  return res;
 800fc28:	79fb      	ldrb	r3, [r7, #7]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3708      	adds	r7, #8
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	24003b26 	.word	0x24003b26

0800fc38 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b084      	sub	sp, #16
 800fc3c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800fc3e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800fc42:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800fc44:	f7ff ff74 	bl	800fb30 <DESELECT>
  for(int i = 0; i < 10; i++)
 800fc48:	2300      	movs	r3, #0
 800fc4a:	60bb      	str	r3, [r7, #8]
 800fc4c:	e005      	b.n	800fc5a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800fc4e:	20ff      	movs	r0, #255	@ 0xff
 800fc50:	f7ff ff7a 	bl	800fb48 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	3301      	adds	r3, #1
 800fc58:	60bb      	str	r3, [r7, #8]
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	2b09      	cmp	r3, #9
 800fc5e:	ddf6      	ble.n	800fc4e <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800fc60:	f7ff ff5a 	bl	800fb18 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800fc64:	2340      	movs	r3, #64	@ 0x40
 800fc66:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800fc70:	2300      	movs	r3, #0
 800fc72:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800fc74:	2300      	movs	r3, #0
 800fc76:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800fc78:	2395      	movs	r3, #149	@ 0x95
 800fc7a:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800fc7c:	463b      	mov	r3, r7
 800fc7e:	2106      	movs	r1, #6
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7ff ff7b 	bl	800fb7c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800fc86:	e002      	b.n	800fc8e <SD_PowerOn+0x56>
  {
    cnt--;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	3b01      	subs	r3, #1
 800fc8c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800fc8e:	f7ff ff8f 	bl	800fbb0 <SPI_RxByte>
 800fc92:	4603      	mov	r3, r0
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d002      	beq.n	800fc9e <SD_PowerOn+0x66>
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d1f4      	bne.n	800fc88 <SD_PowerOn+0x50>
  }
  DESELECT();
 800fc9e:	f7ff ff47 	bl	800fb30 <DESELECT>
  SPI_TxByte(0XFF);
 800fca2:	20ff      	movs	r0, #255	@ 0xff
 800fca4:	f7ff ff50 	bl	800fb48 <SPI_TxByte>
  PowerFlag = 1;
 800fca8:	4b03      	ldr	r3, [pc, #12]	@ (800fcb8 <SD_PowerOn+0x80>)
 800fcaa:	2201      	movs	r2, #1
 800fcac:	701a      	strb	r2, [r3, #0]
}
 800fcae:	bf00      	nop
 800fcb0:	3710      	adds	r7, #16
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	24003b29 	.word	0x24003b29

0800fcbc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800fcc0:	4b03      	ldr	r3, [pc, #12]	@ (800fcd0 <SD_PowerOff+0x14>)
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	701a      	strb	r2, [r3, #0]
}
 800fcc6:	bf00      	nop
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcce:	4770      	bx	lr
 800fcd0:	24003b29 	.word	0x24003b29

0800fcd4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	af00      	add	r7, sp, #0
  return PowerFlag;
 800fcd8:	4b03      	ldr	r3, [pc, #12]	@ (800fce8 <SD_CheckPower+0x14>)
 800fcda:	781b      	ldrb	r3, [r3, #0]
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr
 800fce6:	bf00      	nop
 800fce8:	24003b29 	.word	0x24003b29

0800fcec <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800fcf6:	4b13      	ldr	r3, [pc, #76]	@ (800fd44 <SD_RxDataBlock+0x58>)
 800fcf8:	22c8      	movs	r2, #200	@ 0xc8
 800fcfa:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800fcfc:	f7ff ff58 	bl	800fbb0 <SPI_RxByte>
 800fd00:	4603      	mov	r3, r0
 800fd02:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800fd04:	7bfb      	ldrb	r3, [r7, #15]
 800fd06:	2bff      	cmp	r3, #255	@ 0xff
 800fd08:	d103      	bne.n	800fd12 <SD_RxDataBlock+0x26>
 800fd0a:	4b0e      	ldr	r3, [pc, #56]	@ (800fd44 <SD_RxDataBlock+0x58>)
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d1f4      	bne.n	800fcfc <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800fd12:	7bfb      	ldrb	r3, [r7, #15]
 800fd14:	2bfe      	cmp	r3, #254	@ 0xfe
 800fd16:	d001      	beq.n	800fd1c <SD_RxDataBlock+0x30>
 800fd18:	2300      	movs	r3, #0
 800fd1a:	e00f      	b.n	800fd3c <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	607a      	str	r2, [r7, #4]
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7ff ff60 	bl	800fbe8 <SPI_RxBytePtr>
  } while(len--);
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	1e5a      	subs	r2, r3, #1
 800fd2c:	603a      	str	r2, [r7, #0]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1f4      	bne.n	800fd1c <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800fd32:	f7ff ff3d 	bl	800fbb0 <SPI_RxByte>
  SPI_RxByte();
 800fd36:	f7ff ff3b 	bl	800fbb0 <SPI_RxByte>
  return TRUE;
 800fd3a:	2301      	movs	r3, #1
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3710      	adds	r7, #16
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	24003b24 	.word	0x24003b24

0800fd48 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b084      	sub	sp, #16
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	460b      	mov	r3, r1
 800fd52:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800fd54:	2300      	movs	r3, #0
 800fd56:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800fd58:	f7ff ff54 	bl	800fc04 <SD_ReadyWait>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2bff      	cmp	r3, #255	@ 0xff
 800fd60:	d001      	beq.n	800fd66 <SD_TxDataBlock+0x1e>
 800fd62:	2300      	movs	r3, #0
 800fd64:	e02f      	b.n	800fdc6 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800fd66:	78fb      	ldrb	r3, [r7, #3]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7ff feed 	bl	800fb48 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800fd6e:	78fb      	ldrb	r3, [r7, #3]
 800fd70:	2bfd      	cmp	r3, #253	@ 0xfd
 800fd72:	d020      	beq.n	800fdb6 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800fd74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7ff feff 	bl	800fb7c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800fd7e:	f7ff ff17 	bl	800fbb0 <SPI_RxByte>
    SPI_RxByte();
 800fd82:	f7ff ff15 	bl	800fbb0 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800fd86:	e00b      	b.n	800fda0 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800fd88:	f7ff ff12 	bl	800fbb0 <SPI_RxByte>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
 800fd92:	f003 031f 	and.w	r3, r3, #31
 800fd96:	2b05      	cmp	r3, #5
 800fd98:	d006      	beq.n	800fda8 <SD_TxDataBlock+0x60>
      i++;
 800fd9a:	7bbb      	ldrb	r3, [r7, #14]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800fda0:	7bbb      	ldrb	r3, [r7, #14]
 800fda2:	2b40      	cmp	r3, #64	@ 0x40
 800fda4:	d9f0      	bls.n	800fd88 <SD_TxDataBlock+0x40>
 800fda6:	e000      	b.n	800fdaa <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800fda8:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800fdaa:	bf00      	nop
 800fdac:	f7ff ff00 	bl	800fbb0 <SPI_RxByte>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d0fa      	beq.n	800fdac <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800fdb6:	7bfb      	ldrb	r3, [r7, #15]
 800fdb8:	f003 031f 	and.w	r3, r3, #31
 800fdbc:	2b05      	cmp	r3, #5
 800fdbe:	d101      	bne.n	800fdc4 <SD_TxDataBlock+0x7c>
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	e000      	b.n	800fdc6 <SD_TxDataBlock+0x7e>

  return FALSE;
 800fdc4:	2300      	movs	r3, #0
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3710      	adds	r7, #16
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b084      	sub	sp, #16
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	6039      	str	r1, [r7, #0]
 800fdd8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800fdda:	f7ff ff13 	bl	800fc04 <SD_ReadyWait>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2bff      	cmp	r3, #255	@ 0xff
 800fde2:	d001      	beq.n	800fde8 <SD_SendCmd+0x1a>
 800fde4:	23ff      	movs	r3, #255	@ 0xff
 800fde6:	e042      	b.n	800fe6e <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800fde8:	79fb      	ldrb	r3, [r7, #7]
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7ff feac 	bl	800fb48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	0e1b      	lsrs	r3, r3, #24
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7ff fea6 	bl	800fb48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	0c1b      	lsrs	r3, r3, #16
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7ff fea0 	bl	800fb48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	0a1b      	lsrs	r3, r3, #8
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7ff fe9a 	bl	800fb48 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7ff fe95 	bl	800fb48 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800fe1e:	79fb      	ldrb	r3, [r7, #7]
 800fe20:	2b40      	cmp	r3, #64	@ 0x40
 800fe22:	d102      	bne.n	800fe2a <SD_SendCmd+0x5c>
 800fe24:	2395      	movs	r3, #149	@ 0x95
 800fe26:	73fb      	strb	r3, [r7, #15]
 800fe28:	e007      	b.n	800fe3a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800fe2a:	79fb      	ldrb	r3, [r7, #7]
 800fe2c:	2b48      	cmp	r3, #72	@ 0x48
 800fe2e:	d102      	bne.n	800fe36 <SD_SendCmd+0x68>
 800fe30:	2387      	movs	r3, #135	@ 0x87
 800fe32:	73fb      	strb	r3, [r7, #15]
 800fe34:	e001      	b.n	800fe3a <SD_SendCmd+0x6c>
  else crc = 1;
 800fe36:	2301      	movs	r3, #1
 800fe38:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800fe3a:	7bfb      	ldrb	r3, [r7, #15]
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7ff fe83 	bl	800fb48 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800fe42:	79fb      	ldrb	r3, [r7, #7]
 800fe44:	2b4c      	cmp	r3, #76	@ 0x4c
 800fe46:	d101      	bne.n	800fe4c <SD_SendCmd+0x7e>
 800fe48:	f7ff feb2 	bl	800fbb0 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800fe4c:	230a      	movs	r3, #10
 800fe4e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800fe50:	f7ff feae 	bl	800fbb0 <SPI_RxByte>
 800fe54:	4603      	mov	r3, r0
 800fe56:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800fe58:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	da05      	bge.n	800fe6c <SD_SendCmd+0x9e>
 800fe60:	7bbb      	ldrb	r3, [r7, #14]
 800fe62:	3b01      	subs	r3, #1
 800fe64:	73bb      	strb	r3, [r7, #14]
 800fe66:	7bbb      	ldrb	r3, [r7, #14]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d1f1      	bne.n	800fe50 <SD_SendCmd+0x82>

  return res;
 800fe6c:	7b7b      	ldrb	r3, [r7, #13]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3710      	adds	r7, #16
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
	...

0800fe78 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800fe78:	b590      	push	{r4, r7, lr}
 800fe7a:	b085      	sub	sp, #20
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	4603      	mov	r3, r0
 800fe80:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800fe82:	79fb      	ldrb	r3, [r7, #7]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d001      	beq.n	800fe8c <SD_disk_initialize+0x14>
 800fe88:	2301      	movs	r3, #1
 800fe8a:	e0d1      	b.n	8010030 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800fe8c:	4b6a      	ldr	r3, [pc, #424]	@ (8010038 <SD_disk_initialize+0x1c0>)
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	f003 0302 	and.w	r3, r3, #2
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d003      	beq.n	800fea2 <SD_disk_initialize+0x2a>
 800fe9a:	4b67      	ldr	r3, [pc, #412]	@ (8010038 <SD_disk_initialize+0x1c0>)
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	e0c6      	b.n	8010030 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800fea2:	f7ff fec9 	bl	800fc38 <SD_PowerOn>
  /* slave select */
  SELECT();
 800fea6:	f7ff fe37 	bl	800fb18 <SELECT>
  /* check disk type */
  type = 0;
 800feaa:	2300      	movs	r3, #0
 800feac:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800feae:	2100      	movs	r1, #0
 800feb0:	2040      	movs	r0, #64	@ 0x40
 800feb2:	f7ff ff8c 	bl	800fdce <SD_SendCmd>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b01      	cmp	r3, #1
 800feba:	f040 80a1 	bne.w	8010000 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800febe:	4b5f      	ldr	r3, [pc, #380]	@ (801003c <SD_disk_initialize+0x1c4>)
 800fec0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fec4:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800fec6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800feca:	2048      	movs	r0, #72	@ 0x48
 800fecc:	f7ff ff7f 	bl	800fdce <SD_SendCmd>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	d155      	bne.n	800ff82 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800fed6:	2300      	movs	r3, #0
 800fed8:	73fb      	strb	r3, [r7, #15]
 800feda:	e00c      	b.n	800fef6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800fedc:	7bfc      	ldrb	r4, [r7, #15]
 800fede:	f7ff fe67 	bl	800fbb0 <SPI_RxByte>
 800fee2:	4603      	mov	r3, r0
 800fee4:	461a      	mov	r2, r3
 800fee6:	f104 0310 	add.w	r3, r4, #16
 800feea:	443b      	add	r3, r7
 800feec:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800fef0:	7bfb      	ldrb	r3, [r7, #15]
 800fef2:	3301      	adds	r3, #1
 800fef4:	73fb      	strb	r3, [r7, #15]
 800fef6:	7bfb      	ldrb	r3, [r7, #15]
 800fef8:	2b03      	cmp	r3, #3
 800fefa:	d9ef      	bls.n	800fedc <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800fefc:	7abb      	ldrb	r3, [r7, #10]
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d17e      	bne.n	8010000 <SD_disk_initialize+0x188>
 800ff02:	7afb      	ldrb	r3, [r7, #11]
 800ff04:	2baa      	cmp	r3, #170	@ 0xaa
 800ff06:	d17b      	bne.n	8010000 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800ff08:	2100      	movs	r1, #0
 800ff0a:	2077      	movs	r0, #119	@ 0x77
 800ff0c:	f7ff ff5f 	bl	800fdce <SD_SendCmd>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d807      	bhi.n	800ff26 <SD_disk_initialize+0xae>
 800ff16:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ff1a:	2069      	movs	r0, #105	@ 0x69
 800ff1c:	f7ff ff57 	bl	800fdce <SD_SendCmd>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d004      	beq.n	800ff30 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800ff26:	4b45      	ldr	r3, [pc, #276]	@ (801003c <SD_disk_initialize+0x1c4>)
 800ff28:	881b      	ldrh	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1ec      	bne.n	800ff08 <SD_disk_initialize+0x90>
 800ff2e:	e000      	b.n	800ff32 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800ff30:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800ff32:	4b42      	ldr	r3, [pc, #264]	@ (801003c <SD_disk_initialize+0x1c4>)
 800ff34:	881b      	ldrh	r3, [r3, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d062      	beq.n	8010000 <SD_disk_initialize+0x188>
 800ff3a:	2100      	movs	r1, #0
 800ff3c:	207a      	movs	r0, #122	@ 0x7a
 800ff3e:	f7ff ff46 	bl	800fdce <SD_SendCmd>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d15b      	bne.n	8010000 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800ff48:	2300      	movs	r3, #0
 800ff4a:	73fb      	strb	r3, [r7, #15]
 800ff4c:	e00c      	b.n	800ff68 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800ff4e:	7bfc      	ldrb	r4, [r7, #15]
 800ff50:	f7ff fe2e 	bl	800fbb0 <SPI_RxByte>
 800ff54:	4603      	mov	r3, r0
 800ff56:	461a      	mov	r2, r3
 800ff58:	f104 0310 	add.w	r3, r4, #16
 800ff5c:	443b      	add	r3, r7
 800ff5e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800ff62:	7bfb      	ldrb	r3, [r7, #15]
 800ff64:	3301      	adds	r3, #1
 800ff66:	73fb      	strb	r3, [r7, #15]
 800ff68:	7bfb      	ldrb	r3, [r7, #15]
 800ff6a:	2b03      	cmp	r3, #3
 800ff6c:	d9ef      	bls.n	800ff4e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800ff6e:	7a3b      	ldrb	r3, [r7, #8]
 800ff70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d001      	beq.n	800ff7c <SD_disk_initialize+0x104>
 800ff78:	230c      	movs	r3, #12
 800ff7a:	e000      	b.n	800ff7e <SD_disk_initialize+0x106>
 800ff7c:	2304      	movs	r3, #4
 800ff7e:	73bb      	strb	r3, [r7, #14]
 800ff80:	e03e      	b.n	8010000 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800ff82:	2100      	movs	r1, #0
 800ff84:	2077      	movs	r0, #119	@ 0x77
 800ff86:	f7ff ff22 	bl	800fdce <SD_SendCmd>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d808      	bhi.n	800ffa2 <SD_disk_initialize+0x12a>
 800ff90:	2100      	movs	r1, #0
 800ff92:	2069      	movs	r0, #105	@ 0x69
 800ff94:	f7ff ff1b 	bl	800fdce <SD_SendCmd>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d801      	bhi.n	800ffa2 <SD_disk_initialize+0x12a>
 800ff9e:	2302      	movs	r3, #2
 800ffa0:	e000      	b.n	800ffa4 <SD_disk_initialize+0x12c>
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800ffa6:	7bbb      	ldrb	r3, [r7, #14]
 800ffa8:	2b02      	cmp	r3, #2
 800ffaa:	d10e      	bne.n	800ffca <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800ffac:	2100      	movs	r1, #0
 800ffae:	2077      	movs	r0, #119	@ 0x77
 800ffb0:	f7ff ff0d 	bl	800fdce <SD_SendCmd>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d80e      	bhi.n	800ffd8 <SD_disk_initialize+0x160>
 800ffba:	2100      	movs	r1, #0
 800ffbc:	2069      	movs	r0, #105	@ 0x69
 800ffbe:	f7ff ff06 	bl	800fdce <SD_SendCmd>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d107      	bne.n	800ffd8 <SD_disk_initialize+0x160>
 800ffc8:	e00c      	b.n	800ffe4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800ffca:	2100      	movs	r1, #0
 800ffcc:	2041      	movs	r0, #65	@ 0x41
 800ffce:	f7ff fefe 	bl	800fdce <SD_SendCmd>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d004      	beq.n	800ffe2 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800ffd8:	4b18      	ldr	r3, [pc, #96]	@ (801003c <SD_disk_initialize+0x1c4>)
 800ffda:	881b      	ldrh	r3, [r3, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d1e2      	bne.n	800ffa6 <SD_disk_initialize+0x12e>
 800ffe0:	e000      	b.n	800ffe4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800ffe2:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800ffe4:	4b15      	ldr	r3, [pc, #84]	@ (801003c <SD_disk_initialize+0x1c4>)
 800ffe6:	881b      	ldrh	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d007      	beq.n	800fffc <SD_disk_initialize+0x184>
 800ffec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fff0:	2050      	movs	r0, #80	@ 0x50
 800fff2:	f7ff feec 	bl	800fdce <SD_SendCmd>
 800fff6:	4603      	mov	r3, r0
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d001      	beq.n	8010000 <SD_disk_initialize+0x188>
 800fffc:	2300      	movs	r3, #0
 800fffe:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8010000:	4a0f      	ldr	r2, [pc, #60]	@ (8010040 <SD_disk_initialize+0x1c8>)
 8010002:	7bbb      	ldrb	r3, [r7, #14]
 8010004:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8010006:	f7ff fd93 	bl	800fb30 <DESELECT>
  SPI_RxByte();
 801000a:	f7ff fdd1 	bl	800fbb0 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 801000e:	7bbb      	ldrb	r3, [r7, #14]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d008      	beq.n	8010026 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8010014:	4b08      	ldr	r3, [pc, #32]	@ (8010038 <SD_disk_initialize+0x1c0>)
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	b2db      	uxtb	r3, r3
 801001a:	f023 0301 	bic.w	r3, r3, #1
 801001e:	b2da      	uxtb	r2, r3
 8010020:	4b05      	ldr	r3, [pc, #20]	@ (8010038 <SD_disk_initialize+0x1c0>)
 8010022:	701a      	strb	r2, [r3, #0]
 8010024:	e001      	b.n	801002a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8010026:	f7ff fe49 	bl	800fcbc <SD_PowerOff>
  }
  return Stat;
 801002a:	4b03      	ldr	r3, [pc, #12]	@ (8010038 <SD_disk_initialize+0x1c0>)
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	b2db      	uxtb	r3, r3
}
 8010030:	4618      	mov	r0, r3
 8010032:	3714      	adds	r7, #20
 8010034:	46bd      	mov	sp, r7
 8010036:	bd90      	pop	{r4, r7, pc}
 8010038:	240000e4 	.word	0x240000e4
 801003c:	24003b24 	.word	0x24003b24
 8010040:	24003b28 	.word	0x24003b28

08010044 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	4603      	mov	r3, r0
 801004c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 801004e:	79fb      	ldrb	r3, [r7, #7]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d001      	beq.n	8010058 <SD_disk_status+0x14>
 8010054:	2301      	movs	r3, #1
 8010056:	e002      	b.n	801005e <SD_disk_status+0x1a>
  return Stat;
 8010058:	4b04      	ldr	r3, [pc, #16]	@ (801006c <SD_disk_status+0x28>)
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	b2db      	uxtb	r3, r3
}
 801005e:	4618      	mov	r0, r3
 8010060:	370c      	adds	r7, #12
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop
 801006c:	240000e4 	.word	0x240000e4

08010070 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	60b9      	str	r1, [r7, #8]
 8010078:	607a      	str	r2, [r7, #4]
 801007a:	603b      	str	r3, [r7, #0]
 801007c:	4603      	mov	r3, r0
 801007e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8010080:	7bfb      	ldrb	r3, [r7, #15]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d102      	bne.n	801008c <SD_disk_read+0x1c>
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <SD_disk_read+0x20>
 801008c:	2304      	movs	r3, #4
 801008e:	e051      	b.n	8010134 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010090:	4b2a      	ldr	r3, [pc, #168]	@ (801013c <SD_disk_read+0xcc>)
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	b2db      	uxtb	r3, r3
 8010096:	f003 0301 	and.w	r3, r3, #1
 801009a:	2b00      	cmp	r3, #0
 801009c:	d001      	beq.n	80100a2 <SD_disk_read+0x32>
 801009e:	2303      	movs	r3, #3
 80100a0:	e048      	b.n	8010134 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80100a2:	4b27      	ldr	r3, [pc, #156]	@ (8010140 <SD_disk_read+0xd0>)
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	f003 0304 	and.w	r3, r3, #4
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d102      	bne.n	80100b4 <SD_disk_read+0x44>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	025b      	lsls	r3, r3, #9
 80100b2:	607b      	str	r3, [r7, #4]

  SELECT();
 80100b4:	f7ff fd30 	bl	800fb18 <SELECT>

  if (count == 1)
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d111      	bne.n	80100e2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80100be:	6879      	ldr	r1, [r7, #4]
 80100c0:	2051      	movs	r0, #81	@ 0x51
 80100c2:	f7ff fe84 	bl	800fdce <SD_SendCmd>
 80100c6:	4603      	mov	r3, r0
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d129      	bne.n	8010120 <SD_disk_read+0xb0>
 80100cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80100d0:	68b8      	ldr	r0, [r7, #8]
 80100d2:	f7ff fe0b 	bl	800fcec <SD_RxDataBlock>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d021      	beq.n	8010120 <SD_disk_read+0xb0>
 80100dc:	2300      	movs	r3, #0
 80100de:	603b      	str	r3, [r7, #0]
 80100e0:	e01e      	b.n	8010120 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80100e2:	6879      	ldr	r1, [r7, #4]
 80100e4:	2052      	movs	r0, #82	@ 0x52
 80100e6:	f7ff fe72 	bl	800fdce <SD_SendCmd>
 80100ea:	4603      	mov	r3, r0
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d117      	bne.n	8010120 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80100f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80100f4:	68b8      	ldr	r0, [r7, #8]
 80100f6:	f7ff fdf9 	bl	800fcec <SD_RxDataBlock>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00a      	beq.n	8010116 <SD_disk_read+0xa6>
        buff += 512;
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010106:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	3b01      	subs	r3, #1
 801010c:	603b      	str	r3, [r7, #0]
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d1ed      	bne.n	80100f0 <SD_disk_read+0x80>
 8010114:	e000      	b.n	8010118 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8010116:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8010118:	2100      	movs	r1, #0
 801011a:	204c      	movs	r0, #76	@ 0x4c
 801011c:	f7ff fe57 	bl	800fdce <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8010120:	f7ff fd06 	bl	800fb30 <DESELECT>
  SPI_RxByte();
 8010124:	f7ff fd44 	bl	800fbb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	bf14      	ite	ne
 801012e:	2301      	movne	r3, #1
 8010130:	2300      	moveq	r3, #0
 8010132:	b2db      	uxtb	r3, r3
}
 8010134:	4618      	mov	r0, r3
 8010136:	3710      	adds	r7, #16
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	240000e4 	.word	0x240000e4
 8010140:	24003b28 	.word	0x24003b28

08010144 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	60b9      	str	r1, [r7, #8]
 801014c:	607a      	str	r2, [r7, #4]
 801014e:	603b      	str	r3, [r7, #0]
 8010150:	4603      	mov	r3, r0
 8010152:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8010154:	7bfb      	ldrb	r3, [r7, #15]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d102      	bne.n	8010160 <SD_disk_write+0x1c>
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d101      	bne.n	8010164 <SD_disk_write+0x20>
 8010160:	2304      	movs	r3, #4
 8010162:	e06b      	b.n	801023c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010164:	4b37      	ldr	r3, [pc, #220]	@ (8010244 <SD_disk_write+0x100>)
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	b2db      	uxtb	r3, r3
 801016a:	f003 0301 	and.w	r3, r3, #1
 801016e:	2b00      	cmp	r3, #0
 8010170:	d001      	beq.n	8010176 <SD_disk_write+0x32>
 8010172:	2303      	movs	r3, #3
 8010174:	e062      	b.n	801023c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8010176:	4b33      	ldr	r3, [pc, #204]	@ (8010244 <SD_disk_write+0x100>)
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	b2db      	uxtb	r3, r3
 801017c:	f003 0304 	and.w	r3, r3, #4
 8010180:	2b00      	cmp	r3, #0
 8010182:	d001      	beq.n	8010188 <SD_disk_write+0x44>
 8010184:	2302      	movs	r3, #2
 8010186:	e059      	b.n	801023c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8010188:	4b2f      	ldr	r3, [pc, #188]	@ (8010248 <SD_disk_write+0x104>)
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	f003 0304 	and.w	r3, r3, #4
 8010190:	2b00      	cmp	r3, #0
 8010192:	d102      	bne.n	801019a <SD_disk_write+0x56>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	025b      	lsls	r3, r3, #9
 8010198:	607b      	str	r3, [r7, #4]

  SELECT();
 801019a:	f7ff fcbd 	bl	800fb18 <SELECT>

  if (count == 1)
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d110      	bne.n	80101c6 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80101a4:	6879      	ldr	r1, [r7, #4]
 80101a6:	2058      	movs	r0, #88	@ 0x58
 80101a8:	f7ff fe11 	bl	800fdce <SD_SendCmd>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d13a      	bne.n	8010228 <SD_disk_write+0xe4>
 80101b2:	21fe      	movs	r1, #254	@ 0xfe
 80101b4:	68b8      	ldr	r0, [r7, #8]
 80101b6:	f7ff fdc7 	bl	800fd48 <SD_TxDataBlock>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d033      	beq.n	8010228 <SD_disk_write+0xe4>
      count = 0;
 80101c0:	2300      	movs	r3, #0
 80101c2:	603b      	str	r3, [r7, #0]
 80101c4:	e030      	b.n	8010228 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80101c6:	4b20      	ldr	r3, [pc, #128]	@ (8010248 <SD_disk_write+0x104>)
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	f003 0302 	and.w	r3, r3, #2
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d007      	beq.n	80101e2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80101d2:	2100      	movs	r1, #0
 80101d4:	2077      	movs	r0, #119	@ 0x77
 80101d6:	f7ff fdfa 	bl	800fdce <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80101da:	6839      	ldr	r1, [r7, #0]
 80101dc:	2057      	movs	r0, #87	@ 0x57
 80101de:	f7ff fdf6 	bl	800fdce <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80101e2:	6879      	ldr	r1, [r7, #4]
 80101e4:	2059      	movs	r0, #89	@ 0x59
 80101e6:	f7ff fdf2 	bl	800fdce <SD_SendCmd>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d11b      	bne.n	8010228 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80101f0:	21fc      	movs	r1, #252	@ 0xfc
 80101f2:	68b8      	ldr	r0, [r7, #8]
 80101f4:	f7ff fda8 	bl	800fd48 <SD_TxDataBlock>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d00a      	beq.n	8010214 <SD_disk_write+0xd0>
        buff += 512;
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010204:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	3b01      	subs	r3, #1
 801020a:	603b      	str	r3, [r7, #0]
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d1ee      	bne.n	80101f0 <SD_disk_write+0xac>
 8010212:	e000      	b.n	8010216 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8010214:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8010216:	21fd      	movs	r1, #253	@ 0xfd
 8010218:	2000      	movs	r0, #0
 801021a:	f7ff fd95 	bl	800fd48 <SD_TxDataBlock>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d101      	bne.n	8010228 <SD_disk_write+0xe4>
      {
        count = 1;
 8010224:	2301      	movs	r3, #1
 8010226:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8010228:	f7ff fc82 	bl	800fb30 <DESELECT>
  SPI_RxByte();
 801022c:	f7ff fcc0 	bl	800fbb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	bf14      	ite	ne
 8010236:	2301      	movne	r3, #1
 8010238:	2300      	moveq	r3, #0
 801023a:	b2db      	uxtb	r3, r3
}
 801023c:	4618      	mov	r0, r3
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	240000e4 	.word	0x240000e4
 8010248:	24003b28 	.word	0x24003b28

0801024c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 801024c:	b590      	push	{r4, r7, lr}
 801024e:	b08b      	sub	sp, #44	@ 0x2c
 8010250:	af00      	add	r7, sp, #0
 8010252:	4603      	mov	r3, r0
 8010254:	603a      	str	r2, [r7, #0]
 8010256:	71fb      	strb	r3, [r7, #7]
 8010258:	460b      	mov	r3, r1
 801025a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8010260:	79fb      	ldrb	r3, [r7, #7]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d001      	beq.n	801026a <SD_disk_ioctl+0x1e>
 8010266:	2304      	movs	r3, #4
 8010268:	e113      	b.n	8010492 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 801026a:	2301      	movs	r3, #1
 801026c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8010270:	79bb      	ldrb	r3, [r7, #6]
 8010272:	2b05      	cmp	r3, #5
 8010274:	d124      	bne.n	80102c0 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8010276:	6a3b      	ldr	r3, [r7, #32]
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	2b02      	cmp	r3, #2
 801027c:	d012      	beq.n	80102a4 <SD_disk_ioctl+0x58>
 801027e:	2b02      	cmp	r3, #2
 8010280:	dc1a      	bgt.n	80102b8 <SD_disk_ioctl+0x6c>
 8010282:	2b00      	cmp	r3, #0
 8010284:	d002      	beq.n	801028c <SD_disk_ioctl+0x40>
 8010286:	2b01      	cmp	r3, #1
 8010288:	d006      	beq.n	8010298 <SD_disk_ioctl+0x4c>
 801028a:	e015      	b.n	80102b8 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 801028c:	f7ff fd16 	bl	800fcbc <SD_PowerOff>
      res = RES_OK;
 8010290:	2300      	movs	r3, #0
 8010292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8010296:	e0fa      	b.n	801048e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8010298:	f7ff fcce 	bl	800fc38 <SD_PowerOn>
      res = RES_OK;
 801029c:	2300      	movs	r3, #0
 801029e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80102a2:	e0f4      	b.n	801048e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80102a4:	6a3b      	ldr	r3, [r7, #32]
 80102a6:	1c5c      	adds	r4, r3, #1
 80102a8:	f7ff fd14 	bl	800fcd4 <SD_CheckPower>
 80102ac:	4603      	mov	r3, r0
 80102ae:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80102b0:	2300      	movs	r3, #0
 80102b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80102b6:	e0ea      	b.n	801048e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80102b8:	2304      	movs	r3, #4
 80102ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80102be:	e0e6      	b.n	801048e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80102c0:	4b76      	ldr	r3, [pc, #472]	@ (801049c <SD_disk_ioctl+0x250>)
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	f003 0301 	and.w	r3, r3, #1
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 80102ce:	2303      	movs	r3, #3
 80102d0:	e0df      	b.n	8010492 <SD_disk_ioctl+0x246>
    }
    SELECT();
 80102d2:	f7ff fc21 	bl	800fb18 <SELECT>
    switch (ctrl)
 80102d6:	79bb      	ldrb	r3, [r7, #6]
 80102d8:	2b0d      	cmp	r3, #13
 80102da:	f200 80c9 	bhi.w	8010470 <SD_disk_ioctl+0x224>
 80102de:	a201      	add	r2, pc, #4	@ (adr r2, 80102e4 <SD_disk_ioctl+0x98>)
 80102e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102e4:	080103db 	.word	0x080103db
 80102e8:	0801031d 	.word	0x0801031d
 80102ec:	080103cb 	.word	0x080103cb
 80102f0:	08010471 	.word	0x08010471
 80102f4:	08010471 	.word	0x08010471
 80102f8:	08010471 	.word	0x08010471
 80102fc:	08010471 	.word	0x08010471
 8010300:	08010471 	.word	0x08010471
 8010304:	08010471 	.word	0x08010471
 8010308:	08010471 	.word	0x08010471
 801030c:	08010471 	.word	0x08010471
 8010310:	080103ed 	.word	0x080103ed
 8010314:	08010411 	.word	0x08010411
 8010318:	08010435 	.word	0x08010435
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 801031c:	2100      	movs	r1, #0
 801031e:	2049      	movs	r0, #73	@ 0x49
 8010320:	f7ff fd55 	bl	800fdce <SD_SendCmd>
 8010324:	4603      	mov	r3, r0
 8010326:	2b00      	cmp	r3, #0
 8010328:	f040 80a6 	bne.w	8010478 <SD_disk_ioctl+0x22c>
 801032c:	f107 030c 	add.w	r3, r7, #12
 8010330:	2110      	movs	r1, #16
 8010332:	4618      	mov	r0, r3
 8010334:	f7ff fcda 	bl	800fcec <SD_RxDataBlock>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	f000 809c 	beq.w	8010478 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8010340:	7b3b      	ldrb	r3, [r7, #12]
 8010342:	099b      	lsrs	r3, r3, #6
 8010344:	b2db      	uxtb	r3, r3
 8010346:	2b01      	cmp	r3, #1
 8010348:	d10d      	bne.n	8010366 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 801034a:	7d7b      	ldrb	r3, [r7, #21]
 801034c:	461a      	mov	r2, r3
 801034e:	7d3b      	ldrb	r3, [r7, #20]
 8010350:	021b      	lsls	r3, r3, #8
 8010352:	b29b      	uxth	r3, r3
 8010354:	4413      	add	r3, r2
 8010356:	b29b      	uxth	r3, r3
 8010358:	3301      	adds	r3, #1
 801035a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 801035c:	8bfb      	ldrh	r3, [r7, #30]
 801035e:	029a      	lsls	r2, r3, #10
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	601a      	str	r2, [r3, #0]
 8010364:	e02d      	b.n	80103c2 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8010366:	7c7b      	ldrb	r3, [r7, #17]
 8010368:	f003 030f 	and.w	r3, r3, #15
 801036c:	b2da      	uxtb	r2, r3
 801036e:	7dbb      	ldrb	r3, [r7, #22]
 8010370:	09db      	lsrs	r3, r3, #7
 8010372:	b2db      	uxtb	r3, r3
 8010374:	4413      	add	r3, r2
 8010376:	b2da      	uxtb	r2, r3
 8010378:	7d7b      	ldrb	r3, [r7, #21]
 801037a:	005b      	lsls	r3, r3, #1
 801037c:	b2db      	uxtb	r3, r3
 801037e:	f003 0306 	and.w	r3, r3, #6
 8010382:	b2db      	uxtb	r3, r3
 8010384:	4413      	add	r3, r2
 8010386:	b2db      	uxtb	r3, r3
 8010388:	3302      	adds	r3, #2
 801038a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 801038e:	7d3b      	ldrb	r3, [r7, #20]
 8010390:	099b      	lsrs	r3, r3, #6
 8010392:	b2db      	uxtb	r3, r3
 8010394:	461a      	mov	r2, r3
 8010396:	7cfb      	ldrb	r3, [r7, #19]
 8010398:	009b      	lsls	r3, r3, #2
 801039a:	b29b      	uxth	r3, r3
 801039c:	4413      	add	r3, r2
 801039e:	b29a      	uxth	r2, r3
 80103a0:	7cbb      	ldrb	r3, [r7, #18]
 80103a2:	029b      	lsls	r3, r3, #10
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	4413      	add	r3, r2
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	3301      	adds	r3, #1
 80103b2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80103b4:	8bfa      	ldrh	r2, [r7, #30]
 80103b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80103ba:	3b09      	subs	r3, #9
 80103bc:	409a      	lsls	r2, r3
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80103c2:	2300      	movs	r3, #0
 80103c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80103c8:	e056      	b.n	8010478 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80103d0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80103d2:	2300      	movs	r3, #0
 80103d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80103d8:	e055      	b.n	8010486 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80103da:	f7ff fc13 	bl	800fc04 <SD_ReadyWait>
 80103de:	4603      	mov	r3, r0
 80103e0:	2bff      	cmp	r3, #255	@ 0xff
 80103e2:	d14b      	bne.n	801047c <SD_disk_ioctl+0x230>
 80103e4:	2300      	movs	r3, #0
 80103e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80103ea:	e047      	b.n	801047c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80103ec:	2100      	movs	r1, #0
 80103ee:	2049      	movs	r0, #73	@ 0x49
 80103f0:	f7ff fced 	bl	800fdce <SD_SendCmd>
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d142      	bne.n	8010480 <SD_disk_ioctl+0x234>
 80103fa:	2110      	movs	r1, #16
 80103fc:	6a38      	ldr	r0, [r7, #32]
 80103fe:	f7ff fc75 	bl	800fcec <SD_RxDataBlock>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d03b      	beq.n	8010480 <SD_disk_ioctl+0x234>
 8010408:	2300      	movs	r3, #0
 801040a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801040e:	e037      	b.n	8010480 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8010410:	2100      	movs	r1, #0
 8010412:	204a      	movs	r0, #74	@ 0x4a
 8010414:	f7ff fcdb 	bl	800fdce <SD_SendCmd>
 8010418:	4603      	mov	r3, r0
 801041a:	2b00      	cmp	r3, #0
 801041c:	d132      	bne.n	8010484 <SD_disk_ioctl+0x238>
 801041e:	2110      	movs	r1, #16
 8010420:	6a38      	ldr	r0, [r7, #32]
 8010422:	f7ff fc63 	bl	800fcec <SD_RxDataBlock>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d02b      	beq.n	8010484 <SD_disk_ioctl+0x238>
 801042c:	2300      	movs	r3, #0
 801042e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8010432:	e027      	b.n	8010484 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8010434:	2100      	movs	r1, #0
 8010436:	207a      	movs	r0, #122	@ 0x7a
 8010438:	f7ff fcc9 	bl	800fdce <SD_SendCmd>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	d116      	bne.n	8010470 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8010442:	2300      	movs	r3, #0
 8010444:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010448:	e00b      	b.n	8010462 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 801044a:	6a3c      	ldr	r4, [r7, #32]
 801044c:	1c63      	adds	r3, r4, #1
 801044e:	623b      	str	r3, [r7, #32]
 8010450:	f7ff fbae 	bl	800fbb0 <SPI_RxByte>
 8010454:	4603      	mov	r3, r0
 8010456:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8010458:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801045c:	3301      	adds	r3, #1
 801045e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010462:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010466:	2b03      	cmp	r3, #3
 8010468:	d9ef      	bls.n	801044a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 801046a:	2300      	movs	r3, #0
 801046c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8010470:	2304      	movs	r3, #4
 8010472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010476:	e006      	b.n	8010486 <SD_disk_ioctl+0x23a>
      break;
 8010478:	bf00      	nop
 801047a:	e004      	b.n	8010486 <SD_disk_ioctl+0x23a>
      break;
 801047c:	bf00      	nop
 801047e:	e002      	b.n	8010486 <SD_disk_ioctl+0x23a>
      break;
 8010480:	bf00      	nop
 8010482:	e000      	b.n	8010486 <SD_disk_ioctl+0x23a>
      break;
 8010484:	bf00      	nop
    }
    DESELECT();
 8010486:	f7ff fb53 	bl	800fb30 <DESELECT>
    SPI_RxByte();
 801048a:	f7ff fb91 	bl	800fbb0 <SPI_RxByte>
  }
  return res;
 801048e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010492:	4618      	mov	r0, r3
 8010494:	372c      	adds	r7, #44	@ 0x2c
 8010496:	46bd      	mov	sp, r7
 8010498:	bd90      	pop	{r4, r7, pc}
 801049a:	bf00      	nop
 801049c:	240000e4 	.word	0x240000e4

080104a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80104aa:	79fb      	ldrb	r3, [r7, #7]
 80104ac:	4a08      	ldr	r2, [pc, #32]	@ (80104d0 <disk_status+0x30>)
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	4413      	add	r3, r2
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	79fa      	ldrb	r2, [r7, #7]
 80104b8:	4905      	ldr	r1, [pc, #20]	@ (80104d0 <disk_status+0x30>)
 80104ba:	440a      	add	r2, r1
 80104bc:	7a12      	ldrb	r2, [r2, #8]
 80104be:	4610      	mov	r0, r2
 80104c0:	4798      	blx	r3
 80104c2:	4603      	mov	r3, r0
 80104c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80104c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3710      	adds	r7, #16
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	24003d54 	.word	0x24003d54

080104d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	4603      	mov	r3, r0
 80104dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80104e2:	79fb      	ldrb	r3, [r7, #7]
 80104e4:	4a0e      	ldr	r2, [pc, #56]	@ (8010520 <disk_initialize+0x4c>)
 80104e6:	5cd3      	ldrb	r3, [r2, r3]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d114      	bne.n	8010516 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80104ec:	79fb      	ldrb	r3, [r7, #7]
 80104ee:	4a0c      	ldr	r2, [pc, #48]	@ (8010520 <disk_initialize+0x4c>)
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	4413      	add	r3, r2
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	79fa      	ldrb	r2, [r7, #7]
 80104fa:	4909      	ldr	r1, [pc, #36]	@ (8010520 <disk_initialize+0x4c>)
 80104fc:	440a      	add	r2, r1
 80104fe:	7a12      	ldrb	r2, [r2, #8]
 8010500:	4610      	mov	r0, r2
 8010502:	4798      	blx	r3
 8010504:	4603      	mov	r3, r0
 8010506:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010508:	7bfb      	ldrb	r3, [r7, #15]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d103      	bne.n	8010516 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801050e:	79fb      	ldrb	r3, [r7, #7]
 8010510:	4a03      	ldr	r2, [pc, #12]	@ (8010520 <disk_initialize+0x4c>)
 8010512:	2101      	movs	r1, #1
 8010514:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010516:	7bfb      	ldrb	r3, [r7, #15]
}
 8010518:	4618      	mov	r0, r3
 801051a:	3710      	adds	r7, #16
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}
 8010520:	24003d54 	.word	0x24003d54

08010524 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010524:	b590      	push	{r4, r7, lr}
 8010526:	b087      	sub	sp, #28
 8010528:	af00      	add	r7, sp, #0
 801052a:	60b9      	str	r1, [r7, #8]
 801052c:	607a      	str	r2, [r7, #4]
 801052e:	603b      	str	r3, [r7, #0]
 8010530:	4603      	mov	r3, r0
 8010532:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010534:	7bfb      	ldrb	r3, [r7, #15]
 8010536:	4a0a      	ldr	r2, [pc, #40]	@ (8010560 <disk_read+0x3c>)
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	4413      	add	r3, r2
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	689c      	ldr	r4, [r3, #8]
 8010540:	7bfb      	ldrb	r3, [r7, #15]
 8010542:	4a07      	ldr	r2, [pc, #28]	@ (8010560 <disk_read+0x3c>)
 8010544:	4413      	add	r3, r2
 8010546:	7a18      	ldrb	r0, [r3, #8]
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	687a      	ldr	r2, [r7, #4]
 801054c:	68b9      	ldr	r1, [r7, #8]
 801054e:	47a0      	blx	r4
 8010550:	4603      	mov	r3, r0
 8010552:	75fb      	strb	r3, [r7, #23]
  return res;
 8010554:	7dfb      	ldrb	r3, [r7, #23]
}
 8010556:	4618      	mov	r0, r3
 8010558:	371c      	adds	r7, #28
 801055a:	46bd      	mov	sp, r7
 801055c:	bd90      	pop	{r4, r7, pc}
 801055e:	bf00      	nop
 8010560:	24003d54 	.word	0x24003d54

08010564 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010564:	b590      	push	{r4, r7, lr}
 8010566:	b087      	sub	sp, #28
 8010568:	af00      	add	r7, sp, #0
 801056a:	60b9      	str	r1, [r7, #8]
 801056c:	607a      	str	r2, [r7, #4]
 801056e:	603b      	str	r3, [r7, #0]
 8010570:	4603      	mov	r3, r0
 8010572:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010574:	7bfb      	ldrb	r3, [r7, #15]
 8010576:	4a0a      	ldr	r2, [pc, #40]	@ (80105a0 <disk_write+0x3c>)
 8010578:	009b      	lsls	r3, r3, #2
 801057a:	4413      	add	r3, r2
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	68dc      	ldr	r4, [r3, #12]
 8010580:	7bfb      	ldrb	r3, [r7, #15]
 8010582:	4a07      	ldr	r2, [pc, #28]	@ (80105a0 <disk_write+0x3c>)
 8010584:	4413      	add	r3, r2
 8010586:	7a18      	ldrb	r0, [r3, #8]
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	68b9      	ldr	r1, [r7, #8]
 801058e:	47a0      	blx	r4
 8010590:	4603      	mov	r3, r0
 8010592:	75fb      	strb	r3, [r7, #23]
  return res;
 8010594:	7dfb      	ldrb	r3, [r7, #23]
}
 8010596:	4618      	mov	r0, r3
 8010598:	371c      	adds	r7, #28
 801059a:	46bd      	mov	sp, r7
 801059c:	bd90      	pop	{r4, r7, pc}
 801059e:	bf00      	nop
 80105a0:	24003d54 	.word	0x24003d54

080105a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	4603      	mov	r3, r0
 80105ac:	603a      	str	r2, [r7, #0]
 80105ae:	71fb      	strb	r3, [r7, #7]
 80105b0:	460b      	mov	r3, r1
 80105b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80105b4:	79fb      	ldrb	r3, [r7, #7]
 80105b6:	4a09      	ldr	r2, [pc, #36]	@ (80105dc <disk_ioctl+0x38>)
 80105b8:	009b      	lsls	r3, r3, #2
 80105ba:	4413      	add	r3, r2
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	691b      	ldr	r3, [r3, #16]
 80105c0:	79fa      	ldrb	r2, [r7, #7]
 80105c2:	4906      	ldr	r1, [pc, #24]	@ (80105dc <disk_ioctl+0x38>)
 80105c4:	440a      	add	r2, r1
 80105c6:	7a10      	ldrb	r0, [r2, #8]
 80105c8:	79b9      	ldrb	r1, [r7, #6]
 80105ca:	683a      	ldr	r2, [r7, #0]
 80105cc:	4798      	blx	r3
 80105ce:	4603      	mov	r3, r0
 80105d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80105d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	24003d54 	.word	0x24003d54

080105e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80105e0:	b480      	push	{r7}
 80105e2:	b085      	sub	sp, #20
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	3301      	adds	r3, #1
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80105f0:	89fb      	ldrh	r3, [r7, #14]
 80105f2:	021b      	lsls	r3, r3, #8
 80105f4:	b21a      	sxth	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	b21b      	sxth	r3, r3
 80105fc:	4313      	orrs	r3, r2
 80105fe:	b21b      	sxth	r3, r3
 8010600:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010602:	89fb      	ldrh	r3, [r7, #14]
}
 8010604:	4618      	mov	r0, r3
 8010606:	3714      	adds	r7, #20
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010610:	b480      	push	{r7}
 8010612:	b085      	sub	sp, #20
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	3303      	adds	r3, #3
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	021b      	lsls	r3, r3, #8
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	3202      	adds	r2, #2
 8010628:	7812      	ldrb	r2, [r2, #0]
 801062a:	4313      	orrs	r3, r2
 801062c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	021b      	lsls	r3, r3, #8
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	3201      	adds	r2, #1
 8010636:	7812      	ldrb	r2, [r2, #0]
 8010638:	4313      	orrs	r3, r2
 801063a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	021b      	lsls	r3, r3, #8
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	7812      	ldrb	r2, [r2, #0]
 8010644:	4313      	orrs	r3, r2
 8010646:	60fb      	str	r3, [r7, #12]
	return rv;
 8010648:	68fb      	ldr	r3, [r7, #12]
}
 801064a:	4618      	mov	r0, r3
 801064c:	3714      	adds	r7, #20
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr

08010656 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010656:	b480      	push	{r7}
 8010658:	b083      	sub	sp, #12
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
 801065e:	460b      	mov	r3, r1
 8010660:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	1c5a      	adds	r2, r3, #1
 8010666:	607a      	str	r2, [r7, #4]
 8010668:	887a      	ldrh	r2, [r7, #2]
 801066a:	b2d2      	uxtb	r2, r2
 801066c:	701a      	strb	r2, [r3, #0]
 801066e:	887b      	ldrh	r3, [r7, #2]
 8010670:	0a1b      	lsrs	r3, r3, #8
 8010672:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	1c5a      	adds	r2, r3, #1
 8010678:	607a      	str	r2, [r7, #4]
 801067a:	887a      	ldrh	r2, [r7, #2]
 801067c:	b2d2      	uxtb	r2, r2
 801067e:	701a      	strb	r2, [r3, #0]
}
 8010680:	bf00      	nop
 8010682:	370c      	adds	r7, #12
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr

0801068c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801068c:	b480      	push	{r7}
 801068e:	b083      	sub	sp, #12
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	1c5a      	adds	r2, r3, #1
 801069a:	607a      	str	r2, [r7, #4]
 801069c:	683a      	ldr	r2, [r7, #0]
 801069e:	b2d2      	uxtb	r2, r2
 80106a0:	701a      	strb	r2, [r3, #0]
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	0a1b      	lsrs	r3, r3, #8
 80106a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	1c5a      	adds	r2, r3, #1
 80106ac:	607a      	str	r2, [r7, #4]
 80106ae:	683a      	ldr	r2, [r7, #0]
 80106b0:	b2d2      	uxtb	r2, r2
 80106b2:	701a      	strb	r2, [r3, #0]
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	0a1b      	lsrs	r3, r3, #8
 80106b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	1c5a      	adds	r2, r3, #1
 80106be:	607a      	str	r2, [r7, #4]
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	b2d2      	uxtb	r2, r2
 80106c4:	701a      	strb	r2, [r3, #0]
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	0a1b      	lsrs	r3, r3, #8
 80106ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	1c5a      	adds	r2, r3, #1
 80106d0:	607a      	str	r2, [r7, #4]
 80106d2:	683a      	ldr	r2, [r7, #0]
 80106d4:	b2d2      	uxtb	r2, r2
 80106d6:	701a      	strb	r2, [r3, #0]
}
 80106d8:	bf00      	nop
 80106da:	370c      	adds	r7, #12
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr

080106e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80106e4:	b480      	push	{r7}
 80106e6:	b087      	sub	sp, #28
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d00d      	beq.n	801071a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80106fe:	693a      	ldr	r2, [r7, #16]
 8010700:	1c53      	adds	r3, r2, #1
 8010702:	613b      	str	r3, [r7, #16]
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	1c59      	adds	r1, r3, #1
 8010708:	6179      	str	r1, [r7, #20]
 801070a:	7812      	ldrb	r2, [r2, #0]
 801070c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	3b01      	subs	r3, #1
 8010712:	607b      	str	r3, [r7, #4]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1f1      	bne.n	80106fe <mem_cpy+0x1a>
	}
}
 801071a:	bf00      	nop
 801071c:	371c      	adds	r7, #28
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010726:	b480      	push	{r7}
 8010728:	b087      	sub	sp, #28
 801072a:	af00      	add	r7, sp, #0
 801072c:	60f8      	str	r0, [r7, #12]
 801072e:	60b9      	str	r1, [r7, #8]
 8010730:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	1c5a      	adds	r2, r3, #1
 801073a:	617a      	str	r2, [r7, #20]
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	b2d2      	uxtb	r2, r2
 8010740:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	3b01      	subs	r3, #1
 8010746:	607b      	str	r3, [r7, #4]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d1f3      	bne.n	8010736 <mem_set+0x10>
}
 801074e:	bf00      	nop
 8010750:	bf00      	nop
 8010752:	371c      	adds	r7, #28
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801075c:	b480      	push	{r7}
 801075e:	b089      	sub	sp, #36	@ 0x24
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	61fb      	str	r3, [r7, #28]
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010770:	2300      	movs	r3, #0
 8010772:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010774:	69fb      	ldr	r3, [r7, #28]
 8010776:	1c5a      	adds	r2, r3, #1
 8010778:	61fa      	str	r2, [r7, #28]
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	4619      	mov	r1, r3
 801077e:	69bb      	ldr	r3, [r7, #24]
 8010780:	1c5a      	adds	r2, r3, #1
 8010782:	61ba      	str	r2, [r7, #24]
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	1acb      	subs	r3, r1, r3
 8010788:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	3b01      	subs	r3, #1
 801078e:	607b      	str	r3, [r7, #4]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d002      	beq.n	801079c <mem_cmp+0x40>
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d0eb      	beq.n	8010774 <mem_cmp+0x18>

	return r;
 801079c:	697b      	ldr	r3, [r7, #20]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3724      	adds	r7, #36	@ 0x24
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr

080107aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80107aa:	b480      	push	{r7}
 80107ac:	b083      	sub	sp, #12
 80107ae:	af00      	add	r7, sp, #0
 80107b0:	6078      	str	r0, [r7, #4]
 80107b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80107b4:	e002      	b.n	80107bc <chk_chr+0x12>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	3301      	adds	r3, #1
 80107ba:	607b      	str	r3, [r7, #4]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d005      	beq.n	80107d0 <chk_chr+0x26>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	461a      	mov	r2, r3
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d1f2      	bne.n	80107b6 <chk_chr+0xc>
	return *str;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	781b      	ldrb	r3, [r3, #0]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	370c      	adds	r7, #12
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b085      	sub	sp, #20
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80107ea:	2300      	movs	r3, #0
 80107ec:	60bb      	str	r3, [r7, #8]
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	60fb      	str	r3, [r7, #12]
 80107f2:	e029      	b.n	8010848 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80107f4:	4a27      	ldr	r2, [pc, #156]	@ (8010894 <chk_lock+0xb4>)
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	011b      	lsls	r3, r3, #4
 80107fa:	4413      	add	r3, r2
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d01d      	beq.n	801083e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010802:	4a24      	ldr	r2, [pc, #144]	@ (8010894 <chk_lock+0xb4>)
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	011b      	lsls	r3, r3, #4
 8010808:	4413      	add	r3, r2
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	429a      	cmp	r2, r3
 8010812:	d116      	bne.n	8010842 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010814:	4a1f      	ldr	r2, [pc, #124]	@ (8010894 <chk_lock+0xb4>)
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	011b      	lsls	r3, r3, #4
 801081a:	4413      	add	r3, r2
 801081c:	3304      	adds	r3, #4
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010824:	429a      	cmp	r2, r3
 8010826:	d10c      	bne.n	8010842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010828:	4a1a      	ldr	r2, [pc, #104]	@ (8010894 <chk_lock+0xb4>)
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	011b      	lsls	r3, r3, #4
 801082e:	4413      	add	r3, r2
 8010830:	3308      	adds	r3, #8
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010838:	429a      	cmp	r2, r3
 801083a:	d102      	bne.n	8010842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801083c:	e007      	b.n	801084e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801083e:	2301      	movs	r3, #1
 8010840:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	3301      	adds	r3, #1
 8010846:	60fb      	str	r3, [r7, #12]
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2b01      	cmp	r3, #1
 801084c:	d9d2      	bls.n	80107f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2b02      	cmp	r3, #2
 8010852:	d109      	bne.n	8010868 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d102      	bne.n	8010860 <chk_lock+0x80>
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	2b02      	cmp	r3, #2
 801085e:	d101      	bne.n	8010864 <chk_lock+0x84>
 8010860:	2300      	movs	r3, #0
 8010862:	e010      	b.n	8010886 <chk_lock+0xa6>
 8010864:	2312      	movs	r3, #18
 8010866:	e00e      	b.n	8010886 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d108      	bne.n	8010880 <chk_lock+0xa0>
 801086e:	4a09      	ldr	r2, [pc, #36]	@ (8010894 <chk_lock+0xb4>)
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	011b      	lsls	r3, r3, #4
 8010874:	4413      	add	r3, r2
 8010876:	330c      	adds	r3, #12
 8010878:	881b      	ldrh	r3, [r3, #0]
 801087a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801087e:	d101      	bne.n	8010884 <chk_lock+0xa4>
 8010880:	2310      	movs	r3, #16
 8010882:	e000      	b.n	8010886 <chk_lock+0xa6>
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3714      	adds	r7, #20
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr
 8010892:	bf00      	nop
 8010894:	24003b34 	.word	0x24003b34

08010898 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010898:	b480      	push	{r7}
 801089a:	b083      	sub	sp, #12
 801089c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801089e:	2300      	movs	r3, #0
 80108a0:	607b      	str	r3, [r7, #4]
 80108a2:	e002      	b.n	80108aa <enq_lock+0x12>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	3301      	adds	r3, #1
 80108a8:	607b      	str	r3, [r7, #4]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d806      	bhi.n	80108be <enq_lock+0x26>
 80108b0:	4a09      	ldr	r2, [pc, #36]	@ (80108d8 <enq_lock+0x40>)
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	011b      	lsls	r3, r3, #4
 80108b6:	4413      	add	r3, r2
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d1f2      	bne.n	80108a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	bf14      	ite	ne
 80108c4:	2301      	movne	r3, #1
 80108c6:	2300      	moveq	r3, #0
 80108c8:	b2db      	uxtb	r3, r3
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	370c      	adds	r7, #12
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	24003b34 	.word	0x24003b34

080108dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80108dc:	b480      	push	{r7}
 80108de:	b085      	sub	sp, #20
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80108e6:	2300      	movs	r3, #0
 80108e8:	60fb      	str	r3, [r7, #12]
 80108ea:	e01f      	b.n	801092c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80108ec:	4a41      	ldr	r2, [pc, #260]	@ (80109f4 <inc_lock+0x118>)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	011b      	lsls	r3, r3, #4
 80108f2:	4413      	add	r3, r2
 80108f4:	681a      	ldr	r2, [r3, #0]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	429a      	cmp	r2, r3
 80108fc:	d113      	bne.n	8010926 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80108fe:	4a3d      	ldr	r2, [pc, #244]	@ (80109f4 <inc_lock+0x118>)
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	011b      	lsls	r3, r3, #4
 8010904:	4413      	add	r3, r2
 8010906:	3304      	adds	r3, #4
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801090e:	429a      	cmp	r2, r3
 8010910:	d109      	bne.n	8010926 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010912:	4a38      	ldr	r2, [pc, #224]	@ (80109f4 <inc_lock+0x118>)
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	011b      	lsls	r3, r3, #4
 8010918:	4413      	add	r3, r2
 801091a:	3308      	adds	r3, #8
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010922:	429a      	cmp	r2, r3
 8010924:	d006      	beq.n	8010934 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	3301      	adds	r3, #1
 801092a:	60fb      	str	r3, [r7, #12]
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	2b01      	cmp	r3, #1
 8010930:	d9dc      	bls.n	80108ec <inc_lock+0x10>
 8010932:	e000      	b.n	8010936 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010934:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2b02      	cmp	r3, #2
 801093a:	d132      	bne.n	80109a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801093c:	2300      	movs	r3, #0
 801093e:	60fb      	str	r3, [r7, #12]
 8010940:	e002      	b.n	8010948 <inc_lock+0x6c>
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	3301      	adds	r3, #1
 8010946:	60fb      	str	r3, [r7, #12]
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2b01      	cmp	r3, #1
 801094c:	d806      	bhi.n	801095c <inc_lock+0x80>
 801094e:	4a29      	ldr	r2, [pc, #164]	@ (80109f4 <inc_lock+0x118>)
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	011b      	lsls	r3, r3, #4
 8010954:	4413      	add	r3, r2
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d1f2      	bne.n	8010942 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2b02      	cmp	r3, #2
 8010960:	d101      	bne.n	8010966 <inc_lock+0x8a>
 8010962:	2300      	movs	r3, #0
 8010964:	e040      	b.n	80109e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681a      	ldr	r2, [r3, #0]
 801096a:	4922      	ldr	r1, [pc, #136]	@ (80109f4 <inc_lock+0x118>)
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	011b      	lsls	r3, r3, #4
 8010970:	440b      	add	r3, r1
 8010972:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	689a      	ldr	r2, [r3, #8]
 8010978:	491e      	ldr	r1, [pc, #120]	@ (80109f4 <inc_lock+0x118>)
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	011b      	lsls	r3, r3, #4
 801097e:	440b      	add	r3, r1
 8010980:	3304      	adds	r3, #4
 8010982:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	695a      	ldr	r2, [r3, #20]
 8010988:	491a      	ldr	r1, [pc, #104]	@ (80109f4 <inc_lock+0x118>)
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	011b      	lsls	r3, r3, #4
 801098e:	440b      	add	r3, r1
 8010990:	3308      	adds	r3, #8
 8010992:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010994:	4a17      	ldr	r2, [pc, #92]	@ (80109f4 <inc_lock+0x118>)
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	011b      	lsls	r3, r3, #4
 801099a:	4413      	add	r3, r2
 801099c:	330c      	adds	r3, #12
 801099e:	2200      	movs	r2, #0
 80109a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d009      	beq.n	80109bc <inc_lock+0xe0>
 80109a8:	4a12      	ldr	r2, [pc, #72]	@ (80109f4 <inc_lock+0x118>)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	011b      	lsls	r3, r3, #4
 80109ae:	4413      	add	r3, r2
 80109b0:	330c      	adds	r3, #12
 80109b2:	881b      	ldrh	r3, [r3, #0]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d001      	beq.n	80109bc <inc_lock+0xe0>
 80109b8:	2300      	movs	r3, #0
 80109ba:	e015      	b.n	80109e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d108      	bne.n	80109d4 <inc_lock+0xf8>
 80109c2:	4a0c      	ldr	r2, [pc, #48]	@ (80109f4 <inc_lock+0x118>)
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	011b      	lsls	r3, r3, #4
 80109c8:	4413      	add	r3, r2
 80109ca:	330c      	adds	r3, #12
 80109cc:	881b      	ldrh	r3, [r3, #0]
 80109ce:	3301      	adds	r3, #1
 80109d0:	b29a      	uxth	r2, r3
 80109d2:	e001      	b.n	80109d8 <inc_lock+0xfc>
 80109d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80109d8:	4906      	ldr	r1, [pc, #24]	@ (80109f4 <inc_lock+0x118>)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	011b      	lsls	r3, r3, #4
 80109de:	440b      	add	r3, r1
 80109e0:	330c      	adds	r3, #12
 80109e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	3301      	adds	r3, #1
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3714      	adds	r7, #20
 80109ec:	46bd      	mov	sp, r7
 80109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f2:	4770      	bx	lr
 80109f4:	24003b34 	.word	0x24003b34

080109f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	3b01      	subs	r3, #1
 8010a04:	607b      	str	r3, [r7, #4]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	d825      	bhi.n	8010a58 <dec_lock+0x60>
		n = Files[i].ctr;
 8010a0c:	4a17      	ldr	r2, [pc, #92]	@ (8010a6c <dec_lock+0x74>)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	011b      	lsls	r3, r3, #4
 8010a12:	4413      	add	r3, r2
 8010a14:	330c      	adds	r3, #12
 8010a16:	881b      	ldrh	r3, [r3, #0]
 8010a18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010a1a:	89fb      	ldrh	r3, [r7, #14]
 8010a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a20:	d101      	bne.n	8010a26 <dec_lock+0x2e>
 8010a22:	2300      	movs	r3, #0
 8010a24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010a26:	89fb      	ldrh	r3, [r7, #14]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d002      	beq.n	8010a32 <dec_lock+0x3a>
 8010a2c:	89fb      	ldrh	r3, [r7, #14]
 8010a2e:	3b01      	subs	r3, #1
 8010a30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010a32:	4a0e      	ldr	r2, [pc, #56]	@ (8010a6c <dec_lock+0x74>)
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	011b      	lsls	r3, r3, #4
 8010a38:	4413      	add	r3, r2
 8010a3a:	330c      	adds	r3, #12
 8010a3c:	89fa      	ldrh	r2, [r7, #14]
 8010a3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010a40:	89fb      	ldrh	r3, [r7, #14]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d105      	bne.n	8010a52 <dec_lock+0x5a>
 8010a46:	4a09      	ldr	r2, [pc, #36]	@ (8010a6c <dec_lock+0x74>)
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	011b      	lsls	r3, r3, #4
 8010a4c:	4413      	add	r3, r2
 8010a4e:	2200      	movs	r2, #0
 8010a50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010a52:	2300      	movs	r3, #0
 8010a54:	737b      	strb	r3, [r7, #13]
 8010a56:	e001      	b.n	8010a5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010a58:	2302      	movs	r3, #2
 8010a5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010a5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3714      	adds	r7, #20
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr
 8010a6a:	bf00      	nop
 8010a6c:	24003b34 	.word	0x24003b34

08010a70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b085      	sub	sp, #20
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010a78:	2300      	movs	r3, #0
 8010a7a:	60fb      	str	r3, [r7, #12]
 8010a7c:	e010      	b.n	8010aa0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8010ab4 <clear_lock+0x44>)
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	011b      	lsls	r3, r3, #4
 8010a84:	4413      	add	r3, r2
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d105      	bne.n	8010a9a <clear_lock+0x2a>
 8010a8e:	4a09      	ldr	r2, [pc, #36]	@ (8010ab4 <clear_lock+0x44>)
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	011b      	lsls	r3, r3, #4
 8010a94:	4413      	add	r3, r2
 8010a96:	2200      	movs	r2, #0
 8010a98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	60fb      	str	r3, [r7, #12]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d9eb      	bls.n	8010a7e <clear_lock+0xe>
	}
}
 8010aa6:	bf00      	nop
 8010aa8:	bf00      	nop
 8010aaa:	3714      	adds	r7, #20
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr
 8010ab4:	24003b34 	.word	0x24003b34

08010ab8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b086      	sub	sp, #24
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	78db      	ldrb	r3, [r3, #3]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d034      	beq.n	8010b36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ad0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	7858      	ldrb	r0, [r3, #1]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010adc:	2301      	movs	r3, #1
 8010ade:	697a      	ldr	r2, [r7, #20]
 8010ae0:	f7ff fd40 	bl	8010564 <disk_write>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d002      	beq.n	8010af0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010aea:	2301      	movs	r3, #1
 8010aec:	73fb      	strb	r3, [r7, #15]
 8010aee:	e022      	b.n	8010b36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2200      	movs	r2, #0
 8010af4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010afa:	697a      	ldr	r2, [r7, #20]
 8010afc:	1ad2      	subs	r2, r2, r3
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d217      	bcs.n	8010b36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	789b      	ldrb	r3, [r3, #2]
 8010b0a:	613b      	str	r3, [r7, #16]
 8010b0c:	e010      	b.n	8010b30 <sync_window+0x78>
					wsect += fs->fsize;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b12:	697a      	ldr	r2, [r7, #20]
 8010b14:	4413      	add	r3, r2
 8010b16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	7858      	ldrb	r0, [r3, #1]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010b22:	2301      	movs	r3, #1
 8010b24:	697a      	ldr	r2, [r7, #20]
 8010b26:	f7ff fd1d 	bl	8010564 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	3b01      	subs	r3, #1
 8010b2e:	613b      	str	r3, [r7, #16]
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	d8eb      	bhi.n	8010b0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3718      	adds	r7, #24
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b52:	683a      	ldr	r2, [r7, #0]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d01b      	beq.n	8010b90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7ff ffad 	bl	8010ab8 <sync_window>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010b62:	7bfb      	ldrb	r3, [r7, #15]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d113      	bne.n	8010b90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	7858      	ldrb	r0, [r3, #1]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010b72:	2301      	movs	r3, #1
 8010b74:	683a      	ldr	r2, [r7, #0]
 8010b76:	f7ff fcd5 	bl	8010524 <disk_read>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d004      	beq.n	8010b8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010b80:	f04f 33ff 	mov.w	r3, #4294967295
 8010b84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010b86:	2301      	movs	r3, #1
 8010b88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	683a      	ldr	r2, [r7, #0]
 8010b8e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8010b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3710      	adds	r7, #16
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
	...

08010b9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f7ff ff87 	bl	8010ab8 <sync_window>
 8010baa:	4603      	mov	r3, r0
 8010bac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010bae:	7bfb      	ldrb	r3, [r7, #15]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d159      	bne.n	8010c68 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	2b03      	cmp	r3, #3
 8010bba:	d149      	bne.n	8010c50 <sync_fs+0xb4>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	791b      	ldrb	r3, [r3, #4]
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	d145      	bne.n	8010c50 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	899b      	ldrh	r3, [r3, #12]
 8010bce:	461a      	mov	r2, r3
 8010bd0:	2100      	movs	r1, #0
 8010bd2:	f7ff fda8 	bl	8010726 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	333c      	adds	r3, #60	@ 0x3c
 8010bda:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010bde:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7ff fd37 	bl	8010656 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	333c      	adds	r3, #60	@ 0x3c
 8010bec:	4921      	ldr	r1, [pc, #132]	@ (8010c74 <sync_fs+0xd8>)
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7ff fd4c 	bl	801068c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	333c      	adds	r3, #60	@ 0x3c
 8010bf8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010bfc:	491e      	ldr	r1, [pc, #120]	@ (8010c78 <sync_fs+0xdc>)
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7ff fd44 	bl	801068c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	333c      	adds	r3, #60	@ 0x3c
 8010c08:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	699b      	ldr	r3, [r3, #24]
 8010c10:	4619      	mov	r1, r3
 8010c12:	4610      	mov	r0, r2
 8010c14:	f7ff fd3a 	bl	801068c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	333c      	adds	r3, #60	@ 0x3c
 8010c1c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	695b      	ldr	r3, [r3, #20]
 8010c24:	4619      	mov	r1, r3
 8010c26:	4610      	mov	r0, r2
 8010c28:	f7ff fd30 	bl	801068c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c30:	1c5a      	adds	r2, r3, #1
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	7858      	ldrb	r0, [r3, #1]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c44:	2301      	movs	r3, #1
 8010c46:	f7ff fc8d 	bl	8010564 <disk_write>
			fs->fsi_flag = 0;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	785b      	ldrb	r3, [r3, #1]
 8010c54:	2200      	movs	r2, #0
 8010c56:	2100      	movs	r1, #0
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7ff fca3 	bl	80105a4 <disk_ioctl>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d001      	beq.n	8010c68 <sync_fs+0xcc>
 8010c64:	2301      	movs	r3, #1
 8010c66:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	41615252 	.word	0x41615252
 8010c78:	61417272 	.word	0x61417272

08010c7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	3b02      	subs	r3, #2
 8010c8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6a1b      	ldr	r3, [r3, #32]
 8010c90:	3b02      	subs	r3, #2
 8010c92:	683a      	ldr	r2, [r7, #0]
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d301      	bcc.n	8010c9c <clust2sect+0x20>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	e008      	b.n	8010cae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	895b      	ldrh	r3, [r3, #10]
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	fb03 f202 	mul.w	r2, r3, r2
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cac:	4413      	add	r3, r2
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	370c      	adds	r7, #12
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr

08010cba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010cba:	b580      	push	{r7, lr}
 8010cbc:	b086      	sub	sp, #24
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
 8010cc2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	2b01      	cmp	r3, #1
 8010cce:	d904      	bls.n	8010cda <get_fat+0x20>
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	6a1b      	ldr	r3, [r3, #32]
 8010cd4:	683a      	ldr	r2, [r7, #0]
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d302      	bcc.n	8010ce0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010cda:	2301      	movs	r3, #1
 8010cdc:	617b      	str	r3, [r7, #20]
 8010cde:	e0ba      	b.n	8010e56 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ce4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	2b03      	cmp	r3, #3
 8010cec:	f000 8082 	beq.w	8010df4 <get_fat+0x13a>
 8010cf0:	2b03      	cmp	r3, #3
 8010cf2:	f300 80a6 	bgt.w	8010e42 <get_fat+0x188>
 8010cf6:	2b01      	cmp	r3, #1
 8010cf8:	d002      	beq.n	8010d00 <get_fat+0x46>
 8010cfa:	2b02      	cmp	r3, #2
 8010cfc:	d055      	beq.n	8010daa <get_fat+0xf0>
 8010cfe:	e0a0      	b.n	8010e42 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	60fb      	str	r3, [r7, #12]
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	085b      	lsrs	r3, r3, #1
 8010d08:	68fa      	ldr	r2, [r7, #12]
 8010d0a:	4413      	add	r3, r2
 8010d0c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	899b      	ldrh	r3, [r3, #12]
 8010d16:	4619      	mov	r1, r3
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d1e:	4413      	add	r3, r2
 8010d20:	4619      	mov	r1, r3
 8010d22:	6938      	ldr	r0, [r7, #16]
 8010d24:	f7ff ff0c 	bl	8010b40 <move_window>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	f040 808c 	bne.w	8010e48 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	1c5a      	adds	r2, r3, #1
 8010d34:	60fa      	str	r2, [r7, #12]
 8010d36:	693a      	ldr	r2, [r7, #16]
 8010d38:	8992      	ldrh	r2, [r2, #12]
 8010d3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d3e:	fb01 f202 	mul.w	r2, r1, r2
 8010d42:	1a9b      	subs	r3, r3, r2
 8010d44:	693a      	ldr	r2, [r7, #16]
 8010d46:	4413      	add	r3, r2
 8010d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d4c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	899b      	ldrh	r3, [r3, #12]
 8010d56:	4619      	mov	r1, r3
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d5e:	4413      	add	r3, r2
 8010d60:	4619      	mov	r1, r3
 8010d62:	6938      	ldr	r0, [r7, #16]
 8010d64:	f7ff feec 	bl	8010b40 <move_window>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d16e      	bne.n	8010e4c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	899b      	ldrh	r3, [r3, #12]
 8010d72:	461a      	mov	r2, r3
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d7a:	fb01 f202 	mul.w	r2, r1, r2
 8010d7e:	1a9b      	subs	r3, r3, r2
 8010d80:	693a      	ldr	r2, [r7, #16]
 8010d82:	4413      	add	r3, r2
 8010d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d88:	021b      	lsls	r3, r3, #8
 8010d8a:	68ba      	ldr	r2, [r7, #8]
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	f003 0301 	and.w	r3, r3, #1
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d002      	beq.n	8010da0 <get_fat+0xe6>
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	091b      	lsrs	r3, r3, #4
 8010d9e:	e002      	b.n	8010da6 <get_fat+0xec>
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010da6:	617b      	str	r3, [r7, #20]
			break;
 8010da8:	e055      	b.n	8010e56 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	899b      	ldrh	r3, [r3, #12]
 8010db2:	085b      	lsrs	r3, r3, #1
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	4619      	mov	r1, r3
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8010dbe:	4413      	add	r3, r2
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	6938      	ldr	r0, [r7, #16]
 8010dc4:	f7ff febc 	bl	8010b40 <move_window>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d140      	bne.n	8010e50 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	005b      	lsls	r3, r3, #1
 8010dd8:	693a      	ldr	r2, [r7, #16]
 8010dda:	8992      	ldrh	r2, [r2, #12]
 8010ddc:	fbb3 f0f2 	udiv	r0, r3, r2
 8010de0:	fb00 f202 	mul.w	r2, r0, r2
 8010de4:	1a9b      	subs	r3, r3, r2
 8010de6:	440b      	add	r3, r1
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7ff fbf9 	bl	80105e0 <ld_word>
 8010dee:	4603      	mov	r3, r0
 8010df0:	617b      	str	r3, [r7, #20]
			break;
 8010df2:	e030      	b.n	8010e56 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	899b      	ldrh	r3, [r3, #12]
 8010dfc:	089b      	lsrs	r3, r3, #2
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	4619      	mov	r1, r3
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e08:	4413      	add	r3, r2
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	6938      	ldr	r0, [r7, #16]
 8010e0e:	f7ff fe97 	bl	8010b40 <move_window>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d11d      	bne.n	8010e54 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	009b      	lsls	r3, r3, #2
 8010e22:	693a      	ldr	r2, [r7, #16]
 8010e24:	8992      	ldrh	r2, [r2, #12]
 8010e26:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e2a:	fb00 f202 	mul.w	r2, r0, r2
 8010e2e:	1a9b      	subs	r3, r3, r2
 8010e30:	440b      	add	r3, r1
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7ff fbec 	bl	8010610 <ld_dword>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010e3e:	617b      	str	r3, [r7, #20]
			break;
 8010e40:	e009      	b.n	8010e56 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010e42:	2301      	movs	r3, #1
 8010e44:	617b      	str	r3, [r7, #20]
 8010e46:	e006      	b.n	8010e56 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e48:	bf00      	nop
 8010e4a:	e004      	b.n	8010e56 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e4c:	bf00      	nop
 8010e4e:	e002      	b.n	8010e56 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010e50:	bf00      	nop
 8010e52:	e000      	b.n	8010e56 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010e54:	bf00      	nop
		}
	}

	return val;
 8010e56:	697b      	ldr	r3, [r7, #20]
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3718      	adds	r7, #24
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010e60:	b590      	push	{r4, r7, lr}
 8010e62:	b089      	sub	sp, #36	@ 0x24
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	60b9      	str	r1, [r7, #8]
 8010e6a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010e6c:	2302      	movs	r3, #2
 8010e6e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	f240 8109 	bls.w	801108a <put_fat+0x22a>
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	6a1b      	ldr	r3, [r3, #32]
 8010e7c:	68ba      	ldr	r2, [r7, #8]
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	f080 8103 	bcs.w	801108a <put_fat+0x22a>
		switch (fs->fs_type) {
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	2b03      	cmp	r3, #3
 8010e8a:	f000 80b6 	beq.w	8010ffa <put_fat+0x19a>
 8010e8e:	2b03      	cmp	r3, #3
 8010e90:	f300 80fb 	bgt.w	801108a <put_fat+0x22a>
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d003      	beq.n	8010ea0 <put_fat+0x40>
 8010e98:	2b02      	cmp	r3, #2
 8010e9a:	f000 8083 	beq.w	8010fa4 <put_fat+0x144>
 8010e9e:	e0f4      	b.n	801108a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	61bb      	str	r3, [r7, #24]
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	085b      	lsrs	r3, r3, #1
 8010ea8:	69ba      	ldr	r2, [r7, #24]
 8010eaa:	4413      	add	r3, r2
 8010eac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	899b      	ldrh	r3, [r3, #12]
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	69bb      	ldr	r3, [r7, #24]
 8010eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8010ebe:	4413      	add	r3, r2
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	68f8      	ldr	r0, [r7, #12]
 8010ec4:	f7ff fe3c 	bl	8010b40 <move_window>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ecc:	7ffb      	ldrb	r3, [r7, #31]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	f040 80d4 	bne.w	801107c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010eda:	69bb      	ldr	r3, [r7, #24]
 8010edc:	1c5a      	adds	r2, r3, #1
 8010ede:	61ba      	str	r2, [r7, #24]
 8010ee0:	68fa      	ldr	r2, [r7, #12]
 8010ee2:	8992      	ldrh	r2, [r2, #12]
 8010ee4:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ee8:	fb00 f202 	mul.w	r2, r0, r2
 8010eec:	1a9b      	subs	r3, r3, r2
 8010eee:	440b      	add	r3, r1
 8010ef0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	f003 0301 	and.w	r3, r3, #1
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d00d      	beq.n	8010f18 <put_fat+0xb8>
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	b25b      	sxtb	r3, r3
 8010f02:	f003 030f 	and.w	r3, r3, #15
 8010f06:	b25a      	sxtb	r2, r3
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	011b      	lsls	r3, r3, #4
 8010f0e:	b25b      	sxtb	r3, r3
 8010f10:	4313      	orrs	r3, r2
 8010f12:	b25b      	sxtb	r3, r3
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	e001      	b.n	8010f1c <put_fat+0xbc>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	697a      	ldr	r2, [r7, #20]
 8010f1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	2201      	movs	r2, #1
 8010f24:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	899b      	ldrh	r3, [r3, #12]
 8010f2e:	4619      	mov	r1, r3
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f36:	4413      	add	r3, r2
 8010f38:	4619      	mov	r1, r3
 8010f3a:	68f8      	ldr	r0, [r7, #12]
 8010f3c:	f7ff fe00 	bl	8010b40 <move_window>
 8010f40:	4603      	mov	r3, r0
 8010f42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f44:	7ffb      	ldrb	r3, [r7, #31]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	f040 809a 	bne.w	8011080 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	899b      	ldrh	r3, [r3, #12]
 8010f56:	461a      	mov	r2, r3
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f5e:	fb00 f202 	mul.w	r2, r0, r2
 8010f62:	1a9b      	subs	r3, r3, r2
 8010f64:	440b      	add	r3, r1
 8010f66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	f003 0301 	and.w	r3, r3, #1
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d003      	beq.n	8010f7a <put_fat+0x11a>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	091b      	lsrs	r3, r3, #4
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	e00e      	b.n	8010f98 <put_fat+0x138>
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	b25b      	sxtb	r3, r3
 8010f80:	f023 030f 	bic.w	r3, r3, #15
 8010f84:	b25a      	sxtb	r2, r3
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	0a1b      	lsrs	r3, r3, #8
 8010f8a:	b25b      	sxtb	r3, r3
 8010f8c:	f003 030f 	and.w	r3, r3, #15
 8010f90:	b25b      	sxtb	r3, r3
 8010f92:	4313      	orrs	r3, r2
 8010f94:	b25b      	sxtb	r3, r3
 8010f96:	b2db      	uxtb	r3, r3
 8010f98:	697a      	ldr	r2, [r7, #20]
 8010f9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	70da      	strb	r2, [r3, #3]
			break;
 8010fa2:	e072      	b.n	801108a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	899b      	ldrh	r3, [r3, #12]
 8010fac:	085b      	lsrs	r3, r3, #1
 8010fae:	b29b      	uxth	r3, r3
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8010fb8:	4413      	add	r3, r2
 8010fba:	4619      	mov	r1, r3
 8010fbc:	68f8      	ldr	r0, [r7, #12]
 8010fbe:	f7ff fdbf 	bl	8010b40 <move_window>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010fc6:	7ffb      	ldrb	r3, [r7, #31]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d15b      	bne.n	8011084 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	005b      	lsls	r3, r3, #1
 8010fd6:	68fa      	ldr	r2, [r7, #12]
 8010fd8:	8992      	ldrh	r2, [r2, #12]
 8010fda:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fde:	fb00 f202 	mul.w	r2, r0, r2
 8010fe2:	1a9b      	subs	r3, r3, r2
 8010fe4:	440b      	add	r3, r1
 8010fe6:	687a      	ldr	r2, [r7, #4]
 8010fe8:	b292      	uxth	r2, r2
 8010fea:	4611      	mov	r1, r2
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7ff fb32 	bl	8010656 <st_word>
			fs->wflag = 1;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	70da      	strb	r2, [r3, #3]
			break;
 8010ff8:	e047      	b.n	801108a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	899b      	ldrh	r3, [r3, #12]
 8011002:	089b      	lsrs	r3, r3, #2
 8011004:	b29b      	uxth	r3, r3
 8011006:	4619      	mov	r1, r3
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	fbb3 f3f1 	udiv	r3, r3, r1
 801100e:	4413      	add	r3, r2
 8011010:	4619      	mov	r1, r3
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f7ff fd94 	bl	8010b40 <move_window>
 8011018:	4603      	mov	r3, r0
 801101a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801101c:	7ffb      	ldrb	r3, [r7, #31]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d132      	bne.n	8011088 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	009b      	lsls	r3, r3, #2
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	8992      	ldrh	r2, [r2, #12]
 8011036:	fbb3 f0f2 	udiv	r0, r3, r2
 801103a:	fb00 f202 	mul.w	r2, r0, r2
 801103e:	1a9b      	subs	r3, r3, r2
 8011040:	440b      	add	r3, r1
 8011042:	4618      	mov	r0, r3
 8011044:	f7ff fae4 	bl	8010610 <ld_dword>
 8011048:	4603      	mov	r3, r0
 801104a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801104e:	4323      	orrs	r3, r4
 8011050:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	009b      	lsls	r3, r3, #2
 801105c:	68fa      	ldr	r2, [r7, #12]
 801105e:	8992      	ldrh	r2, [r2, #12]
 8011060:	fbb3 f0f2 	udiv	r0, r3, r2
 8011064:	fb00 f202 	mul.w	r2, r0, r2
 8011068:	1a9b      	subs	r3, r3, r2
 801106a:	440b      	add	r3, r1
 801106c:	6879      	ldr	r1, [r7, #4]
 801106e:	4618      	mov	r0, r3
 8011070:	f7ff fb0c 	bl	801068c <st_dword>
			fs->wflag = 1;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2201      	movs	r2, #1
 8011078:	70da      	strb	r2, [r3, #3]
			break;
 801107a:	e006      	b.n	801108a <put_fat+0x22a>
			if (res != FR_OK) break;
 801107c:	bf00      	nop
 801107e:	e004      	b.n	801108a <put_fat+0x22a>
			if (res != FR_OK) break;
 8011080:	bf00      	nop
 8011082:	e002      	b.n	801108a <put_fat+0x22a>
			if (res != FR_OK) break;
 8011084:	bf00      	nop
 8011086:	e000      	b.n	801108a <put_fat+0x22a>
			if (res != FR_OK) break;
 8011088:	bf00      	nop
		}
	}
	return res;
 801108a:	7ffb      	ldrb	r3, [r7, #31]
}
 801108c:	4618      	mov	r0, r3
 801108e:	3724      	adds	r7, #36	@ 0x24
 8011090:	46bd      	mov	sp, r7
 8011092:	bd90      	pop	{r4, r7, pc}

08011094 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b088      	sub	sp, #32
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80110a0:	2300      	movs	r3, #0
 80110a2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d904      	bls.n	80110ba <remove_chain+0x26>
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	6a1b      	ldr	r3, [r3, #32]
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d301      	bcc.n	80110be <remove_chain+0x2a>
 80110ba:	2302      	movs	r3, #2
 80110bc:	e04b      	b.n	8011156 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d00c      	beq.n	80110de <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80110c4:	f04f 32ff 	mov.w	r2, #4294967295
 80110c8:	6879      	ldr	r1, [r7, #4]
 80110ca:	69b8      	ldr	r0, [r7, #24]
 80110cc:	f7ff fec8 	bl	8010e60 <put_fat>
 80110d0:	4603      	mov	r3, r0
 80110d2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80110d4:	7ffb      	ldrb	r3, [r7, #31]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d001      	beq.n	80110de <remove_chain+0x4a>
 80110da:	7ffb      	ldrb	r3, [r7, #31]
 80110dc:	e03b      	b.n	8011156 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80110de:	68b9      	ldr	r1, [r7, #8]
 80110e0:	68f8      	ldr	r0, [r7, #12]
 80110e2:	f7ff fdea 	bl	8010cba <get_fat>
 80110e6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d031      	beq.n	8011152 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d101      	bne.n	80110f8 <remove_chain+0x64>
 80110f4:	2302      	movs	r3, #2
 80110f6:	e02e      	b.n	8011156 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110fe:	d101      	bne.n	8011104 <remove_chain+0x70>
 8011100:	2301      	movs	r3, #1
 8011102:	e028      	b.n	8011156 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011104:	2200      	movs	r2, #0
 8011106:	68b9      	ldr	r1, [r7, #8]
 8011108:	69b8      	ldr	r0, [r7, #24]
 801110a:	f7ff fea9 	bl	8010e60 <put_fat>
 801110e:	4603      	mov	r3, r0
 8011110:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011112:	7ffb      	ldrb	r3, [r7, #31]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d001      	beq.n	801111c <remove_chain+0x88>
 8011118:	7ffb      	ldrb	r3, [r7, #31]
 801111a:	e01c      	b.n	8011156 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801111c:	69bb      	ldr	r3, [r7, #24]
 801111e:	699a      	ldr	r2, [r3, #24]
 8011120:	69bb      	ldr	r3, [r7, #24]
 8011122:	6a1b      	ldr	r3, [r3, #32]
 8011124:	3b02      	subs	r3, #2
 8011126:	429a      	cmp	r2, r3
 8011128:	d20b      	bcs.n	8011142 <remove_chain+0xae>
			fs->free_clst++;
 801112a:	69bb      	ldr	r3, [r7, #24]
 801112c:	699b      	ldr	r3, [r3, #24]
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8011134:	69bb      	ldr	r3, [r7, #24]
 8011136:	791b      	ldrb	r3, [r3, #4]
 8011138:	f043 0301 	orr.w	r3, r3, #1
 801113c:	b2da      	uxtb	r2, r3
 801113e:	69bb      	ldr	r3, [r7, #24]
 8011140:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011146:	69bb      	ldr	r3, [r7, #24]
 8011148:	6a1b      	ldr	r3, [r3, #32]
 801114a:	68ba      	ldr	r2, [r7, #8]
 801114c:	429a      	cmp	r2, r3
 801114e:	d3c6      	bcc.n	80110de <remove_chain+0x4a>
 8011150:	e000      	b.n	8011154 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011152:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011154:	2300      	movs	r3, #0
}
 8011156:	4618      	mov	r0, r3
 8011158:	3720      	adds	r7, #32
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}

0801115e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801115e:	b580      	push	{r7, lr}
 8011160:	b088      	sub	sp, #32
 8011162:	af00      	add	r7, sp, #0
 8011164:	6078      	str	r0, [r7, #4]
 8011166:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d10d      	bne.n	8011190 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	695b      	ldr	r3, [r3, #20]
 8011178:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801117a:	69bb      	ldr	r3, [r7, #24]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d004      	beq.n	801118a <create_chain+0x2c>
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	6a1b      	ldr	r3, [r3, #32]
 8011184:	69ba      	ldr	r2, [r7, #24]
 8011186:	429a      	cmp	r2, r3
 8011188:	d31b      	bcc.n	80111c2 <create_chain+0x64>
 801118a:	2301      	movs	r3, #1
 801118c:	61bb      	str	r3, [r7, #24]
 801118e:	e018      	b.n	80111c2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011190:	6839      	ldr	r1, [r7, #0]
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7ff fd91 	bl	8010cba <get_fat>
 8011198:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2b01      	cmp	r3, #1
 801119e:	d801      	bhi.n	80111a4 <create_chain+0x46>
 80111a0:	2301      	movs	r3, #1
 80111a2:	e070      	b.n	8011286 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111aa:	d101      	bne.n	80111b0 <create_chain+0x52>
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	e06a      	b.n	8011286 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	6a1b      	ldr	r3, [r3, #32]
 80111b4:	68fa      	ldr	r2, [r7, #12]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d201      	bcs.n	80111be <create_chain+0x60>
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	e063      	b.n	8011286 <create_chain+0x128>
		scl = clst;
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80111c2:	69bb      	ldr	r3, [r7, #24]
 80111c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80111c6:	69fb      	ldr	r3, [r7, #28]
 80111c8:	3301      	adds	r3, #1
 80111ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	6a1b      	ldr	r3, [r3, #32]
 80111d0:	69fa      	ldr	r2, [r7, #28]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d307      	bcc.n	80111e6 <create_chain+0x88>
				ncl = 2;
 80111d6:	2302      	movs	r3, #2
 80111d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80111da:	69fa      	ldr	r2, [r7, #28]
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	429a      	cmp	r2, r3
 80111e0:	d901      	bls.n	80111e6 <create_chain+0x88>
 80111e2:	2300      	movs	r3, #0
 80111e4:	e04f      	b.n	8011286 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80111e6:	69f9      	ldr	r1, [r7, #28]
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f7ff fd66 	bl	8010cba <get_fat>
 80111ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d00e      	beq.n	8011214 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	2b01      	cmp	r3, #1
 80111fa:	d003      	beq.n	8011204 <create_chain+0xa6>
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011202:	d101      	bne.n	8011208 <create_chain+0xaa>
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	e03e      	b.n	8011286 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011208:	69fa      	ldr	r2, [r7, #28]
 801120a:	69bb      	ldr	r3, [r7, #24]
 801120c:	429a      	cmp	r2, r3
 801120e:	d1da      	bne.n	80111c6 <create_chain+0x68>
 8011210:	2300      	movs	r3, #0
 8011212:	e038      	b.n	8011286 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011214:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011216:	f04f 32ff 	mov.w	r2, #4294967295
 801121a:	69f9      	ldr	r1, [r7, #28]
 801121c:	6938      	ldr	r0, [r7, #16]
 801121e:	f7ff fe1f 	bl	8010e60 <put_fat>
 8011222:	4603      	mov	r3, r0
 8011224:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011226:	7dfb      	ldrb	r3, [r7, #23]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d109      	bne.n	8011240 <create_chain+0xe2>
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d006      	beq.n	8011240 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011232:	69fa      	ldr	r2, [r7, #28]
 8011234:	6839      	ldr	r1, [r7, #0]
 8011236:	6938      	ldr	r0, [r7, #16]
 8011238:	f7ff fe12 	bl	8010e60 <put_fat>
 801123c:	4603      	mov	r3, r0
 801123e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011240:	7dfb      	ldrb	r3, [r7, #23]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d116      	bne.n	8011274 <create_chain+0x116>
		fs->last_clst = ncl;
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	69fa      	ldr	r2, [r7, #28]
 801124a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	699a      	ldr	r2, [r3, #24]
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	6a1b      	ldr	r3, [r3, #32]
 8011254:	3b02      	subs	r3, #2
 8011256:	429a      	cmp	r2, r3
 8011258:	d804      	bhi.n	8011264 <create_chain+0x106>
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	699b      	ldr	r3, [r3, #24]
 801125e:	1e5a      	subs	r2, r3, #1
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8011264:	693b      	ldr	r3, [r7, #16]
 8011266:	791b      	ldrb	r3, [r3, #4]
 8011268:	f043 0301 	orr.w	r3, r3, #1
 801126c:	b2da      	uxtb	r2, r3
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	711a      	strb	r2, [r3, #4]
 8011272:	e007      	b.n	8011284 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011274:	7dfb      	ldrb	r3, [r7, #23]
 8011276:	2b01      	cmp	r3, #1
 8011278:	d102      	bne.n	8011280 <create_chain+0x122>
 801127a:	f04f 33ff 	mov.w	r3, #4294967295
 801127e:	e000      	b.n	8011282 <create_chain+0x124>
 8011280:	2301      	movs	r3, #1
 8011282:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011284:	69fb      	ldr	r3, [r7, #28]
}
 8011286:	4618      	mov	r0, r3
 8011288:	3720      	adds	r7, #32
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}

0801128e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801128e:	b480      	push	{r7}
 8011290:	b087      	sub	sp, #28
 8011292:	af00      	add	r7, sp, #0
 8011294:	6078      	str	r0, [r7, #4]
 8011296:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112a2:	3304      	adds	r3, #4
 80112a4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	899b      	ldrh	r3, [r3, #12]
 80112aa:	461a      	mov	r2, r3
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80112b2:	68fa      	ldr	r2, [r7, #12]
 80112b4:	8952      	ldrh	r2, [r2, #10]
 80112b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80112ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	1d1a      	adds	r2, r3, #4
 80112c0:	613a      	str	r2, [r7, #16]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d101      	bne.n	80112d0 <clmt_clust+0x42>
 80112cc:	2300      	movs	r3, #0
 80112ce:	e010      	b.n	80112f2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80112d0:	697a      	ldr	r2, [r7, #20]
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d307      	bcc.n	80112e8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80112d8:	697a      	ldr	r2, [r7, #20]
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	1ad3      	subs	r3, r2, r3
 80112de:	617b      	str	r3, [r7, #20]
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	3304      	adds	r3, #4
 80112e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80112e6:	e7e9      	b.n	80112bc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80112e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	681a      	ldr	r2, [r3, #0]
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	4413      	add	r3, r2
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	371c      	adds	r7, #28
 80112f6:	46bd      	mov	sp, r7
 80112f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fc:	4770      	bx	lr

080112fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80112fe:	b580      	push	{r7, lr}
 8011300:	b086      	sub	sp, #24
 8011302:	af00      	add	r7, sp, #0
 8011304:	6078      	str	r0, [r7, #4]
 8011306:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011314:	d204      	bcs.n	8011320 <dir_sdi+0x22>
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	f003 031f 	and.w	r3, r3, #31
 801131c:	2b00      	cmp	r3, #0
 801131e:	d001      	beq.n	8011324 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011320:	2302      	movs	r3, #2
 8011322:	e071      	b.n	8011408 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	683a      	ldr	r2, [r7, #0]
 8011328:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	689b      	ldr	r3, [r3, #8]
 801132e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d106      	bne.n	8011344 <dir_sdi+0x46>
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	2b02      	cmp	r3, #2
 801133c:	d902      	bls.n	8011344 <dir_sdi+0x46>
		clst = fs->dirbase;
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011342:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d10c      	bne.n	8011364 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	095b      	lsrs	r3, r3, #5
 801134e:	693a      	ldr	r2, [r7, #16]
 8011350:	8912      	ldrh	r2, [r2, #8]
 8011352:	4293      	cmp	r3, r2
 8011354:	d301      	bcc.n	801135a <dir_sdi+0x5c>
 8011356:	2302      	movs	r3, #2
 8011358:	e056      	b.n	8011408 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	61da      	str	r2, [r3, #28]
 8011362:	e02d      	b.n	80113c0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	895b      	ldrh	r3, [r3, #10]
 8011368:	461a      	mov	r2, r3
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	899b      	ldrh	r3, [r3, #12]
 801136e:	fb02 f303 	mul.w	r3, r2, r3
 8011372:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011374:	e019      	b.n	80113aa <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6979      	ldr	r1, [r7, #20]
 801137a:	4618      	mov	r0, r3
 801137c:	f7ff fc9d 	bl	8010cba <get_fat>
 8011380:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011388:	d101      	bne.n	801138e <dir_sdi+0x90>
 801138a:	2301      	movs	r3, #1
 801138c:	e03c      	b.n	8011408 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	2b01      	cmp	r3, #1
 8011392:	d904      	bls.n	801139e <dir_sdi+0xa0>
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	6a1b      	ldr	r3, [r3, #32]
 8011398:	697a      	ldr	r2, [r7, #20]
 801139a:	429a      	cmp	r2, r3
 801139c:	d301      	bcc.n	80113a2 <dir_sdi+0xa4>
 801139e:	2302      	movs	r3, #2
 80113a0:	e032      	b.n	8011408 <dir_sdi+0x10a>
			ofs -= csz;
 80113a2:	683a      	ldr	r2, [r7, #0]
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	1ad3      	subs	r3, r2, r3
 80113a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80113aa:	683a      	ldr	r2, [r7, #0]
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d2e1      	bcs.n	8011376 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80113b2:	6979      	ldr	r1, [r7, #20]
 80113b4:	6938      	ldr	r0, [r7, #16]
 80113b6:	f7ff fc61 	bl	8010c7c <clust2sect>
 80113ba:	4602      	mov	r2, r0
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	697a      	ldr	r2, [r7, #20]
 80113c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	69db      	ldr	r3, [r3, #28]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d101      	bne.n	80113d2 <dir_sdi+0xd4>
 80113ce:	2302      	movs	r3, #2
 80113d0:	e01a      	b.n	8011408 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	69da      	ldr	r2, [r3, #28]
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	899b      	ldrh	r3, [r3, #12]
 80113da:	4619      	mov	r1, r3
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	fbb3 f3f1 	udiv	r3, r3, r1
 80113e2:	441a      	add	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	899b      	ldrh	r3, [r3, #12]
 80113f2:	461a      	mov	r2, r3
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80113fa:	fb00 f202 	mul.w	r2, r0, r2
 80113fe:	1a9b      	subs	r3, r3, r2
 8011400:	18ca      	adds	r2, r1, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011406:	2300      	movs	r3, #0
}
 8011408:	4618      	mov	r0, r3
 801140a:	3718      	adds	r7, #24
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b086      	sub	sp, #24
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	695b      	ldr	r3, [r3, #20]
 8011424:	3320      	adds	r3, #32
 8011426:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	69db      	ldr	r3, [r3, #28]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d003      	beq.n	8011438 <dir_next+0x28>
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011436:	d301      	bcc.n	801143c <dir_next+0x2c>
 8011438:	2304      	movs	r3, #4
 801143a:	e0bb      	b.n	80115b4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	899b      	ldrh	r3, [r3, #12]
 8011440:	461a      	mov	r2, r3
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	fbb3 f1f2 	udiv	r1, r3, r2
 8011448:	fb01 f202 	mul.w	r2, r1, r2
 801144c:	1a9b      	subs	r3, r3, r2
 801144e:	2b00      	cmp	r3, #0
 8011450:	f040 809d 	bne.w	801158e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	69db      	ldr	r3, [r3, #28]
 8011458:	1c5a      	adds	r2, r3, #1
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	699b      	ldr	r3, [r3, #24]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d10b      	bne.n	801147e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	095b      	lsrs	r3, r3, #5
 801146a:	68fa      	ldr	r2, [r7, #12]
 801146c:	8912      	ldrh	r2, [r2, #8]
 801146e:	4293      	cmp	r3, r2
 8011470:	f0c0 808d 	bcc.w	801158e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2200      	movs	r2, #0
 8011478:	61da      	str	r2, [r3, #28]
 801147a:	2304      	movs	r3, #4
 801147c:	e09a      	b.n	80115b4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	899b      	ldrh	r3, [r3, #12]
 8011482:	461a      	mov	r2, r3
 8011484:	68bb      	ldr	r3, [r7, #8]
 8011486:	fbb3 f3f2 	udiv	r3, r3, r2
 801148a:	68fa      	ldr	r2, [r7, #12]
 801148c:	8952      	ldrh	r2, [r2, #10]
 801148e:	3a01      	subs	r2, #1
 8011490:	4013      	ands	r3, r2
 8011492:	2b00      	cmp	r3, #0
 8011494:	d17b      	bne.n	801158e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	699b      	ldr	r3, [r3, #24]
 801149c:	4619      	mov	r1, r3
 801149e:	4610      	mov	r0, r2
 80114a0:	f7ff fc0b 	bl	8010cba <get_fat>
 80114a4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d801      	bhi.n	80114b0 <dir_next+0xa0>
 80114ac:	2302      	movs	r3, #2
 80114ae:	e081      	b.n	80115b4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114b6:	d101      	bne.n	80114bc <dir_next+0xac>
 80114b8:	2301      	movs	r3, #1
 80114ba:	e07b      	b.n	80115b4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	6a1b      	ldr	r3, [r3, #32]
 80114c0:	697a      	ldr	r2, [r7, #20]
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d359      	bcc.n	801157a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d104      	bne.n	80114d6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2200      	movs	r2, #0
 80114d0:	61da      	str	r2, [r3, #28]
 80114d2:	2304      	movs	r3, #4
 80114d4:	e06e      	b.n	80115b4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	699b      	ldr	r3, [r3, #24]
 80114dc:	4619      	mov	r1, r3
 80114de:	4610      	mov	r0, r2
 80114e0:	f7ff fe3d 	bl	801115e <create_chain>
 80114e4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d101      	bne.n	80114f0 <dir_next+0xe0>
 80114ec:	2307      	movs	r3, #7
 80114ee:	e061      	b.n	80115b4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	2b01      	cmp	r3, #1
 80114f4:	d101      	bne.n	80114fa <dir_next+0xea>
 80114f6:	2302      	movs	r3, #2
 80114f8:	e05c      	b.n	80115b4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011500:	d101      	bne.n	8011506 <dir_next+0xf6>
 8011502:	2301      	movs	r3, #1
 8011504:	e056      	b.n	80115b4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011506:	68f8      	ldr	r0, [r7, #12]
 8011508:	f7ff fad6 	bl	8010ab8 <sync_window>
 801150c:	4603      	mov	r3, r0
 801150e:	2b00      	cmp	r3, #0
 8011510:	d001      	beq.n	8011516 <dir_next+0x106>
 8011512:	2301      	movs	r3, #1
 8011514:	e04e      	b.n	80115b4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	899b      	ldrh	r3, [r3, #12]
 8011520:	461a      	mov	r2, r3
 8011522:	2100      	movs	r1, #0
 8011524:	f7ff f8ff 	bl	8010726 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011528:	2300      	movs	r3, #0
 801152a:	613b      	str	r3, [r7, #16]
 801152c:	6979      	ldr	r1, [r7, #20]
 801152e:	68f8      	ldr	r0, [r7, #12]
 8011530:	f7ff fba4 	bl	8010c7c <clust2sect>
 8011534:	4602      	mov	r2, r0
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	639a      	str	r2, [r3, #56]	@ 0x38
 801153a:	e012      	b.n	8011562 <dir_next+0x152>
						fs->wflag = 1;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2201      	movs	r2, #1
 8011540:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011542:	68f8      	ldr	r0, [r7, #12]
 8011544:	f7ff fab8 	bl	8010ab8 <sync_window>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d001      	beq.n	8011552 <dir_next+0x142>
 801154e:	2301      	movs	r3, #1
 8011550:	e030      	b.n	80115b4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	3301      	adds	r3, #1
 8011556:	613b      	str	r3, [r7, #16]
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801155c:	1c5a      	adds	r2, r3, #1
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	639a      	str	r2, [r3, #56]	@ 0x38
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	895b      	ldrh	r3, [r3, #10]
 8011566:	461a      	mov	r2, r3
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	4293      	cmp	r3, r2
 801156c:	d3e6      	bcc.n	801153c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	1ad2      	subs	r2, r2, r3
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	697a      	ldr	r2, [r7, #20]
 801157e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011580:	6979      	ldr	r1, [r7, #20]
 8011582:	68f8      	ldr	r0, [r7, #12]
 8011584:	f7ff fb7a 	bl	8010c7c <clust2sect>
 8011588:	4602      	mov	r2, r0
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	68ba      	ldr	r2, [r7, #8]
 8011592:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	899b      	ldrh	r3, [r3, #12]
 801159e:	461a      	mov	r2, r3
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80115a6:	fb00 f202 	mul.w	r2, r0, r2
 80115aa:	1a9b      	subs	r3, r3, r2
 80115ac:	18ca      	adds	r2, r1, r3
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80115b2:	2300      	movs	r3, #0
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3718      	adds	r7, #24
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b086      	sub	sp, #24
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80115cc:	2100      	movs	r1, #0
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f7ff fe95 	bl	80112fe <dir_sdi>
 80115d4:	4603      	mov	r3, r0
 80115d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80115d8:	7dfb      	ldrb	r3, [r7, #23]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d12b      	bne.n	8011636 <dir_alloc+0x7a>
		n = 0;
 80115de:	2300      	movs	r3, #0
 80115e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	69db      	ldr	r3, [r3, #28]
 80115e6:	4619      	mov	r1, r3
 80115e8:	68f8      	ldr	r0, [r7, #12]
 80115ea:	f7ff faa9 	bl	8010b40 <move_window>
 80115ee:	4603      	mov	r3, r0
 80115f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80115f2:	7dfb      	ldrb	r3, [r7, #23]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d11d      	bne.n	8011634 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6a1b      	ldr	r3, [r3, #32]
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	2be5      	cmp	r3, #229	@ 0xe5
 8011600:	d004      	beq.n	801160c <dir_alloc+0x50>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6a1b      	ldr	r3, [r3, #32]
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d107      	bne.n	801161c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	3301      	adds	r3, #1
 8011610:	613b      	str	r3, [r7, #16]
 8011612:	693a      	ldr	r2, [r7, #16]
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	429a      	cmp	r2, r3
 8011618:	d102      	bne.n	8011620 <dir_alloc+0x64>
 801161a:	e00c      	b.n	8011636 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801161c:	2300      	movs	r3, #0
 801161e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011620:	2101      	movs	r1, #1
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f7ff fef4 	bl	8011410 <dir_next>
 8011628:	4603      	mov	r3, r0
 801162a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801162c:	7dfb      	ldrb	r3, [r7, #23]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d0d7      	beq.n	80115e2 <dir_alloc+0x26>
 8011632:	e000      	b.n	8011636 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011634:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011636:	7dfb      	ldrb	r3, [r7, #23]
 8011638:	2b04      	cmp	r3, #4
 801163a:	d101      	bne.n	8011640 <dir_alloc+0x84>
 801163c:	2307      	movs	r3, #7
 801163e:	75fb      	strb	r3, [r7, #23]
	return res;
 8011640:	7dfb      	ldrb	r3, [r7, #23]
}
 8011642:	4618      	mov	r0, r3
 8011644:	3718      	adds	r7, #24
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801164a:	b580      	push	{r7, lr}
 801164c:	b084      	sub	sp, #16
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
 8011652:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	331a      	adds	r3, #26
 8011658:	4618      	mov	r0, r3
 801165a:	f7fe ffc1 	bl	80105e0 <ld_word>
 801165e:	4603      	mov	r3, r0
 8011660:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	2b03      	cmp	r3, #3
 8011668:	d109      	bne.n	801167e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	3314      	adds	r3, #20
 801166e:	4618      	mov	r0, r3
 8011670:	f7fe ffb6 	bl	80105e0 <ld_word>
 8011674:	4603      	mov	r3, r0
 8011676:	041b      	lsls	r3, r3, #16
 8011678:	68fa      	ldr	r2, [r7, #12]
 801167a:	4313      	orrs	r3, r2
 801167c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801167e:	68fb      	ldr	r3, [r7, #12]
}
 8011680:	4618      	mov	r0, r3
 8011682:	3710      	adds	r7, #16
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}

08011688 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b084      	sub	sp, #16
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	331a      	adds	r3, #26
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	b292      	uxth	r2, r2
 801169c:	4611      	mov	r1, r2
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fe ffd9 	bl	8010656 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	2b03      	cmp	r3, #3
 80116aa:	d109      	bne.n	80116c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	f103 0214 	add.w	r2, r3, #20
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	0c1b      	lsrs	r3, r3, #16
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	4619      	mov	r1, r3
 80116ba:	4610      	mov	r0, r2
 80116bc:	f7fe ffcb 	bl	8010656 <st_word>
	}
}
 80116c0:	bf00      	nop
 80116c2:	3710      	adds	r7, #16
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80116c8:	b590      	push	{r4, r7, lr}
 80116ca:	b087      	sub	sp, #28
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	331a      	adds	r3, #26
 80116d6:	4618      	mov	r0, r3
 80116d8:	f7fe ff82 	bl	80105e0 <ld_word>
 80116dc:	4603      	mov	r3, r0
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d001      	beq.n	80116e6 <cmp_lfn+0x1e>
 80116e2:	2300      	movs	r3, #0
 80116e4:	e059      	b.n	801179a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80116ee:	1e5a      	subs	r2, r3, #1
 80116f0:	4613      	mov	r3, r2
 80116f2:	005b      	lsls	r3, r3, #1
 80116f4:	4413      	add	r3, r2
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	4413      	add	r3, r2
 80116fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80116fc:	2301      	movs	r3, #1
 80116fe:	81fb      	strh	r3, [r7, #14]
 8011700:	2300      	movs	r3, #0
 8011702:	613b      	str	r3, [r7, #16]
 8011704:	e033      	b.n	801176e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011706:	4a27      	ldr	r2, [pc, #156]	@ (80117a4 <cmp_lfn+0xdc>)
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	4413      	add	r3, r2
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	461a      	mov	r2, r3
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	4413      	add	r3, r2
 8011714:	4618      	mov	r0, r3
 8011716:	f7fe ff63 	bl	80105e0 <ld_word>
 801171a:	4603      	mov	r3, r0
 801171c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801171e:	89fb      	ldrh	r3, [r7, #14]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d01a      	beq.n	801175a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011724:	697b      	ldr	r3, [r7, #20]
 8011726:	2bfe      	cmp	r3, #254	@ 0xfe
 8011728:	d812      	bhi.n	8011750 <cmp_lfn+0x88>
 801172a:	89bb      	ldrh	r3, [r7, #12]
 801172c:	4618      	mov	r0, r3
 801172e:	f002 ff73 	bl	8014618 <ff_wtoupper>
 8011732:	4603      	mov	r3, r0
 8011734:	461c      	mov	r4, r3
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	1c5a      	adds	r2, r3, #1
 801173a:	617a      	str	r2, [r7, #20]
 801173c:	005b      	lsls	r3, r3, #1
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	4413      	add	r3, r2
 8011742:	881b      	ldrh	r3, [r3, #0]
 8011744:	4618      	mov	r0, r3
 8011746:	f002 ff67 	bl	8014618 <ff_wtoupper>
 801174a:	4603      	mov	r3, r0
 801174c:	429c      	cmp	r4, r3
 801174e:	d001      	beq.n	8011754 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011750:	2300      	movs	r3, #0
 8011752:	e022      	b.n	801179a <cmp_lfn+0xd2>
			}
			wc = uc;
 8011754:	89bb      	ldrh	r3, [r7, #12]
 8011756:	81fb      	strh	r3, [r7, #14]
 8011758:	e006      	b.n	8011768 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801175a:	89bb      	ldrh	r3, [r7, #12]
 801175c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011760:	4293      	cmp	r3, r2
 8011762:	d001      	beq.n	8011768 <cmp_lfn+0xa0>
 8011764:	2300      	movs	r3, #0
 8011766:	e018      	b.n	801179a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	3301      	adds	r3, #1
 801176c:	613b      	str	r3, [r7, #16]
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	2b0c      	cmp	r3, #12
 8011772:	d9c8      	bls.n	8011706 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801177c:	2b00      	cmp	r3, #0
 801177e:	d00b      	beq.n	8011798 <cmp_lfn+0xd0>
 8011780:	89fb      	ldrh	r3, [r7, #14]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d008      	beq.n	8011798 <cmp_lfn+0xd0>
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	005b      	lsls	r3, r3, #1
 801178a:	687a      	ldr	r2, [r7, #4]
 801178c:	4413      	add	r3, r2
 801178e:	881b      	ldrh	r3, [r3, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d001      	beq.n	8011798 <cmp_lfn+0xd0>
 8011794:	2300      	movs	r3, #0
 8011796:	e000      	b.n	801179a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011798:	2301      	movs	r3, #1
}
 801179a:	4618      	mov	r0, r3
 801179c:	371c      	adds	r7, #28
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd90      	pop	{r4, r7, pc}
 80117a2:	bf00      	nop
 80117a4:	08014ce8 	.word	0x08014ce8

080117a8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b086      	sub	sp, #24
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	331a      	adds	r3, #26
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7fe ff12 	bl	80105e0 <ld_word>
 80117bc:	4603      	mov	r3, r0
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d001      	beq.n	80117c6 <pick_lfn+0x1e>
 80117c2:	2300      	movs	r3, #0
 80117c4:	e04d      	b.n	8011862 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	781b      	ldrb	r3, [r3, #0]
 80117ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80117ce:	1e5a      	subs	r2, r3, #1
 80117d0:	4613      	mov	r3, r2
 80117d2:	005b      	lsls	r3, r3, #1
 80117d4:	4413      	add	r3, r2
 80117d6:	009b      	lsls	r3, r3, #2
 80117d8:	4413      	add	r3, r2
 80117da:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80117dc:	2301      	movs	r3, #1
 80117de:	81fb      	strh	r3, [r7, #14]
 80117e0:	2300      	movs	r3, #0
 80117e2:	613b      	str	r3, [r7, #16]
 80117e4:	e028      	b.n	8011838 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80117e6:	4a21      	ldr	r2, [pc, #132]	@ (801186c <pick_lfn+0xc4>)
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	4413      	add	r3, r2
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	461a      	mov	r2, r3
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	4413      	add	r3, r2
 80117f4:	4618      	mov	r0, r3
 80117f6:	f7fe fef3 	bl	80105e0 <ld_word>
 80117fa:	4603      	mov	r3, r0
 80117fc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80117fe:	89fb      	ldrh	r3, [r7, #14]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d00f      	beq.n	8011824 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	2bfe      	cmp	r3, #254	@ 0xfe
 8011808:	d901      	bls.n	801180e <pick_lfn+0x66>
 801180a:	2300      	movs	r3, #0
 801180c:	e029      	b.n	8011862 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801180e:	89bb      	ldrh	r3, [r7, #12]
 8011810:	81fb      	strh	r3, [r7, #14]
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	1c5a      	adds	r2, r3, #1
 8011816:	617a      	str	r2, [r7, #20]
 8011818:	005b      	lsls	r3, r3, #1
 801181a:	687a      	ldr	r2, [r7, #4]
 801181c:	4413      	add	r3, r2
 801181e:	89fa      	ldrh	r2, [r7, #14]
 8011820:	801a      	strh	r2, [r3, #0]
 8011822:	e006      	b.n	8011832 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011824:	89bb      	ldrh	r3, [r7, #12]
 8011826:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801182a:	4293      	cmp	r3, r2
 801182c:	d001      	beq.n	8011832 <pick_lfn+0x8a>
 801182e:	2300      	movs	r3, #0
 8011830:	e017      	b.n	8011862 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	3301      	adds	r3, #1
 8011836:	613b      	str	r3, [r7, #16]
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	2b0c      	cmp	r3, #12
 801183c:	d9d3      	bls.n	80117e6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011846:	2b00      	cmp	r3, #0
 8011848:	d00a      	beq.n	8011860 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	2bfe      	cmp	r3, #254	@ 0xfe
 801184e:	d901      	bls.n	8011854 <pick_lfn+0xac>
 8011850:	2300      	movs	r3, #0
 8011852:	e006      	b.n	8011862 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	005b      	lsls	r3, r3, #1
 8011858:	687a      	ldr	r2, [r7, #4]
 801185a:	4413      	add	r3, r2
 801185c:	2200      	movs	r2, #0
 801185e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8011860:	2301      	movs	r3, #1
}
 8011862:	4618      	mov	r0, r3
 8011864:	3718      	adds	r7, #24
 8011866:	46bd      	mov	sp, r7
 8011868:	bd80      	pop	{r7, pc}
 801186a:	bf00      	nop
 801186c:	08014ce8 	.word	0x08014ce8

08011870 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b088      	sub	sp, #32
 8011874:	af00      	add	r7, sp, #0
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	60b9      	str	r1, [r7, #8]
 801187a:	4611      	mov	r1, r2
 801187c:	461a      	mov	r2, r3
 801187e:	460b      	mov	r3, r1
 8011880:	71fb      	strb	r3, [r7, #7]
 8011882:	4613      	mov	r3, r2
 8011884:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	330d      	adds	r3, #13
 801188a:	79ba      	ldrb	r2, [r7, #6]
 801188c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	330b      	adds	r3, #11
 8011892:	220f      	movs	r2, #15
 8011894:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	330c      	adds	r3, #12
 801189a:	2200      	movs	r2, #0
 801189c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	331a      	adds	r3, #26
 80118a2:	2100      	movs	r1, #0
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7fe fed6 	bl	8010656 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80118aa:	79fb      	ldrb	r3, [r7, #7]
 80118ac:	1e5a      	subs	r2, r3, #1
 80118ae:	4613      	mov	r3, r2
 80118b0:	005b      	lsls	r3, r3, #1
 80118b2:	4413      	add	r3, r2
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	4413      	add	r3, r2
 80118b8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80118ba:	2300      	movs	r3, #0
 80118bc:	82fb      	strh	r3, [r7, #22]
 80118be:	2300      	movs	r3, #0
 80118c0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80118c2:	8afb      	ldrh	r3, [r7, #22]
 80118c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80118c8:	4293      	cmp	r3, r2
 80118ca:	d007      	beq.n	80118dc <put_lfn+0x6c>
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	1c5a      	adds	r2, r3, #1
 80118d0:	61fa      	str	r2, [r7, #28]
 80118d2:	005b      	lsls	r3, r3, #1
 80118d4:	68fa      	ldr	r2, [r7, #12]
 80118d6:	4413      	add	r3, r2
 80118d8:	881b      	ldrh	r3, [r3, #0]
 80118da:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80118dc:	4a17      	ldr	r2, [pc, #92]	@ (801193c <put_lfn+0xcc>)
 80118de:	69bb      	ldr	r3, [r7, #24]
 80118e0:	4413      	add	r3, r2
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	461a      	mov	r2, r3
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	4413      	add	r3, r2
 80118ea:	8afa      	ldrh	r2, [r7, #22]
 80118ec:	4611      	mov	r1, r2
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fe feb1 	bl	8010656 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80118f4:	8afb      	ldrh	r3, [r7, #22]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d102      	bne.n	8011900 <put_lfn+0x90>
 80118fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80118fe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011900:	69bb      	ldr	r3, [r7, #24]
 8011902:	3301      	adds	r3, #1
 8011904:	61bb      	str	r3, [r7, #24]
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	2b0c      	cmp	r3, #12
 801190a:	d9da      	bls.n	80118c2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801190c:	8afb      	ldrh	r3, [r7, #22]
 801190e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011912:	4293      	cmp	r3, r2
 8011914:	d006      	beq.n	8011924 <put_lfn+0xb4>
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	005b      	lsls	r3, r3, #1
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	4413      	add	r3, r2
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d103      	bne.n	801192c <put_lfn+0xbc>
 8011924:	79fb      	ldrb	r3, [r7, #7]
 8011926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801192a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	79fa      	ldrb	r2, [r7, #7]
 8011930:	701a      	strb	r2, [r3, #0]
}
 8011932:	bf00      	nop
 8011934:	3720      	adds	r7, #32
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	08014ce8 	.word	0x08014ce8

08011940 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b08c      	sub	sp, #48	@ 0x30
 8011944:	af00      	add	r7, sp, #0
 8011946:	60f8      	str	r0, [r7, #12]
 8011948:	60b9      	str	r1, [r7, #8]
 801194a:	607a      	str	r2, [r7, #4]
 801194c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801194e:	220b      	movs	r2, #11
 8011950:	68b9      	ldr	r1, [r7, #8]
 8011952:	68f8      	ldr	r0, [r7, #12]
 8011954:	f7fe fec6 	bl	80106e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	2b05      	cmp	r3, #5
 801195c:	d929      	bls.n	80119b2 <gen_numname+0x72>
		sr = seq;
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011962:	e020      	b.n	80119a6 <gen_numname+0x66>
			wc = *lfn++;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	1c9a      	adds	r2, r3, #2
 8011968:	607a      	str	r2, [r7, #4]
 801196a:	881b      	ldrh	r3, [r3, #0]
 801196c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801196e:	2300      	movs	r3, #0
 8011970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011972:	e015      	b.n	80119a0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011974:	69fb      	ldr	r3, [r7, #28]
 8011976:	005a      	lsls	r2, r3, #1
 8011978:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801197a:	f003 0301 	and.w	r3, r3, #1
 801197e:	4413      	add	r3, r2
 8011980:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011982:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011984:	085b      	lsrs	r3, r3, #1
 8011986:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801198e:	2b00      	cmp	r3, #0
 8011990:	d003      	beq.n	801199a <gen_numname+0x5a>
 8011992:	69fa      	ldr	r2, [r7, #28]
 8011994:	4b30      	ldr	r3, [pc, #192]	@ (8011a58 <gen_numname+0x118>)
 8011996:	4053      	eors	r3, r2
 8011998:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801199a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801199c:	3301      	adds	r3, #1
 801199e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80119a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119a2:	2b0f      	cmp	r3, #15
 80119a4:	d9e6      	bls.n	8011974 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	881b      	ldrh	r3, [r3, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d1da      	bne.n	8011964 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80119b2:	2307      	movs	r3, #7
 80119b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	b2db      	uxtb	r3, r3
 80119ba:	f003 030f 	and.w	r3, r3, #15
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	3330      	adds	r3, #48	@ 0x30
 80119c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80119c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80119ca:	2b39      	cmp	r3, #57	@ 0x39
 80119cc:	d904      	bls.n	80119d8 <gen_numname+0x98>
 80119ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80119d2:	3307      	adds	r3, #7
 80119d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80119d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119da:	1e5a      	subs	r2, r3, #1
 80119dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80119de:	3330      	adds	r3, #48	@ 0x30
 80119e0:	443b      	add	r3, r7
 80119e2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80119e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	091b      	lsrs	r3, r3, #4
 80119ee:	603b      	str	r3, [r7, #0]
	} while (seq);
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d1df      	bne.n	80119b6 <gen_numname+0x76>
	ns[i] = '~';
 80119f6:	f107 0214 	add.w	r2, r7, #20
 80119fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119fc:	4413      	add	r3, r2
 80119fe:	227e      	movs	r2, #126	@ 0x7e
 8011a00:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011a02:	2300      	movs	r3, #0
 8011a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a06:	e002      	b.n	8011a0e <gen_numname+0xce>
 8011a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d205      	bcs.n	8011a22 <gen_numname+0xe2>
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a1a:	4413      	add	r3, r2
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	2b20      	cmp	r3, #32
 8011a20:	d1f2      	bne.n	8011a08 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a24:	2b07      	cmp	r3, #7
 8011a26:	d807      	bhi.n	8011a38 <gen_numname+0xf8>
 8011a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a2a:	1c5a      	adds	r2, r3, #1
 8011a2c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8011a2e:	3330      	adds	r3, #48	@ 0x30
 8011a30:	443b      	add	r3, r7
 8011a32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011a36:	e000      	b.n	8011a3a <gen_numname+0xfa>
 8011a38:	2120      	movs	r1, #32
 8011a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a3c:	1c5a      	adds	r2, r3, #1
 8011a3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8011a40:	68fa      	ldr	r2, [r7, #12]
 8011a42:	4413      	add	r3, r2
 8011a44:	460a      	mov	r2, r1
 8011a46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a4a:	2b07      	cmp	r3, #7
 8011a4c:	d9e9      	bls.n	8011a22 <gen_numname+0xe2>
}
 8011a4e:	bf00      	nop
 8011a50:	bf00      	nop
 8011a52:	3730      	adds	r7, #48	@ 0x30
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}
 8011a58:	00011021 	.word	0x00011021

08011a5c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b085      	sub	sp, #20
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011a64:	2300      	movs	r3, #0
 8011a66:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011a68:	230b      	movs	r3, #11
 8011a6a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011a6c:	7bfb      	ldrb	r3, [r7, #15]
 8011a6e:	b2da      	uxtb	r2, r3
 8011a70:	0852      	lsrs	r2, r2, #1
 8011a72:	01db      	lsls	r3, r3, #7
 8011a74:	4313      	orrs	r3, r2
 8011a76:	b2da      	uxtb	r2, r3
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	1c59      	adds	r1, r3, #1
 8011a7c:	6079      	str	r1, [r7, #4]
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	4413      	add	r3, r2
 8011a82:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	3b01      	subs	r3, #1
 8011a88:	60bb      	str	r3, [r7, #8]
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1ed      	bne.n	8011a6c <sum_sfn+0x10>
	return sum;
 8011a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3714      	adds	r7, #20
 8011a96:	46bd      	mov	sp, r7
 8011a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9c:	4770      	bx	lr

08011a9e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b086      	sub	sp, #24
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	6078      	str	r0, [r7, #4]
 8011aa6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011aa8:	2304      	movs	r3, #4
 8011aaa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8011ab2:	23ff      	movs	r3, #255	@ 0xff
 8011ab4:	757b      	strb	r3, [r7, #21]
 8011ab6:	23ff      	movs	r3, #255	@ 0xff
 8011ab8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8011aba:	e081      	b.n	8011bc0 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	69db      	ldr	r3, [r3, #28]
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	6938      	ldr	r0, [r7, #16]
 8011ac4:	f7ff f83c 	bl	8010b40 <move_window>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011acc:	7dfb      	ldrb	r3, [r7, #23]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d17c      	bne.n	8011bcc <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6a1b      	ldr	r3, [r3, #32]
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8011ada:	7dbb      	ldrb	r3, [r7, #22]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d102      	bne.n	8011ae6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011ae0:	2304      	movs	r3, #4
 8011ae2:	75fb      	strb	r3, [r7, #23]
 8011ae4:	e077      	b.n	8011bd6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6a1b      	ldr	r3, [r3, #32]
 8011aea:	330b      	adds	r3, #11
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011af2:	73fb      	strb	r3, [r7, #15]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	7bfa      	ldrb	r2, [r7, #15]
 8011af8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011afa:	7dbb      	ldrb	r3, [r7, #22]
 8011afc:	2be5      	cmp	r3, #229	@ 0xe5
 8011afe:	d00e      	beq.n	8011b1e <dir_read+0x80>
 8011b00:	7dbb      	ldrb	r3, [r7, #22]
 8011b02:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b04:	d00b      	beq.n	8011b1e <dir_read+0x80>
 8011b06:	7bfb      	ldrb	r3, [r7, #15]
 8011b08:	f023 0320 	bic.w	r3, r3, #32
 8011b0c:	2b08      	cmp	r3, #8
 8011b0e:	bf0c      	ite	eq
 8011b10:	2301      	moveq	r3, #1
 8011b12:	2300      	movne	r3, #0
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	461a      	mov	r2, r3
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d002      	beq.n	8011b24 <dir_read+0x86>
				ord = 0xFF;
 8011b1e:	23ff      	movs	r3, #255	@ 0xff
 8011b20:	757b      	strb	r3, [r7, #21]
 8011b22:	e044      	b.n	8011bae <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011b24:	7bfb      	ldrb	r3, [r7, #15]
 8011b26:	2b0f      	cmp	r3, #15
 8011b28:	d12f      	bne.n	8011b8a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011b2a:	7dbb      	ldrb	r3, [r7, #22]
 8011b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d00d      	beq.n	8011b50 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6a1b      	ldr	r3, [r3, #32]
 8011b38:	7b5b      	ldrb	r3, [r3, #13]
 8011b3a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8011b3c:	7dbb      	ldrb	r3, [r7, #22]
 8011b3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b42:	75bb      	strb	r3, [r7, #22]
 8011b44:	7dbb      	ldrb	r3, [r7, #22]
 8011b46:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	695a      	ldr	r2, [r3, #20]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011b50:	7dba      	ldrb	r2, [r7, #22]
 8011b52:	7d7b      	ldrb	r3, [r7, #21]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d115      	bne.n	8011b84 <dir_read+0xe6>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6a1b      	ldr	r3, [r3, #32]
 8011b5c:	330d      	adds	r3, #13
 8011b5e:	781b      	ldrb	r3, [r3, #0]
 8011b60:	7d3a      	ldrb	r2, [r7, #20]
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d10e      	bne.n	8011b84 <dir_read+0xe6>
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	691a      	ldr	r2, [r3, #16]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6a1b      	ldr	r3, [r3, #32]
 8011b6e:	4619      	mov	r1, r3
 8011b70:	4610      	mov	r0, r2
 8011b72:	f7ff fe19 	bl	80117a8 <pick_lfn>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d003      	beq.n	8011b84 <dir_read+0xe6>
 8011b7c:	7d7b      	ldrb	r3, [r7, #21]
 8011b7e:	3b01      	subs	r3, #1
 8011b80:	b2db      	uxtb	r3, r3
 8011b82:	e000      	b.n	8011b86 <dir_read+0xe8>
 8011b84:	23ff      	movs	r3, #255	@ 0xff
 8011b86:	757b      	strb	r3, [r7, #21]
 8011b88:	e011      	b.n	8011bae <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011b8a:	7d7b      	ldrb	r3, [r7, #21]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d109      	bne.n	8011ba4 <dir_read+0x106>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6a1b      	ldr	r3, [r3, #32]
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7ff ff61 	bl	8011a5c <sum_sfn>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	7d3b      	ldrb	r3, [r7, #20]
 8011ba0:	4293      	cmp	r3, r2
 8011ba2:	d015      	beq.n	8011bd0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8011baa:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8011bac:	e010      	b.n	8011bd0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011bae:	2100      	movs	r1, #0
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f7ff fc2d 	bl	8011410 <dir_next>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011bba:	7dfb      	ldrb	r3, [r7, #23]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d109      	bne.n	8011bd4 <dir_read+0x136>
	while (dp->sect) {
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	69db      	ldr	r3, [r3, #28]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	f47f af79 	bne.w	8011abc <dir_read+0x1e>
 8011bca:	e004      	b.n	8011bd6 <dir_read+0x138>
		if (res != FR_OK) break;
 8011bcc:	bf00      	nop
 8011bce:	e002      	b.n	8011bd6 <dir_read+0x138>
					break;
 8011bd0:	bf00      	nop
 8011bd2:	e000      	b.n	8011bd6 <dir_read+0x138>
		if (res != FR_OK) break;
 8011bd4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011bd6:	7dfb      	ldrb	r3, [r7, #23]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d002      	beq.n	8011be2 <dir_read+0x144>
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2200      	movs	r2, #0
 8011be0:	61da      	str	r2, [r3, #28]
	return res;
 8011be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3718      	adds	r7, #24
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b086      	sub	sp, #24
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	6878      	ldr	r0, [r7, #4]
 8011bfe:	f7ff fb7e 	bl	80112fe <dir_sdi>
 8011c02:	4603      	mov	r3, r0
 8011c04:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011c06:	7dfb      	ldrb	r3, [r7, #23]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d001      	beq.n	8011c10 <dir_find+0x24>
 8011c0c:	7dfb      	ldrb	r3, [r7, #23]
 8011c0e:	e0a9      	b.n	8011d64 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011c10:	23ff      	movs	r3, #255	@ 0xff
 8011c12:	753b      	strb	r3, [r7, #20]
 8011c14:	7d3b      	ldrb	r3, [r7, #20]
 8011c16:	757b      	strb	r3, [r7, #21]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c1e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	69db      	ldr	r3, [r3, #28]
 8011c24:	4619      	mov	r1, r3
 8011c26:	6938      	ldr	r0, [r7, #16]
 8011c28:	f7fe ff8a 	bl	8010b40 <move_window>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011c30:	7dfb      	ldrb	r3, [r7, #23]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f040 8090 	bne.w	8011d58 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6a1b      	ldr	r3, [r3, #32]
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011c40:	7dbb      	ldrb	r3, [r7, #22]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d102      	bne.n	8011c4c <dir_find+0x60>
 8011c46:	2304      	movs	r3, #4
 8011c48:	75fb      	strb	r3, [r7, #23]
 8011c4a:	e08a      	b.n	8011d62 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6a1b      	ldr	r3, [r3, #32]
 8011c50:	330b      	adds	r3, #11
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011c58:	73fb      	strb	r3, [r7, #15]
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	7bfa      	ldrb	r2, [r7, #15]
 8011c5e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011c60:	7dbb      	ldrb	r3, [r7, #22]
 8011c62:	2be5      	cmp	r3, #229	@ 0xe5
 8011c64:	d007      	beq.n	8011c76 <dir_find+0x8a>
 8011c66:	7bfb      	ldrb	r3, [r7, #15]
 8011c68:	f003 0308 	and.w	r3, r3, #8
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d009      	beq.n	8011c84 <dir_find+0x98>
 8011c70:	7bfb      	ldrb	r3, [r7, #15]
 8011c72:	2b0f      	cmp	r3, #15
 8011c74:	d006      	beq.n	8011c84 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011c76:	23ff      	movs	r3, #255	@ 0xff
 8011c78:	757b      	strb	r3, [r7, #21]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c80:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c82:	e05e      	b.n	8011d42 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011c84:	7bfb      	ldrb	r3, [r7, #15]
 8011c86:	2b0f      	cmp	r3, #15
 8011c88:	d136      	bne.n	8011cf8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d154      	bne.n	8011d42 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011c98:	7dbb      	ldrb	r3, [r7, #22]
 8011c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d00d      	beq.n	8011cbe <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6a1b      	ldr	r3, [r3, #32]
 8011ca6:	7b5b      	ldrb	r3, [r3, #13]
 8011ca8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011caa:	7dbb      	ldrb	r3, [r7, #22]
 8011cac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011cb0:	75bb      	strb	r3, [r7, #22]
 8011cb2:	7dbb      	ldrb	r3, [r7, #22]
 8011cb4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	695a      	ldr	r2, [r3, #20]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011cbe:	7dba      	ldrb	r2, [r7, #22]
 8011cc0:	7d7b      	ldrb	r3, [r7, #21]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d115      	bne.n	8011cf2 <dir_find+0x106>
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6a1b      	ldr	r3, [r3, #32]
 8011cca:	330d      	adds	r3, #13
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	7d3a      	ldrb	r2, [r7, #20]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d10e      	bne.n	8011cf2 <dir_find+0x106>
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	691a      	ldr	r2, [r3, #16]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6a1b      	ldr	r3, [r3, #32]
 8011cdc:	4619      	mov	r1, r3
 8011cde:	4610      	mov	r0, r2
 8011ce0:	f7ff fcf2 	bl	80116c8 <cmp_lfn>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d003      	beq.n	8011cf2 <dir_find+0x106>
 8011cea:	7d7b      	ldrb	r3, [r7, #21]
 8011cec:	3b01      	subs	r3, #1
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	e000      	b.n	8011cf4 <dir_find+0x108>
 8011cf2:	23ff      	movs	r3, #255	@ 0xff
 8011cf4:	757b      	strb	r3, [r7, #21]
 8011cf6:	e024      	b.n	8011d42 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011cf8:	7d7b      	ldrb	r3, [r7, #21]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d109      	bne.n	8011d12 <dir_find+0x126>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6a1b      	ldr	r3, [r3, #32]
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7ff feaa 	bl	8011a5c <sum_sfn>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	461a      	mov	r2, r3
 8011d0c:	7d3b      	ldrb	r3, [r7, #20]
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	d024      	beq.n	8011d5c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011d18:	f003 0301 	and.w	r3, r3, #1
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d10a      	bne.n	8011d36 <dir_find+0x14a>
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6a18      	ldr	r0, [r3, #32]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	3324      	adds	r3, #36	@ 0x24
 8011d28:	220b      	movs	r2, #11
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	f7fe fd16 	bl	801075c <mem_cmp>
 8011d30:	4603      	mov	r3, r0
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d014      	beq.n	8011d60 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011d36:	23ff      	movs	r3, #255	@ 0xff
 8011d38:	757b      	strb	r3, [r7, #21]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d40:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011d42:	2100      	movs	r1, #0
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f7ff fb63 	bl	8011410 <dir_next>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011d4e:	7dfb      	ldrb	r3, [r7, #23]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	f43f af65 	beq.w	8011c20 <dir_find+0x34>
 8011d56:	e004      	b.n	8011d62 <dir_find+0x176>
		if (res != FR_OK) break;
 8011d58:	bf00      	nop
 8011d5a:	e002      	b.n	8011d62 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011d5c:	bf00      	nop
 8011d5e:	e000      	b.n	8011d62 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011d60:	bf00      	nop

	return res;
 8011d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3718      	adds	r7, #24
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b08c      	sub	sp, #48	@ 0x30
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011d80:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d001      	beq.n	8011d8c <dir_register+0x20>
 8011d88:	2306      	movs	r3, #6
 8011d8a:	e0e0      	b.n	8011f4e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d90:	e002      	b.n	8011d98 <dir_register+0x2c>
 8011d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d94:	3301      	adds	r3, #1
 8011d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	691a      	ldr	r2, [r3, #16]
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d9e:	005b      	lsls	r3, r3, #1
 8011da0:	4413      	add	r3, r2
 8011da2:	881b      	ldrh	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d1f4      	bne.n	8011d92 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8011dae:	f107 030c 	add.w	r3, r7, #12
 8011db2:	220c      	movs	r2, #12
 8011db4:	4618      	mov	r0, r3
 8011db6:	f7fe fc95 	bl	80106e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011dba:	7dfb      	ldrb	r3, [r7, #23]
 8011dbc:	f003 0301 	and.w	r3, r3, #1
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d032      	beq.n	8011e2a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2240      	movs	r2, #64	@ 0x40
 8011dc8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8011dcc:	2301      	movs	r3, #1
 8011dce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011dd0:	e016      	b.n	8011e00 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	691a      	ldr	r2, [r3, #16]
 8011ddc:	f107 010c 	add.w	r1, r7, #12
 8011de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de2:	f7ff fdad 	bl	8011940 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f7ff ff00 	bl	8011bec <dir_find>
 8011dec:	4603      	mov	r3, r0
 8011dee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8011df2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d106      	bne.n	8011e08 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dfc:	3301      	adds	r3, #1
 8011dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e02:	2b63      	cmp	r3, #99	@ 0x63
 8011e04:	d9e5      	bls.n	8011dd2 <dir_register+0x66>
 8011e06:	e000      	b.n	8011e0a <dir_register+0x9e>
			if (res != FR_OK) break;
 8011e08:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e0c:	2b64      	cmp	r3, #100	@ 0x64
 8011e0e:	d101      	bne.n	8011e14 <dir_register+0xa8>
 8011e10:	2307      	movs	r3, #7
 8011e12:	e09c      	b.n	8011f4e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011e14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011e18:	2b04      	cmp	r3, #4
 8011e1a:	d002      	beq.n	8011e22 <dir_register+0xb6>
 8011e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011e20:	e095      	b.n	8011f4e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011e22:	7dfa      	ldrb	r2, [r7, #23]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011e2a:	7dfb      	ldrb	r3, [r7, #23]
 8011e2c:	f003 0302 	and.w	r3, r3, #2
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d007      	beq.n	8011e44 <dir_register+0xd8>
 8011e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e36:	330c      	adds	r3, #12
 8011e38:	4a47      	ldr	r2, [pc, #284]	@ (8011f58 <dir_register+0x1ec>)
 8011e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8011e3e:	089b      	lsrs	r3, r3, #2
 8011e40:	3301      	adds	r3, #1
 8011e42:	e000      	b.n	8011e46 <dir_register+0xda>
 8011e44:	2301      	movs	r3, #1
 8011e46:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011e48:	6a39      	ldr	r1, [r7, #32]
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f7ff fbb6 	bl	80115bc <dir_alloc>
 8011e50:	4603      	mov	r3, r0
 8011e52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011e56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d148      	bne.n	8011ef0 <dir_register+0x184>
 8011e5e:	6a3b      	ldr	r3, [r7, #32]
 8011e60:	3b01      	subs	r3, #1
 8011e62:	623b      	str	r3, [r7, #32]
 8011e64:	6a3b      	ldr	r3, [r7, #32]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d042      	beq.n	8011ef0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	695a      	ldr	r2, [r3, #20]
 8011e6e:	6a3b      	ldr	r3, [r7, #32]
 8011e70:	015b      	lsls	r3, r3, #5
 8011e72:	1ad3      	subs	r3, r2, r3
 8011e74:	4619      	mov	r1, r3
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f7ff fa41 	bl	80112fe <dir_sdi>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8011e82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d132      	bne.n	8011ef0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	3324      	adds	r3, #36	@ 0x24
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7ff fde4 	bl	8011a5c <sum_sfn>
 8011e94:	4603      	mov	r3, r0
 8011e96:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	69db      	ldr	r3, [r3, #28]
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	69f8      	ldr	r0, [r7, #28]
 8011ea0:	f7fe fe4e 	bl	8010b40 <move_window>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8011eaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d11d      	bne.n	8011eee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011eb2:	69fb      	ldr	r3, [r7, #28]
 8011eb4:	6918      	ldr	r0, [r3, #16]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	6a19      	ldr	r1, [r3, #32]
 8011eba:	6a3b      	ldr	r3, [r7, #32]
 8011ebc:	b2da      	uxtb	r2, r3
 8011ebe:	7efb      	ldrb	r3, [r7, #27]
 8011ec0:	f7ff fcd6 	bl	8011870 <put_lfn>
				fs->wflag = 1;
 8011ec4:	69fb      	ldr	r3, [r7, #28]
 8011ec6:	2201      	movs	r2, #1
 8011ec8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011eca:	2100      	movs	r1, #0
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f7ff fa9f 	bl	8011410 <dir_next>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8011ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d107      	bne.n	8011ef0 <dir_register+0x184>
 8011ee0:	6a3b      	ldr	r3, [r7, #32]
 8011ee2:	3b01      	subs	r3, #1
 8011ee4:	623b      	str	r3, [r7, #32]
 8011ee6:	6a3b      	ldr	r3, [r7, #32]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d1d5      	bne.n	8011e98 <dir_register+0x12c>
 8011eec:	e000      	b.n	8011ef0 <dir_register+0x184>
				if (res != FR_OK) break;
 8011eee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011ef0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d128      	bne.n	8011f4a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	69db      	ldr	r3, [r3, #28]
 8011efc:	4619      	mov	r1, r3
 8011efe:	69f8      	ldr	r0, [r7, #28]
 8011f00:	f7fe fe1e 	bl	8010b40 <move_window>
 8011f04:	4603      	mov	r3, r0
 8011f06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8011f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d11b      	bne.n	8011f4a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6a1b      	ldr	r3, [r3, #32]
 8011f16:	2220      	movs	r2, #32
 8011f18:	2100      	movs	r1, #0
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7fe fc03 	bl	8010726 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6a18      	ldr	r0, [r3, #32]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	3324      	adds	r3, #36	@ 0x24
 8011f28:	220b      	movs	r2, #11
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	f7fe fbda 	bl	80106e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6a1b      	ldr	r3, [r3, #32]
 8011f3a:	330c      	adds	r3, #12
 8011f3c:	f002 0218 	and.w	r2, r2, #24
 8011f40:	b2d2      	uxtb	r2, r2
 8011f42:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8011f44:	69fb      	ldr	r3, [r7, #28]
 8011f46:	2201      	movs	r2, #1
 8011f48:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011f4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3730      	adds	r7, #48	@ 0x30
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}
 8011f56:	bf00      	nop
 8011f58:	4ec4ec4f 	.word	0x4ec4ec4f

08011f5c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b086      	sub	sp, #24
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	695b      	ldr	r3, [r3, #20]
 8011f6e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f78:	d007      	beq.n	8011f8a <dir_remove+0x2e>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f7e:	4619      	mov	r1, r3
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f7ff f9bc 	bl	80112fe <dir_sdi>
 8011f86:	4603      	mov	r3, r0
 8011f88:	e000      	b.n	8011f8c <dir_remove+0x30>
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011f8e:	7dfb      	ldrb	r3, [r7, #23]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d128      	bne.n	8011fe6 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	69db      	ldr	r3, [r3, #28]
 8011f98:	4619      	mov	r1, r3
 8011f9a:	6938      	ldr	r0, [r7, #16]
 8011f9c:	f7fe fdd0 	bl	8010b40 <move_window>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011fa4:	7dfb      	ldrb	r3, [r7, #23]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d115      	bne.n	8011fd6 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6a1b      	ldr	r3, [r3, #32]
 8011fae:	22e5      	movs	r2, #229	@ 0xe5
 8011fb0:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8011fb2:	693b      	ldr	r3, [r7, #16]
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	695b      	ldr	r3, [r3, #20]
 8011fbc:	68fa      	ldr	r2, [r7, #12]
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d90b      	bls.n	8011fda <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8011fc2:	2100      	movs	r1, #0
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f7ff fa23 	bl	8011410 <dir_next>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8011fce:	7dfb      	ldrb	r3, [r7, #23]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d0df      	beq.n	8011f94 <dir_remove+0x38>
 8011fd4:	e002      	b.n	8011fdc <dir_remove+0x80>
			if (res != FR_OK) break;
 8011fd6:	bf00      	nop
 8011fd8:	e000      	b.n	8011fdc <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8011fda:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8011fdc:	7dfb      	ldrb	r3, [r7, #23]
 8011fde:	2b04      	cmp	r3, #4
 8011fe0:	d101      	bne.n	8011fe6 <dir_remove+0x8a>
 8011fe2:	2302      	movs	r3, #2
 8011fe4:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8011fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3718      	adds	r7, #24
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b08a      	sub	sp, #40	@ 0x28
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	613b      	str	r3, [r7, #16]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	691b      	ldr	r3, [r3, #16]
 8012006:	60fb      	str	r3, [r7, #12]
 8012008:	2300      	movs	r3, #0
 801200a:	617b      	str	r3, [r7, #20]
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012010:	69bb      	ldr	r3, [r7, #24]
 8012012:	1c5a      	adds	r2, r3, #1
 8012014:	61ba      	str	r2, [r7, #24]
 8012016:	693a      	ldr	r2, [r7, #16]
 8012018:	4413      	add	r3, r2
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801201e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012020:	2b1f      	cmp	r3, #31
 8012022:	d940      	bls.n	80120a6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012024:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012026:	2b2f      	cmp	r3, #47	@ 0x2f
 8012028:	d006      	beq.n	8012038 <create_name+0x48>
 801202a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801202c:	2b5c      	cmp	r3, #92	@ 0x5c
 801202e:	d110      	bne.n	8012052 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012030:	e002      	b.n	8012038 <create_name+0x48>
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	3301      	adds	r3, #1
 8012036:	61bb      	str	r3, [r7, #24]
 8012038:	693a      	ldr	r2, [r7, #16]
 801203a:	69bb      	ldr	r3, [r7, #24]
 801203c:	4413      	add	r3, r2
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	2b2f      	cmp	r3, #47	@ 0x2f
 8012042:	d0f6      	beq.n	8012032 <create_name+0x42>
 8012044:	693a      	ldr	r2, [r7, #16]
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	4413      	add	r3, r2
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	2b5c      	cmp	r3, #92	@ 0x5c
 801204e:	d0f0      	beq.n	8012032 <create_name+0x42>
			break;
 8012050:	e02a      	b.n	80120a8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	2bfe      	cmp	r3, #254	@ 0xfe
 8012056:	d901      	bls.n	801205c <create_name+0x6c>
 8012058:	2306      	movs	r3, #6
 801205a:	e1ca      	b.n	80123f2 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 801205c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801205e:	b2db      	uxtb	r3, r3
 8012060:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012062:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012064:	2101      	movs	r1, #1
 8012066:	4618      	mov	r0, r3
 8012068:	f002 fa9a 	bl	80145a0 <ff_convert>
 801206c:	4603      	mov	r3, r0
 801206e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012070:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012072:	2b00      	cmp	r3, #0
 8012074:	d101      	bne.n	801207a <create_name+0x8a>
 8012076:	2306      	movs	r3, #6
 8012078:	e1bb      	b.n	80123f2 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801207a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801207c:	2b7f      	cmp	r3, #127	@ 0x7f
 801207e:	d809      	bhi.n	8012094 <create_name+0xa4>
 8012080:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012082:	4619      	mov	r1, r3
 8012084:	489e      	ldr	r0, [pc, #632]	@ (8012300 <create_name+0x310>)
 8012086:	f7fe fb90 	bl	80107aa <chk_chr>
 801208a:	4603      	mov	r3, r0
 801208c:	2b00      	cmp	r3, #0
 801208e:	d001      	beq.n	8012094 <create_name+0xa4>
 8012090:	2306      	movs	r3, #6
 8012092:	e1ae      	b.n	80123f2 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	1c5a      	adds	r2, r3, #1
 8012098:	617a      	str	r2, [r7, #20]
 801209a:	005b      	lsls	r3, r3, #1
 801209c:	68fa      	ldr	r2, [r7, #12]
 801209e:	4413      	add	r3, r2
 80120a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80120a2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80120a4:	e7b4      	b.n	8012010 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80120a6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80120a8:	693a      	ldr	r2, [r7, #16]
 80120aa:	69bb      	ldr	r3, [r7, #24]
 80120ac:	441a      	add	r2, r3
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80120b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80120b4:	2b1f      	cmp	r3, #31
 80120b6:	d801      	bhi.n	80120bc <create_name+0xcc>
 80120b8:	2304      	movs	r3, #4
 80120ba:	e000      	b.n	80120be <create_name+0xce>
 80120bc:	2300      	movs	r3, #0
 80120be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	d109      	bne.n	80120dc <create_name+0xec>
 80120c8:	697a      	ldr	r2, [r7, #20]
 80120ca:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80120ce:	4413      	add	r3, r2
 80120d0:	005b      	lsls	r3, r3, #1
 80120d2:	68fa      	ldr	r2, [r7, #12]
 80120d4:	4413      	add	r3, r2
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80120da:	d015      	beq.n	8012108 <create_name+0x118>
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	2b02      	cmp	r3, #2
 80120e0:	d14d      	bne.n	801217e <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80120e2:	697a      	ldr	r2, [r7, #20]
 80120e4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80120e8:	4413      	add	r3, r2
 80120ea:	005b      	lsls	r3, r3, #1
 80120ec:	68fa      	ldr	r2, [r7, #12]
 80120ee:	4413      	add	r3, r2
 80120f0:	881b      	ldrh	r3, [r3, #0]
 80120f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80120f4:	d143      	bne.n	801217e <create_name+0x18e>
 80120f6:	697a      	ldr	r2, [r7, #20]
 80120f8:	4b82      	ldr	r3, [pc, #520]	@ (8012304 <create_name+0x314>)
 80120fa:	4413      	add	r3, r2
 80120fc:	005b      	lsls	r3, r3, #1
 80120fe:	68fa      	ldr	r2, [r7, #12]
 8012100:	4413      	add	r3, r2
 8012102:	881b      	ldrh	r3, [r3, #0]
 8012104:	2b2e      	cmp	r3, #46	@ 0x2e
 8012106:	d13a      	bne.n	801217e <create_name+0x18e>
		lfn[di] = 0;
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	005b      	lsls	r3, r3, #1
 801210c:	68fa      	ldr	r2, [r7, #12]
 801210e:	4413      	add	r3, r2
 8012110:	2200      	movs	r2, #0
 8012112:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8012114:	2300      	movs	r3, #0
 8012116:	623b      	str	r3, [r7, #32]
 8012118:	e00f      	b.n	801213a <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 801211a:	6a3a      	ldr	r2, [r7, #32]
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	429a      	cmp	r2, r3
 8012120:	d201      	bcs.n	8012126 <create_name+0x136>
 8012122:	212e      	movs	r1, #46	@ 0x2e
 8012124:	e000      	b.n	8012128 <create_name+0x138>
 8012126:	2120      	movs	r1, #32
 8012128:	687a      	ldr	r2, [r7, #4]
 801212a:	6a3b      	ldr	r3, [r7, #32]
 801212c:	4413      	add	r3, r2
 801212e:	3324      	adds	r3, #36	@ 0x24
 8012130:	460a      	mov	r2, r1
 8012132:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8012134:	6a3b      	ldr	r3, [r7, #32]
 8012136:	3301      	adds	r3, #1
 8012138:	623b      	str	r3, [r7, #32]
 801213a:	6a3b      	ldr	r3, [r7, #32]
 801213c:	2b0a      	cmp	r3, #10
 801213e:	d9ec      	bls.n	801211a <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8012140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012144:	f043 0320 	orr.w	r3, r3, #32
 8012148:	b2d9      	uxtb	r1, r3
 801214a:	687a      	ldr	r2, [r7, #4]
 801214c:	6a3b      	ldr	r3, [r7, #32]
 801214e:	4413      	add	r3, r2
 8012150:	3324      	adds	r3, #36	@ 0x24
 8012152:	460a      	mov	r2, r1
 8012154:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012156:	2300      	movs	r3, #0
 8012158:	e14b      	b.n	80123f2 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 801215a:	697a      	ldr	r2, [r7, #20]
 801215c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012160:	4413      	add	r3, r2
 8012162:	005b      	lsls	r3, r3, #1
 8012164:	68fa      	ldr	r2, [r7, #12]
 8012166:	4413      	add	r3, r2
 8012168:	881b      	ldrh	r3, [r3, #0]
 801216a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801216c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801216e:	2b20      	cmp	r3, #32
 8012170:	d002      	beq.n	8012178 <create_name+0x188>
 8012172:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012174:	2b2e      	cmp	r3, #46	@ 0x2e
 8012176:	d106      	bne.n	8012186 <create_name+0x196>
		di--;
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	3b01      	subs	r3, #1
 801217c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d1ea      	bne.n	801215a <create_name+0x16a>
 8012184:	e000      	b.n	8012188 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 8012186:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	005b      	lsls	r3, r3, #1
 801218c:	68fa      	ldr	r2, [r7, #12]
 801218e:	4413      	add	r3, r2
 8012190:	2200      	movs	r2, #0
 8012192:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d101      	bne.n	801219e <create_name+0x1ae>
 801219a:	2306      	movs	r3, #6
 801219c:	e129      	b.n	80123f2 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	3324      	adds	r3, #36	@ 0x24
 80121a2:	220b      	movs	r2, #11
 80121a4:	2120      	movs	r1, #32
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fe fabd 	bl	8010726 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80121ac:	2300      	movs	r3, #0
 80121ae:	61bb      	str	r3, [r7, #24]
 80121b0:	e002      	b.n	80121b8 <create_name+0x1c8>
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	3301      	adds	r3, #1
 80121b6:	61bb      	str	r3, [r7, #24]
 80121b8:	69bb      	ldr	r3, [r7, #24]
 80121ba:	005b      	lsls	r3, r3, #1
 80121bc:	68fa      	ldr	r2, [r7, #12]
 80121be:	4413      	add	r3, r2
 80121c0:	881b      	ldrh	r3, [r3, #0]
 80121c2:	2b20      	cmp	r3, #32
 80121c4:	d0f5      	beq.n	80121b2 <create_name+0x1c2>
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	005b      	lsls	r3, r3, #1
 80121ca:	68fa      	ldr	r2, [r7, #12]
 80121cc:	4413      	add	r3, r2
 80121ce:	881b      	ldrh	r3, [r3, #0]
 80121d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80121d2:	d0ee      	beq.n	80121b2 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 80121d4:	69bb      	ldr	r3, [r7, #24]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d009      	beq.n	80121ee <create_name+0x1fe>
 80121da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80121de:	f043 0303 	orr.w	r3, r3, #3
 80121e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80121e6:	e002      	b.n	80121ee <create_name+0x1fe>
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	3b01      	subs	r3, #1
 80121ec:	617b      	str	r3, [r7, #20]
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d009      	beq.n	8012208 <create_name+0x218>
 80121f4:	697a      	ldr	r2, [r7, #20]
 80121f6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80121fa:	4413      	add	r3, r2
 80121fc:	005b      	lsls	r3, r3, #1
 80121fe:	68fa      	ldr	r2, [r7, #12]
 8012200:	4413      	add	r3, r2
 8012202:	881b      	ldrh	r3, [r3, #0]
 8012204:	2b2e      	cmp	r3, #46	@ 0x2e
 8012206:	d1ef      	bne.n	80121e8 <create_name+0x1f8>

	i = b = 0; ni = 8;
 8012208:	2300      	movs	r3, #0
 801220a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801220e:	2300      	movs	r3, #0
 8012210:	623b      	str	r3, [r7, #32]
 8012212:	2308      	movs	r3, #8
 8012214:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012216:	69bb      	ldr	r3, [r7, #24]
 8012218:	1c5a      	adds	r2, r3, #1
 801221a:	61ba      	str	r2, [r7, #24]
 801221c:	005b      	lsls	r3, r3, #1
 801221e:	68fa      	ldr	r2, [r7, #12]
 8012220:	4413      	add	r3, r2
 8012222:	881b      	ldrh	r3, [r3, #0]
 8012224:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012228:	2b00      	cmp	r3, #0
 801222a:	f000 8098 	beq.w	801235e <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801222e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012230:	2b20      	cmp	r3, #32
 8012232:	d006      	beq.n	8012242 <create_name+0x252>
 8012234:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012236:	2b2e      	cmp	r3, #46	@ 0x2e
 8012238:	d10a      	bne.n	8012250 <create_name+0x260>
 801223a:	69ba      	ldr	r2, [r7, #24]
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	429a      	cmp	r2, r3
 8012240:	d006      	beq.n	8012250 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8012242:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012246:	f043 0303 	orr.w	r3, r3, #3
 801224a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801224e:	e085      	b.n	801235c <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012250:	6a3a      	ldr	r2, [r7, #32]
 8012252:	69fb      	ldr	r3, [r7, #28]
 8012254:	429a      	cmp	r2, r3
 8012256:	d203      	bcs.n	8012260 <create_name+0x270>
 8012258:	69ba      	ldr	r2, [r7, #24]
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	429a      	cmp	r2, r3
 801225e:	d123      	bne.n	80122a8 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8012260:	69fb      	ldr	r3, [r7, #28]
 8012262:	2b0b      	cmp	r3, #11
 8012264:	d106      	bne.n	8012274 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 8012266:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801226a:	f043 0303 	orr.w	r3, r3, #3
 801226e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012272:	e077      	b.n	8012364 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8012274:	69ba      	ldr	r2, [r7, #24]
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	429a      	cmp	r2, r3
 801227a:	d005      	beq.n	8012288 <create_name+0x298>
 801227c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012280:	f043 0303 	orr.w	r3, r3, #3
 8012284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8012288:	69ba      	ldr	r2, [r7, #24]
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	429a      	cmp	r2, r3
 801228e:	d868      	bhi.n	8012362 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	61bb      	str	r3, [r7, #24]
 8012294:	2308      	movs	r3, #8
 8012296:	623b      	str	r3, [r7, #32]
 8012298:	230b      	movs	r3, #11
 801229a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801229c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80122a0:	009b      	lsls	r3, r3, #2
 80122a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80122a6:	e059      	b.n	801235c <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80122a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80122ac:	d914      	bls.n	80122d8 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80122ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122b0:	2100      	movs	r1, #0
 80122b2:	4618      	mov	r0, r3
 80122b4:	f002 f974 	bl	80145a0 <ff_convert>
 80122b8:	4603      	mov	r3, r0
 80122ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80122bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d004      	beq.n	80122cc <create_name+0x2dc>
 80122c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122c4:	3b80      	subs	r3, #128	@ 0x80
 80122c6:	4a10      	ldr	r2, [pc, #64]	@ (8012308 <create_name+0x318>)
 80122c8:	5cd3      	ldrb	r3, [r2, r3]
 80122ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80122cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80122d0:	f043 0302 	orr.w	r3, r3, #2
 80122d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80122d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d007      	beq.n	80122ee <create_name+0x2fe>
 80122de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80122e0:	4619      	mov	r1, r3
 80122e2:	480a      	ldr	r0, [pc, #40]	@ (801230c <create_name+0x31c>)
 80122e4:	f7fe fa61 	bl	80107aa <chk_chr>
 80122e8:	4603      	mov	r3, r0
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d010      	beq.n	8012310 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80122ee:	235f      	movs	r3, #95	@ 0x5f
 80122f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80122f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80122f6:	f043 0303 	orr.w	r3, r3, #3
 80122fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80122fe:	e023      	b.n	8012348 <create_name+0x358>
 8012300:	08014be0 	.word	0x08014be0
 8012304:	7ffffffe 	.word	0x7ffffffe
 8012308:	08014c68 	.word	0x08014c68
 801230c:	08014bec 	.word	0x08014bec
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012310:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012312:	2b40      	cmp	r3, #64	@ 0x40
 8012314:	d909      	bls.n	801232a <create_name+0x33a>
 8012316:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012318:	2b5a      	cmp	r3, #90	@ 0x5a
 801231a:	d806      	bhi.n	801232a <create_name+0x33a>
					b |= 2;
 801231c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012320:	f043 0302 	orr.w	r3, r3, #2
 8012324:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012328:	e00e      	b.n	8012348 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801232a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801232c:	2b60      	cmp	r3, #96	@ 0x60
 801232e:	d90b      	bls.n	8012348 <create_name+0x358>
 8012330:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012332:	2b7a      	cmp	r3, #122	@ 0x7a
 8012334:	d808      	bhi.n	8012348 <create_name+0x358>
						b |= 1; w -= 0x20;
 8012336:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801233a:	f043 0301 	orr.w	r3, r3, #1
 801233e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012342:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012344:	3b20      	subs	r3, #32
 8012346:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012348:	6a3b      	ldr	r3, [r7, #32]
 801234a:	1c5a      	adds	r2, r3, #1
 801234c:	623a      	str	r2, [r7, #32]
 801234e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012350:	b2d1      	uxtb	r1, r2
 8012352:	687a      	ldr	r2, [r7, #4]
 8012354:	4413      	add	r3, r2
 8012356:	460a      	mov	r2, r1
 8012358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801235c:	e75b      	b.n	8012216 <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 801235e:	bf00      	nop
 8012360:	e000      	b.n	8012364 <create_name+0x374>
			if (si > di) break;			/* No extension */
 8012362:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801236a:	2be5      	cmp	r3, #229	@ 0xe5
 801236c:	d103      	bne.n	8012376 <create_name+0x386>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2205      	movs	r2, #5
 8012372:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	2b08      	cmp	r3, #8
 801237a:	d104      	bne.n	8012386 <create_name+0x396>
 801237c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012380:	009b      	lsls	r3, r3, #2
 8012382:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012386:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801238a:	f003 030c 	and.w	r3, r3, #12
 801238e:	2b0c      	cmp	r3, #12
 8012390:	d005      	beq.n	801239e <create_name+0x3ae>
 8012392:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012396:	f003 0303 	and.w	r3, r3, #3
 801239a:	2b03      	cmp	r3, #3
 801239c:	d105      	bne.n	80123aa <create_name+0x3ba>
 801239e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123a2:	f043 0302 	orr.w	r3, r3, #2
 80123a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80123aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123ae:	f003 0302 	and.w	r3, r3, #2
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d117      	bne.n	80123e6 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80123b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123ba:	f003 0303 	and.w	r3, r3, #3
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d105      	bne.n	80123ce <create_name+0x3de>
 80123c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123c6:	f043 0310 	orr.w	r3, r3, #16
 80123ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80123ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80123d2:	f003 030c 	and.w	r3, r3, #12
 80123d6:	2b04      	cmp	r3, #4
 80123d8:	d105      	bne.n	80123e6 <create_name+0x3f6>
 80123da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80123de:	f043 0308 	orr.w	r3, r3, #8
 80123e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80123ec:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80123f0:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3728      	adds	r7, #40	@ 0x28
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	bf00      	nop

080123fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b086      	sub	sp, #24
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	2b2f      	cmp	r3, #47	@ 0x2f
 8012416:	d00b      	beq.n	8012430 <follow_path+0x34>
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	2b5c      	cmp	r3, #92	@ 0x5c
 801241e:	d007      	beq.n	8012430 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	69da      	ldr	r2, [r3, #28]
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	609a      	str	r2, [r3, #8]
 8012428:	e00d      	b.n	8012446 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	3301      	adds	r3, #1
 801242e:	603b      	str	r3, [r7, #0]
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	781b      	ldrb	r3, [r3, #0]
 8012434:	2b2f      	cmp	r3, #47	@ 0x2f
 8012436:	d0f8      	beq.n	801242a <follow_path+0x2e>
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	2b5c      	cmp	r3, #92	@ 0x5c
 801243e:	d0f4      	beq.n	801242a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	2200      	movs	r2, #0
 8012444:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	2b1f      	cmp	r3, #31
 801244c:	d80a      	bhi.n	8012464 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2280      	movs	r2, #128	@ 0x80
 8012452:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8012456:	2100      	movs	r1, #0
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7fe ff50 	bl	80112fe <dir_sdi>
 801245e:	4603      	mov	r3, r0
 8012460:	75fb      	strb	r3, [r7, #23]
 8012462:	e05b      	b.n	801251c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012464:	463b      	mov	r3, r7
 8012466:	4619      	mov	r1, r3
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7ff fdc1 	bl	8011ff0 <create_name>
 801246e:	4603      	mov	r3, r0
 8012470:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012472:	7dfb      	ldrb	r3, [r7, #23]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d14c      	bne.n	8012512 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f7ff fbb7 	bl	8011bec <dir_find>
 801247e:	4603      	mov	r3, r0
 8012480:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012488:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801248a:	7dfb      	ldrb	r3, [r7, #23]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d01b      	beq.n	80124c8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012490:	7dfb      	ldrb	r3, [r7, #23]
 8012492:	2b04      	cmp	r3, #4
 8012494:	d13f      	bne.n	8012516 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012496:	7afb      	ldrb	r3, [r7, #11]
 8012498:	f003 0320 	and.w	r3, r3, #32
 801249c:	2b00      	cmp	r3, #0
 801249e:	d00b      	beq.n	80124b8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80124a0:	7afb      	ldrb	r3, [r7, #11]
 80124a2:	f003 0304 	and.w	r3, r3, #4
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d031      	beq.n	801250e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	2280      	movs	r2, #128	@ 0x80
 80124ae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 80124b2:	2300      	movs	r3, #0
 80124b4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80124b6:	e02e      	b.n	8012516 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80124b8:	7afb      	ldrb	r3, [r7, #11]
 80124ba:	f003 0304 	and.w	r3, r3, #4
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d129      	bne.n	8012516 <follow_path+0x11a>
 80124c2:	2305      	movs	r3, #5
 80124c4:	75fb      	strb	r3, [r7, #23]
				break;
 80124c6:	e026      	b.n	8012516 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80124c8:	7afb      	ldrb	r3, [r7, #11]
 80124ca:	f003 0304 	and.w	r3, r3, #4
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d123      	bne.n	801251a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	799b      	ldrb	r3, [r3, #6]
 80124d6:	f003 0310 	and.w	r3, r3, #16
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d102      	bne.n	80124e4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80124de:	2305      	movs	r3, #5
 80124e0:	75fb      	strb	r3, [r7, #23]
 80124e2:	e01b      	b.n	801251c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	695b      	ldr	r3, [r3, #20]
 80124ee:	68fa      	ldr	r2, [r7, #12]
 80124f0:	8992      	ldrh	r2, [r2, #12]
 80124f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80124f6:	fb00 f202 	mul.w	r2, r0, r2
 80124fa:	1a9b      	subs	r3, r3, r2
 80124fc:	440b      	add	r3, r1
 80124fe:	4619      	mov	r1, r3
 8012500:	68f8      	ldr	r0, [r7, #12]
 8012502:	f7ff f8a2 	bl	801164a <ld_clust>
 8012506:	4602      	mov	r2, r0
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	609a      	str	r2, [r3, #8]
 801250c:	e7aa      	b.n	8012464 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801250e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012510:	e7a8      	b.n	8012464 <follow_path+0x68>
			if (res != FR_OK) break;
 8012512:	bf00      	nop
 8012514:	e002      	b.n	801251c <follow_path+0x120>
				break;
 8012516:	bf00      	nop
 8012518:	e000      	b.n	801251c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801251a:	bf00      	nop
			}
		}
	}

	return res;
 801251c:	7dfb      	ldrb	r3, [r7, #23]
}
 801251e:	4618      	mov	r0, r3
 8012520:	3718      	adds	r7, #24
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}

08012526 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012526:	b480      	push	{r7}
 8012528:	b087      	sub	sp, #28
 801252a:	af00      	add	r7, sp, #0
 801252c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801252e:	f04f 33ff 	mov.w	r3, #4294967295
 8012532:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d031      	beq.n	80125a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	617b      	str	r3, [r7, #20]
 8012542:	e002      	b.n	801254a <get_ldnumber+0x24>
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	3301      	adds	r3, #1
 8012548:	617b      	str	r3, [r7, #20]
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	781b      	ldrb	r3, [r3, #0]
 801254e:	2b1f      	cmp	r3, #31
 8012550:	d903      	bls.n	801255a <get_ldnumber+0x34>
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	2b3a      	cmp	r3, #58	@ 0x3a
 8012558:	d1f4      	bne.n	8012544 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	2b3a      	cmp	r3, #58	@ 0x3a
 8012560:	d11c      	bne.n	801259c <get_ldnumber+0x76>
			tp = *path;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	1c5a      	adds	r2, r3, #1
 801256c:	60fa      	str	r2, [r7, #12]
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	3b30      	subs	r3, #48	@ 0x30
 8012572:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	2b09      	cmp	r3, #9
 8012578:	d80e      	bhi.n	8012598 <get_ldnumber+0x72>
 801257a:	68fa      	ldr	r2, [r7, #12]
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	429a      	cmp	r2, r3
 8012580:	d10a      	bne.n	8012598 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d107      	bne.n	8012598 <get_ldnumber+0x72>
					vol = (int)i;
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	3301      	adds	r3, #1
 8012590:	617b      	str	r3, [r7, #20]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	697a      	ldr	r2, [r7, #20]
 8012596:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	e002      	b.n	80125a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801259c:	2300      	movs	r3, #0
 801259e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80125a0:	693b      	ldr	r3, [r7, #16]
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	371c      	adds	r7, #28
 80125a6:	46bd      	mov	sp, r7
 80125a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ac:	4770      	bx	lr
	...

080125b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2200      	movs	r2, #0
 80125be:	70da      	strb	r2, [r3, #3]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f04f 32ff 	mov.w	r2, #4294967295
 80125c6:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80125c8:	6839      	ldr	r1, [r7, #0]
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f7fe fab8 	bl	8010b40 <move_window>
 80125d0:	4603      	mov	r3, r0
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d001      	beq.n	80125da <check_fs+0x2a>
 80125d6:	2304      	movs	r3, #4
 80125d8:	e038      	b.n	801264c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	333c      	adds	r3, #60	@ 0x3c
 80125de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fd fffc 	bl	80105e0 <ld_word>
 80125e8:	4603      	mov	r3, r0
 80125ea:	461a      	mov	r2, r3
 80125ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d001      	beq.n	80125f8 <check_fs+0x48>
 80125f4:	2303      	movs	r3, #3
 80125f6:	e029      	b.n	801264c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80125fe:	2be9      	cmp	r3, #233	@ 0xe9
 8012600:	d009      	beq.n	8012616 <check_fs+0x66>
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012608:	2beb      	cmp	r3, #235	@ 0xeb
 801260a:	d11e      	bne.n	801264a <check_fs+0x9a>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012612:	2b90      	cmp	r3, #144	@ 0x90
 8012614:	d119      	bne.n	801264a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	333c      	adds	r3, #60	@ 0x3c
 801261a:	3336      	adds	r3, #54	@ 0x36
 801261c:	4618      	mov	r0, r3
 801261e:	f7fd fff7 	bl	8010610 <ld_dword>
 8012622:	4603      	mov	r3, r0
 8012624:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012628:	4a0a      	ldr	r2, [pc, #40]	@ (8012654 <check_fs+0xa4>)
 801262a:	4293      	cmp	r3, r2
 801262c:	d101      	bne.n	8012632 <check_fs+0x82>
 801262e:	2300      	movs	r3, #0
 8012630:	e00c      	b.n	801264c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	333c      	adds	r3, #60	@ 0x3c
 8012636:	3352      	adds	r3, #82	@ 0x52
 8012638:	4618      	mov	r0, r3
 801263a:	f7fd ffe9 	bl	8010610 <ld_dword>
 801263e:	4603      	mov	r3, r0
 8012640:	4a05      	ldr	r2, [pc, #20]	@ (8012658 <check_fs+0xa8>)
 8012642:	4293      	cmp	r3, r2
 8012644:	d101      	bne.n	801264a <check_fs+0x9a>
 8012646:	2300      	movs	r3, #0
 8012648:	e000      	b.n	801264c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801264a:	2302      	movs	r3, #2
}
 801264c:	4618      	mov	r0, r3
 801264e:	3708      	adds	r7, #8
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}
 8012654:	00544146 	.word	0x00544146
 8012658:	33544146 	.word	0x33544146

0801265c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b096      	sub	sp, #88	@ 0x58
 8012660:	af00      	add	r7, sp, #0
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	60b9      	str	r1, [r7, #8]
 8012666:	4613      	mov	r3, r2
 8012668:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	2200      	movs	r2, #0
 801266e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012670:	68f8      	ldr	r0, [r7, #12]
 8012672:	f7ff ff58 	bl	8012526 <get_ldnumber>
 8012676:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801267a:	2b00      	cmp	r3, #0
 801267c:	da01      	bge.n	8012682 <find_volume+0x26>
 801267e:	230b      	movs	r3, #11
 8012680:	e268      	b.n	8012b54 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012682:	4a9f      	ldr	r2, [pc, #636]	@ (8012900 <find_volume+0x2a4>)
 8012684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801268a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801268c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801268e:	2b00      	cmp	r3, #0
 8012690:	d101      	bne.n	8012696 <find_volume+0x3a>
 8012692:	230c      	movs	r3, #12
 8012694:	e25e      	b.n	8012b54 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801269a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801269c:	79fb      	ldrb	r3, [r7, #7]
 801269e:	f023 0301 	bic.w	r3, r3, #1
 80126a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80126a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d01a      	beq.n	80126e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80126ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ae:	785b      	ldrb	r3, [r3, #1]
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7fd fef5 	bl	80104a0 <disk_status>
 80126b6:	4603      	mov	r3, r0
 80126b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80126bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126c0:	f003 0301 	and.w	r3, r3, #1
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d10c      	bne.n	80126e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80126c8:	79fb      	ldrb	r3, [r7, #7]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d007      	beq.n	80126de <find_volume+0x82>
 80126ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80126d2:	f003 0304 	and.w	r3, r3, #4
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d001      	beq.n	80126de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80126da:	230a      	movs	r3, #10
 80126dc:	e23a      	b.n	8012b54 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80126de:	2300      	movs	r3, #0
 80126e0:	e238      	b.n	8012b54 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80126e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126e4:	2200      	movs	r2, #0
 80126e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80126e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126ea:	b2da      	uxtb	r2, r3
 80126ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80126f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126f2:	785b      	ldrb	r3, [r3, #1]
 80126f4:	4618      	mov	r0, r3
 80126f6:	f7fd feed 	bl	80104d4 <disk_initialize>
 80126fa:	4603      	mov	r3, r0
 80126fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012700:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012704:	f003 0301 	and.w	r3, r3, #1
 8012708:	2b00      	cmp	r3, #0
 801270a:	d001      	beq.n	8012710 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801270c:	2303      	movs	r3, #3
 801270e:	e221      	b.n	8012b54 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012710:	79fb      	ldrb	r3, [r7, #7]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d007      	beq.n	8012726 <find_volume+0xca>
 8012716:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801271a:	f003 0304 	and.w	r3, r3, #4
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012722:	230a      	movs	r3, #10
 8012724:	e216      	b.n	8012b54 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012728:	7858      	ldrb	r0, [r3, #1]
 801272a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801272c:	330c      	adds	r3, #12
 801272e:	461a      	mov	r2, r3
 8012730:	2102      	movs	r1, #2
 8012732:	f7fd ff37 	bl	80105a4 <disk_ioctl>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d001      	beq.n	8012740 <find_volume+0xe4>
 801273c:	2301      	movs	r3, #1
 801273e:	e209      	b.n	8012b54 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012742:	899b      	ldrh	r3, [r3, #12]
 8012744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012748:	d80d      	bhi.n	8012766 <find_volume+0x10a>
 801274a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801274c:	899b      	ldrh	r3, [r3, #12]
 801274e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012752:	d308      	bcc.n	8012766 <find_volume+0x10a>
 8012754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012756:	899b      	ldrh	r3, [r3, #12]
 8012758:	461a      	mov	r2, r3
 801275a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801275c:	899b      	ldrh	r3, [r3, #12]
 801275e:	3b01      	subs	r3, #1
 8012760:	4013      	ands	r3, r2
 8012762:	2b00      	cmp	r3, #0
 8012764:	d001      	beq.n	801276a <find_volume+0x10e>
 8012766:	2301      	movs	r3, #1
 8012768:	e1f4      	b.n	8012b54 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801276a:	2300      	movs	r3, #0
 801276c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801276e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012770:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012772:	f7ff ff1d 	bl	80125b0 <check_fs>
 8012776:	4603      	mov	r3, r0
 8012778:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801277c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012780:	2b02      	cmp	r3, #2
 8012782:	d149      	bne.n	8012818 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012784:	2300      	movs	r3, #0
 8012786:	643b      	str	r3, [r7, #64]	@ 0x40
 8012788:	e01e      	b.n	80127c8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801278a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801278c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8012790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012792:	011b      	lsls	r3, r3, #4
 8012794:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012798:	4413      	add	r3, r2
 801279a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801279c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801279e:	3304      	adds	r3, #4
 80127a0:	781b      	ldrb	r3, [r3, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d006      	beq.n	80127b4 <find_volume+0x158>
 80127a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a8:	3308      	adds	r3, #8
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fd ff30 	bl	8010610 <ld_dword>
 80127b0:	4602      	mov	r2, r0
 80127b2:	e000      	b.n	80127b6 <find_volume+0x15a>
 80127b4:	2200      	movs	r2, #0
 80127b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	3358      	adds	r3, #88	@ 0x58
 80127bc:	443b      	add	r3, r7
 80127be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80127c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127c4:	3301      	adds	r3, #1
 80127c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80127c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127ca:	2b03      	cmp	r3, #3
 80127cc:	d9dd      	bls.n	801278a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80127ce:	2300      	movs	r3, #0
 80127d0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80127d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d002      	beq.n	80127de <find_volume+0x182>
 80127d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127da:	3b01      	subs	r3, #1
 80127dc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80127de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127e0:	009b      	lsls	r3, r3, #2
 80127e2:	3358      	adds	r3, #88	@ 0x58
 80127e4:	443b      	add	r3, r7
 80127e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80127ea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80127ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d005      	beq.n	80127fe <find_volume+0x1a2>
 80127f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80127f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80127f6:	f7ff fedb 	bl	80125b0 <check_fs>
 80127fa:	4603      	mov	r3, r0
 80127fc:	e000      	b.n	8012800 <find_volume+0x1a4>
 80127fe:	2303      	movs	r3, #3
 8012800:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012804:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012808:	2b01      	cmp	r3, #1
 801280a:	d905      	bls.n	8012818 <find_volume+0x1bc>
 801280c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801280e:	3301      	adds	r3, #1
 8012810:	643b      	str	r3, [r7, #64]	@ 0x40
 8012812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012814:	2b03      	cmp	r3, #3
 8012816:	d9e2      	bls.n	80127de <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012818:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801281c:	2b04      	cmp	r3, #4
 801281e:	d101      	bne.n	8012824 <find_volume+0x1c8>
 8012820:	2301      	movs	r3, #1
 8012822:	e197      	b.n	8012b54 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012824:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012828:	2b01      	cmp	r3, #1
 801282a:	d901      	bls.n	8012830 <find_volume+0x1d4>
 801282c:	230d      	movs	r3, #13
 801282e:	e191      	b.n	8012b54 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012832:	333c      	adds	r3, #60	@ 0x3c
 8012834:	330b      	adds	r3, #11
 8012836:	4618      	mov	r0, r3
 8012838:	f7fd fed2 	bl	80105e0 <ld_word>
 801283c:	4603      	mov	r3, r0
 801283e:	461a      	mov	r2, r3
 8012840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012842:	899b      	ldrh	r3, [r3, #12]
 8012844:	429a      	cmp	r2, r3
 8012846:	d001      	beq.n	801284c <find_volume+0x1f0>
 8012848:	230d      	movs	r3, #13
 801284a:	e183      	b.n	8012b54 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801284c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801284e:	333c      	adds	r3, #60	@ 0x3c
 8012850:	3316      	adds	r3, #22
 8012852:	4618      	mov	r0, r3
 8012854:	f7fd fec4 	bl	80105e0 <ld_word>
 8012858:	4603      	mov	r3, r0
 801285a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801285c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801285e:	2b00      	cmp	r3, #0
 8012860:	d106      	bne.n	8012870 <find_volume+0x214>
 8012862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012864:	333c      	adds	r3, #60	@ 0x3c
 8012866:	3324      	adds	r3, #36	@ 0x24
 8012868:	4618      	mov	r0, r3
 801286a:	f7fd fed1 	bl	8010610 <ld_dword>
 801286e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8012870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012874:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012878:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 801287c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801287e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012882:	789b      	ldrb	r3, [r3, #2]
 8012884:	2b01      	cmp	r3, #1
 8012886:	d005      	beq.n	8012894 <find_volume+0x238>
 8012888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801288a:	789b      	ldrb	r3, [r3, #2]
 801288c:	2b02      	cmp	r3, #2
 801288e:	d001      	beq.n	8012894 <find_volume+0x238>
 8012890:	230d      	movs	r3, #13
 8012892:	e15f      	b.n	8012b54 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012896:	789b      	ldrb	r3, [r3, #2]
 8012898:	461a      	mov	r2, r3
 801289a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801289c:	fb02 f303 	mul.w	r3, r2, r3
 80128a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80128a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128a4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80128a8:	461a      	mov	r2, r3
 80128aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80128ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128b0:	895b      	ldrh	r3, [r3, #10]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d008      	beq.n	80128c8 <find_volume+0x26c>
 80128b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128b8:	895b      	ldrh	r3, [r3, #10]
 80128ba:	461a      	mov	r2, r3
 80128bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128be:	895b      	ldrh	r3, [r3, #10]
 80128c0:	3b01      	subs	r3, #1
 80128c2:	4013      	ands	r3, r2
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d001      	beq.n	80128cc <find_volume+0x270>
 80128c8:	230d      	movs	r3, #13
 80128ca:	e143      	b.n	8012b54 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80128cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128ce:	333c      	adds	r3, #60	@ 0x3c
 80128d0:	3311      	adds	r3, #17
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7fd fe84 	bl	80105e0 <ld_word>
 80128d8:	4603      	mov	r3, r0
 80128da:	461a      	mov	r2, r3
 80128dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80128e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128e2:	891b      	ldrh	r3, [r3, #8]
 80128e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80128e6:	8992      	ldrh	r2, [r2, #12]
 80128e8:	0952      	lsrs	r2, r2, #5
 80128ea:	b292      	uxth	r2, r2
 80128ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80128f0:	fb01 f202 	mul.w	r2, r1, r2
 80128f4:	1a9b      	subs	r3, r3, r2
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d003      	beq.n	8012904 <find_volume+0x2a8>
 80128fc:	230d      	movs	r3, #13
 80128fe:	e129      	b.n	8012b54 <find_volume+0x4f8>
 8012900:	24003b2c 	.word	0x24003b2c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012906:	333c      	adds	r3, #60	@ 0x3c
 8012908:	3313      	adds	r3, #19
 801290a:	4618      	mov	r0, r3
 801290c:	f7fd fe68 	bl	80105e0 <ld_word>
 8012910:	4603      	mov	r3, r0
 8012912:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012916:	2b00      	cmp	r3, #0
 8012918:	d106      	bne.n	8012928 <find_volume+0x2cc>
 801291a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801291c:	333c      	adds	r3, #60	@ 0x3c
 801291e:	3320      	adds	r3, #32
 8012920:	4618      	mov	r0, r3
 8012922:	f7fd fe75 	bl	8010610 <ld_dword>
 8012926:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801292a:	333c      	adds	r3, #60	@ 0x3c
 801292c:	330e      	adds	r3, #14
 801292e:	4618      	mov	r0, r3
 8012930:	f7fd fe56 	bl	80105e0 <ld_word>
 8012934:	4603      	mov	r3, r0
 8012936:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012938:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801293a:	2b00      	cmp	r3, #0
 801293c:	d101      	bne.n	8012942 <find_volume+0x2e6>
 801293e:	230d      	movs	r3, #13
 8012940:	e108      	b.n	8012b54 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012942:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012946:	4413      	add	r3, r2
 8012948:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801294a:	8911      	ldrh	r1, [r2, #8]
 801294c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801294e:	8992      	ldrh	r2, [r2, #12]
 8012950:	0952      	lsrs	r2, r2, #5
 8012952:	b292      	uxth	r2, r2
 8012954:	fbb1 f2f2 	udiv	r2, r1, r2
 8012958:	b292      	uxth	r2, r2
 801295a:	4413      	add	r3, r2
 801295c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801295e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012962:	429a      	cmp	r2, r3
 8012964:	d201      	bcs.n	801296a <find_volume+0x30e>
 8012966:	230d      	movs	r3, #13
 8012968:	e0f4      	b.n	8012b54 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801296a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801296c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801296e:	1ad3      	subs	r3, r2, r3
 8012970:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012972:	8952      	ldrh	r2, [r2, #10]
 8012974:	fbb3 f3f2 	udiv	r3, r3, r2
 8012978:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801297c:	2b00      	cmp	r3, #0
 801297e:	d101      	bne.n	8012984 <find_volume+0x328>
 8012980:	230d      	movs	r3, #13
 8012982:	e0e7      	b.n	8012b54 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012984:	2303      	movs	r3, #3
 8012986:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801298c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012990:	4293      	cmp	r3, r2
 8012992:	d802      	bhi.n	801299a <find_volume+0x33e>
 8012994:	2302      	movs	r3, #2
 8012996:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801299c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80129a0:	4293      	cmp	r3, r2
 80129a2:	d802      	bhi.n	80129aa <find_volume+0x34e>
 80129a4:	2301      	movs	r3, #1
 80129a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80129aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ac:	1c9a      	adds	r2, r3, #2
 80129ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129b0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80129b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80129b6:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80129b8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80129ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80129bc:	441a      	add	r2, r3
 80129be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129c0:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80129c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80129c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129c6:	441a      	add	r2, r3
 80129c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129ca:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 80129cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80129d0:	2b03      	cmp	r3, #3
 80129d2:	d11e      	bne.n	8012a12 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80129d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129d6:	333c      	adds	r3, #60	@ 0x3c
 80129d8:	332a      	adds	r3, #42	@ 0x2a
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fd fe00 	bl	80105e0 <ld_word>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d001      	beq.n	80129ea <find_volume+0x38e>
 80129e6:	230d      	movs	r3, #13
 80129e8:	e0b4      	b.n	8012b54 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80129ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129ec:	891b      	ldrh	r3, [r3, #8]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d001      	beq.n	80129f6 <find_volume+0x39a>
 80129f2:	230d      	movs	r3, #13
 80129f4:	e0ae      	b.n	8012b54 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80129f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129f8:	333c      	adds	r3, #60	@ 0x3c
 80129fa:	332c      	adds	r3, #44	@ 0x2c
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7fd fe07 	bl	8010610 <ld_dword>
 8012a02:	4602      	mov	r2, r0
 8012a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a06:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a0a:	6a1b      	ldr	r3, [r3, #32]
 8012a0c:	009b      	lsls	r3, r3, #2
 8012a0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8012a10:	e01f      	b.n	8012a52 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a14:	891b      	ldrh	r3, [r3, #8]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d101      	bne.n	8012a1e <find_volume+0x3c2>
 8012a1a:	230d      	movs	r3, #13
 8012a1c:	e09a      	b.n	8012b54 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a24:	441a      	add	r2, r3
 8012a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a28:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012a2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012a2e:	2b02      	cmp	r3, #2
 8012a30:	d103      	bne.n	8012a3a <find_volume+0x3de>
 8012a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a34:	6a1b      	ldr	r3, [r3, #32]
 8012a36:	005b      	lsls	r3, r3, #1
 8012a38:	e00a      	b.n	8012a50 <find_volume+0x3f4>
 8012a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a3c:	6a1a      	ldr	r2, [r3, #32]
 8012a3e:	4613      	mov	r3, r2
 8012a40:	005b      	lsls	r3, r3, #1
 8012a42:	4413      	add	r3, r2
 8012a44:	085a      	lsrs	r2, r3, #1
 8012a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a48:	6a1b      	ldr	r3, [r3, #32]
 8012a4a:	f003 0301 	and.w	r3, r3, #1
 8012a4e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012a50:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a58:	899b      	ldrh	r3, [r3, #12]
 8012a5a:	4619      	mov	r1, r3
 8012a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a5e:	440b      	add	r3, r1
 8012a60:	3b01      	subs	r3, #1
 8012a62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012a64:	8989      	ldrh	r1, [r1, #12]
 8012a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d201      	bcs.n	8012a72 <find_volume+0x416>
 8012a6e:	230d      	movs	r3, #13
 8012a70:	e070      	b.n	8012b54 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a74:	f04f 32ff 	mov.w	r2, #4294967295
 8012a78:	619a      	str	r2, [r3, #24]
 8012a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a7c:	699a      	ldr	r2, [r3, #24]
 8012a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a80:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8012a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a84:	2280      	movs	r2, #128	@ 0x80
 8012a86:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012a88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012a8c:	2b03      	cmp	r3, #3
 8012a8e:	d149      	bne.n	8012b24 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a92:	333c      	adds	r3, #60	@ 0x3c
 8012a94:	3330      	adds	r3, #48	@ 0x30
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7fd fda2 	bl	80105e0 <ld_word>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	2b01      	cmp	r3, #1
 8012aa0:	d140      	bne.n	8012b24 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012aa4:	3301      	adds	r3, #1
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012aaa:	f7fe f849 	bl	8010b40 <move_window>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d137      	bne.n	8012b24 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8012ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012abc:	333c      	adds	r3, #60	@ 0x3c
 8012abe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7fd fd8c 	bl	80105e0 <ld_word>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	461a      	mov	r2, r3
 8012acc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d127      	bne.n	8012b24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ad6:	333c      	adds	r3, #60	@ 0x3c
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7fd fd99 	bl	8010610 <ld_dword>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8012b5c <find_volume+0x500>)
 8012ae2:	4293      	cmp	r3, r2
 8012ae4:	d11e      	bne.n	8012b24 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ae8:	333c      	adds	r3, #60	@ 0x3c
 8012aea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7fd fd8e 	bl	8010610 <ld_dword>
 8012af4:	4603      	mov	r3, r0
 8012af6:	4a1a      	ldr	r2, [pc, #104]	@ (8012b60 <find_volume+0x504>)
 8012af8:	4293      	cmp	r3, r2
 8012afa:	d113      	bne.n	8012b24 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012afe:	333c      	adds	r3, #60	@ 0x3c
 8012b00:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7fd fd83 	bl	8010610 <ld_dword>
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b0e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b12:	333c      	adds	r3, #60	@ 0x3c
 8012b14:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7fd fd79 	bl	8010610 <ld_dword>
 8012b1e:	4602      	mov	r2, r0
 8012b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b22:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b26:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012b2a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8012b64 <find_volume+0x508>)
 8012b2e:	881b      	ldrh	r3, [r3, #0]
 8012b30:	3301      	adds	r3, #1
 8012b32:	b29a      	uxth	r2, r3
 8012b34:	4b0b      	ldr	r3, [pc, #44]	@ (8012b64 <find_volume+0x508>)
 8012b36:	801a      	strh	r2, [r3, #0]
 8012b38:	4b0a      	ldr	r3, [pc, #40]	@ (8012b64 <find_volume+0x508>)
 8012b3a:	881a      	ldrh	r2, [r3, #0]
 8012b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b3e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8012b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b42:	4a09      	ldr	r2, [pc, #36]	@ (8012b68 <find_volume+0x50c>)
 8012b44:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b48:	2200      	movs	r2, #0
 8012b4a:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012b4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012b4e:	f7fd ff8f 	bl	8010a70 <clear_lock>
#endif
	return FR_OK;
 8012b52:	2300      	movs	r3, #0
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3758      	adds	r7, #88	@ 0x58
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}
 8012b5c:	41615252 	.word	0x41615252
 8012b60:	61417272 	.word	0x61417272
 8012b64:	24003b30 	.word	0x24003b30
 8012b68:	24003b54 	.word	0x24003b54

08012b6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b084      	sub	sp, #16
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012b76:	2309      	movs	r3, #9
 8012b78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d01c      	beq.n	8012bba <validate+0x4e>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d018      	beq.n	8012bba <validate+0x4e>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d013      	beq.n	8012bba <validate+0x4e>
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	889a      	ldrh	r2, [r3, #4]
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	88db      	ldrh	r3, [r3, #6]
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	d10c      	bne.n	8012bba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	785b      	ldrb	r3, [r3, #1]
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7fd fc7a 	bl	80104a0 <disk_status>
 8012bac:	4603      	mov	r3, r0
 8012bae:	f003 0301 	and.w	r3, r3, #1
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d101      	bne.n	8012bba <validate+0x4e>
			res = FR_OK;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012bba:	7bfb      	ldrb	r3, [r7, #15]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d102      	bne.n	8012bc6 <validate+0x5a>
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	e000      	b.n	8012bc8 <validate+0x5c>
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	683a      	ldr	r2, [r7, #0]
 8012bca:	6013      	str	r3, [r2, #0]
	return res;
 8012bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3710      	adds	r7, #16
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}
	...

08012bd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b088      	sub	sp, #32
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	4613      	mov	r3, r2
 8012be4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012bea:	f107 0310 	add.w	r3, r7, #16
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7ff fc99 	bl	8012526 <get_ldnumber>
 8012bf4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	da01      	bge.n	8012c00 <f_mount+0x28>
 8012bfc:	230b      	movs	r3, #11
 8012bfe:	e02b      	b.n	8012c58 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012c00:	4a17      	ldr	r2, [pc, #92]	@ (8012c60 <f_mount+0x88>)
 8012c02:	69fb      	ldr	r3, [r7, #28]
 8012c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012c0a:	69bb      	ldr	r3, [r7, #24]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d005      	beq.n	8012c1c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012c10:	69b8      	ldr	r0, [r7, #24]
 8012c12:	f7fd ff2d 	bl	8010a70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	2200      	movs	r2, #0
 8012c1a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d002      	beq.n	8012c28 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	2200      	movs	r2, #0
 8012c26:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012c28:	68fa      	ldr	r2, [r7, #12]
 8012c2a:	490d      	ldr	r1, [pc, #52]	@ (8012c60 <f_mount+0x88>)
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d002      	beq.n	8012c3e <f_mount+0x66>
 8012c38:	79fb      	ldrb	r3, [r7, #7]
 8012c3a:	2b01      	cmp	r3, #1
 8012c3c:	d001      	beq.n	8012c42 <f_mount+0x6a>
 8012c3e:	2300      	movs	r3, #0
 8012c40:	e00a      	b.n	8012c58 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012c42:	f107 010c 	add.w	r1, r7, #12
 8012c46:	f107 0308 	add.w	r3, r7, #8
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7ff fd05 	bl	801265c <find_volume>
 8012c52:	4603      	mov	r3, r0
 8012c54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	3720      	adds	r7, #32
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	24003b2c 	.word	0x24003b2c

08012c64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b09a      	sub	sp, #104	@ 0x68
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	60b9      	str	r1, [r7, #8]
 8012c6e:	4613      	mov	r3, r2
 8012c70:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d101      	bne.n	8012c7c <f_open+0x18>
 8012c78:	2309      	movs	r3, #9
 8012c7a:	e1b7      	b.n	8012fec <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012c7c:	79fb      	ldrb	r3, [r7, #7]
 8012c7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012c82:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012c84:	79fa      	ldrb	r2, [r7, #7]
 8012c86:	f107 0114 	add.w	r1, r7, #20
 8012c8a:	f107 0308 	add.w	r3, r7, #8
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7ff fce4 	bl	801265c <find_volume>
 8012c94:	4603      	mov	r3, r0
 8012c96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8012c9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	f040 819b 	bne.w	8012fda <f_open+0x376>
		dj.obj.fs = fs;
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012ca8:	68ba      	ldr	r2, [r7, #8]
 8012caa:	f107 0318 	add.w	r3, r7, #24
 8012cae:	4611      	mov	r1, r2
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7ff fba3 	bl	80123fc <follow_path>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012cbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d118      	bne.n	8012cf6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012cc4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012cc8:	b25b      	sxtb	r3, r3
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	da03      	bge.n	8012cd6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012cce:	2306      	movs	r3, #6
 8012cd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012cd4:	e00f      	b.n	8012cf6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012cd6:	79fb      	ldrb	r3, [r7, #7]
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	bf8c      	ite	hi
 8012cdc:	2301      	movhi	r3, #1
 8012cde:	2300      	movls	r3, #0
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	f107 0318 	add.w	r3, r7, #24
 8012ce8:	4611      	mov	r1, r2
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7fd fd78 	bl	80107e0 <chk_lock>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012cf6:	79fb      	ldrb	r3, [r7, #7]
 8012cf8:	f003 031c 	and.w	r3, r3, #28
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d07f      	beq.n	8012e00 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8012d00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d017      	beq.n	8012d38 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012d08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012d0c:	2b04      	cmp	r3, #4
 8012d0e:	d10e      	bne.n	8012d2e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012d10:	f7fd fdc2 	bl	8010898 <enq_lock>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d006      	beq.n	8012d28 <f_open+0xc4>
 8012d1a:	f107 0318 	add.w	r3, r7, #24
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7ff f824 	bl	8011d6c <dir_register>
 8012d24:	4603      	mov	r3, r0
 8012d26:	e000      	b.n	8012d2a <f_open+0xc6>
 8012d28:	2312      	movs	r3, #18
 8012d2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012d2e:	79fb      	ldrb	r3, [r7, #7]
 8012d30:	f043 0308 	orr.w	r3, r3, #8
 8012d34:	71fb      	strb	r3, [r7, #7]
 8012d36:	e010      	b.n	8012d5a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012d38:	7fbb      	ldrb	r3, [r7, #30]
 8012d3a:	f003 0311 	and.w	r3, r3, #17
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d003      	beq.n	8012d4a <f_open+0xe6>
					res = FR_DENIED;
 8012d42:	2307      	movs	r3, #7
 8012d44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012d48:	e007      	b.n	8012d5a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012d4a:	79fb      	ldrb	r3, [r7, #7]
 8012d4c:	f003 0304 	and.w	r3, r3, #4
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d002      	beq.n	8012d5a <f_open+0xf6>
 8012d54:	2308      	movs	r3, #8
 8012d56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012d5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d168      	bne.n	8012e34 <f_open+0x1d0>
 8012d62:	79fb      	ldrb	r3, [r7, #7]
 8012d64:	f003 0308 	and.w	r3, r3, #8
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d063      	beq.n	8012e34 <f_open+0x1d0>
				dw = GET_FATTIME();
 8012d6c:	f7fc fe76 	bl	800fa5c <get_fattime>
 8012d70:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d74:	330e      	adds	r3, #14
 8012d76:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7fd fc87 	bl	801068c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d80:	3316      	adds	r3, #22
 8012d82:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7fd fc81 	bl	801068c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d8c:	330b      	adds	r3, #11
 8012d8e:	2220      	movs	r2, #32
 8012d90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012d96:	4611      	mov	r1, r2
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7fe fc56 	bl	801164a <ld_clust>
 8012d9e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012da4:	2200      	movs	r2, #0
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7fe fc6e 	bl	8011688 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dae:	331c      	adds	r3, #28
 8012db0:	2100      	movs	r1, #0
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7fd fc6a 	bl	801068c <st_dword>
					fs->wflag = 1;
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	2201      	movs	r2, #1
 8012dbc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d037      	beq.n	8012e34 <f_open+0x1d0>
						dw = fs->winsect;
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dc8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8012dca:	f107 0318 	add.w	r3, r7, #24
 8012dce:	2200      	movs	r2, #0
 8012dd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7fe f95e 	bl	8011094 <remove_chain>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8012dde:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d126      	bne.n	8012e34 <f_open+0x1d0>
							res = move_window(fs, dw);
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7fd fea8 	bl	8010b40 <move_window>
 8012df0:	4603      	mov	r3, r0
 8012df2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012dfa:	3a01      	subs	r2, #1
 8012dfc:	615a      	str	r2, [r3, #20]
 8012dfe:	e019      	b.n	8012e34 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012e00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d115      	bne.n	8012e34 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012e08:	7fbb      	ldrb	r3, [r7, #30]
 8012e0a:	f003 0310 	and.w	r3, r3, #16
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d003      	beq.n	8012e1a <f_open+0x1b6>
					res = FR_NO_FILE;
 8012e12:	2304      	movs	r3, #4
 8012e14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012e18:	e00c      	b.n	8012e34 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012e1a:	79fb      	ldrb	r3, [r7, #7]
 8012e1c:	f003 0302 	and.w	r3, r3, #2
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d007      	beq.n	8012e34 <f_open+0x1d0>
 8012e24:	7fbb      	ldrb	r3, [r7, #30]
 8012e26:	f003 0301 	and.w	r3, r3, #1
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d002      	beq.n	8012e34 <f_open+0x1d0>
						res = FR_DENIED;
 8012e2e:	2307      	movs	r3, #7
 8012e30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012e34:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d126      	bne.n	8012e8a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012e3c:	79fb      	ldrb	r3, [r7, #7]
 8012e3e:	f003 0308 	and.w	r3, r3, #8
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d003      	beq.n	8012e4e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8012e46:	79fb      	ldrb	r3, [r7, #7]
 8012e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8012e56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012e5c:	79fb      	ldrb	r3, [r7, #7]
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	bf8c      	ite	hi
 8012e62:	2301      	movhi	r3, #1
 8012e64:	2300      	movls	r3, #0
 8012e66:	b2db      	uxtb	r3, r3
 8012e68:	461a      	mov	r2, r3
 8012e6a:	f107 0318 	add.w	r3, r7, #24
 8012e6e:	4611      	mov	r1, r2
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7fd fd33 	bl	80108dc <inc_lock>
 8012e76:	4602      	mov	r2, r0
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	691b      	ldr	r3, [r3, #16]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d102      	bne.n	8012e8a <f_open+0x226>
 8012e84:	2302      	movs	r3, #2
 8012e86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012e8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	f040 80a3 	bne.w	8012fda <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012e98:	4611      	mov	r1, r2
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fe fbd5 	bl	801164a <ld_clust>
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ea8:	331c      	adds	r3, #28
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7fd fbb0 	bl	8010610 <ld_dword>
 8012eb0:	4602      	mov	r2, r0
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012ebc:	697a      	ldr	r2, [r7, #20]
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	88da      	ldrh	r2, [r3, #6]
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	79fa      	ldrb	r2, [r7, #7]
 8012ece:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	2200      	movs	r2, #0
 8012ee0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	3330      	adds	r3, #48	@ 0x30
 8012ee6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012eea:	2100      	movs	r1, #0
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7fd fc1a 	bl	8010726 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012ef2:	79fb      	ldrb	r3, [r7, #7]
 8012ef4:	f003 0320 	and.w	r3, r3, #32
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d06e      	beq.n	8012fda <f_open+0x376>
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	68db      	ldr	r3, [r3, #12]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d06a      	beq.n	8012fda <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	68da      	ldr	r2, [r3, #12]
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	895b      	ldrh	r3, [r3, #10]
 8012f10:	461a      	mov	r2, r3
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	899b      	ldrh	r3, [r3, #12]
 8012f16:	fb02 f303 	mul.w	r3, r2, r3
 8012f1a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	689b      	ldr	r3, [r3, #8]
 8012f20:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	68db      	ldr	r3, [r3, #12]
 8012f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012f28:	e016      	b.n	8012f58 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fd fec3 	bl	8010cba <get_fat>
 8012f34:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012f36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d802      	bhi.n	8012f42 <f_open+0x2de>
 8012f3c:	2302      	movs	r3, #2
 8012f3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f48:	d102      	bne.n	8012f50 <f_open+0x2ec>
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012f50:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f54:	1ad3      	subs	r3, r2, r3
 8012f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012f58:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d103      	bne.n	8012f68 <f_open+0x304>
 8012f60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012f62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d8e0      	bhi.n	8012f2a <f_open+0x2c6>
				}
				fp->clust = clst;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012f6c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012f6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d131      	bne.n	8012fda <f_open+0x376>
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	899b      	ldrh	r3, [r3, #12]
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f82:	fb01 f202 	mul.w	r2, r1, r2
 8012f86:	1a9b      	subs	r3, r3, r2
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d026      	beq.n	8012fda <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012f8c:	697b      	ldr	r3, [r7, #20]
 8012f8e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7fd fe73 	bl	8010c7c <clust2sect>
 8012f96:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8012f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d103      	bne.n	8012fa6 <f_open+0x342>
						res = FR_INT_ERR;
 8012f9e:	2302      	movs	r3, #2
 8012fa0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8012fa4:	e019      	b.n	8012fda <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	899b      	ldrh	r3, [r3, #12]
 8012faa:	461a      	mov	r2, r3
 8012fac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012fae:	fbb3 f2f2 	udiv	r2, r3, r2
 8012fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fb4:	441a      	add	r2, r3
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	7858      	ldrb	r0, [r3, #1]
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	6a1a      	ldr	r2, [r3, #32]
 8012fc8:	2301      	movs	r3, #1
 8012fca:	f7fd faab 	bl	8010524 <disk_read>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d002      	beq.n	8012fda <f_open+0x376>
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012fda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d002      	beq.n	8012fe8 <f_open+0x384>
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012fe8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8012fec:	4618      	mov	r0, r3
 8012fee:	3768      	adds	r7, #104	@ 0x68
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}

08012ff4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b08e      	sub	sp, #56	@ 0x38
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	60b9      	str	r1, [r7, #8]
 8012ffe:	607a      	str	r2, [r7, #4]
 8013000:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	2200      	movs	r2, #0
 801300a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	f107 0214 	add.w	r2, r7, #20
 8013012:	4611      	mov	r1, r2
 8013014:	4618      	mov	r0, r3
 8013016:	f7ff fda9 	bl	8012b6c <validate>
 801301a:	4603      	mov	r3, r0
 801301c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013020:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013024:	2b00      	cmp	r3, #0
 8013026:	d107      	bne.n	8013038 <f_read+0x44>
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	7d5b      	ldrb	r3, [r3, #21]
 801302c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013030:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013034:	2b00      	cmp	r3, #0
 8013036:	d002      	beq.n	801303e <f_read+0x4a>
 8013038:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801303c:	e135      	b.n	80132aa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	7d1b      	ldrb	r3, [r3, #20]
 8013042:	f003 0301 	and.w	r3, r3, #1
 8013046:	2b00      	cmp	r3, #0
 8013048:	d101      	bne.n	801304e <f_read+0x5a>
 801304a:	2307      	movs	r3, #7
 801304c:	e12d      	b.n	80132aa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	68da      	ldr	r2, [r3, #12]
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	699b      	ldr	r3, [r3, #24]
 8013056:	1ad3      	subs	r3, r2, r3
 8013058:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801305a:	687a      	ldr	r2, [r7, #4]
 801305c:	6a3b      	ldr	r3, [r7, #32]
 801305e:	429a      	cmp	r2, r3
 8013060:	f240 811e 	bls.w	80132a0 <f_read+0x2ac>
 8013064:	6a3b      	ldr	r3, [r7, #32]
 8013066:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013068:	e11a      	b.n	80132a0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	699b      	ldr	r3, [r3, #24]
 801306e:	697a      	ldr	r2, [r7, #20]
 8013070:	8992      	ldrh	r2, [r2, #12]
 8013072:	fbb3 f1f2 	udiv	r1, r3, r2
 8013076:	fb01 f202 	mul.w	r2, r1, r2
 801307a:	1a9b      	subs	r3, r3, r2
 801307c:	2b00      	cmp	r3, #0
 801307e:	f040 80d5 	bne.w	801322c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	699b      	ldr	r3, [r3, #24]
 8013086:	697a      	ldr	r2, [r7, #20]
 8013088:	8992      	ldrh	r2, [r2, #12]
 801308a:	fbb3 f3f2 	udiv	r3, r3, r2
 801308e:	697a      	ldr	r2, [r7, #20]
 8013090:	8952      	ldrh	r2, [r2, #10]
 8013092:	3a01      	subs	r2, #1
 8013094:	4013      	ands	r3, r2
 8013096:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013098:	69fb      	ldr	r3, [r7, #28]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d12f      	bne.n	80130fe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	699b      	ldr	r3, [r3, #24]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d103      	bne.n	80130ae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	689b      	ldr	r3, [r3, #8]
 80130aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80130ac:	e013      	b.n	80130d6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d007      	beq.n	80130c6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	699b      	ldr	r3, [r3, #24]
 80130ba:	4619      	mov	r1, r3
 80130bc:	68f8      	ldr	r0, [r7, #12]
 80130be:	f7fe f8e6 	bl	801128e <clmt_clust>
 80130c2:	6338      	str	r0, [r7, #48]	@ 0x30
 80130c4:	e007      	b.n	80130d6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80130c6:	68fa      	ldr	r2, [r7, #12]
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	69db      	ldr	r3, [r3, #28]
 80130cc:	4619      	mov	r1, r3
 80130ce:	4610      	mov	r0, r2
 80130d0:	f7fd fdf3 	bl	8010cba <get_fat>
 80130d4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80130d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130d8:	2b01      	cmp	r3, #1
 80130da:	d804      	bhi.n	80130e6 <f_read+0xf2>
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	2202      	movs	r2, #2
 80130e0:	755a      	strb	r2, [r3, #21]
 80130e2:	2302      	movs	r3, #2
 80130e4:	e0e1      	b.n	80132aa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80130e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ec:	d104      	bne.n	80130f8 <f_read+0x104>
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2201      	movs	r2, #1
 80130f2:	755a      	strb	r2, [r3, #21]
 80130f4:	2301      	movs	r3, #1
 80130f6:	e0d8      	b.n	80132aa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80130fc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80130fe:	697a      	ldr	r2, [r7, #20]
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	69db      	ldr	r3, [r3, #28]
 8013104:	4619      	mov	r1, r3
 8013106:	4610      	mov	r0, r2
 8013108:	f7fd fdb8 	bl	8010c7c <clust2sect>
 801310c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801310e:	69bb      	ldr	r3, [r7, #24]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d104      	bne.n	801311e <f_read+0x12a>
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2202      	movs	r2, #2
 8013118:	755a      	strb	r2, [r3, #21]
 801311a:	2302      	movs	r3, #2
 801311c:	e0c5      	b.n	80132aa <f_read+0x2b6>
			sect += csect;
 801311e:	69ba      	ldr	r2, [r7, #24]
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	4413      	add	r3, r2
 8013124:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	899b      	ldrh	r3, [r3, #12]
 801312a:	461a      	mov	r2, r3
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013132:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013136:	2b00      	cmp	r3, #0
 8013138:	d041      	beq.n	80131be <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801313a:	69fa      	ldr	r2, [r7, #28]
 801313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801313e:	4413      	add	r3, r2
 8013140:	697a      	ldr	r2, [r7, #20]
 8013142:	8952      	ldrh	r2, [r2, #10]
 8013144:	4293      	cmp	r3, r2
 8013146:	d905      	bls.n	8013154 <f_read+0x160>
					cc = fs->csize - csect;
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	895b      	ldrh	r3, [r3, #10]
 801314c:	461a      	mov	r2, r3
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	1ad3      	subs	r3, r2, r3
 8013152:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	7858      	ldrb	r0, [r3, #1]
 8013158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801315a:	69ba      	ldr	r2, [r7, #24]
 801315c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801315e:	f7fd f9e1 	bl	8010524 <disk_read>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	d004      	beq.n	8013172 <f_read+0x17e>
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2201      	movs	r2, #1
 801316c:	755a      	strb	r2, [r3, #21]
 801316e:	2301      	movs	r3, #1
 8013170:	e09b      	b.n	80132aa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	7d1b      	ldrb	r3, [r3, #20]
 8013176:	b25b      	sxtb	r3, r3
 8013178:	2b00      	cmp	r3, #0
 801317a:	da18      	bge.n	80131ae <f_read+0x1ba>
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	6a1a      	ldr	r2, [r3, #32]
 8013180:	69bb      	ldr	r3, [r7, #24]
 8013182:	1ad3      	subs	r3, r2, r3
 8013184:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013186:	429a      	cmp	r2, r3
 8013188:	d911      	bls.n	80131ae <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	6a1a      	ldr	r2, [r3, #32]
 801318e:	69bb      	ldr	r3, [r7, #24]
 8013190:	1ad3      	subs	r3, r2, r3
 8013192:	697a      	ldr	r2, [r7, #20]
 8013194:	8992      	ldrh	r2, [r2, #12]
 8013196:	fb02 f303 	mul.w	r3, r2, r3
 801319a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801319c:	18d0      	adds	r0, r2, r3
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	899b      	ldrh	r3, [r3, #12]
 80131a8:	461a      	mov	r2, r3
 80131aa:	f7fd fa9b 	bl	80106e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	899b      	ldrh	r3, [r3, #12]
 80131b2:	461a      	mov	r2, r3
 80131b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131b6:	fb02 f303 	mul.w	r3, r2, r3
 80131ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80131bc:	e05c      	b.n	8013278 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	6a1b      	ldr	r3, [r3, #32]
 80131c2:	69ba      	ldr	r2, [r7, #24]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d02e      	beq.n	8013226 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	7d1b      	ldrb	r3, [r3, #20]
 80131cc:	b25b      	sxtb	r3, r3
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	da18      	bge.n	8013204 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80131d2:	697b      	ldr	r3, [r7, #20]
 80131d4:	7858      	ldrb	r0, [r3, #1]
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	6a1a      	ldr	r2, [r3, #32]
 80131e0:	2301      	movs	r3, #1
 80131e2:	f7fd f9bf 	bl	8010564 <disk_write>
 80131e6:	4603      	mov	r3, r0
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d004      	beq.n	80131f6 <f_read+0x202>
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2201      	movs	r2, #1
 80131f0:	755a      	strb	r2, [r3, #21]
 80131f2:	2301      	movs	r3, #1
 80131f4:	e059      	b.n	80132aa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	7d1b      	ldrb	r3, [r3, #20]
 80131fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80131fe:	b2da      	uxtb	r2, r3
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	7858      	ldrb	r0, [r3, #1]
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801320e:	2301      	movs	r3, #1
 8013210:	69ba      	ldr	r2, [r7, #24]
 8013212:	f7fd f987 	bl	8010524 <disk_read>
 8013216:	4603      	mov	r3, r0
 8013218:	2b00      	cmp	r3, #0
 801321a:	d004      	beq.n	8013226 <f_read+0x232>
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2201      	movs	r2, #1
 8013220:	755a      	strb	r2, [r3, #21]
 8013222:	2301      	movs	r3, #1
 8013224:	e041      	b.n	80132aa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	69ba      	ldr	r2, [r7, #24]
 801322a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	899b      	ldrh	r3, [r3, #12]
 8013230:	4618      	mov	r0, r3
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	699b      	ldr	r3, [r3, #24]
 8013236:	697a      	ldr	r2, [r7, #20]
 8013238:	8992      	ldrh	r2, [r2, #12]
 801323a:	fbb3 f1f2 	udiv	r1, r3, r2
 801323e:	fb01 f202 	mul.w	r2, r1, r2
 8013242:	1a9b      	subs	r3, r3, r2
 8013244:	1ac3      	subs	r3, r0, r3
 8013246:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	429a      	cmp	r2, r3
 801324e:	d901      	bls.n	8013254 <f_read+0x260>
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	699b      	ldr	r3, [r3, #24]
 801325e:	697a      	ldr	r2, [r7, #20]
 8013260:	8992      	ldrh	r2, [r2, #12]
 8013262:	fbb3 f0f2 	udiv	r0, r3, r2
 8013266:	fb00 f202 	mul.w	r2, r0, r2
 801326a:	1a9b      	subs	r3, r3, r2
 801326c:	440b      	add	r3, r1
 801326e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013270:	4619      	mov	r1, r3
 8013272:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013274:	f7fd fa36 	bl	80106e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801327c:	4413      	add	r3, r2
 801327e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	699a      	ldr	r2, [r3, #24]
 8013284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013286:	441a      	add	r2, r3
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	619a      	str	r2, [r3, #24]
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	681a      	ldr	r2, [r3, #0]
 8013290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013292:	441a      	add	r2, r3
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	601a      	str	r2, [r3, #0]
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801329c:	1ad3      	subs	r3, r2, r3
 801329e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f47f aee1 	bne.w	801306a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80132a8:	2300      	movs	r3, #0
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3738      	adds	r7, #56	@ 0x38
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}

080132b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80132b2:	b580      	push	{r7, lr}
 80132b4:	b08c      	sub	sp, #48	@ 0x30
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	60f8      	str	r0, [r7, #12]
 80132ba:	60b9      	str	r1, [r7, #8]
 80132bc:	607a      	str	r2, [r7, #4]
 80132be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	2200      	movs	r2, #0
 80132c8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	f107 0210 	add.w	r2, r7, #16
 80132d0:	4611      	mov	r1, r2
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7ff fc4a 	bl	8012b6c <validate>
 80132d8:	4603      	mov	r3, r0
 80132da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80132de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d107      	bne.n	80132f6 <f_write+0x44>
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	7d5b      	ldrb	r3, [r3, #21]
 80132ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80132ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d002      	beq.n	80132fc <f_write+0x4a>
 80132f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80132fa:	e16a      	b.n	80135d2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	7d1b      	ldrb	r3, [r3, #20]
 8013300:	f003 0302 	and.w	r3, r3, #2
 8013304:	2b00      	cmp	r3, #0
 8013306:	d101      	bne.n	801330c <f_write+0x5a>
 8013308:	2307      	movs	r3, #7
 801330a:	e162      	b.n	80135d2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	699a      	ldr	r2, [r3, #24]
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	441a      	add	r2, r3
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	699b      	ldr	r3, [r3, #24]
 8013318:	429a      	cmp	r2, r3
 801331a:	f080 814c 	bcs.w	80135b6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	699b      	ldr	r3, [r3, #24]
 8013322:	43db      	mvns	r3, r3
 8013324:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013326:	e146      	b.n	80135b6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	699b      	ldr	r3, [r3, #24]
 801332c:	693a      	ldr	r2, [r7, #16]
 801332e:	8992      	ldrh	r2, [r2, #12]
 8013330:	fbb3 f1f2 	udiv	r1, r3, r2
 8013334:	fb01 f202 	mul.w	r2, r1, r2
 8013338:	1a9b      	subs	r3, r3, r2
 801333a:	2b00      	cmp	r3, #0
 801333c:	f040 80f1 	bne.w	8013522 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	699b      	ldr	r3, [r3, #24]
 8013344:	693a      	ldr	r2, [r7, #16]
 8013346:	8992      	ldrh	r2, [r2, #12]
 8013348:	fbb3 f3f2 	udiv	r3, r3, r2
 801334c:	693a      	ldr	r2, [r7, #16]
 801334e:	8952      	ldrh	r2, [r2, #10]
 8013350:	3a01      	subs	r2, #1
 8013352:	4013      	ands	r3, r2
 8013354:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013356:	69bb      	ldr	r3, [r7, #24]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d143      	bne.n	80133e4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	699b      	ldr	r3, [r3, #24]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d10c      	bne.n	801337e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	689b      	ldr	r3, [r3, #8]
 8013368:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801336a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801336c:	2b00      	cmp	r3, #0
 801336e:	d11a      	bne.n	80133a6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	2100      	movs	r1, #0
 8013374:	4618      	mov	r0, r3
 8013376:	f7fd fef2 	bl	801115e <create_chain>
 801337a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801337c:	e013      	b.n	80133a6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013382:	2b00      	cmp	r3, #0
 8013384:	d007      	beq.n	8013396 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	699b      	ldr	r3, [r3, #24]
 801338a:	4619      	mov	r1, r3
 801338c:	68f8      	ldr	r0, [r7, #12]
 801338e:	f7fd ff7e 	bl	801128e <clmt_clust>
 8013392:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013394:	e007      	b.n	80133a6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013396:	68fa      	ldr	r2, [r7, #12]
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	69db      	ldr	r3, [r3, #28]
 801339c:	4619      	mov	r1, r3
 801339e:	4610      	mov	r0, r2
 80133a0:	f7fd fedd 	bl	801115e <create_chain>
 80133a4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80133a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	f000 8109 	beq.w	80135c0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80133ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133b0:	2b01      	cmp	r3, #1
 80133b2:	d104      	bne.n	80133be <f_write+0x10c>
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	2202      	movs	r2, #2
 80133b8:	755a      	strb	r2, [r3, #21]
 80133ba:	2302      	movs	r3, #2
 80133bc:	e109      	b.n	80135d2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80133be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133c4:	d104      	bne.n	80133d0 <f_write+0x11e>
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	2201      	movs	r2, #1
 80133ca:	755a      	strb	r2, [r3, #21]
 80133cc:	2301      	movs	r3, #1
 80133ce:	e100      	b.n	80135d2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133d4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	689b      	ldr	r3, [r3, #8]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d102      	bne.n	80133e4 <f_write+0x132>
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	7d1b      	ldrb	r3, [r3, #20]
 80133e8:	b25b      	sxtb	r3, r3
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	da18      	bge.n	8013420 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80133ee:	693b      	ldr	r3, [r7, #16]
 80133f0:	7858      	ldrb	r0, [r3, #1]
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	6a1a      	ldr	r2, [r3, #32]
 80133fc:	2301      	movs	r3, #1
 80133fe:	f7fd f8b1 	bl	8010564 <disk_write>
 8013402:	4603      	mov	r3, r0
 8013404:	2b00      	cmp	r3, #0
 8013406:	d004      	beq.n	8013412 <f_write+0x160>
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2201      	movs	r2, #1
 801340c:	755a      	strb	r2, [r3, #21]
 801340e:	2301      	movs	r3, #1
 8013410:	e0df      	b.n	80135d2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	7d1b      	ldrb	r3, [r3, #20]
 8013416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801341a:	b2da      	uxtb	r2, r3
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013420:	693a      	ldr	r2, [r7, #16]
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	69db      	ldr	r3, [r3, #28]
 8013426:	4619      	mov	r1, r3
 8013428:	4610      	mov	r0, r2
 801342a:	f7fd fc27 	bl	8010c7c <clust2sect>
 801342e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d104      	bne.n	8013440 <f_write+0x18e>
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	2202      	movs	r2, #2
 801343a:	755a      	strb	r2, [r3, #21]
 801343c:	2302      	movs	r3, #2
 801343e:	e0c8      	b.n	80135d2 <f_write+0x320>
			sect += csect;
 8013440:	697a      	ldr	r2, [r7, #20]
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	4413      	add	r3, r2
 8013446:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	899b      	ldrh	r3, [r3, #12]
 801344c:	461a      	mov	r2, r3
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	fbb3 f3f2 	udiv	r3, r3, r2
 8013454:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013456:	6a3b      	ldr	r3, [r7, #32]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d043      	beq.n	80134e4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801345c:	69ba      	ldr	r2, [r7, #24]
 801345e:	6a3b      	ldr	r3, [r7, #32]
 8013460:	4413      	add	r3, r2
 8013462:	693a      	ldr	r2, [r7, #16]
 8013464:	8952      	ldrh	r2, [r2, #10]
 8013466:	4293      	cmp	r3, r2
 8013468:	d905      	bls.n	8013476 <f_write+0x1c4>
					cc = fs->csize - csect;
 801346a:	693b      	ldr	r3, [r7, #16]
 801346c:	895b      	ldrh	r3, [r3, #10]
 801346e:	461a      	mov	r2, r3
 8013470:	69bb      	ldr	r3, [r7, #24]
 8013472:	1ad3      	subs	r3, r2, r3
 8013474:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013476:	693b      	ldr	r3, [r7, #16]
 8013478:	7858      	ldrb	r0, [r3, #1]
 801347a:	6a3b      	ldr	r3, [r7, #32]
 801347c:	697a      	ldr	r2, [r7, #20]
 801347e:	69f9      	ldr	r1, [r7, #28]
 8013480:	f7fd f870 	bl	8010564 <disk_write>
 8013484:	4603      	mov	r3, r0
 8013486:	2b00      	cmp	r3, #0
 8013488:	d004      	beq.n	8013494 <f_write+0x1e2>
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	2201      	movs	r2, #1
 801348e:	755a      	strb	r2, [r3, #21]
 8013490:	2301      	movs	r3, #1
 8013492:	e09e      	b.n	80135d2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	6a1a      	ldr	r2, [r3, #32]
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	1ad3      	subs	r3, r2, r3
 801349c:	6a3a      	ldr	r2, [r7, #32]
 801349e:	429a      	cmp	r2, r3
 80134a0:	d918      	bls.n	80134d4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	6a1a      	ldr	r2, [r3, #32]
 80134ac:	697b      	ldr	r3, [r7, #20]
 80134ae:	1ad3      	subs	r3, r2, r3
 80134b0:	693a      	ldr	r2, [r7, #16]
 80134b2:	8992      	ldrh	r2, [r2, #12]
 80134b4:	fb02 f303 	mul.w	r3, r2, r3
 80134b8:	69fa      	ldr	r2, [r7, #28]
 80134ba:	18d1      	adds	r1, r2, r3
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	899b      	ldrh	r3, [r3, #12]
 80134c0:	461a      	mov	r2, r3
 80134c2:	f7fd f90f 	bl	80106e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	7d1b      	ldrb	r3, [r3, #20]
 80134ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134ce:	b2da      	uxtb	r2, r3
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	899b      	ldrh	r3, [r3, #12]
 80134d8:	461a      	mov	r2, r3
 80134da:	6a3b      	ldr	r3, [r7, #32]
 80134dc:	fb02 f303 	mul.w	r3, r2, r3
 80134e0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80134e2:	e04b      	b.n	801357c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	6a1b      	ldr	r3, [r3, #32]
 80134e8:	697a      	ldr	r2, [r7, #20]
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d016      	beq.n	801351c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	699a      	ldr	r2, [r3, #24]
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d210      	bcs.n	801351c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	7858      	ldrb	r0, [r3, #1]
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013504:	2301      	movs	r3, #1
 8013506:	697a      	ldr	r2, [r7, #20]
 8013508:	f7fd f80c 	bl	8010524 <disk_read>
 801350c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801350e:	2b00      	cmp	r3, #0
 8013510:	d004      	beq.n	801351c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	2201      	movs	r2, #1
 8013516:	755a      	strb	r2, [r3, #21]
 8013518:	2301      	movs	r3, #1
 801351a:	e05a      	b.n	80135d2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	697a      	ldr	r2, [r7, #20]
 8013520:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	899b      	ldrh	r3, [r3, #12]
 8013526:	4618      	mov	r0, r3
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	699b      	ldr	r3, [r3, #24]
 801352c:	693a      	ldr	r2, [r7, #16]
 801352e:	8992      	ldrh	r2, [r2, #12]
 8013530:	fbb3 f1f2 	udiv	r1, r3, r2
 8013534:	fb01 f202 	mul.w	r2, r1, r2
 8013538:	1a9b      	subs	r3, r3, r2
 801353a:	1ac3      	subs	r3, r0, r3
 801353c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801353e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	429a      	cmp	r2, r3
 8013544:	d901      	bls.n	801354a <f_write+0x298>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	699b      	ldr	r3, [r3, #24]
 8013554:	693a      	ldr	r2, [r7, #16]
 8013556:	8992      	ldrh	r2, [r2, #12]
 8013558:	fbb3 f0f2 	udiv	r0, r3, r2
 801355c:	fb00 f202 	mul.w	r2, r0, r2
 8013560:	1a9b      	subs	r3, r3, r2
 8013562:	440b      	add	r3, r1
 8013564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013566:	69f9      	ldr	r1, [r7, #28]
 8013568:	4618      	mov	r0, r3
 801356a:	f7fd f8bb 	bl	80106e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	7d1b      	ldrb	r3, [r3, #20]
 8013572:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013576:	b2da      	uxtb	r2, r3
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801357c:	69fa      	ldr	r2, [r7, #28]
 801357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013580:	4413      	add	r3, r2
 8013582:	61fb      	str	r3, [r7, #28]
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	699a      	ldr	r2, [r3, #24]
 8013588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801358a:	441a      	add	r2, r3
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	619a      	str	r2, [r3, #24]
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	68da      	ldr	r2, [r3, #12]
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	699b      	ldr	r3, [r3, #24]
 8013598:	429a      	cmp	r2, r3
 801359a:	bf38      	it	cc
 801359c:	461a      	movcc	r2, r3
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	60da      	str	r2, [r3, #12]
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135a8:	441a      	add	r2, r3
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	601a      	str	r2, [r3, #0]
 80135ae:	687a      	ldr	r2, [r7, #4]
 80135b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135b2:	1ad3      	subs	r3, r2, r3
 80135b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	f47f aeb5 	bne.w	8013328 <f_write+0x76>
 80135be:	e000      	b.n	80135c2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80135c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	7d1b      	ldrb	r3, [r3, #20]
 80135c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135ca:	b2da      	uxtb	r2, r3
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80135d0:	2300      	movs	r3, #0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3730      	adds	r7, #48	@ 0x30
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}

080135da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80135da:	b580      	push	{r7, lr}
 80135dc:	b086      	sub	sp, #24
 80135de:	af00      	add	r7, sp, #0
 80135e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f107 0208 	add.w	r2, r7, #8
 80135e8:	4611      	mov	r1, r2
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7ff fabe 	bl	8012b6c <validate>
 80135f0:	4603      	mov	r3, r0
 80135f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80135f4:	7dfb      	ldrb	r3, [r7, #23]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d168      	bne.n	80136cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	7d1b      	ldrb	r3, [r3, #20]
 80135fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013602:	2b00      	cmp	r3, #0
 8013604:	d062      	beq.n	80136cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	7d1b      	ldrb	r3, [r3, #20]
 801360a:	b25b      	sxtb	r3, r3
 801360c:	2b00      	cmp	r3, #0
 801360e:	da15      	bge.n	801363c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	7858      	ldrb	r0, [r3, #1]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	6a1a      	ldr	r2, [r3, #32]
 801361e:	2301      	movs	r3, #1
 8013620:	f7fc ffa0 	bl	8010564 <disk_write>
 8013624:	4603      	mov	r3, r0
 8013626:	2b00      	cmp	r3, #0
 8013628:	d001      	beq.n	801362e <f_sync+0x54>
 801362a:	2301      	movs	r3, #1
 801362c:	e04f      	b.n	80136ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	7d1b      	ldrb	r3, [r3, #20]
 8013632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013636:	b2da      	uxtb	r2, r3
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801363c:	f7fc fa0e 	bl	800fa5c <get_fattime>
 8013640:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013642:	68ba      	ldr	r2, [r7, #8]
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013648:	4619      	mov	r1, r3
 801364a:	4610      	mov	r0, r2
 801364c:	f7fd fa78 	bl	8010b40 <move_window>
 8013650:	4603      	mov	r3, r0
 8013652:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013654:	7dfb      	ldrb	r3, [r7, #23]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d138      	bne.n	80136cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801365e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	330b      	adds	r3, #11
 8013664:	781a      	ldrb	r2, [r3, #0]
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	330b      	adds	r3, #11
 801366a:	f042 0220 	orr.w	r2, r2, #32
 801366e:	b2d2      	uxtb	r2, r2
 8013670:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6818      	ldr	r0, [r3, #0]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	689b      	ldr	r3, [r3, #8]
 801367a:	461a      	mov	r2, r3
 801367c:	68f9      	ldr	r1, [r7, #12]
 801367e:	f7fe f803 	bl	8011688 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	f103 021c 	add.w	r2, r3, #28
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	68db      	ldr	r3, [r3, #12]
 801368c:	4619      	mov	r1, r3
 801368e:	4610      	mov	r0, r2
 8013690:	f7fc fffc 	bl	801068c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	3316      	adds	r3, #22
 8013698:	6939      	ldr	r1, [r7, #16]
 801369a:	4618      	mov	r0, r3
 801369c:	f7fc fff6 	bl	801068c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	3312      	adds	r3, #18
 80136a4:	2100      	movs	r1, #0
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7fc ffd5 	bl	8010656 <st_word>
					fs->wflag = 1;
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	2201      	movs	r2, #1
 80136b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7fd fa71 	bl	8010b9c <sync_fs>
 80136ba:	4603      	mov	r3, r0
 80136bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	7d1b      	ldrb	r3, [r3, #20]
 80136c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80136c6:	b2da      	uxtb	r2, r3
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80136cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	3718      	adds	r7, #24
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}

080136d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80136d6:	b580      	push	{r7, lr}
 80136d8:	b084      	sub	sp, #16
 80136da:	af00      	add	r7, sp, #0
 80136dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f7ff ff7b 	bl	80135da <f_sync>
 80136e4:	4603      	mov	r3, r0
 80136e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80136e8:	7bfb      	ldrb	r3, [r7, #15]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d118      	bne.n	8013720 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f107 0208 	add.w	r2, r7, #8
 80136f4:	4611      	mov	r1, r2
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7ff fa38 	bl	8012b6c <validate>
 80136fc:	4603      	mov	r3, r0
 80136fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013700:	7bfb      	ldrb	r3, [r7, #15]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d10c      	bne.n	8013720 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	691b      	ldr	r3, [r3, #16]
 801370a:	4618      	mov	r0, r3
 801370c:	f7fd f974 	bl	80109f8 <dec_lock>
 8013710:	4603      	mov	r3, r0
 8013712:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013714:	7bfb      	ldrb	r3, [r7, #15]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d102      	bne.n	8013720 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	2200      	movs	r2, #0
 801371e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013720:	7bfb      	ldrb	r3, [r7, #15]
}
 8013722:	4618      	mov	r0, r3
 8013724:	3710      	adds	r7, #16
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}

0801372a <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801372a:	b590      	push	{r4, r7, lr}
 801372c:	b093      	sub	sp, #76	@ 0x4c
 801372e:	af00      	add	r7, sp, #0
 8013730:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013732:	f107 010c 	add.w	r1, r7, #12
 8013736:	1d3b      	adds	r3, r7, #4
 8013738:	2200      	movs	r2, #0
 801373a:	4618      	mov	r0, r3
 801373c:	f7fe ff8e 	bl	801265c <find_volume>
 8013740:	4603      	mov	r3, r0
 8013742:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8013746:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801374a:	2b00      	cmp	r3, #0
 801374c:	d131      	bne.n	80137b2 <f_chdir+0x88>
		dj.obj.fs = fs;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	f107 0310 	add.w	r3, r7, #16
 8013758:	4611      	mov	r1, r2
 801375a:	4618      	mov	r0, r3
 801375c:	f7fe fe4e 	bl	80123fc <follow_path>
 8013760:	4603      	mov	r3, r0
 8013762:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {					/* Follow completed */
 8013766:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801376a:	2b00      	cmp	r3, #0
 801376c:	d11a      	bne.n	80137a4 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801376e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013772:	b25b      	sxtb	r3, r3
 8013774:	2b00      	cmp	r3, #0
 8013776:	da03      	bge.n	8013780 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	69ba      	ldr	r2, [r7, #24]
 801377c:	61da      	str	r2, [r3, #28]
 801377e:	e011      	b.n	80137a4 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013780:	7dbb      	ldrb	r3, [r7, #22]
 8013782:	f003 0310 	and.w	r3, r3, #16
 8013786:	2b00      	cmp	r3, #0
 8013788:	d009      	beq.n	801379e <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801378e:	68fc      	ldr	r4, [r7, #12]
 8013790:	4611      	mov	r1, r2
 8013792:	4618      	mov	r0, r3
 8013794:	f7fd ff59 	bl	801164a <ld_clust>
 8013798:	4603      	mov	r3, r0
 801379a:	61e3      	str	r3, [r4, #28]
 801379c:	e002      	b.n	80137a4 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 801379e:	2305      	movs	r3, #5
 80137a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80137a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80137a8:	2b04      	cmp	r3, #4
 80137aa:	d102      	bne.n	80137b2 <f_chdir+0x88>
 80137ac:	2305      	movs	r3, #5
 80137ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	LEAVE_FF(fs, res);
 80137b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	374c      	adds	r7, #76	@ 0x4c
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd90      	pop	{r4, r7, pc}

080137be <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80137be:	b580      	push	{r7, lr}
 80137c0:	b090      	sub	sp, #64	@ 0x40
 80137c2:	af00      	add	r7, sp, #0
 80137c4:	6078      	str	r0, [r7, #4]
 80137c6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f107 0208 	add.w	r2, r7, #8
 80137ce:	4611      	mov	r1, r2
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7ff f9cb 	bl	8012b6c <validate>
 80137d6:	4603      	mov	r3, r0
 80137d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80137dc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d103      	bne.n	80137ec <f_lseek+0x2e>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	7d5b      	ldrb	r3, [r3, #21]
 80137e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80137ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d002      	beq.n	80137fa <f_lseek+0x3c>
 80137f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80137f8:	e201      	b.n	8013bfe <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137fe:	2b00      	cmp	r3, #0
 8013800:	f000 80d9 	beq.w	80139b6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801380a:	d15a      	bne.n	80138c2 <f_lseek+0x104>
			tbl = fp->cltbl;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013810:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013814:	1d1a      	adds	r2, r3, #4
 8013816:	627a      	str	r2, [r7, #36]	@ 0x24
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	617b      	str	r3, [r7, #20]
 801381c:	2302      	movs	r3, #2
 801381e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	689b      	ldr	r3, [r3, #8]
 8013824:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8013826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013828:	2b00      	cmp	r3, #0
 801382a:	d03a      	beq.n	80138a2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801382e:	613b      	str	r3, [r7, #16]
 8013830:	2300      	movs	r3, #0
 8013832:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013836:	3302      	adds	r3, #2
 8013838:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801383c:	60fb      	str	r3, [r7, #12]
 801383e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013840:	3301      	adds	r3, #1
 8013842:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013848:	4618      	mov	r0, r3
 801384a:	f7fd fa36 	bl	8010cba <get_fat>
 801384e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013852:	2b01      	cmp	r3, #1
 8013854:	d804      	bhi.n	8013860 <f_lseek+0xa2>
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2202      	movs	r2, #2
 801385a:	755a      	strb	r2, [r3, #21]
 801385c:	2302      	movs	r3, #2
 801385e:	e1ce      	b.n	8013bfe <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013866:	d104      	bne.n	8013872 <f_lseek+0xb4>
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2201      	movs	r2, #1
 801386c:	755a      	strb	r2, [r3, #21]
 801386e:	2301      	movs	r3, #1
 8013870:	e1c5      	b.n	8013bfe <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	3301      	adds	r3, #1
 8013876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013878:	429a      	cmp	r2, r3
 801387a:	d0de      	beq.n	801383a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801387c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	429a      	cmp	r2, r3
 8013882:	d809      	bhi.n	8013898 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013886:	1d1a      	adds	r2, r3, #4
 8013888:	627a      	str	r2, [r7, #36]	@ 0x24
 801388a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801388c:	601a      	str	r2, [r3, #0]
 801388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013890:	1d1a      	adds	r2, r3, #4
 8013892:	627a      	str	r2, [r7, #36]	@ 0x24
 8013894:	693a      	ldr	r2, [r7, #16]
 8013896:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	6a1b      	ldr	r3, [r3, #32]
 801389c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801389e:	429a      	cmp	r2, r3
 80138a0:	d3c4      	bcc.n	801382c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138a8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80138aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138ac:	697b      	ldr	r3, [r7, #20]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	d803      	bhi.n	80138ba <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80138b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138b4:	2200      	movs	r2, #0
 80138b6:	601a      	str	r2, [r3, #0]
 80138b8:	e19f      	b.n	8013bfa <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80138ba:	2311      	movs	r3, #17
 80138bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80138c0:	e19b      	b.n	8013bfa <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	683a      	ldr	r2, [r7, #0]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d902      	bls.n	80138d2 <f_lseek+0x114>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	68db      	ldr	r3, [r3, #12]
 80138d0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	683a      	ldr	r2, [r7, #0]
 80138d6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	f000 818d 	beq.w	8013bfa <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	3b01      	subs	r3, #1
 80138e4:	4619      	mov	r1, r3
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7fd fcd1 	bl	801128e <clmt_clust>
 80138ec:	4602      	mov	r2, r0
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80138f2:	68ba      	ldr	r2, [r7, #8]
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	69db      	ldr	r3, [r3, #28]
 80138f8:	4619      	mov	r1, r3
 80138fa:	4610      	mov	r0, r2
 80138fc:	f7fd f9be 	bl	8010c7c <clust2sect>
 8013900:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013902:	69bb      	ldr	r3, [r7, #24]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d104      	bne.n	8013912 <f_lseek+0x154>
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2202      	movs	r2, #2
 801390c:	755a      	strb	r2, [r3, #21]
 801390e:	2302      	movs	r3, #2
 8013910:	e175      	b.n	8013bfe <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	3b01      	subs	r3, #1
 8013916:	68ba      	ldr	r2, [r7, #8]
 8013918:	8992      	ldrh	r2, [r2, #12]
 801391a:	fbb3 f3f2 	udiv	r3, r3, r2
 801391e:	68ba      	ldr	r2, [r7, #8]
 8013920:	8952      	ldrh	r2, [r2, #10]
 8013922:	3a01      	subs	r2, #1
 8013924:	4013      	ands	r3, r2
 8013926:	69ba      	ldr	r2, [r7, #24]
 8013928:	4413      	add	r3, r2
 801392a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	699b      	ldr	r3, [r3, #24]
 8013930:	68ba      	ldr	r2, [r7, #8]
 8013932:	8992      	ldrh	r2, [r2, #12]
 8013934:	fbb3 f1f2 	udiv	r1, r3, r2
 8013938:	fb01 f202 	mul.w	r2, r1, r2
 801393c:	1a9b      	subs	r3, r3, r2
 801393e:	2b00      	cmp	r3, #0
 8013940:	f000 815b 	beq.w	8013bfa <f_lseek+0x43c>
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6a1b      	ldr	r3, [r3, #32]
 8013948:	69ba      	ldr	r2, [r7, #24]
 801394a:	429a      	cmp	r2, r3
 801394c:	f000 8155 	beq.w	8013bfa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	7d1b      	ldrb	r3, [r3, #20]
 8013954:	b25b      	sxtb	r3, r3
 8013956:	2b00      	cmp	r3, #0
 8013958:	da18      	bge.n	801398c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801395a:	68bb      	ldr	r3, [r7, #8]
 801395c:	7858      	ldrb	r0, [r3, #1]
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6a1a      	ldr	r2, [r3, #32]
 8013968:	2301      	movs	r3, #1
 801396a:	f7fc fdfb 	bl	8010564 <disk_write>
 801396e:	4603      	mov	r3, r0
 8013970:	2b00      	cmp	r3, #0
 8013972:	d004      	beq.n	801397e <f_lseek+0x1c0>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2201      	movs	r2, #1
 8013978:	755a      	strb	r2, [r3, #21]
 801397a:	2301      	movs	r3, #1
 801397c:	e13f      	b.n	8013bfe <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	7d1b      	ldrb	r3, [r3, #20]
 8013982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013986:	b2da      	uxtb	r2, r3
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	7858      	ldrb	r0, [r3, #1]
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013996:	2301      	movs	r3, #1
 8013998:	69ba      	ldr	r2, [r7, #24]
 801399a:	f7fc fdc3 	bl	8010524 <disk_read>
 801399e:	4603      	mov	r3, r0
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d004      	beq.n	80139ae <f_lseek+0x1f0>
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2201      	movs	r2, #1
 80139a8:	755a      	strb	r2, [r3, #21]
 80139aa:	2301      	movs	r3, #1
 80139ac:	e127      	b.n	8013bfe <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	69ba      	ldr	r2, [r7, #24]
 80139b2:	621a      	str	r2, [r3, #32]
 80139b4:	e121      	b.n	8013bfa <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	68db      	ldr	r3, [r3, #12]
 80139ba:	683a      	ldr	r2, [r7, #0]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d908      	bls.n	80139d2 <f_lseek+0x214>
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	7d1b      	ldrb	r3, [r3, #20]
 80139c4:	f003 0302 	and.w	r3, r3, #2
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d102      	bne.n	80139d2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	68db      	ldr	r3, [r3, #12]
 80139d0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	699b      	ldr	r3, [r3, #24]
 80139d6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80139d8:	2300      	movs	r3, #0
 80139da:	637b      	str	r3, [r7, #52]	@ 0x34
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80139e0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	f000 80b5 	beq.w	8013b54 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	895b      	ldrh	r3, [r3, #10]
 80139ee:	461a      	mov	r2, r3
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	899b      	ldrh	r3, [r3, #12]
 80139f4:	fb02 f303 	mul.w	r3, r2, r3
 80139f8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80139fa:	6a3b      	ldr	r3, [r7, #32]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d01b      	beq.n	8013a38 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	1e5a      	subs	r2, r3, #1
 8013a04:	69fb      	ldr	r3, [r7, #28]
 8013a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8013a0a:	6a3b      	ldr	r3, [r7, #32]
 8013a0c:	1e59      	subs	r1, r3, #1
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013a14:	429a      	cmp	r2, r3
 8013a16:	d30f      	bcc.n	8013a38 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013a18:	6a3b      	ldr	r3, [r7, #32]
 8013a1a:	1e5a      	subs	r2, r3, #1
 8013a1c:	69fb      	ldr	r3, [r7, #28]
 8013a1e:	425b      	negs	r3, r3
 8013a20:	401a      	ands	r2, r3
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	699b      	ldr	r3, [r3, #24]
 8013a2a:	683a      	ldr	r2, [r7, #0]
 8013a2c:	1ad3      	subs	r3, r2, r3
 8013a2e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	69db      	ldr	r3, [r3, #28]
 8013a34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013a36:	e022      	b.n	8013a7e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	689b      	ldr	r3, [r3, #8]
 8013a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d119      	bne.n	8013a78 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2100      	movs	r1, #0
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f7fd fb88 	bl	801115e <create_chain>
 8013a4e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d104      	bne.n	8013a60 <f_lseek+0x2a2>
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	2202      	movs	r2, #2
 8013a5a:	755a      	strb	r2, [r3, #21]
 8013a5c:	2302      	movs	r3, #2
 8013a5e:	e0ce      	b.n	8013bfe <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a66:	d104      	bne.n	8013a72 <f_lseek+0x2b4>
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	2201      	movs	r2, #1
 8013a6c:	755a      	strb	r2, [r3, #21]
 8013a6e:	2301      	movs	r3, #1
 8013a70:	e0c5      	b.n	8013bfe <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a76:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a7c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d067      	beq.n	8013b54 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013a84:	e03a      	b.n	8013afc <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013a86:	683a      	ldr	r2, [r7, #0]
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	1ad3      	subs	r3, r2, r3
 8013a8c:	603b      	str	r3, [r7, #0]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	699a      	ldr	r2, [r3, #24]
 8013a92:	69fb      	ldr	r3, [r7, #28]
 8013a94:	441a      	add	r2, r3
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	7d1b      	ldrb	r3, [r3, #20]
 8013a9e:	f003 0302 	and.w	r3, r3, #2
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d00b      	beq.n	8013abe <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7fd fb57 	bl	801115e <create_chain>
 8013ab0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d108      	bne.n	8013aca <f_lseek+0x30c>
							ofs = 0; break;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	603b      	str	r3, [r7, #0]
 8013abc:	e022      	b.n	8013b04 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7fd f8f9 	bl	8010cba <get_fat>
 8013ac8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ad0:	d104      	bne.n	8013adc <f_lseek+0x31e>
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	755a      	strb	r2, [r3, #21]
 8013ad8:	2301      	movs	r3, #1
 8013ada:	e090      	b.n	8013bfe <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	d904      	bls.n	8013aec <f_lseek+0x32e>
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	6a1b      	ldr	r3, [r3, #32]
 8013ae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d304      	bcc.n	8013af6 <f_lseek+0x338>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2202      	movs	r2, #2
 8013af0:	755a      	strb	r2, [r3, #21]
 8013af2:	2302      	movs	r3, #2
 8013af4:	e083      	b.n	8013bfe <f_lseek+0x440>
					fp->clust = clst;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013afa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013afc:	683a      	ldr	r2, [r7, #0]
 8013afe:	69fb      	ldr	r3, [r7, #28]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d8c0      	bhi.n	8013a86 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	699a      	ldr	r2, [r3, #24]
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	441a      	add	r2, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	899b      	ldrh	r3, [r3, #12]
 8013b14:	461a      	mov	r2, r3
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b1c:	fb01 f202 	mul.w	r2, r1, r2
 8013b20:	1a9b      	subs	r3, r3, r2
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d016      	beq.n	8013b54 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7fd f8a6 	bl	8010c7c <clust2sect>
 8013b30:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d104      	bne.n	8013b42 <f_lseek+0x384>
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2202      	movs	r2, #2
 8013b3c:	755a      	strb	r2, [r3, #21]
 8013b3e:	2302      	movs	r3, #2
 8013b40:	e05d      	b.n	8013bfe <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	899b      	ldrh	r3, [r3, #12]
 8013b46:	461a      	mov	r2, r3
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013b50:	4413      	add	r3, r2
 8013b52:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	699a      	ldr	r2, [r3, #24]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	68db      	ldr	r3, [r3, #12]
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d90a      	bls.n	8013b76 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	699a      	ldr	r2, [r3, #24]
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	7d1b      	ldrb	r3, [r3, #20]
 8013b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b70:	b2da      	uxtb	r2, r3
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	699b      	ldr	r3, [r3, #24]
 8013b7a:	68ba      	ldr	r2, [r7, #8]
 8013b7c:	8992      	ldrh	r2, [r2, #12]
 8013b7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b82:	fb01 f202 	mul.w	r2, r1, r2
 8013b86:	1a9b      	subs	r3, r3, r2
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d036      	beq.n	8013bfa <f_lseek+0x43c>
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6a1b      	ldr	r3, [r3, #32]
 8013b90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d031      	beq.n	8013bfa <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	7d1b      	ldrb	r3, [r3, #20]
 8013b9a:	b25b      	sxtb	r3, r3
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	da18      	bge.n	8013bd2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	7858      	ldrb	r0, [r3, #1]
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	6a1a      	ldr	r2, [r3, #32]
 8013bae:	2301      	movs	r3, #1
 8013bb0:	f7fc fcd8 	bl	8010564 <disk_write>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d004      	beq.n	8013bc4 <f_lseek+0x406>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	2201      	movs	r2, #1
 8013bbe:	755a      	strb	r2, [r3, #21]
 8013bc0:	2301      	movs	r3, #1
 8013bc2:	e01c      	b.n	8013bfe <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	7d1b      	ldrb	r3, [r3, #20]
 8013bc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013bcc:	b2da      	uxtb	r2, r3
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	7858      	ldrb	r0, [r3, #1]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013bdc:	2301      	movs	r3, #1
 8013bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013be0:	f7fc fca0 	bl	8010524 <disk_read>
 8013be4:	4603      	mov	r3, r0
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d004      	beq.n	8013bf4 <f_lseek+0x436>
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	2201      	movs	r2, #1
 8013bee:	755a      	strb	r2, [r3, #21]
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	e004      	b.n	8013bfe <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013bf8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013bfa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3740      	adds	r7, #64	@ 0x40
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}

08013c06 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013c06:	b580      	push	{r7, lr}
 8013c08:	b0a0      	sub	sp, #128	@ 0x80
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013c12:	f107 010c 	add.w	r1, r7, #12
 8013c16:	1d3b      	adds	r3, r7, #4
 8013c18:	2202      	movs	r2, #2
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f7fe fd1e 	bl	801265c <find_volume>
 8013c20:	4603      	mov	r3, r0
 8013c22:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 8013c2a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	f040 80a4 	bne.w	8013d7c <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013c34:	687a      	ldr	r2, [r7, #4]
 8013c36:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013c3a:	4611      	mov	r1, r2
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f7fe fbdd 	bl	80123fc <follow_path>
 8013c42:	4603      	mov	r3, r0
 8013c44:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013c48:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d108      	bne.n	8013c62 <f_unlink+0x5c>
 8013c50:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8013c54:	f003 0320 	and.w	r3, r3, #32
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d002      	beq.n	8013c62 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013c5c:	2306      	movs	r3, #6
 8013c5e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013c62:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d108      	bne.n	8013c7c <f_unlink+0x76>
 8013c6a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013c6e:	2102      	movs	r1, #2
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fc fdb5 	bl	80107e0 <chk_lock>
 8013c76:	4603      	mov	r3, r0
 8013c78:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013c7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d17b      	bne.n	8013d7c <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013c84:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8013c88:	b25b      	sxtb	r3, r3
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	da03      	bge.n	8013c96 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013c8e:	2306      	movs	r3, #6
 8013c90:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8013c94:	e008      	b.n	8013ca8 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013c96:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8013c9a:	f003 0301 	and.w	r3, r3, #1
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d002      	beq.n	8013ca8 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013ca2:	2307      	movs	r3, #7
 8013ca4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 8013ca8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d13d      	bne.n	8013d2c <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013cb4:	4611      	mov	r1, r2
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7fd fcc7 	bl	801164a <ld_clust>
 8013cbc:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013cbe:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8013cc2:	f003 0310 	and.w	r3, r3, #16
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d030      	beq.n	8013d2c <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	69db      	ldr	r3, [r3, #28]
 8013cce:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	d103      	bne.n	8013cdc <f_unlink+0xd6>
						res = FR_DENIED;
 8013cd4:	2307      	movs	r3, #7
 8013cd6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8013cda:	e027      	b.n	8013d2c <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013ce0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013ce2:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013ce4:	f107 0310 	add.w	r3, r7, #16
 8013ce8:	2100      	movs	r1, #0
 8013cea:	4618      	mov	r0, r3
 8013cec:	f7fd fb07 	bl	80112fe <dir_sdi>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 8013cf6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d116      	bne.n	8013d2c <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013cfe:	f107 0310 	add.w	r3, r7, #16
 8013d02:	2100      	movs	r1, #0
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7fd feca 	bl	8011a9e <dir_read>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013d10:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d102      	bne.n	8013d1e <f_unlink+0x118>
 8013d18:	2307      	movs	r3, #7
 8013d1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013d1e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013d22:	2b04      	cmp	r3, #4
 8013d24:	d102      	bne.n	8013d2c <f_unlink+0x126>
 8013d26:	2300      	movs	r3, #0
 8013d28:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8013d2c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d123      	bne.n	8013d7c <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013d34:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7fe f90f 	bl	8011f5c <dir_remove>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013d44:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d10c      	bne.n	8013d66 <f_unlink+0x160>
 8013d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d009      	beq.n	8013d66 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013d52:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013d56:	2200      	movs	r2, #0
 8013d58:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7fd f99a 	bl	8011094 <remove_chain>
 8013d60:	4603      	mov	r3, r0
 8013d62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013d66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d106      	bne.n	8013d7c <f_unlink+0x176>
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7fc ff13 	bl	8010b9c <sync_fs>
 8013d76:	4603      	mov	r3, r0
 8013d78:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013d7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8013d80:	4618      	mov	r0, r3
 8013d82:	3780      	adds	r7, #128	@ 0x80
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}

08013d88 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b098      	sub	sp, #96	@ 0x60
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013d90:	f107 010c 	add.w	r1, r7, #12
 8013d94:	1d3b      	adds	r3, r7, #4
 8013d96:	2202      	movs	r2, #2
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7fe fc5f 	bl	801265c <find_volume>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8013da8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	f040 80ff 	bne.w	8013fb0 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013db2:	687a      	ldr	r2, [r7, #4]
 8013db4:	f107 0310 	add.w	r3, r7, #16
 8013db8:	4611      	mov	r1, r2
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f7fe fb1e 	bl	80123fc <follow_path>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d102      	bne.n	8013dd4 <f_mkdir+0x4c>
 8013dce:	2308      	movs	r3, #8
 8013dd0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013dd4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013dd8:	2b04      	cmp	r3, #4
 8013dda:	d108      	bne.n	8013dee <f_mkdir+0x66>
 8013ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013de0:	f003 0320 	and.w	r3, r3, #32
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d002      	beq.n	8013dee <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013de8:	2306      	movs	r3, #6
 8013dea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013dee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013df2:	2b04      	cmp	r3, #4
 8013df4:	f040 80dc 	bne.w	8013fb0 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013df8:	f107 0310 	add.w	r3, r7, #16
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7fd f9ad 	bl	801115e <create_chain>
 8013e04:	64f8      	str	r0, [r7, #76]	@ 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	895b      	ldrh	r3, [r3, #10]
 8013e0a:	461a      	mov	r2, r3
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	899b      	ldrh	r3, [r3, #12]
 8013e10:	fb02 f303 	mul.w	r3, r2, r3
 8013e14:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8013e16:	2300      	movs	r3, #0
 8013e18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d102      	bne.n	8013e28 <f_mkdir+0xa0>
 8013e22:	2307      	movs	r3, #7
 8013e24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8013e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e2a:	2b01      	cmp	r3, #1
 8013e2c:	d102      	bne.n	8013e34 <f_mkdir+0xac>
 8013e2e:	2302      	movs	r3, #2
 8013e30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e3a:	d102      	bne.n	8013e42 <f_mkdir+0xba>
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013e42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d106      	bne.n	8013e58 <f_mkdir+0xd0>
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7fc fe33 	bl	8010ab8 <sync_window>
 8013e52:	4603      	mov	r3, r0
 8013e54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 8013e58:	f7fb fe00 	bl	800fa5c <get_fattime>
 8013e5c:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d16c      	bne.n	8013f40 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7fc ff06 	bl	8010c7c <clust2sect>
 8013e70:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	333c      	adds	r3, #60	@ 0x3c
 8013e76:	647b      	str	r3, [r7, #68]	@ 0x44
				mem_set(dir, 0, SS(fs));
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	899b      	ldrh	r3, [r3, #12]
 8013e7c:	461a      	mov	r2, r3
 8013e7e:	2100      	movs	r1, #0
 8013e80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013e82:	f7fc fc50 	bl	8010726 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013e86:	220b      	movs	r2, #11
 8013e88:	2120      	movs	r1, #32
 8013e8a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013e8c:	f7fc fc4b 	bl	8010726 <mem_set>
					dir[DIR_Name] = '.';
 8013e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e92:	222e      	movs	r2, #46	@ 0x2e
 8013e94:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e98:	330b      	adds	r3, #11
 8013e9a:	2210      	movs	r2, #16
 8013e9c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ea0:	3316      	adds	r3, #22
 8013ea2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7fc fbf1 	bl	801068c <st_dword>
					st_clust(fs, dir, dcl);
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013eae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7fd fbe9 	bl	8011688 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013eb8:	3320      	adds	r3, #32
 8013eba:	2220      	movs	r2, #32
 8013ebc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fc fc10 	bl	80106e4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ec6:	3321      	adds	r3, #33	@ 0x21
 8013ec8:	222e      	movs	r2, #46	@ 0x2e
 8013eca:	701a      	strb	r2, [r3, #0]
 8013ecc:	69bb      	ldr	r3, [r7, #24]
 8013ece:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	2b03      	cmp	r3, #3
 8013ed6:	d106      	bne.n	8013ee6 <f_mkdir+0x15e>
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013edc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d101      	bne.n	8013ee6 <f_mkdir+0x15e>
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8013ee6:	68f8      	ldr	r0, [r7, #12]
 8013ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013eea:	3320      	adds	r3, #32
 8013eec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013eee:	4619      	mov	r1, r3
 8013ef0:	f7fd fbca 	bl	8011688 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	895b      	ldrh	r3, [r3, #10]
 8013ef8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013efa:	e01c      	b.n	8013f36 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8013efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013efe:	1c5a      	adds	r2, r3, #1
 8013f00:	657a      	str	r2, [r7, #84]	@ 0x54
 8013f02:	68fa      	ldr	r2, [r7, #12]
 8013f04:	6393      	str	r3, [r2, #56]	@ 0x38
					fs->wflag = 1;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	2201      	movs	r2, #1
 8013f0a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f7fc fdd2 	bl	8010ab8 <sync_window>
 8013f14:	4603      	mov	r3, r0
 8013f16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 8013f1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d10d      	bne.n	8013f3e <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	899b      	ldrh	r3, [r3, #12]
 8013f26:	461a      	mov	r2, r3
 8013f28:	2100      	movs	r1, #0
 8013f2a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013f2c:	f7fc fbfb 	bl	8010726 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f32:	3b01      	subs	r3, #1
 8013f34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013f36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d1df      	bne.n	8013efc <f_mkdir+0x174>
 8013f3c:	e000      	b.n	8013f40 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8013f3e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013f40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d107      	bne.n	8013f58 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013f48:	f107 0310 	add.w	r3, r7, #16
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f7fd ff0d 	bl	8011d6c <dir_register>
 8013f52:	4603      	mov	r3, r0
 8013f54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 8013f58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d120      	bne.n	8013fa2 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f62:	647b      	str	r3, [r7, #68]	@ 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f66:	3316      	adds	r3, #22
 8013f68:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fc fb8e 	bl	801068c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013f74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7fd fb86 	bl	8011688 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f7e:	330b      	adds	r3, #11
 8013f80:	2210      	movs	r2, #16
 8013f82:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	2201      	movs	r2, #1
 8013f88:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d10e      	bne.n	8013fb0 <f_mkdir+0x228>
					res = sync_fs(fs);
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	4618      	mov	r0, r3
 8013f96:	f7fc fe01 	bl	8010b9c <sync_fs>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013fa0:	e006      	b.n	8013fb0 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013fa2:	f107 0310 	add.w	r3, r7, #16
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7fd f872 	bl	8011094 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3760      	adds	r7, #96	@ 0x60
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}

08013fbc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b084      	sub	sp, #16
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8013fc8:	78fb      	ldrb	r3, [r7, #3]
 8013fca:	2b0a      	cmp	r3, #10
 8013fcc:	d103      	bne.n	8013fd6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8013fce:	210d      	movs	r1, #13
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f7ff fff3 	bl	8013fbc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	685b      	ldr	r3, [r3, #4]
 8013fda:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	db25      	blt.n	801402e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	1c5a      	adds	r2, r3, #1
 8013fe6:	60fa      	str	r2, [r7, #12]
 8013fe8:	687a      	ldr	r2, [r7, #4]
 8013fea:	4413      	add	r3, r2
 8013fec:	78fa      	ldrb	r2, [r7, #3]
 8013fee:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	2b3c      	cmp	r3, #60	@ 0x3c
 8013ff4:	dd12      	ble.n	801401c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6818      	ldr	r0, [r3, #0]
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	f103 010c 	add.w	r1, r3, #12
 8014000:	68fa      	ldr	r2, [r7, #12]
 8014002:	f107 0308 	add.w	r3, r7, #8
 8014006:	f7ff f954 	bl	80132b2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801400a:	68ba      	ldr	r2, [r7, #8]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	429a      	cmp	r2, r3
 8014010:	d101      	bne.n	8014016 <putc_bfd+0x5a>
 8014012:	2300      	movs	r3, #0
 8014014:	e001      	b.n	801401a <putc_bfd+0x5e>
 8014016:	f04f 33ff 	mov.w	r3, #4294967295
 801401a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	68fa      	ldr	r2, [r7, #12]
 8014020:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	689b      	ldr	r3, [r3, #8]
 8014026:	1c5a      	adds	r2, r3, #1
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	609a      	str	r2, [r3, #8]
 801402c:	e000      	b.n	8014030 <putc_bfd+0x74>
	if (i < 0) return;
 801402e:	bf00      	nop
}
 8014030:	3710      	adds	r7, #16
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}

08014036 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8014036:	b580      	push	{r7, lr}
 8014038:	b084      	sub	sp, #16
 801403a:	af00      	add	r7, sp, #0
 801403c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	685b      	ldr	r3, [r3, #4]
 8014042:	2b00      	cmp	r3, #0
 8014044:	db16      	blt.n	8014074 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6818      	ldr	r0, [r3, #0]
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f103 010c 	add.w	r1, r3, #12
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	685b      	ldr	r3, [r3, #4]
 8014054:	461a      	mov	r2, r3
 8014056:	f107 030c 	add.w	r3, r7, #12
 801405a:	f7ff f92a 	bl	80132b2 <f_write>
 801405e:	4603      	mov	r3, r0
 8014060:	2b00      	cmp	r3, #0
 8014062:	d107      	bne.n	8014074 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	685b      	ldr	r3, [r3, #4]
 8014068:	68fa      	ldr	r2, [r7, #12]
 801406a:	4293      	cmp	r3, r2
 801406c:	d102      	bne.n	8014074 <putc_flush+0x3e>
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	689b      	ldr	r3, [r3, #8]
 8014072:	e001      	b.n	8014078 <putc_flush+0x42>
	return EOF;
 8014074:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014078:	4618      	mov	r0, r3
 801407a:	3710      	adds	r7, #16
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8014080:	b480      	push	{r7}
 8014082:	b083      	sub	sp, #12
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
 8014088:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	683a      	ldr	r2, [r7, #0]
 801408e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2200      	movs	r2, #0
 8014094:	605a      	str	r2, [r3, #4]
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	685a      	ldr	r2, [r3, #4]
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	609a      	str	r2, [r3, #8]
}
 801409e:	bf00      	nop
 80140a0:	370c      	adds	r7, #12
 80140a2:	46bd      	mov	sp, r7
 80140a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a8:	4770      	bx	lr
	...

080140ac <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80140ac:	b40e      	push	{r1, r2, r3}
 80140ae:	b580      	push	{r7, lr}
 80140b0:	b0a7      	sub	sp, #156	@ 0x9c
 80140b2:	af00      	add	r7, sp, #0
 80140b4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80140b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80140ba:	6879      	ldr	r1, [r7, #4]
 80140bc:	4618      	mov	r0, r3
 80140be:	f7ff ffdf 	bl	8014080 <putc_init>

	va_start(arp, fmt);
 80140c2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80140c6:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 80140c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80140cc:	1c5a      	adds	r2, r3, #1
 80140ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 80140d8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f000 81f2 	beq.w	80144c6 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 80140e2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80140e6:	2b25      	cmp	r3, #37	@ 0x25
 80140e8:	d008      	beq.n	80140fc <f_printf+0x50>
			putc_bfd(&pb, c);
 80140ea:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80140ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80140f2:	4611      	mov	r1, r2
 80140f4:	4618      	mov	r0, r3
 80140f6:	f7ff ff61 	bl	8013fbc <putc_bfd>
			continue;
 80140fa:	e1e3      	b.n	80144c4 <f_printf+0x418>
		}
		w = f = 0;
 80140fc:	2300      	movs	r3, #0
 80140fe:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014102:	2300      	movs	r3, #0
 8014104:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 8014108:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801410c:	1c5a      	adds	r2, r3, #1
 801410e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8014118:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801411c:	2b30      	cmp	r3, #48	@ 0x30
 801411e:	d10b      	bne.n	8014138 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8014120:	2301      	movs	r3, #1
 8014122:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801412a:	1c5a      	adds	r2, r3, #1
 801412c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8014130:	781b      	ldrb	r3, [r3, #0]
 8014132:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8014136:	e024      	b.n	8014182 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8014138:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801413c:	2b2d      	cmp	r3, #45	@ 0x2d
 801413e:	d120      	bne.n	8014182 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8014140:	2302      	movs	r3, #2
 8014142:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8014146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801414a:	1c5a      	adds	r2, r3, #1
 801414c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8014156:	e014      	b.n	8014182 <f_printf+0xd6>
			w = w * 10 + c - '0';
 8014158:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801415c:	4613      	mov	r3, r2
 801415e:	009b      	lsls	r3, r3, #2
 8014160:	4413      	add	r3, r2
 8014162:	005b      	lsls	r3, r3, #1
 8014164:	461a      	mov	r2, r3
 8014166:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801416a:	4413      	add	r3, r2
 801416c:	3b30      	subs	r3, #48	@ 0x30
 801416e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8014172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014176:	1c5a      	adds	r2, r3, #1
 8014178:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8014182:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8014186:	2b2f      	cmp	r3, #47	@ 0x2f
 8014188:	d903      	bls.n	8014192 <f_printf+0xe6>
 801418a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801418e:	2b39      	cmp	r3, #57	@ 0x39
 8014190:	d9e2      	bls.n	8014158 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8014192:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8014196:	2b6c      	cmp	r3, #108	@ 0x6c
 8014198:	d003      	beq.n	80141a2 <f_printf+0xf6>
 801419a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801419e:	2b4c      	cmp	r3, #76	@ 0x4c
 80141a0:	d10d      	bne.n	80141be <f_printf+0x112>
			f |= 4; c = *fmt++;
 80141a2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80141a6:	f043 0304 	orr.w	r3, r3, #4
 80141aa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80141ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80141b2:	1c5a      	adds	r2, r3, #1
 80141b4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 80141be:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	f000 8181 	beq.w	80144ca <f_printf+0x41e>
		d = c;
 80141c8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80141cc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 80141d0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80141d4:	2b60      	cmp	r3, #96	@ 0x60
 80141d6:	d908      	bls.n	80141ea <f_printf+0x13e>
 80141d8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80141dc:	2b7a      	cmp	r3, #122	@ 0x7a
 80141de:	d804      	bhi.n	80141ea <f_printf+0x13e>
 80141e0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80141e4:	3b20      	subs	r3, #32
 80141e6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 80141ea:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80141ee:	3b42      	subs	r3, #66	@ 0x42
 80141f0:	2b16      	cmp	r3, #22
 80141f2:	f200 8098 	bhi.w	8014326 <f_printf+0x27a>
 80141f6:	a201      	add	r2, pc, #4	@ (adr r2, 80141fc <f_printf+0x150>)
 80141f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141fc:	08014307 	.word	0x08014307
 8014200:	080142ef 	.word	0x080142ef
 8014204:	08014317 	.word	0x08014317
 8014208:	08014327 	.word	0x08014327
 801420c:	08014327 	.word	0x08014327
 8014210:	08014327 	.word	0x08014327
 8014214:	08014327 	.word	0x08014327
 8014218:	08014327 	.word	0x08014327
 801421c:	08014327 	.word	0x08014327
 8014220:	08014327 	.word	0x08014327
 8014224:	08014327 	.word	0x08014327
 8014228:	08014327 	.word	0x08014327
 801422c:	08014327 	.word	0x08014327
 8014230:	0801430f 	.word	0x0801430f
 8014234:	08014327 	.word	0x08014327
 8014238:	08014327 	.word	0x08014327
 801423c:	08014327 	.word	0x08014327
 8014240:	08014259 	.word	0x08014259
 8014244:	08014327 	.word	0x08014327
 8014248:	08014317 	.word	0x08014317
 801424c:	08014327 	.word	0x08014327
 8014250:	08014327 	.word	0x08014327
 8014254:	0801431f 	.word	0x0801431f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8014258:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801425a:	1d1a      	adds	r2, r3, #4
 801425c:	67ba      	str	r2, [r7, #120]	@ 0x78
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8014262:	2300      	movs	r3, #0
 8014264:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014268:	e004      	b.n	8014274 <f_printf+0x1c8>
 801426a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801426e:	3301      	adds	r3, #1
 8014270:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014274:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801427a:	4413      	add	r3, r2
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d1f3      	bne.n	801426a <f_printf+0x1be>
			if (!(f & 2)) {
 8014282:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014286:	f003 0302 	and.w	r3, r3, #2
 801428a:	2b00      	cmp	r3, #0
 801428c:	d11a      	bne.n	80142c4 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 801428e:	e005      	b.n	801429c <f_printf+0x1f0>
 8014290:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014294:	2120      	movs	r1, #32
 8014296:	4618      	mov	r0, r3
 8014298:	f7ff fe90 	bl	8013fbc <putc_bfd>
 801429c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80142a0:	1c5a      	adds	r2, r3, #1
 80142a2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80142a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80142aa:	429a      	cmp	r2, r3
 80142ac:	d8f0      	bhi.n	8014290 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80142ae:	e009      	b.n	80142c4 <f_printf+0x218>
 80142b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80142b2:	1c5a      	adds	r2, r3, #1
 80142b4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80142b6:	781a      	ldrb	r2, [r3, #0]
 80142b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80142bc:	4611      	mov	r1, r2
 80142be:	4618      	mov	r0, r3
 80142c0:	f7ff fe7c 	bl	8013fbc <putc_bfd>
 80142c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d1f1      	bne.n	80142b0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 80142cc:	e005      	b.n	80142da <f_printf+0x22e>
 80142ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80142d2:	2120      	movs	r1, #32
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7ff fe71 	bl	8013fbc <putc_bfd>
 80142da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80142de:	1c5a      	adds	r2, r3, #1
 80142e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80142e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d8f0      	bhi.n	80142ce <f_printf+0x222>
			continue;
 80142ec:	e0ea      	b.n	80144c4 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80142ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80142f0:	1d1a      	adds	r2, r3, #4
 80142f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	b2da      	uxtb	r2, r3
 80142f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80142fc:	4611      	mov	r1, r2
 80142fe:	4618      	mov	r0, r3
 8014300:	f7ff fe5c 	bl	8013fbc <putc_bfd>
 8014304:	e0de      	b.n	80144c4 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8014306:	2302      	movs	r3, #2
 8014308:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 801430c:	e014      	b.n	8014338 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801430e:	2308      	movs	r3, #8
 8014310:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8014314:	e010      	b.n	8014338 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8014316:	230a      	movs	r3, #10
 8014318:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 801431c:	e00c      	b.n	8014338 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801431e:	2310      	movs	r3, #16
 8014320:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8014324:	e008      	b.n	8014338 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8014326:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 801432a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801432e:	4611      	mov	r1, r2
 8014330:	4618      	mov	r0, r3
 8014332:	f7ff fe43 	bl	8013fbc <putc_bfd>
 8014336:	e0c5      	b.n	80144c4 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8014338:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801433c:	f003 0304 	and.w	r3, r3, #4
 8014340:	2b00      	cmp	r3, #0
 8014342:	d004      	beq.n	801434e <f_printf+0x2a2>
 8014344:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014346:	1d1a      	adds	r2, r3, #4
 8014348:	67ba      	str	r2, [r7, #120]	@ 0x78
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	e00c      	b.n	8014368 <f_printf+0x2bc>
 801434e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8014352:	2b44      	cmp	r3, #68	@ 0x44
 8014354:	d104      	bne.n	8014360 <f_printf+0x2b4>
 8014356:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014358:	1d1a      	adds	r2, r3, #4
 801435a:	67ba      	str	r2, [r7, #120]	@ 0x78
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	e003      	b.n	8014368 <f_printf+0x2bc>
 8014360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014362:	1d1a      	adds	r2, r3, #4
 8014364:	67ba      	str	r2, [r7, #120]	@ 0x78
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 801436c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8014370:	2b44      	cmp	r3, #68	@ 0x44
 8014372:	d10e      	bne.n	8014392 <f_printf+0x2e6>
 8014374:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014378:	2b00      	cmp	r3, #0
 801437a:	da0a      	bge.n	8014392 <f_printf+0x2e6>
			v = 0 - v;
 801437c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014380:	425b      	negs	r3, r3
 8014382:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8014386:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801438a:	f043 0308 	orr.w	r3, r3, #8
 801438e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8014392:	2300      	movs	r3, #0
 8014394:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8014398:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 801439c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80143a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80143a4:	fb01 f202 	mul.w	r2, r1, r2
 80143a8:	1a9b      	subs	r3, r3, r2
 80143aa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 80143ae:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80143b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80143b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80143ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80143be:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80143c2:	2b09      	cmp	r3, #9
 80143c4:	d90b      	bls.n	80143de <f_printf+0x332>
 80143c6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80143ca:	2b78      	cmp	r3, #120	@ 0x78
 80143cc:	d101      	bne.n	80143d2 <f_printf+0x326>
 80143ce:	2227      	movs	r2, #39	@ 0x27
 80143d0:	e000      	b.n	80143d4 <f_printf+0x328>
 80143d2:	2207      	movs	r2, #7
 80143d4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80143d8:	4413      	add	r3, r2
 80143da:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 80143de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143e2:	1c5a      	adds	r2, r3, #1
 80143e4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80143e8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80143ec:	3230      	adds	r2, #48	@ 0x30
 80143ee:	b2d2      	uxtb	r2, r2
 80143f0:	3398      	adds	r3, #152	@ 0x98
 80143f2:	443b      	add	r3, r7
 80143f4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80143f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d003      	beq.n	8014408 <f_printf+0x35c>
 8014400:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014404:	2b1f      	cmp	r3, #31
 8014406:	d9c7      	bls.n	8014398 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8014408:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801440c:	f003 0308 	and.w	r3, r3, #8
 8014410:	2b00      	cmp	r3, #0
 8014412:	d009      	beq.n	8014428 <f_printf+0x37c>
 8014414:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014418:	1c5a      	adds	r2, r3, #1
 801441a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801441e:	3398      	adds	r3, #152	@ 0x98
 8014420:	443b      	add	r3, r7
 8014422:	222d      	movs	r2, #45	@ 0x2d
 8014424:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8014428:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801442c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014430:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014434:	f003 0301 	and.w	r3, r3, #1
 8014438:	2b00      	cmp	r3, #0
 801443a:	d001      	beq.n	8014440 <f_printf+0x394>
 801443c:	2330      	movs	r3, #48	@ 0x30
 801443e:	e000      	b.n	8014442 <f_printf+0x396>
 8014440:	2320      	movs	r3, #32
 8014442:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8014446:	e007      	b.n	8014458 <f_printf+0x3ac>
 8014448:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 801444c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014450:	4611      	mov	r1, r2
 8014452:	4618      	mov	r0, r3
 8014454:	f7ff fdb2 	bl	8013fbc <putc_bfd>
 8014458:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801445c:	f003 0302 	and.w	r3, r3, #2
 8014460:	2b00      	cmp	r3, #0
 8014462:	d108      	bne.n	8014476 <f_printf+0x3ca>
 8014464:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014468:	1c5a      	adds	r2, r3, #1
 801446a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801446e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8014472:	429a      	cmp	r2, r3
 8014474:	d8e8      	bhi.n	8014448 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8014476:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801447a:	3b01      	subs	r3, #1
 801447c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014480:	f107 020c 	add.w	r2, r7, #12
 8014484:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014488:	4413      	add	r3, r2
 801448a:	781a      	ldrb	r2, [r3, #0]
 801448c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014490:	4611      	mov	r1, r2
 8014492:	4618      	mov	r0, r3
 8014494:	f7ff fd92 	bl	8013fbc <putc_bfd>
		} while (i);
 8014498:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801449c:	2b00      	cmp	r3, #0
 801449e:	d1ea      	bne.n	8014476 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80144a0:	e007      	b.n	80144b2 <f_printf+0x406>
 80144a2:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80144a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80144aa:	4611      	mov	r1, r2
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7ff fd85 	bl	8013fbc <putc_bfd>
 80144b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80144b6:	1c5a      	adds	r2, r3, #1
 80144b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80144bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80144c0:	429a      	cmp	r2, r3
 80144c2:	d8ee      	bhi.n	80144a2 <f_printf+0x3f6>
		c = *fmt++;
 80144c4:	e600      	b.n	80140c8 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80144c6:	bf00      	nop
 80144c8:	e000      	b.n	80144cc <f_printf+0x420>
		if (!c) break;
 80144ca:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80144cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7ff fdb0 	bl	8014036 <putc_flush>
 80144d6:	4603      	mov	r3, r0
}
 80144d8:	4618      	mov	r0, r3
 80144da:	379c      	adds	r7, #156	@ 0x9c
 80144dc:	46bd      	mov	sp, r7
 80144de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80144e2:	b003      	add	sp, #12
 80144e4:	4770      	bx	lr
 80144e6:	bf00      	nop

080144e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80144e8:	b480      	push	{r7}
 80144ea:	b087      	sub	sp, #28
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	60f8      	str	r0, [r7, #12]
 80144f0:	60b9      	str	r1, [r7, #8]
 80144f2:	4613      	mov	r3, r2
 80144f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80144f6:	2301      	movs	r3, #1
 80144f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80144fa:	2300      	movs	r3, #0
 80144fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80144fe:	4b1f      	ldr	r3, [pc, #124]	@ (801457c <FATFS_LinkDriverEx+0x94>)
 8014500:	7a5b      	ldrb	r3, [r3, #9]
 8014502:	b2db      	uxtb	r3, r3
 8014504:	2b00      	cmp	r3, #0
 8014506:	d131      	bne.n	801456c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014508:	4b1c      	ldr	r3, [pc, #112]	@ (801457c <FATFS_LinkDriverEx+0x94>)
 801450a:	7a5b      	ldrb	r3, [r3, #9]
 801450c:	b2db      	uxtb	r3, r3
 801450e:	461a      	mov	r2, r3
 8014510:	4b1a      	ldr	r3, [pc, #104]	@ (801457c <FATFS_LinkDriverEx+0x94>)
 8014512:	2100      	movs	r1, #0
 8014514:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014516:	4b19      	ldr	r3, [pc, #100]	@ (801457c <FATFS_LinkDriverEx+0x94>)
 8014518:	7a5b      	ldrb	r3, [r3, #9]
 801451a:	b2db      	uxtb	r3, r3
 801451c:	4a17      	ldr	r2, [pc, #92]	@ (801457c <FATFS_LinkDriverEx+0x94>)
 801451e:	009b      	lsls	r3, r3, #2
 8014520:	4413      	add	r3, r2
 8014522:	68fa      	ldr	r2, [r7, #12]
 8014524:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014526:	4b15      	ldr	r3, [pc, #84]	@ (801457c <FATFS_LinkDriverEx+0x94>)
 8014528:	7a5b      	ldrb	r3, [r3, #9]
 801452a:	b2db      	uxtb	r3, r3
 801452c:	461a      	mov	r2, r3
 801452e:	4b13      	ldr	r3, [pc, #76]	@ (801457c <FATFS_LinkDriverEx+0x94>)
 8014530:	4413      	add	r3, r2
 8014532:	79fa      	ldrb	r2, [r7, #7]
 8014534:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014536:	4b11      	ldr	r3, [pc, #68]	@ (801457c <FATFS_LinkDriverEx+0x94>)
 8014538:	7a5b      	ldrb	r3, [r3, #9]
 801453a:	b2db      	uxtb	r3, r3
 801453c:	1c5a      	adds	r2, r3, #1
 801453e:	b2d1      	uxtb	r1, r2
 8014540:	4a0e      	ldr	r2, [pc, #56]	@ (801457c <FATFS_LinkDriverEx+0x94>)
 8014542:	7251      	strb	r1, [r2, #9]
 8014544:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014546:	7dbb      	ldrb	r3, [r7, #22]
 8014548:	3330      	adds	r3, #48	@ 0x30
 801454a:	b2da      	uxtb	r2, r3
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014550:	68bb      	ldr	r3, [r7, #8]
 8014552:	3301      	adds	r3, #1
 8014554:	223a      	movs	r2, #58	@ 0x3a
 8014556:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	3302      	adds	r3, #2
 801455c:	222f      	movs	r2, #47	@ 0x2f
 801455e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	3303      	adds	r3, #3
 8014564:	2200      	movs	r2, #0
 8014566:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014568:	2300      	movs	r3, #0
 801456a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801456c:	7dfb      	ldrb	r3, [r7, #23]
}
 801456e:	4618      	mov	r0, r3
 8014570:	371c      	adds	r7, #28
 8014572:	46bd      	mov	sp, r7
 8014574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014578:	4770      	bx	lr
 801457a:	bf00      	nop
 801457c:	24003d54 	.word	0x24003d54

08014580 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801458a:	2200      	movs	r2, #0
 801458c:	6839      	ldr	r1, [r7, #0]
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f7ff ffaa 	bl	80144e8 <FATFS_LinkDriverEx>
 8014594:	4603      	mov	r3, r0
}
 8014596:	4618      	mov	r0, r3
 8014598:	3708      	adds	r7, #8
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}
	...

080145a0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80145a0:	b480      	push	{r7}
 80145a2:	b085      	sub	sp, #20
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	4603      	mov	r3, r0
 80145a8:	6039      	str	r1, [r7, #0]
 80145aa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80145ac:	88fb      	ldrh	r3, [r7, #6]
 80145ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80145b0:	d802      	bhi.n	80145b8 <ff_convert+0x18>
		c = chr;
 80145b2:	88fb      	ldrh	r3, [r7, #6]
 80145b4:	81fb      	strh	r3, [r7, #14]
 80145b6:	e025      	b.n	8014604 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d00b      	beq.n	80145d6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80145be:	88fb      	ldrh	r3, [r7, #6]
 80145c0:	2bff      	cmp	r3, #255	@ 0xff
 80145c2:	d805      	bhi.n	80145d0 <ff_convert+0x30>
 80145c4:	88fb      	ldrh	r3, [r7, #6]
 80145c6:	3b80      	subs	r3, #128	@ 0x80
 80145c8:	4a12      	ldr	r2, [pc, #72]	@ (8014614 <ff_convert+0x74>)
 80145ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145ce:	e000      	b.n	80145d2 <ff_convert+0x32>
 80145d0:	2300      	movs	r3, #0
 80145d2:	81fb      	strh	r3, [r7, #14]
 80145d4:	e016      	b.n	8014604 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80145d6:	2300      	movs	r3, #0
 80145d8:	81fb      	strh	r3, [r7, #14]
 80145da:	e009      	b.n	80145f0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80145dc:	89fb      	ldrh	r3, [r7, #14]
 80145de:	4a0d      	ldr	r2, [pc, #52]	@ (8014614 <ff_convert+0x74>)
 80145e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145e4:	88fa      	ldrh	r2, [r7, #6]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d006      	beq.n	80145f8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80145ea:	89fb      	ldrh	r3, [r7, #14]
 80145ec:	3301      	adds	r3, #1
 80145ee:	81fb      	strh	r3, [r7, #14]
 80145f0:	89fb      	ldrh	r3, [r7, #14]
 80145f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80145f4:	d9f2      	bls.n	80145dc <ff_convert+0x3c>
 80145f6:	e000      	b.n	80145fa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80145f8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80145fa:	89fb      	ldrh	r3, [r7, #14]
 80145fc:	3380      	adds	r3, #128	@ 0x80
 80145fe:	b29b      	uxth	r3, r3
 8014600:	b2db      	uxtb	r3, r3
 8014602:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014604:	89fb      	ldrh	r3, [r7, #14]
}
 8014606:	4618      	mov	r0, r3
 8014608:	3714      	adds	r7, #20
 801460a:	46bd      	mov	sp, r7
 801460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014610:	4770      	bx	lr
 8014612:	bf00      	nop
 8014614:	08014cf8 	.word	0x08014cf8

08014618 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014618:	b480      	push	{r7}
 801461a:	b087      	sub	sp, #28
 801461c:	af00      	add	r7, sp, #0
 801461e:	4603      	mov	r3, r0
 8014620:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8014622:	88fb      	ldrh	r3, [r7, #6]
 8014624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014628:	d201      	bcs.n	801462e <ff_wtoupper+0x16>
 801462a:	4b3e      	ldr	r3, [pc, #248]	@ (8014724 <ff_wtoupper+0x10c>)
 801462c:	e000      	b.n	8014630 <ff_wtoupper+0x18>
 801462e:	4b3e      	ldr	r3, [pc, #248]	@ (8014728 <ff_wtoupper+0x110>)
 8014630:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	1c9a      	adds	r2, r3, #2
 8014636:	617a      	str	r2, [r7, #20]
 8014638:	881b      	ldrh	r3, [r3, #0]
 801463a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801463c:	8a7b      	ldrh	r3, [r7, #18]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d068      	beq.n	8014714 <ff_wtoupper+0xfc>
 8014642:	88fa      	ldrh	r2, [r7, #6]
 8014644:	8a7b      	ldrh	r3, [r7, #18]
 8014646:	429a      	cmp	r2, r3
 8014648:	d364      	bcc.n	8014714 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	1c9a      	adds	r2, r3, #2
 801464e:	617a      	str	r2, [r7, #20]
 8014650:	881b      	ldrh	r3, [r3, #0]
 8014652:	823b      	strh	r3, [r7, #16]
 8014654:	8a3b      	ldrh	r3, [r7, #16]
 8014656:	0a1b      	lsrs	r3, r3, #8
 8014658:	81fb      	strh	r3, [r7, #14]
 801465a:	8a3b      	ldrh	r3, [r7, #16]
 801465c:	b2db      	uxtb	r3, r3
 801465e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014660:	88fa      	ldrh	r2, [r7, #6]
 8014662:	8a79      	ldrh	r1, [r7, #18]
 8014664:	8a3b      	ldrh	r3, [r7, #16]
 8014666:	440b      	add	r3, r1
 8014668:	429a      	cmp	r2, r3
 801466a:	da49      	bge.n	8014700 <ff_wtoupper+0xe8>
			switch (cmd) {
 801466c:	89fb      	ldrh	r3, [r7, #14]
 801466e:	2b08      	cmp	r3, #8
 8014670:	d84f      	bhi.n	8014712 <ff_wtoupper+0xfa>
 8014672:	a201      	add	r2, pc, #4	@ (adr r2, 8014678 <ff_wtoupper+0x60>)
 8014674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014678:	0801469d 	.word	0x0801469d
 801467c:	080146af 	.word	0x080146af
 8014680:	080146c5 	.word	0x080146c5
 8014684:	080146cd 	.word	0x080146cd
 8014688:	080146d5 	.word	0x080146d5
 801468c:	080146dd 	.word	0x080146dd
 8014690:	080146e5 	.word	0x080146e5
 8014694:	080146ed 	.word	0x080146ed
 8014698:	080146f5 	.word	0x080146f5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801469c:	88fa      	ldrh	r2, [r7, #6]
 801469e:	8a7b      	ldrh	r3, [r7, #18]
 80146a0:	1ad3      	subs	r3, r2, r3
 80146a2:	005b      	lsls	r3, r3, #1
 80146a4:	697a      	ldr	r2, [r7, #20]
 80146a6:	4413      	add	r3, r2
 80146a8:	881b      	ldrh	r3, [r3, #0]
 80146aa:	80fb      	strh	r3, [r7, #6]
 80146ac:	e027      	b.n	80146fe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80146ae:	88fa      	ldrh	r2, [r7, #6]
 80146b0:	8a7b      	ldrh	r3, [r7, #18]
 80146b2:	1ad3      	subs	r3, r2, r3
 80146b4:	b29b      	uxth	r3, r3
 80146b6:	f003 0301 	and.w	r3, r3, #1
 80146ba:	b29b      	uxth	r3, r3
 80146bc:	88fa      	ldrh	r2, [r7, #6]
 80146be:	1ad3      	subs	r3, r2, r3
 80146c0:	80fb      	strh	r3, [r7, #6]
 80146c2:	e01c      	b.n	80146fe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80146c4:	88fb      	ldrh	r3, [r7, #6]
 80146c6:	3b10      	subs	r3, #16
 80146c8:	80fb      	strh	r3, [r7, #6]
 80146ca:	e018      	b.n	80146fe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80146cc:	88fb      	ldrh	r3, [r7, #6]
 80146ce:	3b20      	subs	r3, #32
 80146d0:	80fb      	strh	r3, [r7, #6]
 80146d2:	e014      	b.n	80146fe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80146d4:	88fb      	ldrh	r3, [r7, #6]
 80146d6:	3b30      	subs	r3, #48	@ 0x30
 80146d8:	80fb      	strh	r3, [r7, #6]
 80146da:	e010      	b.n	80146fe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80146dc:	88fb      	ldrh	r3, [r7, #6]
 80146de:	3b1a      	subs	r3, #26
 80146e0:	80fb      	strh	r3, [r7, #6]
 80146e2:	e00c      	b.n	80146fe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80146e4:	88fb      	ldrh	r3, [r7, #6]
 80146e6:	3308      	adds	r3, #8
 80146e8:	80fb      	strh	r3, [r7, #6]
 80146ea:	e008      	b.n	80146fe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80146ec:	88fb      	ldrh	r3, [r7, #6]
 80146ee:	3b50      	subs	r3, #80	@ 0x50
 80146f0:	80fb      	strh	r3, [r7, #6]
 80146f2:	e004      	b.n	80146fe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80146f4:	88fb      	ldrh	r3, [r7, #6]
 80146f6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80146fa:	80fb      	strh	r3, [r7, #6]
 80146fc:	bf00      	nop
			}
			break;
 80146fe:	e008      	b.n	8014712 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014700:	89fb      	ldrh	r3, [r7, #14]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d195      	bne.n	8014632 <ff_wtoupper+0x1a>
 8014706:	8a3b      	ldrh	r3, [r7, #16]
 8014708:	005b      	lsls	r3, r3, #1
 801470a:	697a      	ldr	r2, [r7, #20]
 801470c:	4413      	add	r3, r2
 801470e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014710:	e78f      	b.n	8014632 <ff_wtoupper+0x1a>
			break;
 8014712:	bf00      	nop
	}

	return chr;
 8014714:	88fb      	ldrh	r3, [r7, #6]
}
 8014716:	4618      	mov	r0, r3
 8014718:	371c      	adds	r7, #28
 801471a:	46bd      	mov	sp, r7
 801471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014720:	4770      	bx	lr
 8014722:	bf00      	nop
 8014724:	08014df8 	.word	0x08014df8
 8014728:	08014fec 	.word	0x08014fec

0801472c <memset>:
 801472c:	4402      	add	r2, r0
 801472e:	4603      	mov	r3, r0
 8014730:	4293      	cmp	r3, r2
 8014732:	d100      	bne.n	8014736 <memset+0xa>
 8014734:	4770      	bx	lr
 8014736:	f803 1b01 	strb.w	r1, [r3], #1
 801473a:	e7f9      	b.n	8014730 <memset+0x4>

0801473c <__errno>:
 801473c:	4b01      	ldr	r3, [pc, #4]	@ (8014744 <__errno+0x8>)
 801473e:	6818      	ldr	r0, [r3, #0]
 8014740:	4770      	bx	lr
 8014742:	bf00      	nop
 8014744:	240000e8 	.word	0x240000e8

08014748 <__libc_init_array>:
 8014748:	b570      	push	{r4, r5, r6, lr}
 801474a:	4d0d      	ldr	r5, [pc, #52]	@ (8014780 <__libc_init_array+0x38>)
 801474c:	4c0d      	ldr	r4, [pc, #52]	@ (8014784 <__libc_init_array+0x3c>)
 801474e:	1b64      	subs	r4, r4, r5
 8014750:	10a4      	asrs	r4, r4, #2
 8014752:	2600      	movs	r6, #0
 8014754:	42a6      	cmp	r6, r4
 8014756:	d109      	bne.n	801476c <__libc_init_array+0x24>
 8014758:	4d0b      	ldr	r5, [pc, #44]	@ (8014788 <__libc_init_array+0x40>)
 801475a:	4c0c      	ldr	r4, [pc, #48]	@ (801478c <__libc_init_array+0x44>)
 801475c:	f000 f954 	bl	8014a08 <_init>
 8014760:	1b64      	subs	r4, r4, r5
 8014762:	10a4      	asrs	r4, r4, #2
 8014764:	2600      	movs	r6, #0
 8014766:	42a6      	cmp	r6, r4
 8014768:	d105      	bne.n	8014776 <__libc_init_array+0x2e>
 801476a:	bd70      	pop	{r4, r5, r6, pc}
 801476c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014770:	4798      	blx	r3
 8014772:	3601      	adds	r6, #1
 8014774:	e7ee      	b.n	8014754 <__libc_init_array+0xc>
 8014776:	f855 3b04 	ldr.w	r3, [r5], #4
 801477a:	4798      	blx	r3
 801477c:	3601      	adds	r6, #1
 801477e:	e7f2      	b.n	8014766 <__libc_init_array+0x1e>
 8014780:	08015940 	.word	0x08015940
 8014784:	08015940 	.word	0x08015940
 8014788:	08015940 	.word	0x08015940
 801478c:	08015944 	.word	0x08015944

08014790 <memcpy>:
 8014790:	440a      	add	r2, r1
 8014792:	4291      	cmp	r1, r2
 8014794:	f100 33ff 	add.w	r3, r0, #4294967295
 8014798:	d100      	bne.n	801479c <memcpy+0xc>
 801479a:	4770      	bx	lr
 801479c:	b510      	push	{r4, lr}
 801479e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147a6:	4291      	cmp	r1, r2
 80147a8:	d1f9      	bne.n	801479e <memcpy+0xe>
 80147aa:	bd10      	pop	{r4, pc}
 80147ac:	0000      	movs	r0, r0
	...

080147b0 <log>:
 80147b0:	b4f0      	push	{r4, r5, r6, r7}
 80147b2:	ee10 0a90 	vmov	r0, s1
 80147b6:	ee10 3a10 	vmov	r3, s0
 80147ba:	f04f 34ff 	mov.w	r4, #4294967295
 80147be:	429c      	cmp	r4, r3
 80147c0:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80147c4:	4c70      	ldr	r4, [pc, #448]	@ (8014988 <log+0x1d8>)
 80147c6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 80147ca:	418c      	sbcs	r4, r1
 80147cc:	ed2d 8b02 	vpush	{d8}
 80147d0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80147d4:	d35a      	bcc.n	801488c <log+0xdc>
 80147d6:	4a6d      	ldr	r2, [pc, #436]	@ (801498c <log+0x1dc>)
 80147d8:	4290      	cmp	r0, r2
 80147da:	bf08      	it	eq
 80147dc:	2b00      	cmpeq	r3, #0
 80147de:	f000 80c4 	beq.w	801496a <log+0x1ba>
 80147e2:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80147e6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80147ea:	4b69      	ldr	r3, [pc, #420]	@ (8014990 <log+0x1e0>)
 80147ec:	ee20 2b00 	vmul.f64	d2, d0, d0
 80147f0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80147f4:	ee20 4b02 	vmul.f64	d4, d0, d2
 80147f8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80147fc:	eea6 7b00 	vfma.f64	d7, d6, d0
 8014800:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8014804:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8014808:	eea6 7b02 	vfma.f64	d7, d6, d2
 801480c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8014810:	eea5 6b00 	vfma.f64	d6, d5, d0
 8014814:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8014818:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 801481c:	eea5 6b02 	vfma.f64	d6, d5, d2
 8014820:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8014824:	eea3 5b00 	vfma.f64	d5, d3, d0
 8014828:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 801482c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8014830:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8014834:	eea3 5b04 	vfma.f64	d5, d3, d4
 8014838:	eea5 6b04 	vfma.f64	d6, d5, d4
 801483c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8014840:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014844:	eeb0 2b47 	vmov.f64	d2, d7
 8014848:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8014970 <log+0x1c0>
 801484c:	eeb0 6b40 	vmov.f64	d6, d0
 8014850:	eeb0 3b40 	vmov.f64	d3, d0
 8014854:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014858:	eea0 6b47 	vfms.f64	d6, d0, d7
 801485c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8014860:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014864:	eea1 3b05 	vfma.f64	d3, d1, d5
 8014868:	ee30 7b43 	vsub.f64	d7, d0, d3
 801486c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8014870:	eea1 7b05 	vfma.f64	d7, d1, d5
 8014874:	ee25 5b08 	vmul.f64	d5, d5, d8
 8014878:	eea5 7b00 	vfma.f64	d7, d5, d0
 801487c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8014880:	ee33 0b07 	vadd.f64	d0, d3, d7
 8014884:	ecbd 8b02 	vpop	{d8}
 8014888:	bcf0      	pop	{r4, r5, r6, r7}
 801488a:	4770      	bx	lr
 801488c:	f1a2 0410 	sub.w	r4, r2, #16
 8014890:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8014894:	428c      	cmp	r4, r1
 8014896:	d923      	bls.n	80148e0 <log+0x130>
 8014898:	18d9      	adds	r1, r3, r3
 801489a:	eb40 0400 	adc.w	r4, r0, r0
 801489e:	4321      	orrs	r1, r4
 80148a0:	d105      	bne.n	80148ae <log+0xfe>
 80148a2:	ecbd 8b02 	vpop	{d8}
 80148a6:	2001      	movs	r0, #1
 80148a8:	bcf0      	pop	{r4, r5, r6, r7}
 80148aa:	f000 b885 	b.w	80149b8 <__math_divzero>
 80148ae:	4939      	ldr	r1, [pc, #228]	@ (8014994 <log+0x1e4>)
 80148b0:	4288      	cmp	r0, r1
 80148b2:	bf08      	it	eq
 80148b4:	2b00      	cmpeq	r3, #0
 80148b6:	d0e5      	beq.n	8014884 <log+0xd4>
 80148b8:	0413      	lsls	r3, r2, #16
 80148ba:	d403      	bmi.n	80148c4 <log+0x114>
 80148bc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80148c0:	4393      	bics	r3, r2
 80148c2:	d104      	bne.n	80148ce <log+0x11e>
 80148c4:	ecbd 8b02 	vpop	{d8}
 80148c8:	bcf0      	pop	{r4, r5, r6, r7}
 80148ca:	f000 b88d 	b.w	80149e8 <__math_invalid>
 80148ce:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014978 <log+0x1c8>
 80148d2:	ee20 7b07 	vmul.f64	d7, d0, d7
 80148d6:	ec53 2b17 	vmov	r2, r3, d7
 80148da:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 80148de:	4613      	mov	r3, r2
 80148e0:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 80148e4:	492a      	ldr	r1, [pc, #168]	@ (8014990 <log+0x1e0>)
 80148e6:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 80148ea:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 80148ee:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80148f2:	0d15      	lsrs	r5, r2, #20
 80148f4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 80148f8:	052d      	lsls	r5, r5, #20
 80148fa:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 80148fe:	1e1e      	subs	r6, r3, #0
 8014900:	1b47      	subs	r7, r0, r5
 8014902:	ec47 6b16 	vmov	d6, r6, r7
 8014906:	1512      	asrs	r2, r2, #20
 8014908:	eea7 5b06 	vfma.f64	d5, d7, d6
 801490c:	ee07 2a90 	vmov	s15, r2
 8014910:	ee25 2b05 	vmul.f64	d2, d5, d5
 8014914:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8014918:	ed91 4b00 	vldr	d4, [r1]
 801491c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8014920:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8014924:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014928:	ee35 4b07 	vadd.f64	d4, d5, d7
 801492c:	ee37 0b44 	vsub.f64	d0, d7, d4
 8014930:	ed91 7b02 	vldr	d7, [r1, #8]
 8014934:	ee30 0b05 	vadd.f64	d0, d0, d5
 8014938:	eea7 0b06 	vfma.f64	d0, d7, d6
 801493c:	ed91 7b04 	vldr	d7, [r1, #16]
 8014940:	ed91 6b08 	vldr	d6, [r1, #32]
 8014944:	eea7 0b02 	vfma.f64	d0, d7, d2
 8014948:	ed91 7b06 	vldr	d7, [r1, #24]
 801494c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8014950:	eea6 7b05 	vfma.f64	d7, d6, d5
 8014954:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8014958:	eea3 6b05 	vfma.f64	d6, d3, d5
 801495c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014960:	eea1 0b07 	vfma.f64	d0, d1, d7
 8014964:	ee30 0b04 	vadd.f64	d0, d0, d4
 8014968:	e78c      	b.n	8014884 <log+0xd4>
 801496a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8014980 <log+0x1d0>
 801496e:	e789      	b.n	8014884 <log+0xd4>
 8014970:	00000000 	.word	0x00000000
 8014974:	41a00000 	.word	0x41a00000
 8014978:	00000000 	.word	0x00000000
 801497c:	43300000 	.word	0x43300000
	...
 8014988:	000308ff 	.word	0x000308ff
 801498c:	3ff00000 	.word	0x3ff00000
 8014990:	080150a8 	.word	0x080150a8
 8014994:	7ff00000 	.word	0x7ff00000

08014998 <with_errno>:
 8014998:	b510      	push	{r4, lr}
 801499a:	ed2d 8b02 	vpush	{d8}
 801499e:	eeb0 8b40 	vmov.f64	d8, d0
 80149a2:	4604      	mov	r4, r0
 80149a4:	f7ff feca 	bl	801473c <__errno>
 80149a8:	eeb0 0b48 	vmov.f64	d0, d8
 80149ac:	ecbd 8b02 	vpop	{d8}
 80149b0:	6004      	str	r4, [r0, #0]
 80149b2:	bd10      	pop	{r4, pc}
 80149b4:	0000      	movs	r0, r0
	...

080149b8 <__math_divzero>:
 80149b8:	b082      	sub	sp, #8
 80149ba:	2800      	cmp	r0, #0
 80149bc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80149c0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80149c4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80149c8:	ed8d 7b00 	vstr	d7, [sp]
 80149cc:	ed9d 0b00 	vldr	d0, [sp]
 80149d0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80149e0 <__math_divzero+0x28>
 80149d4:	2022      	movs	r0, #34	@ 0x22
 80149d6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80149da:	b002      	add	sp, #8
 80149dc:	f7ff bfdc 	b.w	8014998 <with_errno>
	...

080149e8 <__math_invalid>:
 80149e8:	eeb0 7b40 	vmov.f64	d7, d0
 80149ec:	eeb4 7b47 	vcmp.f64	d7, d7
 80149f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149f4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80149f8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80149fc:	d602      	bvs.n	8014a04 <__math_invalid+0x1c>
 80149fe:	2021      	movs	r0, #33	@ 0x21
 8014a00:	f7ff bfca 	b.w	8014998 <with_errno>
 8014a04:	4770      	bx	lr
	...

08014a08 <_init>:
 8014a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a0a:	bf00      	nop
 8014a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a0e:	bc08      	pop	{r3}
 8014a10:	469e      	mov	lr, r3
 8014a12:	4770      	bx	lr

08014a14 <_fini>:
 8014a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a16:	bf00      	nop
 8014a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a1a:	bc08      	pop	{r3}
 8014a1c:	469e      	mov	lr, r3
 8014a1e:	4770      	bx	lr
