
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018498  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  08018748  08018748  00019748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080198f8  080198f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019900  08019900  0001a900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019904  08019904  0001a904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002b0  24000000  08019908  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005570  240002b0  08019bb8  0001b2b0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24005820  08019bb8  0001b820  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b2b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002be38  00000000  00000000  0001b2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005b83  00000000  00000000  00047116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002168  00000000  00000000  0004cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019ed  00000000  00000000  0004ee08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039308  00000000  00000000  000507f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034043  00000000  00000000  00089afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157d37  00000000  00000000  000bdb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00215877  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009de8  00000000  00000000  002158bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  0021f6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240002b0 	.word	0x240002b0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08018730 	.word	0x08018730

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240002b4 	.word	0x240002b4
 80002ec:	08018730 	.word	0x08018730

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b3e:	480f      	ldr	r0, [pc, #60]	@ (8000b7c <BMP280_write+0x54>)
 8000b40:	f008 fb46 	bl	80091d0 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000b4e:	1df9      	adds	r1, r7, #7
 8000b50:	2364      	movs	r3, #100	@ 0x64
 8000b52:	2201      	movs	r2, #1
 8000b54:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <BMP280_write+0x58>)
 8000b56:	f00b fb85 	bl	800c264 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000b5a:	1db9      	adds	r1, r7, #6
 8000b5c:	2364      	movs	r3, #100	@ 0x64
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <BMP280_write+0x58>)
 8000b62:	f00b fb7f 	bl	800c264 <HAL_SPI_Transmit>

	BMP280_unselect();
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6c:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <BMP280_write+0x54>)
 8000b6e:	f008 fb2f 	bl	80091d0 <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	58020400 	.word	0x58020400
 8000b80:	24004e80 	.word	0x24004e80

08000b84 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b9e:	480e      	ldr	r0, [pc, #56]	@ (8000bd8 <BMP280_read+0x54>)
 8000ba0:	f008 fb16 	bl	80091d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000ba4:	f107 010f 	add.w	r1, r7, #15
 8000ba8:	2364      	movs	r3, #100	@ 0x64
 8000baa:	2201      	movs	r2, #1
 8000bac:	480b      	ldr	r0, [pc, #44]	@ (8000bdc <BMP280_read+0x58>)
 8000bae:	f00b fb59 	bl	800c264 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000bb2:	f107 010f 	add.w	r1, r7, #15
 8000bb6:	2364      	movs	r3, #100	@ 0x64
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4808      	ldr	r0, [pc, #32]	@ (8000bdc <BMP280_read+0x58>)
 8000bbc:	f00b fd40 	bl	800c640 <HAL_SPI_Receive>
	BMP280_unselect();
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc6:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <BMP280_read+0x54>)
 8000bc8:	f008 fb02 	bl	80091d0 <HAL_GPIO_WritePin>

	return Buffer;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	58020400 	.word	0x58020400
 8000bdc:	24004e80 	.word	0x24004e80

08000be0 <BMP280_config>:

void BMP280_config(void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000be4:	2157      	movs	r1, #87	@ 0x57
 8000be6:	20f4      	movs	r0, #244	@ 0xf4
 8000be8:	f7ff ff9e 	bl	8000b28 <BMP280_write>
	BMP280_write(config, 0x10);
 8000bec:	2110      	movs	r1, #16
 8000bee:	20f5      	movs	r0, #245	@ 0xf5
 8000bf0:	f7ff ff9a 	bl	8000b28 <BMP280_write>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000bfe:	2388      	movs	r3, #136	@ 0x88
 8000c00:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c1c:	4843      	ldr	r0, [pc, #268]	@ (8000d2c <BMP280_calibrationData+0x134>)
 8000c1e:	f008 fad7 	bl	80091d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000c22:	f107 011f 	add.w	r1, r7, #31
 8000c26:	2364      	movs	r3, #100	@ 0x64
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4841      	ldr	r0, [pc, #260]	@ (8000d30 <BMP280_calibrationData+0x138>)
 8000c2c:	f00b fb1a 	bl	800c264 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000c30:	1d39      	adds	r1, r7, #4
 8000c32:	2364      	movs	r3, #100	@ 0x64
 8000c34:	2218      	movs	r2, #24
 8000c36:	483e      	ldr	r0, [pc, #248]	@ (8000d30 <BMP280_calibrationData+0x138>)
 8000c38:	f00b fd02 	bl	800c640 <HAL_SPI_Receive>
	BMP280_unselect();
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c42:	483a      	ldr	r0, [pc, #232]	@ (8000d2c <BMP280_calibrationData+0x134>)
 8000c44:	f008 fac4 	bl	80091d0 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8000c48:	797b      	ldrb	r3, [r7, #5]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	793b      	ldrb	r3, [r7, #4]
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b36      	ldr	r3, [pc, #216]	@ (8000d34 <BMP280_calibrationData+0x13c>)
 8000c5a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	021b      	lsls	r3, r3, #8
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <BMP280_calibrationData+0x140>)
 8000c6c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8000c6e:	7a7b      	ldrb	r3, [r7, #9]
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	7a3b      	ldrb	r3, [r7, #8]
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d3c <BMP280_calibrationData+0x144>)
 8000c7e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	7abb      	ldrb	r3, [r7, #10]
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <BMP280_calibrationData+0x148>)
 8000c92:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8000c94:	7b7b      	ldrb	r3, [r7, #13]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	7b3b      	ldrb	r3, [r7, #12]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21a      	sxth	r2, r3
 8000ca2:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <BMP280_calibrationData+0x14c>)
 8000ca4:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	7bbb      	ldrb	r3, [r7, #14]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <BMP280_calibrationData+0x150>)
 8000cb6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000cb8:	7c7b      	ldrb	r3, [r7, #17]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	7c3b      	ldrb	r3, [r7, #16]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <BMP280_calibrationData+0x154>)
 8000cc8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000cca:	7cfb      	ldrb	r3, [r7, #19]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	7cbb      	ldrb	r3, [r7, #18]
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <BMP280_calibrationData+0x158>)
 8000cda:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000cdc:	7d7b      	ldrb	r3, [r7, #21]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	7d3b      	ldrb	r3, [r7, #20]
 8000ce4:	b21b      	sxth	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <BMP280_calibrationData+0x15c>)
 8000cec:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000cee:	7dfb      	ldrb	r3, [r7, #23]
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	7dbb      	ldrb	r3, [r7, #22]
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <BMP280_calibrationData+0x160>)
 8000cfe:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000d00:	7e7b      	ldrb	r3, [r7, #25]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	7e3b      	ldrb	r3, [r7, #24]
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <BMP280_calibrationData+0x164>)
 8000d10:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8000d12:	7efb      	ldrb	r3, [r7, #27]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	7ebb      	ldrb	r3, [r7, #26]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <BMP280_calibrationData+0x168>)
 8000d22:	801a      	strh	r2, [r3, #0]
}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	58020400 	.word	0x58020400
 8000d30:	24004e80 	.word	0x24004e80
 8000d34:	240002e0 	.word	0x240002e0
 8000d38:	240002e4 	.word	0x240002e4
 8000d3c:	240002e6 	.word	0x240002e6
 8000d40:	240002e2 	.word	0x240002e2
 8000d44:	240002e8 	.word	0x240002e8
 8000d48:	240002ea 	.word	0x240002ea
 8000d4c:	240002ec 	.word	0x240002ec
 8000d50:	240002ee 	.word	0x240002ee
 8000d54:	240002f0 	.word	0x240002f0
 8000d58:	240002f2 	.word	0x240002f2
 8000d5c:	240002f4 	.word	0x240002f4
 8000d60:	240002f6 	.word	0x240002f6

08000d64 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8000d6a:	23f7      	movs	r3, #247	@ 0xf7
 8000d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	2300      	movs	r3, #0
 8000d74:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d7c:	4817      	ldr	r0, [pc, #92]	@ (8000ddc <BMP280_readRawValues+0x78>)
 8000d7e:	f008 fa27 	bl	80091d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000d82:	1df9      	adds	r1, r7, #7
 8000d84:	2364      	movs	r3, #100	@ 0x64
 8000d86:	2201      	movs	r2, #1
 8000d88:	4815      	ldr	r0, [pc, #84]	@ (8000de0 <BMP280_readRawValues+0x7c>)
 8000d8a:	f00b fa6b 	bl	800c264 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8000d8e:	4639      	mov	r1, r7
 8000d90:	2364      	movs	r3, #100	@ 0x64
 8000d92:	2206      	movs	r2, #6
 8000d94:	4812      	ldr	r0, [pc, #72]	@ (8000de0 <BMP280_readRawValues+0x7c>)
 8000d96:	f00b fc53 	bl	800c640 <HAL_SPI_Receive>
	BMP280_unselect();
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000da0:	480e      	ldr	r0, [pc, #56]	@ (8000ddc <BMP280_readRawValues+0x78>)
 8000da2:	f008 fa15 	bl	80091d0 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8000da6:	783b      	ldrb	r3, [r7, #0]
 8000da8:	031a      	lsls	r2, r3, #12
 8000daa:	787b      	ldrb	r3, [r7, #1]
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	4313      	orrs	r3, r2
 8000db0:	78ba      	ldrb	r2, [r7, #2]
 8000db2:	0912      	lsrs	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	4313      	orrs	r3, r2
 8000db8:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <BMP280_readRawValues+0x80>)
 8000dba:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	031a      	lsls	r2, r3, #12
 8000dc0:	793b      	ldrb	r3, [r7, #4]
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	797a      	ldrb	r2, [r7, #5]
 8000dc8:	0912      	lsrs	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <BMP280_readRawValues+0x84>)
 8000dd0:	6013      	str	r3, [r2, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	58020400 	.word	0x58020400
 8000de0:	24004e80 	.word	0x24004e80
 8000de4:	240002fc 	.word	0x240002fc
 8000de8:	240002f8 	.word	0x240002f8

08000dec <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <BMP280_measureT+0x74>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	10da      	asrs	r2, r3, #3
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <BMP280_measureT+0x78>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	4a19      	ldr	r2, [pc, #100]	@ (8000e68 <BMP280_measureT+0x7c>)
 8000e04:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e08:	fb02 f303 	mul.w	r3, r2, r3
 8000e0c:	12db      	asrs	r3, r3, #11
 8000e0e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	111b      	asrs	r3, r3, #4
 8000e14:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <BMP280_measureT+0x78>)
 8000e16:	8812      	ldrh	r2, [r2, #0]
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	1112      	asrs	r2, r2, #4
 8000e1e:	4911      	ldr	r1, [pc, #68]	@ (8000e64 <BMP280_measureT+0x78>)
 8000e20:	8809      	ldrh	r1, [r1, #0]
 8000e22:	1a52      	subs	r2, r2, r1
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	131b      	asrs	r3, r3, #12
 8000e2a:	4a10      	ldr	r2, [pc, #64]	@ (8000e6c <BMP280_measureT+0x80>)
 8000e2c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	139b      	asrs	r3, r3, #14
 8000e36:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e70 <BMP280_measureT+0x84>)
 8000e40:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <BMP280_measureT+0x84>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3380      	adds	r3, #128	@ 0x80
 8000e4e:	121b      	asrs	r3, r3, #8
 8000e50:	60fb      	str	r3, [r7, #12]
	return T;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	240002f8 	.word	0x240002f8
 8000e64:	240002e0 	.word	0x240002e0
 8000e68:	240002e4 	.word	0x240002e4
 8000e6c:	240002e6 	.word	0x240002e6
 8000e70:	24000300 	.word	0x24000300

08000e74 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8000e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e78:	b0ca      	sub	sp, #296	@ 0x128
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000e80:	4baf      	ldr	r3, [pc, #700]	@ (8001140 <BMP280_measureP+0x2cc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	17da      	asrs	r2, r3, #31
 8000e86:	461c      	mov	r4, r3
 8000e88:	4615      	mov	r5, r2
 8000e8a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000e8e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000e92:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8000e96:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000e9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e9e:	fb03 f102 	mul.w	r1, r3, r2
 8000ea2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000ea6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	18ca      	adds	r2, r1, r3
 8000eb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eb4:	fba3 8903 	umull	r8, r9, r3, r3
 8000eb8:	eb02 0309 	add.w	r3, r2, r9
 8000ebc:	4699      	mov	r9, r3
 8000ebe:	4ba1      	ldr	r3, [pc, #644]	@ (8001144 <BMP280_measureP+0x2d0>)
 8000ec0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	17da      	asrs	r2, r3, #31
 8000ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000ed0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	fb03 f209 	mul.w	r2, r3, r9
 8000eda:	460b      	mov	r3, r1
 8000edc:	fb08 f303 	mul.w	r3, r8, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	fba8 1202 	umull	r1, r2, r8, r2
 8000ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000eec:	460a      	mov	r2, r1
 8000eee:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000ef6:	4413      	add	r3, r2
 8000ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000efc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000f00:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000f04:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000f08:	4b8f      	ldr	r3, [pc, #572]	@ (8001148 <BMP280_measureP+0x2d4>)
 8000f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	17da      	asrs	r2, r3, #31
 8000f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000f16:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000f1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f1e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000f22:	462a      	mov	r2, r5
 8000f24:	fb02 f203 	mul.w	r2, r2, r3
 8000f28:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	fb01 f303 	mul.w	r3, r1, r3
 8000f32:	441a      	add	r2, r3
 8000f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f38:	4621      	mov	r1, r4
 8000f3a:	fba3 1301 	umull	r1, r3, r3, r1
 8000f3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f42:	460b      	mov	r3, r1
 8000f44:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	f04f 0100 	mov.w	r1, #0
 8000f5a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000f5e:	462b      	mov	r3, r5
 8000f60:	0459      	lsls	r1, r3, #17
 8000f62:	4623      	mov	r3, r4
 8000f64:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000f68:	4623      	mov	r3, r4
 8000f6a:	0458      	lsls	r0, r3, #17
 8000f6c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000f70:	1814      	adds	r4, r2, r0
 8000f72:	643c      	str	r4, [r7, #64]	@ 0x40
 8000f74:	414b      	adcs	r3, r1
 8000f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f78:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000f7c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000f80:	4b72      	ldr	r3, [pc, #456]	@ (800114c <BMP280_measureP+0x2d8>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	17da      	asrs	r2, r3, #31
 8000f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000f8e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000f92:	f04f 0000 	mov.w	r0, #0
 8000f96:	f04f 0100 	mov.w	r1, #0
 8000f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f9e:	00d9      	lsls	r1, r3, #3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000fa6:	1814      	adds	r4, r2, r0
 8000fa8:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000faa:	414b      	adcs	r3, r1
 8000fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000fae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000fb2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000fb6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000fba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fbe:	fb03 f102 	mul.w	r1, r3, r2
 8000fc2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000fc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	18ca      	adds	r2, r1, r3
 8000fd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000fd4:	fba3 1303 	umull	r1, r3, r3, r3
 8000fd8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fdc:	460b      	mov	r3, r1
 8000fde:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000fe6:	18d3      	adds	r3, r2, r3
 8000fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000fec:	4b58      	ldr	r3, [pc, #352]	@ (8001150 <BMP280_measureP+0x2dc>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	17da      	asrs	r2, r3, #31
 8000ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000ffe:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001002:	462b      	mov	r3, r5
 8001004:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001008:	4642      	mov	r2, r8
 800100a:	fb02 f203 	mul.w	r2, r2, r3
 800100e:	464b      	mov	r3, r9
 8001010:	4621      	mov	r1, r4
 8001012:	fb01 f303 	mul.w	r3, r1, r3
 8001016:	4413      	add	r3, r2
 8001018:	4622      	mov	r2, r4
 800101a:	4641      	mov	r1, r8
 800101c:	fba2 1201 	umull	r1, r2, r2, r1
 8001020:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001024:	460a      	mov	r2, r1
 8001026:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800102a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800102e:	4413      	add	r3, r2
 8001030:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	f04f 0100 	mov.w	r1, #0
 800103c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001040:	4623      	mov	r3, r4
 8001042:	0a18      	lsrs	r0, r3, #8
 8001044:	462b      	mov	r3, r5
 8001046:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800104a:	462b      	mov	r3, r5
 800104c:	1219      	asrs	r1, r3, #8
 800104e:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <BMP280_measureP+0x2e0>)
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	b21b      	sxth	r3, r3
 8001056:	17da      	asrs	r2, r3, #31
 8001058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800105c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001060:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001064:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001068:	464a      	mov	r2, r9
 800106a:	fb02 f203 	mul.w	r2, r2, r3
 800106e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001072:	4644      	mov	r4, r8
 8001074:	fb04 f303 	mul.w	r3, r4, r3
 8001078:	441a      	add	r2, r3
 800107a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800107e:	4644      	mov	r4, r8
 8001080:	fba3 4304 	umull	r4, r3, r3, r4
 8001084:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001088:	4623      	mov	r3, r4
 800108a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800108e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001092:	18d3      	adds	r3, r2, r3
 8001094:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80010a4:	464c      	mov	r4, r9
 80010a6:	0323      	lsls	r3, r4, #12
 80010a8:	4644      	mov	r4, r8
 80010aa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80010ae:	4644      	mov	r4, r8
 80010b0:	0322      	lsls	r2, r4, #12
 80010b2:	1884      	adds	r4, r0, r2
 80010b4:	633c      	str	r4, [r7, #48]	@ 0x30
 80010b6:	eb41 0303 	adc.w	r3, r1, r3
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80010bc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80010c0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80010c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80010c8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80010cc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80010d0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80010d4:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <BMP280_measureP+0x2e4>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80010e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80010e4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80010e8:	462b      	mov	r3, r5
 80010ea:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80010ee:	4642      	mov	r2, r8
 80010f0:	fb02 f203 	mul.w	r2, r2, r3
 80010f4:	464b      	mov	r3, r9
 80010f6:	4621      	mov	r1, r4
 80010f8:	fb01 f303 	mul.w	r3, r1, r3
 80010fc:	4413      	add	r3, r2
 80010fe:	4622      	mov	r2, r4
 8001100:	4641      	mov	r1, r8
 8001102:	fba2 1201 	umull	r1, r2, r2, r1
 8001106:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800110a:	460a      	mov	r2, r1
 800110c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001110:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001114:	4413      	add	r3, r2
 8001116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001126:	4629      	mov	r1, r5
 8001128:	104a      	asrs	r2, r1, #1
 800112a:	4629      	mov	r1, r5
 800112c:	17cb      	asrs	r3, r1, #31
 800112e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001132:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001136:	4313      	orrs	r3, r2
 8001138:	d110      	bne.n	800115c <BMP280_measureP+0x2e8>
	{
	return 0;
 800113a:	2300      	movs	r3, #0
 800113c:	e154      	b.n	80013e8 <BMP280_measureP+0x574>
 800113e:	bf00      	nop
 8001140:	24000300 	.word	0x24000300
 8001144:	240002f0 	.word	0x240002f0
 8001148:	240002ee 	.word	0x240002ee
 800114c:	240002ec 	.word	0x240002ec
 8001150:	240002ea 	.word	0x240002ea
 8001154:	240002e8 	.word	0x240002e8
 8001158:	240002e2 	.word	0x240002e2
	}
	p = 1048576-adc_P;
 800115c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001160:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001164:	17da      	asrs	r2, r3, #31
 8001166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800116a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800116e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001172:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001176:	105b      	asrs	r3, r3, #1
 8001178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800117c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001180:	07db      	lsls	r3, r3, #31
 8001182:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001186:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800118a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800118e:	4621      	mov	r1, r4
 8001190:	1a89      	subs	r1, r1, r2
 8001192:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001194:	4629      	mov	r1, r5
 8001196:	eb61 0303 	sbc.w	r3, r1, r3
 800119a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800119c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80011a0:	4622      	mov	r2, r4
 80011a2:	462b      	mov	r3, r5
 80011a4:	1891      	adds	r1, r2, r2
 80011a6:	6239      	str	r1, [r7, #32]
 80011a8:	415b      	adcs	r3, r3
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b0:	4621      	mov	r1, r4
 80011b2:	1851      	adds	r1, r2, r1
 80011b4:	61b9      	str	r1, [r7, #24]
 80011b6:	4629      	mov	r1, r5
 80011b8:	414b      	adcs	r3, r1
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80011c8:	4649      	mov	r1, r9
 80011ca:	018b      	lsls	r3, r1, #6
 80011cc:	4641      	mov	r1, r8
 80011ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011d2:	4641      	mov	r1, r8
 80011d4:	018a      	lsls	r2, r1, #6
 80011d6:	4641      	mov	r1, r8
 80011d8:	1889      	adds	r1, r1, r2
 80011da:	6139      	str	r1, [r7, #16]
 80011dc:	4649      	mov	r1, r9
 80011de:	eb43 0101 	adc.w	r1, r3, r1
 80011e2:	6179      	str	r1, [r7, #20]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80011f0:	4649      	mov	r1, r9
 80011f2:	008b      	lsls	r3, r1, #2
 80011f4:	4641      	mov	r1, r8
 80011f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011fa:	4641      	mov	r1, r8
 80011fc:	008a      	lsls	r2, r1, #2
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	4603      	mov	r3, r0
 8001204:	4622      	mov	r2, r4
 8001206:	189b      	adds	r3, r3, r2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	460b      	mov	r3, r1
 800120c:	462a      	mov	r2, r5
 800120e:	eb42 0303 	adc.w	r3, r2, r3
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001220:	4649      	mov	r1, r9
 8001222:	008b      	lsls	r3, r1, #2
 8001224:	4641      	mov	r1, r8
 8001226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800122a:	4641      	mov	r1, r8
 800122c:	008a      	lsls	r2, r1, #2
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	4603      	mov	r3, r0
 8001234:	4622      	mov	r2, r4
 8001236:	189b      	adds	r3, r3, r2
 8001238:	673b      	str	r3, [r7, #112]	@ 0x70
 800123a:	462b      	mov	r3, r5
 800123c:	460a      	mov	r2, r1
 800123e:	eb42 0303 	adc.w	r3, r2, r3
 8001242:	677b      	str	r3, [r7, #116]	@ 0x74
 8001244:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001248:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800124c:	f7ff fa6c 	bl	8000728 <__aeabi_ldivmod>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001258:	4b66      	ldr	r3, [pc, #408]	@ (80013f4 <BMP280_measureP+0x580>)
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	b21b      	sxth	r3, r3
 8001260:	17da      	asrs	r2, r3, #31
 8001262:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001264:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001266:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	0b50      	lsrs	r0, r2, #13
 8001274:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001278:	1359      	asrs	r1, r3, #13
 800127a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800127e:	462b      	mov	r3, r5
 8001280:	fb00 f203 	mul.w	r2, r0, r3
 8001284:	4623      	mov	r3, r4
 8001286:	fb03 f301 	mul.w	r3, r3, r1
 800128a:	4413      	add	r3, r2
 800128c:	4622      	mov	r2, r4
 800128e:	fba2 1200 	umull	r1, r2, r2, r0
 8001292:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001296:	460a      	mov	r2, r1
 8001298:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800129c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80012a0:	4413      	add	r3, r2
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80012a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80012aa:	f04f 0000 	mov.w	r0, #0
 80012ae:	f04f 0100 	mov.w	r1, #0
 80012b2:	0b50      	lsrs	r0, r2, #13
 80012b4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80012b8:	1359      	asrs	r1, r3, #13
 80012ba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80012be:	462b      	mov	r3, r5
 80012c0:	fb00 f203 	mul.w	r2, r0, r3
 80012c4:	4623      	mov	r3, r4
 80012c6:	fb03 f301 	mul.w	r3, r3, r1
 80012ca:	4413      	add	r3, r2
 80012cc:	4622      	mov	r2, r4
 80012ce:	fba2 1200 	umull	r1, r2, r2, r0
 80012d2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80012d6:	460a      	mov	r2, r1
 80012d8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80012dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80012e0:	4413      	add	r3, r2
 80012e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80012f2:	4621      	mov	r1, r4
 80012f4:	0e4a      	lsrs	r2, r1, #25
 80012f6:	4629      	mov	r1, r5
 80012f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80012fc:	4629      	mov	r1, r5
 80012fe:	164b      	asrs	r3, r1, #25
 8001300:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001304:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <BMP280_measureP+0x584>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	17da      	asrs	r2, r3, #31
 800130e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001310:	667a      	str	r2, [r7, #100]	@ 0x64
 8001312:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001316:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800131a:	462a      	mov	r2, r5
 800131c:	fb02 f203 	mul.w	r2, r2, r3
 8001320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001324:	4621      	mov	r1, r4
 8001326:	fb01 f303 	mul.w	r3, r1, r3
 800132a:	4413      	add	r3, r2
 800132c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001330:	4621      	mov	r1, r4
 8001332:	fba2 1201 	umull	r1, r2, r2, r1
 8001336:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800133a:	460a      	mov	r2, r1
 800133c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001340:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001344:	4413      	add	r3, r2
 8001346:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001356:	4621      	mov	r1, r4
 8001358:	0cca      	lsrs	r2, r1, #19
 800135a:	4629      	mov	r1, r5
 800135c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001360:	4629      	mov	r1, r5
 8001362:	14cb      	asrs	r3, r1, #19
 8001364:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001368:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800136c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001370:	1884      	adds	r4, r0, r2
 8001372:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001374:	eb41 0303 	adc.w	r3, r1, r3
 8001378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800137a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800137e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001382:	4621      	mov	r1, r4
 8001384:	1889      	adds	r1, r1, r2
 8001386:	6539      	str	r1, [r7, #80]	@ 0x50
 8001388:	4629      	mov	r1, r5
 800138a:	eb43 0101 	adc.w	r1, r3, r1
 800138e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001390:	f04f 0000 	mov.w	r0, #0
 8001394:	f04f 0100 	mov.w	r1, #0
 8001398:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800139c:	4623      	mov	r3, r4
 800139e:	0a18      	lsrs	r0, r3, #8
 80013a0:	462b      	mov	r3, r5
 80013a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013a6:	462b      	mov	r3, r5
 80013a8:	1219      	asrs	r1, r3, #8
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <BMP280_measureP+0x588>)
 80013ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	17da      	asrs	r2, r3, #31
 80013b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80013c4:	464c      	mov	r4, r9
 80013c6:	0123      	lsls	r3, r4, #4
 80013c8:	4644      	mov	r4, r8
 80013ca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80013ce:	4644      	mov	r4, r8
 80013d0:	0122      	lsls	r2, r4, #4
 80013d2:	1884      	adds	r4, r0, r2
 80013d4:	603c      	str	r4, [r7, #0]
 80013d6:	eb41 0303 	adc.w	r3, r1, r3
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013e0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80013e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80013ee:	46bd      	mov	sp, r7
 80013f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013f4:	240002f6 	.word	0x240002f6
 80013f8:	240002f4 	.word	0x240002f4
 80013fc:	240002f2 	.word	0x240002f2

08001400 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <BMP280_measureH+0x14>
 8001410:	2300      	movs	r3, #0
 8001412:	e03d      	b.n	8001490 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800141e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001498 <BMP280_measureH+0x98>
 8001422:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001426:	eeb0 0b46 	vmov.f64	d0, d6
 800142a:	f017 f855 	bl	80184d8 <log>
 800142e:	eeb0 7b40 	vmov.f64	d7, d0
 8001432:	eeb1 7b47 	vneg.f64	d7, d7
 8001436:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 800143a:	ed97 7b06 	vldr	d7, [r7, #24]
 800143e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d101      	bne.n	800144c <BMP280_measureH+0x4c>
 8001448:	2300      	movs	r3, #0
 800144a:	e021      	b.n	8001490 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001456:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80014a0 <BMP280_measureH+0xa0>
 800145a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800145e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 80014a8 <BMP280_measureH+0xa8>
 8001462:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001466:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80014b0 <BMP280_measureH+0xb0>
 800146a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800146e:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8001472:	ed97 5b06 	vldr	d5, [r7, #24]
 8001476:	ed97 6b04 	vldr	d6, [r7, #16]
 800147a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800147e:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8001482:	ed97 7b02 	vldr	d7, [r7, #8]
 8001486:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800148a:	ee17 3a90 	vmov	r3, s15
 800148e:	b29b      	uxth	r3, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	00000000 	.word	0x00000000
 800149c:	40f8bcd0 	.word	0x40f8bcd0
 80014a0:	00000000 	.word	0x00000000
 80014a4:	40590000 	.word	0x40590000
 80014a8:	66666666 	.word	0x66666666
 80014ac:	40711266 	.word	0x40711266
 80014b0:	ca402a92 	.word	0xca402a92
 80014b4:	3fa17e3e 	.word	0x3fa17e3e

080014b8 <BMP280_init>:

void BMP280_init(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c2:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <BMP280_init+0x40>)
 80014c4:	f007 fe84 	bl	80091d0 <HAL_GPIO_WritePin>
	BMP280_config();
 80014c8:	f7ff fb8a 	bl	8000be0 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 80014cc:	2089      	movs	r0, #137	@ 0x89
 80014ce:	f7ff fb59 	bl	8000b84 <BMP280_read>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <BMP280_init+0x44>)
 80014d8:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80014da:	f7ff fb8d 	bl	8000bf8 <BMP280_calibrationData>
	BMP280_readRawValues();
 80014de:	f7ff fc41 	bl	8000d64 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <BMP280_init+0x48>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fc80 	bl	8000dec <BMP280_measureT>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a03      	ldr	r2, [pc, #12]	@ (80014fc <BMP280_init+0x44>)
 80014f0:	6093      	str	r3, [r2, #8]
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	58020400 	.word	0x58020400
 80014fc:	240002cc 	.word	0x240002cc
 8001500:	240002f8 	.word	0x240002f8

08001504 <BMP280_calculate>:

void BMP280_calculate(void){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001508:	2089      	movs	r0, #137	@ 0x89
 800150a:	f7ff fb3b 	bl	8000b84 <BMP280_read>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <BMP280_calculate+0x68>)
 8001514:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8001516:	f7ff fc25 	bl	8000d64 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <BMP280_calculate+0x6c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fc64 	bl	8000dec <BMP280_measureT>
 8001524:	4603      	mov	r3, r0
 8001526:	4a11      	ldr	r2, [pc, #68]	@ (800156c <BMP280_calculate+0x68>)
 8001528:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 800152a:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <BMP280_calculate+0x70>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fca0 	bl	8000e74 <BMP280_measureP>
 8001534:	4603      	mov	r3, r0
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	4a0c      	ldr	r2, [pc, #48]	@ (800156c <BMP280_calculate+0x68>)
 800153a:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <BMP280_calculate+0x68>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <BMP280_calculate+0x68>)
 8001542:	6892      	ldr	r2, [r2, #8]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff5a 	bl	8001400 <BMP280_measureH>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <BMP280_calculate+0x68>)
 8001552:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <BMP280_calculate+0x68>)
 8001556:	8a1a      	ldrh	r2, [r3, #16]
 8001558:	4b04      	ldr	r3, [pc, #16]	@ (800156c <BMP280_calculate+0x68>)
 800155a:	8a5b      	ldrh	r3, [r3, #18]
 800155c:	429a      	cmp	r2, r3
 800155e:	d903      	bls.n	8001568 <BMP280_calculate+0x64>
 8001560:	4b02      	ldr	r3, [pc, #8]	@ (800156c <BMP280_calculate+0x68>)
 8001562:	8a1a      	ldrh	r2, [r3, #16]
 8001564:	4b01      	ldr	r3, [pc, #4]	@ (800156c <BMP280_calculate+0x68>)
 8001566:	825a      	strh	r2, [r3, #18]
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	240002cc 	.word	0x240002cc
 8001570:	240002f8 	.word	0x240002f8
 8001574:	240002fc 	.word	0x240002fc

08001578 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <bno055_delay+0x24>)
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4413      	add	r3, r2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b03      	ldr	r3, [pc, #12]	@ (800159c <bno055_delay+0x24>)
 800158e:	701a      	strb	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	24000407 	.word	0x24000407

080015a0 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	460a      	mov	r2, r1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	4613      	mov	r3, r2
 80015ae:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 80015b0:	23aa      	movs	r3, #170	@ 0xaa
 80015b2:	723b      	strb	r3, [r7, #8]
 80015b4:	2301      	movs	r3, #1
 80015b6:	727b      	strb	r3, [r7, #9]
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	72bb      	strb	r3, [r7, #10]
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <BNO_Read+0x44>)
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	2364      	movs	r3, #100	@ 0x64
 80015cc:	2204      	movs	r2, #4
 80015ce:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <BNO_Read+0x48>)
 80015d0:	f00c ffe2 	bl	800e598 <HAL_UART_Transmit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
	return uartError;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	24000304 	.word	0x24000304
 80015e8:	240051fc 	.word	0x240051fc

080015ec <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	460a      	mov	r2, r1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 80015fc:	23aa      	movs	r3, #170	@ 0xaa
 80015fe:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8001600:	2300      	movs	r3, #0
 8001602:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8001610:	f107 0108 	add.w	r1, r7, #8
 8001614:	2364      	movs	r3, #100	@ 0x64
 8001616:	2205      	movs	r2, #5
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <BNO_Write+0x40>)
 800161a:	f00c ffbd 	bl	800e598 <HAL_UART_Transmit>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	240051fc 	.word	0x240051fc

08001630 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8001630:	b580      	push	{r7, lr}
 8001632:	b0c4      	sub	sp, #272	@ 0x110
 8001634:	af00      	add	r7, sp, #0
 8001636:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800163a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001644:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001648:	4602      	mov	r2, r0
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001650:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001654:	460a      	mov	r2, r1
 8001656:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8001658:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800165c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001660:	22aa      	movs	r2, #170	@ 0xaa
 8001662:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8001664:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800166c:	2200      	movs	r2, #0
 800166e:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8001670:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001678:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800167c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8001680:	7812      	ldrb	r2, [r2, #0]
 8001682:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8001684:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800168c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001690:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8001698:	2300      	movs	r3, #0
 800169a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800169e:	e015      	b.n	80016cc <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 80016a0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016a4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016a8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	441a      	add	r2, r3
 80016b0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016b4:	3304      	adds	r3, #4
 80016b6:	7811      	ldrb	r1, [r2, #0]
 80016b8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016bc:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016c0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 80016c2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016c6:	3301      	adds	r3, #1
 80016c8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80016cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016d4:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3e0      	bcc.n	80016a0 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 80016de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016e2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3304      	adds	r3, #4
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f107 010c 	add.w	r1, r7, #12
 80016f2:	2364      	movs	r3, #100	@ 0x64
 80016f4:	4806      	ldr	r0, [pc, #24]	@ (8001710 <BNO_Write_MB+0xe0>)
 80016f6:	f00c ff4f 	bl	800e598 <HAL_UART_Transmit>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8001700:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8001704:	4618      	mov	r0, r3
 8001706:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	240051fc 	.word	0x240051fc
 8001714:	00000000 	.word	0x00000000

08001718 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 800171c:	4ba6      	ldr	r3, [pc, #664]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b55      	cmp	r3, #85	@ 0x55
 8001722:	f300 8247 	bgt.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001726:	2b35      	cmp	r3, #53	@ 0x35
 8001728:	da0a      	bge.n	8001740 <BNO_Page0Adress+0x28>
 800172a:	2b08      	cmp	r3, #8
 800172c:	f000 814a 	beq.w	80019c4 <BNO_Page0Adress+0x2ac>
 8001730:	2b08      	cmp	r3, #8
 8001732:	f300 823f 	bgt.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001736:	2b00      	cmp	r3, #0
 8001738:	d04c      	beq.n	80017d4 <BNO_Page0Adress+0xbc>
 800173a:	2b07      	cmp	r3, #7
 800173c:	d065      	beq.n	800180a <BNO_Page0Adress+0xf2>
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 800173e:	e239      	b.n	8001bb4 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8001740:	3b35      	subs	r3, #53	@ 0x35
 8001742:	2b20      	cmp	r3, #32
 8001744:	f200 8236 	bhi.w	8001bb4 <BNO_Page0Adress+0x49c>
 8001748:	a201      	add	r2, pc, #4	@ (adr r2, 8001750 <BNO_Page0Adress+0x38>)
 800174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174e:	bf00      	nop
 8001750:	08001853 	.word	0x08001853
 8001754:	08001bb5 	.word	0x08001bb5
 8001758:	08001bb5 	.word	0x08001bb5
 800175c:	08001bb5 	.word	0x08001bb5
 8001760:	0800182f 	.word	0x0800182f
 8001764:	08001bb5 	.word	0x08001bb5
 8001768:	0800181d 	.word	0x0800181d
 800176c:	08001bb5 	.word	0x08001bb5
 8001770:	08001841 	.word	0x08001841
 8001774:	08001bb5 	.word	0x08001bb5
 8001778:	08001bb5 	.word	0x08001bb5
 800177c:	08001bb5 	.word	0x08001bb5
 8001780:	08001bb5 	.word	0x08001bb5
 8001784:	08001bb5 	.word	0x08001bb5
 8001788:	08001bb5 	.word	0x08001bb5
 800178c:	08001bb5 	.word	0x08001bb5
 8001790:	08001bb5 	.word	0x08001bb5
 8001794:	08001bb5 	.word	0x08001bb5
 8001798:	08001bb5 	.word	0x08001bb5
 800179c:	08001bb5 	.word	0x08001bb5
 80017a0:	08001bb5 	.word	0x08001bb5
 80017a4:	08001bb5 	.word	0x08001bb5
 80017a8:	08001bb5 	.word	0x08001bb5
 80017ac:	08001bb5 	.word	0x08001bb5
 80017b0:	08001bb5 	.word	0x08001bb5
 80017b4:	08001bb5 	.word	0x08001bb5
 80017b8:	08001bb5 	.word	0x08001bb5
 80017bc:	08001bb5 	.word	0x08001bb5
 80017c0:	08001bb5 	.word	0x08001bb5
 80017c4:	08001bb5 	.word	0x08001bb5
 80017c8:	08001bb5 	.word	0x08001bb5
 80017cc:	08001bb5 	.word	0x08001bb5
 80017d0:	080018ab 	.word	0x080018ab
			if(BNO_RxBuffer[1] != 160) return;
 80017d4:	4b78      	ldr	r3, [pc, #480]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017d6:	785b      	ldrb	r3, [r3, #1]
 80017d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80017da:	f040 81ed 	bne.w	8001bb8 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 80017de:	4b76      	ldr	r3, [pc, #472]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017e0:	785a      	ldrb	r2, [r3, #1]
 80017e2:	4b76      	ldr	r3, [pc, #472]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017e4:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 80017e6:	4b74      	ldr	r3, [pc, #464]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017e8:	789a      	ldrb	r2, [r3, #2]
 80017ea:	4b74      	ldr	r3, [pc, #464]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017ec:	721a      	strb	r2, [r3, #8]
			IMU.MAG.ID = BNO_RxBuffer[3];
 80017ee:	4b72      	ldr	r3, [pc, #456]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017f0:	78da      	ldrb	r2, [r3, #3]
 80017f2:	4b72      	ldr	r3, [pc, #456]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			IMU.GYR.ID = BNO_RxBuffer[4];
 80017f8:	4b6f      	ldr	r3, [pc, #444]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80017fa:	791a      	ldrb	r2, [r3, #4]
 80017fc:	4b6f      	ldr	r3, [pc, #444]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80017fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 8001802:	4b6f      	ldr	r3, [pc, #444]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001804:	220b      	movs	r2, #11
 8001806:	701a      	strb	r2, [r3, #0]
			break;
 8001808:	e1d7      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 800180a:	4b6b      	ldr	r3, [pc, #428]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800180c:	785a      	ldrb	r2, [r3, #1]
 800180e:	4b6b      	ldr	r3, [pc, #428]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001810:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 8001814:	4b6a      	ldr	r3, [pc, #424]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001816:	220b      	movs	r2, #11
 8001818:	701a      	strb	r2, [r3, #0]
			break;
 800181a:	e1ce      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 800181c:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800181e:	785a      	ldrb	r2, [r3, #1]
 8001820:	4b66      	ldr	r3, [pc, #408]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001822:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			BNO_ErrorHandler = ReadSucces;
 8001826:	4b66      	ldr	r3, [pc, #408]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 8001828:	220b      	movs	r2, #11
 800182a:	701a      	strb	r2, [r3, #0]
			break;
 800182c:	e1c5      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 800182e:	4b62      	ldr	r3, [pc, #392]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001830:	785a      	ldrb	r2, [r3, #1]
 8001832:	4b62      	ldr	r3, [pc, #392]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001834:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
			BNO_ErrorHandler = ReadSucces;
 8001838:	4b61      	ldr	r3, [pc, #388]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 800183a:	220b      	movs	r2, #11
 800183c:	701a      	strb	r2, [r3, #0]
			break;
 800183e:	e1bc      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8001840:	4b5d      	ldr	r3, [pc, #372]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001842:	785a      	ldrb	r2, [r3, #1]
 8001844:	4b5d      	ldr	r3, [pc, #372]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001846:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
			BNO_ErrorHandler = ReadSucces;
 800184a:	4b5d      	ldr	r3, [pc, #372]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 800184c:	220b      	movs	r2, #11
 800184e:	701a      	strb	r2, [r3, #0]
			break;
 8001850:	e1b3      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 8001852:	4b59      	ldr	r3, [pc, #356]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001854:	785a      	ldrb	r2, [r3, #1]
 8001856:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001858:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 800185c:	4b56      	ldr	r3, [pc, #344]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b55      	ldr	r3, [pc, #340]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001866:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 800186a:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800187a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 800187e:	4b4e      	ldr	r3, [pc, #312]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b4b      	ldr	r3, [pc, #300]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800188e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 8001892:	4b49      	ldr	r3, [pc, #292]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800189e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			BNO_ErrorHandler = ReadSucces;
 80018a2:	4b47      	ldr	r3, [pc, #284]	@ (80019c0 <BNO_Page0Adress+0x2a8>)
 80018a4:	220b      	movs	r2, #11
 80018a6:	701a      	strb	r2, [r3, #0]
			break;
 80018a8:	e187      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 80018aa:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018ac:	789b      	ldrb	r3, [r3, #2]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018b4:	785b      	ldrb	r3, [r3, #1]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	4b3f      	ldr	r3, [pc, #252]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018be:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 80018c2:	4b3d      	ldr	r3, [pc, #244]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	4b3b      	ldr	r3, [pc, #236]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018cc:	78db      	ldrb	r3, [r3, #3]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018d6:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 80018da:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018dc:	799b      	ldrb	r3, [r3, #6]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	4b35      	ldr	r3, [pc, #212]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018e4:	795b      	ldrb	r3, [r3, #5]
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	4b33      	ldr	r3, [pc, #204]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80018ee:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 80018f2:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018f4:	7a1b      	ldrb	r3, [r3, #8]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80018fc:	79db      	ldrb	r3, [r3, #7]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	4313      	orrs	r3, r2
 8001902:	b21a      	sxth	r2, r3
 8001904:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001906:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 800190a:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800190c:	7a9b      	ldrb	r3, [r3, #10]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21a      	sxth	r2, r3
 8001912:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001914:	7a5b      	ldrb	r3, [r3, #9]
 8001916:	b21b      	sxth	r3, r3
 8001918:	4313      	orrs	r3, r2
 800191a:	b21a      	sxth	r2, r3
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800191e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 8001922:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001924:	7b1b      	ldrb	r3, [r3, #12]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b21a      	sxth	r2, r3
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800192c:	7adb      	ldrb	r3, [r3, #11]
 800192e:	b21b      	sxth	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b21a      	sxth	r2, r3
 8001934:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001936:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 800193a:	4b1f      	ldr	r3, [pc, #124]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800193c:	7b9b      	ldrb	r3, [r3, #14]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21a      	sxth	r2, r3
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001944:	7b5b      	ldrb	r3, [r3, #13]
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b21a      	sxth	r2, r3
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800194e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001954:	7c1b      	ldrb	r3, [r3, #16]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21a      	sxth	r2, r3
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800195c:	7bdb      	ldrb	r3, [r3, #15]
 800195e:	b21b      	sxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001966:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 800196a:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800196c:	7c9b      	ldrb	r3, [r3, #18]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21a      	sxth	r2, r3
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001974:	7c5b      	ldrb	r3, [r3, #17]
 8001976:	b21b      	sxth	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	b21a      	sxth	r2, r3
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 800197e:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 8001982:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 8001984:	7d1b      	ldrb	r3, [r3, #20]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b21a      	sxth	r2, r3
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800198c:	7cdb      	ldrb	r3, [r3, #19]
 800198e:	b21b      	sxth	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b21b      	sxth	r3, r3
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 8001998:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 800199e:	7d9b      	ldrb	r3, [r3, #22]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <BNO_Page0Adress+0x2a0>)
 80019a6:	7d5b      	ldrb	r3, [r3, #21]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b02      	ldr	r3, [pc, #8]	@ (80019bc <BNO_Page0Adress+0x2a4>)
 80019b2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			break;
 80019b6:	e100      	b.n	8001bba <BNO_Page0Adress+0x4a2>
 80019b8:	24000304 	.word	0x24000304
 80019bc:	24000410 	.word	0x24000410
 80019c0:	24000405 	.word	0x24000405
			IMU.ACC.x = ((double)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 80019c4:	4b82      	ldr	r3, [pc, #520]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019c6:	789b      	ldrb	r3, [r3, #2]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b21a      	sxth	r2, r3
 80019cc:	4b80      	ldr	r3, [pc, #512]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	b21b      	sxth	r3, r3
 80019d2:	4313      	orrs	r3, r2
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019de:	ed9f 5b7a 	vldr	d5, [pc, #488]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 80019e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019e6:	4b7b      	ldr	r3, [pc, #492]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 80019e8:	ed83 7b04 	vstr	d7, [r3, #16]
			IMU.ACC.y = ((double)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 80019ec:	4b78      	ldr	r3, [pc, #480]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	4b76      	ldr	r3, [pc, #472]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 80019f6:	78db      	ldrb	r3, [r3, #3]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4313      	orrs	r3, r2
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a06:	ed9f 5b70 	vldr	d5, [pc, #448]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 8001a0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a0e:	4b71      	ldr	r3, [pc, #452]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a10:	ed83 7b06 	vstr	d7, [r3, #24]
			IMU.ACC.z = ((double)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 8001a14:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a16:	799b      	ldrb	r3, [r3, #6]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b21a      	sxth	r2, r3
 8001a1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a1e:	795b      	ldrb	r3, [r3, #5]
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8001bc8 <BNO_Page0Adress+0x4b0>
 8001a32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a36:	4b67      	ldr	r3, [pc, #412]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a38:	ed83 7b08 	vstr	d7, [r3, #32]
			IMU.MAG.x = ((double)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8001a3c:	4b64      	ldr	r3, [pc, #400]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a3e:	7a1b      	ldrb	r3, [r3, #8]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	4b62      	ldr	r3, [pc, #392]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a46:	79db      	ldrb	r3, [r3, #7]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a56:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001a5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a60:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
			IMU.MAG.y = ((double)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8001a64:	4b5a      	ldr	r3, [pc, #360]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a66:	7a9b      	ldrb	r3, [r3, #10]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	4b58      	ldr	r3, [pc, #352]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a6e:	7a5b      	ldrb	r3, [r3, #9]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a7e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001a82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a86:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001a88:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
			IMU.MAG.z = ((double)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8001a8c:	4b50      	ldr	r3, [pc, #320]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a8e:	7b1b      	ldrb	r3, [r3, #12]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001a96:	7adb      	ldrb	r3, [r3, #11]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001aa6:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001aaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aae:	4b49      	ldr	r3, [pc, #292]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ab0:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
			IMU.GYR.x = ((double)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8001ab4:	4b46      	ldr	r3, [pc, #280]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ab6:	7b9b      	ldrb	r3, [r3, #14]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	4b44      	ldr	r3, [pc, #272]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001abe:	7b5b      	ldrb	r3, [r3, #13]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ace:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001ad2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ad8:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
			IMU.GYR.y = -((double)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8001adc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ade:	7c1b      	ldrb	r3, [r3, #16]
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001ae6:	7bdb      	ldrb	r3, [r3, #15]
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001af6:	eeb1 6b47 	vneg.f64	d6, d7
 8001afa:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001afe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b02:	4b34      	ldr	r3, [pc, #208]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b04:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
			IMU.GYR.z = -((double)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8001b08:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b0a:	7c9b      	ldrb	r3, [r3, #18]
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b12:	7c5b      	ldrb	r3, [r3, #17]
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b22:	eeb1 6b47 	vneg.f64	d6, d7
 8001b26:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b2e:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b30:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
			IMU.Heading = ((double)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 8001b34:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b36:	7d1b      	ldrb	r3, [r3, #20]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b3e:	7cdb      	ldrb	r3, [r3, #19]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b4e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b56:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b58:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
			IMU.Pitch = ((double)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b5e:	7d9b      	ldrb	r3, [r3, #22]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b66:	7d5b      	ldrb	r3, [r3, #21]
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b76:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001b80:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
			IMU.Roll = ((double)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <BNO_Page0Adress+0x4b8>)
 8001b8e:	7ddb      	ldrb	r3, [r3, #23]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b9e:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001ba2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <BNO_Page0Adress+0x4bc>)
 8001ba8:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78
			BNO_ErrorHandler = ReadSucces;
 8001bac:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <BNO_Page0Adress+0x4c0>)
 8001bae:	220b      	movs	r2, #11
 8001bb0:	701a      	strb	r2, [r3, #0]
			break;
 8001bb2:	e002      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			break;
 8001bb4:	bf00      	nop
 8001bb6:	e000      	b.n	8001bba <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8001bb8:	bf00      	nop
	}
}
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40590000 	.word	0x40590000
 8001bd0:	24000304 	.word	0x24000304
 8001bd4:	24000410 	.word	0x24000410
 8001bd8:	24000405 	.word	0x24000405

08001bdc <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <BNO_Page1Adress+0x2c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d108      	bne.n	8001bfa <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 8001be8:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <BNO_Page1Adress+0x2c>)
 8001bea:	785a      	ldrb	r2, [r3, #1]
 8001bec:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <BNO_Page1Adress+0x30>)
 8001bee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			BNO_ErrorHandler = ReadSucces;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <BNO_Page1Adress+0x34>)
 8001bf4:	220b      	movs	r2, #11
 8001bf6:	701a      	strb	r2, [r3, #0]
			break;
 8001bf8:	e000      	b.n	8001bfc <BNO_Page1Adress+0x20>

		default:
			break;
 8001bfa:	bf00      	nop
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	24000304 	.word	0x24000304
 8001c0c:	24000410 	.word	0x24000410
 8001c10:	24000405 	.word	0x24000405

08001c14 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <BNO_EmptyingBuffer+0x30>)
 8001c1a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <BNO_EmptyingBuffer+0x14>
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d003      	beq.n	8001c2e <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 8001c26:	e005      	b.n	8001c34 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 8001c28:	f7ff fd76 	bl	8001718 <BNO_Page0Adress>
			break;
 8001c2c:	e002      	b.n	8001c34 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 8001c2e:	f7ff ffd5 	bl	8001bdc <BNO_Page1Adress>
			break;
 8001c32:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001c34:	22ff      	movs	r2, #255	@ 0xff
 8001c36:	2100      	movs	r1, #0
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <BNO_EmptyingBuffer+0x34>)
 8001c3a:	f014 fd60 	bl	80166fe <memset>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	24000410 	.word	0x24000410
 8001c48:	24000304 	.word	0x24000304

08001c4c <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 8001c50:	2120      	movs	r1, #32
 8001c52:	203f      	movs	r0, #63	@ 0x3f
 8001c54:	f7ff fcca 	bl	80015ec <BNO_Write>
	bno055_delay(70);
 8001c58:	2046      	movs	r0, #70	@ 0x46
 8001c5a:	f7ff fc8d 	bl	8001578 <bno055_delay>
	IMU.ID = 0x00;
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <BNO_SWReset+0x24>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <BNO_SWReset+0x28>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	24000410 	.word	0x24000410
 8001c74:	24000408 	.word	0x24000408

08001c78 <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	4619      	mov	r1, r3
 8001c86:	203d      	movs	r0, #61	@ 0x3d
 8001c88:	f7ff fcb0 	bl	80015ec <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <bno055_setOperationMode+0x22>
    bno055_delay(5);
 8001c92:	2005      	movs	r0, #5
 8001c94:	f7ff fc70 	bl	8001578 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8001c98:	e002      	b.n	8001ca0 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f7ff fc6c 	bl	8001578 <bno055_delay>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff ffe3 	bl	8001c78 <bno055_setOperationMode>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001cba:	200c      	movs	r0, #12
 8001cbc:	f7ff ffdc 	bl	8001c78 <bno055_setOperationMode>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8001cc8:	2116      	movs	r1, #22
 8001cca:	2055      	movs	r0, #85	@ 0x55
 8001ccc:	f7ff fc68 	bl	80015a0 <BNO_Read>
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2206      	movs	r2, #6
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4814      	ldr	r0, [pc, #80]	@ (8001d34 <BNO_SetCalibrationData+0x60>)
 8001ce2:	f014 fda6 	bl	8016832 <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	3306      	adds	r3, #6
 8001cea:	2206      	movs	r2, #6
 8001cec:	4619      	mov	r1, r3
 8001cee:	4812      	ldr	r0, [pc, #72]	@ (8001d38 <BNO_SetCalibrationData+0x64>)
 8001cf0:	f014 fd9f 	bl	8016832 <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	330c      	adds	r3, #12
 8001cf8:	2206      	movs	r2, #6
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480f      	ldr	r0, [pc, #60]	@ (8001d3c <BNO_SetCalibrationData+0x68>)
 8001cfe:	f014 fd98 	bl	8016832 <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 8001d02:	463b      	mov	r3, r7
 8001d04:	3312      	adds	r3, #18
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <BNO_SetCalibrationData+0x6c>)
 8001d0c:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8001d10:	463b      	mov	r3, r7
 8001d12:	3314      	adds	r3, #20
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <BNO_SetCalibrationData+0x6c>)
 8001d1a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8001d1e:	463b      	mov	r3, r7
 8001d20:	461a      	mov	r2, r3
 8001d22:	2116      	movs	r1, #22
 8001d24:	2055      	movs	r0, #85	@ 0x55
 8001d26:	f7ff fc83 	bl	8001630 <BNO_Write_MB>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	240004a6 	.word	0x240004a6
 8001d38:	240004a0 	.word	0x240004a0
 8001d3c:	2400049a 	.word	0x2400049a
 8001d40:	24000410 	.word	0x24000410

08001d44 <BNO_Init>:

void BNO_Init(void){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <BNO_Init+0x2c>)
 8001d4e:	f007 fa3f 	bl	80091d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d58:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <BNO_Init+0x30>)
 8001d5a:	f007 fa39 	bl	80091d0 <HAL_GPIO_WritePin>

	bno055_delay(100);
 8001d5e:	2064      	movs	r0, #100	@ 0x64
 8001d60:	f7ff fc0a 	bl	8001578 <bno055_delay>

	BNO_CurrentState = Reset;
 8001d64:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <BNO_Init+0x34>)
 8001d66:	2204      	movs	r2, #4
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	58020c00 	.word	0x58020c00
 8001d74:	58020400 	.word	0x58020400
 8001d78:	24000408 	.word	0x24000408

08001d7c <BNO_Config>:

void BNO_Config(void){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8001d80:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <BNO_Config+0x88>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d839      	bhi.n	8001dfc <BNO_Config+0x80>
 8001d88:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <BNO_Config+0x14>)
 8001d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8e:	bf00      	nop
 8001d90:	08001da1 	.word	0x08001da1
 8001d94:	08001db1 	.word	0x08001db1
 8001d98:	08001dbd 	.word	0x08001dbd
 8001d9c:	08001ddf 	.word	0x08001ddf
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001da0:	2100      	movs	r1, #0
 8001da2:	203f      	movs	r0, #63	@ 0x3f
 8001da4:	f7ff fc22 	bl	80015ec <BNO_Write>
			ConfigFlag = 1;
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <BNO_Config+0x88>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
			break;
 8001dae:	e026      	b.n	8001dfe <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8001db0:	f7ff ff7a 	bl	8001ca8 <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <BNO_Config+0x88>)
 8001db6:	2202      	movs	r2, #2
 8001db8:	701a      	strb	r2, [r3, #0]
			break;
 8001dba:	e020      	b.n	8001dfe <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	203d      	movs	r0, #61	@ 0x3d
 8001dc0:	f7ff fbee 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <BNO_Config+0x8c>)
 8001dc6:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <BNO_Config+0x5a>
				ConfigFlag = 3;
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <BNO_Config+0x88>)
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8001dd4:	e013      	b.n	8001dfe <BNO_Config+0x82>
			else ConfigFlag = 1;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <BNO_Config+0x88>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
			break;
 8001ddc:	e00f      	b.n	8001dfe <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8001dde:	2104      	movs	r1, #4
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff fbdd 	bl	80015a0 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <BNO_Config+0x8c>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dec:	d102      	bne.n	8001df4 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <BNO_Config+0x90>)
 8001df0:	2202      	movs	r2, #2
 8001df2:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8001df4:	4b03      	ldr	r3, [pc, #12]	@ (8001e04 <BNO_Config+0x88>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
			break;
 8001dfa:	e000      	b.n	8001dfe <BNO_Config+0x82>
		default:
			break;
 8001dfc:	bf00      	nop
	}

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	240004b0 	.word	0x240004b0
 8001e08:	24000410 	.word	0x24000410
 8001e0c:	24000408 	.word	0x24000408

08001e10 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 8001e14:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b07      	cmp	r3, #7
 8001e1a:	d870      	bhi.n	8001efe <BNO_CalibrationStatus+0xee>
 8001e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e24 <BNO_CalibrationStatus+0x14>)
 8001e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e22:	bf00      	nop
 8001e24:	08001e45 	.word	0x08001e45
 8001e28:	08001e55 	.word	0x08001e55
 8001e2c:	08001e61 	.word	0x08001e61
 8001e30:	08001e99 	.word	0x08001e99
 8001e34:	08001eb3 	.word	0x08001eb3
 8001e38:	08001ebf 	.word	0x08001ebf
 8001e3c:	08001ee1 	.word	0x08001ee1
 8001e40:	08001ef3 	.word	0x08001ef3
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8001e44:	2100      	movs	r1, #0
 8001e46:	203f      	movs	r0, #63	@ 0x3f
 8001e48:	f7ff fbd0 	bl	80015ec <BNO_Write>
			CalibrationFlag = 1;
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
			break;
 8001e52:	e059      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8001e54:	f7ff ff2f 	bl	8001cb6 <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 8001e58:	4b2c      	ldr	r3, [pc, #176]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	701a      	strb	r2, [r3, #0]
			break;
 8001e5e:	e053      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001e60:	2101      	movs	r1, #1
 8001e62:	203d      	movs	r0, #61	@ 0x3d
 8001e64:	f7ff fb9c 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001e6a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d10e      	bne.n	8001e90 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <BNO_CalibrationStatus+0x104>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <BNO_CalibrationStatus+0x108>)
 8001e82:	2203      	movs	r2, #3
 8001e84:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8001e86:	e03f      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8001e88:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	701a      	strb	r2, [r3, #0]
			break;
 8001e8e:	e03b      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8001e90:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
			break;
 8001e96:	e037      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8001e98:	2101      	movs	r1, #1
 8001e9a:	2035      	movs	r0, #53	@ 0x35
 8001e9c:	f7ff fb80 	bl	80015a0 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001ea2:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001ea6:	2bff      	cmp	r3, #255	@ 0xff
 8001ea8:	d12d      	bne.n	8001f06 <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eac:	2204      	movs	r2, #4
 8001eae:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001eb0:	e029      	b.n	8001f06 <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8001eb2:	f7ff fef9 	bl	8001ca8 <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eb8:	2205      	movs	r2, #5
 8001eba:	701a      	strb	r2, [r3, #0]
			break;
 8001ebc:	e024      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	203d      	movs	r0, #61	@ 0x3d
 8001ec2:	f7ff fb6d 	bl	80015a0 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <BNO_CalibrationStatus+0x100>)
 8001ec8:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001ed2:	2206      	movs	r2, #6
 8001ed4:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8001ed6:	e017      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eda:	2204      	movs	r2, #4
 8001edc:	701a      	strb	r2, [r3, #0]
			break;
 8001ede:	e013      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8001ee0:	f7ff fef0 	bl	8001cc4 <BNO_GetCalibrationData>
			Calibrated = 1;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <BNO_CalibrationStatus+0x104>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
			break;
 8001ef0:	e00a      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8001ef2:	f7ff feef 	bl	8001cd4 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8001ef6:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
			break;
 8001efc:	e004      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8001efe:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <BNO_CalibrationStatus+0xfc>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
			break;
 8001f04:	e000      	b.n	8001f08 <BNO_CalibrationStatus+0xf8>
			break;
 8001f06:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	240004b1 	.word	0x240004b1
 8001f10:	24000410 	.word	0x24000410
 8001f14:	24000000 	.word	0x24000000
 8001f18:	24000408 	.word	0x24000408

08001f1c <BNO_GetData>:

void BNO_GetData(void){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8001f20:	2118      	movs	r1, #24
 8001f22:	2008      	movs	r0, #8
 8001f24:	f7ff fb3c 	bl	80015a0 <BNO_Read>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8001f36:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe8 <BNO_Receive+0xbc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <BNO_Receive+0xc0>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2bff      	cmp	r3, #255	@ 0xff
 8001f42:	d027      	beq.n	8001f94 <BNO_Receive+0x68>
 8001f44:	2bff      	cmp	r3, #255	@ 0xff
 8001f46:	dc46      	bgt.n	8001fd6 <BNO_Receive+0xaa>
 8001f48:	2bee      	cmp	r3, #238	@ 0xee
 8001f4a:	d017      	beq.n	8001f7c <BNO_Receive+0x50>
 8001f4c:	2bee      	cmp	r3, #238	@ 0xee
 8001f4e:	dc42      	bgt.n	8001fd6 <BNO_Receive+0xaa>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <BNO_Receive+0x2e>
 8001f54:	2bbb      	cmp	r3, #187	@ 0xbb
 8001f56:	d00a      	beq.n	8001f6e <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8001f58:	e03d      	b.n	8001fd6 <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2bbb      	cmp	r3, #187	@ 0xbb
 8001f5e:	d002      	beq.n	8001f66 <BNO_Receive+0x3a>
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	2bee      	cmp	r3, #238	@ 0xee
 8001f64:	d139      	bne.n	8001fda <BNO_Receive+0xae>
 8001f66:	4a21      	ldr	r2, [pc, #132]	@ (8001fec <BNO_Receive+0xc0>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	7013      	strb	r3, [r2, #0]
			break;
 8001f6c:	e035      	b.n	8001fda <BNO_Receive+0xae>
			MsgSize = Buffer;
 8001f6e:	4a20      	ldr	r2, [pc, #128]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <BNO_Receive+0xc0>)
 8001f76:	22ff      	movs	r2, #255	@ 0xff
 8001f78:	701a      	strb	r2, [r3, #0]
			break;
 8001f7a:	e031      	b.n	8001fe0 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <BNO_Receive+0xc8>)
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <BNO_Receive+0xc0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8001f88:	22ff      	movs	r2, #255	@ 0xff
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	481a      	ldr	r0, [pc, #104]	@ (8001ff8 <BNO_Receive+0xcc>)
 8001f8e:	f014 fbb6 	bl	80166fe <memset>
			break;
 8001f92:	e025      	b.n	8001fe0 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <BNO_Receive+0xd0>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4917      	ldr	r1, [pc, #92]	@ (8001ff8 <BNO_Receive+0xcc>)
 8001f9c:	79fa      	ldrb	r2, [r7, #7]
 8001f9e:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <BNO_Receive+0xd0>)
 8001faa:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d112      	bne.n	8001fde <BNO_Receive+0xb2>
				Counter = 0;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <BNO_Receive+0xd0>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <BNO_Receive+0xc4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <BNO_Receive+0xc0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <BNO_Receive+0xc8>)
 8001fcc:	220b      	movs	r2, #11
 8001fce:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8001fd0:	f7ff fe20 	bl	8001c14 <BNO_EmptyingBuffer>
			break;
 8001fd4:	e003      	b.n	8001fde <BNO_Receive+0xb2>
			break;
 8001fd6:	bf00      	nop
 8001fd8:	e002      	b.n	8001fe0 <BNO_Receive+0xb4>
			break;
 8001fda:	bf00      	nop
 8001fdc:	e000      	b.n	8001fe0 <BNO_Receive+0xb4>
			break;
 8001fde:	bf00      	nop
	}
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24000406 	.word	0x24000406
 8001fec:	24000404 	.word	0x24000404
 8001ff0:	240004b2 	.word	0x240004b2
 8001ff4:	24000405 	.word	0x24000405
 8001ff8:	24000304 	.word	0x24000304
 8001ffc:	240004b3 	.word	0x240004b3

08002000 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <BNO_FaultManager+0x38>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d912      	bls.n	8002032 <BNO_FaultManager+0x32>
		Reset_UART(&huart3);
 800200c:	480b      	ldr	r0, [pc, #44]	@ (800203c <BNO_FaultManager+0x3c>)
 800200e:	f003 fa65 	bl	80054dc <Reset_UART>
		BNO_ComsCounter = 0;
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <BNO_FaultManager+0x38>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
		BNO_Rx_Status = AwaitingMsg;
 8002018:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <BNO_FaultManager+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800201e:	2201      	movs	r2, #1
 8002020:	4908      	ldr	r1, [pc, #32]	@ (8002044 <BNO_FaultManager+0x44>)
 8002022:	4806      	ldr	r0, [pc, #24]	@ (800203c <BNO_FaultManager+0x3c>)
 8002024:	f00c fb46 	bl	800e6b4 <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8002028:	22ff      	movs	r2, #255	@ 0xff
 800202a:	2100      	movs	r1, #0
 800202c:	4806      	ldr	r0, [pc, #24]	@ (8002048 <BNO_FaultManager+0x48>)
 800202e:	f014 fb66 	bl	80166fe <memset>
	}
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	24000406 	.word	0x24000406
 800203c:	240051fc 	.word	0x240051fc
 8002040:	24000404 	.word	0x24000404
 8002044:	24000403 	.word	0x24000403
 8002048:	24000304 	.word	0x24000304

0800204c <BNO_Tasks>:

void BNO_Tasks(void){
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8002050:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <BNO_Tasks+0x74>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d128      	bne.n	80020aa <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8002058:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <BNO_Tasks+0x78>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d81c      	bhi.n	800209a <BNO_Tasks+0x4e>
 8002060:	a201      	add	r2, pc, #4	@ (adr r2, 8002068 <BNO_Tasks+0x1c>)
 8002062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002066:	bf00      	nop
 8002068:	0800207d 	.word	0x0800207d
 800206c:	08002089 	.word	0x08002089
 8002070:	0800208f 	.word	0x0800208f
 8002074:	08002095 	.word	0x08002095
 8002078:	08002083 	.word	0x08002083
			case Init:
				BNO_Init();
 800207c:	f7ff fe62 	bl	8001d44 <BNO_Init>
				break;
 8002080:	e00c      	b.n	800209c <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8002082:	f7ff fde3 	bl	8001c4c <BNO_SWReset>
			break;
 8002086:	e009      	b.n	800209c <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8002088:	f7ff fe78 	bl	8001d7c <BNO_Config>
				break;
 800208c:	e006      	b.n	800209c <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 800208e:	f7ff febf 	bl	8001e10 <BNO_CalibrationStatus>
				break;
 8002092:	e003      	b.n	800209c <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8002094:	f7ff ff42 	bl	8001f1c <BNO_GetData>
				break;
 8002098:	e000      	b.n	800209c <BNO_Tasks+0x50>

			default:
				break;
 800209a:	bf00      	nop
		}
		++BNO_ComsCounter;
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <BNO_Tasks+0x7c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <BNO_Tasks+0x7c>)
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e005      	b.n	80020b6 <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 80020aa:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <BNO_Tasks+0x74>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <BNO_Tasks+0x74>)
 80020b4:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 80020b6:	f7ff ffa3 	bl	8002000 <BNO_FaultManager>
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	24000407 	.word	0x24000407
 80020c4:	24000408 	.word	0x24000408
 80020c8:	24000406 	.word	0x24000406

080020cc <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80020cc:	b084      	sub	sp, #16
 80020ce:	b590      	push	{r4, r7, lr}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	f107 001c 	add.w	r0, r7, #28
 80020da:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80020de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <LED_blink+0x20>
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d010      	beq.n	800210c <LED_blink+0x40>
 80020ea:	e01f      	b.n	800212c <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 80020ec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80020ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d31f      	bcc.n	8002134 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	8c39      	ldrh	r1, [r7, #32]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f007 f868 	bl	80091d0 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800210a:	e013      	b.n	8002134 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 800210c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800210e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002110:	429a      	cmp	r2, r3
 8002112:	d311      	bcc.n	8002138 <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	8c39      	ldrh	r1, [r7, #32]
 8002118:	2200      	movs	r2, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f007 f858 	bl	80091d0 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 800212a:	e005      	b.n	8002138 <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8002132:	e002      	b.n	800213a <LED_blink+0x6e>
				break;
 8002134:	bf00      	nop
 8002136:	e000      	b.n	800213a <LED_blink+0x6e>
				break;
 8002138:	bf00      	nop
		}

	LED.count++;
 800213a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800213c:	3301      	adds	r3, #1
 800213e:	b29b      	uxth	r3, r3
 8002140:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	461c      	mov	r4, r3
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800214c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800215a:	b004      	add	sp, #16
 800215c:	4770      	bx	lr

0800215e <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 800215e:	b084      	sub	sp, #16
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b085      	sub	sp, #20
 8002164:	af02      	add	r7, sp, #8
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	f107 001c 	add.w	r0, r7, #28
 800216c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8002170:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002174:	2b01      	cmp	r3, #1
 8002176:	d117      	bne.n	80021a8 <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8002178:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <LED_Rutine+0x28>
 8002180:	2b01      	cmp	r3, #1
 8002182:	d007      	beq.n	8002194 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8002184:	e018      	b.n	80021b8 <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	8c39      	ldrh	r1, [r7, #32]
 800218a:	2201      	movs	r2, #1
 800218c:	4618      	mov	r0, r3
 800218e:	f007 f81f 	bl	80091d0 <HAL_GPIO_WritePin>
				break;
 8002192:	e011      	b.n	80021b8 <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8002194:	f107 001c 	add.w	r0, r7, #28
 8002198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a2:	f7ff ff93 	bl	80020cc <LED_blink>
				break;
 80021a6:	e007      	b.n	80021b8 <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	8c39      	ldrh	r1, [r7, #32]
 80021ac:	2200      	movs	r2, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f007 f80e 	bl	80091d0 <HAL_GPIO_WritePin>
		LED.count = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	461c      	mov	r4, r3
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021d0:	b004      	add	sp, #16
 80021d2:	4770      	bx	lr

080021d4 <LED_Tasks>:

void LED_Tasks (void){
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 80021da:	4c24      	ldr	r4, [pc, #144]	@ (800226c <LED_Tasks+0x98>)
 80021dc:	4638      	mov	r0, r7
 80021de:	4b23      	ldr	r3, [pc, #140]	@ (800226c <LED_Tasks+0x98>)
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e6:	f7ff ffba 	bl	800215e <LED_Rutine>
 80021ea:	463b      	mov	r3, r7
 80021ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 80021f2:	4c1e      	ldr	r4, [pc, #120]	@ (800226c <LED_Tasks+0x98>)
 80021f4:	4638      	mov	r0, r7
 80021f6:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <LED_Tasks+0x98>)
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	9200      	str	r2, [sp, #0]
 80021fc:	3310      	adds	r3, #16
 80021fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002200:	f7ff ffad 	bl	800215e <LED_Rutine>
 8002204:	3410      	adds	r4, #16
 8002206:	463b      	mov	r3, r7
 8002208:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800220a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 800220e:	4c17      	ldr	r4, [pc, #92]	@ (800226c <LED_Tasks+0x98>)
 8002210:	4638      	mov	r0, r7
 8002212:	4b16      	ldr	r3, [pc, #88]	@ (800226c <LED_Tasks+0x98>)
 8002214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002216:	9200      	str	r2, [sp, #0]
 8002218:	3320      	adds	r3, #32
 800221a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800221c:	f7ff ff9f 	bl	800215e <LED_Rutine>
 8002220:	3420      	adds	r4, #32
 8002222:	463b      	mov	r3, r7
 8002224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 800222a:	4c10      	ldr	r4, [pc, #64]	@ (800226c <LED_Tasks+0x98>)
 800222c:	4638      	mov	r0, r7
 800222e:	4b0f      	ldr	r3, [pc, #60]	@ (800226c <LED_Tasks+0x98>)
 8002230:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002232:	9200      	str	r2, [sp, #0]
 8002234:	3330      	adds	r3, #48	@ 0x30
 8002236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002238:	f7ff ff91 	bl	800215e <LED_Rutine>
 800223c:	3430      	adds	r4, #48	@ 0x30
 800223e:	463b      	mov	r3, r7
 8002240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8002246:	4c09      	ldr	r4, [pc, #36]	@ (800226c <LED_Tasks+0x98>)
 8002248:	4638      	mov	r0, r7
 800224a:	4b08      	ldr	r3, [pc, #32]	@ (800226c <LED_Tasks+0x98>)
 800224c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800224e:	9200      	str	r2, [sp, #0]
 8002250:	3340      	adds	r3, #64	@ 0x40
 8002252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002254:	f7ff ff83 	bl	800215e <LED_Rutine>
 8002258:	3440      	adds	r4, #64	@ 0x40
 800225a:	463b      	mov	r3, r7
 800225c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800225e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bd90      	pop	{r4, r7, pc}
 800226a:	bf00      	nop
 800226c:	24000004 	.word	0x24000004

08002270 <PWM_Assing>:
		.Canal_8  = 1500,
		.Canal_9  = 1500,
		.Canal_10 = 1500,
};

void PWM_Assing(void){
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	TIM2->CCR1 = PWM_Output.Canal_1;
 8002274:	4b2a      	ldr	r3, [pc, #168]	@ (8002320 <PWM_Assing+0xb0>)
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800227c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = PWM_Output.Canal_2;
 800227e:	4b28      	ldr	r3, [pc, #160]	@ (8002320 <PWM_Assing+0xb0>)
 8002280:	885a      	ldrh	r2, [r3, #2]
 8002282:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002286:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM3->CCR1 = PWM_Output.Canal_3;
 8002288:	4b25      	ldr	r3, [pc, #148]	@ (8002320 <PWM_Assing+0xb0>)
 800228a:	889a      	ldrh	r2, [r3, #4]
 800228c:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <PWM_Assing+0xb4>)
 800228e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = PWM_Output.Canal_4;
 8002290:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <PWM_Assing+0xb0>)
 8002292:	88da      	ldrh	r2, [r3, #6]
 8002294:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <PWM_Assing+0xb4>)
 8002296:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM4->CCR1 = PWM_Output.Canal_5;
 8002298:	4b21      	ldr	r3, [pc, #132]	@ (8002320 <PWM_Assing+0xb0>)
 800229a:	891a      	ldrh	r2, [r3, #8]
 800229c:	4b22      	ldr	r3, [pc, #136]	@ (8002328 <PWM_Assing+0xb8>)
 800229e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = PWM_Output.Canal_6;
 80022a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002320 <PWM_Assing+0xb0>)
 80022a2:	895a      	ldrh	r2, [r3, #10]
 80022a4:	4b20      	ldr	r3, [pc, #128]	@ (8002328 <PWM_Assing+0xb8>)
 80022a6:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM4->CCR3 = PWM_Output.Canal_7;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <PWM_Assing+0xb0>)
 80022aa:	899a      	ldrh	r2, [r3, #12]
 80022ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <PWM_Assing+0xb8>)
 80022ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM4->CCR4 = PWM_Output.Canal_8;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <PWM_Assing+0xb0>)
 80022b2:	89da      	ldrh	r2, [r3, #14]
 80022b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002328 <PWM_Assing+0xb8>)
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM2->CCR4 = PWM_Output.Canal_9;
 80022b8:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <PWM_Assing+0xb0>)
 80022ba:	8a1a      	ldrh	r2, [r3, #16]
 80022bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022c0:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM2->CCR3 = PWM_Output.Canal_10;
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <PWM_Assing+0xb0>)
 80022c4:	8a5a      	ldrh	r2, [r3, #18]
 80022c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022ca:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80022cc:	2100      	movs	r1, #0
 80022ce:	4817      	ldr	r0, [pc, #92]	@ (800232c <PWM_Assing+0xbc>)
 80022d0:	f00b f972 	bl	800d5b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80022d4:	2104      	movs	r1, #4
 80022d6:	4815      	ldr	r0, [pc, #84]	@ (800232c <PWM_Assing+0xbc>)
 80022d8:	f00b f96e 	bl	800d5b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80022dc:	2108      	movs	r1, #8
 80022de:	4813      	ldr	r0, [pc, #76]	@ (800232c <PWM_Assing+0xbc>)
 80022e0:	f00b f96a 	bl	800d5b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80022e4:	210c      	movs	r1, #12
 80022e6:	4811      	ldr	r0, [pc, #68]	@ (800232c <PWM_Assing+0xbc>)
 80022e8:	f00b f966 	bl	800d5b8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80022ec:	2100      	movs	r1, #0
 80022ee:	4810      	ldr	r0, [pc, #64]	@ (8002330 <PWM_Assing+0xc0>)
 80022f0:	f00b f962 	bl	800d5b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80022f4:	2104      	movs	r1, #4
 80022f6:	480e      	ldr	r0, [pc, #56]	@ (8002330 <PWM_Assing+0xc0>)
 80022f8:	f00b f95e 	bl	800d5b8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80022fc:	2100      	movs	r1, #0
 80022fe:	480d      	ldr	r0, [pc, #52]	@ (8002334 <PWM_Assing+0xc4>)
 8002300:	f00b f95a 	bl	800d5b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002304:	2104      	movs	r1, #4
 8002306:	480b      	ldr	r0, [pc, #44]	@ (8002334 <PWM_Assing+0xc4>)
 8002308:	f00b f956 	bl	800d5b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800230c:	2108      	movs	r1, #8
 800230e:	4809      	ldr	r0, [pc, #36]	@ (8002334 <PWM_Assing+0xc4>)
 8002310:	f00b f952 	bl	800d5b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002314:	210c      	movs	r1, #12
 8002316:	4807      	ldr	r0, [pc, #28]	@ (8002334 <PWM_Assing+0xc4>)
 8002318:	f00b f94e 	bl	800d5b8 <HAL_TIM_PWM_Start>
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	24000054 	.word	0x24000054
 8002324:	40000400 	.word	0x40000400
 8002328:	40000800 	.word	0x40000800
 800232c:	24004f0c 	.word	0x24004f0c
 8002330:	24004f58 	.word	0x24004f58
 8002334:	24004fa4 	.word	0x24004fa4

08002338 <SBUS_Receive>:
void SBUS_init(void){
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);

}

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 8002342:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <SBUS_Receive+0x8c>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <SBUS_Receive+0x18>
 800234a:	2b01      	cmp	r3, #1
 800234c:	d017      	beq.n	800237e <SBUS_Receive+0x46>
 800234e:	e02f      	b.n	80023b0 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	2b0f      	cmp	r3, #15
 8002354:	d10f      	bne.n	8002376 <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8002356:	4b1c      	ldr	r3, [pc, #112]	@ (80023c8 <SBUS_Receive+0x90>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <SBUS_Receive+0x94>)
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8002362:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <SBUS_Receive+0x8c>)
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8002368:	4b17      	ldr	r3, [pc, #92]	@ (80023c8 <SBUS_Receive+0x90>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <SBUS_Receive+0x90>)
 8002372:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8002374:	e021      	b.n	80023ba <SBUS_Receive+0x82>
				RxCount = 0;
 8002376:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <SBUS_Receive+0x90>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
			break;
 800237c:	e01d      	b.n	80023ba <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 800237e:	4b12      	ldr	r3, [pc, #72]	@ (80023c8 <SBUS_Receive+0x90>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	4619      	mov	r1, r3
 8002384:	4a11      	ldr	r2, [pc, #68]	@ (80023cc <SBUS_Receive+0x94>)
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	5453      	strb	r3, [r2, r1]
			RxCount++;
 800238a:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <SBUS_Receive+0x90>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <SBUS_Receive+0x90>)
 8002394:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8002396:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <SBUS_Receive+0x90>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b18      	cmp	r3, #24
 800239c:	d10c      	bne.n	80023b8 <SBUS_Receive+0x80>
				RxCount = 0;
 800239e:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <SBUS_Receive+0x90>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 80023a4:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <SBUS_Receive+0x8c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 80023aa:	f000 f845 	bl	8002438 <SBUS_getData>
			}
			break;
 80023ae:	e003      	b.n	80023b8 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <SBUS_Receive+0x8c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
			break;
 80023b6:	e000      	b.n	80023ba <SBUS_Receive+0x82>
			break;
 80023b8:	bf00      	nop
	}
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	240004ce 	.word	0x240004ce
 80023c8:	240004cf 	.word	0x240004cf
 80023cc:	240004b4 	.word	0x240004b4

080023d0 <Temp_BypassFunct>:

void Temp_BypassFunct (void){
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
	PWM_Output.Canal_1  = Radio_input.Canal_1;
 80023d4:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <Temp_BypassFunct+0x60>)
 80023d6:	885a      	ldrh	r2, [r3, #2]
 80023d8:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <Temp_BypassFunct+0x64>)
 80023da:	801a      	strh	r2, [r3, #0]
	PWM_Output.Canal_2  = Radio_input.Canal_2;
 80023dc:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <Temp_BypassFunct+0x60>)
 80023de:	889a      	ldrh	r2, [r3, #4]
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <Temp_BypassFunct+0x64>)
 80023e2:	805a      	strh	r2, [r3, #2]
	PWM_Output.Canal_3  = Radio_input.Canal_3;
 80023e4:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <Temp_BypassFunct+0x60>)
 80023e6:	88da      	ldrh	r2, [r3, #6]
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <Temp_BypassFunct+0x64>)
 80023ea:	809a      	strh	r2, [r3, #4]
	PWM_Output.Canal_4  = Radio_input.Canal_4;
 80023ec:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <Temp_BypassFunct+0x60>)
 80023ee:	891a      	ldrh	r2, [r3, #8]
 80023f0:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <Temp_BypassFunct+0x64>)
 80023f2:	80da      	strh	r2, [r3, #6]
	PWM_Output.Canal_5  = Radio_input.Canal_5;
 80023f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <Temp_BypassFunct+0x60>)
 80023f6:	895a      	ldrh	r2, [r3, #10]
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <Temp_BypassFunct+0x64>)
 80023fa:	811a      	strh	r2, [r3, #8]
	PWM_Output.Canal_6  = Radio_input.Canal_6;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <Temp_BypassFunct+0x60>)
 80023fe:	899a      	ldrh	r2, [r3, #12]
 8002400:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <Temp_BypassFunct+0x64>)
 8002402:	815a      	strh	r2, [r3, #10]
	PWM_Output.Canal_7  = Radio_input.Canal_7;
 8002404:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <Temp_BypassFunct+0x60>)
 8002406:	89da      	ldrh	r2, [r3, #14]
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <Temp_BypassFunct+0x64>)
 800240a:	819a      	strh	r2, [r3, #12]
	PWM_Output.Canal_8  = Radio_input.Canal_8;
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <Temp_BypassFunct+0x60>)
 800240e:	8a1a      	ldrh	r2, [r3, #16]
 8002410:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <Temp_BypassFunct+0x64>)
 8002412:	81da      	strh	r2, [r3, #14]
	PWM_Output.Canal_9  = Radio_input.Canal_9;
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <Temp_BypassFunct+0x60>)
 8002416:	8a5a      	ldrh	r2, [r3, #18]
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <Temp_BypassFunct+0x64>)
 800241a:	821a      	strh	r2, [r3, #16]
	PWM_Output.Canal_10 = Radio_input.Canal_10;
 800241c:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <Temp_BypassFunct+0x60>)
 800241e:	8a9a      	ldrh	r2, [r3, #20]
 8002420:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <Temp_BypassFunct+0x64>)
 8002422:	825a      	strh	r2, [r3, #18]
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	24000068 	.word	0x24000068
 8002434:	24000054 	.word	0x24000054

08002438 <SBUS_getData>:

void SBUS_getData(void){
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 800243c:	4b95      	ldr	r3, [pc, #596]	@ (8002694 <SBUS_getData+0x25c>)
 800243e:	785b      	ldrb	r3, [r3, #1]
 8002440:	b21a      	sxth	r2, r3
 8002442:	4b94      	ldr	r3, [pc, #592]	@ (8002694 <SBUS_getData+0x25c>)
 8002444:	789b      	ldrb	r3, [r3, #2]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	b21b      	sxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b21b      	sxth	r3, r3
 800244e:	b29b      	uxth	r3, r3
 8002450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002454:	b29a      	uxth	r2, r3
 8002456:	4b90      	ldr	r3, [pc, #576]	@ (8002698 <SBUS_getData+0x260>)
 8002458:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 800245a:	4b8e      	ldr	r3, [pc, #568]	@ (8002694 <SBUS_getData+0x25c>)
 800245c:	789b      	ldrb	r3, [r3, #2]
 800245e:	08db      	lsrs	r3, r3, #3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	b21a      	sxth	r2, r3
 8002464:	4b8b      	ldr	r3, [pc, #556]	@ (8002694 <SBUS_getData+0x25c>)
 8002466:	78db      	ldrb	r3, [r3, #3]
 8002468:	015b      	lsls	r3, r3, #5
 800246a:	b21b      	sxth	r3, r3
 800246c:	4313      	orrs	r3, r2
 800246e:	b21b      	sxth	r3, r3
 8002470:	b29b      	uxth	r3, r3
 8002472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002476:	b29a      	uxth	r2, r3
 8002478:	4b87      	ldr	r3, [pc, #540]	@ (8002698 <SBUS_getData+0x260>)
 800247a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 800247c:	4b85      	ldr	r3, [pc, #532]	@ (8002694 <SBUS_getData+0x25c>)
 800247e:	78db      	ldrb	r3, [r3, #3]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	b2db      	uxtb	r3, r3
 8002484:	b21a      	sxth	r2, r3
 8002486:	4b83      	ldr	r3, [pc, #524]	@ (8002694 <SBUS_getData+0x25c>)
 8002488:	791b      	ldrb	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	b21b      	sxth	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b21a      	sxth	r2, r3
 8002492:	4b80      	ldr	r3, [pc, #512]	@ (8002694 <SBUS_getData+0x25c>)
 8002494:	795b      	ldrb	r3, [r3, #5]
 8002496:	029b      	lsls	r3, r3, #10
 8002498:	b21b      	sxth	r3, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	b21b      	sxth	r3, r3
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002698 <SBUS_getData+0x260>)
 80024a8:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80024aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002694 <SBUS_getData+0x25c>)
 80024ac:	795b      	ldrb	r3, [r3, #5]
 80024ae:	085b      	lsrs	r3, r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	4b77      	ldr	r3, [pc, #476]	@ (8002694 <SBUS_getData+0x25c>)
 80024b6:	799b      	ldrb	r3, [r3, #6]
 80024b8:	01db      	lsls	r3, r3, #7
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	4313      	orrs	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	4b73      	ldr	r3, [pc, #460]	@ (8002698 <SBUS_getData+0x260>)
 80024ca:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 80024cc:	4b71      	ldr	r3, [pc, #452]	@ (8002694 <SBUS_getData+0x25c>)
 80024ce:	799b      	ldrb	r3, [r3, #6]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	b21a      	sxth	r2, r3
 80024d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002694 <SBUS_getData+0x25c>)
 80024d8:	79db      	ldrb	r3, [r3, #7]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	b21b      	sxth	r3, r3
 80024de:	4313      	orrs	r3, r2
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002698 <SBUS_getData+0x260>)
 80024ec:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 80024ee:	4b69      	ldr	r3, [pc, #420]	@ (8002694 <SBUS_getData+0x25c>)
 80024f0:	79db      	ldrb	r3, [r3, #7]
 80024f2:	09db      	lsrs	r3, r3, #7
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	b21a      	sxth	r2, r3
 80024f8:	4b66      	ldr	r3, [pc, #408]	@ (8002694 <SBUS_getData+0x25c>)
 80024fa:	7a1b      	ldrb	r3, [r3, #8]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	b21b      	sxth	r3, r3
 8002500:	4313      	orrs	r3, r2
 8002502:	b21a      	sxth	r2, r3
 8002504:	4b63      	ldr	r3, [pc, #396]	@ (8002694 <SBUS_getData+0x25c>)
 8002506:	7a5b      	ldrb	r3, [r3, #9]
 8002508:	025b      	lsls	r3, r3, #9
 800250a:	b21b      	sxth	r3, r3
 800250c:	4313      	orrs	r3, r2
 800250e:	b21b      	sxth	r3, r3
 8002510:	b29b      	uxth	r3, r3
 8002512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002516:	b29a      	uxth	r2, r3
 8002518:	4b5f      	ldr	r3, [pc, #380]	@ (8002698 <SBUS_getData+0x260>)
 800251a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 800251c:	4b5d      	ldr	r3, [pc, #372]	@ (8002694 <SBUS_getData+0x25c>)
 800251e:	7a5b      	ldrb	r3, [r3, #9]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	b2db      	uxtb	r3, r3
 8002524:	b21a      	sxth	r2, r3
 8002526:	4b5b      	ldr	r3, [pc, #364]	@ (8002694 <SBUS_getData+0x25c>)
 8002528:	7a9b      	ldrb	r3, [r3, #10]
 800252a:	019b      	lsls	r3, r3, #6
 800252c:	b21b      	sxth	r3, r3
 800252e:	4313      	orrs	r3, r2
 8002530:	b21b      	sxth	r3, r3
 8002532:	b29b      	uxth	r3, r3
 8002534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002538:	b29a      	uxth	r2, r3
 800253a:	4b57      	ldr	r3, [pc, #348]	@ (8002698 <SBUS_getData+0x260>)
 800253c:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 800253e:	4b55      	ldr	r3, [pc, #340]	@ (8002694 <SBUS_getData+0x25c>)
 8002540:	7a9b      	ldrb	r3, [r3, #10]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	b2db      	uxtb	r3, r3
 8002546:	b21a      	sxth	r2, r3
 8002548:	4b52      	ldr	r3, [pc, #328]	@ (8002694 <SBUS_getData+0x25c>)
 800254a:	7adb      	ldrb	r3, [r3, #11]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	b21b      	sxth	r3, r3
 8002550:	4313      	orrs	r3, r2
 8002552:	b21b      	sxth	r3, r3
 8002554:	b29b      	uxth	r3, r3
 8002556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b4e      	ldr	r3, [pc, #312]	@ (8002698 <SBUS_getData+0x260>)
 800255e:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8002560:	4b4c      	ldr	r3, [pc, #304]	@ (8002694 <SBUS_getData+0x25c>)
 8002562:	7b1b      	ldrb	r3, [r3, #12]
 8002564:	b21a      	sxth	r2, r3
 8002566:	4b4b      	ldr	r3, [pc, #300]	@ (8002694 <SBUS_getData+0x25c>)
 8002568:	7b5b      	ldrb	r3, [r3, #13]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	b21b      	sxth	r3, r3
 800256e:	4313      	orrs	r3, r2
 8002570:	b21b      	sxth	r3, r3
 8002572:	b29b      	uxth	r3, r3
 8002574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b47      	ldr	r3, [pc, #284]	@ (8002698 <SBUS_getData+0x260>)
 800257c:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 800257e:	4b45      	ldr	r3, [pc, #276]	@ (8002694 <SBUS_getData+0x25c>)
 8002580:	7b5b      	ldrb	r3, [r3, #13]
 8002582:	08db      	lsrs	r3, r3, #3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	b21a      	sxth	r2, r3
 8002588:	4b42      	ldr	r3, [pc, #264]	@ (8002694 <SBUS_getData+0x25c>)
 800258a:	7b9b      	ldrb	r3, [r3, #14]
 800258c:	015b      	lsls	r3, r3, #5
 800258e:	b21b      	sxth	r3, r3
 8002590:	4313      	orrs	r3, r2
 8002592:	b21b      	sxth	r3, r3
 8002594:	b29b      	uxth	r3, r3
 8002596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b3e      	ldr	r3, [pc, #248]	@ (8002698 <SBUS_getData+0x260>)
 800259e:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80025a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002694 <SBUS_getData+0x25c>)
 80025a2:	7b9b      	ldrb	r3, [r3, #14]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002694 <SBUS_getData+0x25c>)
 80025ac:	7bdb      	ldrb	r3, [r3, #15]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	b21b      	sxth	r3, r3
 80025b2:	4313      	orrs	r3, r2
 80025b4:	b21a      	sxth	r2, r3
 80025b6:	4b37      	ldr	r3, [pc, #220]	@ (8002694 <SBUS_getData+0x25c>)
 80025b8:	7c1b      	ldrb	r3, [r3, #16]
 80025ba:	029b      	lsls	r3, r3, #10
 80025bc:	b21b      	sxth	r3, r3
 80025be:	4313      	orrs	r3, r2
 80025c0:	b21b      	sxth	r3, r3
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	4b33      	ldr	r3, [pc, #204]	@ (8002698 <SBUS_getData+0x260>)
 80025cc:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 80025ce:	4b31      	ldr	r3, [pc, #196]	@ (8002694 <SBUS_getData+0x25c>)
 80025d0:	7c1b      	ldrb	r3, [r3, #16]
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	b21a      	sxth	r2, r3
 80025d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002694 <SBUS_getData+0x25c>)
 80025da:	7c5b      	ldrb	r3, [r3, #17]
 80025dc:	01db      	lsls	r3, r3, #7
 80025de:	b21b      	sxth	r3, r3
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b21b      	sxth	r3, r3
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002698 <SBUS_getData+0x260>)
 80025ee:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 80025f0:	4b28      	ldr	r3, [pc, #160]	@ (8002694 <SBUS_getData+0x25c>)
 80025f2:	7c5b      	ldrb	r3, [r3, #17]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	4b26      	ldr	r3, [pc, #152]	@ (8002694 <SBUS_getData+0x25c>)
 80025fc:	7c9b      	ldrb	r3, [r3, #18]
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	b21b      	sxth	r3, r3
 8002602:	4313      	orrs	r3, r2
 8002604:	b21b      	sxth	r3, r3
 8002606:	b29b      	uxth	r3, r3
 8002608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260c:	b29a      	uxth	r2, r3
 800260e:	4b22      	ldr	r3, [pc, #136]	@ (8002698 <SBUS_getData+0x260>)
 8002610:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8002612:	4b20      	ldr	r3, [pc, #128]	@ (8002694 <SBUS_getData+0x25c>)
 8002614:	7c9b      	ldrb	r3, [r3, #18]
 8002616:	09db      	lsrs	r3, r3, #7
 8002618:	b2db      	uxtb	r3, r3
 800261a:	b21a      	sxth	r2, r3
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <SBUS_getData+0x25c>)
 800261e:	7cdb      	ldrb	r3, [r3, #19]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	b21b      	sxth	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	b21a      	sxth	r2, r3
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <SBUS_getData+0x25c>)
 800262a:	7d1b      	ldrb	r3, [r3, #20]
 800262c:	025b      	lsls	r3, r3, #9
 800262e:	b21b      	sxth	r3, r3
 8002630:	4313      	orrs	r3, r2
 8002632:	b21b      	sxth	r3, r3
 8002634:	b29b      	uxth	r3, r3
 8002636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263a:	b29a      	uxth	r2, r3
 800263c:	4b16      	ldr	r3, [pc, #88]	@ (8002698 <SBUS_getData+0x260>)
 800263e:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8002640:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <SBUS_getData+0x25c>)
 8002642:	7d1b      	ldrb	r3, [r3, #20]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	b2db      	uxtb	r3, r3
 8002648:	b21a      	sxth	r2, r3
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <SBUS_getData+0x25c>)
 800264c:	7d5b      	ldrb	r3, [r3, #21]
 800264e:	019b      	lsls	r3, r3, #6
 8002650:	b21b      	sxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b21b      	sxth	r3, r3
 8002656:	b29b      	uxth	r3, r3
 8002658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800265c:	b29a      	uxth	r2, r3
 800265e:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <SBUS_getData+0x260>)
 8002660:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8002662:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <SBUS_getData+0x25c>)
 8002664:	7d5b      	ldrb	r3, [r3, #21]
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	b2db      	uxtb	r3, r3
 800266a:	b21a      	sxth	r2, r3
 800266c:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <SBUS_getData+0x25c>)
 800266e:	7d9b      	ldrb	r3, [r3, #22]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	b21b      	sxth	r3, r3
 8002674:	4313      	orrs	r3, r2
 8002676:	b21b      	sxth	r3, r3
 8002678:	b29b      	uxth	r3, r3
 800267a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800267e:	b29a      	uxth	r2, r3
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <SBUS_getData+0x260>)
 8002682:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <SBUS_getData+0x260>)
 8002686:	885b      	ldrh	r3, [r3, #2]
 8002688:	ee07 3a90 	vmov	s15, r3
 800268c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002690:	e00a      	b.n	80026a8 <SBUS_getData+0x270>
 8002692:	bf00      	nop
 8002694:	240004b4 	.word	0x240004b4
 8002698:	24000068 	.word	0x24000068
 800269c:	43b00000 	.word	0x43b00000
 80026a0:	44a80000 	.word	0x44a80000
 80026a4:	447a0000 	.word	0x447a0000
 80026a8:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 800269c <SBUS_getData+0x264>
 80026ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026b0:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80026a0 <SBUS_getData+0x268>
 80026b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026b8:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80026a4 <SBUS_getData+0x26c>
 80026bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026c4:	ee17 3a90 	vmov	r3, s15
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4bd1      	ldr	r3, [pc, #836]	@ (8002a18 <SBUS_getData+0x5e0>)
 80026d2:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 80026d4:	4bd0      	ldr	r3, [pc, #832]	@ (8002a18 <SBUS_getData+0x5e0>)
 80026d6:	889b      	ldrh	r3, [r3, #4]
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e0:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 8002a1c <SBUS_getData+0x5e4>
 80026e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026e8:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8002a20 <SBUS_getData+0x5e8>
 80026ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026f0:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8002a24 <SBUS_getData+0x5ec>
 80026f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026fc:	ee17 3a90 	vmov	r3, s15
 8002700:	b29b      	uxth	r3, r3
 8002702:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002706:	b29a      	uxth	r2, r3
 8002708:	4bc3      	ldr	r3, [pc, #780]	@ (8002a18 <SBUS_getData+0x5e0>)
 800270a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 800270c:	4bc2      	ldr	r3, [pc, #776]	@ (8002a18 <SBUS_getData+0x5e0>)
 800270e:	88db      	ldrh	r3, [r3, #6]
 8002710:	ee07 3a90 	vmov	s15, r3
 8002714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002718:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8002a1c <SBUS_getData+0x5e4>
 800271c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002720:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8002a20 <SBUS_getData+0x5e8>
 8002724:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002728:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8002a24 <SBUS_getData+0x5ec>
 800272c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002734:	ee17 3a90 	vmov	r3, s15
 8002738:	b29b      	uxth	r3, r3
 800273a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800273e:	b29a      	uxth	r2, r3
 8002740:	4bb5      	ldr	r3, [pc, #724]	@ (8002a18 <SBUS_getData+0x5e0>)
 8002742:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8002744:	4bb4      	ldr	r3, [pc, #720]	@ (8002a18 <SBUS_getData+0x5e0>)
 8002746:	891b      	ldrh	r3, [r3, #8]
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002750:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8002a1c <SBUS_getData+0x5e4>
 8002754:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002758:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8002a20 <SBUS_getData+0x5e8>
 800275c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002760:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002a24 <SBUS_getData+0x5ec>
 8002764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800276c:	ee17 3a90 	vmov	r3, s15
 8002770:	b29b      	uxth	r3, r3
 8002772:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002776:	b29a      	uxth	r2, r3
 8002778:	4ba7      	ldr	r3, [pc, #668]	@ (8002a18 <SBUS_getData+0x5e0>)
 800277a:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 800277c:	4ba6      	ldr	r3, [pc, #664]	@ (8002a18 <SBUS_getData+0x5e0>)
 800277e:	895b      	ldrh	r3, [r3, #10]
 8002780:	ee07 3a90 	vmov	s15, r3
 8002784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002788:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8002a1c <SBUS_getData+0x5e4>
 800278c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002790:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002a20 <SBUS_getData+0x5e8>
 8002794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002798:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8002a24 <SBUS_getData+0x5ec>
 800279c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027a4:	ee17 3a90 	vmov	r3, s15
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b99      	ldr	r3, [pc, #612]	@ (8002a18 <SBUS_getData+0x5e0>)
 80027b2:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 80027b4:	4b98      	ldr	r3, [pc, #608]	@ (8002a18 <SBUS_getData+0x5e0>)
 80027b6:	899b      	ldrh	r3, [r3, #12]
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c0:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8002a1c <SBUS_getData+0x5e4>
 80027c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80027c8:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002a20 <SBUS_getData+0x5e8>
 80027cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027d0:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8002a24 <SBUS_getData+0x5ec>
 80027d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027dc:	ee17 3a90 	vmov	r3, s15
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	4b8b      	ldr	r3, [pc, #556]	@ (8002a18 <SBUS_getData+0x5e0>)
 80027ea:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 80027ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002a18 <SBUS_getData+0x5e0>)
 80027ee:	89db      	ldrh	r3, [r3, #14]
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f8:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002a1c <SBUS_getData+0x5e4>
 80027fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002800:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002a20 <SBUS_getData+0x5e8>
 8002804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002808:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002a24 <SBUS_getData+0x5ec>
 800280c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002814:	ee17 3a90 	vmov	r3, s15
 8002818:	b29b      	uxth	r3, r3
 800281a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800281e:	b29a      	uxth	r2, r3
 8002820:	4b7d      	ldr	r3, [pc, #500]	@ (8002a18 <SBUS_getData+0x5e0>)
 8002822:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8002824:	4b7c      	ldr	r3, [pc, #496]	@ (8002a18 <SBUS_getData+0x5e0>)
 8002826:	8a1b      	ldrh	r3, [r3, #16]
 8002828:	ee07 3a90 	vmov	s15, r3
 800282c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002830:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002a1c <SBUS_getData+0x5e4>
 8002834:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002838:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002a20 <SBUS_getData+0x5e8>
 800283c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002840:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8002a24 <SBUS_getData+0x5ec>
 8002844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800284c:	ee17 3a90 	vmov	r3, s15
 8002850:	b29b      	uxth	r3, r3
 8002852:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002856:	b29a      	uxth	r2, r3
 8002858:	4b6f      	ldr	r3, [pc, #444]	@ (8002a18 <SBUS_getData+0x5e0>)
 800285a:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 800285c:	4b6e      	ldr	r3, [pc, #440]	@ (8002a18 <SBUS_getData+0x5e0>)
 800285e:	8a5b      	ldrh	r3, [r3, #18]
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002868:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8002a1c <SBUS_getData+0x5e4>
 800286c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002870:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002a20 <SBUS_getData+0x5e8>
 8002874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002878:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8002a24 <SBUS_getData+0x5ec>
 800287c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002884:	ee17 3a90 	vmov	r3, s15
 8002888:	b29b      	uxth	r3, r3
 800288a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800288e:	b29a      	uxth	r2, r3
 8002890:	4b61      	ldr	r3, [pc, #388]	@ (8002a18 <SBUS_getData+0x5e0>)
 8002892:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8002894:	4b60      	ldr	r3, [pc, #384]	@ (8002a18 <SBUS_getData+0x5e0>)
 8002896:	8a9b      	ldrh	r3, [r3, #20]
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002a1c <SBUS_getData+0x5e4>
 80028a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028a8:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002a20 <SBUS_getData+0x5e8>
 80028ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028b0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002a24 <SBUS_getData+0x5ec>
 80028b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028bc:	ee17 3a90 	vmov	r3, s15
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b53      	ldr	r3, [pc, #332]	@ (8002a18 <SBUS_getData+0x5e0>)
 80028ca:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 80028cc:	4b52      	ldr	r3, [pc, #328]	@ (8002a18 <SBUS_getData+0x5e0>)
 80028ce:	8adb      	ldrh	r3, [r3, #22]
 80028d0:	ee07 3a90 	vmov	s15, r3
 80028d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d8:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002a1c <SBUS_getData+0x5e4>
 80028dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028e0:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002a20 <SBUS_getData+0x5e8>
 80028e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028e8:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002a24 <SBUS_getData+0x5ec>
 80028ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f4:	ee17 3a90 	vmov	r3, s15
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80028fe:	b29a      	uxth	r2, r3
 8002900:	4b45      	ldr	r3, [pc, #276]	@ (8002a18 <SBUS_getData+0x5e0>)
 8002902:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8002904:	4b44      	ldr	r3, [pc, #272]	@ (8002a18 <SBUS_getData+0x5e0>)
 8002906:	8b1b      	ldrh	r3, [r3, #24]
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002910:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002a1c <SBUS_getData+0x5e4>
 8002914:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002918:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8002a20 <SBUS_getData+0x5e8>
 800291c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002920:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002a24 <SBUS_getData+0x5ec>
 8002924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800292c:	ee17 3a90 	vmov	r3, s15
 8002930:	b29b      	uxth	r3, r3
 8002932:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b37      	ldr	r3, [pc, #220]	@ (8002a18 <SBUS_getData+0x5e0>)
 800293a:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 800293c:	4b36      	ldr	r3, [pc, #216]	@ (8002a18 <SBUS_getData+0x5e0>)
 800293e:	8b5b      	ldrh	r3, [r3, #26]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002948:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002a1c <SBUS_getData+0x5e4>
 800294c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002950:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002a20 <SBUS_getData+0x5e8>
 8002954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002958:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002a24 <SBUS_getData+0x5ec>
 800295c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002964:	ee17 3a90 	vmov	r3, s15
 8002968:	b29b      	uxth	r3, r3
 800296a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800296e:	b29a      	uxth	r2, r3
 8002970:	4b29      	ldr	r3, [pc, #164]	@ (8002a18 <SBUS_getData+0x5e0>)
 8002972:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8002974:	4b28      	ldr	r3, [pc, #160]	@ (8002a18 <SBUS_getData+0x5e0>)
 8002976:	8b9b      	ldrh	r3, [r3, #28]
 8002978:	ee07 3a90 	vmov	s15, r3
 800297c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002980:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002a1c <SBUS_getData+0x5e4>
 8002984:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002988:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002a20 <SBUS_getData+0x5e8>
 800298c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002990:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002a24 <SBUS_getData+0x5ec>
 8002994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299c:	ee17 3a90 	vmov	r3, s15
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <SBUS_getData+0x5e0>)
 80029aa:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002a18 <SBUS_getData+0x5e0>)
 80029ae:	8bdb      	ldrh	r3, [r3, #30]
 80029b0:	ee07 3a90 	vmov	s15, r3
 80029b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002a1c <SBUS_getData+0x5e4>
 80029bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029c0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002a20 <SBUS_getData+0x5e8>
 80029c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002a24 <SBUS_getData+0x5ec>
 80029cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d4:	ee17 3a90 	vmov	r3, s15
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80029de:	b29a      	uxth	r2, r3
 80029e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a18 <SBUS_getData+0x5e0>)
 80029e2:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 80029e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <SBUS_getData+0x5e0>)
 80029e6:	8c1b      	ldrh	r3, [r3, #32]
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002a1c <SBUS_getData+0x5e4>
 80029f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029f8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002a20 <SBUS_getData+0x5e8>
 80029fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a00:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002a24 <SBUS_getData+0x5ec>
 8002a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0c:	ee17 3a90 	vmov	r3, s15
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002a16:	e007      	b.n	8002a28 <SBUS_getData+0x5f0>
 8002a18:	24000068 	.word	0x24000068
 8002a1c:	43b00000 	.word	0x43b00000
 8002a20:	44a80000 	.word	0x44a80000
 8002a24:	447a0000 	.word	0x447a0000
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad4 <SBUS_getData+0x69c>)
 8002a2c:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad8 <SBUS_getData+0x6a0>)
 8002a30:	7dda      	ldrb	r2, [r3, #23]
 8002a32:	4b28      	ldr	r3, [pc, #160]	@ (8002ad4 <SBUS_getData+0x69c>)
 8002a34:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 8002a36:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <SBUS_getData+0x6a0>)
 8002a38:	7ddb      	ldrb	r3, [r3, #23]
 8002a3a:	2b07      	cmp	r3, #7
 8002a3c:	d90a      	bls.n	8002a54 <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 8002a3e:	4b26      	ldr	r3, [pc, #152]	@ (8002ad8 <SBUS_getData+0x6a0>)
 8002a40:	7ddb      	ldrb	r3, [r3, #23]
 8002a42:	3b08      	subs	r3, #8
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4b24      	ldr	r3, [pc, #144]	@ (8002ad8 <SBUS_getData+0x6a0>)
 8002a48:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 8002a4a:	4b22      	ldr	r3, [pc, #136]	@ (8002ad4 <SBUS_getData+0x69c>)
 8002a4c:	2235      	movs	r2, #53	@ 0x35
 8002a4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8002a52:	e003      	b.n	8002a5c <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 8002a54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad4 <SBUS_getData+0x69c>)
 8002a56:	22aa      	movs	r2, #170	@ 0xaa
 8002a58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <SBUS_getData+0x6a0>)
 8002a5e:	7ddb      	ldrb	r3, [r3, #23]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d90a      	bls.n	8002a7a <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 8002a64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <SBUS_getData+0x6a0>)
 8002a66:	7ddb      	ldrb	r3, [r3, #23]
 8002a68:	3b04      	subs	r3, #4
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <SBUS_getData+0x6a0>)
 8002a6e:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8002a70:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <SBUS_getData+0x69c>)
 8002a72:	2210      	movs	r2, #16
 8002a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a78:	e003      	b.n	8002a82 <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 8002a7a:	4b16      	ldr	r3, [pc, #88]	@ (8002ad4 <SBUS_getData+0x69c>)
 8002a7c:	22aa      	movs	r2, #170	@ 0xaa
 8002a7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 8002a82:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <SBUS_getData+0x6a0>)
 8002a84:	7ddb      	ldrb	r3, [r3, #23]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d90a      	bls.n	8002aa0 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 8002a8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ad8 <SBUS_getData+0x6a0>)
 8002a8c:	7ddb      	ldrb	r3, [r3, #23]
 8002a8e:	3b02      	subs	r3, #2
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <SBUS_getData+0x6a0>)
 8002a94:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 8002a96:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <SBUS_getData+0x69c>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8002a9e:	e003      	b.n	8002aa8 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <SBUS_getData+0x69c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <SBUS_getData+0x6a0>)
 8002aaa:	7ddb      	ldrb	r3, [r3, #23]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 8002ab0:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <SBUS_getData+0x69c>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8002ab8:	e003      	b.n	8002ac2 <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <SBUS_getData+0x69c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 8002ac2:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <SBUS_getData+0x69c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	Temp_BypassFunct();
 8002aca:	f7ff fc81 	bl	80023d0 <Temp_BypassFunct>

}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	24000068 	.word	0x24000068
 8002ad8:	240004b4 	.word	0x240004b4

08002adc <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <SBUS_IntegrityVerification+0x44>)
 8002ae2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002ae6:	2bff      	cmp	r3, #255	@ 0xff
 8002ae8:	d00c      	beq.n	8002b04 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 8002aea:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <SBUS_IntegrityVerification+0x44>)
 8002aec:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002af0:	3301      	adds	r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <SBUS_IntegrityVerification+0x44>)
 8002af6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 8002afa:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <SBUS_IntegrityVerification+0x44>)
 8002afc:	22aa      	movs	r2, #170	@ 0xaa
 8002afe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8002b02:	e007      	b.n	8002b14 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <SBUS_IntegrityVerification+0x44>)
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 8002b0c:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <SBUS_IntegrityVerification+0x44>)
 8002b0e:	2235      	movs	r2, #53	@ 0x35
 8002b10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	24000068 	.word	0x24000068

08002b24 <ASCII2uint8>:

char BlackBoxBuffer[16][255];

blackbox_data_t blackbox_data;

uint8_t ASCII2uint8(char *buffer, uint8_t Size){
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
	uint8_t inter = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n < Size; ++n) {
 8002b34:	2300      	movs	r3, #0
 8002b36:	73bb      	strb	r3, [r7, #14]
 8002b38:	e011      	b.n	8002b5e <ASCII2uint8+0x3a>
		inter *= 10;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]

		inter += (buffer[n] - 48);
 8002b46:	7bbb      	ldrb	r3, [r7, #14]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	4413      	add	r3, r2
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3b30      	subs	r3, #48	@ 0x30
 8002b56:	73fb      	strb	r3, [r7, #15]
	for (uint8_t n = 0; n < Size; ++n) {
 8002b58:	7bbb      	ldrb	r3, [r7, #14]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	73bb      	strb	r3, [r7, #14]
 8002b5e:	7bba      	ldrb	r2, [r7, #14]
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d3e9      	bcc.n	8002b3a <ASCII2uint8+0x16>
	}
	return inter;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <uint82ASCII>:

void uint82ASCII(uint8_t Inter, char *Output){
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
	Output[0] = Inter/100;
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	4a27      	ldr	r2, [pc, #156]	@ (8002c20 <uint82ASCII+0xac>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	701a      	strb	r2, [r3, #0]
	Output[1] = (Inter - Output[0]*100) /10;
 8002b90:	79fa      	ldrb	r2, [r7, #7]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	4619      	mov	r1, r3
 8002b98:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4a20      	ldr	r2, [pc, #128]	@ (8002c24 <uint82ASCII+0xb0>)
 8002ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ba8:	1092      	asrs	r2, r2, #2
 8002baa:	17db      	asrs	r3, r3, #31
 8002bac:	1ad2      	subs	r2, r2, r3
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]
	Output[2] = (Inter - Output[0]*100 - Output[1]*10) ;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	0092      	lsls	r2, r2, #2
 8002bbe:	441a      	add	r2, r3
 8002bc0:	00d2      	lsls	r2, r2, #3
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	0149      	lsls	r1, r1, #5
 8002bd2:	1ac9      	subs	r1, r1, r3
 8002bd4:	0089      	lsls	r1, r1, #2
 8002bd6:	1acb      	subs	r3, r1, r3
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	b2d9      	uxtb	r1, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	3302      	adds	r3, #2
 8002be4:	79fa      	ldrb	r2, [r7, #7]
 8002be6:	440a      	add	r2, r1
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	701a      	strb	r2, [r3, #0]

	for (uint8_t n = 0; n < 3; ++n) {
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e00c      	b.n	8002c0c <uint82ASCII+0x98>
		Output[n] +=48;
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	6839      	ldr	r1, [r7, #0]
 8002bfe:	440b      	add	r3, r1
 8002c00:	3230      	adds	r2, #48	@ 0x30
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]
	for (uint8_t n = 0; n < 3; ++n) {
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d9ef      	bls.n	8002bf2 <uint82ASCII+0x7e>
	}
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	51eb851f 	.word	0x51eb851f
 8002c24:	66666667 	.word	0x66666667

08002c28 <ConfigFile_Create>:
		Output[n] +=48;
		Scaler /= 10;
	}
}

void ConfigFile_Create(void){
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0

	f_unlink(ConfigFile);
 8002c2c:	480c      	ldr	r0, [pc, #48]	@ (8002c60 <ConfigFile_Create+0x38>)
 8002c2e:	f012 f884 	bl	8014d3a <f_unlink>

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002c32:	2213      	movs	r2, #19
 8002c34:	490a      	ldr	r1, [pc, #40]	@ (8002c60 <ConfigFile_Create+0x38>)
 8002c36:	480b      	ldr	r0, [pc, #44]	@ (8002c64 <ConfigFile_Create+0x3c>)
 8002c38:	f011 f8ae 	bl	8013d98 <f_open>

	f_printf(&Config, "Version: ");
 8002c3c:	490a      	ldr	r1, [pc, #40]	@ (8002c68 <ConfigFile_Create+0x40>)
 8002c3e:	4809      	ldr	r0, [pc, #36]	@ (8002c64 <ConfigFile_Create+0x3c>)
 8002c40:	f012 face 	bl	80151e0 <f_printf>
	f_printf(&Config,  SystemConfig.FWVersion);
 8002c44:	4909      	ldr	r1, [pc, #36]	@ (8002c6c <ConfigFile_Create+0x44>)
 8002c46:	4807      	ldr	r0, [pc, #28]	@ (8002c64 <ConfigFile_Create+0x3c>)
 8002c48:	f012 faca 	bl	80151e0 <f_printf>
	f_printf(&Config, "\nN. Reset: 000\n");
 8002c4c:	4908      	ldr	r1, [pc, #32]	@ (8002c70 <ConfigFile_Create+0x48>)
 8002c4e:	4805      	ldr	r0, [pc, #20]	@ (8002c64 <ConfigFile_Create+0x3c>)
 8002c50:	f012 fac6 	bl	80151e0 <f_printf>
	f_close(&Config);
 8002c54:	4803      	ldr	r0, [pc, #12]	@ (8002c64 <ConfigFile_Create+0x3c>)
 8002c56:	f011 fdd8 	bl	801480a <f_close>
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	240000b0 	.word	0x240000b0
 8002c64:	2400253c 	.word	0x2400253c
 8002c68:	08018748 	.word	0x08018748
 8002c6c:	24000090 	.word	0x24000090
 8002c70:	08018754 	.word	0x08018754

08002c74 <SD_ConfigFileInit>:

void SD_ConfigFileInit(void){
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
	char FileVersion[5] = {0};
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	713b      	strb	r3, [r7, #4]

	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002c82:	2213      	movs	r2, #19
 8002c84:	492b      	ldr	r1, [pc, #172]	@ (8002d34 <SD_ConfigFileInit+0xc0>)
 8002c86:	482c      	ldr	r0, [pc, #176]	@ (8002d38 <SD_ConfigFileInit+0xc4>)
 8002c88:	f011 f886 	bl	8013d98 <f_open>

	f_lseek(&Config, Config_FWVersion);
 8002c8c:	2109      	movs	r1, #9
 8002c8e:	482a      	ldr	r0, [pc, #168]	@ (8002d38 <SD_ConfigFileInit+0xc4>)
 8002c90:	f011 fe2f 	bl	80148f2 <f_lseek>

	f_read(&Config, FileVersion, 5, &br);
 8002c94:	4639      	mov	r1, r7
 8002c96:	4b29      	ldr	r3, [pc, #164]	@ (8002d3c <SD_ConfigFileInit+0xc8>)
 8002c98:	2205      	movs	r2, #5
 8002c9a:	4827      	ldr	r0, [pc, #156]	@ (8002d38 <SD_ConfigFileInit+0xc4>)
 8002c9c:	f011 fa44 	bl	8014128 <f_read>

	f_close(&Config);
 8002ca0:	4825      	ldr	r0, [pc, #148]	@ (8002d38 <SD_ConfigFileInit+0xc4>)
 8002ca2:	f011 fdb2 	bl	801480a <f_close>

	for (uint8_t n = 0; n < 5; ++n) {
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	71fb      	strb	r3, [r7, #7]
 8002caa:	e010      	b.n	8002cce <SD_ConfigFileInit+0x5a>
		if(FileVersion[n] != SystemConfig.FWVersion[n]){
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	3308      	adds	r3, #8
 8002cb0:	443b      	add	r3, r7
 8002cb2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	4921      	ldr	r1, [pc, #132]	@ (8002d40 <SD_ConfigFileInit+0xcc>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d003      	beq.n	8002cc8 <SD_ConfigFileInit+0x54>
			ConfigFile_Create();
 8002cc0:	f7ff ffb2 	bl	8002c28 <ConfigFile_Create>
			n = 5;
 8002cc4:	2305      	movs	r3, #5
 8002cc6:	71fb      	strb	r3, [r7, #7]
	for (uint8_t n = 0; n < 5; ++n) {
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	71fb      	strb	r3, [r7, #7]
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d9eb      	bls.n	8002cac <SD_ConfigFileInit+0x38>
		}
	}
	f_open(&Config, ConfigFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002cd4:	2213      	movs	r2, #19
 8002cd6:	4917      	ldr	r1, [pc, #92]	@ (8002d34 <SD_ConfigFileInit+0xc0>)
 8002cd8:	4817      	ldr	r0, [pc, #92]	@ (8002d38 <SD_ConfigFileInit+0xc4>)
 8002cda:	f011 f85d 	bl	8013d98 <f_open>

	f_lseek(&Config, 26);
 8002cde:	211a      	movs	r1, #26
 8002ce0:	4815      	ldr	r0, [pc, #84]	@ (8002d38 <SD_ConfigFileInit+0xc4>)
 8002ce2:	f011 fe06 	bl	80148f2 <f_lseek>
	f_read(&Config, NResetChar, 3, &br);
 8002ce6:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <SD_ConfigFileInit+0xc8>)
 8002ce8:	2203      	movs	r2, #3
 8002cea:	4916      	ldr	r1, [pc, #88]	@ (8002d44 <SD_ConfigFileInit+0xd0>)
 8002cec:	4812      	ldr	r0, [pc, #72]	@ (8002d38 <SD_ConfigFileInit+0xc4>)
 8002cee:	f011 fa1b 	bl	8014128 <f_read>

	SystemConfig.ResetCounter = ASCII2uint8(NResetChar, 3) + 1;
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	4813      	ldr	r0, [pc, #76]	@ (8002d44 <SD_ConfigFileInit+0xd0>)
 8002cf6:	f7ff ff15 	bl	8002b24 <ASCII2uint8>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <SD_ConfigFileInit+0xcc>)
 8002d02:	715a      	strb	r2, [r3, #5]
	uint82ASCII(SystemConfig.ResetCounter, NResetChar);
 8002d04:	4b0e      	ldr	r3, [pc, #56]	@ (8002d40 <SD_ConfigFileInit+0xcc>)
 8002d06:	795b      	ldrb	r3, [r3, #5]
 8002d08:	490e      	ldr	r1, [pc, #56]	@ (8002d44 <SD_ConfigFileInit+0xd0>)
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff32 	bl	8002b74 <uint82ASCII>

	f_lseek(&Config, 26);
 8002d10:	211a      	movs	r1, #26
 8002d12:	4809      	ldr	r0, [pc, #36]	@ (8002d38 <SD_ConfigFileInit+0xc4>)
 8002d14:	f011 fded 	bl	80148f2 <f_lseek>
	f_write(&Config, NResetChar, 3, &bw);
 8002d18:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <SD_ConfigFileInit+0xd4>)
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	4909      	ldr	r1, [pc, #36]	@ (8002d44 <SD_ConfigFileInit+0xd0>)
 8002d1e:	4806      	ldr	r0, [pc, #24]	@ (8002d38 <SD_ConfigFileInit+0xc4>)
 8002d20:	f011 fb61 	bl	80143e6 <f_write>

	f_close(&Config);
 8002d24:	4804      	ldr	r0, [pc, #16]	@ (8002d38 <SD_ConfigFileInit+0xc4>)
 8002d26:	f011 fd70 	bl	801480a <f_close>

}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	240000b0 	.word	0x240000b0
 8002d38:	2400253c 	.word	0x2400253c
 8002d3c:	24003570 	.word	0x24003570
 8002d40:	24000090 	.word	0x24000090
 8002d44:	240000bc 	.word	0x240000bc
 8002d48:	24003574 	.word	0x24003574

08002d4c <SD_GainsInit>:

void SD_GainsInit(void){
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0

}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <SD_CreateFlightPath>:

void SD_CreateFlightPath(void){
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
	FlightPaht[6] = NResetChar[0];
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <SD_CreateFlightPath+0x2c>)
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <SD_CreateFlightPath+0x30>)
 8002d66:	719a      	strb	r2, [r3, #6]
	FlightPaht[7] = NResetChar[1];
 8002d68:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <SD_CreateFlightPath+0x2c>)
 8002d6a:	785a      	ldrb	r2, [r3, #1]
 8002d6c:	4b07      	ldr	r3, [pc, #28]	@ (8002d8c <SD_CreateFlightPath+0x30>)
 8002d6e:	71da      	strb	r2, [r3, #7]
	FlightPaht[8] = NResetChar[2];
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <SD_CreateFlightPath+0x2c>)
 8002d72:	789a      	ldrb	r2, [r3, #2]
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <SD_CreateFlightPath+0x30>)
 8002d76:	721a      	strb	r2, [r3, #8]

	f_mkdir(FlightPaht);
 8002d78:	4804      	ldr	r0, [pc, #16]	@ (8002d8c <SD_CreateFlightPath+0x30>)
 8002d7a:	f012 f89f 	bl	8014ebc <f_mkdir>
	f_chdir(FlightPaht);
 8002d7e:	4803      	ldr	r0, [pc, #12]	@ (8002d8c <SD_CreateFlightPath+0x30>)
 8002d80:	f011 fd6d 	bl	801485e <f_chdir>
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	240000bc 	.word	0x240000bc
 8002d8c:	24000098 	.word	0x24000098

08002d90 <SD_blackbox_init>:

void SD_blackbox_init(void){
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002d94:	2213      	movs	r2, #19
 8002d96:	4903      	ldr	r1, [pc, #12]	@ (8002da4 <SD_blackbox_init+0x14>)
 8002d98:	4803      	ldr	r0, [pc, #12]	@ (8002da8 <SD_blackbox_init+0x18>)
 8002d9a:	f010 fffd 	bl	8013d98 <f_open>
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	240000a4 	.word	0x240000a4
 8002da8:	2400150c 	.word	0x2400150c

08002dac <SD_blackbox_refresh>:

void SD_blackbox_refresh(void){
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8002db0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fac <SD_blackbox_refresh+0x200>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a7e      	ldr	r2, [pc, #504]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002db6:	6653      	str	r3, [r2, #100]	@ 0x64

	blackbox_data.Ax = IMU.ACC.x;
 8002db8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fb4 <SD_blackbox_refresh+0x208>)
 8002dba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002dbe:	497c      	ldr	r1, [pc, #496]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002dc0:	e9c1 2300 	strd	r2, r3, [r1]
	blackbox_data.Ay = IMU.ACC.y;
 8002dc4:	4b7b      	ldr	r3, [pc, #492]	@ (8002fb4 <SD_blackbox_refresh+0x208>)
 8002dc6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002dca:	4979      	ldr	r1, [pc, #484]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002dcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	blackbox_data.Az = IMU.ACC.z;
 8002dd0:	4b78      	ldr	r3, [pc, #480]	@ (8002fb4 <SD_blackbox_refresh+0x208>)
 8002dd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002dd6:	4976      	ldr	r1, [pc, #472]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002dd8:	e9c1 2304 	strd	r2, r3, [r1, #16]

	blackbox_data.Gx = IMU.GYR.x;
 8002ddc:	4b75      	ldr	r3, [pc, #468]	@ (8002fb4 <SD_blackbox_refresh+0x208>)
 8002dde:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002de2:	4973      	ldr	r1, [pc, #460]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002de4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	blackbox_data.Gy = IMU.GYR.y;
 8002de8:	4b72      	ldr	r3, [pc, #456]	@ (8002fb4 <SD_blackbox_refresh+0x208>)
 8002dea:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002dee:	4970      	ldr	r1, [pc, #448]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002df0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	blackbox_data.Gz = IMU.GYR.z;
 8002df4:	4b6f      	ldr	r3, [pc, #444]	@ (8002fb4 <SD_blackbox_refresh+0x208>)
 8002df6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002dfa:	496d      	ldr	r1, [pc, #436]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002dfc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	blackbox_data.Gfx = 0;
 8002e00:	496b      	ldr	r1, [pc, #428]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	blackbox_data.Gfy = 0;
 8002e0e:	4968      	ldr	r1, [pc, #416]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	blackbox_data.Gfz = 0;
 8002e1c:	4964      	ldr	r1, [pc, #400]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	blackbox_data.Roll    = IMU.Roll;
 8002e2a:	4b62      	ldr	r3, [pc, #392]	@ (8002fb4 <SD_blackbox_refresh+0x208>)
 8002e2c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002e30:	495f      	ldr	r1, [pc, #380]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e32:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	blackbox_data.Pitch   = IMU.Pitch;
 8002e36:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb4 <SD_blackbox_refresh+0x208>)
 8002e38:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002e3c:	495c      	ldr	r1, [pc, #368]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e3e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	blackbox_data.Heading = IMU.Heading;
 8002e42:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb4 <SD_blackbox_refresh+0x208>)
 8002e44:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002e48:	4959      	ldr	r1, [pc, #356]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e4a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 8002e4e:	4b5a      	ldr	r3, [pc, #360]	@ (8002fb8 <SD_blackbox_refresh+0x20c>)
 8002e50:	8a1a      	ldrh	r2, [r3, #16]
 8002e52:	4b57      	ldr	r3, [pc, #348]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e54:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
	blackbox_data.Latitude = 0;
 8002e58:	4b55      	ldr	r3, [pc, #340]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	669a      	str	r2, [r3, #104]	@ 0x68
	blackbox_data.Longitude= 0;
 8002e5e:	4b54      	ldr	r3, [pc, #336]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	66da      	str	r2, [r3, #108]	@ 0x6c

	blackbox_data.ARSP = 0;
 8002e64:	4b52      	ldr	r3, [pc, #328]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

	blackbox_data.Pressure = BMP280.Pressure;
 8002e6c:	4b52      	ldr	r3, [pc, #328]	@ (8002fb8 <SD_blackbox_refresh+0x20c>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e72:	6713      	str	r3, [r2, #112]	@ 0x70

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 8002e74:	4b51      	ldr	r3, [pc, #324]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	4b4d      	ldr	r3, [pc, #308]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e7a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	blackbox_data.Flight_Mode = 0;
 8002e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8002e86:	4b4d      	ldr	r3, [pc, #308]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002e88:	885a      	ldrh	r2, [r3, #2]
 8002e8a:	4b49      	ldr	r3, [pc, #292]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e8c:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 8002e90:	4b4a      	ldr	r3, [pc, #296]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002e92:	889a      	ldrh	r2, [r3, #4]
 8002e94:	4b46      	ldr	r3, [pc, #280]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002e96:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 8002e9a:	4b48      	ldr	r3, [pc, #288]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002e9c:	88da      	ldrh	r2, [r3, #6]
 8002e9e:	4b44      	ldr	r3, [pc, #272]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002ea0:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 8002ea4:	4b45      	ldr	r3, [pc, #276]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002ea6:	891a      	ldrh	r2, [r3, #8]
 8002ea8:	4b41      	ldr	r3, [pc, #260]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002eaa:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8002eae:	4b43      	ldr	r3, [pc, #268]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002eb0:	895a      	ldrh	r2, [r3, #10]
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002eb4:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8002eb8:	4b40      	ldr	r3, [pc, #256]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002eba:	899a      	ldrh	r2, [r3, #12]
 8002ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002ebe:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 8002ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002ec4:	89da      	ldrh	r2, [r3, #14]
 8002ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002ec8:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8002ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002ece:	8a1a      	ldrh	r2, [r3, #16]
 8002ed0:	4b37      	ldr	r3, [pc, #220]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002ed2:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8002ed6:	4b39      	ldr	r3, [pc, #228]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002ed8:	8a5a      	ldrh	r2, [r3, #18]
 8002eda:	4b35      	ldr	r3, [pc, #212]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002edc:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 8002ee0:	4b36      	ldr	r3, [pc, #216]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002ee2:	8a9a      	ldrh	r2, [r3, #20]
 8002ee4:	4b32      	ldr	r3, [pc, #200]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002ee6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8002eea:	4b34      	ldr	r3, [pc, #208]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002eec:	8ada      	ldrh	r2, [r3, #22]
 8002eee:	4b30      	ldr	r3, [pc, #192]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002ef0:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 8002ef4:	4b31      	ldr	r3, [pc, #196]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002ef6:	8b1a      	ldrh	r2, [r3, #24]
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002efa:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8002efe:	4b2f      	ldr	r3, [pc, #188]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002f00:	8b5a      	ldrh	r2, [r3, #26]
 8002f02:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f04:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8002f08:	4b2c      	ldr	r3, [pc, #176]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002f0a:	8b9a      	ldrh	r2, [r3, #28]
 8002f0c:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f0e:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 8002f12:	4b2a      	ldr	r3, [pc, #168]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002f14:	8bda      	ldrh	r2, [r3, #30]
 8002f16:	4b26      	ldr	r3, [pc, #152]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f18:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 8002f1c:	4b27      	ldr	r3, [pc, #156]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002f1e:	8c1a      	ldrh	r2, [r3, #32]
 8002f20:	4b23      	ldr	r3, [pc, #140]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f22:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 8002f26:	4b25      	ldr	r3, [pc, #148]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002f28:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8002f2c:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f2e:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 8002f32:	4b22      	ldr	r3, [pc, #136]	@ (8002fbc <SD_blackbox_refresh+0x210>)
 8002f34:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f3a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf

	blackbox_data.OUT1  = PWM_Output.Canal_1;
 8002f3e:	4b20      	ldr	r3, [pc, #128]	@ (8002fc0 <SD_blackbox_refresh+0x214>)
 8002f40:	881a      	ldrh	r2, [r3, #0]
 8002f42:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f44:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	blackbox_data.OUT2  = PWM_Output.Canal_2;
 8002f48:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc0 <SD_blackbox_refresh+0x214>)
 8002f4a:	885a      	ldrh	r2, [r3, #2]
 8002f4c:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f4e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	blackbox_data.OUT3  = PWM_Output.Canal_3;
 8002f52:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <SD_blackbox_refresh+0x214>)
 8002f54:	889a      	ldrh	r2, [r3, #4]
 8002f56:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f58:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	blackbox_data.OUT4  = PWM_Output.Canal_4;
 8002f5c:	4b18      	ldr	r3, [pc, #96]	@ (8002fc0 <SD_blackbox_refresh+0x214>)
 8002f5e:	88da      	ldrh	r2, [r3, #6]
 8002f60:	4b13      	ldr	r3, [pc, #76]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f62:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	blackbox_data.OUT5  = PWM_Output.Canal_5;
 8002f66:	4b16      	ldr	r3, [pc, #88]	@ (8002fc0 <SD_blackbox_refresh+0x214>)
 8002f68:	891a      	ldrh	r2, [r3, #8]
 8002f6a:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f6c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	blackbox_data.OUT6  = PWM_Output.Canal_6;
 8002f70:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <SD_blackbox_refresh+0x214>)
 8002f72:	895a      	ldrh	r2, [r3, #10]
 8002f74:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f76:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	blackbox_data.OUT7  = PWM_Output.Canal_7;
 8002f7a:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <SD_blackbox_refresh+0x214>)
 8002f7c:	899a      	ldrh	r2, [r3, #12]
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f80:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	blackbox_data.OUT8  = PWM_Output.Canal_8;
 8002f84:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <SD_blackbox_refresh+0x214>)
 8002f86:	89da      	ldrh	r2, [r3, #14]
 8002f88:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f8a:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	blackbox_data.OUT9  = PWM_Output.Canal_9;
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc0 <SD_blackbox_refresh+0x214>)
 8002f90:	8a1a      	ldrh	r2, [r3, #16]
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f94:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	blackbox_data.OUT10 = PWM_Output.Canal_10;
 8002f98:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <SD_blackbox_refresh+0x214>)
 8002f9a:	8a5a      	ldrh	r2, [r3, #18]
 8002f9c:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <SD_blackbox_refresh+0x204>)
 8002f9e:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
}
 8002fa2:	bf00      	nop
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	24004df4 	.word	0x24004df4
 8002fb0:	24004568 	.word	0x24004568
 8002fb4:	24000410 	.word	0x24000410
 8002fb8:	240002cc 	.word	0x240002cc
 8002fbc:	24000068 	.word	0x24000068
 8002fc0:	24000054 	.word	0x24000054

08002fc4 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 8002fca:	f7ff feef 	bl	8002dac <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 8002fce:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <SD_blackbox_write+0xa4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a26      	ldr	r2, [pc, #152]	@ (800306c <SD_blackbox_write+0xa8>)
 8002fd4:	6613      	str	r3, [r2, #96]	@ 0x60
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 8002fd6:	4b26      	ldr	r3, [pc, #152]	@ (8003070 <SD_blackbox_write+0xac>)
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4613      	mov	r3, r2
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	4a24      	ldr	r2, [pc, #144]	@ (8003074 <SD_blackbox_write+0xb0>)
 8002fe4:	4413      	add	r3, r2
 8002fe6:	22b0      	movs	r2, #176	@ 0xb0
 8002fe8:	4920      	ldr	r1, [pc, #128]	@ (800306c <SD_blackbox_write+0xa8>)
 8002fea:	4618      	mov	r0, r3
 8002fec:	f013 fc21 	bl	8016832 <memcpy>

	if(WriteCount == 15){
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8003070 <SD_blackbox_write+0xac>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	2b0f      	cmp	r3, #15
 8002ff6:	d129      	bne.n	800304c <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	71fb      	strb	r3, [r7, #7]
 8002ffc:	e00d      	b.n	800301a <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 8002ffe:	79fa      	ldrb	r2, [r7, #7]
 8003000:	4613      	mov	r3, r2
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	4a1b      	ldr	r2, [pc, #108]	@ (8003074 <SD_blackbox_write+0xb0>)
 8003008:	1899      	adds	r1, r3, r2
 800300a:	4b1b      	ldr	r3, [pc, #108]	@ (8003078 <SD_blackbox_write+0xb4>)
 800300c:	22b0      	movs	r2, #176	@ 0xb0
 800300e:	481b      	ldr	r0, [pc, #108]	@ (800307c <SD_blackbox_write+0xb8>)
 8003010:	f011 f9e9 	bl	80143e6 <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	3301      	adds	r3, #1
 8003018:	71fb      	strb	r3, [r7, #7]
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	2b0f      	cmp	r3, #15
 800301e:	d9ee      	bls.n	8002ffe <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8003020:	4816      	ldr	r0, [pc, #88]	@ (800307c <SD_blackbox_write+0xb8>)
 8003022:	f011 fb74 	bl	801470e <f_sync>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <SD_blackbox_write+0xbc>)
 800302c:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 800302e:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <SD_blackbox_write+0xac>)
 8003030:	2200      	movs	r2, #0
 8003032:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8003034:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <SD_blackbox_write+0xc0>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	b2da      	uxtb	r2, r3
 800303c:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <SD_blackbox_write+0xc0>)
 800303e:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <SD_blackbox_write+0xa4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3301      	adds	r3, #1
 8003046:	4a08      	ldr	r2, [pc, #32]	@ (8003068 <SD_blackbox_write+0xa4>)
 8003048:	6013      	str	r3, [r2, #0]
		return;
 800304a:	e00a      	b.n	8003062 <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 800304c:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <SD_blackbox_write+0xac>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <SD_blackbox_write+0xac>)
 8003056:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <SD_blackbox_write+0xa4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	4a02      	ldr	r2, [pc, #8]	@ (8003068 <SD_blackbox_write+0xa4>)
 8003060:	6013      	str	r3, [r2, #0]
}
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	24004618 	.word	0x24004618
 800306c:	24004568 	.word	0x24004568
 8003070:	2400461c 	.word	0x2400461c
 8003074:	24003578 	.word	0x24003578
 8003078:	24003574 	.word	0x24003574
 800307c:	2400150c 	.word	0x2400150c
 8003080:	2400356c 	.word	0x2400356c
 8003084:	2400461e 	.word	0x2400461e

08003088 <SD_init>:


void SD_init(void){
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 800308c:	2201      	movs	r2, #1
 800308e:	4909      	ldr	r1, [pc, #36]	@ (80030b4 <SD_init+0x2c>)
 8003090:	4809      	ldr	r0, [pc, #36]	@ (80030b8 <SD_init+0x30>)
 8003092:	f010 fe3b 	bl	8013d0c <f_mount>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <SD_init+0x34>)
 800309c:	701a      	strb	r2, [r3, #0]
	  SD_ConfigFileInit();
 800309e:	f7ff fde9 	bl	8002c74 <SD_ConfigFileInit>
	  SD_GainsInit();
 80030a2:	f7ff fe53 	bl	8002d4c <SD_GainsInit>
	  SD_CreateFlightPath();
 80030a6:	f7ff fe59 	bl	8002d5c <SD_CreateFlightPath>
	  SD_blackbox_init();
 80030aa:	f7ff fe71 	bl	8002d90 <SD_blackbox_init>
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	08018764 	.word	0x08018764
 80030b8:	240004d0 	.word	0x240004d0
 80030bc:	2400356c 	.word	0x2400356c

080030c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030c6:	4b15      	ldr	r3, [pc, #84]	@ (800311c <MX_DMA_Init+0x5c>)
 80030c8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80030cc:	4a13      	ldr	r2, [pc, #76]	@ (800311c <MX_DMA_Init+0x5c>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80030d6:	4b11      	ldr	r3, [pc, #68]	@ (800311c <MX_DMA_Init+0x5c>)
 80030d8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2100      	movs	r1, #0
 80030e8:	200b      	movs	r0, #11
 80030ea:	f002 fbc6 	bl	800587a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80030ee:	200b      	movs	r0, #11
 80030f0:	f002 fbdd 	bl	80058ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2100      	movs	r1, #0
 80030f8:	200c      	movs	r0, #12
 80030fa:	f002 fbbe 	bl	800587a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80030fe:	200c      	movs	r0, #12
 8003100:	f002 fbd5 	bl	80058ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003104:	2200      	movs	r2, #0
 8003106:	2100      	movs	r1, #0
 8003108:	200d      	movs	r0, #13
 800310a:	f002 fbb6 	bl	800587a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800310e:	200d      	movs	r0, #13
 8003110:	f002 fbcd 	bl	80058ae <HAL_NVIC_EnableIRQ>

}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	58024400 	.word	0x58024400

08003120 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003124:	4b2e      	ldr	r3, [pc, #184]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003126:	4a2f      	ldr	r2, [pc, #188]	@ (80031e4 <MX_FDCAN1_Init+0xc4>)
 8003128:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800312a:	4b2d      	ldr	r3, [pc, #180]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 800312c:	2200      	movs	r2, #0
 800312e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003130:	4b2b      	ldr	r3, [pc, #172]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003132:	2200      	movs	r2, #0
 8003134:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003136:	4b2a      	ldr	r3, [pc, #168]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003138:	2200      	movs	r2, #0
 800313a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800313c:	4b28      	ldr	r3, [pc, #160]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 800313e:	2200      	movs	r2, #0
 8003140:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003142:	4b27      	ldr	r3, [pc, #156]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003144:	2200      	movs	r2, #0
 8003146:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8003148:	4b25      	ldr	r3, [pc, #148]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 800314a:	2210      	movs	r2, #16
 800314c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800314e:	4b24      	ldr	r3, [pc, #144]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003150:	2201      	movs	r2, #1
 8003152:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8003154:	4b22      	ldr	r3, [pc, #136]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003156:	2202      	movs	r2, #2
 8003158:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800315a:	4b21      	ldr	r3, [pc, #132]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 800315c:	2202      	movs	r2, #2
 800315e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003160:	4b1f      	ldr	r3, [pc, #124]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003162:	2201      	movs	r2, #1
 8003164:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003166:	4b1e      	ldr	r3, [pc, #120]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003168:	2201      	movs	r2, #1
 800316a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800316c:	4b1c      	ldr	r3, [pc, #112]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 800316e:	2201      	movs	r2, #1
 8003170:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003172:	4b1b      	ldr	r3, [pc, #108]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003174:	2201      	movs	r2, #1
 8003176:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003178:	4b19      	ldr	r3, [pc, #100]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 800317a:	2200      	movs	r2, #0
 800317c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800317e:	4b18      	ldr	r3, [pc, #96]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003180:	2200      	movs	r2, #0
 8003182:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003184:	4b16      	ldr	r3, [pc, #88]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003186:	2200      	movs	r2, #0
 8003188:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800318a:	4b15      	ldr	r3, [pc, #84]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 800318c:	2200      	movs	r2, #0
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003190:	4b13      	ldr	r3, [pc, #76]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003192:	2204      	movs	r2, #4
 8003194:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003196:	4b12      	ldr	r3, [pc, #72]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 8003198:	2200      	movs	r2, #0
 800319a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800319c:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 800319e:	2204      	movs	r2, #4
 80031a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80031a2:	4b0f      	ldr	r3, [pc, #60]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80031a8:	4b0d      	ldr	r3, [pc, #52]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 80031aa:	2204      	movs	r2, #4
 80031ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80031ae:	4b0c      	ldr	r3, [pc, #48]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80031ba:	4b09      	ldr	r3, [pc, #36]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 80031bc:	2200      	movs	r2, #0
 80031be:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80031c0:	4b07      	ldr	r3, [pc, #28]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 80031c8:	2204      	movs	r2, #4
 80031ca:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80031cc:	4804      	ldr	r0, [pc, #16]	@ (80031e0 <MX_FDCAN1_Init+0xc0>)
 80031ce:	f005 faeb 	bl	80087a8 <HAL_FDCAN_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80031d8:	f000 ff9c 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	24004620 	.word	0x24004620
 80031e4:	4000a000 	.word	0x4000a000

080031e8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b0ba      	sub	sp, #232	@ 0xe8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003200:	f107 0310 	add.w	r3, r7, #16
 8003204:	22c0      	movs	r2, #192	@ 0xc0
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f013 fa78 	bl	80166fe <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2f      	ldr	r2, [pc, #188]	@ (80032d0 <HAL_FDCAN_MspInit+0xe8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d157      	bne.n	80032c8 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003218:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8003224:	2304      	movs	r3, #4
 8003226:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8003228:	2308      	movs	r3, #8
 800322a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800322c:	2302      	movs	r3, #2
 800322e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8003230:	2301      	movs	r3, #1
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003234:	2302      	movs	r3, #2
 8003236:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003238:	23c0      	movs	r3, #192	@ 0xc0
 800323a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800323c:	2300      	movs	r3, #0
 800323e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8003244:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800324c:	f107 0310 	add.w	r3, r7, #16
 8003250:	4618      	mov	r0, r3
 8003252:	f007 f903 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 800325c:	f000 ff5a 	bl	8004114 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003260:	4b1c      	ldr	r3, [pc, #112]	@ (80032d4 <HAL_FDCAN_MspInit+0xec>)
 8003262:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8003266:	4a1b      	ldr	r2, [pc, #108]	@ (80032d4 <HAL_FDCAN_MspInit+0xec>)
 8003268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8003270:	4b18      	ldr	r3, [pc, #96]	@ (80032d4 <HAL_FDCAN_MspInit+0xec>)
 8003272:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8003276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327e:	4b15      	ldr	r3, [pc, #84]	@ (80032d4 <HAL_FDCAN_MspInit+0xec>)
 8003280:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003284:	4a13      	ldr	r2, [pc, #76]	@ (80032d4 <HAL_FDCAN_MspInit+0xec>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800328e:	4b11      	ldr	r3, [pc, #68]	@ (80032d4 <HAL_FDCAN_MspInit+0xec>)
 8003290:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800329c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80032a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80032b6:	2309      	movs	r3, #9
 80032b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4805      	ldr	r0, [pc, #20]	@ (80032d8 <HAL_FDCAN_MspInit+0xf0>)
 80032c4:	f005 fdd4 	bl	8008e70 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80032c8:	bf00      	nop
 80032ca:	37e8      	adds	r7, #232	@ 0xe8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	4000a000 	.word	0x4000a000
 80032d4:	58024400 	.word	0x58024400
 80032d8:	58020000 	.word	0x58020000

080032dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	@ 0x28
 80032e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e2:	f107 0314 	add.w	r3, r7, #20
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	60da      	str	r2, [r3, #12]
 80032f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f2:	4b4e      	ldr	r3, [pc, #312]	@ (800342c <MX_GPIO_Init+0x150>)
 80032f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032f8:	4a4c      	ldr	r2, [pc, #304]	@ (800342c <MX_GPIO_Init+0x150>)
 80032fa:	f043 0304 	orr.w	r3, r3, #4
 80032fe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003302:	4b4a      	ldr	r3, [pc, #296]	@ (800342c <MX_GPIO_Init+0x150>)
 8003304:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003310:	4b46      	ldr	r3, [pc, #280]	@ (800342c <MX_GPIO_Init+0x150>)
 8003312:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003316:	4a45      	ldr	r2, [pc, #276]	@ (800342c <MX_GPIO_Init+0x150>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003320:	4b42      	ldr	r3, [pc, #264]	@ (800342c <MX_GPIO_Init+0x150>)
 8003322:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800332e:	4b3f      	ldr	r3, [pc, #252]	@ (800342c <MX_GPIO_Init+0x150>)
 8003330:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003334:	4a3d      	ldr	r2, [pc, #244]	@ (800342c <MX_GPIO_Init+0x150>)
 8003336:	f043 0302 	orr.w	r3, r3, #2
 800333a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800333e:	4b3b      	ldr	r3, [pc, #236]	@ (800342c <MX_GPIO_Init+0x150>)
 8003340:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800334c:	4b37      	ldr	r3, [pc, #220]	@ (800342c <MX_GPIO_Init+0x150>)
 800334e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003352:	4a36      	ldr	r2, [pc, #216]	@ (800342c <MX_GPIO_Init+0x150>)
 8003354:	f043 0308 	orr.w	r3, r3, #8
 8003358:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800335c:	4b33      	ldr	r3, [pc, #204]	@ (800342c <MX_GPIO_Init+0x150>)
 800335e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800336a:	2200      	movs	r2, #0
 800336c:	f242 010f 	movw	r1, #8207	@ 0x200f
 8003370:	482f      	ldr	r0, [pc, #188]	@ (8003430 <MX_GPIO_Init+0x154>)
 8003372:	f005 ff2d 	bl	80091d0 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8003376:	2200      	movs	r2, #0
 8003378:	2110      	movs	r1, #16
 800337a:	482e      	ldr	r0, [pc, #184]	@ (8003434 <MX_GPIO_Init+0x158>)
 800337c:	f005 ff28 	bl	80091d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8003380:	2200      	movs	r2, #0
 8003382:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8003386:	482c      	ldr	r0, [pc, #176]	@ (8003438 <MX_GPIO_Init+0x15c>)
 8003388:	f005 ff22 	bl	80091d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 800338c:	2200      	movs	r2, #0
 800338e:	2104      	movs	r1, #4
 8003390:	482a      	ldr	r0, [pc, #168]	@ (800343c <MX_GPIO_Init+0x160>)
 8003392:	f005 ff1d 	bl	80091d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8003396:	f242 030f 	movw	r3, #8207	@ 0x200f
 800339a:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339c:	2301      	movs	r3, #1
 800339e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a4:	2300      	movs	r3, #0
 80033a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	4619      	mov	r1, r3
 80033ae:	4820      	ldr	r0, [pc, #128]	@ (8003430 <MX_GPIO_Init+0x154>)
 80033b0:	f005 fd5e 	bl	8008e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 80033b4:	2310      	movs	r3, #16
 80033b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b8:	2301      	movs	r3, #1
 80033ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	2300      	movs	r3, #0
 80033c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	4619      	mov	r1, r3
 80033ca:	481a      	ldr	r0, [pc, #104]	@ (8003434 <MX_GPIO_Init+0x158>)
 80033cc:	f005 fd50 	bl	8008e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 80033d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d6:	2301      	movs	r3, #1
 80033d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	4619      	mov	r1, r3
 80033e8:	4813      	ldr	r0, [pc, #76]	@ (8003438 <MX_GPIO_Init+0x15c>)
 80033ea:	f005 fd41 	bl	8008e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80033ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	4619      	mov	r1, r3
 8003402:	480b      	ldr	r0, [pc, #44]	@ (8003430 <MX_GPIO_Init+0x154>)
 8003404:	f005 fd34 	bl	8008e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 8003408:	2304      	movs	r3, #4
 800340a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800340c:	2301      	movs	r3, #1
 800340e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003414:	2300      	movs	r3, #0
 8003416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	4619      	mov	r1, r3
 800341e:	4807      	ldr	r0, [pc, #28]	@ (800343c <MX_GPIO_Init+0x160>)
 8003420:	f005 fd26 	bl	8008e70 <HAL_GPIO_Init>

}
 8003424:	bf00      	nop
 8003426:	3728      	adds	r7, #40	@ 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	58024400 	.word	0x58024400
 8003430:	58020800 	.word	0x58020800
 8003434:	58020000 	.word	0x58020000
 8003438:	58020400 	.word	0x58020400
 800343c:	58020c00 	.word	0x58020c00

08003440 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003444:	4b1b      	ldr	r3, [pc, #108]	@ (80034b4 <MX_I2C3_Init+0x74>)
 8003446:	4a1c      	ldr	r2, [pc, #112]	@ (80034b8 <MX_I2C3_Init+0x78>)
 8003448:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 800344a:	4b1a      	ldr	r3, [pc, #104]	@ (80034b4 <MX_I2C3_Init+0x74>)
 800344c:	4a1b      	ldr	r2, [pc, #108]	@ (80034bc <MX_I2C3_Init+0x7c>)
 800344e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003450:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <MX_I2C3_Init+0x74>)
 8003452:	2200      	movs	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003456:	4b17      	ldr	r3, [pc, #92]	@ (80034b4 <MX_I2C3_Init+0x74>)
 8003458:	2201      	movs	r2, #1
 800345a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800345c:	4b15      	ldr	r3, [pc, #84]	@ (80034b4 <MX_I2C3_Init+0x74>)
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003462:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <MX_I2C3_Init+0x74>)
 8003464:	2200      	movs	r2, #0
 8003466:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003468:	4b12      	ldr	r3, [pc, #72]	@ (80034b4 <MX_I2C3_Init+0x74>)
 800346a:	2200      	movs	r2, #0
 800346c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800346e:	4b11      	ldr	r3, [pc, #68]	@ (80034b4 <MX_I2C3_Init+0x74>)
 8003470:	2200      	movs	r2, #0
 8003472:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003474:	4b0f      	ldr	r3, [pc, #60]	@ (80034b4 <MX_I2C3_Init+0x74>)
 8003476:	2200      	movs	r2, #0
 8003478:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800347a:	480e      	ldr	r0, [pc, #56]	@ (80034b4 <MX_I2C3_Init+0x74>)
 800347c:	f005 fec2 	bl	8009204 <HAL_I2C_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003486:	f000 fe45 	bl	8004114 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800348a:	2100      	movs	r1, #0
 800348c:	4809      	ldr	r0, [pc, #36]	@ (80034b4 <MX_I2C3_Init+0x74>)
 800348e:	f005 ff55 	bl	800933c <HAL_I2CEx_ConfigAnalogFilter>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003498:	f000 fe3c 	bl	8004114 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800349c:	2100      	movs	r1, #0
 800349e:	4805      	ldr	r0, [pc, #20]	@ (80034b4 <MX_I2C3_Init+0x74>)
 80034a0:	f005 ff97 	bl	80093d2 <HAL_I2CEx_ConfigDigitalFilter>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80034aa:	f000 fe33 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	240046c0 	.word	0x240046c0
 80034b8:	40005c00 	.word	0x40005c00
 80034bc:	20b0ccff 	.word	0x20b0ccff

080034c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b0bc      	sub	sp, #240	@ 0xf0
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034d8:	f107 0318 	add.w	r3, r7, #24
 80034dc:	22c0      	movs	r2, #192	@ 0xc0
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f013 f90c 	bl	80166fe <memset>
  if(i2cHandle->Instance==I2C3)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a39      	ldr	r2, [pc, #228]	@ (80035d0 <HAL_I2C_MspInit+0x110>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d16b      	bne.n	80035c8 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80034f0:	f04f 0208 	mov.w	r2, #8
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003502:	f107 0318 	add.w	r3, r7, #24
 8003506:	4618      	mov	r0, r3
 8003508:	f006 ffa8 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003512:	f000 fdff 	bl	8004114 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003516:	4b2f      	ldr	r3, [pc, #188]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 8003518:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800351c:	4a2d      	ldr	r2, [pc, #180]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003526:	4b2b      	ldr	r3, [pc, #172]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 8003528:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003534:	4b27      	ldr	r3, [pc, #156]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 8003536:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800353a:	4a26      	ldr	r2, [pc, #152]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003544:	4b23      	ldr	r3, [pc, #140]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 8003546:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003556:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800355a:	2312      	movs	r3, #18
 800355c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800356c:	2304      	movs	r3, #4
 800356e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003572:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003576:	4619      	mov	r1, r3
 8003578:	4817      	ldr	r0, [pc, #92]	@ (80035d8 <HAL_I2C_MspInit+0x118>)
 800357a:	f005 fc79 	bl	8008e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800357e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003586:	2312      	movs	r3, #18
 8003588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003592:	2300      	movs	r3, #0
 8003594:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003598:	2304      	movs	r3, #4
 800359a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80035a2:	4619      	mov	r1, r3
 80035a4:	480d      	ldr	r0, [pc, #52]	@ (80035dc <HAL_I2C_MspInit+0x11c>)
 80035a6:	f005 fc63 	bl	8008e70 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 80035ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80035b0:	4a08      	ldr	r2, [pc, #32]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 80035b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035b6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <HAL_I2C_MspInit+0x114>)
 80035bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80035c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80035c8:	bf00      	nop
 80035ca:	37f0      	adds	r7, #240	@ 0xf0
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40005c00 	.word	0x40005c00
 80035d4:	58024400 	.word	0x58024400
 80035d8:	58020800 	.word	0x58020800
 80035dc:	58020000 	.word	0x58020000

080035e0 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b0b2      	sub	sp, #200	@ 0xc8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 80035f8:	4ba9      	ldr	r3, [pc, #676]	@ (80038a0 <NMEA_parser+0x2b0>)
 80035fa:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80035fe:	461d      	mov	r5, r3
 8003600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800360a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800360c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003610:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 800361a:	f107 030c 	add.w	r3, r7, #12
 800361e:	2280      	movs	r2, #128	@ 0x80
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f013 f86b 	bl	80166fe <memset>
	fields[num++]=message;
 8003628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	33c8      	adds	r3, #200	@ 0xc8
 8003636:	443b      	add	r3, r7
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 800363e:	e00f      	b.n	8003660 <NMEA_parser+0x70>
		*message++ = 0;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 800364a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	33c8      	adds	r3, #200	@ 0xc8
 8003658:	443b      	add	r3, r7
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8003660:	212c      	movs	r1, #44	@ 0x2c
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f013 f853 	bl	801670e <strchr>
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e7      	bne.n	8003640 <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	498c      	ldr	r1, [pc, #560]	@ (80038a4 <NMEA_parser+0x2b4>)
 8003674:	4618      	mov	r0, r3
 8003676:	f7fc fe3b 	bl	80002f0 <strcmp>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11e      	bne.n	80036be <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4618      	mov	r0, r3
 8003684:	f012 f8ec 	bl	8015860 <atof>
 8003688:	eeb0 7b40 	vmov.f64	d7, d0
 800368c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003690:	4b83      	ldr	r3, [pc, #524]	@ (80038a0 <NMEA_parser+0x2b0>)
 8003692:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	4b81      	ldr	r3, [pc, #516]	@ (80038a0 <NMEA_parser+0x2b0>)
 800369c:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f012 f8dd 	bl	8015860 <atof>
 80036a6:	eeb0 7b40 	vmov.f64	d7, d0
 80036aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036ae:	4b7c      	ldr	r3, [pc, #496]	@ (80038a0 <NMEA_parser+0x2b0>)
 80036b0:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	4b79      	ldr	r3, [pc, #484]	@ (80038a0 <NMEA_parser+0x2b0>)
 80036ba:	751a      	strb	r2, [r3, #20]
 80036bc:	e10d      	b.n	80038da <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4979      	ldr	r1, [pc, #484]	@ (80038a8 <NMEA_parser+0x2b8>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc fe14 	bl	80002f0 <strcmp>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d130      	bne.n	8003730 <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f012 f8c5 	bl	8015860 <atof>
 80036d6:	eeb0 7b40 	vmov.f64	d7, d0
 80036da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036de:	4b70      	ldr	r3, [pc, #448]	@ (80038a0 <NMEA_parser+0x2b0>)
 80036e0:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	4618      	mov	r0, r3
 80036e8:	f012 f8bd 	bl	8015866 <atoi>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4a6c      	ldr	r2, [pc, #432]	@ (80038a0 <NMEA_parser+0x2b0>)
 80036f0:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f012 f8b3 	bl	8015860 <atof>
 80036fa:	eeb0 7b40 	vmov.f64	d7, d0
 80036fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003702:	4b67      	ldr	r3, [pc, #412]	@ (80038a0 <NMEA_parser+0x2b0>)
 8003704:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	4b64      	ldr	r3, [pc, #400]	@ (80038a0 <NMEA_parser+0x2b0>)
 800370e:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	4618      	mov	r0, r3
 8003714:	f012 f8a4 	bl	8015860 <atof>
 8003718:	eeb0 7b40 	vmov.f64	d7, d0
 800371c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003720:	4b5f      	ldr	r3, [pc, #380]	@ (80038a0 <NMEA_parser+0x2b0>)
 8003722:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 8003726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003728:	781a      	ldrb	r2, [r3, #0]
 800372a:	4b5d      	ldr	r3, [pc, #372]	@ (80038a0 <NMEA_parser+0x2b0>)
 800372c:	751a      	strb	r2, [r3, #20]
 800372e:	e0d4      	b.n	80038da <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	495e      	ldr	r1, [pc, #376]	@ (80038ac <NMEA_parser+0x2bc>)
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc fddb 	bl	80002f0 <strcmp>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d116      	bne.n	800376e <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	4618      	mov	r0, r3
 8003744:	f012 f88f 	bl	8015866 <atoi>
 8003748:	ee07 0a90 	vmov	s15, r0
 800374c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003750:	4b53      	ldr	r3, [pc, #332]	@ (80038a0 <NMEA_parser+0x2b0>)
 8003752:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 8003756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003758:	4618      	mov	r0, r3
 800375a:	f012 f884 	bl	8015866 <atoi>
 800375e:	ee07 0a90 	vmov	s15, r0
 8003762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003766:	4b4e      	ldr	r3, [pc, #312]	@ (80038a0 <NMEA_parser+0x2b0>)
 8003768:	edc3 7a08 	vstr	s15, [r3, #32]
 800376c:	e0b5      	b.n	80038da <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	494f      	ldr	r1, [pc, #316]	@ (80038b0 <NMEA_parser+0x2c0>)
 8003772:	4618      	mov	r0, r3
 8003774:	f7fc fdbc 	bl	80002f0 <strcmp>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d15c      	bne.n	8003838 <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4618      	mov	r0, r3
 8003782:	f012 f86d 	bl	8015860 <atof>
 8003786:	eeb0 7b40 	vmov.f64	d7, d0
 800378a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800378e:	4b44      	ldr	r3, [pc, #272]	@ (80038a0 <NMEA_parser+0x2b0>)
 8003790:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	4618      	mov	r0, r3
 8003798:	f012 f862 	bl	8015860 <atof>
 800379c:	eeb0 7b40 	vmov.f64	d7, d0
 80037a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037a4:	4b3e      	ldr	r3, [pc, #248]	@ (80038a0 <NMEA_parser+0x2b0>)
 80037a6:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	781a      	ldrb	r2, [r3, #0]
 80037ae:	4b3c      	ldr	r3, [pc, #240]	@ (80038a0 <NMEA_parser+0x2b0>)
 80037b0:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f012 f853 	bl	8015860 <atof>
 80037ba:	eeb0 7b40 	vmov.f64	d7, d0
 80037be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037c2:	4b37      	ldr	r3, [pc, #220]	@ (80038a0 <NMEA_parser+0x2b0>)
 80037c4:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	781a      	ldrb	r2, [r3, #0]
 80037cc:	4b34      	ldr	r3, [pc, #208]	@ (80038a0 <NMEA_parser+0x2b0>)
 80037ce:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 80037d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d2:	4618      	mov	r0, r3
 80037d4:	f012 f847 	bl	8015866 <atoi>
 80037d8:	4603      	mov	r3, r0
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	4b30      	ldr	r3, [pc, #192]	@ (80038a0 <NMEA_parser+0x2b0>)
 80037de:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	4618      	mov	r0, r3
 80037e6:	f012 f83e 	bl	8015866 <atoi>
 80037ea:	4603      	mov	r3, r0
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4b2c      	ldr	r3, [pc, #176]	@ (80038a0 <NMEA_parser+0x2b0>)
 80037f0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 80037f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f6:	4618      	mov	r0, r3
 80037f8:	f012 f832 	bl	8015860 <atof>
 80037fc:	eeb0 7b40 	vmov.f64	d7, d0
 8003800:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003804:	4b26      	ldr	r3, [pc, #152]	@ (80038a0 <NMEA_parser+0x2b0>)
 8003806:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	4618      	mov	r0, r3
 800380e:	f012 f827 	bl	8015860 <atof>
 8003812:	eeb0 7b40 	vmov.f64	d7, d0
 8003816:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800381a:	4b21      	ldr	r3, [pc, #132]	@ (80038a0 <NMEA_parser+0x2b0>)
 800381c:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 8003820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003822:	4618      	mov	r0, r3
 8003824:	f012 f81c 	bl	8015860 <atof>
 8003828:	eeb0 7b40 	vmov.f64	d7, d0
 800382c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003830:	4b1b      	ldr	r3, [pc, #108]	@ (80038a0 <NMEA_parser+0x2b0>)
 8003832:	edc3 7a07 	vstr	s15, [r3, #28]
 8003836:	e050      	b.n	80038da <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	491e      	ldr	r1, [pc, #120]	@ (80038b4 <NMEA_parser+0x2c4>)
 800383c:	4618      	mov	r0, r3
 800383e:	f7fc fd57 	bl	80002f0 <strcmp>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d137      	bne.n	80038b8 <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	4618      	mov	r0, r3
 800384c:	f012 f80b 	bl	8015866 <atoi>
 8003850:	4603      	mov	r3, r0
 8003852:	b2da      	uxtb	r2, r3
 8003854:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <NMEA_parser+0x2b0>)
 8003856:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 800385a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800385c:	4618      	mov	r0, r3
 800385e:	f011 ffff 	bl	8015860 <atof>
 8003862:	eeb0 7b40 	vmov.f64	d7, d0
 8003866:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800386a:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <NMEA_parser+0x2b0>)
 800386c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 8003870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003872:	4618      	mov	r0, r3
 8003874:	f011 fff4 	bl	8015860 <atof>
 8003878:	eeb0 7b40 	vmov.f64	d7, d0
 800387c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003880:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <NMEA_parser+0x2b0>)
 8003882:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 8003886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003888:	4618      	mov	r0, r3
 800388a:	f011 ffe9 	bl	8015860 <atof>
 800388e:	eeb0 7b40 	vmov.f64	d7, d0
 8003892:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003896:	4b02      	ldr	r3, [pc, #8]	@ (80038a0 <NMEA_parser+0x2b0>)
 8003898:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 800389c:	e01d      	b.n	80038da <NMEA_parser+0x2ea>
 800389e:	bf00      	nop
 80038a0:	24004dbc 	.word	0x24004dbc
 80038a4:	08018768 	.word	0x08018768
 80038a8:	08018770 	.word	0x08018770
 80038ac:	08018778 	.word	0x08018778
 80038b0:	08018780 	.word	0x08018780
 80038b4:	08018788 	.word	0x08018788

	}else if(strcmp(fields[0],"$GPGSV")==0){
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4931      	ldr	r1, [pc, #196]	@ (8003980 <NMEA_parser+0x390>)
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fc fd17 	bl	80002f0 <strcmp>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d108      	bne.n	80038da <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f011 ffcb 	bl	8015866 <atoi>
 80038d0:	4603      	mov	r3, r0
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003984 <NMEA_parser+0x394>)
 80038d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 80038da:	4b2a      	ldr	r3, [pc, #168]	@ (8003984 <NMEA_parser+0x394>)
 80038dc:	ed93 7a08 	vldr	s14, [r3, #32]
 80038e0:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80038e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ec:	ee17 3a90 	vmov	r3, s15
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bfb8      	it	lt
 80038f4:	425b      	neglt	r3, r3
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038fe:	4b22      	ldr	r3, [pc, #136]	@ (8003988 <NMEA_parser+0x398>)
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390c:	dd02      	ble.n	8003914 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 800390e:	4b1f      	ldr	r3, [pc, #124]	@ (800398c <NMEA_parser+0x39c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 8003914:	4b1b      	ldr	r3, [pc, #108]	@ (8003984 <NMEA_parser+0x394>)
 8003916:	ed93 7a08 	vldr	s14, [r3, #32]
 800391a:	4b1d      	ldr	r3, [pc, #116]	@ (8003990 <NMEA_parser+0x3a0>)
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003928:	dd0c      	ble.n	8003944 <NMEA_parser+0x354>
 800392a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800392e:	4b18      	ldr	r3, [pc, #96]	@ (8003990 <NMEA_parser+0x3a0>)
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393c:	d802      	bhi.n	8003944 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 800393e:	4b15      	ldr	r3, [pc, #84]	@ (8003994 <NMEA_parser+0x3a4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8003944:	4b0f      	ldr	r3, [pc, #60]	@ (8003984 <NMEA_parser+0x394>)
 8003946:	ed93 7a08 	vldr	s14, [r3, #32]
 800394a:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <NMEA_parser+0x3a0>)
 800394c:	edd3 7a00 	vldr	s15, [r3]
 8003950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003958:	d400      	bmi.n	800395c <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 800395a:	e00d      	b.n	8003978 <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 800395c:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003960:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <NMEA_parser+0x3a0>)
 8003962:	edd3 7a00 	vldr	s15, [r3]
 8003966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800396a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396e:	da00      	bge.n	8003972 <NMEA_parser+0x382>
}
 8003970:	e002      	b.n	8003978 <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 8003972:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <NMEA_parser+0x3a8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4798      	blx	r3
}
 8003978:	bf00      	nop
 800397a:	37c8      	adds	r7, #200	@ 0xc8
 800397c:	46bd      	mov	sp, r7
 800397e:	bdb0      	pop	{r4, r5, r7, pc}
 8003980:	08018790 	.word	0x08018790
 8003984:	24004dbc 	.word	0x24004dbc
 8003988:	24004da4 	.word	0x24004da4
 800398c:	24004da0 	.word	0x24004da0
 8003990:	24004dac 	.word	0x24004dac
 8003994:	24004da8 	.word	0x24004da8
 8003998:	24004db0 	.word	0x24004db0

0800399c <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	460a      	mov	r2, r1
 80039a6:	71fb      	strb	r3, [r7, #7]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	2b39      	cmp	r3, #57	@ 0x39
 80039b0:	d803      	bhi.n	80039ba <hx2int+0x1e>
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	3b30      	subs	r3, #48	@ 0x30
 80039b6:	71fb      	strb	r3, [r7, #7]
 80039b8:	e002      	b.n	80039c0 <hx2int+0x24>
	else n2=n2-'A'+10;
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	3b37      	subs	r3, #55	@ 0x37
 80039be:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 80039c0:	79bb      	ldrb	r3, [r7, #6]
 80039c2:	2b39      	cmp	r3, #57	@ 0x39
 80039c4:	d803      	bhi.n	80039ce <hx2int+0x32>
 80039c6:	79bb      	ldrb	r3, [r7, #6]
 80039c8:	3b30      	subs	r3, #48	@ 0x30
 80039ca:	71bb      	strb	r3, [r7, #6]
 80039cc:	e002      	b.n	80039d4 <hx2int+0x38>
	else n1=n1-'A'+10;
 80039ce:	79bb      	ldrb	r3, [r7, #6]
 80039d0:	3b37      	subs	r3, #55	@ 0x37
 80039d2:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	79bb      	ldrb	r3, [r7, #6]
 80039dc:	4413      	add	r3, r2
 80039de:	b2db      	uxtb	r3, r3

}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 80039fc:	e009      	b.n	8003a12 <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	73fa      	strb	r2, [r7, #15]
 8003a04:	461a      	mov	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	7bbb      	ldrb	r3, [r7, #14]
 8003a0e:	4053      	eors	r3, r2
 8003a10:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a1c:	d002      	beq.n	8003a24 <NMEA_checksum_clc+0x38>
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b7d      	cmp	r3, #125	@ 0x7d
 8003a22:	d9ec      	bls.n	80039fe <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	3301      	adds	r3, #1
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	7818      	ldrb	r0, [r3, #0]
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	3302      	adds	r3, #2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f7ff ffaf 	bl	800399c <hx2int>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8003a42:	7b7a      	ldrb	r2, [r7, #13]
 8003a44:	7bbb      	ldrb	r3, [r7, #14]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d001      	beq.n	8003a4e <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e000      	b.n	8003a50 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 8003a4e:	2300      	movs	r3, #0


}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
	int index = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 8003a62:	e005      	b.n	8003a70 <NMEA_read_line+0x18>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b18 <NMEA_read_line+0xc0>)
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	54d1      	strb	r1, [r2, r3]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a74:	ddf6      	ble.n	8003a64 <NMEA_read_line+0xc>

	index = 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8003a7a:	e01c      	b.n	8003ab6 <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8003a7c:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <NMEA_read_line+0xc4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a27      	ldr	r2, [pc, #156]	@ (8003b20 <NMEA_read_line+0xc8>)
 8003a82:	5cd1      	ldrb	r1, [r2, r3]
 8003a84:	4a24      	ldr	r2, [pc, #144]	@ (8003b18 <NMEA_read_line+0xc0>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8003a8e:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <NMEA_read_line+0xc4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a23      	ldr	r2, [pc, #140]	@ (8003b20 <NMEA_read_line+0xc8>)
 8003a94:	2100      	movs	r1, #0
 8003a96:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003a98:	4b20      	ldr	r3, [pc, #128]	@ (8003b1c <NMEA_read_line+0xc4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	425a      	negs	r2, r3
 8003aa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aa4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003aa8:	bf58      	it	pl
 8003aaa:	4253      	negpl	r3, r2
 8003aac:	4a1b      	ldr	r2, [pc, #108]	@ (8003b1c <NMEA_read_line+0xc4>)
 8003aae:	6013      	str	r3, [r2, #0]
		++index;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8003ab6:	4b19      	ldr	r3, [pc, #100]	@ (8003b1c <NMEA_read_line+0xc4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a19      	ldr	r2, [pc, #100]	@ (8003b20 <NMEA_read_line+0xc8>)
 8003abc:	5cd3      	ldrb	r3, [r2, r3]
 8003abe:	2b0a      	cmp	r3, #10
 8003ac0:	d002      	beq.n	8003ac8 <NMEA_read_line+0x70>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b7d      	cmp	r3, #125	@ 0x7d
 8003ac6:	ddd9      	ble.n	8003a7c <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8003ac8:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <NMEA_read_line+0xc4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a14      	ldr	r2, [pc, #80]	@ (8003b20 <NMEA_read_line+0xc8>)
 8003ace:	5cd1      	ldrb	r1, [r2, r3]
 8003ad0:	4a11      	ldr	r2, [pc, #68]	@ (8003b18 <NMEA_read_line+0xc0>)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8003ada:	4b10      	ldr	r3, [pc, #64]	@ (8003b1c <NMEA_read_line+0xc4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a10      	ldr	r2, [pc, #64]	@ (8003b20 <NMEA_read_line+0xc8>)
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b1c <NMEA_read_line+0xc4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	425a      	negs	r2, r3
 8003aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003af0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003af4:	bf58      	it	pl
 8003af6:	4253      	negpl	r3, r2
 8003af8:	4a08      	ldr	r2, [pc, #32]	@ (8003b1c <NMEA_read_line+0xc4>)
 8003afa:	6013      	str	r3, [r2, #0]
	++index;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3301      	adds	r3, #1
 8003b00:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8003b02:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <NMEA_read_line+0xcc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	4a06      	ldr	r2, [pc, #24]	@ (8003b24 <NMEA_read_line+0xcc>)
 8003b0a:	6013      	str	r3, [r2, #0]

}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	24004d14 	.word	0x24004d14
 8003b1c:	24004d98 	.word	0x24004d98
 8003b20:	24004914 	.word	0x24004914
 8003b24:	24004d9c 	.word	0x24004d9c

08003b28 <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8003b32:	200a      	movs	r0, #10
 8003b34:	f001 fda2 	bl	800567c <HAL_Delay>
	NMEA_huart=huart;
 8003b38:	4a12      	ldr	r2, [pc, #72]	@ (8003b84 <NMEA_init+0x5c>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8003b3e:	4a12      	ldr	r2, [pc, #72]	@ (8003b88 <NMEA_init+0x60>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8003b44:	4b0f      	ldr	r3, [pc, #60]	@ (8003b84 <NMEA_init+0x5c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <NMEA_init+0x5c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0210 	orr.w	r2, r2, #16
 8003b56:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8003b58:	4b0a      	ldr	r3, [pc, #40]	@ (8003b84 <NMEA_init+0x5c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b60:	490a      	ldr	r1, [pc, #40]	@ (8003b8c <NMEA_init+0x64>)
 8003b62:	4618      	mov	r0, r3
 8003b64:	f00a fda6 	bl	800e6b4 <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <NMEA_init+0x68>)
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b94 <NMEA_init+0x6c>)
 8003b6c:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <NMEA_init+0x70>)
 8003b70:	4a08      	ldr	r2, [pc, #32]	@ (8003b94 <NMEA_init+0x6c>)
 8003b72:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <NMEA_init+0x74>)
 8003b76:	4a07      	ldr	r2, [pc, #28]	@ (8003b94 <NMEA_init+0x6c>)
 8003b78:	601a      	str	r2, [r3, #0]
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	24004db4 	.word	0x24004db4
 8003b88:	24004db8 	.word	0x24004db8
 8003b8c:	24004714 	.word	0x24004714
 8003b90:	24004da0 	.word	0x24004da0
 8003b94:	080035e1 	.word	0x080035e1
 8003b98:	24004da8 	.word	0x24004da8
 8003b9c:	24004db0 	.word	0x24004db0

08003ba0 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 8003baa:	4b2d      	ldr	r3, [pc, #180]	@ (8003c60 <NMEA_UART_DMA_get_char+0xc0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	425a      	negs	r2, r3
 8003bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003bba:	bf58      	it	pl
 8003bbc:	4253      	negpl	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8003bc4:	4b27      	ldr	r3, [pc, #156]	@ (8003c64 <NMEA_UART_DMA_get_char+0xc4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d130      	bne.n	8003c30 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8003bce:	e010      	b.n	8003bf2 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8003bd0:	4b24      	ldr	r3, [pc, #144]	@ (8003c64 <NMEA_UART_DMA_get_char+0xc4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a24      	ldr	r2, [pc, #144]	@ (8003c68 <NMEA_UART_DMA_get_char+0xc8>)
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003bda:	4b22      	ldr	r3, [pc, #136]	@ (8003c64 <NMEA_UART_DMA_get_char+0xc4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	425a      	negs	r2, r3
 8003be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003bea:	bf58      	it	pl
 8003bec:	4253      	negpl	r3, r2
 8003bee:	4a1d      	ldr	r2, [pc, #116]	@ (8003c64 <NMEA_UART_DMA_get_char+0xc4>)
 8003bf0:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8003bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c64 <NMEA_UART_DMA_get_char+0xc4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c68 <NMEA_UART_DMA_get_char+0xc8>)
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
 8003bfa:	2b0a      	cmp	r3, #10
 8003bfc:	d005      	beq.n	8003c0a <NMEA_UART_DMA_get_char+0x6a>
 8003bfe:	4b19      	ldr	r3, [pc, #100]	@ (8003c64 <NMEA_UART_DMA_get_char+0xc4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a19      	ldr	r2, [pc, #100]	@ (8003c68 <NMEA_UART_DMA_get_char+0xc8>)
 8003c04:	5cd3      	ldrb	r3, [r2, r3]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e2      	bne.n	8003bd0 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 8003c0a:	4b16      	ldr	r3, [pc, #88]	@ (8003c64 <NMEA_UART_DMA_get_char+0xc4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a16      	ldr	r2, [pc, #88]	@ (8003c68 <NMEA_UART_DMA_get_char+0xc8>)
 8003c10:	2100      	movs	r1, #0
 8003c12:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8003c14:	4b13      	ldr	r3, [pc, #76]	@ (8003c64 <NMEA_UART_DMA_get_char+0xc4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	425a      	negs	r2, r3
 8003c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c20:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c24:	bf58      	it	pl
 8003c26:	4253      	negpl	r3, r2
 8003c28:	4a0e      	ldr	r2, [pc, #56]	@ (8003c64 <NMEA_UART_DMA_get_char+0xc4>)
 8003c2a:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8003c30:	4b0b      	ldr	r3, [pc, #44]	@ (8003c60 <NMEA_UART_DMA_get_char+0xc0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	490c      	ldr	r1, [pc, #48]	@ (8003c68 <NMEA_UART_DMA_get_char+0xc8>)
 8003c36:	79fa      	ldrb	r2, [r7, #7]
 8003c38:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 8003c3a:	4a09      	ldr	r2, [pc, #36]	@ (8003c60 <NMEA_UART_DMA_get_char+0xc0>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	2b0a      	cmp	r3, #10
 8003c44:	d104      	bne.n	8003c50 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 8003c46:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <NMEA_UART_DMA_get_char+0xcc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	4a07      	ldr	r2, [pc, #28]	@ (8003c6c <NMEA_UART_DMA_get_char+0xcc>)
 8003c4e:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	24004d94 	.word	0x24004d94
 8003c64:	24004d98 	.word	0x24004d98
 8003c68:	24004914 	.word	0x24004914
 8003c6c:	24004d9c 	.word	0x24004d9c

08003c70 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 8003c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a4a      	ldr	r2, [pc, #296]	@ (8003dac <NMEA_UART_DMA_copy_buffer+0x13c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d059      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003c86:	4b48      	ldr	r3, [pc, #288]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a48      	ldr	r2, [pc, #288]	@ (8003db0 <NMEA_UART_DMA_copy_buffer+0x140>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d053      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003c92:	4b45      	ldr	r3, [pc, #276]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a46      	ldr	r2, [pc, #280]	@ (8003db4 <NMEA_UART_DMA_copy_buffer+0x144>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d04d      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003c9e:	4b42      	ldr	r3, [pc, #264]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a44      	ldr	r2, [pc, #272]	@ (8003db8 <NMEA_UART_DMA_copy_buffer+0x148>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d047      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003caa:	4b3f      	ldr	r3, [pc, #252]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a42      	ldr	r2, [pc, #264]	@ (8003dbc <NMEA_UART_DMA_copy_buffer+0x14c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d041      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cb6:	4b3c      	ldr	r3, [pc, #240]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a40      	ldr	r2, [pc, #256]	@ (8003dc0 <NMEA_UART_DMA_copy_buffer+0x150>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d03b      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cc2:	4b39      	ldr	r3, [pc, #228]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3e      	ldr	r2, [pc, #248]	@ (8003dc4 <NMEA_UART_DMA_copy_buffer+0x154>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d035      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cce:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8003dc8 <NMEA_UART_DMA_copy_buffer+0x158>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d02f      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cda:	4b33      	ldr	r3, [pc, #204]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a3a      	ldr	r2, [pc, #232]	@ (8003dcc <NMEA_UART_DMA_copy_buffer+0x15c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d029      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003ce6:	4b30      	ldr	r3, [pc, #192]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a38      	ldr	r2, [pc, #224]	@ (8003dd0 <NMEA_UART_DMA_copy_buffer+0x160>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d023      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a36      	ldr	r2, [pc, #216]	@ (8003dd4 <NMEA_UART_DMA_copy_buffer+0x164>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01d      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a34      	ldr	r2, [pc, #208]	@ (8003dd8 <NMEA_UART_DMA_copy_buffer+0x168>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d017      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003d0a:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a32      	ldr	r2, [pc, #200]	@ (8003ddc <NMEA_UART_DMA_copy_buffer+0x16c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d011      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003d16:	4b24      	ldr	r3, [pc, #144]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a30      	ldr	r2, [pc, #192]	@ (8003de0 <NMEA_UART_DMA_copy_buffer+0x170>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00b      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003d22:	4b21      	ldr	r3, [pc, #132]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a2e      	ldr	r2, [pc, #184]	@ (8003de4 <NMEA_UART_DMA_copy_buffer+0x174>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d005      	beq.n	8003d3a <NMEA_UART_DMA_copy_buffer+0xca>
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2c      	ldr	r2, [pc, #176]	@ (8003de8 <NMEA_UART_DMA_copy_buffer+0x178>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d106      	bne.n	8003d48 <NMEA_UART_DMA_copy_buffer+0xd8>
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003d46:	e005      	b.n	8003d54 <NMEA_UART_DMA_copy_buffer+0xe4>
 8003d48:	4b17      	ldr	r3, [pc, #92]	@ (8003da8 <NMEA_UART_DMA_copy_buffer+0x138>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003d54:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	e013      	b.n	8003d84 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8003d5c:	4a23      	ldr	r2, [pc, #140]	@ (8003dec <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4413      	add	r3, r2
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff1b 	bl	8003ba0 <NMEA_UART_DMA_get_char>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8003d74:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4413      	add	r3, r2
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	3301      	adds	r3, #1
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	dbe7      	blt.n	8003d5c <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8003d8c:	4b18      	ldr	r3, [pc, #96]	@ (8003df0 <NMEA_UART_DMA_copy_buffer+0x180>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d94:	4915      	ldr	r1, [pc, #84]	@ (8003dec <NMEA_UART_DMA_copy_buffer+0x17c>)
 8003d96:	4618      	mov	r0, r3
 8003d98:	f00a fc8c 	bl	800e6b4 <HAL_UART_Receive_DMA>
	return stat;
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	24004db8 	.word	0x24004db8
 8003dac:	40020010 	.word	0x40020010
 8003db0:	40020028 	.word	0x40020028
 8003db4:	40020040 	.word	0x40020040
 8003db8:	40020058 	.word	0x40020058
 8003dbc:	40020070 	.word	0x40020070
 8003dc0:	40020088 	.word	0x40020088
 8003dc4:	400200a0 	.word	0x400200a0
 8003dc8:	400200b8 	.word	0x400200b8
 8003dcc:	40020410 	.word	0x40020410
 8003dd0:	40020428 	.word	0x40020428
 8003dd4:	40020440 	.word	0x40020440
 8003dd8:	40020458 	.word	0x40020458
 8003ddc:	40020470 	.word	0x40020470
 8003de0:	40020488 	.word	0x40020488
 8003de4:	400204a0 	.word	0x400204a0
 8003de8:	400204b8 	.word	0x400204b8
 8003dec:	24004714 	.word	0x24004714
 8003df0:	24004db4 	.word	0x24004db4

08003df4 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8003dfe:	e00d      	b.n	8003e1c <NMEA_process_task+0x28>
		NMEA_read_line();
 8003e00:	f7ff fe2a 	bl	8003a58 <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8003e04:	480a      	ldr	r0, [pc, #40]	@ (8003e30 <NMEA_process_task+0x3c>)
 8003e06:	f7ff fdf1 	bl	80039ec <NMEA_checksum_clc>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8003e10:	4807      	ldr	r0, [pc, #28]	@ (8003e30 <NMEA_process_task+0x3c>)
 8003e12:	f7ff fbed 	bl	80035f0 <NMEA_parser>
 8003e16:	e001      	b.n	8003e1c <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <NMEA_process_task+0x40>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dced      	bgt.n	8003e00 <NMEA_process_task+0xc>
	}
	return stat;
 8003e24:	79fb      	ldrb	r3, [r7, #7]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	24004d14 	.word	0x24004d14
 8003e34:	24004d9c 	.word	0x24004d9c

08003e38 <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8003e42:	4b0d      	ldr	r3, [pc, #52]	@ (8003e78 <user_UART_IDLE_IT_handler+0x40>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d10d      	bne.n	8003e6e <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8003e52:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <user_UART_IDLE_IT_handler+0x40>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2210      	movs	r2, #16
 8003e5a:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8003e5c:	4b06      	ldr	r3, [pc, #24]	@ (8003e78 <user_UART_IDLE_IT_handler+0x40>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f00a fc73 	bl	800e74c <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8003e66:	f7ff ff03 	bl	8003c70 <NMEA_UART_DMA_copy_buffer>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	24004db4 	.word	0x24004db4

08003e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003e80:	f000 f91c 	bl	80040bc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e84:	f001 fb68 	bl	8005558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e88:	f000 f844 	bl	8003f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e8c:	f7ff fa26 	bl	80032dc <MX_GPIO_Init>
  MX_DMA_Init();
 8003e90:	f7ff f916 	bl	80030c0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003e94:	f7ff f944 	bl	8003120 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8003e98:	f7ff fad2 	bl	8003440 <MX_I2C3_Init>
  MX_SPI1_Init();
 8003e9c:	f000 f940 	bl	8004120 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003ea0:	f000 f994 	bl	80041cc <MX_SPI2_Init>
  MX_TIM2_Init();
 8003ea4:	f000 fc92 	bl	80047cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8003ea8:	f000 fd0c 	bl	80048c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003eac:	f000 fd70 	bl	8004990 <MX_TIM4_Init>
  MX_UART4_Init();
 8003eb0:	f000 ffd4 	bl	8004e5c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8003eb4:	f001 f81e 	bl	8004ef4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003eb8:	f001 f8b8 	bl	800502c <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8003ebc:	f000 fe54 	bl	8004b68 <MX_TIM13_Init>
  MX_FATFS_Init();
 8003ec0:	f00c fe54 	bl	8010b6c <MX_FATFS_Init>
  MX_TIM6_Init();
 8003ec4:	f000 fde0 	bl	8004a88 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8003ec8:	f001 f864 	bl	8004f94 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8003ecc:	f000 fe14 	bl	8004af8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8003ed0:	f7fd faf2 	bl	80014b8 <BMP280_init>
  SD_init();
 8003ed4:	f7ff f8d8 	bl	8003088 <SD_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8003ed8:	2201      	movs	r2, #1
 8003eda:	4908      	ldr	r1, [pc, #32]	@ (8003efc <main+0x80>)
 8003edc:	4808      	ldr	r0, [pc, #32]	@ (8003f00 <main+0x84>)
 8003ede:	f00a fbe9 	bl	800e6b4 <HAL_UART_Receive_DMA>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8003ee2:	4908      	ldr	r1, [pc, #32]	@ (8003f04 <main+0x88>)
 8003ee4:	4808      	ldr	r0, [pc, #32]	@ (8003f08 <main+0x8c>)
 8003ee6:	f7ff fe1f 	bl	8003b28 <NMEA_init>
  HAL_TIM_Base_Start_IT(&htim6);
 8003eea:	4808      	ldr	r0, [pc, #32]	@ (8003f0c <main+0x90>)
 8003eec:	f009 fa94 	bl	800d418 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8003ef0:	4807      	ldr	r0, [pc, #28]	@ (8003f10 <main+0x94>)
 8003ef2:	f009 fa91 	bl	800d418 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NMEA_process_task();
 8003ef6:	f7ff ff7d 	bl	8003df4 <NMEA_process_task>
 8003efa:	e7fc      	b.n	8003ef6 <main+0x7a>
 8003efc:	24000403 	.word	0x24000403
 8003f00:	240051fc 	.word	0x240051fc
 8003f04:	24005324 	.word	0x24005324
 8003f08:	240050d4 	.word	0x240050d4
 8003f0c:	24004ff0 	.word	0x24004ff0
 8003f10:	2400503c 	.word	0x2400503c

08003f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b09c      	sub	sp, #112	@ 0x70
 8003f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f1e:	224c      	movs	r2, #76	@ 0x4c
 8003f20:	2100      	movs	r1, #0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f012 fbeb 	bl	80166fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f012 fbe5 	bl	80166fe <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8003f34:	4b30      	ldr	r3, [pc, #192]	@ (8003ff8 <SystemClock_Config+0xe4>)
 8003f36:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003f3e:	2002      	movs	r0, #2
 8003f40:	f005 fa94 	bl	800946c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003f44:	2300      	movs	r3, #0
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	4b2c      	ldr	r3, [pc, #176]	@ (8003ffc <SystemClock_Config+0xe8>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ffc <SystemClock_Config+0xe8>)
 8003f4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f52:	6193      	str	r3, [r2, #24]
 8003f54:	4b29      	ldr	r3, [pc, #164]	@ (8003ffc <SystemClock_Config+0xe8>)
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003f60:	bf00      	nop
 8003f62:	4b26      	ldr	r3, [pc, #152]	@ (8003ffc <SystemClock_Config+0xe8>)
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6e:	d1f8      	bne.n	8003f62 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f70:	2302      	movs	r3, #2
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003f74:	2301      	movs	r3, #1
 8003f76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8003f78:	2340      	movs	r3, #64	@ 0x40
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f80:	2300      	movs	r3, #0
 8003f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f84:	2304      	movs	r3, #4
 8003f86:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8003f88:	2323      	movs	r3, #35	@ 0x23
 8003f8a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003f90:	2302      	movs	r3, #2
 8003f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003f94:	2302      	movs	r3, #2
 8003f96:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003f98:	230c      	movs	r3, #12
 8003f9a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f005 fa99 	bl	80094e0 <HAL_RCC_OscConfig>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003fb4:	f000 f8ae 	bl	8004114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fb8:	233f      	movs	r3, #63	@ 0x3f
 8003fba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003fc8:	2340      	movs	r3, #64	@ 0x40
 8003fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003fcc:	2340      	movs	r3, #64	@ 0x40
 8003fce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003fd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fd4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003fd6:	2340      	movs	r3, #64	@ 0x40
 8003fd8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	2106      	movs	r1, #6
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f005 feb0 	bl	8009d44 <HAL_RCC_ClockConfig>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <SystemClock_Config+0xda>
  {
    Error_Handler();
 8003fea:	f000 f893 	bl	8004114 <Error_Handler>
  }
}
 8003fee:	bf00      	nop
 8003ff0:	3770      	adds	r7, #112	@ 0x70
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	58024800 	.word	0x58024800

08004000 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a10      	ldr	r2, [pc, #64]	@ (8004050 <HAL_UART_RxCpltCallback+0x50>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d10a      	bne.n	8004028 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8004012:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_UART_RxCpltCallback+0x54>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe f98e 	bl	8002338 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 800401c:	2201      	movs	r2, #1
 800401e:	490d      	ldr	r1, [pc, #52]	@ (8004054 <HAL_UART_RxCpltCallback+0x54>)
 8004020:	480d      	ldr	r0, [pc, #52]	@ (8004058 <HAL_UART_RxCpltCallback+0x58>)
 8004022:	f00a fb47 	bl	800e6b4 <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == UART4){


    }
}
 8004026:	e00e      	b.n	8004046 <HAL_UART_RxCpltCallback+0x46>
    else if (huart -> Instance == USART3){
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0b      	ldr	r2, [pc, #44]	@ (800405c <HAL_UART_RxCpltCallback+0x5c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d109      	bne.n	8004046 <HAL_UART_RxCpltCallback+0x46>
        BNO_Receive(BNO_BufferByte);
 8004032:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <HAL_UART_RxCpltCallback+0x60>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd ff78 	bl	8001f2c <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 800403c:	2201      	movs	r2, #1
 800403e:	4908      	ldr	r1, [pc, #32]	@ (8004060 <HAL_UART_RxCpltCallback+0x60>)
 8004040:	4808      	ldr	r0, [pc, #32]	@ (8004064 <HAL_UART_RxCpltCallback+0x64>)
 8004042:	f00a fb37 	bl	800e6b4 <HAL_UART_Receive_DMA>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40011000 	.word	0x40011000
 8004054:	240004cd 	.word	0x240004cd
 8004058:	24005168 	.word	0x24005168
 800405c:	40004800 	.word	0x40004800
 8004060:	24000403 	.word	0x24000403
 8004064:	240051fc 	.word	0x240051fc

08004068 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	//Interrupción cada 1 ms
	if (htim -> Instance == TIM6){
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0e      	ldr	r2, [pc, #56]	@ (80040b0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <HAL_TIM_PeriodElapsedCallback+0x24>
		TimeOn_Counter++;
 800407a:	4b0e      	ldr	r3, [pc, #56]	@ (80040b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3301      	adds	r3, #1
 8004080:	4a0c      	ldr	r2, [pc, #48]	@ (80040b4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004082:	6013      	str	r3, [r2, #0]
		LED_Tasks();
 8004084:	f7fe f8a6 	bl	80021d4 <LED_Tasks>
		SBUS_IntegrityVerification();
 8004088:	f7fe fd28 	bl	8002adc <SBUS_IntegrityVerification>
	}
	//Interrupción cada 10 ms
	if (htim -> Instance == TIM7){
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a09      	ldr	r2, [pc, #36]	@ (80040b8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d107      	bne.n	80040a6 <HAL_TIM_PeriodElapsedCallback+0x3e>
		BNO_Tasks();
 8004096:	f7fd ffd9 	bl	800204c <BNO_Tasks>
		BMP280_calculate();
 800409a:	f7fd fa33 	bl	8001504 <BMP280_calculate>

		PWM_Assing();
 800409e:	f7fe f8e7 	bl	8002270 <PWM_Assing>
		SD_blackbox_write();
 80040a2:	f7fe ff8f 	bl	8002fc4 <SD_blackbox_write>
	}
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40001000 	.word	0x40001000
 80040b4:	24004df4 	.word	0x24004df4
 80040b8:	40001400 	.word	0x40001400

080040bc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80040c2:	463b      	mov	r3, r7
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80040ce:	f001 fc09 	bl	80058e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80040d2:	2301      	movs	r3, #1
 80040d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80040da:	2300      	movs	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80040de:	231f      	movs	r3, #31
 80040e0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80040e2:	2387      	movs	r3, #135	@ 0x87
 80040e4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80040ea:	2300      	movs	r3, #0
 80040ec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80040ee:	2301      	movs	r3, #1
 80040f0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80040f2:	2301      	movs	r3, #1
 80040f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80040fe:	463b      	mov	r3, r7
 8004100:	4618      	mov	r0, r3
 8004102:	f001 fc27 	bl	8005954 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004106:	2004      	movs	r0, #4
 8004108:	f001 fc04 	bl	8005914 <HAL_MPU_Enable>

}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004118:	b672      	cpsid	i
}
 800411a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <Error_Handler+0x8>

08004120 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004124:	4b27      	ldr	r3, [pc, #156]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 8004126:	4a28      	ldr	r2, [pc, #160]	@ (80041c8 <MX_SPI1_Init+0xa8>)
 8004128:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800412a:	4b26      	ldr	r3, [pc, #152]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 800412c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004130:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004132:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 8004134:	2200      	movs	r2, #0
 8004136:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004138:	4b22      	ldr	r3, [pc, #136]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 800413a:	2207      	movs	r2, #7
 800413c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800413e:	4b21      	ldr	r3, [pc, #132]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 8004140:	2200      	movs	r2, #0
 8004142:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004144:	4b1f      	ldr	r3, [pc, #124]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 8004146:	2200      	movs	r2, #0
 8004148:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800414a:	4b1e      	ldr	r3, [pc, #120]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 800414c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004150:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004152:	4b1c      	ldr	r3, [pc, #112]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 8004154:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8004158:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800415a:	4b1a      	ldr	r3, [pc, #104]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 800415c:	2200      	movs	r2, #0
 800415e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004160:	4b18      	ldr	r3, [pc, #96]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 8004162:	2200      	movs	r2, #0
 8004164:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004166:	4b17      	ldr	r3, [pc, #92]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 8004168:	2200      	movs	r2, #0
 800416a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800416c:	4b15      	ldr	r3, [pc, #84]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 800416e:	2200      	movs	r2, #0
 8004170:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004172:	4b14      	ldr	r3, [pc, #80]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 8004174:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004178:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800417a:	4b12      	ldr	r3, [pc, #72]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 800417c:	2200      	movs	r2, #0
 800417e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004180:	4b10      	ldr	r3, [pc, #64]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 8004182:	2200      	movs	r2, #0
 8004184:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004186:	4b0f      	ldr	r3, [pc, #60]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 8004188:	2200      	movs	r2, #0
 800418a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800418c:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 800418e:	2200      	movs	r2, #0
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004192:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 8004194:	2200      	movs	r2, #0
 8004196:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004198:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 800419a:	2200      	movs	r2, #0
 800419c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800419e:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80041a4:	4b07      	ldr	r3, [pc, #28]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80041aa:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041b0:	4804      	ldr	r0, [pc, #16]	@ (80041c4 <MX_SPI1_Init+0xa4>)
 80041b2:	f007 ff33 	bl	800c01c <HAL_SPI_Init>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80041bc:	f7ff ffaa 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041c0:	bf00      	nop
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	24004df8 	.word	0x24004df8
 80041c8:	40013000 	.word	0x40013000

080041cc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80041d0:	4b27      	ldr	r3, [pc, #156]	@ (8004270 <MX_SPI2_Init+0xa4>)
 80041d2:	4a28      	ldr	r2, [pc, #160]	@ (8004274 <MX_SPI2_Init+0xa8>)
 80041d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80041d6:	4b26      	ldr	r3, [pc, #152]	@ (8004270 <MX_SPI2_Init+0xa4>)
 80041d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80041dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80041de:	4b24      	ldr	r3, [pc, #144]	@ (8004270 <MX_SPI2_Init+0xa4>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80041e4:	4b22      	ldr	r3, [pc, #136]	@ (8004270 <MX_SPI2_Init+0xa4>)
 80041e6:	2207      	movs	r2, #7
 80041e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ea:	4b21      	ldr	r3, [pc, #132]	@ (8004270 <MX_SPI2_Init+0xa4>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004270 <MX_SPI2_Init+0xa4>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80041f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <MX_SPI2_Init+0xa4>)
 80041f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80041fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80041fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004270 <MX_SPI2_Init+0xa4>)
 8004200:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8004204:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004206:	4b1a      	ldr	r3, [pc, #104]	@ (8004270 <MX_SPI2_Init+0xa4>)
 8004208:	2200      	movs	r2, #0
 800420a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800420c:	4b18      	ldr	r3, [pc, #96]	@ (8004270 <MX_SPI2_Init+0xa4>)
 800420e:	2200      	movs	r2, #0
 8004210:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004212:	4b17      	ldr	r3, [pc, #92]	@ (8004270 <MX_SPI2_Init+0xa4>)
 8004214:	2200      	movs	r2, #0
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004218:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <MX_SPI2_Init+0xa4>)
 800421a:	2200      	movs	r2, #0
 800421c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800421e:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <MX_SPI2_Init+0xa4>)
 8004220:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004224:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004226:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <MX_SPI2_Init+0xa4>)
 8004228:	2200      	movs	r2, #0
 800422a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800422c:	4b10      	ldr	r3, [pc, #64]	@ (8004270 <MX_SPI2_Init+0xa4>)
 800422e:	2200      	movs	r2, #0
 8004230:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004232:	4b0f      	ldr	r3, [pc, #60]	@ (8004270 <MX_SPI2_Init+0xa4>)
 8004234:	2200      	movs	r2, #0
 8004236:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004238:	4b0d      	ldr	r3, [pc, #52]	@ (8004270 <MX_SPI2_Init+0xa4>)
 800423a:	2200      	movs	r2, #0
 800423c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800423e:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <MX_SPI2_Init+0xa4>)
 8004240:	2200      	movs	r2, #0
 8004242:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004244:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <MX_SPI2_Init+0xa4>)
 8004246:	2200      	movs	r2, #0
 8004248:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800424a:	4b09      	ldr	r3, [pc, #36]	@ (8004270 <MX_SPI2_Init+0xa4>)
 800424c:	2200      	movs	r2, #0
 800424e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004250:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <MX_SPI2_Init+0xa4>)
 8004252:	2200      	movs	r2, #0
 8004254:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <MX_SPI2_Init+0xa4>)
 8004258:	2200      	movs	r2, #0
 800425a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800425c:	4804      	ldr	r0, [pc, #16]	@ (8004270 <MX_SPI2_Init+0xa4>)
 800425e:	f007 fedd 	bl	800c01c <HAL_SPI_Init>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8004268:	f7ff ff54 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800426c:	bf00      	nop
 800426e:	bd80      	pop	{r7, pc}
 8004270:	24004e80 	.word	0x24004e80
 8004274:	40003800 	.word	0x40003800

08004278 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b0bc      	sub	sp, #240	@ 0xf0
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004280:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	60da      	str	r2, [r3, #12]
 800428e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004290:	f107 0318 	add.w	r3, r7, #24
 8004294:	22c0      	movs	r2, #192	@ 0xc0
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f012 fa30 	bl	80166fe <memset>
  if(spiHandle->Instance==SPI1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a4c      	ldr	r2, [pc, #304]	@ (80043d4 <HAL_SPI_MspInit+0x15c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d145      	bne.n	8004334 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80042a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042b8:	f107 0318 	add.w	r3, r7, #24
 80042bc:	4618      	mov	r0, r3
 80042be:	f006 f8cd 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80042c8:	f7ff ff24 	bl	8004114 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042cc:	4b42      	ldr	r3, [pc, #264]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 80042ce:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80042d2:	4a41      	ldr	r2, [pc, #260]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 80042d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042d8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80042dc:	4b3e      	ldr	r3, [pc, #248]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 80042de:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80042e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ea:	4b3b      	ldr	r3, [pc, #236]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 80042ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80042f0:	4a39      	ldr	r2, [pc, #228]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80042fa:	4b37      	ldr	r3, [pc, #220]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 80042fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8004308:	23e0      	movs	r3, #224	@ 0xe0
 800430a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430e:	2302      	movs	r3, #2
 8004310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431a:	2300      	movs	r3, #0
 800431c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004320:	2305      	movs	r3, #5
 8004322:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004326:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800432a:	4619      	mov	r1, r3
 800432c:	482b      	ldr	r0, [pc, #172]	@ (80043dc <HAL_SPI_MspInit+0x164>)
 800432e:	f004 fd9f 	bl	8008e70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004332:	e04a      	b.n	80043ca <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a29      	ldr	r2, [pc, #164]	@ (80043e0 <HAL_SPI_MspInit+0x168>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d145      	bne.n	80043ca <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800433e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800434a:	2300      	movs	r3, #0
 800434c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800434e:	f107 0318 	add.w	r3, r7, #24
 8004352:	4618      	mov	r0, r3
 8004354:	f006 f882 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800435e:	f7ff fed9 	bl	8004114 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004362:	4b1d      	ldr	r3, [pc, #116]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 8004364:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004368:	4a1b      	ldr	r2, [pc, #108]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 800436a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800436e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004372:	4b19      	ldr	r3, [pc, #100]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 8004374:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004378:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004380:	4b15      	ldr	r3, [pc, #84]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 8004382:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004386:	4a14      	ldr	r2, [pc, #80]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 8004388:	f043 0302 	orr.w	r3, r3, #2
 800438c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004390:	4b11      	ldr	r3, [pc, #68]	@ (80043d8 <HAL_SPI_MspInit+0x160>)
 8004392:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 800439e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80043a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a6:	2302      	movs	r3, #2
 80043a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043b8:	2305      	movs	r3, #5
 80043ba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043be:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80043c2:	4619      	mov	r1, r3
 80043c4:	4807      	ldr	r0, [pc, #28]	@ (80043e4 <HAL_SPI_MspInit+0x16c>)
 80043c6:	f004 fd53 	bl	8008e70 <HAL_GPIO_Init>
}
 80043ca:	bf00      	nop
 80043cc:	37f0      	adds	r7, #240	@ 0xf0
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40013000 	.word	0x40013000
 80043d8:	58024400 	.word	0x58024400
 80043dc:	58020000 	.word	0x58020000
 80043e0:	40003800 	.word	0x40003800
 80043e4:	58020400 	.word	0x58020400

080043e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <HAL_MspInit+0x30>)
 80043f0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80043f4:	4a08      	ldr	r2, [pc, #32]	@ (8004418 <HAL_MspInit+0x30>)
 80043f6:	f043 0302 	orr.w	r3, r3, #2
 80043fa:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80043fe:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_MspInit+0x30>)
 8004400:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	58024400 	.word	0x58024400

0800441c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004420:	bf00      	nop
 8004422:	e7fd      	b.n	8004420 <NMI_Handler+0x4>

08004424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004428:	bf00      	nop
 800442a:	e7fd      	b.n	8004428 <HardFault_Handler+0x4>

0800442c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004430:	bf00      	nop
 8004432:	e7fd      	b.n	8004430 <MemManage_Handler+0x4>

08004434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004438:	bf00      	nop
 800443a:	e7fd      	b.n	8004438 <BusFault_Handler+0x4>

0800443c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004440:	bf00      	nop
 8004442:	e7fd      	b.n	8004440 <UsageFault_Handler+0x4>

08004444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004452:	b480      	push	{r7}
 8004454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004456:	bf00      	nop
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <SysTick_Handler+0x34>)
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <SysTick_Handler+0x18>
	    Timer1--;
 800447c:	4b09      	ldr	r3, [pc, #36]	@ (80044a4 <SysTick_Handler+0x34>)
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	4b07      	ldr	r3, [pc, #28]	@ (80044a4 <SysTick_Handler+0x34>)
 8004486:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8004488:	4b07      	ldr	r3, [pc, #28]	@ (80044a8 <SysTick_Handler+0x38>)
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <SysTick_Handler+0x2c>
	    Timer2--;
 8004490:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <SysTick_Handler+0x38>)
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	4b03      	ldr	r3, [pc, #12]	@ (80044a8 <SysTick_Handler+0x38>)
 800449a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800449c:	f001 f8ce 	bl	800563c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044a0:	bf00      	nop
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	24005498 	.word	0x24005498
 80044a8:	2400549a 	.word	0x2400549a

080044ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80044b0:	4802      	ldr	r0, [pc, #8]	@ (80044bc <DMA1_Stream0_IRQHandler+0x10>)
 80044b2:	f002 fdeb 	bl	800708c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	2400539c 	.word	0x2400539c

080044c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80044c4:	4802      	ldr	r0, [pc, #8]	@ (80044d0 <DMA1_Stream1_IRQHandler+0x10>)
 80044c6:	f002 fde1 	bl	800708c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	24005414 	.word	0x24005414

080044d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80044d8:	4802      	ldr	r0, [pc, #8]	@ (80044e4 <DMA1_Stream2_IRQHandler+0x10>)
 80044da:	f002 fdd7 	bl	800708c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	24005324 	.word	0x24005324

080044e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044ec:	4802      	ldr	r0, [pc, #8]	@ (80044f8 <USART1_IRQHandler+0x10>)
 80044ee:	f00a faff 	bl	800eaf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	24005168 	.word	0x24005168

080044fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004500:	4802      	ldr	r0, [pc, #8]	@ (800450c <USART3_IRQHandler+0x10>)
 8004502:	f00a faf5 	bl	800eaf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	240051fc 	.word	0x240051fc

08004510 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 8004514:	f7ff fc90 	bl	8003e38 <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004518:	4802      	ldr	r0, [pc, #8]	@ (8004524 <UART4_IRQHandler+0x14>)
 800451a:	f00a fae9 	bl	800eaf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	240050d4 	.word	0x240050d4

08004528 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800452c:	4802      	ldr	r0, [pc, #8]	@ (8004538 <TIM6_DAC_IRQHandler+0x10>)
 800452e:	f009 f951 	bl	800d7d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	24004ff0 	.word	0x24004ff0

0800453c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004540:	4802      	ldr	r0, [pc, #8]	@ (800454c <TIM7_IRQHandler+0x10>)
 8004542:	f009 f947 	bl	800d7d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	2400503c 	.word	0x2400503c

08004550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return 1;
 8004554:	2301      	movs	r3, #1
}
 8004556:	4618      	mov	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <_kill>:

int _kill(int pid, int sig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800456a:	f012 f935 	bl	80167d8 <__errno>
 800456e:	4603      	mov	r3, r0
 8004570:	2216      	movs	r2, #22
 8004572:	601a      	str	r2, [r3, #0]
  return -1;
 8004574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <_exit>:

void _exit (int status)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004588:	f04f 31ff 	mov.w	r1, #4294967295
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff ffe7 	bl	8004560 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004592:	bf00      	nop
 8004594:	e7fd      	b.n	8004592 <_exit+0x12>

08004596 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b086      	sub	sp, #24
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	e00a      	b.n	80045be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045a8:	f3af 8000 	nop.w
 80045ac:	4601      	mov	r1, r0
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	60ba      	str	r2, [r7, #8]
 80045b4:	b2ca      	uxtb	r2, r1
 80045b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	3301      	adds	r3, #1
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	dbf0      	blt.n	80045a8 <_read+0x12>
  }

  return len;
 80045c6:	687b      	ldr	r3, [r7, #4]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e009      	b.n	80045f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	60ba      	str	r2, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	3301      	adds	r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	dbf1      	blt.n	80045e2 <_write+0x12>
  }
  return len;
 80045fe:	687b      	ldr	r3, [r7, #4]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <_close>:

int _close(int file)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004630:	605a      	str	r2, [r3, #4]
  return 0;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <_isatty>:

int _isatty(int file)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004648:	2301      	movs	r3, #1
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004678:	4a14      	ldr	r2, [pc, #80]	@ (80046cc <_sbrk+0x5c>)
 800467a:	4b15      	ldr	r3, [pc, #84]	@ (80046d0 <_sbrk+0x60>)
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004684:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <_sbrk+0x64>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800468c:	4b11      	ldr	r3, [pc, #68]	@ (80046d4 <_sbrk+0x64>)
 800468e:	4a12      	ldr	r2, [pc, #72]	@ (80046d8 <_sbrk+0x68>)
 8004690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004692:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <_sbrk+0x64>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4413      	add	r3, r2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	429a      	cmp	r2, r3
 800469e:	d207      	bcs.n	80046b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046a0:	f012 f89a 	bl	80167d8 <__errno>
 80046a4:	4603      	mov	r3, r0
 80046a6:	220c      	movs	r2, #12
 80046a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	e009      	b.n	80046c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046b0:	4b08      	ldr	r3, [pc, #32]	@ (80046d4 <_sbrk+0x64>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046b6:	4b07      	ldr	r3, [pc, #28]	@ (80046d4 <_sbrk+0x64>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	4a05      	ldr	r2, [pc, #20]	@ (80046d4 <_sbrk+0x64>)
 80046c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046c2:	68fb      	ldr	r3, [r7, #12]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	24100000 	.word	0x24100000
 80046d0:	00000400 	.word	0x00000400
 80046d4:	24004f08 	.word	0x24004f08
 80046d8:	24005820 	.word	0x24005820

080046dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80046e0:	4b32      	ldr	r3, [pc, #200]	@ (80047ac <SystemInit+0xd0>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e6:	4a31      	ldr	r2, [pc, #196]	@ (80047ac <SystemInit+0xd0>)
 80046e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046f0:	4b2f      	ldr	r3, [pc, #188]	@ (80047b0 <SystemInit+0xd4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d807      	bhi.n	800470c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80046fc:	4b2c      	ldr	r3, [pc, #176]	@ (80047b0 <SystemInit+0xd4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 030f 	bic.w	r3, r3, #15
 8004704:	4a2a      	ldr	r2, [pc, #168]	@ (80047b0 <SystemInit+0xd4>)
 8004706:	f043 0303 	orr.w	r3, r3, #3
 800470a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800470c:	4b29      	ldr	r3, [pc, #164]	@ (80047b4 <SystemInit+0xd8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a28      	ldr	r2, [pc, #160]	@ (80047b4 <SystemInit+0xd8>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004718:	4b26      	ldr	r3, [pc, #152]	@ (80047b4 <SystemInit+0xd8>)
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800471e:	4b25      	ldr	r3, [pc, #148]	@ (80047b4 <SystemInit+0xd8>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4924      	ldr	r1, [pc, #144]	@ (80047b4 <SystemInit+0xd8>)
 8004724:	4b24      	ldr	r3, [pc, #144]	@ (80047b8 <SystemInit+0xdc>)
 8004726:	4013      	ands	r3, r2
 8004728:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800472a:	4b21      	ldr	r3, [pc, #132]	@ (80047b0 <SystemInit+0xd4>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 030c 	and.w	r3, r3, #12
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004736:	4b1e      	ldr	r3, [pc, #120]	@ (80047b0 <SystemInit+0xd4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 030f 	bic.w	r3, r3, #15
 800473e:	4a1c      	ldr	r2, [pc, #112]	@ (80047b0 <SystemInit+0xd4>)
 8004740:	f043 0303 	orr.w	r3, r3, #3
 8004744:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004746:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <SystemInit+0xd8>)
 8004748:	2200      	movs	r2, #0
 800474a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800474c:	4b19      	ldr	r3, [pc, #100]	@ (80047b4 <SystemInit+0xd8>)
 800474e:	2200      	movs	r2, #0
 8004750:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8004752:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <SystemInit+0xd8>)
 8004754:	2200      	movs	r2, #0
 8004756:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004758:	4b16      	ldr	r3, [pc, #88]	@ (80047b4 <SystemInit+0xd8>)
 800475a:	4a18      	ldr	r2, [pc, #96]	@ (80047bc <SystemInit+0xe0>)
 800475c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800475e:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <SystemInit+0xd8>)
 8004760:	4a17      	ldr	r2, [pc, #92]	@ (80047c0 <SystemInit+0xe4>)
 8004762:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004764:	4b13      	ldr	r3, [pc, #76]	@ (80047b4 <SystemInit+0xd8>)
 8004766:	4a17      	ldr	r2, [pc, #92]	@ (80047c4 <SystemInit+0xe8>)
 8004768:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800476a:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <SystemInit+0xd8>)
 800476c:	2200      	movs	r2, #0
 800476e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004770:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <SystemInit+0xd8>)
 8004772:	4a14      	ldr	r2, [pc, #80]	@ (80047c4 <SystemInit+0xe8>)
 8004774:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004776:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <SystemInit+0xd8>)
 8004778:	2200      	movs	r2, #0
 800477a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800477c:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <SystemInit+0xd8>)
 800477e:	4a11      	ldr	r2, [pc, #68]	@ (80047c4 <SystemInit+0xe8>)
 8004780:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004782:	4b0c      	ldr	r3, [pc, #48]	@ (80047b4 <SystemInit+0xd8>)
 8004784:	2200      	movs	r2, #0
 8004786:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004788:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <SystemInit+0xd8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a09      	ldr	r2, [pc, #36]	@ (80047b4 <SystemInit+0xd8>)
 800478e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004792:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004794:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <SystemInit+0xd8>)
 8004796:	2200      	movs	r2, #0
 8004798:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800479a:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <SystemInit+0xec>)
 800479c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80047a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80047a2:	bf00      	nop
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	e000ed00 	.word	0xe000ed00
 80047b0:	52002000 	.word	0x52002000
 80047b4:	58024400 	.word	0x58024400
 80047b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80047bc:	02020200 	.word	0x02020200
 80047c0:	01ff0000 	.word	0x01ff0000
 80047c4:	01010280 	.word	0x01010280
 80047c8:	52004000 	.word	0x52004000

080047cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	@ 0x28
 80047d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047d2:	f107 031c 	add.w	r3, r7, #28
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047de:	463b      	mov	r3, r7
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	611a      	str	r2, [r3, #16]
 80047ec:	615a      	str	r2, [r3, #20]
 80047ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80047f0:	4b33      	ldr	r3, [pc, #204]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 80047f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80047f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 80047f8:	4b31      	ldr	r3, [pc, #196]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 80047fa:	f240 1217 	movw	r2, #279	@ 0x117
 80047fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004800:	4b2f      	ldr	r3, [pc, #188]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 8004802:	2200      	movs	r2, #0
 8004804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8004806:	4b2e      	ldr	r3, [pc, #184]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 8004808:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800480c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800480e:	4b2c      	ldr	r3, [pc, #176]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 8004810:	2200      	movs	r2, #0
 8004812:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004814:	4b2a      	ldr	r3, [pc, #168]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 8004816:	2280      	movs	r2, #128	@ 0x80
 8004818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800481a:	4829      	ldr	r0, [pc, #164]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 800481c:	f008 fe74 	bl	800d508 <HAL_TIM_PWM_Init>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8004826:	f7ff fc75 	bl	8004114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800482e:	2300      	movs	r3, #0
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004832:	f107 031c 	add.w	r3, r7, #28
 8004836:	4619      	mov	r1, r3
 8004838:	4821      	ldr	r0, [pc, #132]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 800483a:	f009 fdb1 	bl	800e3a0 <HAL_TIMEx_MasterConfigSynchronization>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8004844:	f7ff fc66 	bl	8004114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004848:	2360      	movs	r3, #96	@ 0x60
 800484a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004850:	2300      	movs	r3, #0
 8004852:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004858:	463b      	mov	r3, r7
 800485a:	2200      	movs	r2, #0
 800485c:	4619      	mov	r1, r3
 800485e:	4818      	ldr	r0, [pc, #96]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 8004860:	f009 f8c0 	bl	800d9e4 <HAL_TIM_PWM_ConfigChannel>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800486a:	f7ff fc53 	bl	8004114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800486e:	463b      	mov	r3, r7
 8004870:	2204      	movs	r2, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4812      	ldr	r0, [pc, #72]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 8004876:	f009 f8b5 	bl	800d9e4 <HAL_TIM_PWM_ConfigChannel>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8004880:	f7ff fc48 	bl	8004114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004884:	463b      	mov	r3, r7
 8004886:	2208      	movs	r2, #8
 8004888:	4619      	mov	r1, r3
 800488a:	480d      	ldr	r0, [pc, #52]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 800488c:	f009 f8aa 	bl	800d9e4 <HAL_TIM_PWM_ConfigChannel>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8004896:	f7ff fc3d 	bl	8004114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800489a:	463b      	mov	r3, r7
 800489c:	220c      	movs	r2, #12
 800489e:	4619      	mov	r1, r3
 80048a0:	4807      	ldr	r0, [pc, #28]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 80048a2:	f009 f89f 	bl	800d9e4 <HAL_TIM_PWM_ConfigChannel>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80048ac:	f7ff fc32 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80048b0:	4803      	ldr	r0, [pc, #12]	@ (80048c0 <MX_TIM2_Init+0xf4>)
 80048b2:	f000 fa29 	bl	8004d08 <HAL_TIM_MspPostInit>

}
 80048b6:	bf00      	nop
 80048b8:	3728      	adds	r7, #40	@ 0x28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	24004f0c 	.word	0x24004f0c

080048c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	@ 0x28
 80048c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048ca:	f107 031c 	add.w	r3, r7, #28
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	605a      	str	r2, [r3, #4]
 80048d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048d6:	463b      	mov	r3, r7
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	611a      	str	r2, [r3, #16]
 80048e4:	615a      	str	r2, [r3, #20]
 80048e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80048e8:	4b27      	ldr	r3, [pc, #156]	@ (8004988 <MX_TIM3_Init+0xc4>)
 80048ea:	4a28      	ldr	r2, [pc, #160]	@ (800498c <MX_TIM3_Init+0xc8>)
 80048ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 80048ee:	4b26      	ldr	r3, [pc, #152]	@ (8004988 <MX_TIM3_Init+0xc4>)
 80048f0:	f240 1217 	movw	r2, #279	@ 0x117
 80048f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f6:	4b24      	ldr	r3, [pc, #144]	@ (8004988 <MX_TIM3_Init+0xc4>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 80048fc:	4b22      	ldr	r3, [pc, #136]	@ (8004988 <MX_TIM3_Init+0xc4>)
 80048fe:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004902:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004904:	4b20      	ldr	r3, [pc, #128]	@ (8004988 <MX_TIM3_Init+0xc4>)
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800490a:	4b1f      	ldr	r3, [pc, #124]	@ (8004988 <MX_TIM3_Init+0xc4>)
 800490c:	2280      	movs	r2, #128	@ 0x80
 800490e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004910:	481d      	ldr	r0, [pc, #116]	@ (8004988 <MX_TIM3_Init+0xc4>)
 8004912:	f008 fdf9 	bl	800d508 <HAL_TIM_PWM_Init>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800491c:	f7ff fbfa 	bl	8004114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004920:	2300      	movs	r3, #0
 8004922:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004924:	2300      	movs	r3, #0
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004928:	f107 031c 	add.w	r3, r7, #28
 800492c:	4619      	mov	r1, r3
 800492e:	4816      	ldr	r0, [pc, #88]	@ (8004988 <MX_TIM3_Init+0xc4>)
 8004930:	f009 fd36 	bl	800e3a0 <HAL_TIMEx_MasterConfigSynchronization>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800493a:	f7ff fbeb 	bl	8004114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800493e:	2360      	movs	r3, #96	@ 0x60
 8004940:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800494e:	463b      	mov	r3, r7
 8004950:	2200      	movs	r2, #0
 8004952:	4619      	mov	r1, r3
 8004954:	480c      	ldr	r0, [pc, #48]	@ (8004988 <MX_TIM3_Init+0xc4>)
 8004956:	f009 f845 	bl	800d9e4 <HAL_TIM_PWM_ConfigChannel>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8004960:	f7ff fbd8 	bl	8004114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004964:	463b      	mov	r3, r7
 8004966:	2204      	movs	r2, #4
 8004968:	4619      	mov	r1, r3
 800496a:	4807      	ldr	r0, [pc, #28]	@ (8004988 <MX_TIM3_Init+0xc4>)
 800496c:	f009 f83a 	bl	800d9e4 <HAL_TIM_PWM_ConfigChannel>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8004976:	f7ff fbcd 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800497a:	4803      	ldr	r0, [pc, #12]	@ (8004988 <MX_TIM3_Init+0xc4>)
 800497c:	f000 f9c4 	bl	8004d08 <HAL_TIM_MspPostInit>

}
 8004980:	bf00      	nop
 8004982:	3728      	adds	r7, #40	@ 0x28
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	24004f58 	.word	0x24004f58
 800498c:	40000400 	.word	0x40000400

08004990 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08a      	sub	sp, #40	@ 0x28
 8004994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004996:	f107 031c 	add.w	r3, r7, #28
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049a2:	463b      	mov	r3, r7
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	611a      	str	r2, [r3, #16]
 80049b0:	615a      	str	r2, [r3, #20]
 80049b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80049b4:	4b32      	ldr	r3, [pc, #200]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 80049b6:	4a33      	ldr	r2, [pc, #204]	@ (8004a84 <MX_TIM4_Init+0xf4>)
 80049b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 80049ba:	4b31      	ldr	r3, [pc, #196]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 80049bc:	f240 1217 	movw	r2, #279	@ 0x117
 80049c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 80049c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 80049ca:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80049ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 80049d8:	2280      	movs	r2, #128	@ 0x80
 80049da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80049dc:	4828      	ldr	r0, [pc, #160]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 80049de:	f008 fd93 	bl	800d508 <HAL_TIM_PWM_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80049e8:	f7ff fb94 	bl	8004114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80049f4:	f107 031c 	add.w	r3, r7, #28
 80049f8:	4619      	mov	r1, r3
 80049fa:	4821      	ldr	r0, [pc, #132]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 80049fc:	f009 fcd0 	bl	800e3a0 <HAL_TIMEx_MasterConfigSynchronization>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8004a06:	f7ff fb85 	bl	8004114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a0a:	2360      	movs	r3, #96	@ 0x60
 8004a0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a1a:	463b      	mov	r3, r7
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4817      	ldr	r0, [pc, #92]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 8004a22:	f008 ffdf 	bl	800d9e4 <HAL_TIM_PWM_ConfigChannel>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8004a2c:	f7ff fb72 	bl	8004114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a30:	463b      	mov	r3, r7
 8004a32:	2204      	movs	r2, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4812      	ldr	r0, [pc, #72]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 8004a38:	f008 ffd4 	bl	800d9e4 <HAL_TIM_PWM_ConfigChannel>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8004a42:	f7ff fb67 	bl	8004114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a46:	463b      	mov	r3, r7
 8004a48:	2208      	movs	r2, #8
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	480c      	ldr	r0, [pc, #48]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 8004a4e:	f008 ffc9 	bl	800d9e4 <HAL_TIM_PWM_ConfigChannel>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8004a58:	f7ff fb5c 	bl	8004114 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	220c      	movs	r2, #12
 8004a60:	4619      	mov	r1, r3
 8004a62:	4807      	ldr	r0, [pc, #28]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 8004a64:	f008 ffbe 	bl	800d9e4 <HAL_TIM_PWM_ConfigChannel>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8004a6e:	f7ff fb51 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004a72:	4803      	ldr	r0, [pc, #12]	@ (8004a80 <MX_TIM4_Init+0xf0>)
 8004a74:	f000 f948 	bl	8004d08 <HAL_TIM_MspPostInit>

}
 8004a78:	bf00      	nop
 8004a7a:	3728      	adds	r7, #40	@ 0x28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	24004fa4 	.word	0x24004fa4
 8004a84:	40000800 	.word	0x40000800

08004a88 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004a98:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <MX_TIM6_Init+0x68>)
 8004a9a:	4a16      	ldr	r2, [pc, #88]	@ (8004af4 <MX_TIM6_Init+0x6c>)
 8004a9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8004a9e:	4b14      	ldr	r3, [pc, #80]	@ (8004af0 <MX_TIM6_Init+0x68>)
 8004aa0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004aa4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aa6:	4b12      	ldr	r3, [pc, #72]	@ (8004af0 <MX_TIM6_Init+0x68>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 279;
 8004aac:	4b10      	ldr	r3, [pc, #64]	@ (8004af0 <MX_TIM6_Init+0x68>)
 8004aae:	f240 1217 	movw	r2, #279	@ 0x117
 8004ab2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8004af0 <MX_TIM6_Init+0x68>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004aba:	480d      	ldr	r0, [pc, #52]	@ (8004af0 <MX_TIM6_Init+0x68>)
 8004abc:	f008 fc55 	bl	800d36a <HAL_TIM_Base_Init>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004ac6:	f7ff fb25 	bl	8004114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4806      	ldr	r0, [pc, #24]	@ (8004af0 <MX_TIM6_Init+0x68>)
 8004ad8:	f009 fc62 	bl	800e3a0 <HAL_TIMEx_MasterConfigSynchronization>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004ae2:	f7ff fb17 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  /* USER CODE END TIM6_Init 2 */

}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	24004ff0 	.word	0x24004ff0
 8004af4:	40001000 	.word	0x40001000

08004af8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004b08:	4b15      	ldr	r3, [pc, #84]	@ (8004b60 <MX_TIM7_Init+0x68>)
 8004b0a:	4a16      	ldr	r2, [pc, #88]	@ (8004b64 <MX_TIM7_Init+0x6c>)
 8004b0c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8004b0e:	4b14      	ldr	r3, [pc, #80]	@ (8004b60 <MX_TIM7_Init+0x68>)
 8004b10:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004b14:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b16:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <MX_TIM7_Init+0x68>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 279;
 8004b1c:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <MX_TIM7_Init+0x68>)
 8004b1e:	f240 1217 	movw	r2, #279	@ 0x117
 8004b22:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b24:	4b0e      	ldr	r3, [pc, #56]	@ (8004b60 <MX_TIM7_Init+0x68>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004b2a:	480d      	ldr	r0, [pc, #52]	@ (8004b60 <MX_TIM7_Init+0x68>)
 8004b2c:	f008 fc1d 	bl	800d36a <HAL_TIM_Base_Init>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004b36:	f7ff faed 	bl	8004114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004b42:	1d3b      	adds	r3, r7, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4806      	ldr	r0, [pc, #24]	@ (8004b60 <MX_TIM7_Init+0x68>)
 8004b48:	f009 fc2a 	bl	800e3a0 <HAL_TIMEx_MasterConfigSynchronization>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004b52:	f7ff fadf 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	2400503c 	.word	0x2400503c
 8004b64:	40001400 	.word	0x40001400

08004b68 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba8 <MX_TIM13_Init+0x40>)
 8004b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8004bac <MX_TIM13_Init+0x44>)
 8004b70:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8004b72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba8 <MX_TIM13_Init+0x40>)
 8004b74:	f240 1217 	movw	r2, #279	@ 0x117
 8004b78:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba8 <MX_TIM13_Init+0x40>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004b80:	4b09      	ldr	r3, [pc, #36]	@ (8004ba8 <MX_TIM13_Init+0x40>)
 8004b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b86:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b88:	4b07      	ldr	r3, [pc, #28]	@ (8004ba8 <MX_TIM13_Init+0x40>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ba8 <MX_TIM13_Init+0x40>)
 8004b90:	2280      	movs	r2, #128	@ 0x80
 8004b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004b94:	4804      	ldr	r0, [pc, #16]	@ (8004ba8 <MX_TIM13_Init+0x40>)
 8004b96:	f008 fbe8 	bl	800d36a <HAL_TIM_Base_Init>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004ba0:	f7ff fab8 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004ba4:	bf00      	nop
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	24005088 	.word	0x24005088
 8004bac:	40001c00 	.word	0x40001c00

08004bb0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc0:	d10f      	bne.n	8004be2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c40 <HAL_TIM_PWM_MspInit+0x90>)
 8004bc4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c40 <HAL_TIM_PWM_MspInit+0x90>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c40 <HAL_TIM_PWM_MspInit+0x90>)
 8004bd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004be0:	e028      	b.n	8004c34 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a17      	ldr	r2, [pc, #92]	@ (8004c44 <HAL_TIM_PWM_MspInit+0x94>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d10f      	bne.n	8004c0c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bec:	4b14      	ldr	r3, [pc, #80]	@ (8004c40 <HAL_TIM_PWM_MspInit+0x90>)
 8004bee:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004bf2:	4a13      	ldr	r2, [pc, #76]	@ (8004c40 <HAL_TIM_PWM_MspInit+0x90>)
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004bfc:	4b10      	ldr	r3, [pc, #64]	@ (8004c40 <HAL_TIM_PWM_MspInit+0x90>)
 8004bfe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
}
 8004c0a:	e013      	b.n	8004c34 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0d      	ldr	r2, [pc, #52]	@ (8004c48 <HAL_TIM_PWM_MspInit+0x98>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d10e      	bne.n	8004c34 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c16:	4b0a      	ldr	r3, [pc, #40]	@ (8004c40 <HAL_TIM_PWM_MspInit+0x90>)
 8004c18:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c1c:	4a08      	ldr	r2, [pc, #32]	@ (8004c40 <HAL_TIM_PWM_MspInit+0x90>)
 8004c1e:	f043 0304 	orr.w	r3, r3, #4
 8004c22:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004c26:	4b06      	ldr	r3, [pc, #24]	@ (8004c40 <HAL_TIM_PWM_MspInit+0x90>)
 8004c28:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
}
 8004c34:	bf00      	nop
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	58024400 	.word	0x58024400
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800

08004c4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a27      	ldr	r2, [pc, #156]	@ (8004cf8 <HAL_TIM_Base_MspInit+0xac>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d117      	bne.n	8004c8e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004c5e:	4b27      	ldr	r3, [pc, #156]	@ (8004cfc <HAL_TIM_Base_MspInit+0xb0>)
 8004c60:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c64:	4a25      	ldr	r2, [pc, #148]	@ (8004cfc <HAL_TIM_Base_MspInit+0xb0>)
 8004c66:	f043 0310 	orr.w	r3, r3, #16
 8004c6a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004c6e:	4b23      	ldr	r3, [pc, #140]	@ (8004cfc <HAL_TIM_Base_MspInit+0xb0>)
 8004c70:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2100      	movs	r1, #0
 8004c80:	2036      	movs	r0, #54	@ 0x36
 8004c82:	f000 fdfa 	bl	800587a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c86:	2036      	movs	r0, #54	@ 0x36
 8004c88:	f000 fe11 	bl	80058ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004c8c:	e030      	b.n	8004cf0 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM7)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1b      	ldr	r2, [pc, #108]	@ (8004d00 <HAL_TIM_Base_MspInit+0xb4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d117      	bne.n	8004cc8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004c98:	4b18      	ldr	r3, [pc, #96]	@ (8004cfc <HAL_TIM_Base_MspInit+0xb0>)
 8004c9a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004c9e:	4a17      	ldr	r2, [pc, #92]	@ (8004cfc <HAL_TIM_Base_MspInit+0xb0>)
 8004ca0:	f043 0320 	orr.w	r3, r3, #32
 8004ca4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004ca8:	4b14      	ldr	r3, [pc, #80]	@ (8004cfc <HAL_TIM_Base_MspInit+0xb0>)
 8004caa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2100      	movs	r1, #0
 8004cba:	2037      	movs	r0, #55	@ 0x37
 8004cbc:	f000 fddd 	bl	800587a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004cc0:	2037      	movs	r0, #55	@ 0x37
 8004cc2:	f000 fdf4 	bl	80058ae <HAL_NVIC_EnableIRQ>
}
 8004cc6:	e013      	b.n	8004cf0 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM13)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8004d04 <HAL_TIM_Base_MspInit+0xb8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <HAL_TIM_Base_MspInit+0xb0>)
 8004cd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004cd8:	4a08      	ldr	r2, [pc, #32]	@ (8004cfc <HAL_TIM_Base_MspInit+0xb0>)
 8004cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cde:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8004ce2:	4b06      	ldr	r3, [pc, #24]	@ (8004cfc <HAL_TIM_Base_MspInit+0xb0>)
 8004ce4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8004ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
}
 8004cf0:	bf00      	nop
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40001000 	.word	0x40001000
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	40001400 	.word	0x40001400
 8004d04:	40001c00 	.word	0x40001c00

08004d08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08c      	sub	sp, #48	@ 0x30
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d10:	f107 031c 	add.w	r3, r7, #28
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d28:	d13f      	bne.n	8004daa <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2a:	4b47      	ldr	r3, [pc, #284]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004d2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004d30:	4a45      	ldr	r2, [pc, #276]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004d3a:	4b43      	ldr	r3, [pc, #268]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004d3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d48:	4b3f      	ldr	r3, [pc, #252]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004d4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004d58:	4b3b      	ldr	r3, [pc, #236]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004d5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8004d66:	f248 030c 	movw	r3, #32780	@ 0x800c
 8004d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d74:	2300      	movs	r3, #0
 8004d76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7c:	f107 031c 	add.w	r3, r7, #28
 8004d80:	4619      	mov	r1, r3
 8004d82:	4832      	ldr	r0, [pc, #200]	@ (8004e4c <HAL_TIM_MspPostInit+0x144>)
 8004d84:	f004 f874 	bl	8008e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004d88:	2308      	movs	r3, #8
 8004d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d94:	2300      	movs	r3, #0
 8004d96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d9c:	f107 031c 	add.w	r3, r7, #28
 8004da0:	4619      	mov	r1, r3
 8004da2:	482b      	ldr	r0, [pc, #172]	@ (8004e50 <HAL_TIM_MspPostInit+0x148>)
 8004da4:	f004 f864 	bl	8008e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004da8:	e049      	b.n	8004e3e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a29      	ldr	r2, [pc, #164]	@ (8004e54 <HAL_TIM_MspPostInit+0x14c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d11f      	bne.n	8004df4 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db4:	4b24      	ldr	r3, [pc, #144]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004db6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004dba:	4a23      	ldr	r2, [pc, #140]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004dbc:	f043 0302 	orr.w	r3, r3, #2
 8004dc0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004dc4:	4b20      	ldr	r3, [pc, #128]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004dc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004dd2:	2330      	movs	r3, #48	@ 0x30
 8004dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dde:	2300      	movs	r3, #0
 8004de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004de2:	2302      	movs	r3, #2
 8004de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de6:	f107 031c 	add.w	r3, r7, #28
 8004dea:	4619      	mov	r1, r3
 8004dec:	4818      	ldr	r0, [pc, #96]	@ (8004e50 <HAL_TIM_MspPostInit+0x148>)
 8004dee:	f004 f83f 	bl	8008e70 <HAL_GPIO_Init>
}
 8004df2:	e024      	b.n	8004e3e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a17      	ldr	r2, [pc, #92]	@ (8004e58 <HAL_TIM_MspPostInit+0x150>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d11f      	bne.n	8004e3e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dfe:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004e00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004e04:	4a10      	ldr	r2, [pc, #64]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004e06:	f043 0302 	orr.w	r3, r3, #2
 8004e0a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e48 <HAL_TIM_MspPostInit+0x140>)
 8004e10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004e1c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e22:	2302      	movs	r3, #2
 8004e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e32:	f107 031c 	add.w	r3, r7, #28
 8004e36:	4619      	mov	r1, r3
 8004e38:	4805      	ldr	r0, [pc, #20]	@ (8004e50 <HAL_TIM_MspPostInit+0x148>)
 8004e3a:	f004 f819 	bl	8008e70 <HAL_GPIO_Init>
}
 8004e3e:	bf00      	nop
 8004e40:	3730      	adds	r7, #48	@ 0x30
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	58024400 	.word	0x58024400
 8004e4c:	58020000 	.word	0x58020000
 8004e50:	58020400 	.word	0x58020400
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800

08004e5c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004e60:	4b22      	ldr	r3, [pc, #136]	@ (8004eec <MX_UART4_Init+0x90>)
 8004e62:	4a23      	ldr	r2, [pc, #140]	@ (8004ef0 <MX_UART4_Init+0x94>)
 8004e64:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004e66:	4b21      	ldr	r3, [pc, #132]	@ (8004eec <MX_UART4_Init+0x90>)
 8004e68:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004e6c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004eec <MX_UART4_Init+0x90>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004e74:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <MX_UART4_Init+0x90>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <MX_UART4_Init+0x90>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004e80:	4b1a      	ldr	r3, [pc, #104]	@ (8004eec <MX_UART4_Init+0x90>)
 8004e82:	220c      	movs	r2, #12
 8004e84:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e86:	4b19      	ldr	r3, [pc, #100]	@ (8004eec <MX_UART4_Init+0x90>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e8c:	4b17      	ldr	r3, [pc, #92]	@ (8004eec <MX_UART4_Init+0x90>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e92:	4b16      	ldr	r3, [pc, #88]	@ (8004eec <MX_UART4_Init+0x90>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e98:	4b14      	ldr	r3, [pc, #80]	@ (8004eec <MX_UART4_Init+0x90>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e9e:	4b13      	ldr	r3, [pc, #76]	@ (8004eec <MX_UART4_Init+0x90>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004ea4:	4811      	ldr	r0, [pc, #68]	@ (8004eec <MX_UART4_Init+0x90>)
 8004ea6:	f009 fb27 	bl	800e4f8 <HAL_UART_Init>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8004eb0:	f7ff f930 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	480d      	ldr	r0, [pc, #52]	@ (8004eec <MX_UART4_Init+0x90>)
 8004eb8:	f00b fd8d 	bl	80109d6 <HAL_UARTEx_SetTxFifoThreshold>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8004ec2:	f7ff f927 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4808      	ldr	r0, [pc, #32]	@ (8004eec <MX_UART4_Init+0x90>)
 8004eca:	f00b fdc2 	bl	8010a52 <HAL_UARTEx_SetRxFifoThreshold>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8004ed4:	f7ff f91e 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8004ed8:	4804      	ldr	r0, [pc, #16]	@ (8004eec <MX_UART4_Init+0x90>)
 8004eda:	f00b fd43 	bl	8010964 <HAL_UARTEx_DisableFifoMode>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8004ee4:	f7ff f916 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004ee8:	bf00      	nop
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	240050d4 	.word	0x240050d4
 8004ef0:	40004c00 	.word	0x40004c00

08004ef4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ef8:	4b23      	ldr	r3, [pc, #140]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004efa:	4a24      	ldr	r2, [pc, #144]	@ (8004f8c <MX_USART1_UART_Init+0x98>)
 8004efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8004efe:	4b22      	ldr	r3, [pc, #136]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f00:	4a23      	ldr	r2, [pc, #140]	@ (8004f90 <MX_USART1_UART_Init+0x9c>)
 8004f02:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8004f04:	4b20      	ldr	r3, [pc, #128]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8004f12:	4b1d      	ldr	r3, [pc, #116]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f18:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f1c:	220c      	movs	r2, #12
 8004f1e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f20:	4b19      	ldr	r3, [pc, #100]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f26:	4b18      	ldr	r3, [pc, #96]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f2c:	4b16      	ldr	r3, [pc, #88]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f32:	4b15      	ldr	r3, [pc, #84]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f38:	4b13      	ldr	r3, [pc, #76]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f3e:	4812      	ldr	r0, [pc, #72]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f40:	f009 fada 	bl	800e4f8 <HAL_UART_Init>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8004f4a:	f7ff f8e3 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f4e:	2100      	movs	r1, #0
 8004f50:	480d      	ldr	r0, [pc, #52]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f52:	f00b fd40 	bl	80109d6 <HAL_UARTEx_SetTxFifoThreshold>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8004f5c:	f7ff f8da 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f60:	2100      	movs	r1, #0
 8004f62:	4809      	ldr	r0, [pc, #36]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f64:	f00b fd75 	bl	8010a52 <HAL_UARTEx_SetRxFifoThreshold>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8004f6e:	f7ff f8d1 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004f72:	4805      	ldr	r0, [pc, #20]	@ (8004f88 <MX_USART1_UART_Init+0x94>)
 8004f74:	f00b fcf6 	bl	8010964 <HAL_UARTEx_DisableFifoMode>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8004f7e:	f7ff f8c9 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	24005168 	.word	0x24005168
 8004f8c:	40011000 	.word	0x40011000
 8004f90:	000186a0 	.word	0x000186a0

08004f94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004f98:	4b22      	ldr	r3, [pc, #136]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004f9a:	4a23      	ldr	r2, [pc, #140]	@ (8005028 <MX_USART3_UART_Init+0x94>)
 8004f9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004f9e:	4b21      	ldr	r3, [pc, #132]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004fa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004fa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004fac:	4b1d      	ldr	r3, [pc, #116]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004fba:	220c      	movs	r2, #12
 8004fbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fbe:	4b19      	ldr	r3, [pc, #100]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fc4:	4b17      	ldr	r3, [pc, #92]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fca:	4b16      	ldr	r3, [pc, #88]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004fd0:	4b14      	ldr	r3, [pc, #80]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fd6:	4b13      	ldr	r3, [pc, #76]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004fdc:	4811      	ldr	r0, [pc, #68]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004fde:	f009 fa8b 	bl	800e4f8 <HAL_UART_Init>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004fe8:	f7ff f894 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004fec:	2100      	movs	r1, #0
 8004fee:	480d      	ldr	r0, [pc, #52]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8004ff0:	f00b fcf1 	bl	80109d6 <HAL_UARTEx_SetTxFifoThreshold>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004ffa:	f7ff f88b 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ffe:	2100      	movs	r1, #0
 8005000:	4808      	ldr	r0, [pc, #32]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8005002:	f00b fd26 	bl	8010a52 <HAL_UARTEx_SetRxFifoThreshold>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800500c:	f7ff f882 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005010:	4804      	ldr	r0, [pc, #16]	@ (8005024 <MX_USART3_UART_Init+0x90>)
 8005012:	f00b fca7 	bl	8010964 <HAL_UARTEx_DisableFifoMode>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800501c:	f7ff f87a 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005020:	bf00      	nop
 8005022:	bd80      	pop	{r7, pc}
 8005024:	240051fc 	.word	0x240051fc
 8005028:	40004800 	.word	0x40004800

0800502c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005030:	4b22      	ldr	r3, [pc, #136]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 8005032:	4a23      	ldr	r2, [pc, #140]	@ (80050c0 <MX_USART6_UART_Init+0x94>)
 8005034:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005036:	4b21      	ldr	r3, [pc, #132]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 8005038:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800503c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800503e:	4b1f      	ldr	r3, [pc, #124]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 8005040:	2200      	movs	r2, #0
 8005042:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005044:	4b1d      	ldr	r3, [pc, #116]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 8005046:	2200      	movs	r2, #0
 8005048:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800504a:	4b1c      	ldr	r3, [pc, #112]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 800504c:	2200      	movs	r2, #0
 800504e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005050:	4b1a      	ldr	r3, [pc, #104]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 8005052:	220c      	movs	r2, #12
 8005054:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005056:	4b19      	ldr	r3, [pc, #100]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 8005058:	2200      	movs	r2, #0
 800505a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800505c:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 800505e:	2200      	movs	r2, #0
 8005060:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005062:	4b16      	ldr	r3, [pc, #88]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 8005064:	2200      	movs	r2, #0
 8005066:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005068:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 800506a:	2200      	movs	r2, #0
 800506c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800506e:	4b13      	ldr	r3, [pc, #76]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 8005070:	2200      	movs	r2, #0
 8005072:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005074:	4811      	ldr	r0, [pc, #68]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 8005076:	f009 fa3f 	bl	800e4f8 <HAL_UART_Init>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8005080:	f7ff f848 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005084:	2100      	movs	r1, #0
 8005086:	480d      	ldr	r0, [pc, #52]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 8005088:	f00b fca5 	bl	80109d6 <HAL_UARTEx_SetTxFifoThreshold>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8005092:	f7ff f83f 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005096:	2100      	movs	r1, #0
 8005098:	4808      	ldr	r0, [pc, #32]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 800509a:	f00b fcda 	bl	8010a52 <HAL_UARTEx_SetRxFifoThreshold>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80050a4:	f7ff f836 	bl	8004114 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80050a8:	4804      	ldr	r0, [pc, #16]	@ (80050bc <MX_USART6_UART_Init+0x90>)
 80050aa:	f00b fc5b 	bl	8010964 <HAL_UARTEx_DisableFifoMode>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80050b4:	f7ff f82e 	bl	8004114 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	24005290 	.word	0x24005290
 80050c0:	40011400 	.word	0x40011400

080050c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b0c0      	sub	sp, #256	@ 0x100
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050cc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	60da      	str	r2, [r3, #12]
 80050da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80050e0:	22c0      	movs	r2, #192	@ 0xc0
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f011 fb0a 	bl	80166fe <memset>
  if(uartHandle->Instance==UART4)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a83      	ldr	r2, [pc, #524]	@ (80052fc <HAL_UART_MspInit+0x238>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d17c      	bne.n	80051ee <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80050f4:	f04f 0202 	mov.w	r2, #2
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005100:	2300      	movs	r3, #0
 8005102:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005106:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800510a:	4618      	mov	r0, r3
 800510c:	f005 f9a6 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005116:	f7fe fffd 	bl	8004114 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800511a:	4b79      	ldr	r3, [pc, #484]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 800511c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005120:	4a77      	ldr	r2, [pc, #476]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 8005122:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005126:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800512a:	4b75      	ldr	r3, [pc, #468]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 800512c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005130:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005138:	4b71      	ldr	r3, [pc, #452]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 800513a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800513e:	4a70      	ldr	r2, [pc, #448]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005148:	4b6d      	ldr	r3, [pc, #436]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 800514a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	623b      	str	r3, [r7, #32]
 8005154:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005156:	2303      	movs	r3, #3
 8005158:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515c:	2302      	movs	r3, #2
 800515e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005162:	2300      	movs	r3, #0
 8005164:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005168:	2300      	movs	r3, #0
 800516a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800516e:	2308      	movs	r3, #8
 8005170:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005174:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005178:	4619      	mov	r1, r3
 800517a:	4862      	ldr	r0, [pc, #392]	@ (8005304 <HAL_UART_MspInit+0x240>)
 800517c:	f003 fe78 	bl	8008e70 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8005180:	4b61      	ldr	r3, [pc, #388]	@ (8005308 <HAL_UART_MspInit+0x244>)
 8005182:	4a62      	ldr	r2, [pc, #392]	@ (800530c <HAL_UART_MspInit+0x248>)
 8005184:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8005186:	4b60      	ldr	r3, [pc, #384]	@ (8005308 <HAL_UART_MspInit+0x244>)
 8005188:	223f      	movs	r2, #63	@ 0x3f
 800518a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800518c:	4b5e      	ldr	r3, [pc, #376]	@ (8005308 <HAL_UART_MspInit+0x244>)
 800518e:	2200      	movs	r2, #0
 8005190:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005192:	4b5d      	ldr	r3, [pc, #372]	@ (8005308 <HAL_UART_MspInit+0x244>)
 8005194:	2200      	movs	r2, #0
 8005196:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005198:	4b5b      	ldr	r3, [pc, #364]	@ (8005308 <HAL_UART_MspInit+0x244>)
 800519a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800519e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051a0:	4b59      	ldr	r3, [pc, #356]	@ (8005308 <HAL_UART_MspInit+0x244>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051a6:	4b58      	ldr	r3, [pc, #352]	@ (8005308 <HAL_UART_MspInit+0x244>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80051ac:	4b56      	ldr	r3, [pc, #344]	@ (8005308 <HAL_UART_MspInit+0x244>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051b2:	4b55      	ldr	r3, [pc, #340]	@ (8005308 <HAL_UART_MspInit+0x244>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051b8:	4b53      	ldr	r3, [pc, #332]	@ (8005308 <HAL_UART_MspInit+0x244>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80051be:	4852      	ldr	r0, [pc, #328]	@ (8005308 <HAL_UART_MspInit+0x244>)
 80051c0:	f000 fc08 	bl	80059d4 <HAL_DMA_Init>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80051ca:	f7fe ffa3 	bl	8004114 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a4d      	ldr	r2, [pc, #308]	@ (8005308 <HAL_UART_MspInit+0x244>)
 80051d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80051d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005308 <HAL_UART_MspInit+0x244>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80051dc:	2200      	movs	r2, #0
 80051de:	2100      	movs	r1, #0
 80051e0:	2034      	movs	r0, #52	@ 0x34
 80051e2:	f000 fb4a 	bl	800587a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80051e6:	2034      	movs	r0, #52	@ 0x34
 80051e8:	f000 fb61 	bl	80058ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80051ec:	e164      	b.n	80054b8 <HAL_UART_MspInit+0x3f4>
  else if(uartHandle->Instance==USART1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a47      	ldr	r2, [pc, #284]	@ (8005310 <HAL_UART_MspInit+0x24c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	f040 8091 	bne.w	800531c <HAL_UART_MspInit+0x258>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80051fa:	f04f 0201 	mov.w	r2, #1
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8005206:	2300      	movs	r3, #0
 8005208:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800520c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005210:	4618      	mov	r0, r3
 8005212:	f005 f923 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 800521c:	f7fe ff7a 	bl	8004114 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005220:	4b37      	ldr	r3, [pc, #220]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 8005222:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005226:	4a36      	ldr	r2, [pc, #216]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 8005228:	f043 0310 	orr.w	r3, r3, #16
 800522c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8005230:	4b33      	ldr	r3, [pc, #204]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 8005232:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800523e:	4b30      	ldr	r3, [pc, #192]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 8005240:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005244:	4a2e      	ldr	r2, [pc, #184]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800524e:	4b2c      	ldr	r3, [pc, #176]	@ (8005300 <HAL_UART_MspInit+0x23c>)
 8005250:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 800525c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005260:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005264:	2302      	movs	r3, #2
 8005266:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526a:	2300      	movs	r3, #0
 800526c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005270:	2300      	movs	r3, #0
 8005272:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005276:	2307      	movs	r3, #7
 8005278:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800527c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005280:	4619      	mov	r1, r3
 8005282:	4820      	ldr	r0, [pc, #128]	@ (8005304 <HAL_UART_MspInit+0x240>)
 8005284:	f003 fdf4 	bl	8008e70 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8005288:	4b22      	ldr	r3, [pc, #136]	@ (8005314 <HAL_UART_MspInit+0x250>)
 800528a:	4a23      	ldr	r2, [pc, #140]	@ (8005318 <HAL_UART_MspInit+0x254>)
 800528c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800528e:	4b21      	ldr	r3, [pc, #132]	@ (8005314 <HAL_UART_MspInit+0x250>)
 8005290:	2229      	movs	r2, #41	@ 0x29
 8005292:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005294:	4b1f      	ldr	r3, [pc, #124]	@ (8005314 <HAL_UART_MspInit+0x250>)
 8005296:	2200      	movs	r2, #0
 8005298:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800529a:	4b1e      	ldr	r3, [pc, #120]	@ (8005314 <HAL_UART_MspInit+0x250>)
 800529c:	2200      	movs	r2, #0
 800529e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005314 <HAL_UART_MspInit+0x250>)
 80052a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005314 <HAL_UART_MspInit+0x250>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052ae:	4b19      	ldr	r3, [pc, #100]	@ (8005314 <HAL_UART_MspInit+0x250>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80052b4:	4b17      	ldr	r3, [pc, #92]	@ (8005314 <HAL_UART_MspInit+0x250>)
 80052b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80052bc:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <HAL_UART_MspInit+0x250>)
 80052be:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80052c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052c4:	4b13      	ldr	r3, [pc, #76]	@ (8005314 <HAL_UART_MspInit+0x250>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80052ca:	4812      	ldr	r0, [pc, #72]	@ (8005314 <HAL_UART_MspInit+0x250>)
 80052cc:	f000 fb82 	bl	80059d4 <HAL_DMA_Init>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_UART_MspInit+0x216>
      Error_Handler();
 80052d6:	f7fe ff1d 	bl	8004114 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005314 <HAL_UART_MspInit+0x250>)
 80052de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80052e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005314 <HAL_UART_MspInit+0x250>)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80052e8:	2200      	movs	r2, #0
 80052ea:	2100      	movs	r1, #0
 80052ec:	2025      	movs	r0, #37	@ 0x25
 80052ee:	f000 fac4 	bl	800587a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80052f2:	2025      	movs	r0, #37	@ 0x25
 80052f4:	f000 fadb 	bl	80058ae <HAL_NVIC_EnableIRQ>
}
 80052f8:	e0de      	b.n	80054b8 <HAL_UART_MspInit+0x3f4>
 80052fa:	bf00      	nop
 80052fc:	40004c00 	.word	0x40004c00
 8005300:	58024400 	.word	0x58024400
 8005304:	58020000 	.word	0x58020000
 8005308:	24005324 	.word	0x24005324
 800530c:	40020040 	.word	0x40020040
 8005310:	40011000 	.word	0x40011000
 8005314:	2400539c 	.word	0x2400539c
 8005318:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a68      	ldr	r2, [pc, #416]	@ (80054c4 <HAL_UART_MspInit+0x400>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d17d      	bne.n	8005422 <HAL_UART_MspInit+0x35e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005326:	f04f 0202 	mov.w	r2, #2
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005332:	2300      	movs	r3, #0
 8005334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005338:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800533c:	4618      	mov	r0, r3
 800533e:	f005 f88d 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <HAL_UART_MspInit+0x288>
      Error_Handler();
 8005348:	f7fe fee4 	bl	8004114 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800534c:	4b5e      	ldr	r3, [pc, #376]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 800534e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005352:	4a5d      	ldr	r2, [pc, #372]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 8005354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005358:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800535c:	4b5a      	ldr	r3, [pc, #360]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 800535e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8005362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800536a:	4b57      	ldr	r3, [pc, #348]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 800536c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005370:	4a55      	ldr	r2, [pc, #340]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 8005372:	f043 0304 	orr.w	r3, r3, #4
 8005376:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800537a:	4b53      	ldr	r3, [pc, #332]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 800537c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005388:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800538c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005390:	2302      	movs	r3, #2
 8005392:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005396:	2300      	movs	r3, #0
 8005398:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80053a2:	2307      	movs	r3, #7
 80053a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053a8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80053ac:	4619      	mov	r1, r3
 80053ae:	4847      	ldr	r0, [pc, #284]	@ (80054cc <HAL_UART_MspInit+0x408>)
 80053b0:	f003 fd5e 	bl	8008e70 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80053b4:	4b46      	ldr	r3, [pc, #280]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 80053b6:	4a47      	ldr	r2, [pc, #284]	@ (80054d4 <HAL_UART_MspInit+0x410>)
 80053b8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80053ba:	4b45      	ldr	r3, [pc, #276]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 80053bc:	222d      	movs	r2, #45	@ 0x2d
 80053be:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053c0:	4b43      	ldr	r3, [pc, #268]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c6:	4b42      	ldr	r3, [pc, #264]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053cc:	4b40      	ldr	r3, [pc, #256]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 80053ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053d2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053d4:	4b3e      	ldr	r3, [pc, #248]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053da:	4b3d      	ldr	r3, [pc, #244]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 80053dc:	2200      	movs	r2, #0
 80053de:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80053e0:	4b3b      	ldr	r3, [pc, #236]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053e6:	4b3a      	ldr	r3, [pc, #232]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053ec:	4b38      	ldr	r3, [pc, #224]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80053f2:	4837      	ldr	r0, [pc, #220]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 80053f4:	f000 faee 	bl	80059d4 <HAL_DMA_Init>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 80053fe:	f7fe fe89 	bl	8004114 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a32      	ldr	r2, [pc, #200]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 8005406:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800540a:	4a31      	ldr	r2, [pc, #196]	@ (80054d0 <HAL_UART_MspInit+0x40c>)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005410:	2200      	movs	r2, #0
 8005412:	2100      	movs	r1, #0
 8005414:	2027      	movs	r0, #39	@ 0x27
 8005416:	f000 fa30 	bl	800587a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800541a:	2027      	movs	r0, #39	@ 0x27
 800541c:	f000 fa47 	bl	80058ae <HAL_NVIC_EnableIRQ>
}
 8005420:	e04a      	b.n	80054b8 <HAL_UART_MspInit+0x3f4>
  else if(uartHandle->Instance==USART6)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a2c      	ldr	r2, [pc, #176]	@ (80054d8 <HAL_UART_MspInit+0x414>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d145      	bne.n	80054b8 <HAL_UART_MspInit+0x3f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800542c:	f04f 0201 	mov.w	r2, #1
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800543e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005442:	4618      	mov	r0, r3
 8005444:	f005 f80a 	bl	800a45c <HAL_RCCEx_PeriphCLKConfig>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_UART_MspInit+0x38e>
      Error_Handler();
 800544e:	f7fe fe61 	bl	8004114 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005452:	4b1d      	ldr	r3, [pc, #116]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 8005454:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005458:	4a1b      	ldr	r2, [pc, #108]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 800545a:	f043 0320 	orr.w	r3, r3, #32
 800545e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8005462:	4b19      	ldr	r3, [pc, #100]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 8005464:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8005468:	f003 0320 	and.w	r3, r3, #32
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005470:	4b15      	ldr	r3, [pc, #84]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 8005472:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005476:	4a14      	ldr	r2, [pc, #80]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 8005478:	f043 0304 	orr.w	r3, r3, #4
 800547c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8005480:	4b11      	ldr	r3, [pc, #68]	@ (80054c8 <HAL_UART_MspInit+0x404>)
 8005482:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	60bb      	str	r3, [r7, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800548e:	23c0      	movs	r3, #192	@ 0xc0
 8005490:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005494:	2302      	movs	r3, #2
 8005496:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549a:	2300      	movs	r3, #0
 800549c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a0:	2300      	movs	r3, #0
 80054a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80054a6:	2307      	movs	r3, #7
 80054a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054ac:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80054b0:	4619      	mov	r1, r3
 80054b2:	4806      	ldr	r0, [pc, #24]	@ (80054cc <HAL_UART_MspInit+0x408>)
 80054b4:	f003 fcdc 	bl	8008e70 <HAL_GPIO_Init>
}
 80054b8:	bf00      	nop
 80054ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40004800 	.word	0x40004800
 80054c8:	58024400 	.word	0x58024400
 80054cc:	58020800 	.word	0x58020800
 80054d0:	24005414 	.word	0x24005414
 80054d4:	40020028 	.word	0x40020028
 80054d8:	40011400 	.word	0x40011400

080054dc <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	220f      	movs	r2, #15
 80054ea:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f009 f9c3 	bl	800e878 <HAL_UART_Abort_IT>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 80054f8:	f7fe fe0c 	bl	8004114 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005504:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800553c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005508:	f7ff f8e8 	bl	80046dc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800550c:	480c      	ldr	r0, [pc, #48]	@ (8005540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800550e:	490d      	ldr	r1, [pc, #52]	@ (8005544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005510:	4a0d      	ldr	r2, [pc, #52]	@ (8005548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005514:	e002      	b.n	800551c <LoopCopyDataInit>

08005516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800551a:	3304      	adds	r3, #4

0800551c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800551c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800551e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005520:	d3f9      	bcc.n	8005516 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005522:	4a0a      	ldr	r2, [pc, #40]	@ (800554c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005524:	4c0a      	ldr	r4, [pc, #40]	@ (8005550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005528:	e001      	b.n	800552e <LoopFillZerobss>

0800552a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800552a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800552c:	3204      	adds	r2, #4

0800552e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800552e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005530:	d3fb      	bcc.n	800552a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005532:	f011 f957 	bl	80167e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005536:	f7fe fca1 	bl	8003e7c <main>
  bx  lr
 800553a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800553c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8005540:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005544:	240002b0 	.word	0x240002b0
  ldr r2, =_sidata
 8005548:	08019908 	.word	0x08019908
  ldr r2, =_sbss
 800554c:	240002b0 	.word	0x240002b0
  ldr r4, =_ebss
 8005550:	24005820 	.word	0x24005820

08005554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005554:	e7fe      	b.n	8005554 <ADC_IRQHandler>
	...

08005558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800555e:	2003      	movs	r0, #3
 8005560:	f000 f980 	bl	8005864 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005564:	f004 fda4 	bl	800a0b0 <HAL_RCC_GetSysClockFreq>
 8005568:	4602      	mov	r2, r0
 800556a:	4b15      	ldr	r3, [pc, #84]	@ (80055c0 <HAL_Init+0x68>)
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	0a1b      	lsrs	r3, r3, #8
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	4913      	ldr	r1, [pc, #76]	@ (80055c4 <HAL_Init+0x6c>)
 8005576:	5ccb      	ldrb	r3, [r1, r3]
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
 8005580:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005582:	4b0f      	ldr	r3, [pc, #60]	@ (80055c0 <HAL_Init+0x68>)
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	4a0e      	ldr	r2, [pc, #56]	@ (80055c4 <HAL_Init+0x6c>)
 800558c:	5cd3      	ldrb	r3, [r2, r3]
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
 8005598:	4a0b      	ldr	r2, [pc, #44]	@ (80055c8 <HAL_Init+0x70>)
 800559a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800559c:	4a0b      	ldr	r2, [pc, #44]	@ (80055cc <HAL_Init+0x74>)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055a2:	200f      	movs	r0, #15
 80055a4:	f000 f814 	bl	80055d0 <HAL_InitTick>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e002      	b.n	80055b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80055b2:	f7fe ff19 	bl	80043e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	58024400 	.word	0x58024400
 80055c4:	0801882c 	.word	0x0801882c
 80055c8:	240000c4 	.word	0x240000c4
 80055cc:	240000c0 	.word	0x240000c0

080055d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80055d8:	4b15      	ldr	r3, [pc, #84]	@ (8005630 <HAL_InitTick+0x60>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e021      	b.n	8005628 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80055e4:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <HAL_InitTick+0x64>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	4b11      	ldr	r3, [pc, #68]	@ (8005630 <HAL_InitTick+0x60>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	4619      	mov	r1, r3
 80055ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80055f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f965 	bl	80058ca <HAL_SYSTICK_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e00e      	b.n	8005628 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b0f      	cmp	r3, #15
 800560e:	d80a      	bhi.n	8005626 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005610:	2200      	movs	r2, #0
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	f04f 30ff 	mov.w	r0, #4294967295
 8005618:	f000 f92f 	bl	800587a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800561c:	4a06      	ldr	r2, [pc, #24]	@ (8005638 <HAL_InitTick+0x68>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	e000      	b.n	8005628 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	240000cc 	.word	0x240000cc
 8005634:	240000c0 	.word	0x240000c0
 8005638:	240000c8 	.word	0x240000c8

0800563c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005640:	4b06      	ldr	r3, [pc, #24]	@ (800565c <HAL_IncTick+0x20>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	4b06      	ldr	r3, [pc, #24]	@ (8005660 <HAL_IncTick+0x24>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4413      	add	r3, r2
 800564c:	4a04      	ldr	r2, [pc, #16]	@ (8005660 <HAL_IncTick+0x24>)
 800564e:	6013      	str	r3, [r2, #0]
}
 8005650:	bf00      	nop
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	240000cc 	.word	0x240000cc
 8005660:	2400548c 	.word	0x2400548c

08005664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  return uwTick;
 8005668:	4b03      	ldr	r3, [pc, #12]	@ (8005678 <HAL_GetTick+0x14>)
 800566a:	681b      	ldr	r3, [r3, #0]
}
 800566c:	4618      	mov	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	2400548c 	.word	0x2400548c

0800567c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005684:	f7ff ffee 	bl	8005664 <HAL_GetTick>
 8005688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d005      	beq.n	80056a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005696:	4b0a      	ldr	r3, [pc, #40]	@ (80056c0 <HAL_Delay+0x44>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056a2:	bf00      	nop
 80056a4:	f7ff ffde 	bl	8005664 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d8f7      	bhi.n	80056a4 <HAL_Delay+0x28>
  {
  }
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	240000cc 	.word	0x240000cc

080056c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005704 <__NVIC_SetPriorityGrouping+0x40>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056e0:	4013      	ands	r3, r2
 80056e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056ec:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <__NVIC_SetPriorityGrouping+0x44>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056f2:	4a04      	ldr	r2, [pc, #16]	@ (8005704 <__NVIC_SetPriorityGrouping+0x40>)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	60d3      	str	r3, [r2, #12]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000ed00 	.word	0xe000ed00
 8005708:	05fa0000 	.word	0x05fa0000

0800570c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005710:	4b04      	ldr	r3, [pc, #16]	@ (8005724 <__NVIC_GetPriorityGrouping+0x18>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	0a1b      	lsrs	r3, r3, #8
 8005716:	f003 0307 	and.w	r3, r3, #7
}
 800571a:	4618      	mov	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	e000ed00 	.word	0xe000ed00

08005728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005736:	2b00      	cmp	r3, #0
 8005738:	db0b      	blt.n	8005752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	f003 021f 	and.w	r2, r3, #31
 8005740:	4907      	ldr	r1, [pc, #28]	@ (8005760 <__NVIC_EnableIRQ+0x38>)
 8005742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	2001      	movs	r0, #1
 800574a:	fa00 f202 	lsl.w	r2, r0, r2
 800574e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	e000e100 	.word	0xe000e100

08005764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	6039      	str	r1, [r7, #0]
 800576e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005774:	2b00      	cmp	r3, #0
 8005776:	db0a      	blt.n	800578e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	490c      	ldr	r1, [pc, #48]	@ (80057b0 <__NVIC_SetPriority+0x4c>)
 800577e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005782:	0112      	lsls	r2, r2, #4
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	440b      	add	r3, r1
 8005788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800578c:	e00a      	b.n	80057a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4908      	ldr	r1, [pc, #32]	@ (80057b4 <__NVIC_SetPriority+0x50>)
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	3b04      	subs	r3, #4
 800579c:	0112      	lsls	r2, r2, #4
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	440b      	add	r3, r1
 80057a2:	761a      	strb	r2, [r3, #24]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	e000e100 	.word	0xe000e100
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b089      	sub	sp, #36	@ 0x24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f1c3 0307 	rsb	r3, r3, #7
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	bf28      	it	cs
 80057d6:	2304      	movcs	r3, #4
 80057d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3304      	adds	r3, #4
 80057de:	2b06      	cmp	r3, #6
 80057e0:	d902      	bls.n	80057e8 <NVIC_EncodePriority+0x30>
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3b03      	subs	r3, #3
 80057e6:	e000      	b.n	80057ea <NVIC_EncodePriority+0x32>
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43da      	mvns	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	401a      	ands	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005800:	f04f 31ff 	mov.w	r1, #4294967295
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	43d9      	mvns	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005810:	4313      	orrs	r3, r2
         );
}
 8005812:	4618      	mov	r0, r3
 8005814:	3724      	adds	r7, #36	@ 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3b01      	subs	r3, #1
 800582c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005830:	d301      	bcc.n	8005836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005832:	2301      	movs	r3, #1
 8005834:	e00f      	b.n	8005856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005836:	4a0a      	ldr	r2, [pc, #40]	@ (8005860 <SysTick_Config+0x40>)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3b01      	subs	r3, #1
 800583c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800583e:	210f      	movs	r1, #15
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	f7ff ff8e 	bl	8005764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005848:	4b05      	ldr	r3, [pc, #20]	@ (8005860 <SysTick_Config+0x40>)
 800584a:	2200      	movs	r2, #0
 800584c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800584e:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <SysTick_Config+0x40>)
 8005850:	2207      	movs	r2, #7
 8005852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	e000e010 	.word	0xe000e010

08005864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff ff29 	bl	80056c4 <__NVIC_SetPriorityGrouping>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b086      	sub	sp, #24
 800587e:	af00      	add	r7, sp, #0
 8005880:	4603      	mov	r3, r0
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005888:	f7ff ff40 	bl	800570c <__NVIC_GetPriorityGrouping>
 800588c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	6978      	ldr	r0, [r7, #20]
 8005894:	f7ff ff90 	bl	80057b8 <NVIC_EncodePriority>
 8005898:	4602      	mov	r2, r0
 800589a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff ff5f 	bl	8005764 <__NVIC_SetPriority>
}
 80058a6:	bf00      	nop
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	4603      	mov	r3, r0
 80058b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff ff33 	bl	8005728 <__NVIC_EnableIRQ>
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff ffa4 	bl	8005820 <SysTick_Config>
 80058d8:	4603      	mov	r3, r0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80058e8:	f3bf 8f5f 	dmb	sy
}
 80058ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80058ee:	4b07      	ldr	r3, [pc, #28]	@ (800590c <HAL_MPU_Disable+0x28>)
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	4a06      	ldr	r2, [pc, #24]	@ (800590c <HAL_MPU_Disable+0x28>)
 80058f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80058fa:	4b05      	ldr	r3, [pc, #20]	@ (8005910 <HAL_MPU_Disable+0x2c>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	605a      	str	r2, [r3, #4]
}
 8005900:	bf00      	nop
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	e000ed00 	.word	0xe000ed00
 8005910:	e000ed90 	.word	0xe000ed90

08005914 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800591c:	4a0b      	ldr	r2, [pc, #44]	@ (800594c <HAL_MPU_Enable+0x38>)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005926:	4b0a      	ldr	r3, [pc, #40]	@ (8005950 <HAL_MPU_Enable+0x3c>)
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	4a09      	ldr	r2, [pc, #36]	@ (8005950 <HAL_MPU_Enable+0x3c>)
 800592c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005930:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005932:	f3bf 8f4f 	dsb	sy
}
 8005936:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005938:	f3bf 8f6f 	isb	sy
}
 800593c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	e000ed90 	.word	0xe000ed90
 8005950:	e000ed00 	.word	0xe000ed00

08005954 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	785a      	ldrb	r2, [r3, #1]
 8005960:	4b1b      	ldr	r3, [pc, #108]	@ (80059d0 <HAL_MPU_ConfigRegion+0x7c>)
 8005962:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005964:	4b1a      	ldr	r3, [pc, #104]	@ (80059d0 <HAL_MPU_ConfigRegion+0x7c>)
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	4a19      	ldr	r2, [pc, #100]	@ (80059d0 <HAL_MPU_ConfigRegion+0x7c>)
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005970:	4a17      	ldr	r2, [pc, #92]	@ (80059d0 <HAL_MPU_ConfigRegion+0x7c>)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	7b1b      	ldrb	r3, [r3, #12]
 800597c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	7adb      	ldrb	r3, [r3, #11]
 8005982:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005984:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	7a9b      	ldrb	r3, [r3, #10]
 800598a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800598c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	7b5b      	ldrb	r3, [r3, #13]
 8005992:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005994:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	7b9b      	ldrb	r3, [r3, #14]
 800599a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800599c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	7bdb      	ldrb	r3, [r3, #15]
 80059a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80059a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7a5b      	ldrb	r3, [r3, #9]
 80059aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80059ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	7a1b      	ldrb	r3, [r3, #8]
 80059b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80059b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	7812      	ldrb	r2, [r2, #0]
 80059ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059bc:	4a04      	ldr	r2, [pc, #16]	@ (80059d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80059be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80059c0:	6113      	str	r3, [r2, #16]
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	e000ed90 	.word	0xe000ed90

080059d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80059dc:	f7ff fe42 	bl	8005664 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e37d      	b.n	80060e8 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a66      	ldr	r2, [pc, #408]	@ (8005b8c <HAL_DMA_Init+0x1b8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d04a      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a65      	ldr	r2, [pc, #404]	@ (8005b90 <HAL_DMA_Init+0x1bc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d045      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a63      	ldr	r2, [pc, #396]	@ (8005b94 <HAL_DMA_Init+0x1c0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d040      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a62      	ldr	r2, [pc, #392]	@ (8005b98 <HAL_DMA_Init+0x1c4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d03b      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a60      	ldr	r2, [pc, #384]	@ (8005b9c <HAL_DMA_Init+0x1c8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d036      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a5f      	ldr	r2, [pc, #380]	@ (8005ba0 <HAL_DMA_Init+0x1cc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d031      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ba4 <HAL_DMA_Init+0x1d0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d02c      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a5c      	ldr	r2, [pc, #368]	@ (8005ba8 <HAL_DMA_Init+0x1d4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d027      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a5a      	ldr	r2, [pc, #360]	@ (8005bac <HAL_DMA_Init+0x1d8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d022      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a59      	ldr	r2, [pc, #356]	@ (8005bb0 <HAL_DMA_Init+0x1dc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d01d      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a57      	ldr	r2, [pc, #348]	@ (8005bb4 <HAL_DMA_Init+0x1e0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d018      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a56      	ldr	r2, [pc, #344]	@ (8005bb8 <HAL_DMA_Init+0x1e4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d013      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a54      	ldr	r2, [pc, #336]	@ (8005bbc <HAL_DMA_Init+0x1e8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00e      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a53      	ldr	r2, [pc, #332]	@ (8005bc0 <HAL_DMA_Init+0x1ec>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d009      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a51      	ldr	r2, [pc, #324]	@ (8005bc4 <HAL_DMA_Init+0x1f0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a50      	ldr	r2, [pc, #320]	@ (8005bc8 <HAL_DMA_Init+0x1f4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d101      	bne.n	8005a90 <HAL_DMA_Init+0xbc>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <HAL_DMA_Init+0xbe>
 8005a90:	2300      	movs	r3, #0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 813c 	beq.w	8005d10 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a37      	ldr	r2, [pc, #220]	@ (8005b8c <HAL_DMA_Init+0x1b8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d04a      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a36      	ldr	r2, [pc, #216]	@ (8005b90 <HAL_DMA_Init+0x1bc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d045      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a34      	ldr	r2, [pc, #208]	@ (8005b94 <HAL_DMA_Init+0x1c0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d040      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a33      	ldr	r2, [pc, #204]	@ (8005b98 <HAL_DMA_Init+0x1c4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d03b      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a31      	ldr	r2, [pc, #196]	@ (8005b9c <HAL_DMA_Init+0x1c8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d036      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a30      	ldr	r2, [pc, #192]	@ (8005ba0 <HAL_DMA_Init+0x1cc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d031      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba4 <HAL_DMA_Init+0x1d0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d02c      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a2d      	ldr	r2, [pc, #180]	@ (8005ba8 <HAL_DMA_Init+0x1d4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d027      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a2b      	ldr	r2, [pc, #172]	@ (8005bac <HAL_DMA_Init+0x1d8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d022      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb0 <HAL_DMA_Init+0x1dc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d01d      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a28      	ldr	r2, [pc, #160]	@ (8005bb4 <HAL_DMA_Init+0x1e0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d018      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a27      	ldr	r2, [pc, #156]	@ (8005bb8 <HAL_DMA_Init+0x1e4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a25      	ldr	r2, [pc, #148]	@ (8005bbc <HAL_DMA_Init+0x1e8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00e      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a24      	ldr	r2, [pc, #144]	@ (8005bc0 <HAL_DMA_Init+0x1ec>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d009      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a22      	ldr	r2, [pc, #136]	@ (8005bc4 <HAL_DMA_Init+0x1f0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a21      	ldr	r2, [pc, #132]	@ (8005bc8 <HAL_DMA_Init+0x1f4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d108      	bne.n	8005b5a <HAL_DMA_Init+0x186>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e007      	b.n	8005b6a <HAL_DMA_Init+0x196>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b6a:	e02f      	b.n	8005bcc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b6c:	f7ff fd7a 	bl	8005664 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d928      	bls.n	8005bcc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2203      	movs	r2, #3
 8005b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e2ad      	b.n	80060e8 <HAL_DMA_Init+0x714>
 8005b8c:	40020010 	.word	0x40020010
 8005b90:	40020028 	.word	0x40020028
 8005b94:	40020040 	.word	0x40020040
 8005b98:	40020058 	.word	0x40020058
 8005b9c:	40020070 	.word	0x40020070
 8005ba0:	40020088 	.word	0x40020088
 8005ba4:	400200a0 	.word	0x400200a0
 8005ba8:	400200b8 	.word	0x400200b8
 8005bac:	40020410 	.word	0x40020410
 8005bb0:	40020428 	.word	0x40020428
 8005bb4:	40020440 	.word	0x40020440
 8005bb8:	40020458 	.word	0x40020458
 8005bbc:	40020470 	.word	0x40020470
 8005bc0:	40020488 	.word	0x40020488
 8005bc4:	400204a0 	.word	0x400204a0
 8005bc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1c8      	bne.n	8005b6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4b73      	ldr	r3, [pc, #460]	@ (8005db4 <HAL_DMA_Init+0x3e0>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005bf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d107      	bne.n	8005c30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b28      	cmp	r3, #40	@ 0x28
 8005c36:	d903      	bls.n	8005c40 <HAL_DMA_Init+0x26c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c3e:	d91f      	bls.n	8005c80 <HAL_DMA_Init+0x2ac>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c46:	d903      	bls.n	8005c50 <HAL_DMA_Init+0x27c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b42      	cmp	r3, #66	@ 0x42
 8005c4e:	d917      	bls.n	8005c80 <HAL_DMA_Init+0x2ac>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b46      	cmp	r3, #70	@ 0x46
 8005c56:	d903      	bls.n	8005c60 <HAL_DMA_Init+0x28c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	2b48      	cmp	r3, #72	@ 0x48
 8005c5e:	d90f      	bls.n	8005c80 <HAL_DMA_Init+0x2ac>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c66:	d903      	bls.n	8005c70 <HAL_DMA_Init+0x29c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b52      	cmp	r3, #82	@ 0x52
 8005c6e:	d907      	bls.n	8005c80 <HAL_DMA_Init+0x2ac>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b73      	cmp	r3, #115	@ 0x73
 8005c76:	d905      	bls.n	8005c84 <HAL_DMA_Init+0x2b0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b77      	cmp	r3, #119	@ 0x77
 8005c7e:	d801      	bhi.n	8005c84 <HAL_DMA_Init+0x2b0>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <HAL_DMA_Init+0x2b2>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c90:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f023 0307 	bic.w	r3, r3, #7
 8005ca8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d117      	bne.n	8005cec <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00e      	beq.n	8005cec <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f002 fbe0 	bl	8008494 <DMA_CheckFifoParam>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2240      	movs	r2, #64	@ 0x40
 8005cde:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e1fd      	b.n	80060e8 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f002 fb1b 	bl	8008330 <DMA_CalcBaseAndBitshift>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	223f      	movs	r2, #63	@ 0x3f
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	609a      	str	r2, [r3, #8]
 8005d0e:	e0fd      	b.n	8005f0c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a28      	ldr	r2, [pc, #160]	@ (8005db8 <HAL_DMA_Init+0x3e4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d04a      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a27      	ldr	r2, [pc, #156]	@ (8005dbc <HAL_DMA_Init+0x3e8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d045      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a25      	ldr	r2, [pc, #148]	@ (8005dc0 <HAL_DMA_Init+0x3ec>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d040      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a24      	ldr	r2, [pc, #144]	@ (8005dc4 <HAL_DMA_Init+0x3f0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d03b      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a22      	ldr	r2, [pc, #136]	@ (8005dc8 <HAL_DMA_Init+0x3f4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d036      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a21      	ldr	r2, [pc, #132]	@ (8005dcc <HAL_DMA_Init+0x3f8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d031      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd0 <HAL_DMA_Init+0x3fc>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d02c      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd4 <HAL_DMA_Init+0x400>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d027      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd8 <HAL_DMA_Init+0x404>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d022      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ddc <HAL_DMA_Init+0x408>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d01d      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a19      	ldr	r2, [pc, #100]	@ (8005de0 <HAL_DMA_Init+0x40c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d018      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a18      	ldr	r2, [pc, #96]	@ (8005de4 <HAL_DMA_Init+0x410>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a16      	ldr	r2, [pc, #88]	@ (8005de8 <HAL_DMA_Init+0x414>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00e      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a15      	ldr	r2, [pc, #84]	@ (8005dec <HAL_DMA_Init+0x418>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a13      	ldr	r2, [pc, #76]	@ (8005df0 <HAL_DMA_Init+0x41c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d004      	beq.n	8005db0 <HAL_DMA_Init+0x3dc>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a12      	ldr	r2, [pc, #72]	@ (8005df4 <HAL_DMA_Init+0x420>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d123      	bne.n	8005df8 <HAL_DMA_Init+0x424>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e022      	b.n	8005dfa <HAL_DMA_Init+0x426>
 8005db4:	fe10803f 	.word	0xfe10803f
 8005db8:	48022c08 	.word	0x48022c08
 8005dbc:	48022c1c 	.word	0x48022c1c
 8005dc0:	48022c30 	.word	0x48022c30
 8005dc4:	48022c44 	.word	0x48022c44
 8005dc8:	48022c58 	.word	0x48022c58
 8005dcc:	48022c6c 	.word	0x48022c6c
 8005dd0:	48022c80 	.word	0x48022c80
 8005dd4:	48022c94 	.word	0x48022c94
 8005dd8:	58025408 	.word	0x58025408
 8005ddc:	5802541c 	.word	0x5802541c
 8005de0:	58025430 	.word	0x58025430
 8005de4:	58025444 	.word	0x58025444
 8005de8:	58025458 	.word	0x58025458
 8005dec:	5802546c 	.word	0x5802546c
 8005df0:	58025480 	.word	0x58025480
 8005df4:	58025494 	.word	0x58025494
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d07d      	beq.n	8005efa <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a7f      	ldr	r2, [pc, #508]	@ (8006000 <HAL_DMA_Init+0x62c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d021      	beq.n	8005e4c <HAL_DMA_Init+0x478>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a7d      	ldr	r2, [pc, #500]	@ (8006004 <HAL_DMA_Init+0x630>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01c      	beq.n	8005e4c <HAL_DMA_Init+0x478>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a7c      	ldr	r2, [pc, #496]	@ (8006008 <HAL_DMA_Init+0x634>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d017      	beq.n	8005e4c <HAL_DMA_Init+0x478>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a7a      	ldr	r2, [pc, #488]	@ (800600c <HAL_DMA_Init+0x638>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d012      	beq.n	8005e4c <HAL_DMA_Init+0x478>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a79      	ldr	r2, [pc, #484]	@ (8006010 <HAL_DMA_Init+0x63c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00d      	beq.n	8005e4c <HAL_DMA_Init+0x478>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a77      	ldr	r2, [pc, #476]	@ (8006014 <HAL_DMA_Init+0x640>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d008      	beq.n	8005e4c <HAL_DMA_Init+0x478>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a76      	ldr	r2, [pc, #472]	@ (8006018 <HAL_DMA_Init+0x644>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <HAL_DMA_Init+0x478>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a74      	ldr	r2, [pc, #464]	@ (800601c <HAL_DMA_Init+0x648>)
 8005e4a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4b6e      	ldr	r3, [pc, #440]	@ (8006020 <HAL_DMA_Init+0x64c>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b40      	cmp	r3, #64	@ 0x40
 8005e72:	d008      	beq.n	8005e86 <HAL_DMA_Init+0x4b2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2b80      	cmp	r3, #128	@ 0x80
 8005e7a:	d102      	bne.n	8005e82 <HAL_DMA_Init+0x4ae>
 8005e7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005e80:	e002      	b.n	8005e88 <HAL_DMA_Init+0x4b4>
 8005e82:	2300      	movs	r3, #0
 8005e84:	e000      	b.n	8005e88 <HAL_DMA_Init+0x4b4>
 8005e86:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	68d2      	ldr	r2, [r2, #12]
 8005e8c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e8e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e96:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e9e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ea6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005eae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005eb6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4b55      	ldr	r3, [pc, #340]	@ (8006024 <HAL_DMA_Init+0x650>)
 8005ece:	4413      	add	r3, r2
 8005ed0:	4a55      	ldr	r2, [pc, #340]	@ (8006028 <HAL_DMA_Init+0x654>)
 8005ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed6:	091b      	lsrs	r3, r3, #4
 8005ed8:	009a      	lsls	r2, r3, #2
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f002 fa26 	bl	8008330 <DMA_CalcBaseAndBitshift>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	409a      	lsls	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	605a      	str	r2, [r3, #4]
 8005ef8:	e008      	b.n	8005f0c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2240      	movs	r2, #64	@ 0x40
 8005efe:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2203      	movs	r2, #3
 8005f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0ed      	b.n	80060e8 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a46      	ldr	r2, [pc, #280]	@ (800602c <HAL_DMA_Init+0x658>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d072      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a45      	ldr	r2, [pc, #276]	@ (8006030 <HAL_DMA_Init+0x65c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d06d      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a43      	ldr	r2, [pc, #268]	@ (8006034 <HAL_DMA_Init+0x660>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d068      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a42      	ldr	r2, [pc, #264]	@ (8006038 <HAL_DMA_Init+0x664>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d063      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a40      	ldr	r2, [pc, #256]	@ (800603c <HAL_DMA_Init+0x668>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d05e      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a3f      	ldr	r2, [pc, #252]	@ (8006040 <HAL_DMA_Init+0x66c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d059      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a3d      	ldr	r2, [pc, #244]	@ (8006044 <HAL_DMA_Init+0x670>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d054      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a3c      	ldr	r2, [pc, #240]	@ (8006048 <HAL_DMA_Init+0x674>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d04f      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a3a      	ldr	r2, [pc, #232]	@ (800604c <HAL_DMA_Init+0x678>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d04a      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a39      	ldr	r2, [pc, #228]	@ (8006050 <HAL_DMA_Init+0x67c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d045      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a37      	ldr	r2, [pc, #220]	@ (8006054 <HAL_DMA_Init+0x680>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d040      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a36      	ldr	r2, [pc, #216]	@ (8006058 <HAL_DMA_Init+0x684>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d03b      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a34      	ldr	r2, [pc, #208]	@ (800605c <HAL_DMA_Init+0x688>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d036      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a33      	ldr	r2, [pc, #204]	@ (8006060 <HAL_DMA_Init+0x68c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d031      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a31      	ldr	r2, [pc, #196]	@ (8006064 <HAL_DMA_Init+0x690>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d02c      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a30      	ldr	r2, [pc, #192]	@ (8006068 <HAL_DMA_Init+0x694>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d027      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a13      	ldr	r2, [pc, #76]	@ (8006000 <HAL_DMA_Init+0x62c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d022      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a12      	ldr	r2, [pc, #72]	@ (8006004 <HAL_DMA_Init+0x630>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d01d      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a10      	ldr	r2, [pc, #64]	@ (8006008 <HAL_DMA_Init+0x634>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d018      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a0f      	ldr	r2, [pc, #60]	@ (800600c <HAL_DMA_Init+0x638>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d013      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8006010 <HAL_DMA_Init+0x63c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00e      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8006014 <HAL_DMA_Init+0x640>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d009      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a0a      	ldr	r2, [pc, #40]	@ (8006018 <HAL_DMA_Init+0x644>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <HAL_DMA_Init+0x628>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a09      	ldr	r2, [pc, #36]	@ (800601c <HAL_DMA_Init+0x648>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d137      	bne.n	800606c <HAL_DMA_Init+0x698>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e036      	b.n	800606e <HAL_DMA_Init+0x69a>
 8006000:	58025408 	.word	0x58025408
 8006004:	5802541c 	.word	0x5802541c
 8006008:	58025430 	.word	0x58025430
 800600c:	58025444 	.word	0x58025444
 8006010:	58025458 	.word	0x58025458
 8006014:	5802546c 	.word	0x5802546c
 8006018:	58025480 	.word	0x58025480
 800601c:	58025494 	.word	0x58025494
 8006020:	fffe000f 	.word	0xfffe000f
 8006024:	a7fdabf8 	.word	0xa7fdabf8
 8006028:	cccccccd 	.word	0xcccccccd
 800602c:	40020010 	.word	0x40020010
 8006030:	40020028 	.word	0x40020028
 8006034:	40020040 	.word	0x40020040
 8006038:	40020058 	.word	0x40020058
 800603c:	40020070 	.word	0x40020070
 8006040:	40020088 	.word	0x40020088
 8006044:	400200a0 	.word	0x400200a0
 8006048:	400200b8 	.word	0x400200b8
 800604c:	40020410 	.word	0x40020410
 8006050:	40020428 	.word	0x40020428
 8006054:	40020440 	.word	0x40020440
 8006058:	40020458 	.word	0x40020458
 800605c:	40020470 	.word	0x40020470
 8006060:	40020488 	.word	0x40020488
 8006064:	400204a0 	.word	0x400204a0
 8006068:	400204b8 	.word	0x400204b8
 800606c:	2300      	movs	r3, #0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d032      	beq.n	80060d8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f002 fa8a 	bl	800858c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b80      	cmp	r3, #128	@ 0x80
 800607e:	d102      	bne.n	8006086 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800609a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d010      	beq.n	80060c6 <HAL_DMA_Init+0x6f2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d80c      	bhi.n	80060c6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f002 fb07 	bl	80086c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80060c2:	605a      	str	r2, [r3, #4]
 80060c4:	e008      	b.n	80060d8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e226      	b.n	800655a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_DMA_Start_IT+0x2a>
 8006116:	2302      	movs	r3, #2
 8006118:	e21f      	b.n	800655a <HAL_DMA_Start_IT+0x46a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	f040 820a 	bne.w	8006544 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a68      	ldr	r2, [pc, #416]	@ (80062e4 <HAL_DMA_Start_IT+0x1f4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d04a      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a66      	ldr	r2, [pc, #408]	@ (80062e8 <HAL_DMA_Start_IT+0x1f8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d045      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a65      	ldr	r2, [pc, #404]	@ (80062ec <HAL_DMA_Start_IT+0x1fc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d040      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a63      	ldr	r2, [pc, #396]	@ (80062f0 <HAL_DMA_Start_IT+0x200>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d03b      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a62      	ldr	r2, [pc, #392]	@ (80062f4 <HAL_DMA_Start_IT+0x204>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d036      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a60      	ldr	r2, [pc, #384]	@ (80062f8 <HAL_DMA_Start_IT+0x208>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d031      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a5f      	ldr	r2, [pc, #380]	@ (80062fc <HAL_DMA_Start_IT+0x20c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d02c      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a5d      	ldr	r2, [pc, #372]	@ (8006300 <HAL_DMA_Start_IT+0x210>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d027      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a5c      	ldr	r2, [pc, #368]	@ (8006304 <HAL_DMA_Start_IT+0x214>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d022      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a5a      	ldr	r2, [pc, #360]	@ (8006308 <HAL_DMA_Start_IT+0x218>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01d      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a59      	ldr	r2, [pc, #356]	@ (800630c <HAL_DMA_Start_IT+0x21c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d018      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a57      	ldr	r2, [pc, #348]	@ (8006310 <HAL_DMA_Start_IT+0x220>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d013      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a56      	ldr	r2, [pc, #344]	@ (8006314 <HAL_DMA_Start_IT+0x224>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00e      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a54      	ldr	r2, [pc, #336]	@ (8006318 <HAL_DMA_Start_IT+0x228>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d009      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a53      	ldr	r2, [pc, #332]	@ (800631c <HAL_DMA_Start_IT+0x22c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d004      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a51      	ldr	r2, [pc, #324]	@ (8006320 <HAL_DMA_Start_IT+0x230>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d108      	bne.n	80061f0 <HAL_DMA_Start_IT+0x100>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0201 	bic.w	r2, r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	e007      	b.n	8006200 <HAL_DMA_Start_IT+0x110>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0201 	bic.w	r2, r2, #1
 80061fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f001 feae 	bl	8007f68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a34      	ldr	r2, [pc, #208]	@ (80062e4 <HAL_DMA_Start_IT+0x1f4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d04a      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a33      	ldr	r2, [pc, #204]	@ (80062e8 <HAL_DMA_Start_IT+0x1f8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d045      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a31      	ldr	r2, [pc, #196]	@ (80062ec <HAL_DMA_Start_IT+0x1fc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d040      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a30      	ldr	r2, [pc, #192]	@ (80062f0 <HAL_DMA_Start_IT+0x200>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d03b      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2e      	ldr	r2, [pc, #184]	@ (80062f4 <HAL_DMA_Start_IT+0x204>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d036      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2d      	ldr	r2, [pc, #180]	@ (80062f8 <HAL_DMA_Start_IT+0x208>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d031      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a2b      	ldr	r2, [pc, #172]	@ (80062fc <HAL_DMA_Start_IT+0x20c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d02c      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a2a      	ldr	r2, [pc, #168]	@ (8006300 <HAL_DMA_Start_IT+0x210>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d027      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a28      	ldr	r2, [pc, #160]	@ (8006304 <HAL_DMA_Start_IT+0x214>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d022      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a27      	ldr	r2, [pc, #156]	@ (8006308 <HAL_DMA_Start_IT+0x218>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d01d      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a25      	ldr	r2, [pc, #148]	@ (800630c <HAL_DMA_Start_IT+0x21c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d018      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a24      	ldr	r2, [pc, #144]	@ (8006310 <HAL_DMA_Start_IT+0x220>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d013      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a22      	ldr	r2, [pc, #136]	@ (8006314 <HAL_DMA_Start_IT+0x224>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00e      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a21      	ldr	r2, [pc, #132]	@ (8006318 <HAL_DMA_Start_IT+0x228>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1f      	ldr	r2, [pc, #124]	@ (800631c <HAL_DMA_Start_IT+0x22c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006320 <HAL_DMA_Start_IT+0x230>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d101      	bne.n	80062b0 <HAL_DMA_Start_IT+0x1c0>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <HAL_DMA_Start_IT+0x1c2>
 80062b0:	2300      	movs	r3, #0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d036      	beq.n	8006324 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f023 021e 	bic.w	r2, r3, #30
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0216 	orr.w	r2, r2, #22
 80062c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d03e      	beq.n	8006350 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0208 	orr.w	r2, r2, #8
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e035      	b.n	8006350 <HAL_DMA_Start_IT+0x260>
 80062e4:	40020010 	.word	0x40020010
 80062e8:	40020028 	.word	0x40020028
 80062ec:	40020040 	.word	0x40020040
 80062f0:	40020058 	.word	0x40020058
 80062f4:	40020070 	.word	0x40020070
 80062f8:	40020088 	.word	0x40020088
 80062fc:	400200a0 	.word	0x400200a0
 8006300:	400200b8 	.word	0x400200b8
 8006304:	40020410 	.word	0x40020410
 8006308:	40020428 	.word	0x40020428
 800630c:	40020440 	.word	0x40020440
 8006310:	40020458 	.word	0x40020458
 8006314:	40020470 	.word	0x40020470
 8006318:	40020488 	.word	0x40020488
 800631c:	400204a0 	.word	0x400204a0
 8006320:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f023 020e 	bic.w	r2, r3, #14
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 020a 	orr.w	r2, r2, #10
 8006336:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0204 	orr.w	r2, r2, #4
 800634e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a83      	ldr	r2, [pc, #524]	@ (8006564 <HAL_DMA_Start_IT+0x474>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d072      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a82      	ldr	r2, [pc, #520]	@ (8006568 <HAL_DMA_Start_IT+0x478>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d06d      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a80      	ldr	r2, [pc, #512]	@ (800656c <HAL_DMA_Start_IT+0x47c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d068      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a7f      	ldr	r2, [pc, #508]	@ (8006570 <HAL_DMA_Start_IT+0x480>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d063      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7d      	ldr	r2, [pc, #500]	@ (8006574 <HAL_DMA_Start_IT+0x484>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d05e      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a7c      	ldr	r2, [pc, #496]	@ (8006578 <HAL_DMA_Start_IT+0x488>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d059      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a7a      	ldr	r2, [pc, #488]	@ (800657c <HAL_DMA_Start_IT+0x48c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d054      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a79      	ldr	r2, [pc, #484]	@ (8006580 <HAL_DMA_Start_IT+0x490>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d04f      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a77      	ldr	r2, [pc, #476]	@ (8006584 <HAL_DMA_Start_IT+0x494>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d04a      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a76      	ldr	r2, [pc, #472]	@ (8006588 <HAL_DMA_Start_IT+0x498>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d045      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a74      	ldr	r2, [pc, #464]	@ (800658c <HAL_DMA_Start_IT+0x49c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d040      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a73      	ldr	r2, [pc, #460]	@ (8006590 <HAL_DMA_Start_IT+0x4a0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d03b      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a71      	ldr	r2, [pc, #452]	@ (8006594 <HAL_DMA_Start_IT+0x4a4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d036      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a70      	ldr	r2, [pc, #448]	@ (8006598 <HAL_DMA_Start_IT+0x4a8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d031      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a6e      	ldr	r2, [pc, #440]	@ (800659c <HAL_DMA_Start_IT+0x4ac>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d02c      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a6d      	ldr	r2, [pc, #436]	@ (80065a0 <HAL_DMA_Start_IT+0x4b0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d027      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a6b      	ldr	r2, [pc, #428]	@ (80065a4 <HAL_DMA_Start_IT+0x4b4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d022      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a6a      	ldr	r2, [pc, #424]	@ (80065a8 <HAL_DMA_Start_IT+0x4b8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01d      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a68      	ldr	r2, [pc, #416]	@ (80065ac <HAL_DMA_Start_IT+0x4bc>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a67      	ldr	r2, [pc, #412]	@ (80065b0 <HAL_DMA_Start_IT+0x4c0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d013      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a65      	ldr	r2, [pc, #404]	@ (80065b4 <HAL_DMA_Start_IT+0x4c4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a64      	ldr	r2, [pc, #400]	@ (80065b8 <HAL_DMA_Start_IT+0x4c8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a62      	ldr	r2, [pc, #392]	@ (80065bc <HAL_DMA_Start_IT+0x4cc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a61      	ldr	r2, [pc, #388]	@ (80065c0 <HAL_DMA_Start_IT+0x4d0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d101      	bne.n	8006444 <HAL_DMA_Start_IT+0x354>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <HAL_DMA_Start_IT+0x356>
 8006444:	2300      	movs	r3, #0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01a      	beq.n	8006480 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006466:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800647a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800647e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a37      	ldr	r2, [pc, #220]	@ (8006564 <HAL_DMA_Start_IT+0x474>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d04a      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a36      	ldr	r2, [pc, #216]	@ (8006568 <HAL_DMA_Start_IT+0x478>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d045      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a34      	ldr	r2, [pc, #208]	@ (800656c <HAL_DMA_Start_IT+0x47c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d040      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a33      	ldr	r2, [pc, #204]	@ (8006570 <HAL_DMA_Start_IT+0x480>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d03b      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a31      	ldr	r2, [pc, #196]	@ (8006574 <HAL_DMA_Start_IT+0x484>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d036      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a30      	ldr	r2, [pc, #192]	@ (8006578 <HAL_DMA_Start_IT+0x488>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d031      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a2e      	ldr	r2, [pc, #184]	@ (800657c <HAL_DMA_Start_IT+0x48c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d02c      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006580 <HAL_DMA_Start_IT+0x490>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d027      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006584 <HAL_DMA_Start_IT+0x494>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d022      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2a      	ldr	r2, [pc, #168]	@ (8006588 <HAL_DMA_Start_IT+0x498>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d01d      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a28      	ldr	r2, [pc, #160]	@ (800658c <HAL_DMA_Start_IT+0x49c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d018      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a27      	ldr	r2, [pc, #156]	@ (8006590 <HAL_DMA_Start_IT+0x4a0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d013      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a25      	ldr	r2, [pc, #148]	@ (8006594 <HAL_DMA_Start_IT+0x4a4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00e      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a24      	ldr	r2, [pc, #144]	@ (8006598 <HAL_DMA_Start_IT+0x4a8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d009      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a22      	ldr	r2, [pc, #136]	@ (800659c <HAL_DMA_Start_IT+0x4ac>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d004      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a21      	ldr	r2, [pc, #132]	@ (80065a0 <HAL_DMA_Start_IT+0x4b0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d108      	bne.n	8006532 <HAL_DMA_Start_IT+0x442>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e012      	b.n	8006558 <HAL_DMA_Start_IT+0x468>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f042 0201 	orr.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	e009      	b.n	8006558 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800654a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40020010 	.word	0x40020010
 8006568:	40020028 	.word	0x40020028
 800656c:	40020040 	.word	0x40020040
 8006570:	40020058 	.word	0x40020058
 8006574:	40020070 	.word	0x40020070
 8006578:	40020088 	.word	0x40020088
 800657c:	400200a0 	.word	0x400200a0
 8006580:	400200b8 	.word	0x400200b8
 8006584:	40020410 	.word	0x40020410
 8006588:	40020428 	.word	0x40020428
 800658c:	40020440 	.word	0x40020440
 8006590:	40020458 	.word	0x40020458
 8006594:	40020470 	.word	0x40020470
 8006598:	40020488 	.word	0x40020488
 800659c:	400204a0 	.word	0x400204a0
 80065a0:	400204b8 	.word	0x400204b8
 80065a4:	58025408 	.word	0x58025408
 80065a8:	5802541c 	.word	0x5802541c
 80065ac:	58025430 	.word	0x58025430
 80065b0:	58025444 	.word	0x58025444
 80065b4:	58025458 	.word	0x58025458
 80065b8:	5802546c 	.word	0x5802546c
 80065bc:	58025480 	.word	0x58025480
 80065c0:	58025494 	.word	0x58025494

080065c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80065cc:	f7ff f84a 	bl	8005664 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e2dc      	b.n	8006b96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d008      	beq.n	80065fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2280      	movs	r2, #128	@ 0x80
 80065ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e2cd      	b.n	8006b96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a76      	ldr	r2, [pc, #472]	@ (80067d8 <HAL_DMA_Abort+0x214>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d04a      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a74      	ldr	r2, [pc, #464]	@ (80067dc <HAL_DMA_Abort+0x218>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d045      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a73      	ldr	r2, [pc, #460]	@ (80067e0 <HAL_DMA_Abort+0x21c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d040      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a71      	ldr	r2, [pc, #452]	@ (80067e4 <HAL_DMA_Abort+0x220>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d03b      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a70      	ldr	r2, [pc, #448]	@ (80067e8 <HAL_DMA_Abort+0x224>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d036      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a6e      	ldr	r2, [pc, #440]	@ (80067ec <HAL_DMA_Abort+0x228>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d031      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a6d      	ldr	r2, [pc, #436]	@ (80067f0 <HAL_DMA_Abort+0x22c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d02c      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a6b      	ldr	r2, [pc, #428]	@ (80067f4 <HAL_DMA_Abort+0x230>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d027      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a6a      	ldr	r2, [pc, #424]	@ (80067f8 <HAL_DMA_Abort+0x234>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d022      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a68      	ldr	r2, [pc, #416]	@ (80067fc <HAL_DMA_Abort+0x238>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01d      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a67      	ldr	r2, [pc, #412]	@ (8006800 <HAL_DMA_Abort+0x23c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d018      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a65      	ldr	r2, [pc, #404]	@ (8006804 <HAL_DMA_Abort+0x240>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a64      	ldr	r2, [pc, #400]	@ (8006808 <HAL_DMA_Abort+0x244>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a62      	ldr	r2, [pc, #392]	@ (800680c <HAL_DMA_Abort+0x248>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d009      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a61      	ldr	r2, [pc, #388]	@ (8006810 <HAL_DMA_Abort+0x24c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d004      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a5f      	ldr	r2, [pc, #380]	@ (8006814 <HAL_DMA_Abort+0x250>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d101      	bne.n	800669e <HAL_DMA_Abort+0xda>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <HAL_DMA_Abort+0xdc>
 800669e:	2300      	movs	r3, #0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d013      	beq.n	80066cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 021e 	bic.w	r2, r2, #30
 80066b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e00a      	b.n	80066e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 020e 	bic.w	r2, r2, #14
 80066da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a3c      	ldr	r2, [pc, #240]	@ (80067d8 <HAL_DMA_Abort+0x214>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d072      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a3a      	ldr	r2, [pc, #232]	@ (80067dc <HAL_DMA_Abort+0x218>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d06d      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a39      	ldr	r2, [pc, #228]	@ (80067e0 <HAL_DMA_Abort+0x21c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d068      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a37      	ldr	r2, [pc, #220]	@ (80067e4 <HAL_DMA_Abort+0x220>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d063      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a36      	ldr	r2, [pc, #216]	@ (80067e8 <HAL_DMA_Abort+0x224>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d05e      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a34      	ldr	r2, [pc, #208]	@ (80067ec <HAL_DMA_Abort+0x228>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d059      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a33      	ldr	r2, [pc, #204]	@ (80067f0 <HAL_DMA_Abort+0x22c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d054      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a31      	ldr	r2, [pc, #196]	@ (80067f4 <HAL_DMA_Abort+0x230>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d04f      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a30      	ldr	r2, [pc, #192]	@ (80067f8 <HAL_DMA_Abort+0x234>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d04a      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2e      	ldr	r2, [pc, #184]	@ (80067fc <HAL_DMA_Abort+0x238>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d045      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2d      	ldr	r2, [pc, #180]	@ (8006800 <HAL_DMA_Abort+0x23c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d040      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a2b      	ldr	r2, [pc, #172]	@ (8006804 <HAL_DMA_Abort+0x240>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d03b      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a2a      	ldr	r2, [pc, #168]	@ (8006808 <HAL_DMA_Abort+0x244>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d036      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a28      	ldr	r2, [pc, #160]	@ (800680c <HAL_DMA_Abort+0x248>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d031      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a27      	ldr	r2, [pc, #156]	@ (8006810 <HAL_DMA_Abort+0x24c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d02c      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a25      	ldr	r2, [pc, #148]	@ (8006814 <HAL_DMA_Abort+0x250>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d027      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a24      	ldr	r2, [pc, #144]	@ (8006818 <HAL_DMA_Abort+0x254>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d022      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a22      	ldr	r2, [pc, #136]	@ (800681c <HAL_DMA_Abort+0x258>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d01d      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a21      	ldr	r2, [pc, #132]	@ (8006820 <HAL_DMA_Abort+0x25c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d018      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006824 <HAL_DMA_Abort+0x260>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006828 <HAL_DMA_Abort+0x264>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00e      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1c      	ldr	r2, [pc, #112]	@ (800682c <HAL_DMA_Abort+0x268>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d009      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006830 <HAL_DMA_Abort+0x26c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a19      	ldr	r2, [pc, #100]	@ (8006834 <HAL_DMA_Abort+0x270>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d132      	bne.n	8006838 <HAL_DMA_Abort+0x274>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e031      	b.n	800683a <HAL_DMA_Abort+0x276>
 80067d6:	bf00      	nop
 80067d8:	40020010 	.word	0x40020010
 80067dc:	40020028 	.word	0x40020028
 80067e0:	40020040 	.word	0x40020040
 80067e4:	40020058 	.word	0x40020058
 80067e8:	40020070 	.word	0x40020070
 80067ec:	40020088 	.word	0x40020088
 80067f0:	400200a0 	.word	0x400200a0
 80067f4:	400200b8 	.word	0x400200b8
 80067f8:	40020410 	.word	0x40020410
 80067fc:	40020428 	.word	0x40020428
 8006800:	40020440 	.word	0x40020440
 8006804:	40020458 	.word	0x40020458
 8006808:	40020470 	.word	0x40020470
 800680c:	40020488 	.word	0x40020488
 8006810:	400204a0 	.word	0x400204a0
 8006814:	400204b8 	.word	0x400204b8
 8006818:	58025408 	.word	0x58025408
 800681c:	5802541c 	.word	0x5802541c
 8006820:	58025430 	.word	0x58025430
 8006824:	58025444 	.word	0x58025444
 8006828:	58025458 	.word	0x58025458
 800682c:	5802546c 	.word	0x5802546c
 8006830:	58025480 	.word	0x58025480
 8006834:	58025494 	.word	0x58025494
 8006838:	2300      	movs	r3, #0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800684c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a6d      	ldr	r2, [pc, #436]	@ (8006a08 <HAL_DMA_Abort+0x444>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d04a      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a6b      	ldr	r2, [pc, #428]	@ (8006a0c <HAL_DMA_Abort+0x448>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d045      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a6a      	ldr	r2, [pc, #424]	@ (8006a10 <HAL_DMA_Abort+0x44c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d040      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a68      	ldr	r2, [pc, #416]	@ (8006a14 <HAL_DMA_Abort+0x450>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d03b      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a67      	ldr	r2, [pc, #412]	@ (8006a18 <HAL_DMA_Abort+0x454>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d036      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a65      	ldr	r2, [pc, #404]	@ (8006a1c <HAL_DMA_Abort+0x458>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d031      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a64      	ldr	r2, [pc, #400]	@ (8006a20 <HAL_DMA_Abort+0x45c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d02c      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a62      	ldr	r2, [pc, #392]	@ (8006a24 <HAL_DMA_Abort+0x460>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d027      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a61      	ldr	r2, [pc, #388]	@ (8006a28 <HAL_DMA_Abort+0x464>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a5f      	ldr	r2, [pc, #380]	@ (8006a2c <HAL_DMA_Abort+0x468>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01d      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a5e      	ldr	r2, [pc, #376]	@ (8006a30 <HAL_DMA_Abort+0x46c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a5c      	ldr	r2, [pc, #368]	@ (8006a34 <HAL_DMA_Abort+0x470>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006a38 <HAL_DMA_Abort+0x474>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a59      	ldr	r2, [pc, #356]	@ (8006a3c <HAL_DMA_Abort+0x478>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a58      	ldr	r2, [pc, #352]	@ (8006a40 <HAL_DMA_Abort+0x47c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a56      	ldr	r2, [pc, #344]	@ (8006a44 <HAL_DMA_Abort+0x480>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d108      	bne.n	8006900 <HAL_DMA_Abort+0x33c>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0201 	bic.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e007      	b.n	8006910 <HAL_DMA_Abort+0x34c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006910:	e013      	b.n	800693a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006912:	f7fe fea7 	bl	8005664 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b05      	cmp	r3, #5
 800691e:	d90c      	bls.n	800693a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2203      	movs	r2, #3
 800692a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e12d      	b.n	8006b96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e5      	bne.n	8006912 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2f      	ldr	r2, [pc, #188]	@ (8006a08 <HAL_DMA_Abort+0x444>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d04a      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a2d      	ldr	r2, [pc, #180]	@ (8006a0c <HAL_DMA_Abort+0x448>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d045      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a2c      	ldr	r2, [pc, #176]	@ (8006a10 <HAL_DMA_Abort+0x44c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d040      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a2a      	ldr	r2, [pc, #168]	@ (8006a14 <HAL_DMA_Abort+0x450>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d03b      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a29      	ldr	r2, [pc, #164]	@ (8006a18 <HAL_DMA_Abort+0x454>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d036      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a27      	ldr	r2, [pc, #156]	@ (8006a1c <HAL_DMA_Abort+0x458>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d031      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a26      	ldr	r2, [pc, #152]	@ (8006a20 <HAL_DMA_Abort+0x45c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d02c      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a24      	ldr	r2, [pc, #144]	@ (8006a24 <HAL_DMA_Abort+0x460>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d027      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a23      	ldr	r2, [pc, #140]	@ (8006a28 <HAL_DMA_Abort+0x464>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d022      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a21      	ldr	r2, [pc, #132]	@ (8006a2c <HAL_DMA_Abort+0x468>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d01d      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a20      	ldr	r2, [pc, #128]	@ (8006a30 <HAL_DMA_Abort+0x46c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d018      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006a34 <HAL_DMA_Abort+0x470>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d013      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006a38 <HAL_DMA_Abort+0x474>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00e      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1b      	ldr	r2, [pc, #108]	@ (8006a3c <HAL_DMA_Abort+0x478>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d009      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a40 <HAL_DMA_Abort+0x47c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d004      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a18      	ldr	r2, [pc, #96]	@ (8006a44 <HAL_DMA_Abort+0x480>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d101      	bne.n	80069ea <HAL_DMA_Abort+0x426>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <HAL_DMA_Abort+0x428>
 80069ea:	2300      	movs	r3, #0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d02b      	beq.n	8006a48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	223f      	movs	r2, #63	@ 0x3f
 8006a00:	409a      	lsls	r2, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	609a      	str	r2, [r3, #8]
 8006a06:	e02a      	b.n	8006a5e <HAL_DMA_Abort+0x49a>
 8006a08:	40020010 	.word	0x40020010
 8006a0c:	40020028 	.word	0x40020028
 8006a10:	40020040 	.word	0x40020040
 8006a14:	40020058 	.word	0x40020058
 8006a18:	40020070 	.word	0x40020070
 8006a1c:	40020088 	.word	0x40020088
 8006a20:	400200a0 	.word	0x400200a0
 8006a24:	400200b8 	.word	0x400200b8
 8006a28:	40020410 	.word	0x40020410
 8006a2c:	40020428 	.word	0x40020428
 8006a30:	40020440 	.word	0x40020440
 8006a34:	40020458 	.word	0x40020458
 8006a38:	40020470 	.word	0x40020470
 8006a3c:	40020488 	.word	0x40020488
 8006a40:	400204a0 	.word	0x400204a0
 8006a44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2201      	movs	r2, #1
 8006a58:	409a      	lsls	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a4f      	ldr	r2, [pc, #316]	@ (8006ba0 <HAL_DMA_Abort+0x5dc>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d072      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a4d      	ldr	r2, [pc, #308]	@ (8006ba4 <HAL_DMA_Abort+0x5e0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d06d      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a4c      	ldr	r2, [pc, #304]	@ (8006ba8 <HAL_DMA_Abort+0x5e4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d068      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a4a      	ldr	r2, [pc, #296]	@ (8006bac <HAL_DMA_Abort+0x5e8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d063      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a49      	ldr	r2, [pc, #292]	@ (8006bb0 <HAL_DMA_Abort+0x5ec>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d05e      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a47      	ldr	r2, [pc, #284]	@ (8006bb4 <HAL_DMA_Abort+0x5f0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d059      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a46      	ldr	r2, [pc, #280]	@ (8006bb8 <HAL_DMA_Abort+0x5f4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d054      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a44      	ldr	r2, [pc, #272]	@ (8006bbc <HAL_DMA_Abort+0x5f8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d04f      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a43      	ldr	r2, [pc, #268]	@ (8006bc0 <HAL_DMA_Abort+0x5fc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d04a      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a41      	ldr	r2, [pc, #260]	@ (8006bc4 <HAL_DMA_Abort+0x600>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d045      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a40      	ldr	r2, [pc, #256]	@ (8006bc8 <HAL_DMA_Abort+0x604>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d040      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a3e      	ldr	r2, [pc, #248]	@ (8006bcc <HAL_DMA_Abort+0x608>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d03b      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a3d      	ldr	r2, [pc, #244]	@ (8006bd0 <HAL_DMA_Abort+0x60c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d036      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8006bd4 <HAL_DMA_Abort+0x610>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d031      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a3a      	ldr	r2, [pc, #232]	@ (8006bd8 <HAL_DMA_Abort+0x614>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d02c      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a38      	ldr	r2, [pc, #224]	@ (8006bdc <HAL_DMA_Abort+0x618>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d027      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a37      	ldr	r2, [pc, #220]	@ (8006be0 <HAL_DMA_Abort+0x61c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d022      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a35      	ldr	r2, [pc, #212]	@ (8006be4 <HAL_DMA_Abort+0x620>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01d      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a34      	ldr	r2, [pc, #208]	@ (8006be8 <HAL_DMA_Abort+0x624>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d018      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a32      	ldr	r2, [pc, #200]	@ (8006bec <HAL_DMA_Abort+0x628>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a31      	ldr	r2, [pc, #196]	@ (8006bf0 <HAL_DMA_Abort+0x62c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a2f      	ldr	r2, [pc, #188]	@ (8006bf4 <HAL_DMA_Abort+0x630>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a2e      	ldr	r2, [pc, #184]	@ (8006bf8 <HAL_DMA_Abort+0x634>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a2c      	ldr	r2, [pc, #176]	@ (8006bfc <HAL_DMA_Abort+0x638>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d101      	bne.n	8006b52 <HAL_DMA_Abort+0x58e>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <HAL_DMA_Abort+0x590>
 8006b52:	2300      	movs	r3, #0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d015      	beq.n	8006b84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006b60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00c      	beq.n	8006b84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40020010 	.word	0x40020010
 8006ba4:	40020028 	.word	0x40020028
 8006ba8:	40020040 	.word	0x40020040
 8006bac:	40020058 	.word	0x40020058
 8006bb0:	40020070 	.word	0x40020070
 8006bb4:	40020088 	.word	0x40020088
 8006bb8:	400200a0 	.word	0x400200a0
 8006bbc:	400200b8 	.word	0x400200b8
 8006bc0:	40020410 	.word	0x40020410
 8006bc4:	40020428 	.word	0x40020428
 8006bc8:	40020440 	.word	0x40020440
 8006bcc:	40020458 	.word	0x40020458
 8006bd0:	40020470 	.word	0x40020470
 8006bd4:	40020488 	.word	0x40020488
 8006bd8:	400204a0 	.word	0x400204a0
 8006bdc:	400204b8 	.word	0x400204b8
 8006be0:	58025408 	.word	0x58025408
 8006be4:	5802541c 	.word	0x5802541c
 8006be8:	58025430 	.word	0x58025430
 8006bec:	58025444 	.word	0x58025444
 8006bf0:	58025458 	.word	0x58025458
 8006bf4:	5802546c 	.word	0x5802546c
 8006bf8:	58025480 	.word	0x58025480
 8006bfc:	58025494 	.word	0x58025494

08006c00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e237      	b.n	8007082 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d004      	beq.n	8006c28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2280      	movs	r2, #128	@ 0x80
 8006c22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e22c      	b.n	8007082 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a5c      	ldr	r2, [pc, #368]	@ (8006da0 <HAL_DMA_Abort_IT+0x1a0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d04a      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a5b      	ldr	r2, [pc, #364]	@ (8006da4 <HAL_DMA_Abort_IT+0x1a4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d045      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a59      	ldr	r2, [pc, #356]	@ (8006da8 <HAL_DMA_Abort_IT+0x1a8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d040      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a58      	ldr	r2, [pc, #352]	@ (8006dac <HAL_DMA_Abort_IT+0x1ac>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d03b      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a56      	ldr	r2, [pc, #344]	@ (8006db0 <HAL_DMA_Abort_IT+0x1b0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d036      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a55      	ldr	r2, [pc, #340]	@ (8006db4 <HAL_DMA_Abort_IT+0x1b4>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d031      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a53      	ldr	r2, [pc, #332]	@ (8006db8 <HAL_DMA_Abort_IT+0x1b8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d02c      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a52      	ldr	r2, [pc, #328]	@ (8006dbc <HAL_DMA_Abort_IT+0x1bc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d027      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a50      	ldr	r2, [pc, #320]	@ (8006dc0 <HAL_DMA_Abort_IT+0x1c0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d022      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a4f      	ldr	r2, [pc, #316]	@ (8006dc4 <HAL_DMA_Abort_IT+0x1c4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d01d      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a4d      	ldr	r2, [pc, #308]	@ (8006dc8 <HAL_DMA_Abort_IT+0x1c8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d018      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a4c      	ldr	r2, [pc, #304]	@ (8006dcc <HAL_DMA_Abort_IT+0x1cc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d013      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a4a      	ldr	r2, [pc, #296]	@ (8006dd0 <HAL_DMA_Abort_IT+0x1d0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00e      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a49      	ldr	r2, [pc, #292]	@ (8006dd4 <HAL_DMA_Abort_IT+0x1d4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d009      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a47      	ldr	r2, [pc, #284]	@ (8006dd8 <HAL_DMA_Abort_IT+0x1d8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d004      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a46      	ldr	r2, [pc, #280]	@ (8006ddc <HAL_DMA_Abort_IT+0x1dc>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d101      	bne.n	8006ccc <HAL_DMA_Abort_IT+0xcc>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e000      	b.n	8006cce <HAL_DMA_Abort_IT+0xce>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 8086 	beq.w	8006de0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a2f      	ldr	r2, [pc, #188]	@ (8006da0 <HAL_DMA_Abort_IT+0x1a0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d04a      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a2e      	ldr	r2, [pc, #184]	@ (8006da4 <HAL_DMA_Abort_IT+0x1a4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d045      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8006da8 <HAL_DMA_Abort_IT+0x1a8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d040      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8006dac <HAL_DMA_Abort_IT+0x1ac>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d03b      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a29      	ldr	r2, [pc, #164]	@ (8006db0 <HAL_DMA_Abort_IT+0x1b0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d036      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a28      	ldr	r2, [pc, #160]	@ (8006db4 <HAL_DMA_Abort_IT+0x1b4>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d031      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a26      	ldr	r2, [pc, #152]	@ (8006db8 <HAL_DMA_Abort_IT+0x1b8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d02c      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a25      	ldr	r2, [pc, #148]	@ (8006dbc <HAL_DMA_Abort_IT+0x1bc>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d027      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a23      	ldr	r2, [pc, #140]	@ (8006dc0 <HAL_DMA_Abort_IT+0x1c0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d022      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a22      	ldr	r2, [pc, #136]	@ (8006dc4 <HAL_DMA_Abort_IT+0x1c4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d01d      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a20      	ldr	r2, [pc, #128]	@ (8006dc8 <HAL_DMA_Abort_IT+0x1c8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d018      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006dcc <HAL_DMA_Abort_IT+0x1cc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d013      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd0 <HAL_DMA_Abort_IT+0x1d0>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00e      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd4 <HAL_DMA_Abort_IT+0x1d4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d009      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8006dd8 <HAL_DMA_Abort_IT+0x1d8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d004      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a19      	ldr	r2, [pc, #100]	@ (8006ddc <HAL_DMA_Abort_IT+0x1dc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d108      	bne.n	8006d8e <HAL_DMA_Abort_IT+0x18e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0201 	bic.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e178      	b.n	8007080 <HAL_DMA_Abort_IT+0x480>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0201 	bic.w	r2, r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	e16f      	b.n	8007080 <HAL_DMA_Abort_IT+0x480>
 8006da0:	40020010 	.word	0x40020010
 8006da4:	40020028 	.word	0x40020028
 8006da8:	40020040 	.word	0x40020040
 8006dac:	40020058 	.word	0x40020058
 8006db0:	40020070 	.word	0x40020070
 8006db4:	40020088 	.word	0x40020088
 8006db8:	400200a0 	.word	0x400200a0
 8006dbc:	400200b8 	.word	0x400200b8
 8006dc0:	40020410 	.word	0x40020410
 8006dc4:	40020428 	.word	0x40020428
 8006dc8:	40020440 	.word	0x40020440
 8006dcc:	40020458 	.word	0x40020458
 8006dd0:	40020470 	.word	0x40020470
 8006dd4:	40020488 	.word	0x40020488
 8006dd8:	400204a0 	.word	0x400204a0
 8006ddc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 020e 	bic.w	r2, r2, #14
 8006dee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a6c      	ldr	r2, [pc, #432]	@ (8006fa8 <HAL_DMA_Abort_IT+0x3a8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d04a      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a6b      	ldr	r2, [pc, #428]	@ (8006fac <HAL_DMA_Abort_IT+0x3ac>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d045      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a69      	ldr	r2, [pc, #420]	@ (8006fb0 <HAL_DMA_Abort_IT+0x3b0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d040      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a68      	ldr	r2, [pc, #416]	@ (8006fb4 <HAL_DMA_Abort_IT+0x3b4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d03b      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a66      	ldr	r2, [pc, #408]	@ (8006fb8 <HAL_DMA_Abort_IT+0x3b8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d036      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a65      	ldr	r2, [pc, #404]	@ (8006fbc <HAL_DMA_Abort_IT+0x3bc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d031      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a63      	ldr	r2, [pc, #396]	@ (8006fc0 <HAL_DMA_Abort_IT+0x3c0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d02c      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a62      	ldr	r2, [pc, #392]	@ (8006fc4 <HAL_DMA_Abort_IT+0x3c4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d027      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a60      	ldr	r2, [pc, #384]	@ (8006fc8 <HAL_DMA_Abort_IT+0x3c8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d022      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a5f      	ldr	r2, [pc, #380]	@ (8006fcc <HAL_DMA_Abort_IT+0x3cc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d01d      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a5d      	ldr	r2, [pc, #372]	@ (8006fd0 <HAL_DMA_Abort_IT+0x3d0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d018      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a5c      	ldr	r2, [pc, #368]	@ (8006fd4 <HAL_DMA_Abort_IT+0x3d4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d013      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a5a      	ldr	r2, [pc, #360]	@ (8006fd8 <HAL_DMA_Abort_IT+0x3d8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00e      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a59      	ldr	r2, [pc, #356]	@ (8006fdc <HAL_DMA_Abort_IT+0x3dc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d009      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a57      	ldr	r2, [pc, #348]	@ (8006fe0 <HAL_DMA_Abort_IT+0x3e0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a56      	ldr	r2, [pc, #344]	@ (8006fe4 <HAL_DMA_Abort_IT+0x3e4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d108      	bne.n	8006ea2 <HAL_DMA_Abort_IT+0x2a2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	e007      	b.n	8006eb2 <HAL_DMA_Abort_IT+0x2b2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a3c      	ldr	r2, [pc, #240]	@ (8006fa8 <HAL_DMA_Abort_IT+0x3a8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d072      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a3a      	ldr	r2, [pc, #232]	@ (8006fac <HAL_DMA_Abort_IT+0x3ac>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d06d      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a39      	ldr	r2, [pc, #228]	@ (8006fb0 <HAL_DMA_Abort_IT+0x3b0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d068      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a37      	ldr	r2, [pc, #220]	@ (8006fb4 <HAL_DMA_Abort_IT+0x3b4>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d063      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a36      	ldr	r2, [pc, #216]	@ (8006fb8 <HAL_DMA_Abort_IT+0x3b8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d05e      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a34      	ldr	r2, [pc, #208]	@ (8006fbc <HAL_DMA_Abort_IT+0x3bc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d059      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a33      	ldr	r2, [pc, #204]	@ (8006fc0 <HAL_DMA_Abort_IT+0x3c0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d054      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a31      	ldr	r2, [pc, #196]	@ (8006fc4 <HAL_DMA_Abort_IT+0x3c4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d04f      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a30      	ldr	r2, [pc, #192]	@ (8006fc8 <HAL_DMA_Abort_IT+0x3c8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d04a      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a2e      	ldr	r2, [pc, #184]	@ (8006fcc <HAL_DMA_Abort_IT+0x3cc>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d045      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8006fd0 <HAL_DMA_Abort_IT+0x3d0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d040      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a2b      	ldr	r2, [pc, #172]	@ (8006fd4 <HAL_DMA_Abort_IT+0x3d4>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d03b      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8006fd8 <HAL_DMA_Abort_IT+0x3d8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d036      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a28      	ldr	r2, [pc, #160]	@ (8006fdc <HAL_DMA_Abort_IT+0x3dc>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d031      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a27      	ldr	r2, [pc, #156]	@ (8006fe0 <HAL_DMA_Abort_IT+0x3e0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d02c      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a25      	ldr	r2, [pc, #148]	@ (8006fe4 <HAL_DMA_Abort_IT+0x3e4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d027      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a24      	ldr	r2, [pc, #144]	@ (8006fe8 <HAL_DMA_Abort_IT+0x3e8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d022      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a22      	ldr	r2, [pc, #136]	@ (8006fec <HAL_DMA_Abort_IT+0x3ec>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a21      	ldr	r2, [pc, #132]	@ (8006ff0 <HAL_DMA_Abort_IT+0x3f0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d018      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1f      	ldr	r2, [pc, #124]	@ (8006ff4 <HAL_DMA_Abort_IT+0x3f4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ff8 <HAL_DMA_Abort_IT+0x3f8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1c      	ldr	r2, [pc, #112]	@ (8006ffc <HAL_DMA_Abort_IT+0x3fc>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1b      	ldr	r2, [pc, #108]	@ (8007000 <HAL_DMA_Abort_IT+0x400>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a19      	ldr	r2, [pc, #100]	@ (8007004 <HAL_DMA_Abort_IT+0x404>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d132      	bne.n	8007008 <HAL_DMA_Abort_IT+0x408>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e031      	b.n	800700a <HAL_DMA_Abort_IT+0x40a>
 8006fa6:	bf00      	nop
 8006fa8:	40020010 	.word	0x40020010
 8006fac:	40020028 	.word	0x40020028
 8006fb0:	40020040 	.word	0x40020040
 8006fb4:	40020058 	.word	0x40020058
 8006fb8:	40020070 	.word	0x40020070
 8006fbc:	40020088 	.word	0x40020088
 8006fc0:	400200a0 	.word	0x400200a0
 8006fc4:	400200b8 	.word	0x400200b8
 8006fc8:	40020410 	.word	0x40020410
 8006fcc:	40020428 	.word	0x40020428
 8006fd0:	40020440 	.word	0x40020440
 8006fd4:	40020458 	.word	0x40020458
 8006fd8:	40020470 	.word	0x40020470
 8006fdc:	40020488 	.word	0x40020488
 8006fe0:	400204a0 	.word	0x400204a0
 8006fe4:	400204b8 	.word	0x400204b8
 8006fe8:	58025408 	.word	0x58025408
 8006fec:	5802541c 	.word	0x5802541c
 8006ff0:	58025430 	.word	0x58025430
 8006ff4:	58025444 	.word	0x58025444
 8006ff8:	58025458 	.word	0x58025458
 8006ffc:	5802546c 	.word	0x5802546c
 8007000:	58025480 	.word	0x58025480
 8007004:	58025494 	.word	0x58025494
 8007008:	2300      	movs	r3, #0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d028      	beq.n	8007060 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007018:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800701c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007022:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007028:	f003 031f 	and.w	r3, r3, #31
 800702c:	2201      	movs	r2, #1
 800702e:	409a      	lsls	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800703c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00c      	beq.n	8007060 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007050:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007054:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800705e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop

0800708c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	@ 0x28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007098:	4b67      	ldr	r3, [pc, #412]	@ (8007238 <HAL_DMA_IRQHandler+0x1ac>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a67      	ldr	r2, [pc, #412]	@ (800723c <HAL_DMA_IRQHandler+0x1b0>)
 800709e:	fba2 2303 	umull	r2, r3, r2, r3
 80070a2:	0a9b      	lsrs	r3, r3, #10
 80070a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a5f      	ldr	r2, [pc, #380]	@ (8007240 <HAL_DMA_IRQHandler+0x1b4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d04a      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a5d      	ldr	r2, [pc, #372]	@ (8007244 <HAL_DMA_IRQHandler+0x1b8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d045      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a5c      	ldr	r2, [pc, #368]	@ (8007248 <HAL_DMA_IRQHandler+0x1bc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d040      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a5a      	ldr	r2, [pc, #360]	@ (800724c <HAL_DMA_IRQHandler+0x1c0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d03b      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a59      	ldr	r2, [pc, #356]	@ (8007250 <HAL_DMA_IRQHandler+0x1c4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d036      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a57      	ldr	r2, [pc, #348]	@ (8007254 <HAL_DMA_IRQHandler+0x1c8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d031      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a56      	ldr	r2, [pc, #344]	@ (8007258 <HAL_DMA_IRQHandler+0x1cc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d02c      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a54      	ldr	r2, [pc, #336]	@ (800725c <HAL_DMA_IRQHandler+0x1d0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d027      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a53      	ldr	r2, [pc, #332]	@ (8007260 <HAL_DMA_IRQHandler+0x1d4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d022      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a51      	ldr	r2, [pc, #324]	@ (8007264 <HAL_DMA_IRQHandler+0x1d8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d01d      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a50      	ldr	r2, [pc, #320]	@ (8007268 <HAL_DMA_IRQHandler+0x1dc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d018      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a4e      	ldr	r2, [pc, #312]	@ (800726c <HAL_DMA_IRQHandler+0x1e0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a4d      	ldr	r2, [pc, #308]	@ (8007270 <HAL_DMA_IRQHandler+0x1e4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00e      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a4b      	ldr	r2, [pc, #300]	@ (8007274 <HAL_DMA_IRQHandler+0x1e8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d009      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a4a      	ldr	r2, [pc, #296]	@ (8007278 <HAL_DMA_IRQHandler+0x1ec>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d004      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a48      	ldr	r2, [pc, #288]	@ (800727c <HAL_DMA_IRQHandler+0x1f0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d101      	bne.n	8007162 <HAL_DMA_IRQHandler+0xd6>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <HAL_DMA_IRQHandler+0xd8>
 8007162:	2300      	movs	r3, #0
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 842b 	beq.w	80079c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800716e:	f003 031f 	and.w	r3, r3, #31
 8007172:	2208      	movs	r2, #8
 8007174:	409a      	lsls	r2, r3
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	4013      	ands	r3, r2
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 80a2 	beq.w	80072c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a2e      	ldr	r2, [pc, #184]	@ (8007240 <HAL_DMA_IRQHandler+0x1b4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d04a      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a2d      	ldr	r2, [pc, #180]	@ (8007244 <HAL_DMA_IRQHandler+0x1b8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d045      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a2b      	ldr	r2, [pc, #172]	@ (8007248 <HAL_DMA_IRQHandler+0x1bc>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d040      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a2a      	ldr	r2, [pc, #168]	@ (800724c <HAL_DMA_IRQHandler+0x1c0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d03b      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a28      	ldr	r2, [pc, #160]	@ (8007250 <HAL_DMA_IRQHandler+0x1c4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d036      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a27      	ldr	r2, [pc, #156]	@ (8007254 <HAL_DMA_IRQHandler+0x1c8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d031      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a25      	ldr	r2, [pc, #148]	@ (8007258 <HAL_DMA_IRQHandler+0x1cc>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d02c      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a24      	ldr	r2, [pc, #144]	@ (800725c <HAL_DMA_IRQHandler+0x1d0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d027      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a22      	ldr	r2, [pc, #136]	@ (8007260 <HAL_DMA_IRQHandler+0x1d4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d022      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a21      	ldr	r2, [pc, #132]	@ (8007264 <HAL_DMA_IRQHandler+0x1d8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d01d      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a1f      	ldr	r2, [pc, #124]	@ (8007268 <HAL_DMA_IRQHandler+0x1dc>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d018      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a1e      	ldr	r2, [pc, #120]	@ (800726c <HAL_DMA_IRQHandler+0x1e0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d013      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007270 <HAL_DMA_IRQHandler+0x1e4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00e      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a1b      	ldr	r2, [pc, #108]	@ (8007274 <HAL_DMA_IRQHandler+0x1e8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d009      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a19      	ldr	r2, [pc, #100]	@ (8007278 <HAL_DMA_IRQHandler+0x1ec>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d004      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a18      	ldr	r2, [pc, #96]	@ (800727c <HAL_DMA_IRQHandler+0x1f0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d12f      	bne.n	8007280 <HAL_DMA_IRQHandler+0x1f4>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b00      	cmp	r3, #0
 800722c:	bf14      	ite	ne
 800722e:	2301      	movne	r3, #1
 8007230:	2300      	moveq	r3, #0
 8007232:	b2db      	uxtb	r3, r3
 8007234:	e02e      	b.n	8007294 <HAL_DMA_IRQHandler+0x208>
 8007236:	bf00      	nop
 8007238:	240000c0 	.word	0x240000c0
 800723c:	1b4e81b5 	.word	0x1b4e81b5
 8007240:	40020010 	.word	0x40020010
 8007244:	40020028 	.word	0x40020028
 8007248:	40020040 	.word	0x40020040
 800724c:	40020058 	.word	0x40020058
 8007250:	40020070 	.word	0x40020070
 8007254:	40020088 	.word	0x40020088
 8007258:	400200a0 	.word	0x400200a0
 800725c:	400200b8 	.word	0x400200b8
 8007260:	40020410 	.word	0x40020410
 8007264:	40020428 	.word	0x40020428
 8007268:	40020440 	.word	0x40020440
 800726c:	40020458 	.word	0x40020458
 8007270:	40020470 	.word	0x40020470
 8007274:	40020488 	.word	0x40020488
 8007278:	400204a0 	.word	0x400204a0
 800727c:	400204b8 	.word	0x400204b8
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	bf14      	ite	ne
 800728e:	2301      	movne	r3, #1
 8007290:	2300      	moveq	r3, #0
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d015      	beq.n	80072c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0204 	bic.w	r2, r2, #4
 80072a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2208      	movs	r2, #8
 80072b2:	409a      	lsls	r2, r3
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072bc:	f043 0201 	orr.w	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	fa22 f303 	lsr.w	r3, r2, r3
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d06e      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a69      	ldr	r2, [pc, #420]	@ (8007484 <HAL_DMA_IRQHandler+0x3f8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d04a      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a67      	ldr	r2, [pc, #412]	@ (8007488 <HAL_DMA_IRQHandler+0x3fc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d045      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a66      	ldr	r2, [pc, #408]	@ (800748c <HAL_DMA_IRQHandler+0x400>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d040      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a64      	ldr	r2, [pc, #400]	@ (8007490 <HAL_DMA_IRQHandler+0x404>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d03b      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a63      	ldr	r2, [pc, #396]	@ (8007494 <HAL_DMA_IRQHandler+0x408>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d036      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a61      	ldr	r2, [pc, #388]	@ (8007498 <HAL_DMA_IRQHandler+0x40c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d031      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a60      	ldr	r2, [pc, #384]	@ (800749c <HAL_DMA_IRQHandler+0x410>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d02c      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a5e      	ldr	r2, [pc, #376]	@ (80074a0 <HAL_DMA_IRQHandler+0x414>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d027      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a5d      	ldr	r2, [pc, #372]	@ (80074a4 <HAL_DMA_IRQHandler+0x418>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d022      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a5b      	ldr	r2, [pc, #364]	@ (80074a8 <HAL_DMA_IRQHandler+0x41c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d01d      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a5a      	ldr	r2, [pc, #360]	@ (80074ac <HAL_DMA_IRQHandler+0x420>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d018      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a58      	ldr	r2, [pc, #352]	@ (80074b0 <HAL_DMA_IRQHandler+0x424>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a57      	ldr	r2, [pc, #348]	@ (80074b4 <HAL_DMA_IRQHandler+0x428>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00e      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a55      	ldr	r2, [pc, #340]	@ (80074b8 <HAL_DMA_IRQHandler+0x42c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d009      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a54      	ldr	r2, [pc, #336]	@ (80074bc <HAL_DMA_IRQHandler+0x430>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d004      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a52      	ldr	r2, [pc, #328]	@ (80074c0 <HAL_DMA_IRQHandler+0x434>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d10a      	bne.n	8007390 <HAL_DMA_IRQHandler+0x304>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007384:	2b00      	cmp	r3, #0
 8007386:	bf14      	ite	ne
 8007388:	2301      	movne	r3, #1
 800738a:	2300      	moveq	r3, #0
 800738c:	b2db      	uxtb	r3, r3
 800738e:	e003      	b.n	8007398 <HAL_DMA_IRQHandler+0x30c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2300      	movs	r3, #0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00d      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	2201      	movs	r2, #1
 80073a6:	409a      	lsls	r2, r3
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b0:	f043 0202 	orr.w	r2, r3, #2
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	2204      	movs	r2, #4
 80073c2:	409a      	lsls	r2, r3
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	4013      	ands	r3, r2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 808f 	beq.w	80074ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007484 <HAL_DMA_IRQHandler+0x3f8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d04a      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a2a      	ldr	r2, [pc, #168]	@ (8007488 <HAL_DMA_IRQHandler+0x3fc>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d045      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a29      	ldr	r2, [pc, #164]	@ (800748c <HAL_DMA_IRQHandler+0x400>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d040      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a27      	ldr	r2, [pc, #156]	@ (8007490 <HAL_DMA_IRQHandler+0x404>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d03b      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a26      	ldr	r2, [pc, #152]	@ (8007494 <HAL_DMA_IRQHandler+0x408>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d036      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a24      	ldr	r2, [pc, #144]	@ (8007498 <HAL_DMA_IRQHandler+0x40c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d031      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a23      	ldr	r2, [pc, #140]	@ (800749c <HAL_DMA_IRQHandler+0x410>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d02c      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a21      	ldr	r2, [pc, #132]	@ (80074a0 <HAL_DMA_IRQHandler+0x414>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d027      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a20      	ldr	r2, [pc, #128]	@ (80074a4 <HAL_DMA_IRQHandler+0x418>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d022      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1e      	ldr	r2, [pc, #120]	@ (80074a8 <HAL_DMA_IRQHandler+0x41c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d01d      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a1d      	ldr	r2, [pc, #116]	@ (80074ac <HAL_DMA_IRQHandler+0x420>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d018      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1b      	ldr	r2, [pc, #108]	@ (80074b0 <HAL_DMA_IRQHandler+0x424>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d013      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1a      	ldr	r2, [pc, #104]	@ (80074b4 <HAL_DMA_IRQHandler+0x428>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00e      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a18      	ldr	r2, [pc, #96]	@ (80074b8 <HAL_DMA_IRQHandler+0x42c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d009      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a17      	ldr	r2, [pc, #92]	@ (80074bc <HAL_DMA_IRQHandler+0x430>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d004      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a15      	ldr	r2, [pc, #84]	@ (80074c0 <HAL_DMA_IRQHandler+0x434>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d12a      	bne.n	80074c4 <HAL_DMA_IRQHandler+0x438>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	bf14      	ite	ne
 800747c:	2301      	movne	r3, #1
 800747e:	2300      	moveq	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	e023      	b.n	80074cc <HAL_DMA_IRQHandler+0x440>
 8007484:	40020010 	.word	0x40020010
 8007488:	40020028 	.word	0x40020028
 800748c:	40020040 	.word	0x40020040
 8007490:	40020058 	.word	0x40020058
 8007494:	40020070 	.word	0x40020070
 8007498:	40020088 	.word	0x40020088
 800749c:	400200a0 	.word	0x400200a0
 80074a0:	400200b8 	.word	0x400200b8
 80074a4:	40020410 	.word	0x40020410
 80074a8:	40020428 	.word	0x40020428
 80074ac:	40020440 	.word	0x40020440
 80074b0:	40020458 	.word	0x40020458
 80074b4:	40020470 	.word	0x40020470
 80074b8:	40020488 	.word	0x40020488
 80074bc:	400204a0 	.word	0x400204a0
 80074c0:	400204b8 	.word	0x400204b8
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00d      	beq.n	80074ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	2204      	movs	r2, #4
 80074da:	409a      	lsls	r2, r3
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e4:	f043 0204 	orr.w	r2, r3, #4
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074f0:	f003 031f 	and.w	r3, r3, #31
 80074f4:	2210      	movs	r2, #16
 80074f6:	409a      	lsls	r2, r3
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	4013      	ands	r3, r2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 80a6 	beq.w	800764e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a85      	ldr	r2, [pc, #532]	@ (800771c <HAL_DMA_IRQHandler+0x690>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d04a      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a83      	ldr	r2, [pc, #524]	@ (8007720 <HAL_DMA_IRQHandler+0x694>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d045      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a82      	ldr	r2, [pc, #520]	@ (8007724 <HAL_DMA_IRQHandler+0x698>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d040      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a80      	ldr	r2, [pc, #512]	@ (8007728 <HAL_DMA_IRQHandler+0x69c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d03b      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a7f      	ldr	r2, [pc, #508]	@ (800772c <HAL_DMA_IRQHandler+0x6a0>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d036      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a7d      	ldr	r2, [pc, #500]	@ (8007730 <HAL_DMA_IRQHandler+0x6a4>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d031      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a7c      	ldr	r2, [pc, #496]	@ (8007734 <HAL_DMA_IRQHandler+0x6a8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d02c      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a7a      	ldr	r2, [pc, #488]	@ (8007738 <HAL_DMA_IRQHandler+0x6ac>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d027      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a79      	ldr	r2, [pc, #484]	@ (800773c <HAL_DMA_IRQHandler+0x6b0>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d022      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a77      	ldr	r2, [pc, #476]	@ (8007740 <HAL_DMA_IRQHandler+0x6b4>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d01d      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a76      	ldr	r2, [pc, #472]	@ (8007744 <HAL_DMA_IRQHandler+0x6b8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d018      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a74      	ldr	r2, [pc, #464]	@ (8007748 <HAL_DMA_IRQHandler+0x6bc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d013      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a73      	ldr	r2, [pc, #460]	@ (800774c <HAL_DMA_IRQHandler+0x6c0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00e      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a71      	ldr	r2, [pc, #452]	@ (8007750 <HAL_DMA_IRQHandler+0x6c4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d009      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a70      	ldr	r2, [pc, #448]	@ (8007754 <HAL_DMA_IRQHandler+0x6c8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d004      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a6e      	ldr	r2, [pc, #440]	@ (8007758 <HAL_DMA_IRQHandler+0x6cc>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d10a      	bne.n	80075b8 <HAL_DMA_IRQHandler+0x52c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf14      	ite	ne
 80075b0:	2301      	movne	r3, #1
 80075b2:	2300      	moveq	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	e009      	b.n	80075cc <HAL_DMA_IRQHandler+0x540>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	bf14      	ite	ne
 80075c6:	2301      	movne	r3, #1
 80075c8:	2300      	moveq	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d03e      	beq.n	800764e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075d4:	f003 031f 	and.w	r3, r3, #31
 80075d8:	2210      	movs	r2, #16
 80075da:	409a      	lsls	r2, r3
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d018      	beq.n	8007620 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d108      	bne.n	800760e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d024      	beq.n	800764e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
 800760c:	e01f      	b.n	800764e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007612:	2b00      	cmp	r3, #0
 8007614:	d01b      	beq.n	800764e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
 800761e:	e016      	b.n	800764e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d107      	bne.n	800763e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0208 	bic.w	r2, r2, #8
 800763c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007652:	f003 031f 	and.w	r3, r3, #31
 8007656:	2220      	movs	r2, #32
 8007658:	409a      	lsls	r2, r3
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	4013      	ands	r3, r2
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 8110 	beq.w	8007884 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2c      	ldr	r2, [pc, #176]	@ (800771c <HAL_DMA_IRQHandler+0x690>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d04a      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2b      	ldr	r2, [pc, #172]	@ (8007720 <HAL_DMA_IRQHandler+0x694>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d045      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a29      	ldr	r2, [pc, #164]	@ (8007724 <HAL_DMA_IRQHandler+0x698>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d040      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a28      	ldr	r2, [pc, #160]	@ (8007728 <HAL_DMA_IRQHandler+0x69c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d03b      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a26      	ldr	r2, [pc, #152]	@ (800772c <HAL_DMA_IRQHandler+0x6a0>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d036      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a25      	ldr	r2, [pc, #148]	@ (8007730 <HAL_DMA_IRQHandler+0x6a4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d031      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a23      	ldr	r2, [pc, #140]	@ (8007734 <HAL_DMA_IRQHandler+0x6a8>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d02c      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a22      	ldr	r2, [pc, #136]	@ (8007738 <HAL_DMA_IRQHandler+0x6ac>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d027      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a20      	ldr	r2, [pc, #128]	@ (800773c <HAL_DMA_IRQHandler+0x6b0>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d022      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007740 <HAL_DMA_IRQHandler+0x6b4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d01d      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007744 <HAL_DMA_IRQHandler+0x6b8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d018      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007748 <HAL_DMA_IRQHandler+0x6bc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d013      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a1a      	ldr	r2, [pc, #104]	@ (800774c <HAL_DMA_IRQHandler+0x6c0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00e      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a19      	ldr	r2, [pc, #100]	@ (8007750 <HAL_DMA_IRQHandler+0x6c4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d009      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a17      	ldr	r2, [pc, #92]	@ (8007754 <HAL_DMA_IRQHandler+0x6c8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d004      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a16      	ldr	r2, [pc, #88]	@ (8007758 <HAL_DMA_IRQHandler+0x6cc>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d12b      	bne.n	800775c <HAL_DMA_IRQHandler+0x6d0>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	2b00      	cmp	r3, #0
 8007710:	bf14      	ite	ne
 8007712:	2301      	movne	r3, #1
 8007714:	2300      	moveq	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	e02a      	b.n	8007770 <HAL_DMA_IRQHandler+0x6e4>
 800771a:	bf00      	nop
 800771c:	40020010 	.word	0x40020010
 8007720:	40020028 	.word	0x40020028
 8007724:	40020040 	.word	0x40020040
 8007728:	40020058 	.word	0x40020058
 800772c:	40020070 	.word	0x40020070
 8007730:	40020088 	.word	0x40020088
 8007734:	400200a0 	.word	0x400200a0
 8007738:	400200b8 	.word	0x400200b8
 800773c:	40020410 	.word	0x40020410
 8007740:	40020428 	.word	0x40020428
 8007744:	40020440 	.word	0x40020440
 8007748:	40020458 	.word	0x40020458
 800774c:	40020470 	.word	0x40020470
 8007750:	40020488 	.word	0x40020488
 8007754:	400204a0 	.word	0x400204a0
 8007758:	400204b8 	.word	0x400204b8
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	bf14      	ite	ne
 800776a:	2301      	movne	r3, #1
 800776c:	2300      	moveq	r3, #0
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 8087 	beq.w	8007884 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800777a:	f003 031f 	and.w	r3, r3, #31
 800777e:	2220      	movs	r2, #32
 8007780:	409a      	lsls	r2, r3
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b04      	cmp	r3, #4
 8007790:	d139      	bne.n	8007806 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0216 	bic.w	r2, r2, #22
 80077a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	695a      	ldr	r2, [r3, #20]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <HAL_DMA_IRQHandler+0x736>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0208 	bic.w	r2, r2, #8
 80077d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	223f      	movs	r2, #63	@ 0x3f
 80077dc:	409a      	lsls	r2, r3
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 8382 	beq.w	8007f00 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	4798      	blx	r3
          }
          return;
 8007804:	e37c      	b.n	8007f00 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d018      	beq.n	8007846 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d108      	bne.n	8007834 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007826:	2b00      	cmp	r3, #0
 8007828:	d02c      	beq.n	8007884 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
 8007832:	e027      	b.n	8007884 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d023      	beq.n	8007884 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	4798      	blx	r3
 8007844:	e01e      	b.n	8007884 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10f      	bne.n	8007874 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0210 	bic.w	r2, r2, #16
 8007862:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 833e 	beq.w	8007f0a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 8088 	beq.w	80079ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2204      	movs	r2, #4
 80078a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a89      	ldr	r2, [pc, #548]	@ (8007ad0 <HAL_DMA_IRQHandler+0xa44>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d04a      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a88      	ldr	r2, [pc, #544]	@ (8007ad4 <HAL_DMA_IRQHandler+0xa48>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d045      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a86      	ldr	r2, [pc, #536]	@ (8007ad8 <HAL_DMA_IRQHandler+0xa4c>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d040      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a85      	ldr	r2, [pc, #532]	@ (8007adc <HAL_DMA_IRQHandler+0xa50>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d03b      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a83      	ldr	r2, [pc, #524]	@ (8007ae0 <HAL_DMA_IRQHandler+0xa54>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d036      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a82      	ldr	r2, [pc, #520]	@ (8007ae4 <HAL_DMA_IRQHandler+0xa58>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d031      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a80      	ldr	r2, [pc, #512]	@ (8007ae8 <HAL_DMA_IRQHandler+0xa5c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d02c      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a7f      	ldr	r2, [pc, #508]	@ (8007aec <HAL_DMA_IRQHandler+0xa60>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d027      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a7d      	ldr	r2, [pc, #500]	@ (8007af0 <HAL_DMA_IRQHandler+0xa64>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d022      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a7c      	ldr	r2, [pc, #496]	@ (8007af4 <HAL_DMA_IRQHandler+0xa68>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d01d      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a7a      	ldr	r2, [pc, #488]	@ (8007af8 <HAL_DMA_IRQHandler+0xa6c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d018      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a79      	ldr	r2, [pc, #484]	@ (8007afc <HAL_DMA_IRQHandler+0xa70>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d013      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a77      	ldr	r2, [pc, #476]	@ (8007b00 <HAL_DMA_IRQHandler+0xa74>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d00e      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a76      	ldr	r2, [pc, #472]	@ (8007b04 <HAL_DMA_IRQHandler+0xa78>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d009      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a74      	ldr	r2, [pc, #464]	@ (8007b08 <HAL_DMA_IRQHandler+0xa7c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d004      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a73      	ldr	r2, [pc, #460]	@ (8007b0c <HAL_DMA_IRQHandler+0xa80>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d108      	bne.n	8007956 <HAL_DMA_IRQHandler+0x8ca>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0201 	bic.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e007      	b.n	8007966 <HAL_DMA_IRQHandler+0x8da>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0201 	bic.w	r2, r2, #1
 8007964:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800796e:	429a      	cmp	r2, r3
 8007970:	d307      	bcc.n	8007982 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1f2      	bne.n	8007966 <HAL_DMA_IRQHandler+0x8da>
 8007980:	e000      	b.n	8007984 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007982:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2203      	movs	r2, #3
 8007996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800799a:	e003      	b.n	80079a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 82aa 	beq.w	8007f0a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
 80079be:	e2a4      	b.n	8007f0a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a52      	ldr	r2, [pc, #328]	@ (8007b10 <HAL_DMA_IRQHandler+0xa84>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d04a      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a51      	ldr	r2, [pc, #324]	@ (8007b14 <HAL_DMA_IRQHandler+0xa88>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d045      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a4f      	ldr	r2, [pc, #316]	@ (8007b18 <HAL_DMA_IRQHandler+0xa8c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d040      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a4e      	ldr	r2, [pc, #312]	@ (8007b1c <HAL_DMA_IRQHandler+0xa90>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d03b      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a4c      	ldr	r2, [pc, #304]	@ (8007b20 <HAL_DMA_IRQHandler+0xa94>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d036      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a4b      	ldr	r2, [pc, #300]	@ (8007b24 <HAL_DMA_IRQHandler+0xa98>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d031      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a49      	ldr	r2, [pc, #292]	@ (8007b28 <HAL_DMA_IRQHandler+0xa9c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d02c      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a48      	ldr	r2, [pc, #288]	@ (8007b2c <HAL_DMA_IRQHandler+0xaa0>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d027      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a46      	ldr	r2, [pc, #280]	@ (8007b30 <HAL_DMA_IRQHandler+0xaa4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d022      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a45      	ldr	r2, [pc, #276]	@ (8007b34 <HAL_DMA_IRQHandler+0xaa8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d01d      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a43      	ldr	r2, [pc, #268]	@ (8007b38 <HAL_DMA_IRQHandler+0xaac>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d018      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a42      	ldr	r2, [pc, #264]	@ (8007b3c <HAL_DMA_IRQHandler+0xab0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d013      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a40      	ldr	r2, [pc, #256]	@ (8007b40 <HAL_DMA_IRQHandler+0xab4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00e      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a3f      	ldr	r2, [pc, #252]	@ (8007b44 <HAL_DMA_IRQHandler+0xab8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d009      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a3d      	ldr	r2, [pc, #244]	@ (8007b48 <HAL_DMA_IRQHandler+0xabc>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d004      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x9d4>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a3c      	ldr	r2, [pc, #240]	@ (8007b4c <HAL_DMA_IRQHandler+0xac0>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d101      	bne.n	8007a64 <HAL_DMA_IRQHandler+0x9d8>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <HAL_DMA_IRQHandler+0x9da>
 8007a64:	2300      	movs	r3, #0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 824f 	beq.w	8007f0a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	409a      	lsls	r2, r3
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80dd 	beq.w	8007c44 <HAL_DMA_IRQHandler+0xbb8>
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 80d7 	beq.w	8007c44 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a9a:	f003 031f 	and.w	r3, r3, #31
 8007a9e:	2204      	movs	r2, #4
 8007aa0:	409a      	lsls	r2, r3
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d059      	beq.n	8007b64 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d14a      	bne.n	8007b50 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 8220 	beq.w	8007f04 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007acc:	e21a      	b.n	8007f04 <HAL_DMA_IRQHandler+0xe78>
 8007ace:	bf00      	nop
 8007ad0:	40020010 	.word	0x40020010
 8007ad4:	40020028 	.word	0x40020028
 8007ad8:	40020040 	.word	0x40020040
 8007adc:	40020058 	.word	0x40020058
 8007ae0:	40020070 	.word	0x40020070
 8007ae4:	40020088 	.word	0x40020088
 8007ae8:	400200a0 	.word	0x400200a0
 8007aec:	400200b8 	.word	0x400200b8
 8007af0:	40020410 	.word	0x40020410
 8007af4:	40020428 	.word	0x40020428
 8007af8:	40020440 	.word	0x40020440
 8007afc:	40020458 	.word	0x40020458
 8007b00:	40020470 	.word	0x40020470
 8007b04:	40020488 	.word	0x40020488
 8007b08:	400204a0 	.word	0x400204a0
 8007b0c:	400204b8 	.word	0x400204b8
 8007b10:	48022c08 	.word	0x48022c08
 8007b14:	48022c1c 	.word	0x48022c1c
 8007b18:	48022c30 	.word	0x48022c30
 8007b1c:	48022c44 	.word	0x48022c44
 8007b20:	48022c58 	.word	0x48022c58
 8007b24:	48022c6c 	.word	0x48022c6c
 8007b28:	48022c80 	.word	0x48022c80
 8007b2c:	48022c94 	.word	0x48022c94
 8007b30:	58025408 	.word	0x58025408
 8007b34:	5802541c 	.word	0x5802541c
 8007b38:	58025430 	.word	0x58025430
 8007b3c:	58025444 	.word	0x58025444
 8007b40:	58025458 	.word	0x58025458
 8007b44:	5802546c 	.word	0x5802546c
 8007b48:	58025480 	.word	0x58025480
 8007b4c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 81d5 	beq.w	8007f04 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b62:	e1cf      	b.n	8007f04 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d160      	bne.n	8007c30 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a7f      	ldr	r2, [pc, #508]	@ (8007d70 <HAL_DMA_IRQHandler+0xce4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d04a      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a7d      	ldr	r2, [pc, #500]	@ (8007d74 <HAL_DMA_IRQHandler+0xce8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d045      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a7c      	ldr	r2, [pc, #496]	@ (8007d78 <HAL_DMA_IRQHandler+0xcec>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d040      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a7a      	ldr	r2, [pc, #488]	@ (8007d7c <HAL_DMA_IRQHandler+0xcf0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d03b      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a79      	ldr	r2, [pc, #484]	@ (8007d80 <HAL_DMA_IRQHandler+0xcf4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d036      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a77      	ldr	r2, [pc, #476]	@ (8007d84 <HAL_DMA_IRQHandler+0xcf8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d031      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a76      	ldr	r2, [pc, #472]	@ (8007d88 <HAL_DMA_IRQHandler+0xcfc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d02c      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a74      	ldr	r2, [pc, #464]	@ (8007d8c <HAL_DMA_IRQHandler+0xd00>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d027      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a73      	ldr	r2, [pc, #460]	@ (8007d90 <HAL_DMA_IRQHandler+0xd04>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d022      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a71      	ldr	r2, [pc, #452]	@ (8007d94 <HAL_DMA_IRQHandler+0xd08>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d01d      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a70      	ldr	r2, [pc, #448]	@ (8007d98 <HAL_DMA_IRQHandler+0xd0c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d018      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a6e      	ldr	r2, [pc, #440]	@ (8007d9c <HAL_DMA_IRQHandler+0xd10>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d013      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a6d      	ldr	r2, [pc, #436]	@ (8007da0 <HAL_DMA_IRQHandler+0xd14>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d00e      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8007da4 <HAL_DMA_IRQHandler+0xd18>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d009      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a6a      	ldr	r2, [pc, #424]	@ (8007da8 <HAL_DMA_IRQHandler+0xd1c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d004      	beq.n	8007c0e <HAL_DMA_IRQHandler+0xb82>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a68      	ldr	r2, [pc, #416]	@ (8007dac <HAL_DMA_IRQHandler+0xd20>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d108      	bne.n	8007c20 <HAL_DMA_IRQHandler+0xb94>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0208 	bic.w	r2, r2, #8
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e007      	b.n	8007c30 <HAL_DMA_IRQHandler+0xba4>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0204 	bic.w	r2, r2, #4
 8007c2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 8165 	beq.w	8007f04 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c42:	e15f      	b.n	8007f04 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c48:	f003 031f 	and.w	r3, r3, #31
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	409a      	lsls	r2, r3
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	4013      	ands	r3, r2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 80c5 	beq.w	8007de4 <HAL_DMA_IRQHandler+0xd58>
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 80bf 	beq.w	8007de4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c6a:	f003 031f 	and.w	r3, r3, #31
 8007c6e:	2202      	movs	r2, #2
 8007c70:	409a      	lsls	r2, r3
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d018      	beq.n	8007cb2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 813a 	beq.w	8007f08 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c9c:	e134      	b.n	8007f08 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 8130 	beq.w	8007f08 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cb0:	e12a      	b.n	8007f08 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f040 8089 	bne.w	8007dd0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a2b      	ldr	r2, [pc, #172]	@ (8007d70 <HAL_DMA_IRQHandler+0xce4>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d04a      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a29      	ldr	r2, [pc, #164]	@ (8007d74 <HAL_DMA_IRQHandler+0xce8>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d045      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a28      	ldr	r2, [pc, #160]	@ (8007d78 <HAL_DMA_IRQHandler+0xcec>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d040      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a26      	ldr	r2, [pc, #152]	@ (8007d7c <HAL_DMA_IRQHandler+0xcf0>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d03b      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a25      	ldr	r2, [pc, #148]	@ (8007d80 <HAL_DMA_IRQHandler+0xcf4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d036      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a23      	ldr	r2, [pc, #140]	@ (8007d84 <HAL_DMA_IRQHandler+0xcf8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d031      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a22      	ldr	r2, [pc, #136]	@ (8007d88 <HAL_DMA_IRQHandler+0xcfc>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d02c      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a20      	ldr	r2, [pc, #128]	@ (8007d8c <HAL_DMA_IRQHandler+0xd00>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d027      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a1f      	ldr	r2, [pc, #124]	@ (8007d90 <HAL_DMA_IRQHandler+0xd04>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d022      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007d94 <HAL_DMA_IRQHandler+0xd08>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d01d      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a1c      	ldr	r2, [pc, #112]	@ (8007d98 <HAL_DMA_IRQHandler+0xd0c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d018      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a1a      	ldr	r2, [pc, #104]	@ (8007d9c <HAL_DMA_IRQHandler+0xd10>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d013      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a19      	ldr	r2, [pc, #100]	@ (8007da0 <HAL_DMA_IRQHandler+0xd14>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00e      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a17      	ldr	r2, [pc, #92]	@ (8007da4 <HAL_DMA_IRQHandler+0xd18>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d009      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a16      	ldr	r2, [pc, #88]	@ (8007da8 <HAL_DMA_IRQHandler+0xd1c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d004      	beq.n	8007d5e <HAL_DMA_IRQHandler+0xcd2>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a14      	ldr	r2, [pc, #80]	@ (8007dac <HAL_DMA_IRQHandler+0xd20>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d128      	bne.n	8007db0 <HAL_DMA_IRQHandler+0xd24>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0214 	bic.w	r2, r2, #20
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	e027      	b.n	8007dc0 <HAL_DMA_IRQHandler+0xd34>
 8007d70:	40020010 	.word	0x40020010
 8007d74:	40020028 	.word	0x40020028
 8007d78:	40020040 	.word	0x40020040
 8007d7c:	40020058 	.word	0x40020058
 8007d80:	40020070 	.word	0x40020070
 8007d84:	40020088 	.word	0x40020088
 8007d88:	400200a0 	.word	0x400200a0
 8007d8c:	400200b8 	.word	0x400200b8
 8007d90:	40020410 	.word	0x40020410
 8007d94:	40020428 	.word	0x40020428
 8007d98:	40020440 	.word	0x40020440
 8007d9c:	40020458 	.word	0x40020458
 8007da0:	40020470 	.word	0x40020470
 8007da4:	40020488 	.word	0x40020488
 8007da8:	400204a0 	.word	0x400204a0
 8007dac:	400204b8 	.word	0x400204b8
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 020a 	bic.w	r2, r2, #10
 8007dbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8097 	beq.w	8007f08 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007de2:	e091      	b.n	8007f08 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007de8:	f003 031f 	and.w	r3, r3, #31
 8007dec:	2208      	movs	r2, #8
 8007dee:	409a      	lsls	r2, r3
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	4013      	ands	r3, r2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8088 	beq.w	8007f0a <HAL_DMA_IRQHandler+0xe7e>
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f003 0308 	and.w	r3, r3, #8
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8082 	beq.w	8007f0a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a41      	ldr	r2, [pc, #260]	@ (8007f10 <HAL_DMA_IRQHandler+0xe84>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d04a      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a3f      	ldr	r2, [pc, #252]	@ (8007f14 <HAL_DMA_IRQHandler+0xe88>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d045      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a3e      	ldr	r2, [pc, #248]	@ (8007f18 <HAL_DMA_IRQHandler+0xe8c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d040      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a3c      	ldr	r2, [pc, #240]	@ (8007f1c <HAL_DMA_IRQHandler+0xe90>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d03b      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a3b      	ldr	r2, [pc, #236]	@ (8007f20 <HAL_DMA_IRQHandler+0xe94>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d036      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a39      	ldr	r2, [pc, #228]	@ (8007f24 <HAL_DMA_IRQHandler+0xe98>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d031      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a38      	ldr	r2, [pc, #224]	@ (8007f28 <HAL_DMA_IRQHandler+0xe9c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d02c      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a36      	ldr	r2, [pc, #216]	@ (8007f2c <HAL_DMA_IRQHandler+0xea0>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d027      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a35      	ldr	r2, [pc, #212]	@ (8007f30 <HAL_DMA_IRQHandler+0xea4>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d022      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a33      	ldr	r2, [pc, #204]	@ (8007f34 <HAL_DMA_IRQHandler+0xea8>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01d      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a32      	ldr	r2, [pc, #200]	@ (8007f38 <HAL_DMA_IRQHandler+0xeac>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d018      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a30      	ldr	r2, [pc, #192]	@ (8007f3c <HAL_DMA_IRQHandler+0xeb0>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d013      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a2f      	ldr	r2, [pc, #188]	@ (8007f40 <HAL_DMA_IRQHandler+0xeb4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00e      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8007f44 <HAL_DMA_IRQHandler+0xeb8>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d009      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a2c      	ldr	r2, [pc, #176]	@ (8007f48 <HAL_DMA_IRQHandler+0xebc>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d004      	beq.n	8007ea6 <HAL_DMA_IRQHandler+0xe1a>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f4c <HAL_DMA_IRQHandler+0xec0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d108      	bne.n	8007eb8 <HAL_DMA_IRQHandler+0xe2c>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 021c 	bic.w	r2, r2, #28
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	e007      	b.n	8007ec8 <HAL_DMA_IRQHandler+0xe3c>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 020e 	bic.w	r2, r2, #14
 8007ec6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ecc:	f003 031f 	and.w	r3, r3, #31
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	409a      	lsls	r2, r3
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d009      	beq.n	8007f0a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
 8007efe:	e004      	b.n	8007f0a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007f00:	bf00      	nop
 8007f02:	e002      	b.n	8007f0a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f04:	bf00      	nop
 8007f06:	e000      	b.n	8007f0a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f08:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f0a:	3728      	adds	r7, #40	@ 0x28
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	40020010 	.word	0x40020010
 8007f14:	40020028 	.word	0x40020028
 8007f18:	40020040 	.word	0x40020040
 8007f1c:	40020058 	.word	0x40020058
 8007f20:	40020070 	.word	0x40020070
 8007f24:	40020088 	.word	0x40020088
 8007f28:	400200a0 	.word	0x400200a0
 8007f2c:	400200b8 	.word	0x400200b8
 8007f30:	40020410 	.word	0x40020410
 8007f34:	40020428 	.word	0x40020428
 8007f38:	40020440 	.word	0x40020440
 8007f3c:	40020458 	.word	0x40020458
 8007f40:	40020470 	.word	0x40020470
 8007f44:	40020488 	.word	0x40020488
 8007f48:	400204a0 	.word	0x400204a0
 8007f4c:	400204b8 	.word	0x400204b8

08007f50 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a7f      	ldr	r2, [pc, #508]	@ (8008184 <DMA_SetConfig+0x21c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d072      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a7d      	ldr	r2, [pc, #500]	@ (8008188 <DMA_SetConfig+0x220>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d06d      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a7c      	ldr	r2, [pc, #496]	@ (800818c <DMA_SetConfig+0x224>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d068      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a7a      	ldr	r2, [pc, #488]	@ (8008190 <DMA_SetConfig+0x228>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d063      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a79      	ldr	r2, [pc, #484]	@ (8008194 <DMA_SetConfig+0x22c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d05e      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a77      	ldr	r2, [pc, #476]	@ (8008198 <DMA_SetConfig+0x230>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d059      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a76      	ldr	r2, [pc, #472]	@ (800819c <DMA_SetConfig+0x234>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d054      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a74      	ldr	r2, [pc, #464]	@ (80081a0 <DMA_SetConfig+0x238>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d04f      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a73      	ldr	r2, [pc, #460]	@ (80081a4 <DMA_SetConfig+0x23c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d04a      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a71      	ldr	r2, [pc, #452]	@ (80081a8 <DMA_SetConfig+0x240>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d045      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a70      	ldr	r2, [pc, #448]	@ (80081ac <DMA_SetConfig+0x244>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d040      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a6e      	ldr	r2, [pc, #440]	@ (80081b0 <DMA_SetConfig+0x248>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d03b      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a6d      	ldr	r2, [pc, #436]	@ (80081b4 <DMA_SetConfig+0x24c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d036      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a6b      	ldr	r2, [pc, #428]	@ (80081b8 <DMA_SetConfig+0x250>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d031      	beq.n	8008072 <DMA_SetConfig+0x10a>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a6a      	ldr	r2, [pc, #424]	@ (80081bc <DMA_SetConfig+0x254>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d02c      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a68      	ldr	r2, [pc, #416]	@ (80081c0 <DMA_SetConfig+0x258>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d027      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a67      	ldr	r2, [pc, #412]	@ (80081c4 <DMA_SetConfig+0x25c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d022      	beq.n	8008072 <DMA_SetConfig+0x10a>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a65      	ldr	r2, [pc, #404]	@ (80081c8 <DMA_SetConfig+0x260>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01d      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a64      	ldr	r2, [pc, #400]	@ (80081cc <DMA_SetConfig+0x264>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d018      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a62      	ldr	r2, [pc, #392]	@ (80081d0 <DMA_SetConfig+0x268>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <DMA_SetConfig+0x10a>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a61      	ldr	r2, [pc, #388]	@ (80081d4 <DMA_SetConfig+0x26c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a5f      	ldr	r2, [pc, #380]	@ (80081d8 <DMA_SetConfig+0x270>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <DMA_SetConfig+0x10a>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a5e      	ldr	r2, [pc, #376]	@ (80081dc <DMA_SetConfig+0x274>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <DMA_SetConfig+0x10a>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a5c      	ldr	r2, [pc, #368]	@ (80081e0 <DMA_SetConfig+0x278>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d101      	bne.n	8008076 <DMA_SetConfig+0x10e>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <DMA_SetConfig+0x110>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00d      	beq.n	8008098 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008084:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800808a:	2b00      	cmp	r3, #0
 800808c:	d004      	beq.n	8008098 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008096:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a39      	ldr	r2, [pc, #228]	@ (8008184 <DMA_SetConfig+0x21c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d04a      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a38      	ldr	r2, [pc, #224]	@ (8008188 <DMA_SetConfig+0x220>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d045      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a36      	ldr	r2, [pc, #216]	@ (800818c <DMA_SetConfig+0x224>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d040      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a35      	ldr	r2, [pc, #212]	@ (8008190 <DMA_SetConfig+0x228>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d03b      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a33      	ldr	r2, [pc, #204]	@ (8008194 <DMA_SetConfig+0x22c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d036      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a32      	ldr	r2, [pc, #200]	@ (8008198 <DMA_SetConfig+0x230>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d031      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a30      	ldr	r2, [pc, #192]	@ (800819c <DMA_SetConfig+0x234>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d02c      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a2f      	ldr	r2, [pc, #188]	@ (80081a0 <DMA_SetConfig+0x238>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d027      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a2d      	ldr	r2, [pc, #180]	@ (80081a4 <DMA_SetConfig+0x23c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d022      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a2c      	ldr	r2, [pc, #176]	@ (80081a8 <DMA_SetConfig+0x240>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d01d      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a2a      	ldr	r2, [pc, #168]	@ (80081ac <DMA_SetConfig+0x244>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d018      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a29      	ldr	r2, [pc, #164]	@ (80081b0 <DMA_SetConfig+0x248>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d013      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a27      	ldr	r2, [pc, #156]	@ (80081b4 <DMA_SetConfig+0x24c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00e      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a26      	ldr	r2, [pc, #152]	@ (80081b8 <DMA_SetConfig+0x250>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d009      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a24      	ldr	r2, [pc, #144]	@ (80081bc <DMA_SetConfig+0x254>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <DMA_SetConfig+0x1d0>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a23      	ldr	r2, [pc, #140]	@ (80081c0 <DMA_SetConfig+0x258>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d101      	bne.n	800813c <DMA_SetConfig+0x1d4>
 8008138:	2301      	movs	r3, #1
 800813a:	e000      	b.n	800813e <DMA_SetConfig+0x1d6>
 800813c:	2300      	movs	r3, #0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d059      	beq.n	80081f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008146:	f003 031f 	and.w	r3, r3, #31
 800814a:	223f      	movs	r2, #63	@ 0x3f
 800814c:	409a      	lsls	r2, r3
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008160:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	2b40      	cmp	r3, #64	@ 0x40
 8008170:	d138      	bne.n	80081e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008182:	e0ae      	b.n	80082e2 <DMA_SetConfig+0x37a>
 8008184:	40020010 	.word	0x40020010
 8008188:	40020028 	.word	0x40020028
 800818c:	40020040 	.word	0x40020040
 8008190:	40020058 	.word	0x40020058
 8008194:	40020070 	.word	0x40020070
 8008198:	40020088 	.word	0x40020088
 800819c:	400200a0 	.word	0x400200a0
 80081a0:	400200b8 	.word	0x400200b8
 80081a4:	40020410 	.word	0x40020410
 80081a8:	40020428 	.word	0x40020428
 80081ac:	40020440 	.word	0x40020440
 80081b0:	40020458 	.word	0x40020458
 80081b4:	40020470 	.word	0x40020470
 80081b8:	40020488 	.word	0x40020488
 80081bc:	400204a0 	.word	0x400204a0
 80081c0:	400204b8 	.word	0x400204b8
 80081c4:	58025408 	.word	0x58025408
 80081c8:	5802541c 	.word	0x5802541c
 80081cc:	58025430 	.word	0x58025430
 80081d0:	58025444 	.word	0x58025444
 80081d4:	58025458 	.word	0x58025458
 80081d8:	5802546c 	.word	0x5802546c
 80081dc:	58025480 	.word	0x58025480
 80081e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	60da      	str	r2, [r3, #12]
}
 80081f4:	e075      	b.n	80082e2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a3d      	ldr	r2, [pc, #244]	@ (80082f0 <DMA_SetConfig+0x388>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d04a      	beq.n	8008296 <DMA_SetConfig+0x32e>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a3b      	ldr	r2, [pc, #236]	@ (80082f4 <DMA_SetConfig+0x38c>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d045      	beq.n	8008296 <DMA_SetConfig+0x32e>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a3a      	ldr	r2, [pc, #232]	@ (80082f8 <DMA_SetConfig+0x390>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d040      	beq.n	8008296 <DMA_SetConfig+0x32e>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a38      	ldr	r2, [pc, #224]	@ (80082fc <DMA_SetConfig+0x394>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d03b      	beq.n	8008296 <DMA_SetConfig+0x32e>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a37      	ldr	r2, [pc, #220]	@ (8008300 <DMA_SetConfig+0x398>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d036      	beq.n	8008296 <DMA_SetConfig+0x32e>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a35      	ldr	r2, [pc, #212]	@ (8008304 <DMA_SetConfig+0x39c>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d031      	beq.n	8008296 <DMA_SetConfig+0x32e>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a34      	ldr	r2, [pc, #208]	@ (8008308 <DMA_SetConfig+0x3a0>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d02c      	beq.n	8008296 <DMA_SetConfig+0x32e>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a32      	ldr	r2, [pc, #200]	@ (800830c <DMA_SetConfig+0x3a4>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d027      	beq.n	8008296 <DMA_SetConfig+0x32e>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a31      	ldr	r2, [pc, #196]	@ (8008310 <DMA_SetConfig+0x3a8>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d022      	beq.n	8008296 <DMA_SetConfig+0x32e>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a2f      	ldr	r2, [pc, #188]	@ (8008314 <DMA_SetConfig+0x3ac>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d01d      	beq.n	8008296 <DMA_SetConfig+0x32e>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a2e      	ldr	r2, [pc, #184]	@ (8008318 <DMA_SetConfig+0x3b0>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d018      	beq.n	8008296 <DMA_SetConfig+0x32e>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a2c      	ldr	r2, [pc, #176]	@ (800831c <DMA_SetConfig+0x3b4>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d013      	beq.n	8008296 <DMA_SetConfig+0x32e>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a2b      	ldr	r2, [pc, #172]	@ (8008320 <DMA_SetConfig+0x3b8>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00e      	beq.n	8008296 <DMA_SetConfig+0x32e>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a29      	ldr	r2, [pc, #164]	@ (8008324 <DMA_SetConfig+0x3bc>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d009      	beq.n	8008296 <DMA_SetConfig+0x32e>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a28      	ldr	r2, [pc, #160]	@ (8008328 <DMA_SetConfig+0x3c0>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d004      	beq.n	8008296 <DMA_SetConfig+0x32e>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a26      	ldr	r2, [pc, #152]	@ (800832c <DMA_SetConfig+0x3c4>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d101      	bne.n	800829a <DMA_SetConfig+0x332>
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <DMA_SetConfig+0x334>
 800829a:	2300      	movs	r3, #0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d020      	beq.n	80082e2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082a4:	f003 031f 	and.w	r3, r3, #31
 80082a8:	2201      	movs	r2, #1
 80082aa:	409a      	lsls	r2, r3
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	2b40      	cmp	r3, #64	@ 0x40
 80082be:	d108      	bne.n	80082d2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	60da      	str	r2, [r3, #12]
}
 80082d0:	e007      	b.n	80082e2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	60da      	str	r2, [r3, #12]
}
 80082e2:	bf00      	nop
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	48022c08 	.word	0x48022c08
 80082f4:	48022c1c 	.word	0x48022c1c
 80082f8:	48022c30 	.word	0x48022c30
 80082fc:	48022c44 	.word	0x48022c44
 8008300:	48022c58 	.word	0x48022c58
 8008304:	48022c6c 	.word	0x48022c6c
 8008308:	48022c80 	.word	0x48022c80
 800830c:	48022c94 	.word	0x48022c94
 8008310:	58025408 	.word	0x58025408
 8008314:	5802541c 	.word	0x5802541c
 8008318:	58025430 	.word	0x58025430
 800831c:	58025444 	.word	0x58025444
 8008320:	58025458 	.word	0x58025458
 8008324:	5802546c 	.word	0x5802546c
 8008328:	58025480 	.word	0x58025480
 800832c:	58025494 	.word	0x58025494

08008330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a42      	ldr	r2, [pc, #264]	@ (8008448 <DMA_CalcBaseAndBitshift+0x118>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d04a      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a41      	ldr	r2, [pc, #260]	@ (800844c <DMA_CalcBaseAndBitshift+0x11c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d045      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a3f      	ldr	r2, [pc, #252]	@ (8008450 <DMA_CalcBaseAndBitshift+0x120>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d040      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a3e      	ldr	r2, [pc, #248]	@ (8008454 <DMA_CalcBaseAndBitshift+0x124>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d03b      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a3c      	ldr	r2, [pc, #240]	@ (8008458 <DMA_CalcBaseAndBitshift+0x128>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d036      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a3b      	ldr	r2, [pc, #236]	@ (800845c <DMA_CalcBaseAndBitshift+0x12c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d031      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a39      	ldr	r2, [pc, #228]	@ (8008460 <DMA_CalcBaseAndBitshift+0x130>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d02c      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a38      	ldr	r2, [pc, #224]	@ (8008464 <DMA_CalcBaseAndBitshift+0x134>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d027      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a36      	ldr	r2, [pc, #216]	@ (8008468 <DMA_CalcBaseAndBitshift+0x138>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d022      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a35      	ldr	r2, [pc, #212]	@ (800846c <DMA_CalcBaseAndBitshift+0x13c>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d01d      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a33      	ldr	r2, [pc, #204]	@ (8008470 <DMA_CalcBaseAndBitshift+0x140>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d018      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a32      	ldr	r2, [pc, #200]	@ (8008474 <DMA_CalcBaseAndBitshift+0x144>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d013      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a30      	ldr	r2, [pc, #192]	@ (8008478 <DMA_CalcBaseAndBitshift+0x148>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d00e      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a2f      	ldr	r2, [pc, #188]	@ (800847c <DMA_CalcBaseAndBitshift+0x14c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d009      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a2d      	ldr	r2, [pc, #180]	@ (8008480 <DMA_CalcBaseAndBitshift+0x150>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d004      	beq.n	80083d8 <DMA_CalcBaseAndBitshift+0xa8>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a2c      	ldr	r2, [pc, #176]	@ (8008484 <DMA_CalcBaseAndBitshift+0x154>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d101      	bne.n	80083dc <DMA_CalcBaseAndBitshift+0xac>
 80083d8:	2301      	movs	r3, #1
 80083da:	e000      	b.n	80083de <DMA_CalcBaseAndBitshift+0xae>
 80083dc:	2300      	movs	r3, #0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d024      	beq.n	800842c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	3b10      	subs	r3, #16
 80083ea:	4a27      	ldr	r2, [pc, #156]	@ (8008488 <DMA_CalcBaseAndBitshift+0x158>)
 80083ec:	fba2 2303 	umull	r2, r3, r2, r3
 80083f0:	091b      	lsrs	r3, r3, #4
 80083f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	4a24      	ldr	r2, [pc, #144]	@ (800848c <DMA_CalcBaseAndBitshift+0x15c>)
 80083fc:	5cd3      	ldrb	r3, [r2, r3]
 80083fe:	461a      	mov	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b03      	cmp	r3, #3
 8008408:	d908      	bls.n	800841c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	461a      	mov	r2, r3
 8008410:	4b1f      	ldr	r3, [pc, #124]	@ (8008490 <DMA_CalcBaseAndBitshift+0x160>)
 8008412:	4013      	ands	r3, r2
 8008414:	1d1a      	adds	r2, r3, #4
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	659a      	str	r2, [r3, #88]	@ 0x58
 800841a:	e00d      	b.n	8008438 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	461a      	mov	r2, r3
 8008422:	4b1b      	ldr	r3, [pc, #108]	@ (8008490 <DMA_CalcBaseAndBitshift+0x160>)
 8008424:	4013      	ands	r3, r2
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	6593      	str	r3, [r2, #88]	@ 0x58
 800842a:	e005      	b.n	8008438 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	40020010 	.word	0x40020010
 800844c:	40020028 	.word	0x40020028
 8008450:	40020040 	.word	0x40020040
 8008454:	40020058 	.word	0x40020058
 8008458:	40020070 	.word	0x40020070
 800845c:	40020088 	.word	0x40020088
 8008460:	400200a0 	.word	0x400200a0
 8008464:	400200b8 	.word	0x400200b8
 8008468:	40020410 	.word	0x40020410
 800846c:	40020428 	.word	0x40020428
 8008470:	40020440 	.word	0x40020440
 8008474:	40020458 	.word	0x40020458
 8008478:	40020470 	.word	0x40020470
 800847c:	40020488 	.word	0x40020488
 8008480:	400204a0 	.word	0x400204a0
 8008484:	400204b8 	.word	0x400204b8
 8008488:	aaaaaaab 	.word	0xaaaaaaab
 800848c:	0801883c 	.word	0x0801883c
 8008490:	fffffc00 	.word	0xfffffc00

08008494 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d120      	bne.n	80084ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d858      	bhi.n	8008562 <DMA_CheckFifoParam+0xce>
 80084b0:	a201      	add	r2, pc, #4	@ (adr r2, 80084b8 <DMA_CheckFifoParam+0x24>)
 80084b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b6:	bf00      	nop
 80084b8:	080084c9 	.word	0x080084c9
 80084bc:	080084db 	.word	0x080084db
 80084c0:	080084c9 	.word	0x080084c9
 80084c4:	08008563 	.word	0x08008563
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d048      	beq.n	8008566 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084d8:	e045      	b.n	8008566 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80084e2:	d142      	bne.n	800856a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084e8:	e03f      	b.n	800856a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084f2:	d123      	bne.n	800853c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d838      	bhi.n	800856e <DMA_CheckFifoParam+0xda>
 80084fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008504 <DMA_CheckFifoParam+0x70>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	08008515 	.word	0x08008515
 8008508:	0800851b 	.word	0x0800851b
 800850c:	08008515 	.word	0x08008515
 8008510:	0800852d 	.word	0x0800852d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	73fb      	strb	r3, [r7, #15]
        break;
 8008518:	e030      	b.n	800857c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d025      	beq.n	8008572 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800852a:	e022      	b.n	8008572 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008530:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008534:	d11f      	bne.n	8008576 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800853a:	e01c      	b.n	8008576 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008540:	2b02      	cmp	r3, #2
 8008542:	d902      	bls.n	800854a <DMA_CheckFifoParam+0xb6>
 8008544:	2b03      	cmp	r3, #3
 8008546:	d003      	beq.n	8008550 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008548:	e018      	b.n	800857c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	73fb      	strb	r3, [r7, #15]
        break;
 800854e:	e015      	b.n	800857c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008554:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00e      	beq.n	800857a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	73fb      	strb	r3, [r7, #15]
    break;
 8008560:	e00b      	b.n	800857a <DMA_CheckFifoParam+0xe6>
        break;
 8008562:	bf00      	nop
 8008564:	e00a      	b.n	800857c <DMA_CheckFifoParam+0xe8>
        break;
 8008566:	bf00      	nop
 8008568:	e008      	b.n	800857c <DMA_CheckFifoParam+0xe8>
        break;
 800856a:	bf00      	nop
 800856c:	e006      	b.n	800857c <DMA_CheckFifoParam+0xe8>
        break;
 800856e:	bf00      	nop
 8008570:	e004      	b.n	800857c <DMA_CheckFifoParam+0xe8>
        break;
 8008572:	bf00      	nop
 8008574:	e002      	b.n	800857c <DMA_CheckFifoParam+0xe8>
        break;
 8008576:	bf00      	nop
 8008578:	e000      	b.n	800857c <DMA_CheckFifoParam+0xe8>
    break;
 800857a:	bf00      	nop
    }
  }

  return status;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop

0800858c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a38      	ldr	r2, [pc, #224]	@ (8008680 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d022      	beq.n	80085ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a36      	ldr	r2, [pc, #216]	@ (8008684 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d01d      	beq.n	80085ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a35      	ldr	r2, [pc, #212]	@ (8008688 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d018      	beq.n	80085ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a33      	ldr	r2, [pc, #204]	@ (800868c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d013      	beq.n	80085ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a32      	ldr	r2, [pc, #200]	@ (8008690 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00e      	beq.n	80085ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a30      	ldr	r2, [pc, #192]	@ (8008694 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d009      	beq.n	80085ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a2f      	ldr	r2, [pc, #188]	@ (8008698 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d004      	beq.n	80085ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a2d      	ldr	r2, [pc, #180]	@ (800869c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d101      	bne.n	80085ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80085ee:	2300      	movs	r3, #0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d01a      	beq.n	800862a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	3b08      	subs	r3, #8
 80085fc:	4a28      	ldr	r2, [pc, #160]	@ (80086a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80085fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008602:	091b      	lsrs	r3, r3, #4
 8008604:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4b26      	ldr	r3, [pc, #152]	@ (80086a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	461a      	mov	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a24      	ldr	r2, [pc, #144]	@ (80086a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008618:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f003 031f 	and.w	r3, r3, #31
 8008620:	2201      	movs	r2, #1
 8008622:	409a      	lsls	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008628:	e024      	b.n	8008674 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	3b10      	subs	r3, #16
 8008632:	4a1e      	ldr	r2, [pc, #120]	@ (80086ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008634:	fba2 2303 	umull	r2, r3, r2, r3
 8008638:	091b      	lsrs	r3, r3, #4
 800863a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	4a1c      	ldr	r2, [pc, #112]	@ (80086b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d806      	bhi.n	8008652 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4a1b      	ldr	r2, [pc, #108]	@ (80086b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d902      	bls.n	8008652 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3308      	adds	r3, #8
 8008650:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	4b18      	ldr	r3, [pc, #96]	@ (80086b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	461a      	mov	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a16      	ldr	r2, [pc, #88]	@ (80086bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008664:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f003 031f 	and.w	r3, r3, #31
 800866c:	2201      	movs	r2, #1
 800866e:	409a      	lsls	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008674:	bf00      	nop
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	58025408 	.word	0x58025408
 8008684:	5802541c 	.word	0x5802541c
 8008688:	58025430 	.word	0x58025430
 800868c:	58025444 	.word	0x58025444
 8008690:	58025458 	.word	0x58025458
 8008694:	5802546c 	.word	0x5802546c
 8008698:	58025480 	.word	0x58025480
 800869c:	58025494 	.word	0x58025494
 80086a0:	cccccccd 	.word	0xcccccccd
 80086a4:	16009600 	.word	0x16009600
 80086a8:	58025880 	.word	0x58025880
 80086ac:	aaaaaaab 	.word	0xaaaaaaab
 80086b0:	400204b8 	.word	0x400204b8
 80086b4:	4002040f 	.word	0x4002040f
 80086b8:	10008200 	.word	0x10008200
 80086bc:	40020880 	.word	0x40020880

080086c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d04a      	beq.n	800876c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2b08      	cmp	r3, #8
 80086da:	d847      	bhi.n	800876c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a25      	ldr	r2, [pc, #148]	@ (8008778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d022      	beq.n	800872c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a24      	ldr	r2, [pc, #144]	@ (800877c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d01d      	beq.n	800872c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a22      	ldr	r2, [pc, #136]	@ (8008780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d018      	beq.n	800872c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a21      	ldr	r2, [pc, #132]	@ (8008784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d013      	beq.n	800872c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a1f      	ldr	r2, [pc, #124]	@ (8008788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00e      	beq.n	800872c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a1e      	ldr	r2, [pc, #120]	@ (800878c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d009      	beq.n	800872c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a1c      	ldr	r2, [pc, #112]	@ (8008790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d004      	beq.n	800872c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a1b      	ldr	r2, [pc, #108]	@ (8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d101      	bne.n	8008730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800872c:	2301      	movs	r3, #1
 800872e:	e000      	b.n	8008732 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008730:	2300      	movs	r3, #0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	4b17      	ldr	r3, [pc, #92]	@ (8008798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800873a:	4413      	add	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	461a      	mov	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a15      	ldr	r2, [pc, #84]	@ (800879c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008748:	671a      	str	r2, [r3, #112]	@ 0x70
 800874a:	e009      	b.n	8008760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4b14      	ldr	r3, [pc, #80]	@ (80087a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008750:	4413      	add	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	461a      	mov	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a11      	ldr	r2, [pc, #68]	@ (80087a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800875e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	3b01      	subs	r3, #1
 8008764:	2201      	movs	r2, #1
 8008766:	409a      	lsls	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800876c:	bf00      	nop
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	58025408 	.word	0x58025408
 800877c:	5802541c 	.word	0x5802541c
 8008780:	58025430 	.word	0x58025430
 8008784:	58025444 	.word	0x58025444
 8008788:	58025458 	.word	0x58025458
 800878c:	5802546c 	.word	0x5802546c
 8008790:	58025480 	.word	0x58025480
 8008794:	58025494 	.word	0x58025494
 8008798:	1600963f 	.word	0x1600963f
 800879c:	58025940 	.word	0x58025940
 80087a0:	1000823f 	.word	0x1000823f
 80087a4:	40020940 	.word	0x40020940

080087a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b098      	sub	sp, #96	@ 0x60
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80087b0:	4a84      	ldr	r2, [pc, #528]	@ (80089c4 <HAL_FDCAN_Init+0x21c>)
 80087b2:	f107 030c 	add.w	r3, r7, #12
 80087b6:	4611      	mov	r1, r2
 80087b8:	224c      	movs	r2, #76	@ 0x4c
 80087ba:	4618      	mov	r0, r3
 80087bc:	f00e f839 	bl	8016832 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e1c6      	b.n	8008b58 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a7e      	ldr	r2, [pc, #504]	@ (80089c8 <HAL_FDCAN_Init+0x220>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d106      	bne.n	80087e2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80087dc:	461a      	mov	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7fa fcf6 	bl	80031e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699a      	ldr	r2, [r3, #24]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0210 	bic.w	r2, r2, #16
 800880a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800880c:	f7fc ff2a 	bl	8005664 <HAL_GetTick>
 8008810:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008812:	e014      	b.n	800883e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008814:	f7fc ff26 	bl	8005664 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b0a      	cmp	r3, #10
 8008820:	d90d      	bls.n	800883e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008828:	f043 0201 	orr.w	r2, r3, #1
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2203      	movs	r2, #3
 8008836:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e18c      	b.n	8008b58 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	f003 0308 	and.w	r3, r3, #8
 8008848:	2b08      	cmp	r3, #8
 800884a:	d0e3      	beq.n	8008814 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699a      	ldr	r2, [r3, #24]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0201 	orr.w	r2, r2, #1
 800885a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800885c:	f7fc ff02 	bl	8005664 <HAL_GetTick>
 8008860:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008862:	e014      	b.n	800888e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008864:	f7fc fefe 	bl	8005664 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b0a      	cmp	r3, #10
 8008870:	d90d      	bls.n	800888e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008878:	f043 0201 	orr.w	r2, r3, #1
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2203      	movs	r2, #3
 8008886:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e164      	b.n	8008b58 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0e3      	beq.n	8008864 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0202 	orr.w	r2, r2, #2
 80088aa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7c1b      	ldrb	r3, [r3, #16]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d108      	bne.n	80088c6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088c2:	619a      	str	r2, [r3, #24]
 80088c4:	e007      	b.n	80088d6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	699a      	ldr	r2, [r3, #24]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7c5b      	ldrb	r3, [r3, #17]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d108      	bne.n	80088f0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699a      	ldr	r2, [r3, #24]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088ec:	619a      	str	r2, [r3, #24]
 80088ee:	e007      	b.n	8008900 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	699a      	ldr	r2, [r3, #24]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7c9b      	ldrb	r3, [r3, #18]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d108      	bne.n	800891a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	699a      	ldr	r2, [r3, #24]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008916:	619a      	str	r2, [r3, #24]
 8008918:	e007      	b.n	800892a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	699a      	ldr	r2, [r3, #24]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008928:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	699a      	ldr	r2, [r3, #24]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800894e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	691a      	ldr	r2, [r3, #16]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0210 	bic.w	r2, r2, #16
 800895e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d108      	bne.n	800897a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0204 	orr.w	r2, r2, #4
 8008976:	619a      	str	r2, [r3, #24]
 8008978:	e030      	b.n	80089dc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d02c      	beq.n	80089dc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	2b02      	cmp	r3, #2
 8008988:	d020      	beq.n	80089cc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	699a      	ldr	r2, [r3, #24]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008998:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	691a      	ldr	r2, [r3, #16]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f042 0210 	orr.w	r2, r2, #16
 80089a8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d114      	bne.n	80089dc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	699a      	ldr	r2, [r3, #24]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f042 0220 	orr.w	r2, r2, #32
 80089c0:	619a      	str	r2, [r3, #24]
 80089c2:	e00b      	b.n	80089dc <HAL_FDCAN_Init+0x234>
 80089c4:	08018798 	.word	0x08018798
 80089c8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0220 	orr.w	r2, r2, #32
 80089da:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80089ec:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80089f4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008a04:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008a06:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a10:	d115      	bne.n	8008a3e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a16:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008a20:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a26:	3b01      	subs	r3, #1
 8008a28:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008a2a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a32:	3b01      	subs	r3, #1
 8008a34:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008a3a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008a3c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00a      	beq.n	8008a5c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a64:	4413      	add	r3, r2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d011      	beq.n	8008a8e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008a72:	f023 0107 	bic.w	r1, r3, #7
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	3360      	adds	r3, #96	@ 0x60
 8008a7e:	443b      	add	r3, r7
 8008a80:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d011      	beq.n	8008aba <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008a9e:	f023 0107 	bic.w	r1, r3, #7
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	3360      	adds	r3, #96	@ 0x60
 8008aaa:	443b      	add	r3, r7
 8008aac:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d012      	beq.n	8008ae8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008aca:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	3360      	adds	r3, #96	@ 0x60
 8008ad6:	443b      	add	r3, r7
 8008ad8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008adc:	011a      	lsls	r2, r3, #4
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d012      	beq.n	8008b16 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008af8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	3360      	adds	r3, #96	@ 0x60
 8008b04:	443b      	add	r3, r7
 8008b06:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008b0a:	021a      	lsls	r2, r3, #8
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a11      	ldr	r2, [pc, #68]	@ (8008b60 <HAL_FDCAN_Init+0x3b8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d107      	bne.n	8008b30 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f022 0203 	bic.w	r2, r2, #3
 8008b2e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f80b 	bl	8008b64 <FDCAN_CalcultateRamBlockAddresses>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8008b54:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3760      	adds	r7, #96	@ 0x60
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	4000a000 	.word	0x4000a000

08008b64 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b70:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008b7a:	4ba7      	ldr	r3, [pc, #668]	@ (8008e18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	0091      	lsls	r1, r2, #2
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	6812      	ldr	r2, [r2, #0]
 8008b86:	430b      	orrs	r3, r1
 8008b88:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b94:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9c:	041a      	lsls	r2, r3, #16
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	4413      	add	r3, r2
 8008bb0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008bba:	4b97      	ldr	r3, [pc, #604]	@ (8008e18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	0091      	lsls	r1, r2, #2
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	430b      	orrs	r3, r1
 8008bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bdc:	041a      	lsls	r2, r3, #16
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008bfc:	4b86      	ldr	r3, [pc, #536]	@ (8008e18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008bfe:	4013      	ands	r3, r2
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	0091      	lsls	r1, r2, #2
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	6812      	ldr	r2, [r2, #0]
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c16:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1e:	041a      	lsls	r2, r3, #16
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008c32:	fb02 f303 	mul.w	r3, r2, r3
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	4413      	add	r3, r2
 8008c3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008c44:	4b74      	ldr	r3, [pc, #464]	@ (8008e18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008c46:	4013      	ands	r3, r2
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	0091      	lsls	r1, r2, #2
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	6812      	ldr	r2, [r2, #0]
 8008c50:	430b      	orrs	r3, r1
 8008c52:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008c5e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c66:	041a      	lsls	r2, r3, #16
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008c7a:	fb02 f303 	mul.w	r3, r2, r3
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	4413      	add	r3, r2
 8008c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8008c8c:	4b62      	ldr	r3, [pc, #392]	@ (8008e18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008c8e:	4013      	ands	r3, r2
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	0091      	lsls	r1, r2, #2
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	6812      	ldr	r2, [r2, #0]
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008ca6:	fb02 f303 	mul.w	r3, r2, r3
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4413      	add	r3, r2
 8008cae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008cb8:	4b57      	ldr	r3, [pc, #348]	@ (8008e18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008cba:	4013      	ands	r3, r2
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	0091      	lsls	r1, r2, #2
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cd2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cda:	041a      	lsls	r2, r3, #16
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	4413      	add	r3, r2
 8008cf0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008cfa:	4b47      	ldr	r3, [pc, #284]	@ (8008e18 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	0091      	lsls	r1, r2, #2
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6812      	ldr	r2, [r2, #0]
 8008d06:	430b      	orrs	r3, r1
 8008d08:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008d14:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d1c:	041a      	lsls	r2, r3, #16
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008d30:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d38:	061a      	lsls	r2, r3, #24
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d48:	4b34      	ldr	r3, [pc, #208]	@ (8008e1c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008d4a:	4413      	add	r3, r2
 8008d4c:	009a      	lsls	r2, r3, #2
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	441a      	add	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d6a:	00db      	lsls	r3, r3, #3
 8008d6c:	441a      	add	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8008d7e:	fb01 f303 	mul.w	r3, r1, r3
 8008d82:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008d84:	441a      	add	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008d96:	fb01 f303 	mul.w	r3, r1, r3
 8008d9a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8008d9c:	441a      	add	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008daa:	6879      	ldr	r1, [r7, #4]
 8008dac:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8008dae:	fb01 f303 	mul.w	r3, r1, r3
 8008db2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008db4:	441a      	add	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	441a      	add	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008dde:	fb01 f303 	mul.w	r3, r1, r3
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	441a      	add	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008e00:	441a      	add	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e0e:	4a04      	ldr	r2, [pc, #16]	@ (8008e20 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d915      	bls.n	8008e40 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008e14:	e006      	b.n	8008e24 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008e16:	bf00      	nop
 8008e18:	ffff0003 	.word	0xffff0003
 8008e1c:	10002b00 	.word	0x10002b00
 8008e20:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e2a:	f043 0220 	orr.w	r2, r3, #32
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2203      	movs	r2, #3
 8008e38:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e010      	b.n	8008e62 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	e005      	b.n	8008e54 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3304      	adds	r3, #4
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d3f3      	bcc.n	8008e48 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop

08008e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b089      	sub	sp, #36	@ 0x24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008e7e:	4b89      	ldr	r3, [pc, #548]	@ (80090a4 <HAL_GPIO_Init+0x234>)
 8008e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e82:	e194      	b.n	80091ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	2101      	movs	r1, #1
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e90:	4013      	ands	r3, r2
 8008e92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f000 8186 	beq.w	80091a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f003 0303 	and.w	r3, r3, #3
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d005      	beq.n	8008eb4 <HAL_GPIO_Init+0x44>
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d130      	bne.n	8008f16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec4:	43db      	mvns	r3, r3
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	68da      	ldr	r2, [r3, #12]
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008eea:	2201      	movs	r2, #1
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef2:	43db      	mvns	r3, r3
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	091b      	lsrs	r3, r3, #4
 8008f00:	f003 0201 	and.w	r2, r3, #1
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f003 0303 	and.w	r3, r3, #3
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d017      	beq.n	8008f52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	2203      	movs	r2, #3
 8008f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f32:	43db      	mvns	r3, r3
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	4013      	ands	r3, r2
 8008f38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	fa02 f303 	lsl.w	r3, r2, r3
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f003 0303 	and.w	r3, r3, #3
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d123      	bne.n	8008fa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	08da      	lsrs	r2, r3, #3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3208      	adds	r2, #8
 8008f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	f003 0307 	and.w	r3, r3, #7
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	220f      	movs	r2, #15
 8008f76:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7a:	43db      	mvns	r3, r3
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	4013      	ands	r3, r2
 8008f80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	691a      	ldr	r2, [r3, #16]
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	f003 0307 	and.w	r3, r3, #7
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	08da      	lsrs	r2, r3, #3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3208      	adds	r2, #8
 8008fa0:	69b9      	ldr	r1, [r7, #24]
 8008fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	005b      	lsls	r3, r3, #1
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb6:	43db      	mvns	r3, r3
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f003 0203 	and.w	r2, r3, #3
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	fa02 f303 	lsl.w	r3, r2, r3
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 80e0 	beq.w	80091a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80090a8 <HAL_GPIO_Init+0x238>)
 8008fea:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008fee:	4a2e      	ldr	r2, [pc, #184]	@ (80090a8 <HAL_GPIO_Init+0x238>)
 8008ff0:	f043 0302 	orr.w	r3, r3, #2
 8008ff4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8008ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80090a8 <HAL_GPIO_Init+0x238>)
 8008ffa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009006:	4a29      	ldr	r2, [pc, #164]	@ (80090ac <HAL_GPIO_Init+0x23c>)
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	089b      	lsrs	r3, r3, #2
 800900c:	3302      	adds	r3, #2
 800900e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	220f      	movs	r2, #15
 800901e:	fa02 f303 	lsl.w	r3, r2, r3
 8009022:	43db      	mvns	r3, r3
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	4013      	ands	r3, r2
 8009028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a20      	ldr	r2, [pc, #128]	@ (80090b0 <HAL_GPIO_Init+0x240>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d052      	beq.n	80090d8 <HAL_GPIO_Init+0x268>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a1f      	ldr	r2, [pc, #124]	@ (80090b4 <HAL_GPIO_Init+0x244>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d031      	beq.n	800909e <HAL_GPIO_Init+0x22e>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a1e      	ldr	r2, [pc, #120]	@ (80090b8 <HAL_GPIO_Init+0x248>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d02b      	beq.n	800909a <HAL_GPIO_Init+0x22a>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a1d      	ldr	r2, [pc, #116]	@ (80090bc <HAL_GPIO_Init+0x24c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d025      	beq.n	8009096 <HAL_GPIO_Init+0x226>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a1c      	ldr	r2, [pc, #112]	@ (80090c0 <HAL_GPIO_Init+0x250>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d01f      	beq.n	8009092 <HAL_GPIO_Init+0x222>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a1b      	ldr	r2, [pc, #108]	@ (80090c4 <HAL_GPIO_Init+0x254>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d019      	beq.n	800908e <HAL_GPIO_Init+0x21e>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a1a      	ldr	r2, [pc, #104]	@ (80090c8 <HAL_GPIO_Init+0x258>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d013      	beq.n	800908a <HAL_GPIO_Init+0x21a>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a19      	ldr	r2, [pc, #100]	@ (80090cc <HAL_GPIO_Init+0x25c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00d      	beq.n	8009086 <HAL_GPIO_Init+0x216>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a18      	ldr	r2, [pc, #96]	@ (80090d0 <HAL_GPIO_Init+0x260>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d007      	beq.n	8009082 <HAL_GPIO_Init+0x212>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a17      	ldr	r2, [pc, #92]	@ (80090d4 <HAL_GPIO_Init+0x264>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d101      	bne.n	800907e <HAL_GPIO_Init+0x20e>
 800907a:	2309      	movs	r3, #9
 800907c:	e02d      	b.n	80090da <HAL_GPIO_Init+0x26a>
 800907e:	230a      	movs	r3, #10
 8009080:	e02b      	b.n	80090da <HAL_GPIO_Init+0x26a>
 8009082:	2308      	movs	r3, #8
 8009084:	e029      	b.n	80090da <HAL_GPIO_Init+0x26a>
 8009086:	2307      	movs	r3, #7
 8009088:	e027      	b.n	80090da <HAL_GPIO_Init+0x26a>
 800908a:	2306      	movs	r3, #6
 800908c:	e025      	b.n	80090da <HAL_GPIO_Init+0x26a>
 800908e:	2305      	movs	r3, #5
 8009090:	e023      	b.n	80090da <HAL_GPIO_Init+0x26a>
 8009092:	2304      	movs	r3, #4
 8009094:	e021      	b.n	80090da <HAL_GPIO_Init+0x26a>
 8009096:	2303      	movs	r3, #3
 8009098:	e01f      	b.n	80090da <HAL_GPIO_Init+0x26a>
 800909a:	2302      	movs	r3, #2
 800909c:	e01d      	b.n	80090da <HAL_GPIO_Init+0x26a>
 800909e:	2301      	movs	r3, #1
 80090a0:	e01b      	b.n	80090da <HAL_GPIO_Init+0x26a>
 80090a2:	bf00      	nop
 80090a4:	58000080 	.word	0x58000080
 80090a8:	58024400 	.word	0x58024400
 80090ac:	58000400 	.word	0x58000400
 80090b0:	58020000 	.word	0x58020000
 80090b4:	58020400 	.word	0x58020400
 80090b8:	58020800 	.word	0x58020800
 80090bc:	58020c00 	.word	0x58020c00
 80090c0:	58021000 	.word	0x58021000
 80090c4:	58021400 	.word	0x58021400
 80090c8:	58021800 	.word	0x58021800
 80090cc:	58021c00 	.word	0x58021c00
 80090d0:	58022000 	.word	0x58022000
 80090d4:	58022400 	.word	0x58022400
 80090d8:	2300      	movs	r3, #0
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	f002 0203 	and.w	r2, r2, #3
 80090e0:	0092      	lsls	r2, r2, #2
 80090e2:	4093      	lsls	r3, r2
 80090e4:	69ba      	ldr	r2, [r7, #24]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090ea:	4938      	ldr	r1, [pc, #224]	@ (80091cc <HAL_GPIO_Init+0x35c>)
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	089b      	lsrs	r3, r3, #2
 80090f0:	3302      	adds	r3, #2
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80090f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	43db      	mvns	r3, r3
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	4013      	ands	r3, r2
 8009108:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	4313      	orrs	r3, r2
 800911c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800911e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	43db      	mvns	r3, r3
 8009132:	69ba      	ldr	r2, [r7, #24]
 8009134:	4013      	ands	r3, r2
 8009136:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d003      	beq.n	800914c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	4313      	orrs	r3, r2
 800914a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800914c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	43db      	mvns	r3, r3
 800915e:	69ba      	ldr	r2, [r7, #24]
 8009160:	4013      	ands	r3, r2
 8009162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	4313      	orrs	r3, r2
 8009176:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	69ba      	ldr	r2, [r7, #24]
 800917c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	43db      	mvns	r3, r3
 8009188:	69ba      	ldr	r2, [r7, #24]
 800918a:	4013      	ands	r3, r2
 800918c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800919a:	69ba      	ldr	r2, [r7, #24]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	4313      	orrs	r3, r2
 80091a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	69ba      	ldr	r2, [r7, #24]
 80091a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	3301      	adds	r3, #1
 80091ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	fa22 f303 	lsr.w	r3, r2, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f47f ae63 	bne.w	8008e84 <HAL_GPIO_Init+0x14>
  }
}
 80091be:	bf00      	nop
 80091c0:	bf00      	nop
 80091c2:	3724      	adds	r7, #36	@ 0x24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	58000400 	.word	0x58000400

080091d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	807b      	strh	r3, [r7, #2]
 80091dc:	4613      	mov	r3, r2
 80091de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80091e0:	787b      	ldrb	r3, [r7, #1]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80091e6:	887a      	ldrh	r2, [r7, #2]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80091ec:	e003      	b.n	80091f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80091ee:	887b      	ldrh	r3, [r7, #2]
 80091f0:	041a      	lsls	r2, r3, #16
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	619a      	str	r2, [r3, #24]
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
	...

08009204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e08b      	b.n	800932e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	d106      	bne.n	8009230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7fa f948 	bl	80034c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2224      	movs	r2, #36	@ 0x24
 8009234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 0201 	bic.w	r2, r2, #1
 8009246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009254:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009264:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d107      	bne.n	800927e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689a      	ldr	r2, [r3, #8]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800927a:	609a      	str	r2, [r3, #8]
 800927c:	e006      	b.n	800928c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800928a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	2b02      	cmp	r3, #2
 8009292:	d108      	bne.n	80092a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092a2:	605a      	str	r2, [r3, #4]
 80092a4:	e007      	b.n	80092b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6859      	ldr	r1, [r3, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009338 <HAL_I2C_Init+0x134>)
 80092c2:	430b      	orrs	r3, r1
 80092c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68da      	ldr	r2, [r3, #12]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80092d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	691a      	ldr	r2, [r3, #16]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	69d9      	ldr	r1, [r3, #28]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a1a      	ldr	r2, [r3, #32]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f042 0201 	orr.w	r2, r2, #1
 800930e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2220      	movs	r2, #32
 800931a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	02008000 	.word	0x02008000

0800933c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800934c:	b2db      	uxtb	r3, r3
 800934e:	2b20      	cmp	r3, #32
 8009350:	d138      	bne.n	80093c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009358:	2b01      	cmp	r3, #1
 800935a:	d101      	bne.n	8009360 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800935c:	2302      	movs	r3, #2
 800935e:	e032      	b.n	80093c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2224      	movs	r2, #36	@ 0x24
 800936c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0201 	bic.w	r2, r2, #1
 800937e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800938e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6819      	ldr	r1, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f042 0201 	orr.w	r2, r2, #1
 80093ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	e000      	b.n	80093c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80093c4:	2302      	movs	r3, #2
  }
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b085      	sub	sp, #20
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b20      	cmp	r3, #32
 80093e6:	d139      	bne.n	800945c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d101      	bne.n	80093f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80093f2:	2302      	movs	r3, #2
 80093f4:	e033      	b.n	800945e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2224      	movs	r2, #36	@ 0x24
 8009402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 0201 	bic.w	r2, r2, #1
 8009414:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009424:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	021b      	lsls	r3, r3, #8
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	4313      	orrs	r3, r2
 800942e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f042 0201 	orr.w	r2, r2, #1
 8009446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2220      	movs	r2, #32
 800944c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	e000      	b.n	800945e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800945c:	2302      	movs	r3, #2
  }
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
	...

0800946c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009474:	4b19      	ldr	r3, [pc, #100]	@ (80094dc <HAL_PWREx_ConfigSupply+0x70>)
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b04      	cmp	r3, #4
 800947e:	d00a      	beq.n	8009496 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009480:	4b16      	ldr	r3, [pc, #88]	@ (80094dc <HAL_PWREx_ConfigSupply+0x70>)
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f003 0307 	and.w	r3, r3, #7
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	429a      	cmp	r2, r3
 800948c:	d001      	beq.n	8009492 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e01f      	b.n	80094d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	e01d      	b.n	80094d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009496:	4b11      	ldr	r3, [pc, #68]	@ (80094dc <HAL_PWREx_ConfigSupply+0x70>)
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f023 0207 	bic.w	r2, r3, #7
 800949e:	490f      	ldr	r1, [pc, #60]	@ (80094dc <HAL_PWREx_ConfigSupply+0x70>)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80094a6:	f7fc f8dd 	bl	8005664 <HAL_GetTick>
 80094aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80094ac:	e009      	b.n	80094c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80094ae:	f7fc f8d9 	bl	8005664 <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80094bc:	d901      	bls.n	80094c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e007      	b.n	80094d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80094c2:	4b06      	ldr	r3, [pc, #24]	@ (80094dc <HAL_PWREx_ConfigSupply+0x70>)
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094ce:	d1ee      	bne.n	80094ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	58024800 	.word	0x58024800

080094e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08c      	sub	sp, #48	@ 0x30
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d102      	bne.n	80094f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	f000 bc1f 	b.w	8009d32 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 80b3 	beq.w	8009668 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009502:	4b95      	ldr	r3, [pc, #596]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800950a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800950c:	4b92      	ldr	r3, [pc, #584]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 800950e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009510:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009514:	2b10      	cmp	r3, #16
 8009516:	d007      	beq.n	8009528 <HAL_RCC_OscConfig+0x48>
 8009518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951a:	2b18      	cmp	r3, #24
 800951c:	d112      	bne.n	8009544 <HAL_RCC_OscConfig+0x64>
 800951e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009520:	f003 0303 	and.w	r3, r3, #3
 8009524:	2b02      	cmp	r3, #2
 8009526:	d10d      	bne.n	8009544 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009528:	4b8b      	ldr	r3, [pc, #556]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 8098 	beq.w	8009666 <HAL_RCC_OscConfig+0x186>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	f040 8093 	bne.w	8009666 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e3f6      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800954c:	d106      	bne.n	800955c <HAL_RCC_OscConfig+0x7c>
 800954e:	4b82      	ldr	r3, [pc, #520]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a81      	ldr	r2, [pc, #516]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	e058      	b.n	800960e <HAL_RCC_OscConfig+0x12e>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d112      	bne.n	800958a <HAL_RCC_OscConfig+0xaa>
 8009564:	4b7c      	ldr	r3, [pc, #496]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a7b      	ldr	r2, [pc, #492]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 800956a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	4b79      	ldr	r3, [pc, #484]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a78      	ldr	r2, [pc, #480]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009576:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	4b76      	ldr	r3, [pc, #472]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a75      	ldr	r2, [pc, #468]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	e041      	b.n	800960e <HAL_RCC_OscConfig+0x12e>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009592:	d112      	bne.n	80095ba <HAL_RCC_OscConfig+0xda>
 8009594:	4b70      	ldr	r3, [pc, #448]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a6f      	ldr	r2, [pc, #444]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 800959a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	4b6d      	ldr	r3, [pc, #436]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a6c      	ldr	r2, [pc, #432]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	4b6a      	ldr	r3, [pc, #424]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a69      	ldr	r2, [pc, #420]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	e029      	b.n	800960e <HAL_RCC_OscConfig+0x12e>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80095c2:	d112      	bne.n	80095ea <HAL_RCC_OscConfig+0x10a>
 80095c4:	4b64      	ldr	r3, [pc, #400]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a63      	ldr	r2, [pc, #396]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	4b61      	ldr	r3, [pc, #388]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a60      	ldr	r2, [pc, #384]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	4b5e      	ldr	r3, [pc, #376]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a5d      	ldr	r2, [pc, #372]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	e011      	b.n	800960e <HAL_RCC_OscConfig+0x12e>
 80095ea:	4b5b      	ldr	r3, [pc, #364]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a5a      	ldr	r2, [pc, #360]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	4b58      	ldr	r3, [pc, #352]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a57      	ldr	r2, [pc, #348]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80095fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	4b55      	ldr	r3, [pc, #340]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a54      	ldr	r2, [pc, #336]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009608:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800960c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d013      	beq.n	800963e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009616:	f7fc f825 	bl	8005664 <HAL_GetTick>
 800961a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800961c:	e008      	b.n	8009630 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800961e:	f7fc f821 	bl	8005664 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	2b64      	cmp	r3, #100	@ 0x64
 800962a:	d901      	bls.n	8009630 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	e380      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009630:	4b49      	ldr	r3, [pc, #292]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d0f0      	beq.n	800961e <HAL_RCC_OscConfig+0x13e>
 800963c:	e014      	b.n	8009668 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800963e:	f7fc f811 	bl	8005664 <HAL_GetTick>
 8009642:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009644:	e008      	b.n	8009658 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009646:	f7fc f80d 	bl	8005664 <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	2b64      	cmp	r3, #100	@ 0x64
 8009652:	d901      	bls.n	8009658 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e36c      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009658:	4b3f      	ldr	r3, [pc, #252]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1f0      	bne.n	8009646 <HAL_RCC_OscConfig+0x166>
 8009664:	e000      	b.n	8009668 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009666:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 808c 	beq.w	800978e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009676:	4b38      	ldr	r3, [pc, #224]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800967e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009680:	4b35      	ldr	r3, [pc, #212]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009684:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d007      	beq.n	800969c <HAL_RCC_OscConfig+0x1bc>
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	2b18      	cmp	r3, #24
 8009690:	d137      	bne.n	8009702 <HAL_RCC_OscConfig+0x222>
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	f003 0303 	and.w	r3, r3, #3
 8009698:	2b00      	cmp	r3, #0
 800969a:	d132      	bne.n	8009702 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800969c:	4b2e      	ldr	r3, [pc, #184]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <HAL_RCC_OscConfig+0x1d4>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e33e      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80096b4:	4b28      	ldr	r3, [pc, #160]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f023 0219 	bic.w	r2, r3, #25
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	4925      	ldr	r1, [pc, #148]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096c6:	f7fb ffcd 	bl	8005664 <HAL_GetTick>
 80096ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096cc:	e008      	b.n	80096e0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096ce:	f7fb ffc9 	bl	8005664 <HAL_GetTick>
 80096d2:	4602      	mov	r2, r0
 80096d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d901      	bls.n	80096e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e328      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d0f0      	beq.n	80096ce <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	061b      	lsls	r3, r3, #24
 80096fa:	4917      	ldr	r1, [pc, #92]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009700:	e045      	b.n	800978e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d028      	beq.n	800975c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800970a:	4b13      	ldr	r3, [pc, #76]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f023 0219 	bic.w	r2, r3, #25
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	4910      	ldr	r1, [pc, #64]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009718:	4313      	orrs	r3, r2
 800971a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800971c:	f7fb ffa2 	bl	8005664 <HAL_GetTick>
 8009720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009722:	e008      	b.n	8009736 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009724:	f7fb ff9e 	bl	8005664 <HAL_GetTick>
 8009728:	4602      	mov	r2, r0
 800972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	2b02      	cmp	r3, #2
 8009730:	d901      	bls.n	8009736 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e2fd      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009736:	4b08      	ldr	r3, [pc, #32]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0304 	and.w	r3, r3, #4
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0f0      	beq.n	8009724 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009742:	4b05      	ldr	r3, [pc, #20]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	061b      	lsls	r3, r3, #24
 8009750:	4901      	ldr	r1, [pc, #4]	@ (8009758 <HAL_RCC_OscConfig+0x278>)
 8009752:	4313      	orrs	r3, r2
 8009754:	604b      	str	r3, [r1, #4]
 8009756:	e01a      	b.n	800978e <HAL_RCC_OscConfig+0x2ae>
 8009758:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800975c:	4b97      	ldr	r3, [pc, #604]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a96      	ldr	r2, [pc, #600]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009762:	f023 0301 	bic.w	r3, r3, #1
 8009766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009768:	f7fb ff7c 	bl	8005664 <HAL_GetTick>
 800976c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800976e:	e008      	b.n	8009782 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009770:	f7fb ff78 	bl	8005664 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b02      	cmp	r3, #2
 800977c:	d901      	bls.n	8009782 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e2d7      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009782:	4b8e      	ldr	r3, [pc, #568]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0304 	and.w	r3, r3, #4
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1f0      	bne.n	8009770 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0310 	and.w	r3, r3, #16
 8009796:	2b00      	cmp	r3, #0
 8009798:	d06a      	beq.n	8009870 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800979a:	4b88      	ldr	r3, [pc, #544]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097a4:	4b85      	ldr	r3, [pc, #532]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80097a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	d007      	beq.n	80097c0 <HAL_RCC_OscConfig+0x2e0>
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	2b18      	cmp	r3, #24
 80097b4:	d11b      	bne.n	80097ee <HAL_RCC_OscConfig+0x30e>
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	f003 0303 	and.w	r3, r3, #3
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d116      	bne.n	80097ee <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80097c0:	4b7e      	ldr	r3, [pc, #504]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d005      	beq.n	80097d8 <HAL_RCC_OscConfig+0x2f8>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	2b80      	cmp	r3, #128	@ 0x80
 80097d2:	d001      	beq.n	80097d8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e2ac      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80097d8:	4b78      	ldr	r3, [pc, #480]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	061b      	lsls	r3, r3, #24
 80097e6:	4975      	ldr	r1, [pc, #468]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80097e8:	4313      	orrs	r3, r2
 80097ea:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80097ec:	e040      	b.n	8009870 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d023      	beq.n	800983e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80097f6:	4b71      	ldr	r3, [pc, #452]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a70      	ldr	r2, [pc, #448]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80097fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009802:	f7fb ff2f 	bl	8005664 <HAL_GetTick>
 8009806:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009808:	e008      	b.n	800981c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800980a:	f7fb ff2b 	bl	8005664 <HAL_GetTick>
 800980e:	4602      	mov	r2, r0
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	2b02      	cmp	r3, #2
 8009816:	d901      	bls.n	800981c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e28a      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800981c:	4b67      	ldr	r3, [pc, #412]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0f0      	beq.n	800980a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009828:	4b64      	ldr	r3, [pc, #400]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	061b      	lsls	r3, r3, #24
 8009836:	4961      	ldr	r1, [pc, #388]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009838:	4313      	orrs	r3, r2
 800983a:	60cb      	str	r3, [r1, #12]
 800983c:	e018      	b.n	8009870 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800983e:	4b5f      	ldr	r3, [pc, #380]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a5e      	ldr	r2, [pc, #376]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800984a:	f7fb ff0b 	bl	8005664 <HAL_GetTick>
 800984e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009850:	e008      	b.n	8009864 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009852:	f7fb ff07 	bl	8005664 <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	2b02      	cmp	r3, #2
 800985e:	d901      	bls.n	8009864 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e266      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009864:	4b55      	ldr	r3, [pc, #340]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1f0      	bne.n	8009852 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0308 	and.w	r3, r3, #8
 8009878:	2b00      	cmp	r3, #0
 800987a:	d036      	beq.n	80098ea <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d019      	beq.n	80098b8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009884:	4b4d      	ldr	r3, [pc, #308]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009888:	4a4c      	ldr	r2, [pc, #304]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 800988a:	f043 0301 	orr.w	r3, r3, #1
 800988e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009890:	f7fb fee8 	bl	8005664 <HAL_GetTick>
 8009894:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009896:	e008      	b.n	80098aa <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009898:	f7fb fee4 	bl	8005664 <HAL_GetTick>
 800989c:	4602      	mov	r2, r0
 800989e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d901      	bls.n	80098aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e243      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80098aa:	4b44      	ldr	r3, [pc, #272]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80098ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098ae:	f003 0302 	and.w	r3, r3, #2
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0f0      	beq.n	8009898 <HAL_RCC_OscConfig+0x3b8>
 80098b6:	e018      	b.n	80098ea <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80098b8:	4b40      	ldr	r3, [pc, #256]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80098ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098bc:	4a3f      	ldr	r2, [pc, #252]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80098be:	f023 0301 	bic.w	r3, r3, #1
 80098c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098c4:	f7fb fece 	bl	8005664 <HAL_GetTick>
 80098c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80098ca:	e008      	b.n	80098de <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098cc:	f7fb feca 	bl	8005664 <HAL_GetTick>
 80098d0:	4602      	mov	r2, r0
 80098d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d901      	bls.n	80098de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	e229      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80098de:	4b37      	ldr	r3, [pc, #220]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80098e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098e2:	f003 0302 	and.w	r3, r3, #2
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1f0      	bne.n	80098cc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0320 	and.w	r3, r3, #32
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d036      	beq.n	8009964 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d019      	beq.n	8009932 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80098fe:	4b2f      	ldr	r3, [pc, #188]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a2e      	ldr	r2, [pc, #184]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009904:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009908:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800990a:	f7fb feab 	bl	8005664 <HAL_GetTick>
 800990e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009910:	e008      	b.n	8009924 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009912:	f7fb fea7 	bl	8005664 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	2b02      	cmp	r3, #2
 800991e:	d901      	bls.n	8009924 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e206      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009924:	4b25      	ldr	r3, [pc, #148]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0f0      	beq.n	8009912 <HAL_RCC_OscConfig+0x432>
 8009930:	e018      	b.n	8009964 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009932:	4b22      	ldr	r3, [pc, #136]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a21      	ldr	r2, [pc, #132]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 8009938:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800993c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800993e:	f7fb fe91 	bl	8005664 <HAL_GetTick>
 8009942:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009944:	e008      	b.n	8009958 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009946:	f7fb fe8d 	bl	8005664 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	2b02      	cmp	r3, #2
 8009952:	d901      	bls.n	8009958 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e1ec      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009958:	4b18      	ldr	r3, [pc, #96]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1f0      	bne.n	8009946 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 80af 	beq.w	8009ad0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009972:	4b13      	ldr	r3, [pc, #76]	@ (80099c0 <HAL_RCC_OscConfig+0x4e0>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a12      	ldr	r2, [pc, #72]	@ (80099c0 <HAL_RCC_OscConfig+0x4e0>)
 8009978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800997c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800997e:	f7fb fe71 	bl	8005664 <HAL_GetTick>
 8009982:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009984:	e008      	b.n	8009998 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009986:	f7fb fe6d 	bl	8005664 <HAL_GetTick>
 800998a:	4602      	mov	r2, r0
 800998c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	2b64      	cmp	r3, #100	@ 0x64
 8009992:	d901      	bls.n	8009998 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e1cc      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009998:	4b09      	ldr	r3, [pc, #36]	@ (80099c0 <HAL_RCC_OscConfig+0x4e0>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0f0      	beq.n	8009986 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d10b      	bne.n	80099c4 <HAL_RCC_OscConfig+0x4e4>
 80099ac:	4b03      	ldr	r3, [pc, #12]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80099ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099b0:	4a02      	ldr	r2, [pc, #8]	@ (80099bc <HAL_RCC_OscConfig+0x4dc>)
 80099b2:	f043 0301 	orr.w	r3, r3, #1
 80099b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80099b8:	e05b      	b.n	8009a72 <HAL_RCC_OscConfig+0x592>
 80099ba:	bf00      	nop
 80099bc:	58024400 	.word	0x58024400
 80099c0:	58024800 	.word	0x58024800
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d112      	bne.n	80099f2 <HAL_RCC_OscConfig+0x512>
 80099cc:	4b9d      	ldr	r3, [pc, #628]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 80099ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099d0:	4a9c      	ldr	r2, [pc, #624]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 80099d2:	f023 0301 	bic.w	r3, r3, #1
 80099d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80099d8:	4b9a      	ldr	r3, [pc, #616]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 80099da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099dc:	4a99      	ldr	r2, [pc, #612]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 80099de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80099e4:	4b97      	ldr	r3, [pc, #604]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 80099e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099e8:	4a96      	ldr	r2, [pc, #600]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 80099ea:	f023 0304 	bic.w	r3, r3, #4
 80099ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80099f0:	e03f      	b.n	8009a72 <HAL_RCC_OscConfig+0x592>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	2b05      	cmp	r3, #5
 80099f8:	d112      	bne.n	8009a20 <HAL_RCC_OscConfig+0x540>
 80099fa:	4b92      	ldr	r3, [pc, #584]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 80099fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099fe:	4a91      	ldr	r2, [pc, #580]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a00:	f043 0304 	orr.w	r3, r3, #4
 8009a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a06:	4b8f      	ldr	r3, [pc, #572]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a0a:	4a8e      	ldr	r2, [pc, #568]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a10:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a12:	4b8c      	ldr	r3, [pc, #560]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a16:	4a8b      	ldr	r2, [pc, #556]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a18:	f043 0301 	orr.w	r3, r3, #1
 8009a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a1e:	e028      	b.n	8009a72 <HAL_RCC_OscConfig+0x592>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	2b85      	cmp	r3, #133	@ 0x85
 8009a26:	d112      	bne.n	8009a4e <HAL_RCC_OscConfig+0x56e>
 8009a28:	4b86      	ldr	r3, [pc, #536]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a2c:	4a85      	ldr	r2, [pc, #532]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a2e:	f043 0304 	orr.w	r3, r3, #4
 8009a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a34:	4b83      	ldr	r3, [pc, #524]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a38:	4a82      	ldr	r2, [pc, #520]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a40:	4b80      	ldr	r3, [pc, #512]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a44:	4a7f      	ldr	r2, [pc, #508]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a46:	f043 0301 	orr.w	r3, r3, #1
 8009a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a4c:	e011      	b.n	8009a72 <HAL_RCC_OscConfig+0x592>
 8009a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a52:	4a7c      	ldr	r2, [pc, #496]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a54:	f023 0301 	bic.w	r3, r3, #1
 8009a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a5e:	4a79      	ldr	r2, [pc, #484]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a60:	f023 0304 	bic.w	r3, r3, #4
 8009a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a66:	4b77      	ldr	r3, [pc, #476]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a6a:	4a76      	ldr	r2, [pc, #472]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a70:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d015      	beq.n	8009aa6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a7a:	f7fb fdf3 	bl	8005664 <HAL_GetTick>
 8009a7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a80:	e00a      	b.n	8009a98 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a82:	f7fb fdef 	bl	8005664 <HAL_GetTick>
 8009a86:	4602      	mov	r2, r0
 8009a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d901      	bls.n	8009a98 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e14c      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a98:	4b6a      	ldr	r3, [pc, #424]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0ee      	beq.n	8009a82 <HAL_RCC_OscConfig+0x5a2>
 8009aa4:	e014      	b.n	8009ad0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aa6:	f7fb fddd 	bl	8005664 <HAL_GetTick>
 8009aaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009aac:	e00a      	b.n	8009ac4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aae:	f7fb fdd9 	bl	8005664 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d901      	bls.n	8009ac4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e136      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ac4:	4b5f      	ldr	r3, [pc, #380]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ac8:	f003 0302 	and.w	r3, r3, #2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1ee      	bne.n	8009aae <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 812b 	beq.w	8009d30 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009ada:	4b5a      	ldr	r3, [pc, #360]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ae2:	2b18      	cmp	r3, #24
 8009ae4:	f000 80bb 	beq.w	8009c5e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	f040 8095 	bne.w	8009c1c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009af2:	4b54      	ldr	r3, [pc, #336]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a53      	ldr	r2, [pc, #332]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009af8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009afe:	f7fb fdb1 	bl	8005664 <HAL_GetTick>
 8009b02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b04:	e008      	b.n	8009b18 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b06:	f7fb fdad 	bl	8005664 <HAL_GetTick>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d901      	bls.n	8009b18 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8009b14:	2303      	movs	r3, #3
 8009b16:	e10c      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009b18:	4b4a      	ldr	r3, [pc, #296]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1f0      	bne.n	8009b06 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009b24:	4b47      	ldr	r3, [pc, #284]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009b26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b28:	4b47      	ldr	r3, [pc, #284]	@ (8009c48 <HAL_RCC_OscConfig+0x768>)
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009b34:	0112      	lsls	r2, r2, #4
 8009b36:	430a      	orrs	r2, r1
 8009b38:	4942      	ldr	r1, [pc, #264]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	628b      	str	r3, [r1, #40]	@ 0x28
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b42:	3b01      	subs	r3, #1
 8009b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	025b      	lsls	r3, r3, #9
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	431a      	orrs	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	041b      	lsls	r3, r3, #16
 8009b5c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b60:	431a      	orrs	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b66:	3b01      	subs	r3, #1
 8009b68:	061b      	lsls	r3, r3, #24
 8009b6a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b6e:	4935      	ldr	r1, [pc, #212]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009b74:	4b33      	ldr	r3, [pc, #204]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b78:	4a32      	ldr	r2, [pc, #200]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009b7a:	f023 0301 	bic.w	r3, r3, #1
 8009b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009b80:	4b30      	ldr	r3, [pc, #192]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b84:	4b31      	ldr	r3, [pc, #196]	@ (8009c4c <HAL_RCC_OscConfig+0x76c>)
 8009b86:	4013      	ands	r3, r2
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009b8c:	00d2      	lsls	r2, r2, #3
 8009b8e:	492d      	ldr	r1, [pc, #180]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009b90:	4313      	orrs	r3, r2
 8009b92:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009b94:	4b2b      	ldr	r3, [pc, #172]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b98:	f023 020c 	bic.w	r2, r3, #12
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ba0:	4928      	ldr	r1, [pc, #160]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ba6:	4b27      	ldr	r3, [pc, #156]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009baa:	f023 0202 	bic.w	r2, r3, #2
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bb2:	4924      	ldr	r1, [pc, #144]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009bb8:	4b22      	ldr	r3, [pc, #136]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbc:	4a21      	ldr	r2, [pc, #132]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009bd6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009bdc:	4b19      	ldr	r3, [pc, #100]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be0:	4a18      	ldr	r2, [pc, #96]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009be2:	f043 0301 	orr.w	r3, r3, #1
 8009be6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009be8:	4b16      	ldr	r3, [pc, #88]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a15      	ldr	r2, [pc, #84]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bf4:	f7fb fd36 	bl	8005664 <HAL_GetTick>
 8009bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009bfa:	e008      	b.n	8009c0e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bfc:	f7fb fd32 	bl	8005664 <HAL_GetTick>
 8009c00:	4602      	mov	r2, r0
 8009c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d901      	bls.n	8009c0e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e091      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0f0      	beq.n	8009bfc <HAL_RCC_OscConfig+0x71c>
 8009c1a:	e089      	b.n	8009d30 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c1c:	4b09      	ldr	r3, [pc, #36]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a08      	ldr	r2, [pc, #32]	@ (8009c44 <HAL_RCC_OscConfig+0x764>)
 8009c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c28:	f7fb fd1c 	bl	8005664 <HAL_GetTick>
 8009c2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c2e:	e00f      	b.n	8009c50 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c30:	f7fb fd18 	bl	8005664 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d908      	bls.n	8009c50 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e077      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
 8009c42:	bf00      	nop
 8009c44:	58024400 	.word	0x58024400
 8009c48:	fffffc0c 	.word	0xfffffc0c
 8009c4c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009c50:	4b3a      	ldr	r3, [pc, #232]	@ (8009d3c <HAL_RCC_OscConfig+0x85c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e9      	bne.n	8009c30 <HAL_RCC_OscConfig+0x750>
 8009c5c:	e068      	b.n	8009d30 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009c5e:	4b37      	ldr	r3, [pc, #220]	@ (8009d3c <HAL_RCC_OscConfig+0x85c>)
 8009c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c62:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009c64:	4b35      	ldr	r3, [pc, #212]	@ (8009d3c <HAL_RCC_OscConfig+0x85c>)
 8009c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c68:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d031      	beq.n	8009cd6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f003 0203 	and.w	r2, r3, #3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d12a      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	091b      	lsrs	r3, r3, #4
 8009c84:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d122      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d11a      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	0a5b      	lsrs	r3, r3, #9
 8009ca4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d111      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	0c1b      	lsrs	r3, r3, #16
 8009cb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d108      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	0e1b      	lsrs	r3, r3, #24
 8009cc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d001      	beq.n	8009cda <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e02b      	b.n	8009d32 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009cda:	4b18      	ldr	r3, [pc, #96]	@ (8009d3c <HAL_RCC_OscConfig+0x85c>)
 8009cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cde:	08db      	lsrs	r3, r3, #3
 8009ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ce4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d01f      	beq.n	8009d30 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009cf0:	4b12      	ldr	r3, [pc, #72]	@ (8009d3c <HAL_RCC_OscConfig+0x85c>)
 8009cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf4:	4a11      	ldr	r2, [pc, #68]	@ (8009d3c <HAL_RCC_OscConfig+0x85c>)
 8009cf6:	f023 0301 	bic.w	r3, r3, #1
 8009cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009cfc:	f7fb fcb2 	bl	8005664 <HAL_GetTick>
 8009d00:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009d02:	bf00      	nop
 8009d04:	f7fb fcae 	bl	8005664 <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d0f9      	beq.n	8009d04 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d10:	4b0a      	ldr	r3, [pc, #40]	@ (8009d3c <HAL_RCC_OscConfig+0x85c>)
 8009d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d14:	4b0a      	ldr	r3, [pc, #40]	@ (8009d40 <HAL_RCC_OscConfig+0x860>)
 8009d16:	4013      	ands	r3, r2
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009d1c:	00d2      	lsls	r2, r2, #3
 8009d1e:	4907      	ldr	r1, [pc, #28]	@ (8009d3c <HAL_RCC_OscConfig+0x85c>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009d24:	4b05      	ldr	r3, [pc, #20]	@ (8009d3c <HAL_RCC_OscConfig+0x85c>)
 8009d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d28:	4a04      	ldr	r2, [pc, #16]	@ (8009d3c <HAL_RCC_OscConfig+0x85c>)
 8009d2a:	f043 0301 	orr.w	r3, r3, #1
 8009d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3730      	adds	r7, #48	@ 0x30
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	58024400 	.word	0x58024400
 8009d40:	ffff0007 	.word	0xffff0007

08009d44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e19c      	b.n	800a092 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d58:	4b8a      	ldr	r3, [pc, #552]	@ (8009f84 <HAL_RCC_ClockConfig+0x240>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 030f 	and.w	r3, r3, #15
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d910      	bls.n	8009d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d66:	4b87      	ldr	r3, [pc, #540]	@ (8009f84 <HAL_RCC_ClockConfig+0x240>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f023 020f 	bic.w	r2, r3, #15
 8009d6e:	4985      	ldr	r1, [pc, #532]	@ (8009f84 <HAL_RCC_ClockConfig+0x240>)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d76:	4b83      	ldr	r3, [pc, #524]	@ (8009f84 <HAL_RCC_ClockConfig+0x240>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 030f 	and.w	r3, r3, #15
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d001      	beq.n	8009d88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e184      	b.n	800a092 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d010      	beq.n	8009db6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	691a      	ldr	r2, [r3, #16]
 8009d98:	4b7b      	ldr	r3, [pc, #492]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d908      	bls.n	8009db6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009da4:	4b78      	ldr	r3, [pc, #480]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	4975      	ldr	r1, [pc, #468]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 0308 	and.w	r3, r3, #8
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d010      	beq.n	8009de4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	695a      	ldr	r2, [r3, #20]
 8009dc6:	4b70      	ldr	r3, [pc, #448]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d908      	bls.n	8009de4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	496a      	ldr	r1, [pc, #424]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009de0:	4313      	orrs	r3, r2
 8009de2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 0310 	and.w	r3, r3, #16
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d010      	beq.n	8009e12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	699a      	ldr	r2, [r3, #24]
 8009df4:	4b64      	ldr	r3, [pc, #400]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009df6:	69db      	ldr	r3, [r3, #28]
 8009df8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d908      	bls.n	8009e12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e00:	4b61      	ldr	r3, [pc, #388]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009e02:	69db      	ldr	r3, [r3, #28]
 8009e04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	495e      	ldr	r1, [pc, #376]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0320 	and.w	r3, r3, #32
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d010      	beq.n	8009e40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	69da      	ldr	r2, [r3, #28]
 8009e22:	4b59      	ldr	r3, [pc, #356]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d908      	bls.n	8009e40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009e2e:	4b56      	ldr	r3, [pc, #344]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	4953      	ldr	r1, [pc, #332]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0302 	and.w	r3, r3, #2
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d010      	beq.n	8009e6e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	4b4d      	ldr	r3, [pc, #308]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	f003 030f 	and.w	r3, r3, #15
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d908      	bls.n	8009e6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e5c:	4b4a      	ldr	r3, [pc, #296]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	f023 020f 	bic.w	r2, r3, #15
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	4947      	ldr	r1, [pc, #284]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d055      	beq.n	8009f26 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009e7a:	4b43      	ldr	r3, [pc, #268]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	4940      	ldr	r1, [pc, #256]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d107      	bne.n	8009ea4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e94:	4b3c      	ldr	r3, [pc, #240]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d121      	bne.n	8009ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e0f6      	b.n	800a092 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d107      	bne.n	8009ebc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009eac:	4b36      	ldr	r3, [pc, #216]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d115      	bne.n	8009ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e0ea      	b.n	800a092 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d107      	bne.n	8009ed4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ec4:	4b30      	ldr	r3, [pc, #192]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d109      	bne.n	8009ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e0de      	b.n	800a092 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e0d6      	b.n	800a092 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ee4:	4b28      	ldr	r3, [pc, #160]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	f023 0207 	bic.w	r2, r3, #7
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	4925      	ldr	r1, [pc, #148]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ef6:	f7fb fbb5 	bl	8005664 <HAL_GetTick>
 8009efa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009efc:	e00a      	b.n	8009f14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009efe:	f7fb fbb1 	bl	8005664 <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d901      	bls.n	8009f14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e0be      	b.n	800a092 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f14:	4b1c      	ldr	r3, [pc, #112]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d1eb      	bne.n	8009efe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d010      	beq.n	8009f54 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68da      	ldr	r2, [r3, #12]
 8009f36:	4b14      	ldr	r3, [pc, #80]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	f003 030f 	and.w	r3, r3, #15
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d208      	bcs.n	8009f54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f42:	4b11      	ldr	r3, [pc, #68]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	f023 020f 	bic.w	r2, r3, #15
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	490e      	ldr	r1, [pc, #56]	@ (8009f88 <HAL_RCC_ClockConfig+0x244>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f54:	4b0b      	ldr	r3, [pc, #44]	@ (8009f84 <HAL_RCC_ClockConfig+0x240>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 030f 	and.w	r3, r3, #15
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d214      	bcs.n	8009f8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f62:	4b08      	ldr	r3, [pc, #32]	@ (8009f84 <HAL_RCC_ClockConfig+0x240>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f023 020f 	bic.w	r2, r3, #15
 8009f6a:	4906      	ldr	r1, [pc, #24]	@ (8009f84 <HAL_RCC_ClockConfig+0x240>)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f72:	4b04      	ldr	r3, [pc, #16]	@ (8009f84 <HAL_RCC_ClockConfig+0x240>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 030f 	and.w	r3, r3, #15
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d005      	beq.n	8009f8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e086      	b.n	800a092 <HAL_RCC_ClockConfig+0x34e>
 8009f84:	52002000 	.word	0x52002000
 8009f88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 0304 	and.w	r3, r3, #4
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d010      	beq.n	8009fba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691a      	ldr	r2, [r3, #16]
 8009f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d208      	bcs.n	8009fba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fa8:	4b3c      	ldr	r3, [pc, #240]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	4939      	ldr	r1, [pc, #228]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 0308 	and.w	r3, r3, #8
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d010      	beq.n	8009fe8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	695a      	ldr	r2, [r3, #20]
 8009fca:	4b34      	ldr	r3, [pc, #208]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d208      	bcs.n	8009fe8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fd6:	4b31      	ldr	r3, [pc, #196]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	492e      	ldr	r1, [pc, #184]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0310 	and.w	r3, r3, #16
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d010      	beq.n	800a016 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	699a      	ldr	r2, [r3, #24]
 8009ff8:	4b28      	ldr	r3, [pc, #160]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a000:	429a      	cmp	r2, r3
 800a002:	d208      	bcs.n	800a016 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a004:	4b25      	ldr	r3, [pc, #148]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	4922      	ldr	r1, [pc, #136]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 800a012:	4313      	orrs	r3, r2
 800a014:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 0320 	and.w	r3, r3, #32
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d010      	beq.n	800a044 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	69da      	ldr	r2, [r3, #28]
 800a026:	4b1d      	ldr	r3, [pc, #116]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a02e:	429a      	cmp	r2, r3
 800a030:	d208      	bcs.n	800a044 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a032:	4b1a      	ldr	r3, [pc, #104]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	4917      	ldr	r1, [pc, #92]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 800a040:	4313      	orrs	r3, r2
 800a042:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a044:	f000 f834 	bl	800a0b0 <HAL_RCC_GetSysClockFreq>
 800a048:	4602      	mov	r2, r0
 800a04a:	4b14      	ldr	r3, [pc, #80]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	0a1b      	lsrs	r3, r3, #8
 800a050:	f003 030f 	and.w	r3, r3, #15
 800a054:	4912      	ldr	r1, [pc, #72]	@ (800a0a0 <HAL_RCC_ClockConfig+0x35c>)
 800a056:	5ccb      	ldrb	r3, [r1, r3]
 800a058:	f003 031f 	and.w	r3, r3, #31
 800a05c:	fa22 f303 	lsr.w	r3, r2, r3
 800a060:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a062:	4b0e      	ldr	r3, [pc, #56]	@ (800a09c <HAL_RCC_ClockConfig+0x358>)
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	f003 030f 	and.w	r3, r3, #15
 800a06a:	4a0d      	ldr	r2, [pc, #52]	@ (800a0a0 <HAL_RCC_ClockConfig+0x35c>)
 800a06c:	5cd3      	ldrb	r3, [r2, r3]
 800a06e:	f003 031f 	and.w	r3, r3, #31
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	fa22 f303 	lsr.w	r3, r2, r3
 800a078:	4a0a      	ldr	r2, [pc, #40]	@ (800a0a4 <HAL_RCC_ClockConfig+0x360>)
 800a07a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a07c:	4a0a      	ldr	r2, [pc, #40]	@ (800a0a8 <HAL_RCC_ClockConfig+0x364>)
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a082:	4b0a      	ldr	r3, [pc, #40]	@ (800a0ac <HAL_RCC_ClockConfig+0x368>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4618      	mov	r0, r3
 800a088:	f7fb faa2 	bl	80055d0 <HAL_InitTick>
 800a08c:	4603      	mov	r3, r0
 800a08e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a090:	7bfb      	ldrb	r3, [r7, #15]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3718      	adds	r7, #24
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	58024400 	.word	0x58024400
 800a0a0:	0801882c 	.word	0x0801882c
 800a0a4:	240000c4 	.word	0x240000c4
 800a0a8:	240000c0 	.word	0x240000c0
 800a0ac:	240000c8 	.word	0x240000c8

0800a0b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b089      	sub	sp, #36	@ 0x24
 800a0b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0b6:	4bb3      	ldr	r3, [pc, #716]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0be:	2b18      	cmp	r3, #24
 800a0c0:	f200 8155 	bhi.w	800a36e <HAL_RCC_GetSysClockFreq+0x2be>
 800a0c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a0cc <HAL_RCC_GetSysClockFreq+0x1c>)
 800a0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ca:	bf00      	nop
 800a0cc:	0800a131 	.word	0x0800a131
 800a0d0:	0800a36f 	.word	0x0800a36f
 800a0d4:	0800a36f 	.word	0x0800a36f
 800a0d8:	0800a36f 	.word	0x0800a36f
 800a0dc:	0800a36f 	.word	0x0800a36f
 800a0e0:	0800a36f 	.word	0x0800a36f
 800a0e4:	0800a36f 	.word	0x0800a36f
 800a0e8:	0800a36f 	.word	0x0800a36f
 800a0ec:	0800a157 	.word	0x0800a157
 800a0f0:	0800a36f 	.word	0x0800a36f
 800a0f4:	0800a36f 	.word	0x0800a36f
 800a0f8:	0800a36f 	.word	0x0800a36f
 800a0fc:	0800a36f 	.word	0x0800a36f
 800a100:	0800a36f 	.word	0x0800a36f
 800a104:	0800a36f 	.word	0x0800a36f
 800a108:	0800a36f 	.word	0x0800a36f
 800a10c:	0800a15d 	.word	0x0800a15d
 800a110:	0800a36f 	.word	0x0800a36f
 800a114:	0800a36f 	.word	0x0800a36f
 800a118:	0800a36f 	.word	0x0800a36f
 800a11c:	0800a36f 	.word	0x0800a36f
 800a120:	0800a36f 	.word	0x0800a36f
 800a124:	0800a36f 	.word	0x0800a36f
 800a128:	0800a36f 	.word	0x0800a36f
 800a12c:	0800a163 	.word	0x0800a163
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a130:	4b94      	ldr	r3, [pc, #592]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0320 	and.w	r3, r3, #32
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d009      	beq.n	800a150 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a13c:	4b91      	ldr	r3, [pc, #580]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	08db      	lsrs	r3, r3, #3
 800a142:	f003 0303 	and.w	r3, r3, #3
 800a146:	4a90      	ldr	r2, [pc, #576]	@ (800a388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a148:	fa22 f303 	lsr.w	r3, r2, r3
 800a14c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a14e:	e111      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a150:	4b8d      	ldr	r3, [pc, #564]	@ (800a388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a152:	61bb      	str	r3, [r7, #24]
      break;
 800a154:	e10e      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a156:	4b8d      	ldr	r3, [pc, #564]	@ (800a38c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a158:	61bb      	str	r3, [r7, #24]
      break;
 800a15a:	e10b      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a15c:	4b8c      	ldr	r3, [pc, #560]	@ (800a390 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a15e:	61bb      	str	r3, [r7, #24]
      break;
 800a160:	e108      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a162:	4b88      	ldr	r3, [pc, #544]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a166:	f003 0303 	and.w	r3, r3, #3
 800a16a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a16c:	4b85      	ldr	r3, [pc, #532]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a16e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a170:	091b      	lsrs	r3, r3, #4
 800a172:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a176:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a178:	4b82      	ldr	r3, [pc, #520]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a182:	4b80      	ldr	r3, [pc, #512]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a186:	08db      	lsrs	r3, r3, #3
 800a188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	fb02 f303 	mul.w	r3, r2, r3
 800a192:	ee07 3a90 	vmov	s15, r3
 800a196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 80e1 	beq.w	800a368 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	f000 8083 	beq.w	800a2b4 <HAL_RCC_GetSysClockFreq+0x204>
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	f200 80a1 	bhi.w	800a2f8 <HAL_RCC_GetSysClockFreq+0x248>
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <HAL_RCC_GetSysClockFreq+0x114>
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d056      	beq.n	800a270 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a1c2:	e099      	b.n	800a2f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1c4:	4b6f      	ldr	r3, [pc, #444]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0320 	and.w	r3, r3, #32
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d02d      	beq.n	800a22c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1d0:	4b6c      	ldr	r3, [pc, #432]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	08db      	lsrs	r3, r3, #3
 800a1d6:	f003 0303 	and.w	r3, r3, #3
 800a1da:	4a6b      	ldr	r2, [pc, #428]	@ (800a388 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a1dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	ee07 3a90 	vmov	s15, r3
 800a1e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1fa:	4b62      	ldr	r3, [pc, #392]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a1fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a202:	ee07 3a90 	vmov	s15, r3
 800a206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a20a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a20e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a21a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a21e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a222:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a226:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a22a:	e087      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	ee07 3a90 	vmov	s15, r3
 800a232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a236:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a398 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a23e:	4b51      	ldr	r3, [pc, #324]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a246:	ee07 3a90 	vmov	s15, r3
 800a24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a24e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a252:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a25e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a26a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a26e:	e065      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	ee07 3a90 	vmov	s15, r3
 800a276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a39c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a282:	4b40      	ldr	r3, [pc, #256]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a28a:	ee07 3a90 	vmov	s15, r3
 800a28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a292:	ed97 6a02 	vldr	s12, [r7, #8]
 800a296:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2b2:	e043      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a3a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c6:	4b2f      	ldr	r3, [pc, #188]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ce:	ee07 3a90 	vmov	s15, r3
 800a2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a2f6:	e021      	b.n	800a33c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	ee07 3a90 	vmov	s15, r3
 800a2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a302:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a39c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a30a:	4b1e      	ldr	r3, [pc, #120]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a30c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a312:	ee07 3a90 	vmov	s15, r3
 800a316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a31a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a31e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a394 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a32a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a336:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a33a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a33c:	4b11      	ldr	r3, [pc, #68]	@ (800a384 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a33e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a340:	0a5b      	lsrs	r3, r3, #9
 800a342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a346:	3301      	adds	r3, #1
 800a348:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	ee07 3a90 	vmov	s15, r3
 800a350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a354:	edd7 6a07 	vldr	s13, [r7, #28]
 800a358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a360:	ee17 3a90 	vmov	r3, s15
 800a364:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a366:	e005      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	61bb      	str	r3, [r7, #24]
      break;
 800a36c:	e002      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a36e:	4b07      	ldr	r3, [pc, #28]	@ (800a38c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a370:	61bb      	str	r3, [r7, #24]
      break;
 800a372:	bf00      	nop
  }

  return sysclockfreq;
 800a374:	69bb      	ldr	r3, [r7, #24]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3724      	adds	r7, #36	@ 0x24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	58024400 	.word	0x58024400
 800a388:	03d09000 	.word	0x03d09000
 800a38c:	003d0900 	.word	0x003d0900
 800a390:	016e3600 	.word	0x016e3600
 800a394:	46000000 	.word	0x46000000
 800a398:	4c742400 	.word	0x4c742400
 800a39c:	4a742400 	.word	0x4a742400
 800a3a0:	4bb71b00 	.word	0x4bb71b00

0800a3a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800a3aa:	f7ff fe81 	bl	800a0b0 <HAL_RCC_GetSysClockFreq>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	4b10      	ldr	r3, [pc, #64]	@ (800a3f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	0a1b      	lsrs	r3, r3, #8
 800a3b6:	f003 030f 	and.w	r3, r3, #15
 800a3ba:	490f      	ldr	r1, [pc, #60]	@ (800a3f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a3bc:	5ccb      	ldrb	r3, [r1, r3]
 800a3be:	f003 031f 	and.w	r3, r3, #31
 800a3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a3f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a3ca:	699b      	ldr	r3, [r3, #24]
 800a3cc:	f003 030f 	and.w	r3, r3, #15
 800a3d0:	4a09      	ldr	r2, [pc, #36]	@ (800a3f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a3d2:	5cd3      	ldrb	r3, [r2, r3]
 800a3d4:	f003 031f 	and.w	r3, r3, #31
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	fa22 f303 	lsr.w	r3, r2, r3
 800a3de:	4a07      	ldr	r2, [pc, #28]	@ (800a3fc <HAL_RCC_GetHCLKFreq+0x58>)
 800a3e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3e2:	4a07      	ldr	r2, [pc, #28]	@ (800a400 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a3e8:	4b04      	ldr	r3, [pc, #16]	@ (800a3fc <HAL_RCC_GetHCLKFreq+0x58>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	58024400 	.word	0x58024400
 800a3f8:	0801882c 	.word	0x0801882c
 800a3fc:	240000c4 	.word	0x240000c4
 800a400:	240000c0 	.word	0x240000c0

0800a404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800a408:	f7ff ffcc 	bl	800a3a4 <HAL_RCC_GetHCLKFreq>
 800a40c:	4602      	mov	r2, r0
 800a40e:	4b06      	ldr	r3, [pc, #24]	@ (800a428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	091b      	lsrs	r3, r3, #4
 800a414:	f003 0307 	and.w	r3, r3, #7
 800a418:	4904      	ldr	r1, [pc, #16]	@ (800a42c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a41a:	5ccb      	ldrb	r3, [r1, r3]
 800a41c:	f003 031f 	and.w	r3, r3, #31
 800a420:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a424:	4618      	mov	r0, r3
 800a426:	bd80      	pop	{r7, pc}
 800a428:	58024400 	.word	0x58024400
 800a42c:	0801882c 	.word	0x0801882c

0800a430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800a434:	f7ff ffb6 	bl	800a3a4 <HAL_RCC_GetHCLKFreq>
 800a438:	4602      	mov	r2, r0
 800a43a:	4b06      	ldr	r3, [pc, #24]	@ (800a454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	0a1b      	lsrs	r3, r3, #8
 800a440:	f003 0307 	and.w	r3, r3, #7
 800a444:	4904      	ldr	r1, [pc, #16]	@ (800a458 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a446:	5ccb      	ldrb	r3, [r1, r3]
 800a448:	f003 031f 	and.w	r3, r3, #31
 800a44c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a450:	4618      	mov	r0, r3
 800a452:	bd80      	pop	{r7, pc}
 800a454:	58024400 	.word	0x58024400
 800a458:	0801882c 	.word	0x0801882c

0800a45c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a45c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a460:	b0c8      	sub	sp, #288	@ 0x120
 800a462:	af00      	add	r7, sp, #0
 800a464:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a468:	2300      	movs	r3, #0
 800a46a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a46e:	2300      	movs	r3, #0
 800a470:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a480:	2500      	movs	r5, #0
 800a482:	ea54 0305 	orrs.w	r3, r4, r5
 800a486:	d049      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a48c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a48e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a492:	d02f      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a494:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a498:	d828      	bhi.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a49a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a49e:	d01a      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a4a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4a4:	d822      	bhi.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a4aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4ae:	d007      	beq.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a4b0:	e01c      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4b2:	4ba7      	ldr	r3, [pc, #668]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b6:	4aa6      	ldr	r2, [pc, #664]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a4b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a4be:	e01a      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	2102      	movs	r1, #2
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f001 fc43 	bl	800bd54 <RCCEx_PLL2_Config>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a4d4:	e00f      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4da:	3328      	adds	r3, #40	@ 0x28
 800a4dc:	2102      	movs	r1, #2
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f001 fcea 	bl	800beb8 <RCCEx_PLL3_Config>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a4ea:	e004      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a4f2:	e000      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a4f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10a      	bne.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a4fe:	4b94      	ldr	r3, [pc, #592]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a502:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a50c:	4a90      	ldr	r2, [pc, #576]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a50e:	430b      	orrs	r3, r1
 800a510:	6513      	str	r3, [r2, #80]	@ 0x50
 800a512:	e003      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a514:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a518:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a51c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a528:	f04f 0900 	mov.w	r9, #0
 800a52c:	ea58 0309 	orrs.w	r3, r8, r9
 800a530:	d047      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d82a      	bhi.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a53c:	a201      	add	r2, pc, #4	@ (adr r2, 800a544 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a542:	bf00      	nop
 800a544:	0800a559 	.word	0x0800a559
 800a548:	0800a567 	.word	0x0800a567
 800a54c:	0800a57d 	.word	0x0800a57d
 800a550:	0800a59b 	.word	0x0800a59b
 800a554:	0800a59b 	.word	0x0800a59b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a558:	4b7d      	ldr	r3, [pc, #500]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55c:	4a7c      	ldr	r2, [pc, #496]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a55e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a564:	e01a      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a56a:	3308      	adds	r3, #8
 800a56c:	2100      	movs	r1, #0
 800a56e:	4618      	mov	r0, r3
 800a570:	f001 fbf0 	bl	800bd54 <RCCEx_PLL2_Config>
 800a574:	4603      	mov	r3, r0
 800a576:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a57a:	e00f      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a57c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a580:	3328      	adds	r3, #40	@ 0x28
 800a582:	2100      	movs	r1, #0
 800a584:	4618      	mov	r0, r3
 800a586:	f001 fc97 	bl	800beb8 <RCCEx_PLL3_Config>
 800a58a:	4603      	mov	r3, r0
 800a58c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a590:	e004      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a598:	e000      	b.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a59a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a59c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10a      	bne.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a5a4:	4b6a      	ldr	r3, [pc, #424]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5a8:	f023 0107 	bic.w	r1, r3, #7
 800a5ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5b2:	4a67      	ldr	r2, [pc, #412]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a5b4:	430b      	orrs	r3, r1
 800a5b6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a5b8:	e003      	b.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a5be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800a5c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800a5ce:	f04f 0b00 	mov.w	fp, #0
 800a5d2:	ea5a 030b 	orrs.w	r3, sl, fp
 800a5d6:	d054      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800a5d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5de:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a5e2:	d036      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800a5e4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a5e8:	d82f      	bhi.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a5ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ee:	d032      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a5f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5f4:	d829      	bhi.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a5f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5f8:	d02f      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a5fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5fc:	d825      	bhi.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a5fe:	2b80      	cmp	r3, #128	@ 0x80
 800a600:	d018      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800a602:	2b80      	cmp	r3, #128	@ 0x80
 800a604:	d821      	bhi.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a60a:	2b40      	cmp	r3, #64	@ 0x40
 800a60c:	d007      	beq.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800a60e:	e01c      	b.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a610:	4b4f      	ldr	r3, [pc, #316]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a614:	4a4e      	ldr	r2, [pc, #312]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a61a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a61c:	e01e      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a61e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a622:	3308      	adds	r3, #8
 800a624:	2100      	movs	r1, #0
 800a626:	4618      	mov	r0, r3
 800a628:	f001 fb94 	bl	800bd54 <RCCEx_PLL2_Config>
 800a62c:	4603      	mov	r3, r0
 800a62e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a632:	e013      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a638:	3328      	adds	r3, #40	@ 0x28
 800a63a:	2100      	movs	r1, #0
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 fc3b 	bl	800beb8 <RCCEx_PLL3_Config>
 800a642:	4603      	mov	r3, r0
 800a644:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800a648:	e008      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a650:	e004      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a652:	bf00      	nop
 800a654:	e002      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a656:	bf00      	nop
 800a658:	e000      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800a65a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a65c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800a664:	4b3a      	ldr	r3, [pc, #232]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a668:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a672:	4a37      	ldr	r2, [pc, #220]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a674:	430b      	orrs	r3, r1
 800a676:	6513      	str	r3, [r2, #80]	@ 0x50
 800a678:	e003      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a67a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a67e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800a682:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a68e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a692:	2300      	movs	r3, #0
 800a694:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a698:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a69c:	460b      	mov	r3, r1
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	d05c      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800a6a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6a8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a6ac:	d03b      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a6ae:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a6b2:	d834      	bhi.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a6b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6b8:	d037      	beq.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800a6ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6be:	d82e      	bhi.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a6c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a6c4:	d033      	beq.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a6c6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a6ca:	d828      	bhi.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a6cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6d0:	d01a      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800a6d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6d6:	d822      	bhi.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800a6dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6e0:	d007      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a6e2:	e01c      	b.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e8:	4a19      	ldr	r2, [pc, #100]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a6ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a6f0:	e01e      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f001 fb2a 	bl	800bd54 <RCCEx_PLL2_Config>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a706:	e013      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a70c:	3328      	adds	r3, #40	@ 0x28
 800a70e:	2100      	movs	r1, #0
 800a710:	4618      	mov	r0, r3
 800a712:	f001 fbd1 	bl	800beb8 <RCCEx_PLL3_Config>
 800a716:	4603      	mov	r3, r0
 800a718:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800a71c:	e008      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a724:	e004      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a726:	bf00      	nop
 800a728:	e002      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a72a:	bf00      	nop
 800a72c:	e000      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800a72e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a730:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10d      	bne.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800a738:	4b05      	ldr	r3, [pc, #20]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a73a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a73c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a746:	4a02      	ldr	r2, [pc, #8]	@ (800a750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a748:	430b      	orrs	r3, r1
 800a74a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a74c:	e006      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800a74e:	bf00      	nop
 800a750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a754:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a758:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a75c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a768:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a76c:	2300      	movs	r3, #0
 800a76e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a772:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a776:	460b      	mov	r3, r1
 800a778:	4313      	orrs	r3, r2
 800a77a:	d03a      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a77c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a782:	2b30      	cmp	r3, #48	@ 0x30
 800a784:	d01f      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a786:	2b30      	cmp	r3, #48	@ 0x30
 800a788:	d819      	bhi.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a78a:	2b20      	cmp	r3, #32
 800a78c:	d00c      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a78e:	2b20      	cmp	r3, #32
 800a790:	d815      	bhi.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d019      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a796:	2b10      	cmp	r3, #16
 800a798:	d111      	bne.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a79a:	4bae      	ldr	r3, [pc, #696]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79e:	4aad      	ldr	r2, [pc, #692]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a7a6:	e011      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	2102      	movs	r1, #2
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f001 facf 	bl	800bd54 <RCCEx_PLL2_Config>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a7bc:	e006      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a7c4:	e002      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a7c6:	bf00      	nop
 800a7c8:	e000      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a7ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10a      	bne.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a7d4:	4b9f      	ldr	r3, [pc, #636]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a7dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7e2:	4a9c      	ldr	r2, [pc, #624]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a7e8:	e003      	b.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a7f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a7fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a802:	2300      	movs	r3, #0
 800a804:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a808:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4313      	orrs	r3, r2
 800a810:	d051      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a818:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a81c:	d035      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a81e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a822:	d82e      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a824:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a828:	d031      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a82a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a82e:	d828      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a834:	d01a      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a83a:	d822      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d003      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a844:	d007      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a846:	e01c      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a848:	4b82      	ldr	r3, [pc, #520]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a84c:	4a81      	ldr	r2, [pc, #516]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a84e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a854:	e01c      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a85a:	3308      	adds	r3, #8
 800a85c:	2100      	movs	r1, #0
 800a85e:	4618      	mov	r0, r3
 800a860:	f001 fa78 	bl	800bd54 <RCCEx_PLL2_Config>
 800a864:	4603      	mov	r3, r0
 800a866:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a86a:	e011      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a86c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a870:	3328      	adds	r3, #40	@ 0x28
 800a872:	2100      	movs	r1, #0
 800a874:	4618      	mov	r0, r3
 800a876:	f001 fb1f 	bl	800beb8 <RCCEx_PLL3_Config>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a880:	e006      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a888:	e002      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a88a:	bf00      	nop
 800a88c:	e000      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a88e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a890:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a898:	4b6e      	ldr	r3, [pc, #440]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a89a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a89c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a8a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8a6:	4a6b      	ldr	r2, [pc, #428]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	6513      	str	r3, [r2, #80]	@ 0x50
 800a8ac:	e003      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a8b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a8c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a8cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	d053      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a8d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a8e0:	d033      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800a8e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a8e6:	d82c      	bhi.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a8e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a8ec:	d02f      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800a8ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a8f2:	d826      	bhi.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a8f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a8f8:	d02b      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a8fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a8fe:	d820      	bhi.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a904:	d012      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800a906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a90a:	d81a      	bhi.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d022      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800a910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a914:	d115      	bne.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a91a:	3308      	adds	r3, #8
 800a91c:	2101      	movs	r1, #1
 800a91e:	4618      	mov	r0, r3
 800a920:	f001 fa18 	bl	800bd54 <RCCEx_PLL2_Config>
 800a924:	4603      	mov	r3, r0
 800a926:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a92a:	e015      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a92c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a930:	3328      	adds	r3, #40	@ 0x28
 800a932:	2101      	movs	r1, #1
 800a934:	4618      	mov	r0, r3
 800a936:	f001 fabf 	bl	800beb8 <RCCEx_PLL3_Config>
 800a93a:	4603      	mov	r3, r0
 800a93c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a940:	e00a      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a948:	e006      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a94a:	bf00      	nop
 800a94c:	e004      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a94e:	bf00      	nop
 800a950:	e002      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a952:	bf00      	nop
 800a954:	e000      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a956:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a958:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10a      	bne.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a960:	4b3c      	ldr	r3, [pc, #240]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a964:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a96c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a96e:	4a39      	ldr	r2, [pc, #228]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a970:	430b      	orrs	r3, r1
 800a972:	6513      	str	r3, [r2, #80]	@ 0x50
 800a974:	e003      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a976:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a97a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a97e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a98a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a98e:	2300      	movs	r3, #0
 800a990:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a994:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a998:	460b      	mov	r3, r1
 800a99a:	4313      	orrs	r3, r2
 800a99c:	d060      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a99e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a9a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a9aa:	d039      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a9ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a9b0:	d832      	bhi.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a9b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9b6:	d035      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a9b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9bc:	d82c      	bhi.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a9be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9c2:	d031      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a9c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9c8:	d826      	bhi.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a9ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9ce:	d02d      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a9d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9d4:	d820      	bhi.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a9d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9da:	d012      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a9dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9e0:	d81a      	bhi.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d024      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a9e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9ea:	d115      	bne.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9f0:	3308      	adds	r3, #8
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f001 f9ad 	bl	800bd54 <RCCEx_PLL2_Config>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa00:	e017      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa06:	3328      	adds	r3, #40	@ 0x28
 800aa08:	2101      	movs	r1, #1
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f001 fa54 	bl	800beb8 <RCCEx_PLL3_Config>
 800aa10:	4603      	mov	r3, r0
 800aa12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aa16:	e00c      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aa1e:	e008      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa20:	bf00      	nop
 800aa22:	e006      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa24:	bf00      	nop
 800aa26:	e004      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa28:	bf00      	nop
 800aa2a:	e002      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa2c:	bf00      	nop
 800aa2e:	e000      	b.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aa30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10e      	bne.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aa3a:	4b06      	ldr	r3, [pc, #24]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa3e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800aa42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa4a:	4a02      	ldr	r2, [pc, #8]	@ (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa50:	e006      	b.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aa52:	bf00      	nop
 800aa54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800aa60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800aa6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa70:	2300      	movs	r3, #0
 800aa72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aa76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	d037      	beq.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800aa80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa8a:	d00e      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800aa8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa90:	d816      	bhi.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d018      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800aa96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa9a:	d111      	bne.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa9c:	4bc4      	ldr	r3, [pc, #784]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa0:	4ac3      	ldr	r2, [pc, #780]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aaa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aaa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aaa8:	e00f      	b.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aaaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaae:	3308      	adds	r3, #8
 800aab0:	2101      	movs	r1, #1
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 f94e 	bl	800bd54 <RCCEx_PLL2_Config>
 800aab8:	4603      	mov	r3, r0
 800aaba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aabe:	e004      	b.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aac6:	e000      	b.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800aac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aad2:	4bb7      	ldr	r3, [pc, #732]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aad6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800aada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aade:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aae0:	4ab3      	ldr	r2, [pc, #716]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aae2:	430b      	orrs	r3, r1
 800aae4:	6513      	str	r3, [r2, #80]	@ 0x50
 800aae6:	e003      	b.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aaec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aaf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800aafc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab00:	2300      	movs	r3, #0
 800ab02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ab06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	d039      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ab10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d81c      	bhi.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ab1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ab1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab20:	0800ab5d 	.word	0x0800ab5d
 800ab24:	0800ab31 	.word	0x0800ab31
 800ab28:	0800ab3f 	.word	0x0800ab3f
 800ab2c:	0800ab5d 	.word	0x0800ab5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab30:	4b9f      	ldr	r3, [pc, #636]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab34:	4a9e      	ldr	r2, [pc, #632]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab3c:	e00f      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab42:	3308      	adds	r3, #8
 800ab44:	2102      	movs	r1, #2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f001 f904 	bl	800bd54 <RCCEx_PLL2_Config>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ab52:	e004      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ab5a:	e000      	b.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ab5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10a      	bne.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ab66:	4b92      	ldr	r3, [pc, #584]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab6a:	f023 0103 	bic.w	r1, r3, #3
 800ab6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab74:	4a8e      	ldr	r2, [pc, #568]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ab76:	430b      	orrs	r3, r1
 800ab78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ab7a:	e003      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ab84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ab90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab94:	2300      	movs	r3, #0
 800ab96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ab9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4313      	orrs	r3, r2
 800aba2:	f000 8099 	beq.w	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aba6:	4b83      	ldr	r3, [pc, #524]	@ (800adb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a82      	ldr	r2, [pc, #520]	@ (800adb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800abac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800abb2:	f7fa fd57 	bl	8005664 <HAL_GetTick>
 800abb6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abba:	e00b      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abbc:	f7fa fd52 	bl	8005664 <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	2b64      	cmp	r3, #100	@ 0x64
 800abca:	d903      	bls.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800abd2:	e005      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abd4:	4b77      	ldr	r3, [pc, #476]	@ (800adb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d0ed      	beq.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800abe0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d173      	bne.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800abe8:	4b71      	ldr	r3, [pc, #452]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800abea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800abec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800abf4:	4053      	eors	r3, r2
 800abf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d015      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800abfe:	4b6c      	ldr	r3, [pc, #432]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac06:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ac0a:	4b69      	ldr	r3, [pc, #420]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac0e:	4a68      	ldr	r2, [pc, #416]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac14:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ac16:	4b66      	ldr	r3, [pc, #408]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac1a:	4a65      	ldr	r2, [pc, #404]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac20:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ac22:	4a63      	ldr	r2, [pc, #396]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac28:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ac2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac36:	d118      	bne.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac38:	f7fa fd14 	bl	8005664 <HAL_GetTick>
 800ac3c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac40:	e00d      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac42:	f7fa fd0f 	bl	8005664 <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ac4c:	1ad2      	subs	r2, r2, r3
 800ac4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d903      	bls.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ac56:	2303      	movs	r3, #3
 800ac58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800ac5c:	e005      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac5e:	4b54      	ldr	r3, [pc, #336]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0eb      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ac6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d129      	bne.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac82:	d10e      	bne.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ac84:	4b4a      	ldr	r3, [pc, #296]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ac8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac94:	091a      	lsrs	r2, r3, #4
 800ac96:	4b48      	ldr	r3, [pc, #288]	@ (800adb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ac98:	4013      	ands	r3, r2
 800ac9a:	4a45      	ldr	r2, [pc, #276]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ac9c:	430b      	orrs	r3, r1
 800ac9e:	6113      	str	r3, [r2, #16]
 800aca0:	e005      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x852>
 800aca2:	4b43      	ldr	r3, [pc, #268]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	4a42      	ldr	r2, [pc, #264]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aca8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800acac:	6113      	str	r3, [r2, #16]
 800acae:	4b40      	ldr	r3, [pc, #256]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acb0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800acb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800acba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acbe:	4a3c      	ldr	r2, [pc, #240]	@ (800adb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800acc0:	430b      	orrs	r3, r1
 800acc2:	6713      	str	r3, [r2, #112]	@ 0x70
 800acc4:	e008      	b.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800acc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800acce:	e003      	b.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acd4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800acd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace0:	f002 0301 	and.w	r3, r2, #1
 800ace4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ace8:	2300      	movs	r3, #0
 800acea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800acee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800acf2:	460b      	mov	r3, r1
 800acf4:	4313      	orrs	r3, r2
 800acf6:	f000 8090 	beq.w	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800acfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad02:	2b28      	cmp	r3, #40	@ 0x28
 800ad04:	d870      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800ad06:	a201      	add	r2, pc, #4	@ (adr r2, 800ad0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800ad08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0c:	0800adf1 	.word	0x0800adf1
 800ad10:	0800ade9 	.word	0x0800ade9
 800ad14:	0800ade9 	.word	0x0800ade9
 800ad18:	0800ade9 	.word	0x0800ade9
 800ad1c:	0800ade9 	.word	0x0800ade9
 800ad20:	0800ade9 	.word	0x0800ade9
 800ad24:	0800ade9 	.word	0x0800ade9
 800ad28:	0800ade9 	.word	0x0800ade9
 800ad2c:	0800adbd 	.word	0x0800adbd
 800ad30:	0800ade9 	.word	0x0800ade9
 800ad34:	0800ade9 	.word	0x0800ade9
 800ad38:	0800ade9 	.word	0x0800ade9
 800ad3c:	0800ade9 	.word	0x0800ade9
 800ad40:	0800ade9 	.word	0x0800ade9
 800ad44:	0800ade9 	.word	0x0800ade9
 800ad48:	0800ade9 	.word	0x0800ade9
 800ad4c:	0800add3 	.word	0x0800add3
 800ad50:	0800ade9 	.word	0x0800ade9
 800ad54:	0800ade9 	.word	0x0800ade9
 800ad58:	0800ade9 	.word	0x0800ade9
 800ad5c:	0800ade9 	.word	0x0800ade9
 800ad60:	0800ade9 	.word	0x0800ade9
 800ad64:	0800ade9 	.word	0x0800ade9
 800ad68:	0800ade9 	.word	0x0800ade9
 800ad6c:	0800adf1 	.word	0x0800adf1
 800ad70:	0800ade9 	.word	0x0800ade9
 800ad74:	0800ade9 	.word	0x0800ade9
 800ad78:	0800ade9 	.word	0x0800ade9
 800ad7c:	0800ade9 	.word	0x0800ade9
 800ad80:	0800ade9 	.word	0x0800ade9
 800ad84:	0800ade9 	.word	0x0800ade9
 800ad88:	0800ade9 	.word	0x0800ade9
 800ad8c:	0800adf1 	.word	0x0800adf1
 800ad90:	0800ade9 	.word	0x0800ade9
 800ad94:	0800ade9 	.word	0x0800ade9
 800ad98:	0800ade9 	.word	0x0800ade9
 800ad9c:	0800ade9 	.word	0x0800ade9
 800ada0:	0800ade9 	.word	0x0800ade9
 800ada4:	0800ade9 	.word	0x0800ade9
 800ada8:	0800ade9 	.word	0x0800ade9
 800adac:	0800adf1 	.word	0x0800adf1
 800adb0:	58024400 	.word	0x58024400
 800adb4:	58024800 	.word	0x58024800
 800adb8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adc0:	3308      	adds	r3, #8
 800adc2:	2101      	movs	r1, #1
 800adc4:	4618      	mov	r0, r3
 800adc6:	f000 ffc5 	bl	800bd54 <RCCEx_PLL2_Config>
 800adca:	4603      	mov	r3, r0
 800adcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800add0:	e00f      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800add2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800add6:	3328      	adds	r3, #40	@ 0x28
 800add8:	2101      	movs	r1, #1
 800adda:	4618      	mov	r0, r3
 800addc:	f001 f86c 	bl	800beb8 <RCCEx_PLL3_Config>
 800ade0:	4603      	mov	r3, r0
 800ade2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ade6:	e004      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800adee:	e000      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800adf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10b      	bne.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800adfa:	4bc0      	ldr	r3, [pc, #768]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800adfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adfe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ae02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae0a:	4abc      	ldr	r2, [pc, #752]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ae0c:	430b      	orrs	r3, r1
 800ae0e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae10:	e003      	b.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ae1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	f002 0302 	and.w	r3, r2, #2
 800ae26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ae30:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800ae34:	460b      	mov	r3, r1
 800ae36:	4313      	orrs	r3, r2
 800ae38:	d043      	beq.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ae3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae42:	2b05      	cmp	r3, #5
 800ae44:	d824      	bhi.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800ae46:	a201      	add	r2, pc, #4	@ (adr r2, 800ae4c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800ae48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4c:	0800ae99 	.word	0x0800ae99
 800ae50:	0800ae65 	.word	0x0800ae65
 800ae54:	0800ae7b 	.word	0x0800ae7b
 800ae58:	0800ae99 	.word	0x0800ae99
 800ae5c:	0800ae99 	.word	0x0800ae99
 800ae60:	0800ae99 	.word	0x0800ae99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae68:	3308      	adds	r3, #8
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 ff71 	bl	800bd54 <RCCEx_PLL2_Config>
 800ae72:	4603      	mov	r3, r0
 800ae74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae78:	e00f      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae7e:	3328      	adds	r3, #40	@ 0x28
 800ae80:	2101      	movs	r1, #1
 800ae82:	4618      	mov	r0, r3
 800ae84:	f001 f818 	bl	800beb8 <RCCEx_PLL3_Config>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ae8e:	e004      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ae96:	e000      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800ae98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10b      	bne.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aea2:	4b96      	ldr	r3, [pc, #600]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800aea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aea6:	f023 0107 	bic.w	r1, r3, #7
 800aeaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeb2:	4a92      	ldr	r2, [pc, #584]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800aeb4:	430b      	orrs	r3, r1
 800aeb6:	6553      	str	r3, [r2, #84]	@ 0x54
 800aeb8:	e003      	b.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aebe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeca:	f002 0304 	and.w	r3, r2, #4
 800aece:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aed2:	2300      	movs	r3, #0
 800aed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aed8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800aedc:	460b      	mov	r3, r1
 800aede:	4313      	orrs	r3, r2
 800aee0:	d043      	beq.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800aee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aeea:	2b05      	cmp	r3, #5
 800aeec:	d824      	bhi.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800aeee:	a201      	add	r2, pc, #4	@ (adr r2, 800aef4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800aef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef4:	0800af41 	.word	0x0800af41
 800aef8:	0800af0d 	.word	0x0800af0d
 800aefc:	0800af23 	.word	0x0800af23
 800af00:	0800af41 	.word	0x0800af41
 800af04:	0800af41 	.word	0x0800af41
 800af08:	0800af41 	.word	0x0800af41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af10:	3308      	adds	r3, #8
 800af12:	2101      	movs	r1, #1
 800af14:	4618      	mov	r0, r3
 800af16:	f000 ff1d 	bl	800bd54 <RCCEx_PLL2_Config>
 800af1a:	4603      	mov	r3, r0
 800af1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af20:	e00f      	b.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af26:	3328      	adds	r3, #40	@ 0x28
 800af28:	2101      	movs	r1, #1
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 ffc4 	bl	800beb8 <RCCEx_PLL3_Config>
 800af30:	4603      	mov	r3, r0
 800af32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800af36:	e004      	b.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af3e:	e000      	b.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800af40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10b      	bne.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800af4a:	4b6c      	ldr	r3, [pc, #432]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af4e:	f023 0107 	bic.w	r1, r3, #7
 800af52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af5a:	4a68      	ldr	r2, [pc, #416]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800af5c:	430b      	orrs	r3, r1
 800af5e:	6593      	str	r3, [r2, #88]	@ 0x58
 800af60:	e003      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800af6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	f002 0320 	and.w	r3, r2, #32
 800af76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800af7a:	2300      	movs	r3, #0
 800af7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800af80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800af84:	460b      	mov	r3, r1
 800af86:	4313      	orrs	r3, r2
 800af88:	d055      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800af8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800af92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af96:	d033      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800af98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af9c:	d82c      	bhi.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800af9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afa2:	d02f      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800afa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afa8:	d826      	bhi.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800afaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afae:	d02b      	beq.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800afb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afb4:	d820      	bhi.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800afb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afba:	d012      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800afbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afc0:	d81a      	bhi.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d022      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800afc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afca:	d115      	bne.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd0:	3308      	adds	r3, #8
 800afd2:	2100      	movs	r1, #0
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 febd 	bl	800bd54 <RCCEx_PLL2_Config>
 800afda:	4603      	mov	r3, r0
 800afdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800afe0:	e015      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe6:	3328      	adds	r3, #40	@ 0x28
 800afe8:	2102      	movs	r1, #2
 800afea:	4618      	mov	r0, r3
 800afec:	f000 ff64 	bl	800beb8 <RCCEx_PLL3_Config>
 800aff0:	4603      	mov	r3, r0
 800aff2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aff6:	e00a      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800affe:	e006      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b000:	bf00      	nop
 800b002:	e004      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b004:	bf00      	nop
 800b006:	e002      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b008:	bf00      	nop
 800b00a:	e000      	b.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b00c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b00e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10b      	bne.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b016:	4b39      	ldr	r3, [pc, #228]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b01a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b01e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b022:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b026:	4a35      	ldr	r2, [pc, #212]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b028:	430b      	orrs	r3, r1
 800b02a:	6553      	str	r3, [r2, #84]	@ 0x54
 800b02c:	e003      	b.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b02e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b032:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b036:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b046:	2300      	movs	r3, #0
 800b048:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b04c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b050:	460b      	mov	r3, r1
 800b052:	4313      	orrs	r3, r2
 800b054:	d058      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b05a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b05e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b062:	d033      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b064:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b068:	d82c      	bhi.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b06a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b06e:	d02f      	beq.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b074:	d826      	bhi.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b076:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b07a:	d02b      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b07c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b080:	d820      	bhi.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b082:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b086:	d012      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800b088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b08c:	d81a      	bhi.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d022      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800b092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b096:	d115      	bne.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b09c:	3308      	adds	r3, #8
 800b09e:	2100      	movs	r1, #0
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 fe57 	bl	800bd54 <RCCEx_PLL2_Config>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b0ac:	e015      	b.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0b2:	3328      	adds	r3, #40	@ 0x28
 800b0b4:	2102      	movs	r1, #2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 fefe 	bl	800beb8 <RCCEx_PLL3_Config>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b0c2:	e00a      	b.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b0ca:	e006      	b.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b0cc:	bf00      	nop
 800b0ce:	e004      	b.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b0d0:	bf00      	nop
 800b0d2:	e002      	b.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b0d4:	bf00      	nop
 800b0d6:	e000      	b.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b0d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10e      	bne.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b0e2:	4b06      	ldr	r3, [pc, #24]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b0e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b0ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b0f2:	4a02      	ldr	r2, [pc, #8]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b0f4:	430b      	orrs	r3, r1
 800b0f6:	6593      	str	r3, [r2, #88]	@ 0x58
 800b0f8:	e006      	b.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b0fa:	bf00      	nop
 800b0fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b100:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b104:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b118:	2300      	movs	r3, #0
 800b11a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b11e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b122:	460b      	mov	r3, r1
 800b124:	4313      	orrs	r3, r2
 800b126:	d055      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b12c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b130:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b134:	d033      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b136:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b13a:	d82c      	bhi.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b13c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b140:	d02f      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b146:	d826      	bhi.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b148:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b14c:	d02b      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b14e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b152:	d820      	bhi.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b158:	d012      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b15a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b15e:	d81a      	bhi.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b160:	2b00      	cmp	r3, #0
 800b162:	d022      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800b164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b168:	d115      	bne.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b16a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b16e:	3308      	adds	r3, #8
 800b170:	2100      	movs	r1, #0
 800b172:	4618      	mov	r0, r3
 800b174:	f000 fdee 	bl	800bd54 <RCCEx_PLL2_Config>
 800b178:	4603      	mov	r3, r0
 800b17a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b17e:	e015      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b184:	3328      	adds	r3, #40	@ 0x28
 800b186:	2102      	movs	r1, #2
 800b188:	4618      	mov	r0, r3
 800b18a:	f000 fe95 	bl	800beb8 <RCCEx_PLL3_Config>
 800b18e:	4603      	mov	r3, r0
 800b190:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b194:	e00a      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b19c:	e006      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b19e:	bf00      	nop
 800b1a0:	e004      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b1a2:	bf00      	nop
 800b1a4:	e002      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b1a6:	bf00      	nop
 800b1a8:	e000      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b1aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10b      	bne.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b1b4:	4ba1      	ldr	r3, [pc, #644]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b1bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b1c4:	4a9d      	ldr	r2, [pc, #628]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b1c6:	430b      	orrs	r3, r1
 800b1c8:	6593      	str	r3, [r2, #88]	@ 0x58
 800b1ca:	e003      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1d0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b1d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f002 0308 	and.w	r3, r2, #8
 800b1e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b1ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	d01e      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b1f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b200:	d10c      	bne.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b206:	3328      	adds	r3, #40	@ 0x28
 800b208:	2102      	movs	r1, #2
 800b20a:	4618      	mov	r0, r3
 800b20c:	f000 fe54 	bl	800beb8 <RCCEx_PLL3_Config>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b21c:	4b87      	ldr	r3, [pc, #540]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b21e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b220:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b22c:	4a83      	ldr	r2, [pc, #524]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b22e:	430b      	orrs	r3, r1
 800b230:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	f002 0310 	and.w	r3, r2, #16
 800b23e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b242:	2300      	movs	r3, #0
 800b244:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b248:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b24c:	460b      	mov	r3, r1
 800b24e:	4313      	orrs	r3, r2
 800b250:	d01e      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b256:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b25a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b25e:	d10c      	bne.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b264:	3328      	adds	r3, #40	@ 0x28
 800b266:	2102      	movs	r1, #2
 800b268:	4618      	mov	r0, r3
 800b26a:	f000 fe25 	bl	800beb8 <RCCEx_PLL3_Config>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b27a:	4b70      	ldr	r3, [pc, #448]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b27c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b27e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b282:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b286:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b28a:	4a6c      	ldr	r2, [pc, #432]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b28c:	430b      	orrs	r3, r1
 800b28e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b29c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b2a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	d03e      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b2b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b2b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2bc:	d022      	beq.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800b2be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2c2:	d81b      	bhi.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800b2c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2cc:	d00b      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800b2ce:	e015      	b.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 fd3b 	bl	800bd54 <RCCEx_PLL2_Config>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b2e4:	e00f      	b.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ea:	3328      	adds	r3, #40	@ 0x28
 800b2ec:	2102      	movs	r1, #2
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 fde2 	bl	800beb8 <RCCEx_PLL3_Config>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b2fa:	e004      	b.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b302:	e000      	b.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800b304:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b306:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10b      	bne.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b30e:	4b4b      	ldr	r3, [pc, #300]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b312:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b31a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b31e:	4a47      	ldr	r2, [pc, #284]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b320:	430b      	orrs	r3, r1
 800b322:	6593      	str	r3, [r2, #88]	@ 0x58
 800b324:	e003      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b326:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b32a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b336:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b33a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b33c:	2300      	movs	r3, #0
 800b33e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b340:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b344:	460b      	mov	r3, r1
 800b346:	4313      	orrs	r3, r2
 800b348:	d03b      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b34a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b34e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b352:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b356:	d01f      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b358:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b35c:	d818      	bhi.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b35e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b362:	d003      	beq.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800b364:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b368:	d007      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b36a:	e011      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b36c:	4b33      	ldr	r3, [pc, #204]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b370:	4a32      	ldr	r2, [pc, #200]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b378:	e00f      	b.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b37a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b37e:	3328      	adds	r3, #40	@ 0x28
 800b380:	2101      	movs	r1, #1
 800b382:	4618      	mov	r0, r3
 800b384:	f000 fd98 	bl	800beb8 <RCCEx_PLL3_Config>
 800b388:	4603      	mov	r3, r0
 800b38a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b38e:	e004      	b.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b396:	e000      	b.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b39a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10b      	bne.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3a2:	4b26      	ldr	r3, [pc, #152]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b3aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3b2:	4a22      	ldr	r2, [pc, #136]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3b4:	430b      	orrs	r3, r1
 800b3b6:	6553      	str	r3, [r2, #84]	@ 0x54
 800b3b8:	e003      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b3be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b3c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b3ce:	673b      	str	r3, [r7, #112]	@ 0x70
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	677b      	str	r3, [r7, #116]	@ 0x74
 800b3d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b3d8:	460b      	mov	r3, r1
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	d034      	beq.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b3de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d003      	beq.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800b3e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3ec:	d007      	beq.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800b3ee:	e011      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3f0:	4b12      	ldr	r3, [pc, #72]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f4:	4a11      	ldr	r2, [pc, #68]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b3f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b3fc:	e00e      	b.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b402:	3308      	adds	r3, #8
 800b404:	2102      	movs	r1, #2
 800b406:	4618      	mov	r0, r3
 800b408:	f000 fca4 	bl	800bd54 <RCCEx_PLL2_Config>
 800b40c:	4603      	mov	r3, r0
 800b40e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b412:	e003      	b.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b41a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b41c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10d      	bne.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b424:	4b05      	ldr	r3, [pc, #20]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b428:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b42c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b432:	4a02      	ldr	r2, [pc, #8]	@ (800b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b434:	430b      	orrs	r3, r1
 800b436:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b438:	e006      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800b43a:	bf00      	nop
 800b43c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b440:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b444:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b454:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b456:	2300      	movs	r3, #0
 800b458:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b45a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b45e:	460b      	mov	r3, r1
 800b460:	4313      	orrs	r3, r2
 800b462:	d00c      	beq.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b468:	3328      	adds	r3, #40	@ 0x28
 800b46a:	2102      	movs	r1, #2
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 fd23 	bl	800beb8 <RCCEx_PLL3_Config>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b47e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b48a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b48c:	2300      	movs	r3, #0
 800b48e:	667b      	str	r3, [r7, #100]	@ 0x64
 800b490:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b494:	460b      	mov	r3, r1
 800b496:	4313      	orrs	r3, r2
 800b498:	d038      	beq.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b49a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4a6:	d018      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800b4a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4ac:	d811      	bhi.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b4ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4b2:	d014      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800b4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4b8:	d80b      	bhi.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d011      	beq.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800b4be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4c2:	d106      	bne.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4c4:	4bc3      	ldr	r3, [pc, #780]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c8:	4ac2      	ldr	r2, [pc, #776]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b4ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b4d0:	e008      	b.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b4d8:	e004      	b.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b4da:	bf00      	nop
 800b4dc:	e002      	b.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b4de:	bf00      	nop
 800b4e0:	e000      	b.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800b4e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10b      	bne.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b4ec:	4bb9      	ldr	r3, [pc, #740]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b4f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4fc:	4ab5      	ldr	r2, [pc, #724]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b4fe:	430b      	orrs	r3, r1
 800b500:	6553      	str	r3, [r2, #84]	@ 0x54
 800b502:	e003      	b.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b504:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b508:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b50c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b518:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b51a:	2300      	movs	r3, #0
 800b51c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b51e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b522:	460b      	mov	r3, r1
 800b524:	4313      	orrs	r3, r2
 800b526:	d009      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b528:	4baa      	ldr	r3, [pc, #680]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b52a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b52c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b536:	4aa7      	ldr	r2, [pc, #668]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b538:	430b      	orrs	r3, r1
 800b53a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b53c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b548:	653b      	str	r3, [r7, #80]	@ 0x50
 800b54a:	2300      	movs	r3, #0
 800b54c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b54e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b552:	460b      	mov	r3, r1
 800b554:	4313      	orrs	r3, r2
 800b556:	d009      	beq.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b558:	4b9e      	ldr	r3, [pc, #632]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b55a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b55c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b566:	4a9b      	ldr	r2, [pc, #620]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b568:	430b      	orrs	r3, r1
 800b56a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800b56c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b57a:	2300      	movs	r3, #0
 800b57c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b57e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b582:	460b      	mov	r3, r1
 800b584:	4313      	orrs	r3, r2
 800b586:	d009      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800b588:	4b92      	ldr	r3, [pc, #584]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b58a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b58c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800b590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b596:	4a8f      	ldr	r2, [pc, #572]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b598:	430b      	orrs	r3, r1
 800b59a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b5a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	d00e      	beq.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b5b8:	4b86      	ldr	r3, [pc, #536]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	4a85      	ldr	r2, [pc, #532]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b5c2:	6113      	str	r3, [r2, #16]
 800b5c4:	4b83      	ldr	r3, [pc, #524]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5c6:	6919      	ldr	r1, [r3, #16]
 800b5c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b5d0:	4a80      	ldr	r2, [pc, #512]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5d2:	430b      	orrs	r3, r1
 800b5d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b5d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5de:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b5e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	d009      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b5f2:	4b78      	ldr	r3, [pc, #480]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b5f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b5fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b600:	4a74      	ldr	r2, [pc, #464]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b602:	430b      	orrs	r3, r1
 800b604:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b612:	633b      	str	r3, [r7, #48]	@ 0x30
 800b614:	2300      	movs	r3, #0
 800b616:	637b      	str	r3, [r7, #52]	@ 0x34
 800b618:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b61c:	460b      	mov	r3, r1
 800b61e:	4313      	orrs	r3, r2
 800b620:	d00a      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b622:	4b6c      	ldr	r3, [pc, #432]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b626:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b62a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b62e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b632:	4a68      	ldr	r2, [pc, #416]	@ (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800b634:	430b      	orrs	r3, r1
 800b636:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	2100      	movs	r1, #0
 800b642:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b644:	f003 0301 	and.w	r3, r3, #1
 800b648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b64a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b64e:	460b      	mov	r3, r1
 800b650:	4313      	orrs	r3, r2
 800b652:	d011      	beq.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b658:	3308      	adds	r3, #8
 800b65a:	2100      	movs	r1, #0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 fb79 	bl	800bd54 <RCCEx_PLL2_Config>
 800b662:	4603      	mov	r3, r0
 800b664:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b668:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d003      	beq.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b670:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b674:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	2100      	movs	r1, #0
 800b682:	6239      	str	r1, [r7, #32]
 800b684:	f003 0302 	and.w	r3, r3, #2
 800b688:	627b      	str	r3, [r7, #36]	@ 0x24
 800b68a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b68e:	460b      	mov	r3, r1
 800b690:	4313      	orrs	r3, r2
 800b692:	d011      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b698:	3308      	adds	r3, #8
 800b69a:	2101      	movs	r1, #1
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 fb59 	bl	800bd54 <RCCEx_PLL2_Config>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b6a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d003      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	61b9      	str	r1, [r7, #24]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	61fb      	str	r3, [r7, #28]
 800b6ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	d011      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6d8:	3308      	adds	r3, #8
 800b6da:	2102      	movs	r1, #2
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f000 fb39 	bl	800bd54 <RCCEx_PLL2_Config>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b6e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d003      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b6f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	2100      	movs	r1, #0
 800b702:	6139      	str	r1, [r7, #16]
 800b704:	f003 0308 	and.w	r3, r3, #8
 800b708:	617b      	str	r3, [r7, #20]
 800b70a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b70e:	460b      	mov	r3, r1
 800b710:	4313      	orrs	r3, r2
 800b712:	d011      	beq.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b718:	3328      	adds	r3, #40	@ 0x28
 800b71a:	2100      	movs	r1, #0
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 fbcb 	bl	800beb8 <RCCEx_PLL3_Config>
 800b722:	4603      	mov	r3, r0
 800b724:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800b728:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d003      	beq.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b730:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b734:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	2100      	movs	r1, #0
 800b742:	60b9      	str	r1, [r7, #8]
 800b744:	f003 0310 	and.w	r3, r3, #16
 800b748:	60fb      	str	r3, [r7, #12]
 800b74a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b74e:	460b      	mov	r3, r1
 800b750:	4313      	orrs	r3, r2
 800b752:	d011      	beq.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b758:	3328      	adds	r3, #40	@ 0x28
 800b75a:	2101      	movs	r1, #1
 800b75c:	4618      	mov	r0, r3
 800b75e:	f000 fbab 	bl	800beb8 <RCCEx_PLL3_Config>
 800b762:	4603      	mov	r3, r0
 800b764:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b768:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d003      	beq.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b770:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b774:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b780:	2100      	movs	r1, #0
 800b782:	6039      	str	r1, [r7, #0]
 800b784:	f003 0320 	and.w	r3, r3, #32
 800b788:	607b      	str	r3, [r7, #4]
 800b78a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b78e:	460b      	mov	r3, r1
 800b790:	4313      	orrs	r3, r2
 800b792:	d011      	beq.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b798:	3328      	adds	r3, #40	@ 0x28
 800b79a:	2102      	movs	r1, #2
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 fb8b 	bl	800beb8 <RCCEx_PLL3_Config>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b7a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d003      	beq.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800b7b8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e000      	b.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7d2:	bf00      	nop
 800b7d4:	58024400 	.word	0x58024400

0800b7d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800b7dc:	f7fe fde2 	bl	800a3a4 <HAL_RCC_GetHCLKFreq>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	4b06      	ldr	r3, [pc, #24]	@ (800b7fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	091b      	lsrs	r3, r3, #4
 800b7e8:	f003 0307 	and.w	r3, r3, #7
 800b7ec:	4904      	ldr	r1, [pc, #16]	@ (800b800 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b7ee:	5ccb      	ldrb	r3, [r1, r3]
 800b7f0:	f003 031f 	and.w	r3, r3, #31
 800b7f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	58024400 	.word	0x58024400
 800b800:	0801882c 	.word	0x0801882c

0800b804 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b804:	b480      	push	{r7}
 800b806:	b089      	sub	sp, #36	@ 0x24
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b80c:	4ba1      	ldr	r3, [pc, #644]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b810:	f003 0303 	and.w	r3, r3, #3
 800b814:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b816:	4b9f      	ldr	r3, [pc, #636]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b81a:	0b1b      	lsrs	r3, r3, #12
 800b81c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b820:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b822:	4b9c      	ldr	r3, [pc, #624]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b826:	091b      	lsrs	r3, r3, #4
 800b828:	f003 0301 	and.w	r3, r3, #1
 800b82c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b82e:	4b99      	ldr	r3, [pc, #612]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b832:	08db      	lsrs	r3, r3, #3
 800b834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	fb02 f303 	mul.w	r3, r2, r3
 800b83e:	ee07 3a90 	vmov	s15, r3
 800b842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b846:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f000 8111 	beq.w	800ba74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	2b02      	cmp	r3, #2
 800b856:	f000 8083 	beq.w	800b960 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	f200 80a1 	bhi.w	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d003      	beq.n	800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d056      	beq.n	800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b86e:	e099      	b.n	800b9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b870:	4b88      	ldr	r3, [pc, #544]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f003 0320 	and.w	r3, r3, #32
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d02d      	beq.n	800b8d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b87c:	4b85      	ldr	r3, [pc, #532]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	08db      	lsrs	r3, r3, #3
 800b882:	f003 0303 	and.w	r3, r3, #3
 800b886:	4a84      	ldr	r2, [pc, #528]	@ (800ba98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b888:	fa22 f303 	lsr.w	r3, r2, r3
 800b88c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	ee07 3a90 	vmov	s15, r3
 800b894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	ee07 3a90 	vmov	s15, r3
 800b89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8a6:	4b7b      	ldr	r3, [pc, #492]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ae:	ee07 3a90 	vmov	s15, r3
 800b8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ba9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b8d6:	e087      	b.n	800b9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	ee07 3a90 	vmov	s15, r3
 800b8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800baa0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b8e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ea:	4b6a      	ldr	r3, [pc, #424]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f2:	ee07 3a90 	vmov	s15, r3
 800b8f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ba9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b90a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b91a:	e065      	b.n	800b9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	ee07 3a90 	vmov	s15, r3
 800b922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b926:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b92e:	4b59      	ldr	r3, [pc, #356]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b936:	ee07 3a90 	vmov	s15, r3
 800b93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b93e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b942:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ba9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b94e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b95a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b95e:	e043      	b.n	800b9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	ee07 3a90 	vmov	s15, r3
 800b966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800baa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b972:	4b48      	ldr	r3, [pc, #288]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97a:	ee07 3a90 	vmov	s15, r3
 800b97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b982:	ed97 6a03 	vldr	s12, [r7, #12]
 800b986:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ba9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b99e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9a2:	e021      	b.n	800b9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800baa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9b6:	4b37      	ldr	r3, [pc, #220]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9be:	ee07 3a90 	vmov	s15, r3
 800b9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ba9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b9e8:	4b2a      	ldr	r3, [pc, #168]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ec:	0a5b      	lsrs	r3, r3, #9
 800b9ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9f2:	ee07 3a90 	vmov	s15, r3
 800b9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba02:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba0e:	ee17 2a90 	vmov	r2, s15
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ba16:	4b1f      	ldr	r3, [pc, #124]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba1a:	0c1b      	lsrs	r3, r3, #16
 800ba1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba20:	ee07 3a90 	vmov	s15, r3
 800ba24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba30:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba3c:	ee17 2a90 	vmov	r2, s15
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ba44:	4b13      	ldr	r3, [pc, #76]	@ (800ba94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba48:	0e1b      	lsrs	r3, r3, #24
 800ba4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba4e:	ee07 3a90 	vmov	s15, r3
 800ba52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba6a:	ee17 2a90 	vmov	r2, s15
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ba72:	e008      	b.n	800ba86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	609a      	str	r2, [r3, #8]
}
 800ba86:	bf00      	nop
 800ba88:	3724      	adds	r7, #36	@ 0x24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	58024400 	.word	0x58024400
 800ba98:	03d09000 	.word	0x03d09000
 800ba9c:	46000000 	.word	0x46000000
 800baa0:	4c742400 	.word	0x4c742400
 800baa4:	4a742400 	.word	0x4a742400
 800baa8:	4bb71b00 	.word	0x4bb71b00

0800baac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800baac:	b480      	push	{r7}
 800baae:	b089      	sub	sp, #36	@ 0x24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bab4:	4ba1      	ldr	r3, [pc, #644]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bab8:	f003 0303 	and.w	r3, r3, #3
 800babc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800babe:	4b9f      	ldr	r3, [pc, #636]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bac2:	0d1b      	lsrs	r3, r3, #20
 800bac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bac8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800baca:	4b9c      	ldr	r3, [pc, #624]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bace:	0a1b      	lsrs	r3, r3, #8
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bad6:	4b99      	ldr	r3, [pc, #612]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bada:	08db      	lsrs	r3, r3, #3
 800badc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bae0:	693a      	ldr	r2, [r7, #16]
 800bae2:	fb02 f303 	mul.w	r3, r2, r3
 800bae6:	ee07 3a90 	vmov	s15, r3
 800baea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f000 8111 	beq.w	800bd1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	f000 8083 	beq.w	800bc08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	f200 80a1 	bhi.w	800bc4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d003      	beq.n	800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d056      	beq.n	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bb16:	e099      	b.n	800bc4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb18:	4b88      	ldr	r3, [pc, #544]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 0320 	and.w	r3, r3, #32
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d02d      	beq.n	800bb80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb24:	4b85      	ldr	r3, [pc, #532]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	08db      	lsrs	r3, r3, #3
 800bb2a:	f003 0303 	and.w	r3, r3, #3
 800bb2e:	4a84      	ldr	r2, [pc, #528]	@ (800bd40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bb30:	fa22 f303 	lsr.w	r3, r2, r3
 800bb34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	ee07 3a90 	vmov	s15, r3
 800bb3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	ee07 3a90 	vmov	s15, r3
 800bb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb4e:	4b7b      	ldr	r3, [pc, #492]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb56:	ee07 3a90 	vmov	s15, r3
 800bb5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bd44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb7e:	e087      	b.n	800bc90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	ee07 3a90 	vmov	s15, r3
 800bb86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bd48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bb8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb92:	4b6a      	ldr	r3, [pc, #424]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb9a:	ee07 3a90 	vmov	s15, r3
 800bb9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bba2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bba6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bd44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbc2:	e065      	b.n	800bc90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	ee07 3a90 	vmov	s15, r3
 800bbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bbd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbd6:	4b59      	ldr	r3, [pc, #356]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbde:	ee07 3a90 	vmov	s15, r3
 800bbe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bd44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc06:	e043      	b.n	800bc90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	ee07 3a90 	vmov	s15, r3
 800bc0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bd50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bc16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc1a:	4b48      	ldr	r3, [pc, #288]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc22:	ee07 3a90 	vmov	s15, r3
 800bc26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bd44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc4a:	e021      	b.n	800bc90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bd4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bc5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc5e:	4b37      	ldr	r3, [pc, #220]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc66:	ee07 3a90 	vmov	s15, r3
 800bc6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bd44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bc76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bc90:	4b2a      	ldr	r3, [pc, #168]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc94:	0a5b      	lsrs	r3, r3, #9
 800bc96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc9a:	ee07 3a90 	vmov	s15, r3
 800bc9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcb6:	ee17 2a90 	vmov	r2, s15
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bcbe:	4b1f      	ldr	r3, [pc, #124]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcc2:	0c1b      	lsrs	r3, r3, #16
 800bcc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcc8:	ee07 3a90 	vmov	s15, r3
 800bccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bce4:	ee17 2a90 	vmov	r2, s15
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bcec:	4b13      	ldr	r3, [pc, #76]	@ (800bd3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcf0:	0e1b      	lsrs	r3, r3, #24
 800bcf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcf6:	ee07 3a90 	vmov	s15, r3
 800bcfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd06:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd12:	ee17 2a90 	vmov	r2, s15
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bd1a:	e008      	b.n	800bd2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	609a      	str	r2, [r3, #8]
}
 800bd2e:	bf00      	nop
 800bd30:	3724      	adds	r7, #36	@ 0x24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	58024400 	.word	0x58024400
 800bd40:	03d09000 	.word	0x03d09000
 800bd44:	46000000 	.word	0x46000000
 800bd48:	4c742400 	.word	0x4c742400
 800bd4c:	4a742400 	.word	0x4a742400
 800bd50:	4bb71b00 	.word	0x4bb71b00

0800bd54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bd62:	4b53      	ldr	r3, [pc, #332]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800bd64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd66:	f003 0303 	and.w	r3, r3, #3
 800bd6a:	2b03      	cmp	r3, #3
 800bd6c:	d101      	bne.n	800bd72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e099      	b.n	800bea6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bd72:	4b4f      	ldr	r3, [pc, #316]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a4e      	ldr	r2, [pc, #312]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800bd78:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd7e:	f7f9 fc71 	bl	8005664 <HAL_GetTick>
 800bd82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd84:	e008      	b.n	800bd98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bd86:	f7f9 fc6d 	bl	8005664 <HAL_GetTick>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d901      	bls.n	800bd98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd94:	2303      	movs	r3, #3
 800bd96:	e086      	b.n	800bea6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bd98:	4b45      	ldr	r3, [pc, #276]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1f0      	bne.n	800bd86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bda4:	4b42      	ldr	r3, [pc, #264]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800bda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	031b      	lsls	r3, r3, #12
 800bdb2:	493f      	ldr	r1, [pc, #252]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	628b      	str	r3, [r1, #40]	@ 0x28
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	3b01      	subs	r3, #1
 800bdc8:	025b      	lsls	r3, r3, #9
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	431a      	orrs	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	041b      	lsls	r3, r3, #16
 800bdd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bdda:	431a      	orrs	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	691b      	ldr	r3, [r3, #16]
 800bde0:	3b01      	subs	r3, #1
 800bde2:	061b      	lsls	r3, r3, #24
 800bde4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bde8:	4931      	ldr	r1, [pc, #196]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800bdea:	4313      	orrs	r3, r2
 800bdec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bdee:	4b30      	ldr	r3, [pc, #192]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800bdf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	695b      	ldr	r3, [r3, #20]
 800bdfa:	492d      	ldr	r1, [pc, #180]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800be00:	4b2b      	ldr	r3, [pc, #172]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be04:	f023 0220 	bic.w	r2, r3, #32
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	4928      	ldr	r1, [pc, #160]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be0e:	4313      	orrs	r3, r2
 800be10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be12:	4b27      	ldr	r3, [pc, #156]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be16:	4a26      	ldr	r2, [pc, #152]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be18:	f023 0310 	bic.w	r3, r3, #16
 800be1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800be1e:	4b24      	ldr	r3, [pc, #144]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be22:	4b24      	ldr	r3, [pc, #144]	@ (800beb4 <RCCEx_PLL2_Config+0x160>)
 800be24:	4013      	ands	r3, r2
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	69d2      	ldr	r2, [r2, #28]
 800be2a:	00d2      	lsls	r2, r2, #3
 800be2c:	4920      	ldr	r1, [pc, #128]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800be32:	4b1f      	ldr	r3, [pc, #124]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be36:	4a1e      	ldr	r2, [pc, #120]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be38:	f043 0310 	orr.w	r3, r3, #16
 800be3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d106      	bne.n	800be52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800be44:	4b1a      	ldr	r3, [pc, #104]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be48:	4a19      	ldr	r2, [pc, #100]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800be4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800be50:	e00f      	b.n	800be72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	2b01      	cmp	r3, #1
 800be56:	d106      	bne.n	800be66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800be58:	4b15      	ldr	r3, [pc, #84]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5c:	4a14      	ldr	r2, [pc, #80]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800be64:	e005      	b.n	800be72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800be66:	4b12      	ldr	r3, [pc, #72]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be6a:	4a11      	ldr	r2, [pc, #68]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800be70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800be72:	4b0f      	ldr	r3, [pc, #60]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a0e      	ldr	r2, [pc, #56]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800be7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be7e:	f7f9 fbf1 	bl	8005664 <HAL_GetTick>
 800be82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be84:	e008      	b.n	800be98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be86:	f7f9 fbed 	bl	8005664 <HAL_GetTick>
 800be8a:	4602      	mov	r2, r0
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	2b02      	cmp	r3, #2
 800be92:	d901      	bls.n	800be98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be94:	2303      	movs	r3, #3
 800be96:	e006      	b.n	800bea6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800be98:	4b05      	ldr	r3, [pc, #20]	@ (800beb0 <RCCEx_PLL2_Config+0x15c>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d0f0      	beq.n	800be86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	58024400 	.word	0x58024400
 800beb4:	ffff0007 	.word	0xffff0007

0800beb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bec6:	4b53      	ldr	r3, [pc, #332]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beca:	f003 0303 	and.w	r3, r3, #3
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d101      	bne.n	800bed6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	e099      	b.n	800c00a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bed6:	4b4f      	ldr	r3, [pc, #316]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a4e      	ldr	r2, [pc, #312]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bedc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bee2:	f7f9 fbbf 	bl	8005664 <HAL_GetTick>
 800bee6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bee8:	e008      	b.n	800befc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800beea:	f7f9 fbbb 	bl	8005664 <HAL_GetTick>
 800beee:	4602      	mov	r2, r0
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d901      	bls.n	800befc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bef8:	2303      	movs	r3, #3
 800befa:	e086      	b.n	800c00a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800befc:	4b45      	ldr	r3, [pc, #276]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1f0      	bne.n	800beea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bf08:	4b42      	ldr	r3, [pc, #264]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf0c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	051b      	lsls	r3, r3, #20
 800bf16:	493f      	ldr	r1, [pc, #252]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	628b      	str	r3, [r1, #40]	@ 0x28
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	025b      	lsls	r3, r3, #9
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	431a      	orrs	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	3b01      	subs	r3, #1
 800bf38:	041b      	lsls	r3, r3, #16
 800bf3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bf3e:	431a      	orrs	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	691b      	ldr	r3, [r3, #16]
 800bf44:	3b01      	subs	r3, #1
 800bf46:	061b      	lsls	r3, r3, #24
 800bf48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bf4c:	4931      	ldr	r1, [pc, #196]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bf52:	4b30      	ldr	r3, [pc, #192]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	492d      	ldr	r1, [pc, #180]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf60:	4313      	orrs	r3, r2
 800bf62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bf64:	4b2b      	ldr	r3, [pc, #172]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf68:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	4928      	ldr	r1, [pc, #160]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf72:	4313      	orrs	r3, r2
 800bf74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bf76:	4b27      	ldr	r3, [pc, #156]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf7a:	4a26      	ldr	r2, [pc, #152]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bf82:	4b24      	ldr	r3, [pc, #144]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf86:	4b24      	ldr	r3, [pc, #144]	@ (800c018 <RCCEx_PLL3_Config+0x160>)
 800bf88:	4013      	ands	r3, r2
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	69d2      	ldr	r2, [r2, #28]
 800bf8e:	00d2      	lsls	r2, r2, #3
 800bf90:	4920      	ldr	r1, [pc, #128]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf92:	4313      	orrs	r3, r2
 800bf94:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bf96:	4b1f      	ldr	r3, [pc, #124]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf9a:	4a1e      	ldr	r2, [pc, #120]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bf9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bfa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d106      	bne.n	800bfb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bfa8:	4b1a      	ldr	r3, [pc, #104]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bfaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfac:	4a19      	ldr	r2, [pc, #100]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bfae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bfb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bfb4:	e00f      	b.n	800bfd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d106      	bne.n	800bfca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bfbc:	4b15      	ldr	r3, [pc, #84]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bfbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc0:	4a14      	ldr	r2, [pc, #80]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bfc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bfc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bfc8:	e005      	b.n	800bfd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bfca:	4b12      	ldr	r3, [pc, #72]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bfcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfce:	4a11      	ldr	r2, [pc, #68]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bfd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bfd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bfd6:	4b0f      	ldr	r3, [pc, #60]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a0e      	ldr	r2, [pc, #56]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bfdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bfe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfe2:	f7f9 fb3f 	bl	8005664 <HAL_GetTick>
 800bfe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bfe8:	e008      	b.n	800bffc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bfea:	f7f9 fb3b 	bl	8005664 <HAL_GetTick>
 800bfee:	4602      	mov	r2, r0
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	1ad3      	subs	r3, r2, r3
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d901      	bls.n	800bffc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bff8:	2303      	movs	r3, #3
 800bffa:	e006      	b.n	800c00a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bffc:	4b05      	ldr	r3, [pc, #20]	@ (800c014 <RCCEx_PLL3_Config+0x15c>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c004:	2b00      	cmp	r3, #0
 800c006:	d0f0      	beq.n	800bfea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c008:	7bfb      	ldrb	r3, [r7, #15]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	58024400 	.word	0x58024400
 800c018:	ffff0007 	.word	0xffff0007

0800c01c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d101      	bne.n	800c02e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	e10f      	b.n	800c24e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a87      	ldr	r2, [pc, #540]	@ (800c258 <HAL_SPI_Init+0x23c>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d00f      	beq.n	800c05e <HAL_SPI_Init+0x42>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a86      	ldr	r2, [pc, #536]	@ (800c25c <HAL_SPI_Init+0x240>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d00a      	beq.n	800c05e <HAL_SPI_Init+0x42>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a84      	ldr	r2, [pc, #528]	@ (800c260 <HAL_SPI_Init+0x244>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d005      	beq.n	800c05e <HAL_SPI_Init+0x42>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	2b0f      	cmp	r3, #15
 800c058:	d901      	bls.n	800c05e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c05a:	2301      	movs	r3, #1
 800c05c:	e0f7      	b.n	800c24e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f001 f968 	bl	800d334 <SPI_GetPacketSize>
 800c064:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a7b      	ldr	r2, [pc, #492]	@ (800c258 <HAL_SPI_Init+0x23c>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d00c      	beq.n	800c08a <HAL_SPI_Init+0x6e>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a79      	ldr	r2, [pc, #484]	@ (800c25c <HAL_SPI_Init+0x240>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d007      	beq.n	800c08a <HAL_SPI_Init+0x6e>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a78      	ldr	r2, [pc, #480]	@ (800c260 <HAL_SPI_Init+0x244>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d002      	beq.n	800c08a <HAL_SPI_Init+0x6e>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b08      	cmp	r3, #8
 800c088:	d811      	bhi.n	800c0ae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c08e:	4a72      	ldr	r2, [pc, #456]	@ (800c258 <HAL_SPI_Init+0x23c>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d009      	beq.n	800c0a8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a70      	ldr	r2, [pc, #448]	@ (800c25c <HAL_SPI_Init+0x240>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d004      	beq.n	800c0a8 <HAL_SPI_Init+0x8c>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a6f      	ldr	r2, [pc, #444]	@ (800c260 <HAL_SPI_Init+0x244>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d104      	bne.n	800c0b2 <HAL_SPI_Init+0x96>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2b10      	cmp	r3, #16
 800c0ac:	d901      	bls.n	800c0b2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e0cd      	b.n	800c24e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d106      	bne.n	800c0cc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7f8 f8d6 	bl	8004278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f022 0201 	bic.w	r2, r2, #1
 800c0e2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c0ee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c0f8:	d119      	bne.n	800c12e <HAL_SPI_Init+0x112>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c102:	d103      	bne.n	800c10c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d008      	beq.n	800c11e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10c      	bne.n	800c12e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c11c:	d107      	bne.n	800c12e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c12c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00f      	beq.n	800c15a <HAL_SPI_Init+0x13e>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	2b06      	cmp	r3, #6
 800c140:	d90b      	bls.n	800c15a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	430a      	orrs	r2, r1
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	e007      	b.n	800c16a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c168:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	69da      	ldr	r2, [r3, #28]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c172:	431a      	orrs	r2, r3
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	431a      	orrs	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c17c:	ea42 0103 	orr.w	r1, r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	68da      	ldr	r2, [r3, #12]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	430a      	orrs	r2, r1
 800c18a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c194:	431a      	orrs	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c19a:	431a      	orrs	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	691b      	ldr	r3, [r3, #16]
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	695b      	ldr	r3, [r3, #20]
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a1b      	ldr	r3, [r3, #32]
 800c1b2:	431a      	orrs	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	431a      	orrs	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1be:	431a      	orrs	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	431a      	orrs	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1ca:	ea42 0103 	orr.w	r1, r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	430a      	orrs	r2, r1
 800c1d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d113      	bne.n	800c20a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c1f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c208:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f022 0201 	bic.w	r2, r2, #1
 800c218:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00a      	beq.n	800c23c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	68db      	ldr	r3, [r3, #12]
 800c22c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	430a      	orrs	r2, r1
 800c23a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2200      	movs	r2, #0
 800c240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	40013000 	.word	0x40013000
 800c25c:	40003800 	.word	0x40003800
 800c260:	40003c00 	.word	0x40003c00

0800c264 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af02      	add	r7, sp, #8
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	603b      	str	r3, [r7, #0]
 800c270:	4613      	mov	r3, r2
 800c272:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3320      	adds	r3, #32
 800c27a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c27c:	f7f9 f9f2 	bl	8005664 <HAL_GetTick>
 800c280:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d001      	beq.n	800c292 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c28e:	2302      	movs	r3, #2
 800c290:	e1d1      	b.n	800c636 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d002      	beq.n	800c29e <HAL_SPI_Transmit+0x3a>
 800c298:	88fb      	ldrh	r3, [r7, #6]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d101      	bne.n	800c2a2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e1c9      	b.n	800c636 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d101      	bne.n	800c2b0 <HAL_SPI_Transmit+0x4c>
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	e1c2      	b.n	800c636 <HAL_SPI_Transmit+0x3d2>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2203      	movs	r2, #3
 800c2bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	68ba      	ldr	r2, [r7, #8]
 800c2cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	88fa      	ldrh	r2, [r7, #6]
 800c2d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	88fa      	ldrh	r2, [r7, #6]
 800c2da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c308:	d108      	bne.n	800c31c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c318:	601a      	str	r2, [r3, #0]
 800c31a:	e009      	b.n	800c330 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c32e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	685a      	ldr	r2, [r3, #4]
 800c336:	4b96      	ldr	r3, [pc, #600]	@ (800c590 <HAL_SPI_Transmit+0x32c>)
 800c338:	4013      	ands	r3, r2
 800c33a:	88f9      	ldrh	r1, [r7, #6]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	6812      	ldr	r2, [r2, #0]
 800c340:	430b      	orrs	r3, r1
 800c342:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f042 0201 	orr.w	r2, r2, #1
 800c352:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c35c:	d107      	bne.n	800c36e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c36c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	2b0f      	cmp	r3, #15
 800c374:	d947      	bls.n	800c406 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c376:	e03f      	b.n	800c3f8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	695b      	ldr	r3, [r3, #20]
 800c37e:	f003 0302 	and.w	r3, r3, #2
 800c382:	2b02      	cmp	r3, #2
 800c384:	d114      	bne.n	800c3b0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6812      	ldr	r2, [r2, #0]
 800c390:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c396:	1d1a      	adds	r2, r3, #4
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c3ae:	e023      	b.n	800c3f8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3b0:	f7f9 f958 	bl	8005664 <HAL_GetTick>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d803      	bhi.n	800c3c8 <HAL_SPI_Transmit+0x164>
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c6:	d102      	bne.n	800c3ce <HAL_SPI_Transmit+0x16a>
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d114      	bne.n	800c3f8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 fee2 	bl	800d198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c3f4:	2303      	movs	r3, #3
 800c3f6:	e11e      	b.n	800c636 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1b9      	bne.n	800c378 <HAL_SPI_Transmit+0x114>
 800c404:	e0f1      	b.n	800c5ea <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	2b07      	cmp	r3, #7
 800c40c:	f240 80e6 	bls.w	800c5dc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c410:	e05d      	b.n	800c4ce <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	695b      	ldr	r3, [r3, #20]
 800c418:	f003 0302 	and.w	r3, r3, #2
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d132      	bne.n	800c486 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c426:	b29b      	uxth	r3, r3
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d918      	bls.n	800c45e <HAL_SPI_Transmit+0x1fa>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c430:	2b00      	cmp	r3, #0
 800c432:	d014      	beq.n	800c45e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	6812      	ldr	r2, [r2, #0]
 800c43e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c444:	1d1a      	adds	r2, r3, #4
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c450:	b29b      	uxth	r3, r3
 800c452:	3b02      	subs	r3, #2
 800c454:	b29a      	uxth	r2, r3
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c45c:	e037      	b.n	800c4ce <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c462:	881a      	ldrh	r2, [r3, #0]
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c46c:	1c9a      	adds	r2, r3, #2
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c478:	b29b      	uxth	r3, r3
 800c47a:	3b01      	subs	r3, #1
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c484:	e023      	b.n	800c4ce <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c486:	f7f9 f8ed 	bl	8005664 <HAL_GetTick>
 800c48a:	4602      	mov	r2, r0
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	429a      	cmp	r2, r3
 800c494:	d803      	bhi.n	800c49e <HAL_SPI_Transmit+0x23a>
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49c:	d102      	bne.n	800c4a4 <HAL_SPI_Transmit+0x240>
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d114      	bne.n	800c4ce <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f000 fe77 	bl	800d198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	e0b3      	b.n	800c636 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d19b      	bne.n	800c412 <HAL_SPI_Transmit+0x1ae>
 800c4da:	e086      	b.n	800c5ea <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	695b      	ldr	r3, [r3, #20]
 800c4e2:	f003 0302 	and.w	r3, r3, #2
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	d154      	bne.n	800c594 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d918      	bls.n	800c528 <HAL_SPI_Transmit+0x2c4>
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4fa:	2b40      	cmp	r3, #64	@ 0x40
 800c4fc:	d914      	bls.n	800c528 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	6812      	ldr	r2, [r2, #0]
 800c508:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c50e:	1d1a      	adds	r2, r3, #4
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	3b04      	subs	r3, #4
 800c51e:	b29a      	uxth	r2, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c526:	e059      	b.n	800c5dc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c52e:	b29b      	uxth	r3, r3
 800c530:	2b01      	cmp	r3, #1
 800c532:	d917      	bls.n	800c564 <HAL_SPI_Transmit+0x300>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d013      	beq.n	800c564 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c540:	881a      	ldrh	r2, [r3, #0]
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c54a:	1c9a      	adds	r2, r3, #2
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c556:	b29b      	uxth	r3, r3
 800c558:	3b02      	subs	r3, #2
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c562:	e03b      	b.n	800c5dc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	3320      	adds	r3, #32
 800c56e:	7812      	ldrb	r2, [r2, #0]
 800c570:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c576:	1c5a      	adds	r2, r3, #1
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c582:	b29b      	uxth	r3, r3
 800c584:	3b01      	subs	r3, #1
 800c586:	b29a      	uxth	r2, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c58e:	e025      	b.n	800c5dc <HAL_SPI_Transmit+0x378>
 800c590:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c594:	f7f9 f866 	bl	8005664 <HAL_GetTick>
 800c598:	4602      	mov	r2, r0
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d803      	bhi.n	800c5ac <HAL_SPI_Transmit+0x348>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5aa:	d102      	bne.n	800c5b2 <HAL_SPI_Transmit+0x34e>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d114      	bne.n	800c5dc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f000 fdf0 	bl	800d198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e02c      	b.n	800c636 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f47f af79 	bne.w	800c4dc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	2108      	movs	r1, #8
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f000 fe6f 	bl	800d2d8 <SPI_WaitOnFlagUntilTimeout>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d007      	beq.n	800c610 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c606:	f043 0220 	orr.w	r2, r3, #32
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f000 fdc1 	bl	800d198 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c630:	2301      	movs	r3, #1
 800c632:	e000      	b.n	800c636 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c634:	2300      	movs	r3, #0
  }
}
 800c636:	4618      	mov	r0, r3
 800c638:	3718      	adds	r7, #24
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop

0800c640 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b088      	sub	sp, #32
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	603b      	str	r3, [r7, #0]
 800c64c:	4613      	mov	r3, r2
 800c64e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c654:	095b      	lsrs	r3, r3, #5
 800c656:	b29b      	uxth	r3, r3
 800c658:	3301      	adds	r3, #1
 800c65a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	3330      	adds	r3, #48	@ 0x30
 800c662:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c664:	f7f8 fffe 	bl	8005664 <HAL_GetTick>
 800c668:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b01      	cmp	r3, #1
 800c674:	d001      	beq.n	800c67a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c676:	2302      	movs	r3, #2
 800c678:	e250      	b.n	800cb1c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <HAL_SPI_Receive+0x46>
 800c680:	88fb      	ldrh	r3, [r7, #6]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d101      	bne.n	800c68a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	e248      	b.n	800cb1c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c690:	2b01      	cmp	r3, #1
 800c692:	d101      	bne.n	800c698 <HAL_SPI_Receive+0x58>
 800c694:	2302      	movs	r3, #2
 800c696:	e241      	b.n	800cb1c <HAL_SPI_Receive+0x4dc>
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2204      	movs	r2, #4
 800c6a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	88fa      	ldrh	r2, [r7, #6]
 800c6ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	88fa      	ldrh	r2, [r7, #6]
 800c6c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c6f0:	d108      	bne.n	800c704 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c700:	601a      	str	r2, [r3, #0]
 800c702:	e009      	b.n	800c718 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c716:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	4b95      	ldr	r3, [pc, #596]	@ (800c974 <HAL_SPI_Receive+0x334>)
 800c720:	4013      	ands	r3, r2
 800c722:	88f9      	ldrh	r1, [r7, #6]
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	6812      	ldr	r2, [r2, #0]
 800c728:	430b      	orrs	r3, r1
 800c72a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f042 0201 	orr.w	r2, r2, #1
 800c73a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c744:	d107      	bne.n	800c756 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c754:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	2b0f      	cmp	r3, #15
 800c75c:	d96c      	bls.n	800c838 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c75e:	e064      	b.n	800c82a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	695b      	ldr	r3, [r3, #20]
 800c766:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	f003 0301 	and.w	r3, r3, #1
 800c772:	2b01      	cmp	r3, #1
 800c774:	d114      	bne.n	800c7a0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c77e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c780:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c786:	1d1a      	adds	r2, r3, #4
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c792:	b29b      	uxth	r3, r3
 800c794:	3b01      	subs	r3, #1
 800c796:	b29a      	uxth	r2, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c79e:	e044      	b.n	800c82a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	8bfa      	ldrh	r2, [r7, #30]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d919      	bls.n	800c7e2 <HAL_SPI_Receive+0x1a2>
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d014      	beq.n	800c7e2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c7c2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7c8:	1d1a      	adds	r2, r3, #4
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	b29a      	uxth	r2, r3
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c7e0:	e023      	b.n	800c82a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7e2:	f7f8 ff3f 	bl	8005664 <HAL_GetTick>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	1ad3      	subs	r3, r2, r3
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d803      	bhi.n	800c7fa <HAL_SPI_Receive+0x1ba>
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f8:	d102      	bne.n	800c800 <HAL_SPI_Receive+0x1c0>
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d114      	bne.n	800c82a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f000 fcc9 	bl	800d198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c80c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2201      	movs	r2, #1
 800c81a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2200      	movs	r2, #0
 800c822:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c826:	2303      	movs	r3, #3
 800c828:	e178      	b.n	800cb1c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c830:	b29b      	uxth	r3, r3
 800c832:	2b00      	cmp	r3, #0
 800c834:	d194      	bne.n	800c760 <HAL_SPI_Receive+0x120>
 800c836:	e15e      	b.n	800caf6 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	2b07      	cmp	r3, #7
 800c83e:	f240 8153 	bls.w	800cae8 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c842:	e08f      	b.n	800c964 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	695b      	ldr	r3, [r3, #20]
 800c852:	f003 0301 	and.w	r3, r3, #1
 800c856:	2b01      	cmp	r3, #1
 800c858:	d114      	bne.n	800c884 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c85e:	69ba      	ldr	r2, [r7, #24]
 800c860:	8812      	ldrh	r2, [r2, #0]
 800c862:	b292      	uxth	r2, r2
 800c864:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c86a:	1c9a      	adds	r2, r3, #2
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c876:	b29b      	uxth	r3, r3
 800c878:	3b01      	subs	r3, #1
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c882:	e06f      	b.n	800c964 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	8bfa      	ldrh	r2, [r7, #30]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d924      	bls.n	800c8dc <HAL_SPI_Receive+0x29c>
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d01f      	beq.n	800c8dc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8a0:	69ba      	ldr	r2, [r7, #24]
 800c8a2:	8812      	ldrh	r2, [r2, #0]
 800c8a4:	b292      	uxth	r2, r2
 800c8a6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8ac:	1c9a      	adds	r2, r3, #2
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8b6:	69ba      	ldr	r2, [r7, #24]
 800c8b8:	8812      	ldrh	r2, [r2, #0]
 800c8ba:	b292      	uxth	r2, r2
 800c8bc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8c2:	1c9a      	adds	r2, r3, #2
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	3b02      	subs	r3, #2
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8da:	e043      	b.n	800c964 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d119      	bne.n	800c91c <HAL_SPI_Receive+0x2dc>
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d014      	beq.n	800c91c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8f6:	69ba      	ldr	r2, [r7, #24]
 800c8f8:	8812      	ldrh	r2, [r2, #0]
 800c8fa:	b292      	uxth	r2, r2
 800c8fc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c902:	1c9a      	adds	r2, r3, #2
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c90e:	b29b      	uxth	r3, r3
 800c910:	3b01      	subs	r3, #1
 800c912:	b29a      	uxth	r2, r3
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c91a:	e023      	b.n	800c964 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c91c:	f7f8 fea2 	bl	8005664 <HAL_GetTick>
 800c920:	4602      	mov	r2, r0
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	683a      	ldr	r2, [r7, #0]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d803      	bhi.n	800c934 <HAL_SPI_Receive+0x2f4>
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c932:	d102      	bne.n	800c93a <HAL_SPI_Receive+0x2fa>
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d114      	bne.n	800c964 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f000 fc2c 	bl	800d198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c946:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c960:	2303      	movs	r3, #3
 800c962:	e0db      	b.n	800cb1c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f47f af69 	bne.w	800c844 <HAL_SPI_Receive+0x204>
 800c972:	e0c0      	b.n	800caf6 <HAL_SPI_Receive+0x4b6>
 800c974:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	695b      	ldr	r3, [r3, #20]
 800c97e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	f003 0301 	and.w	r3, r3, #1
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d117      	bne.n	800c9be <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c99a:	7812      	ldrb	r2, [r2, #0]
 800c99c:	b2d2      	uxtb	r2, r2
 800c99e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9a4:	1c5a      	adds	r2, r3, #1
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c9bc:	e094      	b.n	800cae8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	8bfa      	ldrh	r2, [r7, #30]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d946      	bls.n	800ca5a <HAL_SPI_Receive+0x41a>
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d041      	beq.n	800ca5a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9e2:	7812      	ldrb	r2, [r2, #0]
 800c9e4:	b2d2      	uxtb	r2, r2
 800c9e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9ec:	1c5a      	adds	r2, r3, #1
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9fe:	7812      	ldrb	r2, [r2, #0]
 800ca00:	b2d2      	uxtb	r2, r2
 800ca02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca08:	1c5a      	adds	r2, r3, #1
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca1a:	7812      	ldrb	r2, [r2, #0]
 800ca1c:	b2d2      	uxtb	r2, r2
 800ca1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca36:	7812      	ldrb	r2, [r2, #0]
 800ca38:	b2d2      	uxtb	r2, r2
 800ca3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca40:	1c5a      	adds	r2, r3, #1
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	3b04      	subs	r3, #4
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ca58:	e046      	b.n	800cae8 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	2b03      	cmp	r3, #3
 800ca64:	d81c      	bhi.n	800caa0 <HAL_SPI_Receive+0x460>
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d017      	beq.n	800caa0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca7c:	7812      	ldrb	r2, [r2, #0]
 800ca7e:	b2d2      	uxtb	r2, r2
 800ca80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca86:	1c5a      	adds	r2, r3, #1
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	3b01      	subs	r3, #1
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ca9e:	e023      	b.n	800cae8 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800caa0:	f7f8 fde0 	bl	8005664 <HAL_GetTick>
 800caa4:	4602      	mov	r2, r0
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	429a      	cmp	r2, r3
 800caae:	d803      	bhi.n	800cab8 <HAL_SPI_Receive+0x478>
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab6:	d102      	bne.n	800cabe <HAL_SPI_Receive+0x47e>
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d114      	bne.n	800cae8 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f000 fb6a 	bl	800d198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800caca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2201      	movs	r2, #1
 800cad8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cae4:	2303      	movs	r3, #3
 800cae6:	e019      	b.n	800cb1c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800caee:	b29b      	uxth	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f47f af41 	bne.w	800c978 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f000 fb4e 	bl	800d198 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	e000      	b.n	800cb1c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800cb1a:	2300      	movs	r3, #0
  }
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3720      	adds	r7, #32
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b08e      	sub	sp, #56	@ 0x38
 800cb28:	af02      	add	r7, sp, #8
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
 800cb30:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	3320      	adds	r3, #32
 800cb38:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	3330      	adds	r3, #48	@ 0x30
 800cb40:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb46:	095b      	lsrs	r3, r3, #5
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cb4e:	f7f8 fd89 	bl	8005664 <HAL_GetTick>
 800cb52:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800cb54:	887b      	ldrh	r3, [r7, #2]
 800cb56:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800cb58:	887b      	ldrh	r3, [r7, #2]
 800cb5a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d001      	beq.n	800cb6c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800cb68:	2302      	movs	r3, #2
 800cb6a:	e310      	b.n	800d18e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d005      	beq.n	800cb7e <HAL_SPI_TransmitReceive+0x5a>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d002      	beq.n	800cb7e <HAL_SPI_TransmitReceive+0x5a>
 800cb78:	887b      	ldrh	r3, [r7, #2]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e305      	b.n	800d18e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d101      	bne.n	800cb90 <HAL_SPI_TransmitReceive+0x6c>
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	e2fe      	b.n	800d18e <HAL_SPI_TransmitReceive+0x66a>
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2205      	movs	r2, #5
 800cb9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	887a      	ldrh	r2, [r7, #2]
 800cbb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	887a      	ldrh	r2, [r7, #2]
 800cbba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	887a      	ldrh	r2, [r7, #2]
 800cbc8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	887a      	ldrh	r2, [r7, #2]
 800cbd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	68da      	ldr	r2, [r3, #12]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800cbee:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a70      	ldr	r2, [pc, #448]	@ (800cdb8 <HAL_SPI_TransmitReceive+0x294>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d009      	beq.n	800cc0e <HAL_SPI_TransmitReceive+0xea>
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a6f      	ldr	r2, [pc, #444]	@ (800cdbc <HAL_SPI_TransmitReceive+0x298>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d004      	beq.n	800cc0e <HAL_SPI_TransmitReceive+0xea>
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a6d      	ldr	r2, [pc, #436]	@ (800cdc0 <HAL_SPI_TransmitReceive+0x29c>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d102      	bne.n	800cc14 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800cc0e:	2310      	movs	r3, #16
 800cc10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc12:	e001      	b.n	800cc18 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800cc14:	2308      	movs	r3, #8
 800cc16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	685a      	ldr	r2, [r3, #4]
 800cc1e:	4b69      	ldr	r3, [pc, #420]	@ (800cdc4 <HAL_SPI_TransmitReceive+0x2a0>)
 800cc20:	4013      	ands	r3, r2
 800cc22:	8879      	ldrh	r1, [r7, #2]
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	6812      	ldr	r2, [r2, #0]
 800cc28:	430b      	orrs	r3, r1
 800cc2a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f042 0201 	orr.w	r2, r2, #1
 800cc3a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cc44:	d107      	bne.n	800cc56 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	2b0f      	cmp	r3, #15
 800cc5c:	f240 80a2 	bls.w	800cda4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800cc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc62:	089b      	lsrs	r3, r3, #2
 800cc64:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cc66:	e094      	b.n	800cd92 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	695b      	ldr	r3, [r3, #20]
 800cc6e:	f003 0302 	and.w	r3, r3, #2
 800cc72:	2b02      	cmp	r3, #2
 800cc74:	d120      	bne.n	800ccb8 <HAL_SPI_TransmitReceive+0x194>
 800cc76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d01d      	beq.n	800ccb8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cc7c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cc7e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc82:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d217      	bcs.n	800ccb8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6812      	ldr	r2, [r2, #0]
 800cc92:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc98:	1d1a      	adds	r2, r3, #4
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	3b01      	subs	r3, #1
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ccb6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	695b      	ldr	r3, [r3, #20]
 800ccbe:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ccc0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d065      	beq.n	800cd92 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	695b      	ldr	r3, [r3, #20]
 800cccc:	f003 0301 	and.w	r3, r3, #1
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d118      	bne.n	800cd06 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ccdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ccde:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cce4:	1d1a      	adds	r2, r3, #4
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd02:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cd04:	e045      	b.n	800cd92 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cd06:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cd08:	8bfb      	ldrh	r3, [r7, #30]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d21d      	bcs.n	800cd4a <HAL_SPI_TransmitReceive+0x226>
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d018      	beq.n	800cd4a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cd22:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd28:	1d1a      	adds	r2, r3, #4
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	3b01      	subs	r3, #1
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cd46:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cd48:	e023      	b.n	800cd92 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd4a:	f7f8 fc8b 	bl	8005664 <HAL_GetTick>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d803      	bhi.n	800cd62 <HAL_SPI_TransmitReceive+0x23e>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd60:	d102      	bne.n	800cd68 <HAL_SPI_TransmitReceive+0x244>
 800cd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d114      	bne.n	800cd92 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f000 fa15 	bl	800d198 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cd8e:	2303      	movs	r3, #3
 800cd90:	e1fd      	b.n	800d18e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cd92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f47f af67 	bne.w	800cc68 <HAL_SPI_TransmitReceive+0x144>
 800cd9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f47f af63 	bne.w	800cc68 <HAL_SPI_TransmitReceive+0x144>
 800cda2:	e1ce      	b.n	800d142 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	2b07      	cmp	r3, #7
 800cdaa:	f240 81c2 	bls.w	800d132 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800cdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb0:	085b      	lsrs	r3, r3, #1
 800cdb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cdb4:	e0c9      	b.n	800cf4a <HAL_SPI_TransmitReceive+0x426>
 800cdb6:	bf00      	nop
 800cdb8:	40013000 	.word	0x40013000
 800cdbc:	40003800 	.word	0x40003800
 800cdc0:	40003c00 	.word	0x40003c00
 800cdc4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	695b      	ldr	r3, [r3, #20]
 800cdce:	f003 0302 	and.w	r3, r3, #2
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d11f      	bne.n	800ce16 <HAL_SPI_TransmitReceive+0x2f2>
 800cdd6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d01c      	beq.n	800ce16 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cddc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cdde:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d216      	bcs.n	800ce16 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdec:	881a      	ldrh	r2, [r3, #0]
 800cdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdf6:	1c9a      	adds	r2, r3, #2
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	3b01      	subs	r3, #1
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ce14:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	695b      	ldr	r3, [r3, #20]
 800ce1c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ce1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f000 8092 	beq.w	800cf4a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	695b      	ldr	r3, [r3, #20]
 800ce2c:	f003 0301 	and.w	r3, r3, #1
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d118      	bne.n	800ce66 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce38:	6a3a      	ldr	r2, [r7, #32]
 800ce3a:	8812      	ldrh	r2, [r2, #0]
 800ce3c:	b292      	uxth	r2, r2
 800ce3e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce44:	1c9a      	adds	r2, r3, #2
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	3b01      	subs	r3, #1
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce62:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ce64:	e071      	b.n	800cf4a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ce66:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ce68:	8bfb      	ldrh	r3, [r7, #30]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d228      	bcs.n	800cec0 <HAL_SPI_TransmitReceive+0x39c>
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d023      	beq.n	800cec0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce7c:	6a3a      	ldr	r2, [r7, #32]
 800ce7e:	8812      	ldrh	r2, [r2, #0]
 800ce80:	b292      	uxth	r2, r2
 800ce82:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce88:	1c9a      	adds	r2, r3, #2
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce92:	6a3a      	ldr	r2, [r7, #32]
 800ce94:	8812      	ldrh	r2, [r2, #0]
 800ce96:	b292      	uxth	r2, r2
 800ce98:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce9e:	1c9a      	adds	r2, r3, #2
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	3b02      	subs	r3, #2
 800ceae:	b29a      	uxth	r2, r3
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cebc:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cebe:	e044      	b.n	800cf4a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cec0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d11d      	bne.n	800cf02 <HAL_SPI_TransmitReceive+0x3de>
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d018      	beq.n	800cf02 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ced4:	6a3a      	ldr	r2, [r7, #32]
 800ced6:	8812      	ldrh	r2, [r2, #0]
 800ced8:	b292      	uxth	r2, r2
 800ceda:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cee0:	1c9a      	adds	r2, r3, #2
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	3b01      	subs	r3, #1
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cefe:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cf00:	e023      	b.n	800cf4a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf02:	f7f8 fbaf 	bl	8005664 <HAL_GetTick>
 800cf06:	4602      	mov	r2, r0
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d803      	bhi.n	800cf1a <HAL_SPI_TransmitReceive+0x3f6>
 800cf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf18:	d102      	bne.n	800cf20 <HAL_SPI_TransmitReceive+0x3fc>
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d114      	bne.n	800cf4a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f000 f939 	bl	800d198 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800cf46:	2303      	movs	r3, #3
 800cf48:	e121      	b.n	800d18e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f47f af3b 	bne.w	800cdc8 <HAL_SPI_TransmitReceive+0x2a4>
 800cf52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f47f af37 	bne.w	800cdc8 <HAL_SPI_TransmitReceive+0x2a4>
 800cf5a:	e0f2      	b.n	800d142 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	695b      	ldr	r3, [r3, #20]
 800cf62:	f003 0302 	and.w	r3, r3, #2
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d121      	bne.n	800cfae <HAL_SPI_TransmitReceive+0x48a>
 800cf6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d01e      	beq.n	800cfae <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800cf70:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cf72:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800cf74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf76:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d218      	bcs.n	800cfae <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	3320      	adds	r3, #32
 800cf86:	7812      	ldrb	r2, [r2, #0]
 800cf88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf8e:	1c5a      	adds	r2, r3, #1
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cfac:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	695b      	ldr	r3, [r3, #20]
 800cfb4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800cfb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 80ba 	beq.w	800d132 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	695b      	ldr	r3, [r3, #20]
 800cfc4:	f003 0301 	and.w	r3, r3, #1
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d11b      	bne.n	800d004 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfd8:	7812      	ldrb	r2, [r2, #0]
 800cfda:	b2d2      	uxtb	r2, r2
 800cfdc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfe2:	1c5a      	adds	r2, r3, #1
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	3b01      	subs	r3, #1
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d000:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d002:	e096      	b.n	800d132 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d004:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d006:	8bfb      	ldrh	r3, [r7, #30]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d24a      	bcs.n	800d0a2 <HAL_SPI_TransmitReceive+0x57e>
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d012:	2b00      	cmp	r3, #0
 800d014:	d045      	beq.n	800d0a2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d022:	7812      	ldrb	r2, [r2, #0]
 800d024:	b2d2      	uxtb	r2, r2
 800d026:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d02c:	1c5a      	adds	r2, r3, #1
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d03e:	7812      	ldrb	r2, [r2, #0]
 800d040:	b2d2      	uxtb	r2, r2
 800d042:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d05a:	7812      	ldrb	r2, [r2, #0]
 800d05c:	b2d2      	uxtb	r2, r2
 800d05e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d064:	1c5a      	adds	r2, r3, #1
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d076:	7812      	ldrb	r2, [r2, #0]
 800d078:	b2d2      	uxtb	r2, r2
 800d07a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d080:	1c5a      	adds	r2, r3, #1
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	3b04      	subs	r3, #4
 800d090:	b29a      	uxth	r2, r3
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d09e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d0a0:	e047      	b.n	800d132 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d0a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d0a4:	2b03      	cmp	r3, #3
 800d0a6:	d820      	bhi.n	800d0ea <HAL_SPI_TransmitReceive+0x5c6>
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d01b      	beq.n	800d0ea <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0be:	7812      	ldrb	r2, [r2, #0]
 800d0c0:	b2d2      	uxtb	r2, r2
 800d0c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0c8:	1c5a      	adds	r2, r3, #1
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d0e8:	e023      	b.n	800d132 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0ea:	f7f8 fabb 	bl	8005664 <HAL_GetTick>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d803      	bhi.n	800d102 <HAL_SPI_TransmitReceive+0x5de>
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d100:	d102      	bne.n	800d108 <HAL_SPI_TransmitReceive+0x5e4>
 800d102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d104:	2b00      	cmp	r3, #0
 800d106:	d114      	bne.n	800d132 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f000 f845 	bl	800d198 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d114:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d12e:	2303      	movs	r3, #3
 800d130:	e02d      	b.n	800d18e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d132:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d134:	2b00      	cmp	r3, #0
 800d136:	f47f af11 	bne.w	800cf5c <HAL_SPI_TransmitReceive+0x438>
 800d13a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f47f af0d 	bne.w	800cf5c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	9300      	str	r3, [sp, #0]
 800d146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d148:	2200      	movs	r2, #0
 800d14a:	2108      	movs	r1, #8
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f000 f8c3 	bl	800d2d8 <SPI_WaitOnFlagUntilTimeout>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d007      	beq.n	800d168 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d15e:	f043 0220 	orr.w	r2, r3, #32
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f000 f815 	bl	800d198 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2200      	movs	r2, #0
 800d17a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d184:	2b00      	cmp	r3, #0
 800d186:	d001      	beq.n	800d18c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800d188:	2301      	movs	r3, #1
 800d18a:	e000      	b.n	800d18e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800d18c:	2300      	movs	r3, #0
  }
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3730      	adds	r7, #48	@ 0x30
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop

0800d198 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	699a      	ldr	r2, [r3, #24]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f042 0208 	orr.w	r2, r2, #8
 800d1b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	699a      	ldr	r2, [r3, #24]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f042 0210 	orr.w	r2, r2, #16
 800d1c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f022 0201 	bic.w	r2, r2, #1
 800d1d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6919      	ldr	r1, [r3, #16]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	4b3c      	ldr	r3, [pc, #240]	@ (800d2d4 <SPI_CloseTransfer+0x13c>)
 800d1e4:	400b      	ands	r3, r1
 800d1e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	689a      	ldr	r2, [r3, #8]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d1f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	2b04      	cmp	r3, #4
 800d202:	d014      	beq.n	800d22e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f003 0320 	and.w	r3, r3, #32
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00f      	beq.n	800d22e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d214:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	699a      	ldr	r2, [r3, #24]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f042 0220 	orr.w	r2, r2, #32
 800d22c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b03      	cmp	r3, #3
 800d238:	d014      	beq.n	800d264 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00f      	beq.n	800d264 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d24a:	f043 0204 	orr.w	r2, r3, #4
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	699a      	ldr	r2, [r3, #24]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d262:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00f      	beq.n	800d28e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d274:	f043 0201 	orr.w	r2, r3, #1
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	699a      	ldr	r2, [r3, #24]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d28c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00f      	beq.n	800d2b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d29e:	f043 0208 	orr.w	r2, r3, #8
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	699a      	ldr	r2, [r3, #24]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d2b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d2c8:	bf00      	nop
 800d2ca:	3714      	adds	r7, #20
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	fffffc90 	.word	0xfffffc90

0800d2d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	603b      	str	r3, [r7, #0]
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d2e8:	e010      	b.n	800d30c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2ea:	f7f8 f9bb 	bl	8005664 <HAL_GetTick>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	683a      	ldr	r2, [r7, #0]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d803      	bhi.n	800d302 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d300:	d102      	bne.n	800d308 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d101      	bne.n	800d30c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d308:	2303      	movs	r3, #3
 800d30a:	e00f      	b.n	800d32c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	695a      	ldr	r2, [r3, #20]
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	4013      	ands	r3, r2
 800d316:	68ba      	ldr	r2, [r7, #8]
 800d318:	429a      	cmp	r2, r3
 800d31a:	bf0c      	ite	eq
 800d31c:	2301      	moveq	r3, #1
 800d31e:	2300      	movne	r3, #0
 800d320:	b2db      	uxtb	r3, r3
 800d322:	461a      	mov	r2, r3
 800d324:	79fb      	ldrb	r3, [r7, #7]
 800d326:	429a      	cmp	r2, r3
 800d328:	d0df      	beq.n	800d2ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d32a:	2300      	movs	r3, #0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3710      	adds	r7, #16
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d340:	095b      	lsrs	r3, r3, #5
 800d342:	3301      	adds	r3, #1
 800d344:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	3301      	adds	r3, #1
 800d34c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	3307      	adds	r3, #7
 800d352:	08db      	lsrs	r3, r3, #3
 800d354:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	fb02 f303 	mul.w	r3, r2, r3
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3714      	adds	r7, #20
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr

0800d36a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b082      	sub	sp, #8
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d101      	bne.n	800d37c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d378:	2301      	movs	r3, #1
 800d37a:	e049      	b.n	800d410 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d382:	b2db      	uxtb	r3, r3
 800d384:	2b00      	cmp	r3, #0
 800d386:	d106      	bne.n	800d396 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f7f7 fc5b 	bl	8004c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2202      	movs	r2, #2
 800d39a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	f000 fc57 	bl	800dc5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2201      	movs	r2, #1
 800d402:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2201      	movs	r2, #1
 800d40a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d426:	b2db      	uxtb	r3, r3
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d001      	beq.n	800d430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d42c:	2301      	movs	r3, #1
 800d42e:	e054      	b.n	800d4da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2202      	movs	r2, #2
 800d434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	68da      	ldr	r2, [r3, #12]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f042 0201 	orr.w	r2, r2, #1
 800d446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a26      	ldr	r2, [pc, #152]	@ (800d4e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d022      	beq.n	800d498 <HAL_TIM_Base_Start_IT+0x80>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d45a:	d01d      	beq.n	800d498 <HAL_TIM_Base_Start_IT+0x80>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a22      	ldr	r2, [pc, #136]	@ (800d4ec <HAL_TIM_Base_Start_IT+0xd4>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d018      	beq.n	800d498 <HAL_TIM_Base_Start_IT+0x80>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a21      	ldr	r2, [pc, #132]	@ (800d4f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d013      	beq.n	800d498 <HAL_TIM_Base_Start_IT+0x80>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a1f      	ldr	r2, [pc, #124]	@ (800d4f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d00e      	beq.n	800d498 <HAL_TIM_Base_Start_IT+0x80>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a1e      	ldr	r2, [pc, #120]	@ (800d4f8 <HAL_TIM_Base_Start_IT+0xe0>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d009      	beq.n	800d498 <HAL_TIM_Base_Start_IT+0x80>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a1c      	ldr	r2, [pc, #112]	@ (800d4fc <HAL_TIM_Base_Start_IT+0xe4>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d004      	beq.n	800d498 <HAL_TIM_Base_Start_IT+0x80>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a1b      	ldr	r2, [pc, #108]	@ (800d500 <HAL_TIM_Base_Start_IT+0xe8>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d115      	bne.n	800d4c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	689a      	ldr	r2, [r3, #8]
 800d49e:	4b19      	ldr	r3, [pc, #100]	@ (800d504 <HAL_TIM_Base_Start_IT+0xec>)
 800d4a0:	4013      	ands	r3, r2
 800d4a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2b06      	cmp	r3, #6
 800d4a8:	d015      	beq.n	800d4d6 <HAL_TIM_Base_Start_IT+0xbe>
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4b0:	d011      	beq.n	800d4d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f042 0201 	orr.w	r2, r2, #1
 800d4c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4c2:	e008      	b.n	800d4d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f042 0201 	orr.w	r2, r2, #1
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	e000      	b.n	800d4d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	40010000 	.word	0x40010000
 800d4ec:	40000400 	.word	0x40000400
 800d4f0:	40000800 	.word	0x40000800
 800d4f4:	40000c00 	.word	0x40000c00
 800d4f8:	40010400 	.word	0x40010400
 800d4fc:	40001800 	.word	0x40001800
 800d500:	40014000 	.word	0x40014000
 800d504:	00010007 	.word	0x00010007

0800d508 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d101      	bne.n	800d51a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e049      	b.n	800d5ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	d106      	bne.n	800d534 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f7f7 fb3e 	bl	8004bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2202      	movs	r2, #2
 800d538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	3304      	adds	r3, #4
 800d544:	4619      	mov	r1, r3
 800d546:	4610      	mov	r0, r2
 800d548:	f000 fb88 	bl	800dc5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2201      	movs	r2, #1
 800d560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2201      	movs	r2, #1
 800d570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2201      	movs	r2, #1
 800d598:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d5ac:	2300      	movs	r3, #0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
	...

0800d5b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d109      	bne.n	800d5dc <HAL_TIM_PWM_Start+0x24>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	bf14      	ite	ne
 800d5d4:	2301      	movne	r3, #1
 800d5d6:	2300      	moveq	r3, #0
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	e03c      	b.n	800d656 <HAL_TIM_PWM_Start+0x9e>
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	2b04      	cmp	r3, #4
 800d5e0:	d109      	bne.n	800d5f6 <HAL_TIM_PWM_Start+0x3e>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	bf14      	ite	ne
 800d5ee:	2301      	movne	r3, #1
 800d5f0:	2300      	moveq	r3, #0
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	e02f      	b.n	800d656 <HAL_TIM_PWM_Start+0x9e>
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	2b08      	cmp	r3, #8
 800d5fa:	d109      	bne.n	800d610 <HAL_TIM_PWM_Start+0x58>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d602:	b2db      	uxtb	r3, r3
 800d604:	2b01      	cmp	r3, #1
 800d606:	bf14      	ite	ne
 800d608:	2301      	movne	r3, #1
 800d60a:	2300      	moveq	r3, #0
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	e022      	b.n	800d656 <HAL_TIM_PWM_Start+0x9e>
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	2b0c      	cmp	r3, #12
 800d614:	d109      	bne.n	800d62a <HAL_TIM_PWM_Start+0x72>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	2b01      	cmp	r3, #1
 800d620:	bf14      	ite	ne
 800d622:	2301      	movne	r3, #1
 800d624:	2300      	moveq	r3, #0
 800d626:	b2db      	uxtb	r3, r3
 800d628:	e015      	b.n	800d656 <HAL_TIM_PWM_Start+0x9e>
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	2b10      	cmp	r3, #16
 800d62e:	d109      	bne.n	800d644 <HAL_TIM_PWM_Start+0x8c>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d636:	b2db      	uxtb	r3, r3
 800d638:	2b01      	cmp	r3, #1
 800d63a:	bf14      	ite	ne
 800d63c:	2301      	movne	r3, #1
 800d63e:	2300      	moveq	r3, #0
 800d640:	b2db      	uxtb	r3, r3
 800d642:	e008      	b.n	800d656 <HAL_TIM_PWM_Start+0x9e>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	bf14      	ite	ne
 800d650:	2301      	movne	r3, #1
 800d652:	2300      	moveq	r3, #0
 800d654:	b2db      	uxtb	r3, r3
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	e0a1      	b.n	800d7a2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d104      	bne.n	800d66e <HAL_TIM_PWM_Start+0xb6>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2202      	movs	r2, #2
 800d668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d66c:	e023      	b.n	800d6b6 <HAL_TIM_PWM_Start+0xfe>
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2b04      	cmp	r3, #4
 800d672:	d104      	bne.n	800d67e <HAL_TIM_PWM_Start+0xc6>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2202      	movs	r2, #2
 800d678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d67c:	e01b      	b.n	800d6b6 <HAL_TIM_PWM_Start+0xfe>
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	2b08      	cmp	r3, #8
 800d682:	d104      	bne.n	800d68e <HAL_TIM_PWM_Start+0xd6>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2202      	movs	r2, #2
 800d688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d68c:	e013      	b.n	800d6b6 <HAL_TIM_PWM_Start+0xfe>
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	2b0c      	cmp	r3, #12
 800d692:	d104      	bne.n	800d69e <HAL_TIM_PWM_Start+0xe6>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2202      	movs	r2, #2
 800d698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d69c:	e00b      	b.n	800d6b6 <HAL_TIM_PWM_Start+0xfe>
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	2b10      	cmp	r3, #16
 800d6a2:	d104      	bne.n	800d6ae <HAL_TIM_PWM_Start+0xf6>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2202      	movs	r2, #2
 800d6a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d6ac:	e003      	b.n	800d6b6 <HAL_TIM_PWM_Start+0xfe>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2202      	movs	r2, #2
 800d6b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	6839      	ldr	r1, [r7, #0]
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f000 fe48 	bl	800e354 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4a38      	ldr	r2, [pc, #224]	@ (800d7ac <HAL_TIM_PWM_Start+0x1f4>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d013      	beq.n	800d6f6 <HAL_TIM_PWM_Start+0x13e>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a37      	ldr	r2, [pc, #220]	@ (800d7b0 <HAL_TIM_PWM_Start+0x1f8>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d00e      	beq.n	800d6f6 <HAL_TIM_PWM_Start+0x13e>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a35      	ldr	r2, [pc, #212]	@ (800d7b4 <HAL_TIM_PWM_Start+0x1fc>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d009      	beq.n	800d6f6 <HAL_TIM_PWM_Start+0x13e>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a34      	ldr	r2, [pc, #208]	@ (800d7b8 <HAL_TIM_PWM_Start+0x200>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d004      	beq.n	800d6f6 <HAL_TIM_PWM_Start+0x13e>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a32      	ldr	r2, [pc, #200]	@ (800d7bc <HAL_TIM_PWM_Start+0x204>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d101      	bne.n	800d6fa <HAL_TIM_PWM_Start+0x142>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e000      	b.n	800d6fc <HAL_TIM_PWM_Start+0x144>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d007      	beq.n	800d710 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d70e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a25      	ldr	r2, [pc, #148]	@ (800d7ac <HAL_TIM_PWM_Start+0x1f4>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d022      	beq.n	800d760 <HAL_TIM_PWM_Start+0x1a8>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d722:	d01d      	beq.n	800d760 <HAL_TIM_PWM_Start+0x1a8>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a25      	ldr	r2, [pc, #148]	@ (800d7c0 <HAL_TIM_PWM_Start+0x208>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d018      	beq.n	800d760 <HAL_TIM_PWM_Start+0x1a8>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a24      	ldr	r2, [pc, #144]	@ (800d7c4 <HAL_TIM_PWM_Start+0x20c>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d013      	beq.n	800d760 <HAL_TIM_PWM_Start+0x1a8>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a22      	ldr	r2, [pc, #136]	@ (800d7c8 <HAL_TIM_PWM_Start+0x210>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d00e      	beq.n	800d760 <HAL_TIM_PWM_Start+0x1a8>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4a1a      	ldr	r2, [pc, #104]	@ (800d7b0 <HAL_TIM_PWM_Start+0x1f8>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	d009      	beq.n	800d760 <HAL_TIM_PWM_Start+0x1a8>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a1e      	ldr	r2, [pc, #120]	@ (800d7cc <HAL_TIM_PWM_Start+0x214>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d004      	beq.n	800d760 <HAL_TIM_PWM_Start+0x1a8>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a16      	ldr	r2, [pc, #88]	@ (800d7b4 <HAL_TIM_PWM_Start+0x1fc>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d115      	bne.n	800d78c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	689a      	ldr	r2, [r3, #8]
 800d766:	4b1a      	ldr	r3, [pc, #104]	@ (800d7d0 <HAL_TIM_PWM_Start+0x218>)
 800d768:	4013      	ands	r3, r2
 800d76a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2b06      	cmp	r3, #6
 800d770:	d015      	beq.n	800d79e <HAL_TIM_PWM_Start+0x1e6>
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d778:	d011      	beq.n	800d79e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f042 0201 	orr.w	r2, r2, #1
 800d788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d78a:	e008      	b.n	800d79e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f042 0201 	orr.w	r2, r2, #1
 800d79a:	601a      	str	r2, [r3, #0]
 800d79c:	e000      	b.n	800d7a0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d79e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	40010000 	.word	0x40010000
 800d7b0:	40010400 	.word	0x40010400
 800d7b4:	40014000 	.word	0x40014000
 800d7b8:	40014400 	.word	0x40014400
 800d7bc:	40014800 	.word	0x40014800
 800d7c0:	40000400 	.word	0x40000400
 800d7c4:	40000800 	.word	0x40000800
 800d7c8:	40000c00 	.word	0x40000c00
 800d7cc:	40001800 	.word	0x40001800
 800d7d0:	00010007 	.word	0x00010007

0800d7d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	691b      	ldr	r3, [r3, #16]
 800d7ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	f003 0302 	and.w	r3, r3, #2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d020      	beq.n	800d838 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f003 0302 	and.w	r3, r3, #2
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d01b      	beq.n	800d838 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f06f 0202 	mvn.w	r2, #2
 800d808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2201      	movs	r2, #1
 800d80e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	699b      	ldr	r3, [r3, #24]
 800d816:	f003 0303 	and.w	r3, r3, #3
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d003      	beq.n	800d826 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f9fe 	bl	800dc20 <HAL_TIM_IC_CaptureCallback>
 800d824:	e005      	b.n	800d832 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f9f0 	bl	800dc0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 fa01 	bl	800dc34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	f003 0304 	and.w	r3, r3, #4
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d020      	beq.n	800d884 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f003 0304 	and.w	r3, r3, #4
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d01b      	beq.n	800d884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f06f 0204 	mvn.w	r2, #4
 800d854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2202      	movs	r2, #2
 800d85a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	699b      	ldr	r3, [r3, #24]
 800d862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d866:	2b00      	cmp	r3, #0
 800d868:	d003      	beq.n	800d872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f9d8 	bl	800dc20 <HAL_TIM_IC_CaptureCallback>
 800d870:	e005      	b.n	800d87e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f9ca 	bl	800dc0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f000 f9db 	bl	800dc34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	f003 0308 	and.w	r3, r3, #8
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d020      	beq.n	800d8d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f003 0308 	and.w	r3, r3, #8
 800d894:	2b00      	cmp	r3, #0
 800d896:	d01b      	beq.n	800d8d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f06f 0208 	mvn.w	r2, #8
 800d8a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2204      	movs	r2, #4
 800d8a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	69db      	ldr	r3, [r3, #28]
 800d8ae:	f003 0303 	and.w	r3, r3, #3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d003      	beq.n	800d8be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f9b2 	bl	800dc20 <HAL_TIM_IC_CaptureCallback>
 800d8bc:	e005      	b.n	800d8ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 f9a4 	bl	800dc0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 f9b5 	bl	800dc34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	f003 0310 	and.w	r3, r3, #16
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d020      	beq.n	800d91c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f003 0310 	and.w	r3, r3, #16
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d01b      	beq.n	800d91c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f06f 0210 	mvn.w	r2, #16
 800d8ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2208      	movs	r2, #8
 800d8f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	69db      	ldr	r3, [r3, #28]
 800d8fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d003      	beq.n	800d90a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f98c 	bl	800dc20 <HAL_TIM_IC_CaptureCallback>
 800d908:	e005      	b.n	800d916 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f97e 	bl	800dc0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 f98f 	bl	800dc34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	f003 0301 	and.w	r3, r3, #1
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00c      	beq.n	800d940 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d007      	beq.n	800d940 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f06f 0201 	mvn.w	r2, #1
 800d938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7f6 fb94 	bl	8004068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d946:	2b00      	cmp	r3, #0
 800d948:	d104      	bne.n	800d954 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00c      	beq.n	800d96e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d007      	beq.n	800d96e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 fdb1 	bl	800e4d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00c      	beq.n	800d992 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d007      	beq.n	800d992 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d98a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 fda9 	bl	800e4e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d00c      	beq.n	800d9b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d007      	beq.n	800d9b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d9ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f949 	bl	800dc48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	f003 0320 	and.w	r3, r3, #32
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00c      	beq.n	800d9da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f003 0320 	and.w	r3, r3, #32
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d007      	beq.n	800d9da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f06f 0220 	mvn.w	r2, #32
 800d9d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 fd71 	bl	800e4bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d9da:	bf00      	nop
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
	...

0800d9e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d101      	bne.n	800da02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d9fe:	2302      	movs	r3, #2
 800da00:	e0ff      	b.n	800dc02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2201      	movs	r2, #1
 800da06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b14      	cmp	r3, #20
 800da0e:	f200 80f0 	bhi.w	800dbf2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800da12:	a201      	add	r2, pc, #4	@ (adr r2, 800da18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800da14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da18:	0800da6d 	.word	0x0800da6d
 800da1c:	0800dbf3 	.word	0x0800dbf3
 800da20:	0800dbf3 	.word	0x0800dbf3
 800da24:	0800dbf3 	.word	0x0800dbf3
 800da28:	0800daad 	.word	0x0800daad
 800da2c:	0800dbf3 	.word	0x0800dbf3
 800da30:	0800dbf3 	.word	0x0800dbf3
 800da34:	0800dbf3 	.word	0x0800dbf3
 800da38:	0800daef 	.word	0x0800daef
 800da3c:	0800dbf3 	.word	0x0800dbf3
 800da40:	0800dbf3 	.word	0x0800dbf3
 800da44:	0800dbf3 	.word	0x0800dbf3
 800da48:	0800db2f 	.word	0x0800db2f
 800da4c:	0800dbf3 	.word	0x0800dbf3
 800da50:	0800dbf3 	.word	0x0800dbf3
 800da54:	0800dbf3 	.word	0x0800dbf3
 800da58:	0800db71 	.word	0x0800db71
 800da5c:	0800dbf3 	.word	0x0800dbf3
 800da60:	0800dbf3 	.word	0x0800dbf3
 800da64:	0800dbf3 	.word	0x0800dbf3
 800da68:	0800dbb1 	.word	0x0800dbb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	68b9      	ldr	r1, [r7, #8]
 800da72:	4618      	mov	r0, r3
 800da74:	f000 f998 	bl	800dda8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	699a      	ldr	r2, [r3, #24]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f042 0208 	orr.w	r2, r2, #8
 800da86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	699a      	ldr	r2, [r3, #24]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f022 0204 	bic.w	r2, r2, #4
 800da96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	6999      	ldr	r1, [r3, #24]
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	691a      	ldr	r2, [r3, #16]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	430a      	orrs	r2, r1
 800daa8:	619a      	str	r2, [r3, #24]
      break;
 800daaa:	e0a5      	b.n	800dbf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	68b9      	ldr	r1, [r7, #8]
 800dab2:	4618      	mov	r0, r3
 800dab4:	f000 fa08 	bl	800dec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	699a      	ldr	r2, [r3, #24]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	699a      	ldr	r2, [r3, #24]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6999      	ldr	r1, [r3, #24]
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	691b      	ldr	r3, [r3, #16]
 800dae2:	021a      	lsls	r2, r3, #8
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	430a      	orrs	r2, r1
 800daea:	619a      	str	r2, [r3, #24]
      break;
 800daec:	e084      	b.n	800dbf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68b9      	ldr	r1, [r7, #8]
 800daf4:	4618      	mov	r0, r3
 800daf6:	f000 fa71 	bl	800dfdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	69da      	ldr	r2, [r3, #28]
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f042 0208 	orr.w	r2, r2, #8
 800db08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	69da      	ldr	r2, [r3, #28]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f022 0204 	bic.w	r2, r2, #4
 800db18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	69d9      	ldr	r1, [r3, #28]
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	691a      	ldr	r2, [r3, #16]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	430a      	orrs	r2, r1
 800db2a:	61da      	str	r2, [r3, #28]
      break;
 800db2c:	e064      	b.n	800dbf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	68b9      	ldr	r1, [r7, #8]
 800db34:	4618      	mov	r0, r3
 800db36:	f000 fad9 	bl	800e0ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	69da      	ldr	r2, [r3, #28]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800db48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	69da      	ldr	r2, [r3, #28]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	69d9      	ldr	r1, [r3, #28]
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	691b      	ldr	r3, [r3, #16]
 800db64:	021a      	lsls	r2, r3, #8
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	430a      	orrs	r2, r1
 800db6c:	61da      	str	r2, [r3, #28]
      break;
 800db6e:	e043      	b.n	800dbf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	68b9      	ldr	r1, [r7, #8]
 800db76:	4618      	mov	r0, r3
 800db78:	f000 fb22 	bl	800e1c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f042 0208 	orr.w	r2, r2, #8
 800db8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f022 0204 	bic.w	r2, r2, #4
 800db9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	691a      	ldr	r2, [r3, #16]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	430a      	orrs	r2, r1
 800dbac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dbae:	e023      	b.n	800dbf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	68b9      	ldr	r1, [r7, #8]
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f000 fb66 	bl	800e288 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dbca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	021a      	lsls	r2, r3, #8
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	430a      	orrs	r2, r1
 800dbee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dbf0:	e002      	b.n	800dbf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	75fb      	strb	r3, [r7, #23]
      break;
 800dbf6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dc00:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3718      	adds	r7, #24
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop

0800dc0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc14:	bf00      	nop
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc28:	bf00      	nop
 800dc2a:	370c      	adds	r7, #12
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc3c:	bf00      	nop
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc50:	bf00      	nop
 800dc52:	370c      	adds	r7, #12
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr

0800dc5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a46      	ldr	r2, [pc, #280]	@ (800dd88 <TIM_Base_SetConfig+0x12c>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d013      	beq.n	800dc9c <TIM_Base_SetConfig+0x40>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc7a:	d00f      	beq.n	800dc9c <TIM_Base_SetConfig+0x40>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a43      	ldr	r2, [pc, #268]	@ (800dd8c <TIM_Base_SetConfig+0x130>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d00b      	beq.n	800dc9c <TIM_Base_SetConfig+0x40>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	4a42      	ldr	r2, [pc, #264]	@ (800dd90 <TIM_Base_SetConfig+0x134>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d007      	beq.n	800dc9c <TIM_Base_SetConfig+0x40>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	4a41      	ldr	r2, [pc, #260]	@ (800dd94 <TIM_Base_SetConfig+0x138>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d003      	beq.n	800dc9c <TIM_Base_SetConfig+0x40>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4a40      	ldr	r2, [pc, #256]	@ (800dd98 <TIM_Base_SetConfig+0x13c>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d108      	bne.n	800dcae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a35      	ldr	r2, [pc, #212]	@ (800dd88 <TIM_Base_SetConfig+0x12c>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d01f      	beq.n	800dcf6 <TIM_Base_SetConfig+0x9a>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcbc:	d01b      	beq.n	800dcf6 <TIM_Base_SetConfig+0x9a>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a32      	ldr	r2, [pc, #200]	@ (800dd8c <TIM_Base_SetConfig+0x130>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d017      	beq.n	800dcf6 <TIM_Base_SetConfig+0x9a>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4a31      	ldr	r2, [pc, #196]	@ (800dd90 <TIM_Base_SetConfig+0x134>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d013      	beq.n	800dcf6 <TIM_Base_SetConfig+0x9a>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a30      	ldr	r2, [pc, #192]	@ (800dd94 <TIM_Base_SetConfig+0x138>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d00f      	beq.n	800dcf6 <TIM_Base_SetConfig+0x9a>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4a2f      	ldr	r2, [pc, #188]	@ (800dd98 <TIM_Base_SetConfig+0x13c>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d00b      	beq.n	800dcf6 <TIM_Base_SetConfig+0x9a>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4a2e      	ldr	r2, [pc, #184]	@ (800dd9c <TIM_Base_SetConfig+0x140>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d007      	beq.n	800dcf6 <TIM_Base_SetConfig+0x9a>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4a2d      	ldr	r2, [pc, #180]	@ (800dda0 <TIM_Base_SetConfig+0x144>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d003      	beq.n	800dcf6 <TIM_Base_SetConfig+0x9a>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4a2c      	ldr	r2, [pc, #176]	@ (800dda4 <TIM_Base_SetConfig+0x148>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d108      	bne.n	800dd08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dcfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	4313      	orrs	r3, r2
 800dd06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	695b      	ldr	r3, [r3, #20]
 800dd12:	4313      	orrs	r3, r2
 800dd14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	689a      	ldr	r2, [r3, #8]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a16      	ldr	r2, [pc, #88]	@ (800dd88 <TIM_Base_SetConfig+0x12c>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d00f      	beq.n	800dd54 <TIM_Base_SetConfig+0xf8>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	4a18      	ldr	r2, [pc, #96]	@ (800dd98 <TIM_Base_SetConfig+0x13c>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d00b      	beq.n	800dd54 <TIM_Base_SetConfig+0xf8>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a17      	ldr	r2, [pc, #92]	@ (800dd9c <TIM_Base_SetConfig+0x140>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d007      	beq.n	800dd54 <TIM_Base_SetConfig+0xf8>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a16      	ldr	r2, [pc, #88]	@ (800dda0 <TIM_Base_SetConfig+0x144>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d003      	beq.n	800dd54 <TIM_Base_SetConfig+0xf8>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a15      	ldr	r2, [pc, #84]	@ (800dda4 <TIM_Base_SetConfig+0x148>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d103      	bne.n	800dd5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	691a      	ldr	r2, [r3, #16]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2201      	movs	r2, #1
 800dd60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	691b      	ldr	r3, [r3, #16]
 800dd66:	f003 0301 	and.w	r3, r3, #1
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d105      	bne.n	800dd7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	f023 0201 	bic.w	r2, r3, #1
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	611a      	str	r2, [r3, #16]
  }
}
 800dd7a:	bf00      	nop
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	40010000 	.word	0x40010000
 800dd8c:	40000400 	.word	0x40000400
 800dd90:	40000800 	.word	0x40000800
 800dd94:	40000c00 	.word	0x40000c00
 800dd98:	40010400 	.word	0x40010400
 800dd9c:	40014000 	.word	0x40014000
 800dda0:	40014400 	.word	0x40014400
 800dda4:	40014800 	.word	0x40014800

0800dda8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b087      	sub	sp, #28
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a1b      	ldr	r3, [r3, #32]
 800ddb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6a1b      	ldr	r3, [r3, #32]
 800ddbc:	f023 0201 	bic.w	r2, r3, #1
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	699b      	ldr	r3, [r3, #24]
 800ddce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	4b37      	ldr	r3, [pc, #220]	@ (800deb0 <TIM_OC1_SetConfig+0x108>)
 800ddd4:	4013      	ands	r3, r2
 800ddd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f023 0303 	bic.w	r3, r3, #3
 800ddde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	4313      	orrs	r3, r2
 800dde8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	f023 0302 	bic.w	r3, r3, #2
 800ddf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	697a      	ldr	r2, [r7, #20]
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a2d      	ldr	r2, [pc, #180]	@ (800deb4 <TIM_OC1_SetConfig+0x10c>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d00f      	beq.n	800de24 <TIM_OC1_SetConfig+0x7c>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4a2c      	ldr	r2, [pc, #176]	@ (800deb8 <TIM_OC1_SetConfig+0x110>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d00b      	beq.n	800de24 <TIM_OC1_SetConfig+0x7c>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4a2b      	ldr	r2, [pc, #172]	@ (800debc <TIM_OC1_SetConfig+0x114>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d007      	beq.n	800de24 <TIM_OC1_SetConfig+0x7c>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a2a      	ldr	r2, [pc, #168]	@ (800dec0 <TIM_OC1_SetConfig+0x118>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d003      	beq.n	800de24 <TIM_OC1_SetConfig+0x7c>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a29      	ldr	r2, [pc, #164]	@ (800dec4 <TIM_OC1_SetConfig+0x11c>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d10c      	bne.n	800de3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	f023 0308 	bic.w	r3, r3, #8
 800de2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	697a      	ldr	r2, [r7, #20]
 800de32:	4313      	orrs	r3, r2
 800de34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	f023 0304 	bic.w	r3, r3, #4
 800de3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4a1c      	ldr	r2, [pc, #112]	@ (800deb4 <TIM_OC1_SetConfig+0x10c>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d00f      	beq.n	800de66 <TIM_OC1_SetConfig+0xbe>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a1b      	ldr	r2, [pc, #108]	@ (800deb8 <TIM_OC1_SetConfig+0x110>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d00b      	beq.n	800de66 <TIM_OC1_SetConfig+0xbe>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4a1a      	ldr	r2, [pc, #104]	@ (800debc <TIM_OC1_SetConfig+0x114>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d007      	beq.n	800de66 <TIM_OC1_SetConfig+0xbe>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a19      	ldr	r2, [pc, #100]	@ (800dec0 <TIM_OC1_SetConfig+0x118>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d003      	beq.n	800de66 <TIM_OC1_SetConfig+0xbe>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a18      	ldr	r2, [pc, #96]	@ (800dec4 <TIM_OC1_SetConfig+0x11c>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d111      	bne.n	800de8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800de74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	695b      	ldr	r3, [r3, #20]
 800de7a:	693a      	ldr	r2, [r7, #16]
 800de7c:	4313      	orrs	r3, r2
 800de7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	699b      	ldr	r3, [r3, #24]
 800de84:	693a      	ldr	r2, [r7, #16]
 800de86:	4313      	orrs	r3, r2
 800de88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	693a      	ldr	r2, [r7, #16]
 800de8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	685a      	ldr	r2, [r3, #4]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	697a      	ldr	r2, [r7, #20]
 800dea2:	621a      	str	r2, [r3, #32]
}
 800dea4:	bf00      	nop
 800dea6:	371c      	adds	r7, #28
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr
 800deb0:	fffeff8f 	.word	0xfffeff8f
 800deb4:	40010000 	.word	0x40010000
 800deb8:	40010400 	.word	0x40010400
 800debc:	40014000 	.word	0x40014000
 800dec0:	40014400 	.word	0x40014400
 800dec4:	40014800 	.word	0x40014800

0800dec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dec8:	b480      	push	{r7}
 800deca:	b087      	sub	sp, #28
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6a1b      	ldr	r3, [r3, #32]
 800ded6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a1b      	ldr	r3, [r3, #32]
 800dedc:	f023 0210 	bic.w	r2, r3, #16
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	699b      	ldr	r3, [r3, #24]
 800deee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	4b34      	ldr	r3, [pc, #208]	@ (800dfc4 <TIM_OC2_SetConfig+0xfc>)
 800def4:	4013      	ands	r3, r2
 800def6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800defe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	021b      	lsls	r3, r3, #8
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	4313      	orrs	r3, r2
 800df0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	f023 0320 	bic.w	r3, r3, #32
 800df12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	011b      	lsls	r3, r3, #4
 800df1a:	697a      	ldr	r2, [r7, #20]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	4a29      	ldr	r2, [pc, #164]	@ (800dfc8 <TIM_OC2_SetConfig+0x100>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d003      	beq.n	800df30 <TIM_OC2_SetConfig+0x68>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4a28      	ldr	r2, [pc, #160]	@ (800dfcc <TIM_OC2_SetConfig+0x104>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d10d      	bne.n	800df4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	011b      	lsls	r3, r3, #4
 800df3e:	697a      	ldr	r2, [r7, #20]
 800df40:	4313      	orrs	r3, r2
 800df42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	4a1e      	ldr	r2, [pc, #120]	@ (800dfc8 <TIM_OC2_SetConfig+0x100>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d00f      	beq.n	800df74 <TIM_OC2_SetConfig+0xac>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	4a1d      	ldr	r2, [pc, #116]	@ (800dfcc <TIM_OC2_SetConfig+0x104>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d00b      	beq.n	800df74 <TIM_OC2_SetConfig+0xac>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	4a1c      	ldr	r2, [pc, #112]	@ (800dfd0 <TIM_OC2_SetConfig+0x108>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d007      	beq.n	800df74 <TIM_OC2_SetConfig+0xac>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4a1b      	ldr	r2, [pc, #108]	@ (800dfd4 <TIM_OC2_SetConfig+0x10c>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d003      	beq.n	800df74 <TIM_OC2_SetConfig+0xac>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a1a      	ldr	r2, [pc, #104]	@ (800dfd8 <TIM_OC2_SetConfig+0x110>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d113      	bne.n	800df9c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800df7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800df82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	695b      	ldr	r3, [r3, #20]
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	693a      	ldr	r2, [r7, #16]
 800df8c:	4313      	orrs	r3, r2
 800df8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	699b      	ldr	r3, [r3, #24]
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	693a      	ldr	r2, [r7, #16]
 800df98:	4313      	orrs	r3, r2
 800df9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	693a      	ldr	r2, [r7, #16]
 800dfa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	685a      	ldr	r2, [r3, #4]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	697a      	ldr	r2, [r7, #20]
 800dfb4:	621a      	str	r2, [r3, #32]
}
 800dfb6:	bf00      	nop
 800dfb8:	371c      	adds	r7, #28
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	feff8fff 	.word	0xfeff8fff
 800dfc8:	40010000 	.word	0x40010000
 800dfcc:	40010400 	.word	0x40010400
 800dfd0:	40014000 	.word	0x40014000
 800dfd4:	40014400 	.word	0x40014400
 800dfd8:	40014800 	.word	0x40014800

0800dfdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b087      	sub	sp, #28
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6a1b      	ldr	r3, [r3, #32]
 800dfea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a1b      	ldr	r3, [r3, #32]
 800dff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	69db      	ldr	r3, [r3, #28]
 800e002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	4b33      	ldr	r3, [pc, #204]	@ (800e0d4 <TIM_OC3_SetConfig+0xf8>)
 800e008:	4013      	ands	r3, r2
 800e00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f023 0303 	bic.w	r3, r3, #3
 800e012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	021b      	lsls	r3, r3, #8
 800e02c:	697a      	ldr	r2, [r7, #20]
 800e02e:	4313      	orrs	r3, r2
 800e030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4a28      	ldr	r2, [pc, #160]	@ (800e0d8 <TIM_OC3_SetConfig+0xfc>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d003      	beq.n	800e042 <TIM_OC3_SetConfig+0x66>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4a27      	ldr	r2, [pc, #156]	@ (800e0dc <TIM_OC3_SetConfig+0x100>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d10d      	bne.n	800e05e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	021b      	lsls	r3, r3, #8
 800e050:	697a      	ldr	r2, [r7, #20]
 800e052:	4313      	orrs	r3, r2
 800e054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e05c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a1d      	ldr	r2, [pc, #116]	@ (800e0d8 <TIM_OC3_SetConfig+0xfc>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d00f      	beq.n	800e086 <TIM_OC3_SetConfig+0xaa>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4a1c      	ldr	r2, [pc, #112]	@ (800e0dc <TIM_OC3_SetConfig+0x100>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d00b      	beq.n	800e086 <TIM_OC3_SetConfig+0xaa>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4a1b      	ldr	r2, [pc, #108]	@ (800e0e0 <TIM_OC3_SetConfig+0x104>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d007      	beq.n	800e086 <TIM_OC3_SetConfig+0xaa>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4a1a      	ldr	r2, [pc, #104]	@ (800e0e4 <TIM_OC3_SetConfig+0x108>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d003      	beq.n	800e086 <TIM_OC3_SetConfig+0xaa>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a19      	ldr	r2, [pc, #100]	@ (800e0e8 <TIM_OC3_SetConfig+0x10c>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d113      	bne.n	800e0ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e08c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	695b      	ldr	r3, [r3, #20]
 800e09a:	011b      	lsls	r3, r3, #4
 800e09c:	693a      	ldr	r2, [r7, #16]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	699b      	ldr	r3, [r3, #24]
 800e0a6:	011b      	lsls	r3, r3, #4
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	693a      	ldr	r2, [r7, #16]
 800e0b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	68fa      	ldr	r2, [r7, #12]
 800e0b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	685a      	ldr	r2, [r3, #4]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	621a      	str	r2, [r3, #32]
}
 800e0c8:	bf00      	nop
 800e0ca:	371c      	adds	r7, #28
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	fffeff8f 	.word	0xfffeff8f
 800e0d8:	40010000 	.word	0x40010000
 800e0dc:	40010400 	.word	0x40010400
 800e0e0:	40014000 	.word	0x40014000
 800e0e4:	40014400 	.word	0x40014400
 800e0e8:	40014800 	.word	0x40014800

0800e0ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b087      	sub	sp, #28
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a1b      	ldr	r3, [r3, #32]
 800e0fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6a1b      	ldr	r3, [r3, #32]
 800e100:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	69db      	ldr	r3, [r3, #28]
 800e112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e114:	68fa      	ldr	r2, [r7, #12]
 800e116:	4b24      	ldr	r3, [pc, #144]	@ (800e1a8 <TIM_OC4_SetConfig+0xbc>)
 800e118:	4013      	ands	r3, r2
 800e11a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	021b      	lsls	r3, r3, #8
 800e12a:	68fa      	ldr	r2, [r7, #12]
 800e12c:	4313      	orrs	r3, r2
 800e12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	031b      	lsls	r3, r3, #12
 800e13e:	693a      	ldr	r2, [r7, #16]
 800e140:	4313      	orrs	r3, r2
 800e142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	4a19      	ldr	r2, [pc, #100]	@ (800e1ac <TIM_OC4_SetConfig+0xc0>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d00f      	beq.n	800e16c <TIM_OC4_SetConfig+0x80>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4a18      	ldr	r2, [pc, #96]	@ (800e1b0 <TIM_OC4_SetConfig+0xc4>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d00b      	beq.n	800e16c <TIM_OC4_SetConfig+0x80>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	4a17      	ldr	r2, [pc, #92]	@ (800e1b4 <TIM_OC4_SetConfig+0xc8>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d007      	beq.n	800e16c <TIM_OC4_SetConfig+0x80>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a16      	ldr	r2, [pc, #88]	@ (800e1b8 <TIM_OC4_SetConfig+0xcc>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d003      	beq.n	800e16c <TIM_OC4_SetConfig+0x80>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a15      	ldr	r2, [pc, #84]	@ (800e1bc <TIM_OC4_SetConfig+0xd0>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d109      	bne.n	800e180 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	695b      	ldr	r3, [r3, #20]
 800e178:	019b      	lsls	r3, r3, #6
 800e17a:	697a      	ldr	r2, [r7, #20]
 800e17c:	4313      	orrs	r3, r2
 800e17e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	697a      	ldr	r2, [r7, #20]
 800e184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	685a      	ldr	r2, [r3, #4]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	693a      	ldr	r2, [r7, #16]
 800e198:	621a      	str	r2, [r3, #32]
}
 800e19a:	bf00      	nop
 800e19c:	371c      	adds	r7, #28
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	feff8fff 	.word	0xfeff8fff
 800e1ac:	40010000 	.word	0x40010000
 800e1b0:	40010400 	.word	0x40010400
 800e1b4:	40014000 	.word	0x40014000
 800e1b8:	40014400 	.word	0x40014400
 800e1bc:	40014800 	.word	0x40014800

0800e1c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b087      	sub	sp, #28
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6a1b      	ldr	r3, [r3, #32]
 800e1d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	4b21      	ldr	r3, [pc, #132]	@ (800e270 <TIM_OC5_SetConfig+0xb0>)
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	68fa      	ldr	r2, [r7, #12]
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e200:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	041b      	lsls	r3, r3, #16
 800e208:	693a      	ldr	r2, [r7, #16]
 800e20a:	4313      	orrs	r3, r2
 800e20c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4a18      	ldr	r2, [pc, #96]	@ (800e274 <TIM_OC5_SetConfig+0xb4>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d00f      	beq.n	800e236 <TIM_OC5_SetConfig+0x76>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	4a17      	ldr	r2, [pc, #92]	@ (800e278 <TIM_OC5_SetConfig+0xb8>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d00b      	beq.n	800e236 <TIM_OC5_SetConfig+0x76>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4a16      	ldr	r2, [pc, #88]	@ (800e27c <TIM_OC5_SetConfig+0xbc>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d007      	beq.n	800e236 <TIM_OC5_SetConfig+0x76>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4a15      	ldr	r2, [pc, #84]	@ (800e280 <TIM_OC5_SetConfig+0xc0>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d003      	beq.n	800e236 <TIM_OC5_SetConfig+0x76>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4a14      	ldr	r2, [pc, #80]	@ (800e284 <TIM_OC5_SetConfig+0xc4>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d109      	bne.n	800e24a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e23c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	695b      	ldr	r3, [r3, #20]
 800e242:	021b      	lsls	r3, r3, #8
 800e244:	697a      	ldr	r2, [r7, #20]
 800e246:	4313      	orrs	r3, r2
 800e248:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	697a      	ldr	r2, [r7, #20]
 800e24e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	685a      	ldr	r2, [r3, #4]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	693a      	ldr	r2, [r7, #16]
 800e262:	621a      	str	r2, [r3, #32]
}
 800e264:	bf00      	nop
 800e266:	371c      	adds	r7, #28
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr
 800e270:	fffeff8f 	.word	0xfffeff8f
 800e274:	40010000 	.word	0x40010000
 800e278:	40010400 	.word	0x40010400
 800e27c:	40014000 	.word	0x40014000
 800e280:	40014400 	.word	0x40014400
 800e284:	40014800 	.word	0x40014800

0800e288 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e288:	b480      	push	{r7}
 800e28a:	b087      	sub	sp, #28
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a1b      	ldr	r3, [r3, #32]
 800e296:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a1b      	ldr	r3, [r3, #32]
 800e29c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e2b0:	68fa      	ldr	r2, [r7, #12]
 800e2b2:	4b22      	ldr	r3, [pc, #136]	@ (800e33c <TIM_OC6_SetConfig+0xb4>)
 800e2b4:	4013      	ands	r3, r2
 800e2b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	021b      	lsls	r3, r3, #8
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e2ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	051b      	lsls	r3, r3, #20
 800e2d2:	693a      	ldr	r2, [r7, #16]
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4a19      	ldr	r2, [pc, #100]	@ (800e340 <TIM_OC6_SetConfig+0xb8>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d00f      	beq.n	800e300 <TIM_OC6_SetConfig+0x78>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	4a18      	ldr	r2, [pc, #96]	@ (800e344 <TIM_OC6_SetConfig+0xbc>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d00b      	beq.n	800e300 <TIM_OC6_SetConfig+0x78>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	4a17      	ldr	r2, [pc, #92]	@ (800e348 <TIM_OC6_SetConfig+0xc0>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d007      	beq.n	800e300 <TIM_OC6_SetConfig+0x78>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	4a16      	ldr	r2, [pc, #88]	@ (800e34c <TIM_OC6_SetConfig+0xc4>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d003      	beq.n	800e300 <TIM_OC6_SetConfig+0x78>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	4a15      	ldr	r2, [pc, #84]	@ (800e350 <TIM_OC6_SetConfig+0xc8>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d109      	bne.n	800e314 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e306:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	695b      	ldr	r3, [r3, #20]
 800e30c:	029b      	lsls	r3, r3, #10
 800e30e:	697a      	ldr	r2, [r7, #20]
 800e310:	4313      	orrs	r3, r2
 800e312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	697a      	ldr	r2, [r7, #20]
 800e318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	685a      	ldr	r2, [r3, #4]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	693a      	ldr	r2, [r7, #16]
 800e32c:	621a      	str	r2, [r3, #32]
}
 800e32e:	bf00      	nop
 800e330:	371c      	adds	r7, #28
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop
 800e33c:	feff8fff 	.word	0xfeff8fff
 800e340:	40010000 	.word	0x40010000
 800e344:	40010400 	.word	0x40010400
 800e348:	40014000 	.word	0x40014000
 800e34c:	40014400 	.word	0x40014400
 800e350:	40014800 	.word	0x40014800

0800e354 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e354:	b480      	push	{r7}
 800e356:	b087      	sub	sp, #28
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	f003 031f 	and.w	r3, r3, #31
 800e366:	2201      	movs	r2, #1
 800e368:	fa02 f303 	lsl.w	r3, r2, r3
 800e36c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6a1a      	ldr	r2, [r3, #32]
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	43db      	mvns	r3, r3
 800e376:	401a      	ands	r2, r3
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6a1a      	ldr	r2, [r3, #32]
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	f003 031f 	and.w	r3, r3, #31
 800e386:	6879      	ldr	r1, [r7, #4]
 800e388:	fa01 f303 	lsl.w	r3, r1, r3
 800e38c:	431a      	orrs	r2, r3
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	621a      	str	r2, [r3, #32]
}
 800e392:	bf00      	nop
 800e394:	371c      	adds	r7, #28
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr
	...

0800e3a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d101      	bne.n	800e3b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e3b4:	2302      	movs	r3, #2
 800e3b6:	e06d      	b.n	800e494 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2202      	movs	r2, #2
 800e3c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4a30      	ldr	r2, [pc, #192]	@ (800e4a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d004      	beq.n	800e3ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4a2f      	ldr	r2, [pc, #188]	@ (800e4a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d108      	bne.n	800e3fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e3f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e404:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	4313      	orrs	r3, r2
 800e40e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a20      	ldr	r2, [pc, #128]	@ (800e4a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d022      	beq.n	800e468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e42a:	d01d      	beq.n	800e468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a1d      	ldr	r2, [pc, #116]	@ (800e4a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e432:	4293      	cmp	r3, r2
 800e434:	d018      	beq.n	800e468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4a1c      	ldr	r2, [pc, #112]	@ (800e4ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e43c:	4293      	cmp	r3, r2
 800e43e:	d013      	beq.n	800e468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a1a      	ldr	r2, [pc, #104]	@ (800e4b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d00e      	beq.n	800e468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4a15      	ldr	r2, [pc, #84]	@ (800e4a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e450:	4293      	cmp	r3, r2
 800e452:	d009      	beq.n	800e468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a16      	ldr	r2, [pc, #88]	@ (800e4b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d004      	beq.n	800e468 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	4a15      	ldr	r2, [pc, #84]	@ (800e4b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d10c      	bne.n	800e482 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e46e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	689b      	ldr	r3, [r3, #8]
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	4313      	orrs	r3, r2
 800e478:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2201      	movs	r2, #1
 800e486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2200      	movs	r2, #0
 800e48e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr
 800e4a0:	40010000 	.word	0x40010000
 800e4a4:	40010400 	.word	0x40010400
 800e4a8:	40000400 	.word	0x40000400
 800e4ac:	40000800 	.word	0x40000800
 800e4b0:	40000c00 	.word	0x40000c00
 800e4b4:	40001800 	.word	0x40001800
 800e4b8:	40014000 	.word	0x40014000

0800e4bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e4c4:	bf00      	nop
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e4d8:	bf00      	nop
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e4ec:	bf00      	nop
 800e4ee:	370c      	adds	r7, #12
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f6:	4770      	bx	lr

0800e4f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d101      	bne.n	800e50a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e506:	2301      	movs	r3, #1
 800e508:	e042      	b.n	800e590 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e510:	2b00      	cmp	r3, #0
 800e512:	d106      	bne.n	800e522 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f7f6 fdd1 	bl	80050c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2224      	movs	r2, #36	@ 0x24
 800e526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f022 0201 	bic.w	r2, r2, #1
 800e538:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d002      	beq.n	800e548 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f001 fd2e 	bl	800ffa4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 febf 	bl	800f2cc <UART_SetConfig>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b01      	cmp	r3, #1
 800e552:	d101      	bne.n	800e558 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e554:	2301      	movs	r3, #1
 800e556:	e01b      	b.n	800e590 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	685a      	ldr	r2, [r3, #4]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	689a      	ldr	r2, [r3, #8]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f042 0201 	orr.w	r2, r2, #1
 800e586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f001 fdad 	bl	80100e8 <UART_CheckIdleState>
 800e58e:	4603      	mov	r3, r0
}
 800e590:	4618      	mov	r0, r3
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b08a      	sub	sp, #40	@ 0x28
 800e59c:	af02      	add	r7, sp, #8
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	603b      	str	r3, [r7, #0]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5ae:	2b20      	cmp	r3, #32
 800e5b0:	d17b      	bne.n	800e6aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d002      	beq.n	800e5be <HAL_UART_Transmit+0x26>
 800e5b8:	88fb      	ldrh	r3, [r7, #6]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d101      	bne.n	800e5c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	e074      	b.n	800e6ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2221      	movs	r2, #33	@ 0x21
 800e5ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e5d2:	f7f7 f847 	bl	8005664 <HAL_GetTick>
 800e5d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	88fa      	ldrh	r2, [r7, #6]
 800e5dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	88fa      	ldrh	r2, [r7, #6]
 800e5e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5f0:	d108      	bne.n	800e604 <HAL_UART_Transmit+0x6c>
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	691b      	ldr	r3, [r3, #16]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d104      	bne.n	800e604 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	61bb      	str	r3, [r7, #24]
 800e602:	e003      	b.n	800e60c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e608:	2300      	movs	r3, #0
 800e60a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e60c:	e030      	b.n	800e670 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	9300      	str	r3, [sp, #0]
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	2200      	movs	r2, #0
 800e616:	2180      	movs	r1, #128	@ 0x80
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f001 fe0f 	bl	801023c <UART_WaitOnFlagUntilTimeout>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d005      	beq.n	800e630 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2220      	movs	r2, #32
 800e628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e62c:	2303      	movs	r3, #3
 800e62e:	e03d      	b.n	800e6ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d10b      	bne.n	800e64e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	881b      	ldrh	r3, [r3, #0]
 800e63a:	461a      	mov	r2, r3
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e644:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	3302      	adds	r3, #2
 800e64a:	61bb      	str	r3, [r7, #24]
 800e64c:	e007      	b.n	800e65e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	781a      	ldrb	r2, [r3, #0]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	3301      	adds	r3, #1
 800e65c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e664:	b29b      	uxth	r3, r3
 800e666:	3b01      	subs	r3, #1
 800e668:	b29a      	uxth	r2, r3
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e676:	b29b      	uxth	r3, r3
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1c8      	bne.n	800e60e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	9300      	str	r3, [sp, #0]
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	2200      	movs	r2, #0
 800e684:	2140      	movs	r1, #64	@ 0x40
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f001 fdd8 	bl	801023c <UART_WaitOnFlagUntilTimeout>
 800e68c:	4603      	mov	r3, r0
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d005      	beq.n	800e69e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2220      	movs	r2, #32
 800e696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e69a:	2303      	movs	r3, #3
 800e69c:	e006      	b.n	800e6ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2220      	movs	r2, #32
 800e6a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	e000      	b.n	800e6ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e6aa:	2302      	movs	r3, #2
  }
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3720      	adds	r7, #32
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08a      	sub	sp, #40	@ 0x28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	4613      	mov	r3, r2
 800e6c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6c8:	2b20      	cmp	r3, #32
 800e6ca:	d137      	bne.n	800e73c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d002      	beq.n	800e6d8 <HAL_UART_Receive_DMA+0x24>
 800e6d2:	88fb      	ldrh	r3, [r7, #6]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d101      	bne.n	800e6dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e030      	b.n	800e73e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	4a18      	ldr	r2, [pc, #96]	@ (800e748 <HAL_UART_Receive_DMA+0x94>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d01f      	beq.n	800e72c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d018      	beq.n	800e72c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	e853 3f00 	ldrex	r3, [r3]
 800e706:	613b      	str	r3, [r7, #16]
   return(result);
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e70e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	461a      	mov	r2, r3
 800e716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e718:	623b      	str	r3, [r7, #32]
 800e71a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e71c:	69f9      	ldr	r1, [r7, #28]
 800e71e:	6a3a      	ldr	r2, [r7, #32]
 800e720:	e841 2300 	strex	r3, r2, [r1]
 800e724:	61bb      	str	r3, [r7, #24]
   return(result);
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d1e6      	bne.n	800e6fa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e72c:	88fb      	ldrh	r3, [r7, #6]
 800e72e:	461a      	mov	r2, r3
 800e730:	68b9      	ldr	r1, [r7, #8]
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	f001 fdf0 	bl	8010318 <UART_Start_Receive_DMA>
 800e738:	4603      	mov	r3, r0
 800e73a:	e000      	b.n	800e73e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e73c:	2302      	movs	r3, #2
  }
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3728      	adds	r7, #40	@ 0x28
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	58000c00 	.word	0x58000c00

0800e74c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b090      	sub	sp, #64	@ 0x40
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e762:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e76e:	2b80      	cmp	r3, #128	@ 0x80
 800e770:	d139      	bne.n	800e7e6 <HAL_UART_DMAStop+0x9a>
 800e772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e774:	2b21      	cmp	r3, #33	@ 0x21
 800e776:	d136      	bne.n	800e7e6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	3308      	adds	r3, #8
 800e77e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e780:	6a3b      	ldr	r3, [r7, #32]
 800e782:	e853 3f00 	ldrex	r3, [r3]
 800e786:	61fb      	str	r3, [r7, #28]
   return(result);
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e78e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	3308      	adds	r3, #8
 800e796:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e798:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e79a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e79c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e79e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7a0:	e841 2300 	strex	r3, r2, [r1]
 800e7a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d1e5      	bne.n	800e778 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d015      	beq.n	800e7e0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7f7 ff03 	bl	80065c4 <HAL_DMA_Abort>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d00d      	beq.n	800e7e0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7f9 fbc1 	bl	8007f50 <HAL_DMA_GetError>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b20      	cmp	r3, #32
 800e7d2:	d105      	bne.n	800e7e0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2210      	movs	r2, #16
 800e7d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e7dc:	2303      	movs	r3, #3
 800e7de:	e047      	b.n	800e870 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f001 fe3f 	bl	8010464 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7f0:	2b40      	cmp	r3, #64	@ 0x40
 800e7f2:	d13c      	bne.n	800e86e <HAL_UART_DMAStop+0x122>
 800e7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f6:	2b22      	cmp	r3, #34	@ 0x22
 800e7f8:	d139      	bne.n	800e86e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	3308      	adds	r3, #8
 800e800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	e853 3f00 	ldrex	r3, [r3]
 800e808:	60bb      	str	r3, [r7, #8]
   return(result);
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e810:	633b      	str	r3, [r7, #48]	@ 0x30
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	3308      	adds	r3, #8
 800e818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e81a:	61ba      	str	r2, [r7, #24]
 800e81c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81e:	6979      	ldr	r1, [r7, #20]
 800e820:	69ba      	ldr	r2, [r7, #24]
 800e822:	e841 2300 	strex	r3, r2, [r1]
 800e826:	613b      	str	r3, [r7, #16]
   return(result);
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d1e5      	bne.n	800e7fa <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e834:	2b00      	cmp	r3, #0
 800e836:	d017      	beq.n	800e868 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e83e:	4618      	mov	r0, r3
 800e840:	f7f7 fec0 	bl	80065c4 <HAL_DMA_Abort>
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00e      	beq.n	800e868 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e850:	4618      	mov	r0, r3
 800e852:	f7f9 fb7d 	bl	8007f50 <HAL_DMA_GetError>
 800e856:	4603      	mov	r3, r0
 800e858:	2b20      	cmp	r3, #32
 800e85a:	d105      	bne.n	800e868 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2210      	movs	r2, #16
 800e860:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800e864:	2303      	movs	r3, #3
 800e866:	e003      	b.n	800e870 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f001 fe3d 	bl	80104e8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e86e:	2300      	movs	r3, #0
}
 800e870:	4618      	mov	r0, r3
 800e872:	3740      	adds	r7, #64	@ 0x40
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b0a2      	sub	sp, #136	@ 0x88
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800e880:	2301      	movs	r3, #1
 800e882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e88c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e88e:	e853 3f00 	ldrex	r3, [r3]
 800e892:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e894:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e896:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800e89a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e8a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e8aa:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e8ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e8b0:	e841 2300 	strex	r3, r2, [r1]
 800e8b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e8b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1e4      	bne.n	800e886 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8c6:	e853 3f00 	ldrex	r3, [r3]
 800e8ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e8cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e8ce:	4b85      	ldr	r3, [pc, #532]	@ (800eae4 <HAL_UART_Abort_IT+0x26c>)
 800e8d0:	4013      	ands	r3, r2
 800e8d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	3308      	adds	r3, #8
 800e8da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e8dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e8de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e8e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e8e4:	e841 2300 	strex	r3, r2, [r1]
 800e8e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e8ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d1e5      	bne.n	800e8bc <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d118      	bne.n	800e92a <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e900:	e853 3f00 	ldrex	r3, [r3]
 800e904:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e908:	f023 0310 	bic.w	r3, r3, #16
 800e90c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	461a      	mov	r2, r3
 800e914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e916:	647b      	str	r3, [r7, #68]	@ 0x44
 800e918:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e91a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e91c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e91e:	e841 2300 	strex	r3, r2, [r1]
 800e922:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e926:	2b00      	cmp	r3, #0
 800e928:	d1e6      	bne.n	800e8f8 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d00f      	beq.n	800e952 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e93c:	2b80      	cmp	r3, #128	@ 0x80
 800e93e:	d104      	bne.n	800e94a <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e944:	4a68      	ldr	r2, [pc, #416]	@ (800eae8 <HAL_UART_Abort_IT+0x270>)
 800e946:	651a      	str	r2, [r3, #80]	@ 0x50
 800e948:	e003      	b.n	800e952 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e94e:	2200      	movs	r2, #0
 800e950:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d011      	beq.n	800e980 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	689b      	ldr	r3, [r3, #8]
 800e962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e966:	2b40      	cmp	r3, #64	@ 0x40
 800e968:	d105      	bne.n	800e976 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e970:	4a5e      	ldr	r2, [pc, #376]	@ (800eaec <HAL_UART_Abort_IT+0x274>)
 800e972:	651a      	str	r2, [r3, #80]	@ 0x50
 800e974:	e004      	b.n	800e980 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e97c:	2200      	movs	r2, #0
 800e97e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	689b      	ldr	r3, [r3, #8]
 800e986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e98a:	2b80      	cmp	r3, #128	@ 0x80
 800e98c:	d12d      	bne.n	800e9ea <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	3308      	adds	r3, #8
 800e994:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e998:	e853 3f00 	ldrex	r3, [r3]
 800e99c:	623b      	str	r3, [r7, #32]
   return(result);
 800e99e:	6a3b      	ldr	r3, [r7, #32]
 800e9a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9a4:	677b      	str	r3, [r7, #116]	@ 0x74
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	3308      	adds	r3, #8
 800e9ac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e9ae:	633a      	str	r2, [r7, #48]	@ 0x30
 800e9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e9b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9b6:	e841 2300 	strex	r3, r2, [r1]
 800e9ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d1e5      	bne.n	800e98e <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00f      	beq.n	800e9ea <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7f8 f916 	bl	8006c00 <HAL_DMA_Abort_IT>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d004      	beq.n	800e9e4 <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e9de:	2200      	movs	r2, #0
 800e9e0:	651a      	str	r2, [r3, #80]	@ 0x50
 800e9e2:	e002      	b.n	800e9ea <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9f4:	2b40      	cmp	r3, #64	@ 0x40
 800e9f6:	d133      	bne.n	800ea60 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	3308      	adds	r3, #8
 800e9fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	e853 3f00 	ldrex	r3, [r3]
 800ea06:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea0e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	3308      	adds	r3, #8
 800ea16:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ea18:	61fa      	str	r2, [r7, #28]
 800ea1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1c:	69b9      	ldr	r1, [r7, #24]
 800ea1e:	69fa      	ldr	r2, [r7, #28]
 800ea20:	e841 2300 	strex	r3, r2, [r1]
 800ea24:	617b      	str	r3, [r7, #20]
   return(result);
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1e5      	bne.n	800e9f8 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d014      	beq.n	800ea60 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7f8 f8df 	bl	8006c00 <HAL_DMA_Abort_IT>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d008      	beq.n	800ea5a <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea4e:	2200      	movs	r2, #0
 800ea50:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800ea52:	2301      	movs	r3, #1
 800ea54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ea58:	e002      	b.n	800ea60 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800ea60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d138      	bne.n	800eada <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	220f      	movs	r2, #15
 800ea92:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea9c:	d107      	bne.n	800eaae <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	699a      	ldr	r2, [r3, #24]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f042 0210 	orr.w	r2, r2, #16
 800eaac:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	699a      	ldr	r2, [r3, #24]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f042 0208 	orr.w	r2, r2, #8
 800eabc:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2220      	movs	r2, #32
 800eac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2220      	movs	r2, #32
 800eaca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 fbe3 	bl	800f2a0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3788      	adds	r7, #136	@ 0x88
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	ef7ffffe 	.word	0xef7ffffe
 800eae8:	080107c7 	.word	0x080107c7
 800eaec:	08010853 	.word	0x08010853

0800eaf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b0ba      	sub	sp, #232	@ 0xe8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	69db      	ldr	r3, [r3, #28]
 800eafe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eb16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eb1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800eb1e:	4013      	ands	r3, r2
 800eb20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800eb24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d11b      	bne.n	800eb64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eb2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb30:	f003 0320 	and.w	r3, r3, #32
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d015      	beq.n	800eb64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eb38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb3c:	f003 0320 	and.w	r3, r3, #32
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d105      	bne.n	800eb50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eb44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eb48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d009      	beq.n	800eb64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	f000 8377 	beq.w	800f248 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	4798      	blx	r3
      }
      return;
 800eb62:	e371      	b.n	800f248 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eb64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f000 8123 	beq.w	800edb4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eb6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eb72:	4b8d      	ldr	r3, [pc, #564]	@ (800eda8 <HAL_UART_IRQHandler+0x2b8>)
 800eb74:	4013      	ands	r3, r2
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d106      	bne.n	800eb88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800eb7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eb7e:	4b8b      	ldr	r3, [pc, #556]	@ (800edac <HAL_UART_IRQHandler+0x2bc>)
 800eb80:	4013      	ands	r3, r2
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f000 8116 	beq.w	800edb4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eb88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb8c:	f003 0301 	and.w	r3, r3, #1
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d011      	beq.n	800ebb8 <HAL_UART_IRQHandler+0xc8>
 800eb94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d00b      	beq.n	800ebb8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2201      	movs	r2, #1
 800eba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebae:	f043 0201 	orr.w	r2, r3, #1
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebbc:	f003 0302 	and.w	r3, r3, #2
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d011      	beq.n	800ebe8 <HAL_UART_IRQHandler+0xf8>
 800ebc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebc8:	f003 0301 	and.w	r3, r3, #1
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d00b      	beq.n	800ebe8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2202      	movs	r2, #2
 800ebd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebde:	f043 0204 	orr.w	r2, r3, #4
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebec:	f003 0304 	and.w	r3, r3, #4
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d011      	beq.n	800ec18 <HAL_UART_IRQHandler+0x128>
 800ebf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebf8:	f003 0301 	and.w	r3, r3, #1
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d00b      	beq.n	800ec18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2204      	movs	r2, #4
 800ec06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec0e:	f043 0202 	orr.w	r2, r3, #2
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ec18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec1c:	f003 0308 	and.w	r3, r3, #8
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d017      	beq.n	800ec54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec28:	f003 0320 	and.w	r3, r3, #32
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d105      	bne.n	800ec3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ec30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ec34:	4b5c      	ldr	r3, [pc, #368]	@ (800eda8 <HAL_UART_IRQHandler+0x2b8>)
 800ec36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d00b      	beq.n	800ec54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	2208      	movs	r2, #8
 800ec42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec4a:	f043 0208 	orr.w	r2, r3, #8
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ec54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d012      	beq.n	800ec86 <HAL_UART_IRQHandler+0x196>
 800ec60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00c      	beq.n	800ec86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec7c:	f043 0220 	orr.w	r2, r3, #32
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	f000 82dd 	beq.w	800f24c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ec92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec96:	f003 0320 	and.w	r3, r3, #32
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d013      	beq.n	800ecc6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ec9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eca2:	f003 0320 	and.w	r3, r3, #32
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d105      	bne.n	800ecb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ecaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ecae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d007      	beq.n	800ecc6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d003      	beq.n	800ecc6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eccc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecda:	2b40      	cmp	r3, #64	@ 0x40
 800ecdc:	d005      	beq.n	800ecea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ecde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ece2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d054      	beq.n	800ed94 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f001 fbfc 	bl	80104e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecfa:	2b40      	cmp	r3, #64	@ 0x40
 800ecfc:	d146      	bne.n	800ed8c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3308      	adds	r3, #8
 800ed04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ed0c:	e853 3f00 	ldrex	r3, [r3]
 800ed10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ed14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3308      	adds	r3, #8
 800ed26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ed2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ed2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ed36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ed3a:	e841 2300 	strex	r3, r2, [r1]
 800ed3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ed42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d1d9      	bne.n	800ecfe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d017      	beq.n	800ed84 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed5a:	4a15      	ldr	r2, [pc, #84]	@ (800edb0 <HAL_UART_IRQHandler+0x2c0>)
 800ed5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7f7 ff4b 	bl	8006c00 <HAL_DMA_Abort_IT>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d019      	beq.n	800eda4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ed76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ed7e:	4610      	mov	r0, r2
 800ed80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed82:	e00f      	b.n	800eda4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fa81 	bl	800f28c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed8a:	e00b      	b.n	800eda4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 fa7d 	bl	800f28c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed92:	e007      	b.n	800eda4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f000 fa79 	bl	800f28c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800eda2:	e253      	b.n	800f24c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eda4:	bf00      	nop
    return;
 800eda6:	e251      	b.n	800f24c <HAL_UART_IRQHandler+0x75c>
 800eda8:	10000001 	.word	0x10000001
 800edac:	04000120 	.word	0x04000120
 800edb0:	0801079b 	.word	0x0801079b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edb8:	2b01      	cmp	r3, #1
 800edba:	f040 81e7 	bne.w	800f18c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800edbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edc2:	f003 0310 	and.w	r3, r3, #16
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	f000 81e0 	beq.w	800f18c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800edcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edd0:	f003 0310 	and.w	r3, r3, #16
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 81d9 	beq.w	800f18c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2210      	movs	r2, #16
 800ede0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edec:	2b40      	cmp	r3, #64	@ 0x40
 800edee:	f040 8151 	bne.w	800f094 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a96      	ldr	r2, [pc, #600]	@ (800f054 <HAL_UART_IRQHandler+0x564>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d068      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a93      	ldr	r2, [pc, #588]	@ (800f058 <HAL_UART_IRQHandler+0x568>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d061      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a91      	ldr	r2, [pc, #580]	@ (800f05c <HAL_UART_IRQHandler+0x56c>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d05a      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4a8e      	ldr	r2, [pc, #568]	@ (800f060 <HAL_UART_IRQHandler+0x570>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d053      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4a8c      	ldr	r2, [pc, #560]	@ (800f064 <HAL_UART_IRQHandler+0x574>)
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d04c      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	4a89      	ldr	r2, [pc, #548]	@ (800f068 <HAL_UART_IRQHandler+0x578>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d045      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	4a87      	ldr	r2, [pc, #540]	@ (800f06c <HAL_UART_IRQHandler+0x57c>)
 800ee50:	4293      	cmp	r3, r2
 800ee52:	d03e      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a84      	ldr	r2, [pc, #528]	@ (800f070 <HAL_UART_IRQHandler+0x580>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d037      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a82      	ldr	r2, [pc, #520]	@ (800f074 <HAL_UART_IRQHandler+0x584>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d030      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	4a7f      	ldr	r2, [pc, #508]	@ (800f078 <HAL_UART_IRQHandler+0x588>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d029      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4a7d      	ldr	r2, [pc, #500]	@ (800f07c <HAL_UART_IRQHandler+0x58c>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d022      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a7a      	ldr	r2, [pc, #488]	@ (800f080 <HAL_UART_IRQHandler+0x590>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d01b      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a78      	ldr	r2, [pc, #480]	@ (800f084 <HAL_UART_IRQHandler+0x594>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d014      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4a75      	ldr	r2, [pc, #468]	@ (800f088 <HAL_UART_IRQHandler+0x598>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d00d      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a73      	ldr	r2, [pc, #460]	@ (800f08c <HAL_UART_IRQHandler+0x59c>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d006      	beq.n	800eed2 <HAL_UART_IRQHandler+0x3e2>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	4a70      	ldr	r2, [pc, #448]	@ (800f090 <HAL_UART_IRQHandler+0x5a0>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d106      	bne.n	800eee0 <HAL_UART_IRQHandler+0x3f0>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	b29b      	uxth	r3, r3
 800eede:	e005      	b.n	800eeec <HAL_UART_IRQHandler+0x3fc>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eef0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	f000 81ab 	beq.w	800f250 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ef00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ef04:	429a      	cmp	r2, r3
 800ef06:	f080 81a3 	bcs.w	800f250 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ef10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef1a:	69db      	ldr	r3, [r3, #28]
 800ef1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef20:	f000 8087 	beq.w	800f032 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ef30:	e853 3f00 	ldrex	r3, [r3]
 800ef34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ef38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ef3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	461a      	mov	r2, r3
 800ef4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ef52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ef5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ef5e:	e841 2300 	strex	r3, r2, [r1]
 800ef62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ef66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1da      	bne.n	800ef24 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	3308      	adds	r3, #8
 800ef74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef78:	e853 3f00 	ldrex	r3, [r3]
 800ef7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ef7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef80:	f023 0301 	bic.w	r3, r3, #1
 800ef84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	3308      	adds	r3, #8
 800ef8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ef96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ef9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef9e:	e841 2300 	strex	r3, r2, [r1]
 800efa2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800efa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d1e1      	bne.n	800ef6e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	3308      	adds	r3, #8
 800efb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800efb4:	e853 3f00 	ldrex	r3, [r3]
 800efb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800efba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800efc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	3308      	adds	r3, #8
 800efca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800efce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800efd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800efd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800efd6:	e841 2300 	strex	r3, r2, [r1]
 800efda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800efdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1e3      	bne.n	800efaa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2220      	movs	r2, #32
 800efe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eff8:	e853 3f00 	ldrex	r3, [r3]
 800effc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800effe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f000:	f023 0310 	bic.w	r3, r3, #16
 800f004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	461a      	mov	r2, r3
 800f00e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f012:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f014:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f016:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f018:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f01a:	e841 2300 	strex	r3, r2, [r1]
 800f01e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1e4      	bne.n	800eff0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7f7 fac9 	bl	80065c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2202      	movs	r2, #2
 800f036:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f044:	b29b      	uxth	r3, r3
 800f046:	1ad3      	subs	r3, r2, r3
 800f048:	b29b      	uxth	r3, r3
 800f04a:	4619      	mov	r1, r3
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f931 	bl	800f2b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f052:	e0fd      	b.n	800f250 <HAL_UART_IRQHandler+0x760>
 800f054:	40020010 	.word	0x40020010
 800f058:	40020028 	.word	0x40020028
 800f05c:	40020040 	.word	0x40020040
 800f060:	40020058 	.word	0x40020058
 800f064:	40020070 	.word	0x40020070
 800f068:	40020088 	.word	0x40020088
 800f06c:	400200a0 	.word	0x400200a0
 800f070:	400200b8 	.word	0x400200b8
 800f074:	40020410 	.word	0x40020410
 800f078:	40020428 	.word	0x40020428
 800f07c:	40020440 	.word	0x40020440
 800f080:	40020458 	.word	0x40020458
 800f084:	40020470 	.word	0x40020470
 800f088:	40020488 	.word	0x40020488
 800f08c:	400204a0 	.word	0x400204a0
 800f090:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	1ad3      	subs	r3, r2, r3
 800f0a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f000 80cf 	beq.w	800f254 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f0b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f000 80ca 	beq.w	800f254 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c8:	e853 3f00 	ldrex	r3, [r3]
 800f0cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f0d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f0e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f0e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f0e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0ea:	e841 2300 	strex	r3, r2, [r1]
 800f0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f0f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d1e4      	bne.n	800f0c0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	3308      	adds	r3, #8
 800f0fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f100:	e853 3f00 	ldrex	r3, [r3]
 800f104:	623b      	str	r3, [r7, #32]
   return(result);
 800f106:	6a3a      	ldr	r2, [r7, #32]
 800f108:	4b55      	ldr	r3, [pc, #340]	@ (800f260 <HAL_UART_IRQHandler+0x770>)
 800f10a:	4013      	ands	r3, r2
 800f10c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	3308      	adds	r3, #8
 800f116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f11a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f122:	e841 2300 	strex	r3, r2, [r1]
 800f126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d1e3      	bne.n	800f0f6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2220      	movs	r2, #32
 800f132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	e853 3f00 	ldrex	r3, [r3]
 800f14e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f023 0310 	bic.w	r3, r3, #16
 800f156:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	461a      	mov	r2, r3
 800f160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f164:	61fb      	str	r3, [r7, #28]
 800f166:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f168:	69b9      	ldr	r1, [r7, #24]
 800f16a:	69fa      	ldr	r2, [r7, #28]
 800f16c:	e841 2300 	strex	r3, r2, [r1]
 800f170:	617b      	str	r3, [r7, #20]
   return(result);
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d1e4      	bne.n	800f142 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2202      	movs	r2, #2
 800f17c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f17e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f182:	4619      	mov	r1, r3
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 f895 	bl	800f2b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f18a:	e063      	b.n	800f254 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f194:	2b00      	cmp	r3, #0
 800f196:	d00e      	beq.n	800f1b6 <HAL_UART_IRQHandler+0x6c6>
 800f198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f19c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d008      	beq.n	800f1b6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f1ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f001 fbba 	bl	8010928 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f1b4:	e051      	b.n	800f25a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d014      	beq.n	800f1ec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d105      	bne.n	800f1da <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f1ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d008      	beq.n	800f1ec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d03a      	beq.n	800f258 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	4798      	blx	r3
    }
    return;
 800f1ea:	e035      	b.n	800f258 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d009      	beq.n	800f20c <HAL_UART_IRQHandler+0x71c>
 800f1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f200:	2b00      	cmp	r3, #0
 800f202:	d003      	beq.n	800f20c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f001 fb64 	bl	80108d2 <UART_EndTransmit_IT>
    return;
 800f20a:	e026      	b.n	800f25a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f20c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f210:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f214:	2b00      	cmp	r3, #0
 800f216:	d009      	beq.n	800f22c <HAL_UART_IRQHandler+0x73c>
 800f218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f21c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f220:	2b00      	cmp	r3, #0
 800f222:	d003      	beq.n	800f22c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f001 fb93 	bl	8010950 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f22a:	e016      	b.n	800f25a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f22c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f234:	2b00      	cmp	r3, #0
 800f236:	d010      	beq.n	800f25a <HAL_UART_IRQHandler+0x76a>
 800f238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	da0c      	bge.n	800f25a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f001 fb7b 	bl	801093c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f246:	e008      	b.n	800f25a <HAL_UART_IRQHandler+0x76a>
      return;
 800f248:	bf00      	nop
 800f24a:	e006      	b.n	800f25a <HAL_UART_IRQHandler+0x76a>
    return;
 800f24c:	bf00      	nop
 800f24e:	e004      	b.n	800f25a <HAL_UART_IRQHandler+0x76a>
      return;
 800f250:	bf00      	nop
 800f252:	e002      	b.n	800f25a <HAL_UART_IRQHandler+0x76a>
      return;
 800f254:	bf00      	nop
 800f256:	e000      	b.n	800f25a <HAL_UART_IRQHandler+0x76a>
    return;
 800f258:	bf00      	nop
  }
}
 800f25a:	37e8      	adds	r7, #232	@ 0xe8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	effffffe 	.word	0xeffffffe

0800f264 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f26c:	bf00      	nop
 800f26e:	370c      	adds	r7, #12
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr

0800f278 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f280:	bf00      	nop
 800f282:	370c      	adds	r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f294:	bf00      	nop
 800f296:	370c      	adds	r7, #12
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr

0800f2a0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f2a8:	bf00      	nop
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	460b      	mov	r3, r1
 800f2be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f2c0:	bf00      	nop
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f2cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f2d0:	b092      	sub	sp, #72	@ 0x48
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	689a      	ldr	r2, [r3, #8]
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	691b      	ldr	r3, [r3, #16]
 800f2e4:	431a      	orrs	r2, r3
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	695b      	ldr	r3, [r3, #20]
 800f2ea:	431a      	orrs	r2, r3
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	69db      	ldr	r3, [r3, #28]
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	4bbe      	ldr	r3, [pc, #760]	@ (800f5f4 <UART_SetConfig+0x328>)
 800f2fc:	4013      	ands	r3, r2
 800f2fe:	697a      	ldr	r2, [r7, #20]
 800f300:	6812      	ldr	r2, [r2, #0]
 800f302:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f304:	430b      	orrs	r3, r1
 800f306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	68da      	ldr	r2, [r3, #12]
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	430a      	orrs	r2, r1
 800f31c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	699b      	ldr	r3, [r3, #24]
 800f322:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4ab3      	ldr	r2, [pc, #716]	@ (800f5f8 <UART_SetConfig+0x32c>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d004      	beq.n	800f338 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	6a1b      	ldr	r3, [r3, #32]
 800f332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f334:	4313      	orrs	r3, r2
 800f336:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	689a      	ldr	r2, [r3, #8]
 800f33e:	4baf      	ldr	r3, [pc, #700]	@ (800f5fc <UART_SetConfig+0x330>)
 800f340:	4013      	ands	r3, r2
 800f342:	697a      	ldr	r2, [r7, #20]
 800f344:	6812      	ldr	r2, [r2, #0]
 800f346:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f348:	430b      	orrs	r3, r1
 800f34a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f352:	f023 010f 	bic.w	r1, r3, #15
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	430a      	orrs	r2, r1
 800f360:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4aa6      	ldr	r2, [pc, #664]	@ (800f600 <UART_SetConfig+0x334>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d177      	bne.n	800f45c <UART_SetConfig+0x190>
 800f36c:	4ba5      	ldr	r3, [pc, #660]	@ (800f604 <UART_SetConfig+0x338>)
 800f36e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f370:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f374:	2b28      	cmp	r3, #40	@ 0x28
 800f376:	d86d      	bhi.n	800f454 <UART_SetConfig+0x188>
 800f378:	a201      	add	r2, pc, #4	@ (adr r2, 800f380 <UART_SetConfig+0xb4>)
 800f37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f37e:	bf00      	nop
 800f380:	0800f425 	.word	0x0800f425
 800f384:	0800f455 	.word	0x0800f455
 800f388:	0800f455 	.word	0x0800f455
 800f38c:	0800f455 	.word	0x0800f455
 800f390:	0800f455 	.word	0x0800f455
 800f394:	0800f455 	.word	0x0800f455
 800f398:	0800f455 	.word	0x0800f455
 800f39c:	0800f455 	.word	0x0800f455
 800f3a0:	0800f42d 	.word	0x0800f42d
 800f3a4:	0800f455 	.word	0x0800f455
 800f3a8:	0800f455 	.word	0x0800f455
 800f3ac:	0800f455 	.word	0x0800f455
 800f3b0:	0800f455 	.word	0x0800f455
 800f3b4:	0800f455 	.word	0x0800f455
 800f3b8:	0800f455 	.word	0x0800f455
 800f3bc:	0800f455 	.word	0x0800f455
 800f3c0:	0800f435 	.word	0x0800f435
 800f3c4:	0800f455 	.word	0x0800f455
 800f3c8:	0800f455 	.word	0x0800f455
 800f3cc:	0800f455 	.word	0x0800f455
 800f3d0:	0800f455 	.word	0x0800f455
 800f3d4:	0800f455 	.word	0x0800f455
 800f3d8:	0800f455 	.word	0x0800f455
 800f3dc:	0800f455 	.word	0x0800f455
 800f3e0:	0800f43d 	.word	0x0800f43d
 800f3e4:	0800f455 	.word	0x0800f455
 800f3e8:	0800f455 	.word	0x0800f455
 800f3ec:	0800f455 	.word	0x0800f455
 800f3f0:	0800f455 	.word	0x0800f455
 800f3f4:	0800f455 	.word	0x0800f455
 800f3f8:	0800f455 	.word	0x0800f455
 800f3fc:	0800f455 	.word	0x0800f455
 800f400:	0800f445 	.word	0x0800f445
 800f404:	0800f455 	.word	0x0800f455
 800f408:	0800f455 	.word	0x0800f455
 800f40c:	0800f455 	.word	0x0800f455
 800f410:	0800f455 	.word	0x0800f455
 800f414:	0800f455 	.word	0x0800f455
 800f418:	0800f455 	.word	0x0800f455
 800f41c:	0800f455 	.word	0x0800f455
 800f420:	0800f44d 	.word	0x0800f44d
 800f424:	2301      	movs	r3, #1
 800f426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f42a:	e326      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f42c:	2304      	movs	r3, #4
 800f42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f432:	e322      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f434:	2308      	movs	r3, #8
 800f436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f43a:	e31e      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f43c:	2310      	movs	r3, #16
 800f43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f442:	e31a      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f444:	2320      	movs	r3, #32
 800f446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f44a:	e316      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f44c:	2340      	movs	r3, #64	@ 0x40
 800f44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f452:	e312      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f454:	2380      	movs	r3, #128	@ 0x80
 800f456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f45a:	e30e      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a69      	ldr	r2, [pc, #420]	@ (800f608 <UART_SetConfig+0x33c>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d130      	bne.n	800f4c8 <UART_SetConfig+0x1fc>
 800f466:	4b67      	ldr	r3, [pc, #412]	@ (800f604 <UART_SetConfig+0x338>)
 800f468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f46a:	f003 0307 	and.w	r3, r3, #7
 800f46e:	2b05      	cmp	r3, #5
 800f470:	d826      	bhi.n	800f4c0 <UART_SetConfig+0x1f4>
 800f472:	a201      	add	r2, pc, #4	@ (adr r2, 800f478 <UART_SetConfig+0x1ac>)
 800f474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f478:	0800f491 	.word	0x0800f491
 800f47c:	0800f499 	.word	0x0800f499
 800f480:	0800f4a1 	.word	0x0800f4a1
 800f484:	0800f4a9 	.word	0x0800f4a9
 800f488:	0800f4b1 	.word	0x0800f4b1
 800f48c:	0800f4b9 	.word	0x0800f4b9
 800f490:	2300      	movs	r3, #0
 800f492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f496:	e2f0      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f498:	2304      	movs	r3, #4
 800f49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f49e:	e2ec      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f4a0:	2308      	movs	r3, #8
 800f4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4a6:	e2e8      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f4a8:	2310      	movs	r3, #16
 800f4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4ae:	e2e4      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f4b0:	2320      	movs	r3, #32
 800f4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4b6:	e2e0      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f4b8:	2340      	movs	r3, #64	@ 0x40
 800f4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4be:	e2dc      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f4c0:	2380      	movs	r3, #128	@ 0x80
 800f4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4c6:	e2d8      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4a4f      	ldr	r2, [pc, #316]	@ (800f60c <UART_SetConfig+0x340>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d130      	bne.n	800f534 <UART_SetConfig+0x268>
 800f4d2:	4b4c      	ldr	r3, [pc, #304]	@ (800f604 <UART_SetConfig+0x338>)
 800f4d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4d6:	f003 0307 	and.w	r3, r3, #7
 800f4da:	2b05      	cmp	r3, #5
 800f4dc:	d826      	bhi.n	800f52c <UART_SetConfig+0x260>
 800f4de:	a201      	add	r2, pc, #4	@ (adr r2, 800f4e4 <UART_SetConfig+0x218>)
 800f4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4e4:	0800f4fd 	.word	0x0800f4fd
 800f4e8:	0800f505 	.word	0x0800f505
 800f4ec:	0800f50d 	.word	0x0800f50d
 800f4f0:	0800f515 	.word	0x0800f515
 800f4f4:	0800f51d 	.word	0x0800f51d
 800f4f8:	0800f525 	.word	0x0800f525
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f502:	e2ba      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f504:	2304      	movs	r3, #4
 800f506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f50a:	e2b6      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f50c:	2308      	movs	r3, #8
 800f50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f512:	e2b2      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f514:	2310      	movs	r3, #16
 800f516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f51a:	e2ae      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f51c:	2320      	movs	r3, #32
 800f51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f522:	e2aa      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f524:	2340      	movs	r3, #64	@ 0x40
 800f526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f52a:	e2a6      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f52c:	2380      	movs	r3, #128	@ 0x80
 800f52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f532:	e2a2      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4a35      	ldr	r2, [pc, #212]	@ (800f610 <UART_SetConfig+0x344>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d130      	bne.n	800f5a0 <UART_SetConfig+0x2d4>
 800f53e:	4b31      	ldr	r3, [pc, #196]	@ (800f604 <UART_SetConfig+0x338>)
 800f540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f542:	f003 0307 	and.w	r3, r3, #7
 800f546:	2b05      	cmp	r3, #5
 800f548:	d826      	bhi.n	800f598 <UART_SetConfig+0x2cc>
 800f54a:	a201      	add	r2, pc, #4	@ (adr r2, 800f550 <UART_SetConfig+0x284>)
 800f54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f550:	0800f569 	.word	0x0800f569
 800f554:	0800f571 	.word	0x0800f571
 800f558:	0800f579 	.word	0x0800f579
 800f55c:	0800f581 	.word	0x0800f581
 800f560:	0800f589 	.word	0x0800f589
 800f564:	0800f591 	.word	0x0800f591
 800f568:	2300      	movs	r3, #0
 800f56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f56e:	e284      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f570:	2304      	movs	r3, #4
 800f572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f576:	e280      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f578:	2308      	movs	r3, #8
 800f57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f57e:	e27c      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f580:	2310      	movs	r3, #16
 800f582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f586:	e278      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f588:	2320      	movs	r3, #32
 800f58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f58e:	e274      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f590:	2340      	movs	r3, #64	@ 0x40
 800f592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f596:	e270      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f598:	2380      	movs	r3, #128	@ 0x80
 800f59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f59e:	e26c      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	4a1b      	ldr	r2, [pc, #108]	@ (800f614 <UART_SetConfig+0x348>)
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d142      	bne.n	800f630 <UART_SetConfig+0x364>
 800f5aa:	4b16      	ldr	r3, [pc, #88]	@ (800f604 <UART_SetConfig+0x338>)
 800f5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5ae:	f003 0307 	and.w	r3, r3, #7
 800f5b2:	2b05      	cmp	r3, #5
 800f5b4:	d838      	bhi.n	800f628 <UART_SetConfig+0x35c>
 800f5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800f5bc <UART_SetConfig+0x2f0>)
 800f5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5bc:	0800f5d5 	.word	0x0800f5d5
 800f5c0:	0800f5dd 	.word	0x0800f5dd
 800f5c4:	0800f5e5 	.word	0x0800f5e5
 800f5c8:	0800f5ed 	.word	0x0800f5ed
 800f5cc:	0800f619 	.word	0x0800f619
 800f5d0:	0800f621 	.word	0x0800f621
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5da:	e24e      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f5dc:	2304      	movs	r3, #4
 800f5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5e2:	e24a      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f5e4:	2308      	movs	r3, #8
 800f5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5ea:	e246      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f5ec:	2310      	movs	r3, #16
 800f5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f5f2:	e242      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f5f4:	cfff69f3 	.word	0xcfff69f3
 800f5f8:	58000c00 	.word	0x58000c00
 800f5fc:	11fff4ff 	.word	0x11fff4ff
 800f600:	40011000 	.word	0x40011000
 800f604:	58024400 	.word	0x58024400
 800f608:	40004400 	.word	0x40004400
 800f60c:	40004800 	.word	0x40004800
 800f610:	40004c00 	.word	0x40004c00
 800f614:	40005000 	.word	0x40005000
 800f618:	2320      	movs	r3, #32
 800f61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f61e:	e22c      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f620:	2340      	movs	r3, #64	@ 0x40
 800f622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f626:	e228      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f628:	2380      	movs	r3, #128	@ 0x80
 800f62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f62e:	e224      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	4ab1      	ldr	r2, [pc, #708]	@ (800f8fc <UART_SetConfig+0x630>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d176      	bne.n	800f728 <UART_SetConfig+0x45c>
 800f63a:	4bb1      	ldr	r3, [pc, #708]	@ (800f900 <UART_SetConfig+0x634>)
 800f63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f63e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f642:	2b28      	cmp	r3, #40	@ 0x28
 800f644:	d86c      	bhi.n	800f720 <UART_SetConfig+0x454>
 800f646:	a201      	add	r2, pc, #4	@ (adr r2, 800f64c <UART_SetConfig+0x380>)
 800f648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f64c:	0800f6f1 	.word	0x0800f6f1
 800f650:	0800f721 	.word	0x0800f721
 800f654:	0800f721 	.word	0x0800f721
 800f658:	0800f721 	.word	0x0800f721
 800f65c:	0800f721 	.word	0x0800f721
 800f660:	0800f721 	.word	0x0800f721
 800f664:	0800f721 	.word	0x0800f721
 800f668:	0800f721 	.word	0x0800f721
 800f66c:	0800f6f9 	.word	0x0800f6f9
 800f670:	0800f721 	.word	0x0800f721
 800f674:	0800f721 	.word	0x0800f721
 800f678:	0800f721 	.word	0x0800f721
 800f67c:	0800f721 	.word	0x0800f721
 800f680:	0800f721 	.word	0x0800f721
 800f684:	0800f721 	.word	0x0800f721
 800f688:	0800f721 	.word	0x0800f721
 800f68c:	0800f701 	.word	0x0800f701
 800f690:	0800f721 	.word	0x0800f721
 800f694:	0800f721 	.word	0x0800f721
 800f698:	0800f721 	.word	0x0800f721
 800f69c:	0800f721 	.word	0x0800f721
 800f6a0:	0800f721 	.word	0x0800f721
 800f6a4:	0800f721 	.word	0x0800f721
 800f6a8:	0800f721 	.word	0x0800f721
 800f6ac:	0800f709 	.word	0x0800f709
 800f6b0:	0800f721 	.word	0x0800f721
 800f6b4:	0800f721 	.word	0x0800f721
 800f6b8:	0800f721 	.word	0x0800f721
 800f6bc:	0800f721 	.word	0x0800f721
 800f6c0:	0800f721 	.word	0x0800f721
 800f6c4:	0800f721 	.word	0x0800f721
 800f6c8:	0800f721 	.word	0x0800f721
 800f6cc:	0800f711 	.word	0x0800f711
 800f6d0:	0800f721 	.word	0x0800f721
 800f6d4:	0800f721 	.word	0x0800f721
 800f6d8:	0800f721 	.word	0x0800f721
 800f6dc:	0800f721 	.word	0x0800f721
 800f6e0:	0800f721 	.word	0x0800f721
 800f6e4:	0800f721 	.word	0x0800f721
 800f6e8:	0800f721 	.word	0x0800f721
 800f6ec:	0800f719 	.word	0x0800f719
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6f6:	e1c0      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f6f8:	2304      	movs	r3, #4
 800f6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6fe:	e1bc      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f700:	2308      	movs	r3, #8
 800f702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f706:	e1b8      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f708:	2310      	movs	r3, #16
 800f70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f70e:	e1b4      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f710:	2320      	movs	r3, #32
 800f712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f716:	e1b0      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f718:	2340      	movs	r3, #64	@ 0x40
 800f71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71e:	e1ac      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f720:	2380      	movs	r3, #128	@ 0x80
 800f722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f726:	e1a8      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a75      	ldr	r2, [pc, #468]	@ (800f904 <UART_SetConfig+0x638>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d130      	bne.n	800f794 <UART_SetConfig+0x4c8>
 800f732:	4b73      	ldr	r3, [pc, #460]	@ (800f900 <UART_SetConfig+0x634>)
 800f734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f736:	f003 0307 	and.w	r3, r3, #7
 800f73a:	2b05      	cmp	r3, #5
 800f73c:	d826      	bhi.n	800f78c <UART_SetConfig+0x4c0>
 800f73e:	a201      	add	r2, pc, #4	@ (adr r2, 800f744 <UART_SetConfig+0x478>)
 800f740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f744:	0800f75d 	.word	0x0800f75d
 800f748:	0800f765 	.word	0x0800f765
 800f74c:	0800f76d 	.word	0x0800f76d
 800f750:	0800f775 	.word	0x0800f775
 800f754:	0800f77d 	.word	0x0800f77d
 800f758:	0800f785 	.word	0x0800f785
 800f75c:	2300      	movs	r3, #0
 800f75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f762:	e18a      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f764:	2304      	movs	r3, #4
 800f766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f76a:	e186      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f76c:	2308      	movs	r3, #8
 800f76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f772:	e182      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f774:	2310      	movs	r3, #16
 800f776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77a:	e17e      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f77c:	2320      	movs	r3, #32
 800f77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f782:	e17a      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f784:	2340      	movs	r3, #64	@ 0x40
 800f786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78a:	e176      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f78c:	2380      	movs	r3, #128	@ 0x80
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f792:	e172      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	4a5b      	ldr	r2, [pc, #364]	@ (800f908 <UART_SetConfig+0x63c>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	d130      	bne.n	800f800 <UART_SetConfig+0x534>
 800f79e:	4b58      	ldr	r3, [pc, #352]	@ (800f900 <UART_SetConfig+0x634>)
 800f7a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7a2:	f003 0307 	and.w	r3, r3, #7
 800f7a6:	2b05      	cmp	r3, #5
 800f7a8:	d826      	bhi.n	800f7f8 <UART_SetConfig+0x52c>
 800f7aa:	a201      	add	r2, pc, #4	@ (adr r2, 800f7b0 <UART_SetConfig+0x4e4>)
 800f7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b0:	0800f7c9 	.word	0x0800f7c9
 800f7b4:	0800f7d1 	.word	0x0800f7d1
 800f7b8:	0800f7d9 	.word	0x0800f7d9
 800f7bc:	0800f7e1 	.word	0x0800f7e1
 800f7c0:	0800f7e9 	.word	0x0800f7e9
 800f7c4:	0800f7f1 	.word	0x0800f7f1
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ce:	e154      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f7d0:	2304      	movs	r3, #4
 800f7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7d6:	e150      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f7d8:	2308      	movs	r3, #8
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7de:	e14c      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f7e0:	2310      	movs	r3, #16
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e6:	e148      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f7e8:	2320      	movs	r3, #32
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ee:	e144      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f7f0:	2340      	movs	r3, #64	@ 0x40
 800f7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7f6:	e140      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f7f8:	2380      	movs	r3, #128	@ 0x80
 800f7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7fe:	e13c      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4a41      	ldr	r2, [pc, #260]	@ (800f90c <UART_SetConfig+0x640>)
 800f806:	4293      	cmp	r3, r2
 800f808:	f040 8082 	bne.w	800f910 <UART_SetConfig+0x644>
 800f80c:	4b3c      	ldr	r3, [pc, #240]	@ (800f900 <UART_SetConfig+0x634>)
 800f80e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f810:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f814:	2b28      	cmp	r3, #40	@ 0x28
 800f816:	d86d      	bhi.n	800f8f4 <UART_SetConfig+0x628>
 800f818:	a201      	add	r2, pc, #4	@ (adr r2, 800f820 <UART_SetConfig+0x554>)
 800f81a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f81e:	bf00      	nop
 800f820:	0800f8c5 	.word	0x0800f8c5
 800f824:	0800f8f5 	.word	0x0800f8f5
 800f828:	0800f8f5 	.word	0x0800f8f5
 800f82c:	0800f8f5 	.word	0x0800f8f5
 800f830:	0800f8f5 	.word	0x0800f8f5
 800f834:	0800f8f5 	.word	0x0800f8f5
 800f838:	0800f8f5 	.word	0x0800f8f5
 800f83c:	0800f8f5 	.word	0x0800f8f5
 800f840:	0800f8cd 	.word	0x0800f8cd
 800f844:	0800f8f5 	.word	0x0800f8f5
 800f848:	0800f8f5 	.word	0x0800f8f5
 800f84c:	0800f8f5 	.word	0x0800f8f5
 800f850:	0800f8f5 	.word	0x0800f8f5
 800f854:	0800f8f5 	.word	0x0800f8f5
 800f858:	0800f8f5 	.word	0x0800f8f5
 800f85c:	0800f8f5 	.word	0x0800f8f5
 800f860:	0800f8d5 	.word	0x0800f8d5
 800f864:	0800f8f5 	.word	0x0800f8f5
 800f868:	0800f8f5 	.word	0x0800f8f5
 800f86c:	0800f8f5 	.word	0x0800f8f5
 800f870:	0800f8f5 	.word	0x0800f8f5
 800f874:	0800f8f5 	.word	0x0800f8f5
 800f878:	0800f8f5 	.word	0x0800f8f5
 800f87c:	0800f8f5 	.word	0x0800f8f5
 800f880:	0800f8dd 	.word	0x0800f8dd
 800f884:	0800f8f5 	.word	0x0800f8f5
 800f888:	0800f8f5 	.word	0x0800f8f5
 800f88c:	0800f8f5 	.word	0x0800f8f5
 800f890:	0800f8f5 	.word	0x0800f8f5
 800f894:	0800f8f5 	.word	0x0800f8f5
 800f898:	0800f8f5 	.word	0x0800f8f5
 800f89c:	0800f8f5 	.word	0x0800f8f5
 800f8a0:	0800f8e5 	.word	0x0800f8e5
 800f8a4:	0800f8f5 	.word	0x0800f8f5
 800f8a8:	0800f8f5 	.word	0x0800f8f5
 800f8ac:	0800f8f5 	.word	0x0800f8f5
 800f8b0:	0800f8f5 	.word	0x0800f8f5
 800f8b4:	0800f8f5 	.word	0x0800f8f5
 800f8b8:	0800f8f5 	.word	0x0800f8f5
 800f8bc:	0800f8f5 	.word	0x0800f8f5
 800f8c0:	0800f8ed 	.word	0x0800f8ed
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ca:	e0d6      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f8cc:	2304      	movs	r3, #4
 800f8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8d2:	e0d2      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f8d4:	2308      	movs	r3, #8
 800f8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8da:	e0ce      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f8dc:	2310      	movs	r3, #16
 800f8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8e2:	e0ca      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f8e4:	2320      	movs	r3, #32
 800f8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ea:	e0c6      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f8ec:	2340      	movs	r3, #64	@ 0x40
 800f8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8f2:	e0c2      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f8f4:	2380      	movs	r3, #128	@ 0x80
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8fa:	e0be      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f8fc:	40011400 	.word	0x40011400
 800f900:	58024400 	.word	0x58024400
 800f904:	40007800 	.word	0x40007800
 800f908:	40007c00 	.word	0x40007c00
 800f90c:	40011800 	.word	0x40011800
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	4aad      	ldr	r2, [pc, #692]	@ (800fbcc <UART_SetConfig+0x900>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d176      	bne.n	800fa08 <UART_SetConfig+0x73c>
 800f91a:	4bad      	ldr	r3, [pc, #692]	@ (800fbd0 <UART_SetConfig+0x904>)
 800f91c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f91e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f922:	2b28      	cmp	r3, #40	@ 0x28
 800f924:	d86c      	bhi.n	800fa00 <UART_SetConfig+0x734>
 800f926:	a201      	add	r2, pc, #4	@ (adr r2, 800f92c <UART_SetConfig+0x660>)
 800f928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f92c:	0800f9d1 	.word	0x0800f9d1
 800f930:	0800fa01 	.word	0x0800fa01
 800f934:	0800fa01 	.word	0x0800fa01
 800f938:	0800fa01 	.word	0x0800fa01
 800f93c:	0800fa01 	.word	0x0800fa01
 800f940:	0800fa01 	.word	0x0800fa01
 800f944:	0800fa01 	.word	0x0800fa01
 800f948:	0800fa01 	.word	0x0800fa01
 800f94c:	0800f9d9 	.word	0x0800f9d9
 800f950:	0800fa01 	.word	0x0800fa01
 800f954:	0800fa01 	.word	0x0800fa01
 800f958:	0800fa01 	.word	0x0800fa01
 800f95c:	0800fa01 	.word	0x0800fa01
 800f960:	0800fa01 	.word	0x0800fa01
 800f964:	0800fa01 	.word	0x0800fa01
 800f968:	0800fa01 	.word	0x0800fa01
 800f96c:	0800f9e1 	.word	0x0800f9e1
 800f970:	0800fa01 	.word	0x0800fa01
 800f974:	0800fa01 	.word	0x0800fa01
 800f978:	0800fa01 	.word	0x0800fa01
 800f97c:	0800fa01 	.word	0x0800fa01
 800f980:	0800fa01 	.word	0x0800fa01
 800f984:	0800fa01 	.word	0x0800fa01
 800f988:	0800fa01 	.word	0x0800fa01
 800f98c:	0800f9e9 	.word	0x0800f9e9
 800f990:	0800fa01 	.word	0x0800fa01
 800f994:	0800fa01 	.word	0x0800fa01
 800f998:	0800fa01 	.word	0x0800fa01
 800f99c:	0800fa01 	.word	0x0800fa01
 800f9a0:	0800fa01 	.word	0x0800fa01
 800f9a4:	0800fa01 	.word	0x0800fa01
 800f9a8:	0800fa01 	.word	0x0800fa01
 800f9ac:	0800f9f1 	.word	0x0800f9f1
 800f9b0:	0800fa01 	.word	0x0800fa01
 800f9b4:	0800fa01 	.word	0x0800fa01
 800f9b8:	0800fa01 	.word	0x0800fa01
 800f9bc:	0800fa01 	.word	0x0800fa01
 800f9c0:	0800fa01 	.word	0x0800fa01
 800f9c4:	0800fa01 	.word	0x0800fa01
 800f9c8:	0800fa01 	.word	0x0800fa01
 800f9cc:	0800f9f9 	.word	0x0800f9f9
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9d6:	e050      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f9d8:	2304      	movs	r3, #4
 800f9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9de:	e04c      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f9e0:	2308      	movs	r3, #8
 800f9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e6:	e048      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f9e8:	2310      	movs	r3, #16
 800f9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ee:	e044      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f9f0:	2320      	movs	r3, #32
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9f6:	e040      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800f9f8:	2340      	movs	r3, #64	@ 0x40
 800f9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9fe:	e03c      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800fa00:	2380      	movs	r3, #128	@ 0x80
 800fa02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa06:	e038      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4a71      	ldr	r2, [pc, #452]	@ (800fbd4 <UART_SetConfig+0x908>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d130      	bne.n	800fa74 <UART_SetConfig+0x7a8>
 800fa12:	4b6f      	ldr	r3, [pc, #444]	@ (800fbd0 <UART_SetConfig+0x904>)
 800fa14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa16:	f003 0307 	and.w	r3, r3, #7
 800fa1a:	2b05      	cmp	r3, #5
 800fa1c:	d826      	bhi.n	800fa6c <UART_SetConfig+0x7a0>
 800fa1e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa24 <UART_SetConfig+0x758>)
 800fa20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa24:	0800fa3d 	.word	0x0800fa3d
 800fa28:	0800fa45 	.word	0x0800fa45
 800fa2c:	0800fa4d 	.word	0x0800fa4d
 800fa30:	0800fa55 	.word	0x0800fa55
 800fa34:	0800fa5d 	.word	0x0800fa5d
 800fa38:	0800fa65 	.word	0x0800fa65
 800fa3c:	2302      	movs	r3, #2
 800fa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa42:	e01a      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800fa44:	2304      	movs	r3, #4
 800fa46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa4a:	e016      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800fa4c:	2308      	movs	r3, #8
 800fa4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa52:	e012      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800fa54:	2310      	movs	r3, #16
 800fa56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa5a:	e00e      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800fa5c:	2320      	movs	r3, #32
 800fa5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa62:	e00a      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800fa64:	2340      	movs	r3, #64	@ 0x40
 800fa66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa6a:	e006      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800fa6c:	2380      	movs	r3, #128	@ 0x80
 800fa6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa72:	e002      	b.n	800fa7a <UART_SetConfig+0x7ae>
 800fa74:	2380      	movs	r3, #128	@ 0x80
 800fa76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	4a55      	ldr	r2, [pc, #340]	@ (800fbd4 <UART_SetConfig+0x908>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	f040 80f8 	bne.w	800fc76 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fa8a:	2b20      	cmp	r3, #32
 800fa8c:	dc46      	bgt.n	800fb1c <UART_SetConfig+0x850>
 800fa8e:	2b02      	cmp	r3, #2
 800fa90:	db75      	blt.n	800fb7e <UART_SetConfig+0x8b2>
 800fa92:	3b02      	subs	r3, #2
 800fa94:	2b1e      	cmp	r3, #30
 800fa96:	d872      	bhi.n	800fb7e <UART_SetConfig+0x8b2>
 800fa98:	a201      	add	r2, pc, #4	@ (adr r2, 800faa0 <UART_SetConfig+0x7d4>)
 800fa9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa9e:	bf00      	nop
 800faa0:	0800fb23 	.word	0x0800fb23
 800faa4:	0800fb7f 	.word	0x0800fb7f
 800faa8:	0800fb2b 	.word	0x0800fb2b
 800faac:	0800fb7f 	.word	0x0800fb7f
 800fab0:	0800fb7f 	.word	0x0800fb7f
 800fab4:	0800fb7f 	.word	0x0800fb7f
 800fab8:	0800fb3b 	.word	0x0800fb3b
 800fabc:	0800fb7f 	.word	0x0800fb7f
 800fac0:	0800fb7f 	.word	0x0800fb7f
 800fac4:	0800fb7f 	.word	0x0800fb7f
 800fac8:	0800fb7f 	.word	0x0800fb7f
 800facc:	0800fb7f 	.word	0x0800fb7f
 800fad0:	0800fb7f 	.word	0x0800fb7f
 800fad4:	0800fb7f 	.word	0x0800fb7f
 800fad8:	0800fb4b 	.word	0x0800fb4b
 800fadc:	0800fb7f 	.word	0x0800fb7f
 800fae0:	0800fb7f 	.word	0x0800fb7f
 800fae4:	0800fb7f 	.word	0x0800fb7f
 800fae8:	0800fb7f 	.word	0x0800fb7f
 800faec:	0800fb7f 	.word	0x0800fb7f
 800faf0:	0800fb7f 	.word	0x0800fb7f
 800faf4:	0800fb7f 	.word	0x0800fb7f
 800faf8:	0800fb7f 	.word	0x0800fb7f
 800fafc:	0800fb7f 	.word	0x0800fb7f
 800fb00:	0800fb7f 	.word	0x0800fb7f
 800fb04:	0800fb7f 	.word	0x0800fb7f
 800fb08:	0800fb7f 	.word	0x0800fb7f
 800fb0c:	0800fb7f 	.word	0x0800fb7f
 800fb10:	0800fb7f 	.word	0x0800fb7f
 800fb14:	0800fb7f 	.word	0x0800fb7f
 800fb18:	0800fb71 	.word	0x0800fb71
 800fb1c:	2b40      	cmp	r3, #64	@ 0x40
 800fb1e:	d02a      	beq.n	800fb76 <UART_SetConfig+0x8aa>
 800fb20:	e02d      	b.n	800fb7e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fb22:	f7fb fe59 	bl	800b7d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800fb26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fb28:	e02f      	b.n	800fb8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fb fe68 	bl	800b804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb38:	e027      	b.n	800fb8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb3a:	f107 0318 	add.w	r3, r7, #24
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fb ffb4 	bl	800baac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb48:	e01f      	b.n	800fb8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb4a:	4b21      	ldr	r3, [pc, #132]	@ (800fbd0 <UART_SetConfig+0x904>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f003 0320 	and.w	r3, r3, #32
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d009      	beq.n	800fb6a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb56:	4b1e      	ldr	r3, [pc, #120]	@ (800fbd0 <UART_SetConfig+0x904>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	08db      	lsrs	r3, r3, #3
 800fb5c:	f003 0303 	and.w	r3, r3, #3
 800fb60:	4a1d      	ldr	r2, [pc, #116]	@ (800fbd8 <UART_SetConfig+0x90c>)
 800fb62:	fa22 f303 	lsr.w	r3, r2, r3
 800fb66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb68:	e00f      	b.n	800fb8a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fb6a:	4b1b      	ldr	r3, [pc, #108]	@ (800fbd8 <UART_SetConfig+0x90c>)
 800fb6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb6e:	e00c      	b.n	800fb8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb70:	4b1a      	ldr	r3, [pc, #104]	@ (800fbdc <UART_SetConfig+0x910>)
 800fb72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb74:	e009      	b.n	800fb8a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fb7c:	e005      	b.n	800fb8a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fb82:	2301      	movs	r3, #1
 800fb84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fb88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f000 81ee 	beq.w	800ff6e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb96:	4a12      	ldr	r2, [pc, #72]	@ (800fbe0 <UART_SetConfig+0x914>)
 800fb98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fba0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fba4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	685a      	ldr	r2, [r3, #4]
 800fbaa:	4613      	mov	r3, r2
 800fbac:	005b      	lsls	r3, r3, #1
 800fbae:	4413      	add	r3, r2
 800fbb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d305      	bcc.n	800fbc2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d910      	bls.n	800fbe4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fbc8:	e1d1      	b.n	800ff6e <UART_SetConfig+0xca2>
 800fbca:	bf00      	nop
 800fbcc:	40011c00 	.word	0x40011c00
 800fbd0:	58024400 	.word	0x58024400
 800fbd4:	58000c00 	.word	0x58000c00
 800fbd8:	03d09000 	.word	0x03d09000
 800fbdc:	003d0900 	.word	0x003d0900
 800fbe0:	08018844 	.word	0x08018844
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	60bb      	str	r3, [r7, #8]
 800fbea:	60fa      	str	r2, [r7, #12]
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbf0:	4ac0      	ldr	r2, [pc, #768]	@ (800fef4 <UART_SetConfig+0xc28>)
 800fbf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	603b      	str	r3, [r7, #0]
 800fbfc:	607a      	str	r2, [r7, #4]
 800fbfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc06:	f7f0 fddf 	bl	80007c8 <__aeabi_uldivmod>
 800fc0a:	4602      	mov	r2, r0
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	4610      	mov	r0, r2
 800fc10:	4619      	mov	r1, r3
 800fc12:	f04f 0200 	mov.w	r2, #0
 800fc16:	f04f 0300 	mov.w	r3, #0
 800fc1a:	020b      	lsls	r3, r1, #8
 800fc1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc20:	0202      	lsls	r2, r0, #8
 800fc22:	6979      	ldr	r1, [r7, #20]
 800fc24:	6849      	ldr	r1, [r1, #4]
 800fc26:	0849      	lsrs	r1, r1, #1
 800fc28:	2000      	movs	r0, #0
 800fc2a:	460c      	mov	r4, r1
 800fc2c:	4605      	mov	r5, r0
 800fc2e:	eb12 0804 	adds.w	r8, r2, r4
 800fc32:	eb43 0905 	adc.w	r9, r3, r5
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	469a      	mov	sl, r3
 800fc3e:	4693      	mov	fp, r2
 800fc40:	4652      	mov	r2, sl
 800fc42:	465b      	mov	r3, fp
 800fc44:	4640      	mov	r0, r8
 800fc46:	4649      	mov	r1, r9
 800fc48:	f7f0 fdbe 	bl	80007c8 <__aeabi_uldivmod>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	460b      	mov	r3, r1
 800fc50:	4613      	mov	r3, r2
 800fc52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fc5a:	d308      	bcc.n	800fc6e <UART_SetConfig+0x9a2>
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fc62:	d204      	bcs.n	800fc6e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc6a:	60da      	str	r2, [r3, #12]
 800fc6c:	e17f      	b.n	800ff6e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fc6e:	2301      	movs	r3, #1
 800fc70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fc74:	e17b      	b.n	800ff6e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	69db      	ldr	r3, [r3, #28]
 800fc7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc7e:	f040 80bd 	bne.w	800fdfc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fc82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fc86:	2b20      	cmp	r3, #32
 800fc88:	dc48      	bgt.n	800fd1c <UART_SetConfig+0xa50>
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	db7b      	blt.n	800fd86 <UART_SetConfig+0xaba>
 800fc8e:	2b20      	cmp	r3, #32
 800fc90:	d879      	bhi.n	800fd86 <UART_SetConfig+0xaba>
 800fc92:	a201      	add	r2, pc, #4	@ (adr r2, 800fc98 <UART_SetConfig+0x9cc>)
 800fc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc98:	0800fd23 	.word	0x0800fd23
 800fc9c:	0800fd2b 	.word	0x0800fd2b
 800fca0:	0800fd87 	.word	0x0800fd87
 800fca4:	0800fd87 	.word	0x0800fd87
 800fca8:	0800fd33 	.word	0x0800fd33
 800fcac:	0800fd87 	.word	0x0800fd87
 800fcb0:	0800fd87 	.word	0x0800fd87
 800fcb4:	0800fd87 	.word	0x0800fd87
 800fcb8:	0800fd43 	.word	0x0800fd43
 800fcbc:	0800fd87 	.word	0x0800fd87
 800fcc0:	0800fd87 	.word	0x0800fd87
 800fcc4:	0800fd87 	.word	0x0800fd87
 800fcc8:	0800fd87 	.word	0x0800fd87
 800fccc:	0800fd87 	.word	0x0800fd87
 800fcd0:	0800fd87 	.word	0x0800fd87
 800fcd4:	0800fd87 	.word	0x0800fd87
 800fcd8:	0800fd53 	.word	0x0800fd53
 800fcdc:	0800fd87 	.word	0x0800fd87
 800fce0:	0800fd87 	.word	0x0800fd87
 800fce4:	0800fd87 	.word	0x0800fd87
 800fce8:	0800fd87 	.word	0x0800fd87
 800fcec:	0800fd87 	.word	0x0800fd87
 800fcf0:	0800fd87 	.word	0x0800fd87
 800fcf4:	0800fd87 	.word	0x0800fd87
 800fcf8:	0800fd87 	.word	0x0800fd87
 800fcfc:	0800fd87 	.word	0x0800fd87
 800fd00:	0800fd87 	.word	0x0800fd87
 800fd04:	0800fd87 	.word	0x0800fd87
 800fd08:	0800fd87 	.word	0x0800fd87
 800fd0c:	0800fd87 	.word	0x0800fd87
 800fd10:	0800fd87 	.word	0x0800fd87
 800fd14:	0800fd87 	.word	0x0800fd87
 800fd18:	0800fd79 	.word	0x0800fd79
 800fd1c:	2b40      	cmp	r3, #64	@ 0x40
 800fd1e:	d02e      	beq.n	800fd7e <UART_SetConfig+0xab2>
 800fd20:	e031      	b.n	800fd86 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd22:	f7fa fb6f 	bl	800a404 <HAL_RCC_GetPCLK1Freq>
 800fd26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fd28:	e033      	b.n	800fd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd2a:	f7fa fb81 	bl	800a430 <HAL_RCC_GetPCLK2Freq>
 800fd2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fd30:	e02f      	b.n	800fd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fb fd64 	bl	800b804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd40:	e027      	b.n	800fd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd42:	f107 0318 	add.w	r3, r7, #24
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fb feb0 	bl	800baac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd50:	e01f      	b.n	800fd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd52:	4b69      	ldr	r3, [pc, #420]	@ (800fef8 <UART_SetConfig+0xc2c>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	f003 0320 	and.w	r3, r3, #32
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d009      	beq.n	800fd72 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd5e:	4b66      	ldr	r3, [pc, #408]	@ (800fef8 <UART_SetConfig+0xc2c>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	08db      	lsrs	r3, r3, #3
 800fd64:	f003 0303 	and.w	r3, r3, #3
 800fd68:	4a64      	ldr	r2, [pc, #400]	@ (800fefc <UART_SetConfig+0xc30>)
 800fd6a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd70:	e00f      	b.n	800fd92 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800fd72:	4b62      	ldr	r3, [pc, #392]	@ (800fefc <UART_SetConfig+0xc30>)
 800fd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd76:	e00c      	b.n	800fd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd78:	4b61      	ldr	r3, [pc, #388]	@ (800ff00 <UART_SetConfig+0xc34>)
 800fd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd7c:	e009      	b.n	800fd92 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd84:	e005      	b.n	800fd92 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800fd86:	2300      	movs	r3, #0
 800fd88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fd90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	f000 80ea 	beq.w	800ff6e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd9e:	4a55      	ldr	r2, [pc, #340]	@ (800fef4 <UART_SetConfig+0xc28>)
 800fda0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fda4:	461a      	mov	r2, r3
 800fda6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fda8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdac:	005a      	lsls	r2, r3, #1
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	085b      	lsrs	r3, r3, #1
 800fdb4:	441a      	add	r2, r3
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fdc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdc2:	2b0f      	cmp	r3, #15
 800fdc4:	d916      	bls.n	800fdf4 <UART_SetConfig+0xb28>
 800fdc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fdcc:	d212      	bcs.n	800fdf4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	f023 030f 	bic.w	r3, r3, #15
 800fdd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdda:	085b      	lsrs	r3, r3, #1
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	f003 0307 	and.w	r3, r3, #7
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fde6:	4313      	orrs	r3, r2
 800fde8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800fdf0:	60da      	str	r2, [r3, #12]
 800fdf2:	e0bc      	b.n	800ff6e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fdfa:	e0b8      	b.n	800ff6e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fdfc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fe00:	2b20      	cmp	r3, #32
 800fe02:	dc4b      	bgt.n	800fe9c <UART_SetConfig+0xbd0>
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f2c0 8087 	blt.w	800ff18 <UART_SetConfig+0xc4c>
 800fe0a:	2b20      	cmp	r3, #32
 800fe0c:	f200 8084 	bhi.w	800ff18 <UART_SetConfig+0xc4c>
 800fe10:	a201      	add	r2, pc, #4	@ (adr r2, 800fe18 <UART_SetConfig+0xb4c>)
 800fe12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe16:	bf00      	nop
 800fe18:	0800fea3 	.word	0x0800fea3
 800fe1c:	0800feab 	.word	0x0800feab
 800fe20:	0800ff19 	.word	0x0800ff19
 800fe24:	0800ff19 	.word	0x0800ff19
 800fe28:	0800feb3 	.word	0x0800feb3
 800fe2c:	0800ff19 	.word	0x0800ff19
 800fe30:	0800ff19 	.word	0x0800ff19
 800fe34:	0800ff19 	.word	0x0800ff19
 800fe38:	0800fec3 	.word	0x0800fec3
 800fe3c:	0800ff19 	.word	0x0800ff19
 800fe40:	0800ff19 	.word	0x0800ff19
 800fe44:	0800ff19 	.word	0x0800ff19
 800fe48:	0800ff19 	.word	0x0800ff19
 800fe4c:	0800ff19 	.word	0x0800ff19
 800fe50:	0800ff19 	.word	0x0800ff19
 800fe54:	0800ff19 	.word	0x0800ff19
 800fe58:	0800fed3 	.word	0x0800fed3
 800fe5c:	0800ff19 	.word	0x0800ff19
 800fe60:	0800ff19 	.word	0x0800ff19
 800fe64:	0800ff19 	.word	0x0800ff19
 800fe68:	0800ff19 	.word	0x0800ff19
 800fe6c:	0800ff19 	.word	0x0800ff19
 800fe70:	0800ff19 	.word	0x0800ff19
 800fe74:	0800ff19 	.word	0x0800ff19
 800fe78:	0800ff19 	.word	0x0800ff19
 800fe7c:	0800ff19 	.word	0x0800ff19
 800fe80:	0800ff19 	.word	0x0800ff19
 800fe84:	0800ff19 	.word	0x0800ff19
 800fe88:	0800ff19 	.word	0x0800ff19
 800fe8c:	0800ff19 	.word	0x0800ff19
 800fe90:	0800ff19 	.word	0x0800ff19
 800fe94:	0800ff19 	.word	0x0800ff19
 800fe98:	0800ff0b 	.word	0x0800ff0b
 800fe9c:	2b40      	cmp	r3, #64	@ 0x40
 800fe9e:	d037      	beq.n	800ff10 <UART_SetConfig+0xc44>
 800fea0:	e03a      	b.n	800ff18 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fea2:	f7fa faaf 	bl	800a404 <HAL_RCC_GetPCLK1Freq>
 800fea6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fea8:	e03c      	b.n	800ff24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800feaa:	f7fa fac1 	bl	800a430 <HAL_RCC_GetPCLK2Freq>
 800feae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800feb0:	e038      	b.n	800ff24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800feb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fb fca4 	bl	800b804 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800febc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800febe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fec0:	e030      	b.n	800ff24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fec2:	f107 0318 	add.w	r3, r7, #24
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fb fdf0 	bl	800baac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fed0:	e028      	b.n	800ff24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fed2:	4b09      	ldr	r3, [pc, #36]	@ (800fef8 <UART_SetConfig+0xc2c>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f003 0320 	and.w	r3, r3, #32
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d012      	beq.n	800ff04 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fede:	4b06      	ldr	r3, [pc, #24]	@ (800fef8 <UART_SetConfig+0xc2c>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	08db      	lsrs	r3, r3, #3
 800fee4:	f003 0303 	and.w	r3, r3, #3
 800fee8:	4a04      	ldr	r2, [pc, #16]	@ (800fefc <UART_SetConfig+0xc30>)
 800feea:	fa22 f303 	lsr.w	r3, r2, r3
 800feee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fef0:	e018      	b.n	800ff24 <UART_SetConfig+0xc58>
 800fef2:	bf00      	nop
 800fef4:	08018844 	.word	0x08018844
 800fef8:	58024400 	.word	0x58024400
 800fefc:	03d09000 	.word	0x03d09000
 800ff00:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ff04:	4b24      	ldr	r3, [pc, #144]	@ (800ff98 <UART_SetConfig+0xccc>)
 800ff06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff08:	e00c      	b.n	800ff24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff0a:	4b24      	ldr	r3, [pc, #144]	@ (800ff9c <UART_SetConfig+0xcd0>)
 800ff0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff0e:	e009      	b.n	800ff24 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff16:	e005      	b.n	800ff24 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ff22:	bf00      	nop
    }

    if (pclk != 0U)
 800ff24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d021      	beq.n	800ff6e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff2e:	4a1c      	ldr	r2, [pc, #112]	@ (800ffa0 <UART_SetConfig+0xcd4>)
 800ff30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff34:	461a      	mov	r2, r3
 800ff36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff38:	fbb3 f2f2 	udiv	r2, r3, r2
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	085b      	lsrs	r3, r3, #1
 800ff42:	441a      	add	r2, r3
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff50:	2b0f      	cmp	r3, #15
 800ff52:	d909      	bls.n	800ff68 <UART_SetConfig+0xc9c>
 800ff54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff5a:	d205      	bcs.n	800ff68 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ff5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff5e:	b29a      	uxth	r2, r3
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	60da      	str	r2, [r3, #12]
 800ff66:	e002      	b.n	800ff6e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	2201      	movs	r2, #1
 800ff72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	2201      	movs	r2, #1
 800ff7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	2200      	movs	r2, #0
 800ff82:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	2200      	movs	r2, #0
 800ff88:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ff8a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3748      	adds	r7, #72	@ 0x48
 800ff92:	46bd      	mov	sp, r7
 800ff94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ff98:	03d09000 	.word	0x03d09000
 800ff9c:	003d0900 	.word	0x003d0900
 800ffa0:	08018844 	.word	0x08018844

0800ffa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b083      	sub	sp, #12
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffb0:	f003 0308 	and.w	r3, r3, #8
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d00a      	beq.n	800ffce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	430a      	orrs	r2, r1
 800ffcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffd2:	f003 0301 	and.w	r3, r3, #1
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00a      	beq.n	800fff0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	430a      	orrs	r2, r1
 800ffee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fff4:	f003 0302 	and.w	r3, r3, #2
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d00a      	beq.n	8010012 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	430a      	orrs	r2, r1
 8010010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010016:	f003 0304 	and.w	r3, r3, #4
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00a      	beq.n	8010034 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	430a      	orrs	r2, r1
 8010032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010038:	f003 0310 	and.w	r3, r3, #16
 801003c:	2b00      	cmp	r3, #0
 801003e:	d00a      	beq.n	8010056 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	689b      	ldr	r3, [r3, #8]
 8010046:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	430a      	orrs	r2, r1
 8010054:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801005a:	f003 0320 	and.w	r3, r3, #32
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00a      	beq.n	8010078 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	689b      	ldr	r3, [r3, #8]
 8010068:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	430a      	orrs	r2, r1
 8010076:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801007c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010080:	2b00      	cmp	r3, #0
 8010082:	d01a      	beq.n	80100ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	430a      	orrs	r2, r1
 8010098:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801009e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80100a2:	d10a      	bne.n	80100ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	430a      	orrs	r2, r1
 80100b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d00a      	beq.n	80100dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	430a      	orrs	r2, r1
 80100da:	605a      	str	r2, [r3, #4]
  }
}
 80100dc:	bf00      	nop
 80100de:	370c      	adds	r7, #12
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr

080100e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b098      	sub	sp, #96	@ 0x60
 80100ec:	af02      	add	r7, sp, #8
 80100ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2200      	movs	r2, #0
 80100f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80100f8:	f7f5 fab4 	bl	8005664 <HAL_GetTick>
 80100fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f003 0308 	and.w	r3, r3, #8
 8010108:	2b08      	cmp	r3, #8
 801010a:	d12f      	bne.n	801016c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801010c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010110:	9300      	str	r3, [sp, #0]
 8010112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010114:	2200      	movs	r2, #0
 8010116:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 f88e 	bl	801023c <UART_WaitOnFlagUntilTimeout>
 8010120:	4603      	mov	r3, r0
 8010122:	2b00      	cmp	r3, #0
 8010124:	d022      	beq.n	801016c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801012c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801012e:	e853 3f00 	ldrex	r3, [r3]
 8010132:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801013a:	653b      	str	r3, [r7, #80]	@ 0x50
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	461a      	mov	r2, r3
 8010142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010144:	647b      	str	r3, [r7, #68]	@ 0x44
 8010146:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010148:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801014a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801014c:	e841 2300 	strex	r3, r2, [r1]
 8010150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010154:	2b00      	cmp	r3, #0
 8010156:	d1e6      	bne.n	8010126 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2220      	movs	r2, #32
 801015c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2200      	movs	r2, #0
 8010164:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010168:	2303      	movs	r3, #3
 801016a:	e063      	b.n	8010234 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f003 0304 	and.w	r3, r3, #4
 8010176:	2b04      	cmp	r3, #4
 8010178:	d149      	bne.n	801020e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801017a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010182:	2200      	movs	r2, #0
 8010184:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f000 f857 	bl	801023c <UART_WaitOnFlagUntilTimeout>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d03c      	beq.n	801020e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801019a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801019c:	e853 3f00 	ldrex	r3, [r3]
 80101a0:	623b      	str	r3, [r7, #32]
   return(result);
 80101a2:	6a3b      	ldr	r3, [r7, #32]
 80101a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80101a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	461a      	mov	r2, r3
 80101b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80101b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80101b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101ba:	e841 2300 	strex	r3, r2, [r1]
 80101be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80101c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d1e6      	bne.n	8010194 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	3308      	adds	r3, #8
 80101cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	e853 3f00 	ldrex	r3, [r3]
 80101d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	f023 0301 	bic.w	r3, r3, #1
 80101dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	3308      	adds	r3, #8
 80101e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80101e6:	61fa      	str	r2, [r7, #28]
 80101e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ea:	69b9      	ldr	r1, [r7, #24]
 80101ec:	69fa      	ldr	r2, [r7, #28]
 80101ee:	e841 2300 	strex	r3, r2, [r1]
 80101f2:	617b      	str	r3, [r7, #20]
   return(result);
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d1e5      	bne.n	80101c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2220      	movs	r2, #32
 80101fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2200      	movs	r2, #0
 8010206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801020a:	2303      	movs	r3, #3
 801020c:	e012      	b.n	8010234 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2220      	movs	r2, #32
 8010212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2220      	movs	r2, #32
 801021a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2200      	movs	r2, #0
 801022e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010232:	2300      	movs	r3, #0
}
 8010234:	4618      	mov	r0, r3
 8010236:	3758      	adds	r7, #88	@ 0x58
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	603b      	str	r3, [r7, #0]
 8010248:	4613      	mov	r3, r2
 801024a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801024c:	e04f      	b.n	80102ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010254:	d04b      	beq.n	80102ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010256:	f7f5 fa05 	bl	8005664 <HAL_GetTick>
 801025a:	4602      	mov	r2, r0
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	69ba      	ldr	r2, [r7, #24]
 8010262:	429a      	cmp	r2, r3
 8010264:	d302      	bcc.n	801026c <UART_WaitOnFlagUntilTimeout+0x30>
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d101      	bne.n	8010270 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801026c:	2303      	movs	r3, #3
 801026e:	e04e      	b.n	801030e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f003 0304 	and.w	r3, r3, #4
 801027a:	2b00      	cmp	r3, #0
 801027c:	d037      	beq.n	80102ee <UART_WaitOnFlagUntilTimeout+0xb2>
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	2b80      	cmp	r3, #128	@ 0x80
 8010282:	d034      	beq.n	80102ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	2b40      	cmp	r3, #64	@ 0x40
 8010288:	d031      	beq.n	80102ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	69db      	ldr	r3, [r3, #28]
 8010290:	f003 0308 	and.w	r3, r3, #8
 8010294:	2b08      	cmp	r3, #8
 8010296:	d110      	bne.n	80102ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2208      	movs	r2, #8
 801029e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80102a0:	68f8      	ldr	r0, [r7, #12]
 80102a2:	f000 f921 	bl	80104e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2208      	movs	r2, #8
 80102aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2200      	movs	r2, #0
 80102b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80102b6:	2301      	movs	r3, #1
 80102b8:	e029      	b.n	801030e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	69db      	ldr	r3, [r3, #28]
 80102c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80102c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102c8:	d111      	bne.n	80102ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80102d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80102d4:	68f8      	ldr	r0, [r7, #12]
 80102d6:	f000 f907 	bl	80104e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2220      	movs	r2, #32
 80102de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2200      	movs	r2, #0
 80102e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80102ea:	2303      	movs	r3, #3
 80102ec:	e00f      	b.n	801030e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	69da      	ldr	r2, [r3, #28]
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	4013      	ands	r3, r2
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	bf0c      	ite	eq
 80102fe:	2301      	moveq	r3, #1
 8010300:	2300      	movne	r3, #0
 8010302:	b2db      	uxtb	r3, r3
 8010304:	461a      	mov	r2, r3
 8010306:	79fb      	ldrb	r3, [r7, #7]
 8010308:	429a      	cmp	r2, r3
 801030a:	d0a0      	beq.n	801024e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801030c:	2300      	movs	r3, #0
}
 801030e:	4618      	mov	r0, r3
 8010310:	3710      	adds	r7, #16
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
	...

08010318 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b096      	sub	sp, #88	@ 0x58
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	4613      	mov	r3, r2
 8010324:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	68ba      	ldr	r2, [r7, #8]
 801032a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	88fa      	ldrh	r2, [r7, #6]
 8010330:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	2200      	movs	r2, #0
 8010338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2222      	movs	r2, #34	@ 0x22
 8010340:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801034a:	2b00      	cmp	r3, #0
 801034c:	d02d      	beq.n	80103aa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010354:	4a40      	ldr	r2, [pc, #256]	@ (8010458 <UART_Start_Receive_DMA+0x140>)
 8010356:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801035e:	4a3f      	ldr	r2, [pc, #252]	@ (801045c <UART_Start_Receive_DMA+0x144>)
 8010360:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010368:	4a3d      	ldr	r2, [pc, #244]	@ (8010460 <UART_Start_Receive_DMA+0x148>)
 801036a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010372:	2200      	movs	r2, #0
 8010374:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	3324      	adds	r3, #36	@ 0x24
 8010382:	4619      	mov	r1, r3
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010388:	461a      	mov	r2, r3
 801038a:	88fb      	ldrh	r3, [r7, #6]
 801038c:	f7f5 feb0 	bl	80060f0 <HAL_DMA_Start_IT>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d009      	beq.n	80103aa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	2210      	movs	r2, #16
 801039a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2220      	movs	r2, #32
 80103a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80103a6:	2301      	movs	r3, #1
 80103a8:	e051      	b.n	801044e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	691b      	ldr	r3, [r3, #16]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d018      	beq.n	80103e4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103ba:	e853 3f00 	ldrex	r3, [r3]
 80103be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80103c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80103c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	461a      	mov	r2, r3
 80103ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80103d2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80103d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80103d8:	e841 2300 	strex	r3, r2, [r1]
 80103dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80103de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d1e6      	bne.n	80103b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	3308      	adds	r3, #8
 80103ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103ee:	e853 3f00 	ldrex	r3, [r3]
 80103f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80103f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103f6:	f043 0301 	orr.w	r3, r3, #1
 80103fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	3308      	adds	r3, #8
 8010402:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010404:	637a      	str	r2, [r7, #52]	@ 0x34
 8010406:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010408:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801040a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801040c:	e841 2300 	strex	r3, r2, [r1]
 8010410:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010414:	2b00      	cmp	r3, #0
 8010416:	d1e5      	bne.n	80103e4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	3308      	adds	r3, #8
 801041e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	e853 3f00 	ldrex	r3, [r3]
 8010426:	613b      	str	r3, [r7, #16]
   return(result);
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801042e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	3308      	adds	r3, #8
 8010436:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010438:	623a      	str	r2, [r7, #32]
 801043a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043c:	69f9      	ldr	r1, [r7, #28]
 801043e:	6a3a      	ldr	r2, [r7, #32]
 8010440:	e841 2300 	strex	r3, r2, [r1]
 8010444:	61bb      	str	r3, [r7, #24]
   return(result);
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d1e5      	bne.n	8010418 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801044c:	2300      	movs	r3, #0
}
 801044e:	4618      	mov	r0, r3
 8010450:	3758      	adds	r7, #88	@ 0x58
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	080105b5 	.word	0x080105b5
 801045c:	080106dd 	.word	0x080106dd
 8010460:	0801071b 	.word	0x0801071b

08010464 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010464:	b480      	push	{r7}
 8010466:	b08f      	sub	sp, #60	@ 0x3c
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010472:	6a3b      	ldr	r3, [r7, #32]
 8010474:	e853 3f00 	ldrex	r3, [r3]
 8010478:	61fb      	str	r3, [r7, #28]
   return(result);
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010480:	637b      	str	r3, [r7, #52]	@ 0x34
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	461a      	mov	r2, r3
 8010488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801048a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801048c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801048e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010492:	e841 2300 	strex	r3, r2, [r1]
 8010496:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801049a:	2b00      	cmp	r3, #0
 801049c:	d1e6      	bne.n	801046c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	3308      	adds	r3, #8
 80104a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	e853 3f00 	ldrex	r3, [r3]
 80104ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80104b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	3308      	adds	r3, #8
 80104bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104be:	61ba      	str	r2, [r7, #24]
 80104c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c2:	6979      	ldr	r1, [r7, #20]
 80104c4:	69ba      	ldr	r2, [r7, #24]
 80104c6:	e841 2300 	strex	r3, r2, [r1]
 80104ca:	613b      	str	r3, [r7, #16]
   return(result);
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1e5      	bne.n	801049e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2220      	movs	r2, #32
 80104d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80104da:	bf00      	nop
 80104dc:	373c      	adds	r7, #60	@ 0x3c
 80104de:	46bd      	mov	sp, r7
 80104e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e4:	4770      	bx	lr
	...

080104e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b095      	sub	sp, #84	@ 0x54
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104f8:	e853 3f00 	ldrex	r3, [r3]
 80104fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80104fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010504:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	461a      	mov	r2, r3
 801050c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801050e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010510:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010512:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010514:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010516:	e841 2300 	strex	r3, r2, [r1]
 801051a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801051c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801051e:	2b00      	cmp	r3, #0
 8010520:	d1e6      	bne.n	80104f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	3308      	adds	r3, #8
 8010528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801052a:	6a3b      	ldr	r3, [r7, #32]
 801052c:	e853 3f00 	ldrex	r3, [r3]
 8010530:	61fb      	str	r3, [r7, #28]
   return(result);
 8010532:	69fa      	ldr	r2, [r7, #28]
 8010534:	4b1e      	ldr	r3, [pc, #120]	@ (80105b0 <UART_EndRxTransfer+0xc8>)
 8010536:	4013      	ands	r3, r2
 8010538:	64bb      	str	r3, [r7, #72]	@ 0x48
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	3308      	adds	r3, #8
 8010540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010544:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801054a:	e841 2300 	strex	r3, r2, [r1]
 801054e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010552:	2b00      	cmp	r3, #0
 8010554:	d1e5      	bne.n	8010522 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801055a:	2b01      	cmp	r3, #1
 801055c:	d118      	bne.n	8010590 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	e853 3f00 	ldrex	r3, [r3]
 801056a:	60bb      	str	r3, [r7, #8]
   return(result);
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	f023 0310 	bic.w	r3, r3, #16
 8010572:	647b      	str	r3, [r7, #68]	@ 0x44
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	461a      	mov	r2, r3
 801057a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801057c:	61bb      	str	r3, [r7, #24]
 801057e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010580:	6979      	ldr	r1, [r7, #20]
 8010582:	69ba      	ldr	r2, [r7, #24]
 8010584:	e841 2300 	strex	r3, r2, [r1]
 8010588:	613b      	str	r3, [r7, #16]
   return(result);
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d1e6      	bne.n	801055e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2220      	movs	r2, #32
 8010594:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2200      	movs	r2, #0
 801059c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2200      	movs	r2, #0
 80105a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80105a4:	bf00      	nop
 80105a6:	3754      	adds	r7, #84	@ 0x54
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr
 80105b0:	effffffe 	.word	0xeffffffe

080105b4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b09c      	sub	sp, #112	@ 0x70
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	69db      	ldr	r3, [r3, #28]
 80105c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80105ca:	d071      	beq.n	80106b0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80105cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80105ce:	2200      	movs	r2, #0
 80105d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105dc:	e853 3f00 	ldrex	r3, [r3]
 80105e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80105e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80105e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80105e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80105ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	461a      	mov	r2, r3
 80105f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80105f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80105f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80105f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80105fa:	e841 2300 	strex	r3, r2, [r1]
 80105fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010600:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010602:	2b00      	cmp	r3, #0
 8010604:	d1e6      	bne.n	80105d4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	3308      	adds	r3, #8
 801060c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010610:	e853 3f00 	ldrex	r3, [r3]
 8010614:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010618:	f023 0301 	bic.w	r3, r3, #1
 801061c:	667b      	str	r3, [r7, #100]	@ 0x64
 801061e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	3308      	adds	r3, #8
 8010624:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010626:	647a      	str	r2, [r7, #68]	@ 0x44
 8010628:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801062c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801062e:	e841 2300 	strex	r3, r2, [r1]
 8010632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1e5      	bne.n	8010606 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801063a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3308      	adds	r3, #8
 8010640:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010644:	e853 3f00 	ldrex	r3, [r3]
 8010648:	623b      	str	r3, [r7, #32]
   return(result);
 801064a:	6a3b      	ldr	r3, [r7, #32]
 801064c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010650:	663b      	str	r3, [r7, #96]	@ 0x60
 8010652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3308      	adds	r3, #8
 8010658:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801065a:	633a      	str	r2, [r7, #48]	@ 0x30
 801065c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010662:	e841 2300 	strex	r3, r2, [r1]
 8010666:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1e5      	bne.n	801063a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801066e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010670:	2220      	movs	r2, #32
 8010672:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801067a:	2b01      	cmp	r3, #1
 801067c:	d118      	bne.n	80106b0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801067e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	e853 3f00 	ldrex	r3, [r3]
 801068a:	60fb      	str	r3, [r7, #12]
   return(result);
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f023 0310 	bic.w	r3, r3, #16
 8010692:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	461a      	mov	r2, r3
 801069a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801069c:	61fb      	str	r3, [r7, #28]
 801069e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a0:	69b9      	ldr	r1, [r7, #24]
 80106a2:	69fa      	ldr	r2, [r7, #28]
 80106a4:	e841 2300 	strex	r3, r2, [r1]
 80106a8:	617b      	str	r3, [r7, #20]
   return(result);
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1e6      	bne.n	801067e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80106b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106b2:	2200      	movs	r2, #0
 80106b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	d107      	bne.n	80106ce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80106c4:	4619      	mov	r1, r3
 80106c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80106c8:	f7fe fdf4 	bl	800f2b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80106cc:	e002      	b.n	80106d4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80106ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80106d0:	f7f3 fc96 	bl	8004000 <HAL_UART_RxCpltCallback>
}
 80106d4:	bf00      	nop
 80106d6:	3770      	adds	r7, #112	@ 0x70
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106e8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2201      	movs	r2, #1
 80106ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d109      	bne.n	801070c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80106fe:	085b      	lsrs	r3, r3, #1
 8010700:	b29b      	uxth	r3, r3
 8010702:	4619      	mov	r1, r3
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f7fe fdd5 	bl	800f2b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801070a:	e002      	b.n	8010712 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801070c:	68f8      	ldr	r0, [r7, #12]
 801070e:	f7fe fdb3 	bl	800f278 <HAL_UART_RxHalfCpltCallback>
}
 8010712:	bf00      	nop
 8010714:	3710      	adds	r7, #16
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}

0801071a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801071a:	b580      	push	{r7, lr}
 801071c:	b086      	sub	sp, #24
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010726:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801072e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010736:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	689b      	ldr	r3, [r3, #8]
 801073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010742:	2b80      	cmp	r3, #128	@ 0x80
 8010744:	d109      	bne.n	801075a <UART_DMAError+0x40>
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	2b21      	cmp	r3, #33	@ 0x21
 801074a:	d106      	bne.n	801075a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	2200      	movs	r2, #0
 8010750:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010754:	6978      	ldr	r0, [r7, #20]
 8010756:	f7ff fe85 	bl	8010464 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	689b      	ldr	r3, [r3, #8]
 8010760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010764:	2b40      	cmp	r3, #64	@ 0x40
 8010766:	d109      	bne.n	801077c <UART_DMAError+0x62>
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2b22      	cmp	r3, #34	@ 0x22
 801076c:	d106      	bne.n	801077c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	2200      	movs	r2, #0
 8010772:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010776:	6978      	ldr	r0, [r7, #20]
 8010778:	f7ff feb6 	bl	80104e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010782:	f043 0210 	orr.w	r2, r3, #16
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801078c:	6978      	ldr	r0, [r7, #20]
 801078e:	f7fe fd7d 	bl	800f28c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010792:	bf00      	nop
 8010794:	3718      	adds	r7, #24
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}

0801079a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801079a:	b580      	push	{r7, lr}
 801079c:	b084      	sub	sp, #16
 801079e:	af00      	add	r7, sp, #0
 80107a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2200      	movs	r2, #0
 80107ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2200      	movs	r2, #0
 80107b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80107b8:	68f8      	ldr	r0, [r7, #12]
 80107ba:	f7fe fd67 	bl	800f28c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107be:	bf00      	nop
 80107c0:	3710      	adds	r7, #16
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}

080107c6 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80107c6:	b580      	push	{r7, lr}
 80107c8:	b084      	sub	sp, #16
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107d2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107d8:	2200      	movs	r2, #0
 80107da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d005      	beq.n	80107f2 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80107ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d12b      	bne.n	801084a <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2200      	movs	r2, #0
 80107f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2200      	movs	r2, #0
 80107fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2200      	movs	r2, #0
 8010806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	220f      	movs	r2, #15
 8010810:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801081a:	d107      	bne.n	801082c <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	699a      	ldr	r2, [r3, #24]
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f042 0210 	orr.w	r2, r2, #16
 801082a:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2220      	movs	r2, #32
 8010830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2220      	movs	r2, #32
 8010838:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2200      	movs	r2, #0
 8010840:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010842:	68f8      	ldr	r0, [r7, #12]
 8010844:	f7fe fd2c 	bl	800f2a0 <HAL_UART_AbortCpltCallback>
 8010848:	e000      	b.n	801084c <UART_DMATxAbortCallback+0x86>
      return;
 801084a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801084c:	3710      	adds	r7, #16
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}

08010852 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8010852:	b580      	push	{r7, lr}
 8010854:	b084      	sub	sp, #16
 8010856:	af00      	add	r7, sp, #0
 8010858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801085e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010866:	2200      	movs	r2, #0
 8010868:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801086e:	2b00      	cmp	r3, #0
 8010870:	d004      	beq.n	801087c <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010878:	2b00      	cmp	r3, #0
 801087a:	d126      	bne.n	80108ca <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2200      	movs	r2, #0
 8010880:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2200      	movs	r2, #0
 8010888:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2200      	movs	r2, #0
 8010890:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	220f      	movs	r2, #15
 801089a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	699a      	ldr	r2, [r3, #24]
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f042 0208 	orr.w	r2, r2, #8
 80108aa:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2220      	movs	r2, #32
 80108b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2220      	movs	r2, #32
 80108b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2200      	movs	r2, #0
 80108c0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80108c2:	68f8      	ldr	r0, [r7, #12]
 80108c4:	f7fe fcec 	bl	800f2a0 <HAL_UART_AbortCpltCallback>
 80108c8:	e000      	b.n	80108cc <UART_DMARxAbortCallback+0x7a>
      return;
 80108ca:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b088      	sub	sp, #32
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	e853 3f00 	ldrex	r3, [r3]
 80108e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80108ee:	61fb      	str	r3, [r7, #28]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	461a      	mov	r2, r3
 80108f6:	69fb      	ldr	r3, [r7, #28]
 80108f8:	61bb      	str	r3, [r7, #24]
 80108fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108fc:	6979      	ldr	r1, [r7, #20]
 80108fe:	69ba      	ldr	r2, [r7, #24]
 8010900:	e841 2300 	strex	r3, r2, [r1]
 8010904:	613b      	str	r3, [r7, #16]
   return(result);
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d1e6      	bne.n	80108da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2220      	movs	r2, #32
 8010910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2200      	movs	r2, #0
 8010918:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f7fe fca2 	bl	800f264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010920:	bf00      	nop
 8010922:	3720      	adds	r7, #32
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010930:	bf00      	nop
 8010932:	370c      	adds	r7, #12
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801093c:	b480      	push	{r7}
 801093e:	b083      	sub	sp, #12
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010944:	bf00      	nop
 8010946:	370c      	adds	r7, #12
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010958:	bf00      	nop
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010964:	b480      	push	{r7}
 8010966:	b085      	sub	sp, #20
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010972:	2b01      	cmp	r3, #1
 8010974:	d101      	bne.n	801097a <HAL_UARTEx_DisableFifoMode+0x16>
 8010976:	2302      	movs	r3, #2
 8010978:	e027      	b.n	80109ca <HAL_UARTEx_DisableFifoMode+0x66>
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2201      	movs	r2, #1
 801097e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2224      	movs	r2, #36	@ 0x24
 8010986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	681a      	ldr	r2, [r3, #0]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f022 0201 	bic.w	r2, r2, #1
 80109a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80109a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2200      	movs	r2, #0
 80109ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	68fa      	ldr	r2, [r7, #12]
 80109b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2220      	movs	r2, #32
 80109bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80109c8:	2300      	movs	r3, #0
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3714      	adds	r7, #20
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr

080109d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b084      	sub	sp, #16
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
 80109de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d101      	bne.n	80109ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80109ea:	2302      	movs	r3, #2
 80109ec:	e02d      	b.n	8010a4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2201      	movs	r2, #1
 80109f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2224      	movs	r2, #36	@ 0x24
 80109fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f022 0201 	bic.w	r2, r2, #1
 8010a14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	683a      	ldr	r2, [r7, #0]
 8010a26:	430a      	orrs	r2, r1
 8010a28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 f850 	bl	8010ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	68fa      	ldr	r2, [r7, #12]
 8010a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2220      	movs	r2, #32
 8010a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2200      	movs	r2, #0
 8010a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a48:	2300      	movs	r3, #0
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3710      	adds	r7, #16
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}

08010a52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a52:	b580      	push	{r7, lr}
 8010a54:	b084      	sub	sp, #16
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
 8010a5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010a62:	2b01      	cmp	r3, #1
 8010a64:	d101      	bne.n	8010a6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010a66:	2302      	movs	r3, #2
 8010a68:	e02d      	b.n	8010ac6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2224      	movs	r2, #36	@ 0x24
 8010a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	f022 0201 	bic.w	r2, r2, #1
 8010a90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	683a      	ldr	r2, [r7, #0]
 8010aa2:	430a      	orrs	r2, r1
 8010aa4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f000 f812 	bl	8010ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	68fa      	ldr	r2, [r7, #12]
 8010ab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2220      	movs	r2, #32
 8010ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010ac4:	2300      	movs	r3, #0
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3710      	adds	r7, #16
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
	...

08010ad0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b085      	sub	sp, #20
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d108      	bne.n	8010af2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2201      	movs	r2, #1
 8010aec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010af0:	e031      	b.n	8010b56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010af2:	2310      	movs	r3, #16
 8010af4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010af6:	2310      	movs	r3, #16
 8010af8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	689b      	ldr	r3, [r3, #8]
 8010b00:	0e5b      	lsrs	r3, r3, #25
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	f003 0307 	and.w	r3, r3, #7
 8010b08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	689b      	ldr	r3, [r3, #8]
 8010b10:	0f5b      	lsrs	r3, r3, #29
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	f003 0307 	and.w	r3, r3, #7
 8010b18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b1a:	7bbb      	ldrb	r3, [r7, #14]
 8010b1c:	7b3a      	ldrb	r2, [r7, #12]
 8010b1e:	4911      	ldr	r1, [pc, #68]	@ (8010b64 <UARTEx_SetNbDataToProcess+0x94>)
 8010b20:	5c8a      	ldrb	r2, [r1, r2]
 8010b22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b26:	7b3a      	ldrb	r2, [r7, #12]
 8010b28:	490f      	ldr	r1, [pc, #60]	@ (8010b68 <UARTEx_SetNbDataToProcess+0x98>)
 8010b2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b38:	7bfb      	ldrb	r3, [r7, #15]
 8010b3a:	7b7a      	ldrb	r2, [r7, #13]
 8010b3c:	4909      	ldr	r1, [pc, #36]	@ (8010b64 <UARTEx_SetNbDataToProcess+0x94>)
 8010b3e:	5c8a      	ldrb	r2, [r1, r2]
 8010b40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010b44:	7b7a      	ldrb	r2, [r7, #13]
 8010b46:	4908      	ldr	r1, [pc, #32]	@ (8010b68 <UARTEx_SetNbDataToProcess+0x98>)
 8010b48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b4e:	b29a      	uxth	r2, r3
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010b56:	bf00      	nop
 8010b58:	3714      	adds	r7, #20
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	0801885c 	.word	0x0801885c
 8010b68:	08018864 	.word	0x08018864

08010b6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010b70:	4904      	ldr	r1, [pc, #16]	@ (8010b84 <MX_FATFS_Init+0x18>)
 8010b72:	4805      	ldr	r0, [pc, #20]	@ (8010b88 <MX_FATFS_Init+0x1c>)
 8010b74:	f004 fd9e 	bl	80156b4 <FATFS_LinkDriver>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	4b03      	ldr	r3, [pc, #12]	@ (8010b8c <MX_FATFS_Init+0x20>)
 8010b7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010b80:	bf00      	nop
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	24005494 	.word	0x24005494
 8010b88:	240000d0 	.word	0x240000d0
 8010b8c:	24005490 	.word	0x24005490

08010b90 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010b90:	b480      	push	{r7}
 8010b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010b94:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr

08010ba0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8010baa:	79fb      	ldrb	r3, [r7, #7]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 f9fd 	bl	8010fac <SD_disk_initialize>
 8010bb2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3708      	adds	r7, #8
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}

08010bbc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b082      	sub	sp, #8
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8010bc6:	79fb      	ldrb	r3, [r7, #7]
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f000 fad5 	bl	8011178 <SD_disk_status>
 8010bce:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60b9      	str	r1, [r7, #8]
 8010be0:	607a      	str	r2, [r7, #4]
 8010be2:	603b      	str	r3, [r7, #0]
 8010be4:	4603      	mov	r3, r0
 8010be6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8010be8:	7bf8      	ldrb	r0, [r7, #15]
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	687a      	ldr	r2, [r7, #4]
 8010bee:	68b9      	ldr	r1, [r7, #8]
 8010bf0:	f000 fad8 	bl	80111a4 <SD_disk_read>
 8010bf4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3710      	adds	r7, #16
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b084      	sub	sp, #16
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	607a      	str	r2, [r7, #4]
 8010c08:	603b      	str	r3, [r7, #0]
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8010c0e:	7bf8      	ldrb	r0, [r7, #15]
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	68b9      	ldr	r1, [r7, #8]
 8010c16:	f000 fb2f 	bl	8011278 <SD_disk_write>
 8010c1a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3710      	adds	r7, #16
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	603a      	str	r2, [r7, #0]
 8010c2e:	71fb      	strb	r3, [r7, #7]
 8010c30:	460b      	mov	r3, r1
 8010c32:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8010c34:	79b9      	ldrb	r1, [r7, #6]
 8010c36:	79fb      	ldrb	r3, [r7, #7]
 8010c38:	683a      	ldr	r2, [r7, #0]
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f000 fba0 	bl	8011380 <SD_disk_ioctl>
 8010c40:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3708      	adds	r7, #8
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
	...

08010c4c <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8010c50:	2200      	movs	r2, #0
 8010c52:	2110      	movs	r1, #16
 8010c54:	4802      	ldr	r0, [pc, #8]	@ (8010c60 <SELECT+0x14>)
 8010c56:	f7f8 fabb 	bl	80091d0 <HAL_GPIO_WritePin>
}
 8010c5a:	bf00      	nop
 8010c5c:	bd80      	pop	{r7, pc}
 8010c5e:	bf00      	nop
 8010c60:	58020000 	.word	0x58020000

08010c64 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8010c68:	2201      	movs	r2, #1
 8010c6a:	2110      	movs	r1, #16
 8010c6c:	4802      	ldr	r0, [pc, #8]	@ (8010c78 <DESELECT+0x14>)
 8010c6e:	f7f8 faaf 	bl	80091d0 <HAL_GPIO_WritePin>
}
 8010c72:	bf00      	nop
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	bf00      	nop
 8010c78:	58020000 	.word	0x58020000

08010c7c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	4603      	mov	r3, r0
 8010c84:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010c86:	bf00      	nop
 8010c88:	4b08      	ldr	r3, [pc, #32]	@ (8010cac <SPI_TxByte+0x30>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	695b      	ldr	r3, [r3, #20]
 8010c8e:	f003 0302 	and.w	r3, r3, #2
 8010c92:	2b02      	cmp	r3, #2
 8010c94:	d1f8      	bne.n	8010c88 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8010c96:	1df9      	adds	r1, r7, #7
 8010c98:	2364      	movs	r3, #100	@ 0x64
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	4803      	ldr	r0, [pc, #12]	@ (8010cac <SPI_TxByte+0x30>)
 8010c9e:	f7fb fae1 	bl	800c264 <HAL_SPI_Transmit>
}
 8010ca2:	bf00      	nop
 8010ca4:	3708      	adds	r7, #8
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	24004df8 	.word	0x24004df8

08010cb0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	460b      	mov	r3, r1
 8010cba:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010cbc:	bf00      	nop
 8010cbe:	4b08      	ldr	r3, [pc, #32]	@ (8010ce0 <SPI_TxBuffer+0x30>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	695b      	ldr	r3, [r3, #20]
 8010cc4:	f003 0302 	and.w	r3, r3, #2
 8010cc8:	2b02      	cmp	r3, #2
 8010cca:	d1f8      	bne.n	8010cbe <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8010ccc:	887a      	ldrh	r2, [r7, #2]
 8010cce:	2364      	movs	r3, #100	@ 0x64
 8010cd0:	6879      	ldr	r1, [r7, #4]
 8010cd2:	4803      	ldr	r0, [pc, #12]	@ (8010ce0 <SPI_TxBuffer+0x30>)
 8010cd4:	f7fb fac6 	bl	800c264 <HAL_SPI_Transmit>
}
 8010cd8:	bf00      	nop
 8010cda:	3708      	adds	r7, #8
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	24004df8 	.word	0x24004df8

08010ce4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b084      	sub	sp, #16
 8010ce8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8010cea:	23ff      	movs	r3, #255	@ 0xff
 8010cec:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8010cee:	bf00      	nop
 8010cf0:	4b09      	ldr	r3, [pc, #36]	@ (8010d18 <SPI_RxByte+0x34>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	695b      	ldr	r3, [r3, #20]
 8010cf6:	f003 0302 	and.w	r3, r3, #2
 8010cfa:	2b02      	cmp	r3, #2
 8010cfc:	d1f8      	bne.n	8010cf0 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8010cfe:	1dba      	adds	r2, r7, #6
 8010d00:	1df9      	adds	r1, r7, #7
 8010d02:	2364      	movs	r3, #100	@ 0x64
 8010d04:	9300      	str	r3, [sp, #0]
 8010d06:	2301      	movs	r3, #1
 8010d08:	4803      	ldr	r0, [pc, #12]	@ (8010d18 <SPI_RxByte+0x34>)
 8010d0a:	f7fb ff0b 	bl	800cb24 <HAL_SPI_TransmitReceive>
  return data;
 8010d0e:	79bb      	ldrb	r3, [r7, #6]
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3708      	adds	r7, #8
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	24004df8 	.word	0x24004df8

08010d1c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8010d24:	f7ff ffde 	bl	8010ce4 <SPI_RxByte>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	701a      	strb	r2, [r3, #0]
}
 8010d30:	bf00      	nop
 8010d32:	3708      	adds	r7, #8
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8010d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8010d68 <SD_ReadyWait+0x30>)
 8010d40:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8010d44:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8010d46:	f7ff ffcd 	bl	8010ce4 <SPI_RxByte>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8010d4e:	79fb      	ldrb	r3, [r7, #7]
 8010d50:	2bff      	cmp	r3, #255	@ 0xff
 8010d52:	d003      	beq.n	8010d5c <SD_ReadyWait+0x24>
 8010d54:	4b04      	ldr	r3, [pc, #16]	@ (8010d68 <SD_ReadyWait+0x30>)
 8010d56:	881b      	ldrh	r3, [r3, #0]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d1f4      	bne.n	8010d46 <SD_ReadyWait+0xe>
  return res;
 8010d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3708      	adds	r7, #8
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	2400549a 	.word	0x2400549a

08010d6c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8010d72:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8010d76:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8010d78:	f7ff ff74 	bl	8010c64 <DESELECT>
  for(int i = 0; i < 10; i++)
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	60bb      	str	r3, [r7, #8]
 8010d80:	e005      	b.n	8010d8e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8010d82:	20ff      	movs	r0, #255	@ 0xff
 8010d84:	f7ff ff7a 	bl	8010c7c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	60bb      	str	r3, [r7, #8]
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	2b09      	cmp	r3, #9
 8010d92:	ddf6      	ble.n	8010d82 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8010d94:	f7ff ff5a 	bl	8010c4c <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8010d98:	2340      	movs	r3, #64	@ 0x40
 8010d9a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8010da0:	2300      	movs	r3, #0
 8010da2:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8010da4:	2300      	movs	r3, #0
 8010da6:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8010da8:	2300      	movs	r3, #0
 8010daa:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8010dac:	2395      	movs	r3, #149	@ 0x95
 8010dae:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8010db0:	463b      	mov	r3, r7
 8010db2:	2106      	movs	r1, #6
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7ff ff7b 	bl	8010cb0 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8010dba:	e002      	b.n	8010dc2 <SD_PowerOn+0x56>
  {
    cnt--;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	3b01      	subs	r3, #1
 8010dc0:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8010dc2:	f7ff ff8f 	bl	8010ce4 <SPI_RxByte>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d002      	beq.n	8010dd2 <SD_PowerOn+0x66>
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d1f4      	bne.n	8010dbc <SD_PowerOn+0x50>
  }
  DESELECT();
 8010dd2:	f7ff ff47 	bl	8010c64 <DESELECT>
  SPI_TxByte(0XFF);
 8010dd6:	20ff      	movs	r0, #255	@ 0xff
 8010dd8:	f7ff ff50 	bl	8010c7c <SPI_TxByte>
  PowerFlag = 1;
 8010ddc:	4b03      	ldr	r3, [pc, #12]	@ (8010dec <SD_PowerOn+0x80>)
 8010dde:	2201      	movs	r2, #1
 8010de0:	701a      	strb	r2, [r3, #0]
}
 8010de2:	bf00      	nop
 8010de4:	3710      	adds	r7, #16
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	bf00      	nop
 8010dec:	2400549d 	.word	0x2400549d

08010df0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8010df0:	b480      	push	{r7}
 8010df2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8010df4:	4b03      	ldr	r3, [pc, #12]	@ (8010e04 <SD_PowerOff+0x14>)
 8010df6:	2200      	movs	r2, #0
 8010df8:	701a      	strb	r2, [r3, #0]
}
 8010dfa:	bf00      	nop
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e02:	4770      	bx	lr
 8010e04:	2400549d 	.word	0x2400549d

08010e08 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	af00      	add	r7, sp, #0
  return PowerFlag;
 8010e0c:	4b03      	ldr	r3, [pc, #12]	@ (8010e1c <SD_CheckPower+0x14>)
 8010e0e:	781b      	ldrb	r3, [r3, #0]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	46bd      	mov	sp, r7
 8010e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e18:	4770      	bx	lr
 8010e1a:	bf00      	nop
 8010e1c:	2400549d 	.word	0x2400549d

08010e20 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8010e2a:	4b13      	ldr	r3, [pc, #76]	@ (8010e78 <SD_RxDataBlock+0x58>)
 8010e2c:	22c8      	movs	r2, #200	@ 0xc8
 8010e2e:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8010e30:	f7ff ff58 	bl	8010ce4 <SPI_RxByte>
 8010e34:	4603      	mov	r3, r0
 8010e36:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8010e38:	7bfb      	ldrb	r3, [r7, #15]
 8010e3a:	2bff      	cmp	r3, #255	@ 0xff
 8010e3c:	d103      	bne.n	8010e46 <SD_RxDataBlock+0x26>
 8010e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8010e78 <SD_RxDataBlock+0x58>)
 8010e40:	881b      	ldrh	r3, [r3, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d1f4      	bne.n	8010e30 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8010e46:	7bfb      	ldrb	r3, [r7, #15]
 8010e48:	2bfe      	cmp	r3, #254	@ 0xfe
 8010e4a:	d001      	beq.n	8010e50 <SD_RxDataBlock+0x30>
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	e00f      	b.n	8010e70 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	1c5a      	adds	r2, r3, #1
 8010e54:	607a      	str	r2, [r7, #4]
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7ff ff60 	bl	8010d1c <SPI_RxBytePtr>
  } while(len--);
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	1e5a      	subs	r2, r3, #1
 8010e60:	603a      	str	r2, [r7, #0]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d1f4      	bne.n	8010e50 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8010e66:	f7ff ff3d 	bl	8010ce4 <SPI_RxByte>
  SPI_RxByte();
 8010e6a:	f7ff ff3b 	bl	8010ce4 <SPI_RxByte>
  return TRUE;
 8010e6e:	2301      	movs	r3, #1
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3710      	adds	r7, #16
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	24005498 	.word	0x24005498

08010e7c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	460b      	mov	r3, r1
 8010e86:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8010e8c:	f7ff ff54 	bl	8010d38 <SD_ReadyWait>
 8010e90:	4603      	mov	r3, r0
 8010e92:	2bff      	cmp	r3, #255	@ 0xff
 8010e94:	d001      	beq.n	8010e9a <SD_TxDataBlock+0x1e>
 8010e96:	2300      	movs	r3, #0
 8010e98:	e02f      	b.n	8010efa <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8010e9a:	78fb      	ldrb	r3, [r7, #3]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7ff feed 	bl	8010c7c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8010ea2:	78fb      	ldrb	r3, [r7, #3]
 8010ea4:	2bfd      	cmp	r3, #253	@ 0xfd
 8010ea6:	d020      	beq.n	8010eea <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8010ea8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f7ff feff 	bl	8010cb0 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8010eb2:	f7ff ff17 	bl	8010ce4 <SPI_RxByte>
    SPI_RxByte();
 8010eb6:	f7ff ff15 	bl	8010ce4 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8010eba:	e00b      	b.n	8010ed4 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8010ebc:	f7ff ff12 	bl	8010ce4 <SPI_RxByte>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8010ec4:	7bfb      	ldrb	r3, [r7, #15]
 8010ec6:	f003 031f 	and.w	r3, r3, #31
 8010eca:	2b05      	cmp	r3, #5
 8010ecc:	d006      	beq.n	8010edc <SD_TxDataBlock+0x60>
      i++;
 8010ece:	7bbb      	ldrb	r3, [r7, #14]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8010ed4:	7bbb      	ldrb	r3, [r7, #14]
 8010ed6:	2b40      	cmp	r3, #64	@ 0x40
 8010ed8:	d9f0      	bls.n	8010ebc <SD_TxDataBlock+0x40>
 8010eda:	e000      	b.n	8010ede <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8010edc:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8010ede:	bf00      	nop
 8010ee0:	f7ff ff00 	bl	8010ce4 <SPI_RxByte>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d0fa      	beq.n	8010ee0 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8010eea:	7bfb      	ldrb	r3, [r7, #15]
 8010eec:	f003 031f 	and.w	r3, r3, #31
 8010ef0:	2b05      	cmp	r3, #5
 8010ef2:	d101      	bne.n	8010ef8 <SD_TxDataBlock+0x7c>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e000      	b.n	8010efa <SD_TxDataBlock+0x7e>

  return FALSE;
 8010ef8:	2300      	movs	r3, #0
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}

08010f02 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8010f02:	b580      	push	{r7, lr}
 8010f04:	b084      	sub	sp, #16
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	4603      	mov	r3, r0
 8010f0a:	6039      	str	r1, [r7, #0]
 8010f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8010f0e:	f7ff ff13 	bl	8010d38 <SD_ReadyWait>
 8010f12:	4603      	mov	r3, r0
 8010f14:	2bff      	cmp	r3, #255	@ 0xff
 8010f16:	d001      	beq.n	8010f1c <SD_SendCmd+0x1a>
 8010f18:	23ff      	movs	r3, #255	@ 0xff
 8010f1a:	e042      	b.n	8010fa2 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8010f1c:	79fb      	ldrb	r3, [r7, #7]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7ff feac 	bl	8010c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	0e1b      	lsrs	r3, r3, #24
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7ff fea6 	bl	8010c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	0c1b      	lsrs	r3, r3, #16
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7ff fea0 	bl	8010c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	0a1b      	lsrs	r3, r3, #8
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7ff fe9a 	bl	8010c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	b2db      	uxtb	r3, r3
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7ff fe95 	bl	8010c7c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8010f52:	79fb      	ldrb	r3, [r7, #7]
 8010f54:	2b40      	cmp	r3, #64	@ 0x40
 8010f56:	d102      	bne.n	8010f5e <SD_SendCmd+0x5c>
 8010f58:	2395      	movs	r3, #149	@ 0x95
 8010f5a:	73fb      	strb	r3, [r7, #15]
 8010f5c:	e007      	b.n	8010f6e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8010f5e:	79fb      	ldrb	r3, [r7, #7]
 8010f60:	2b48      	cmp	r3, #72	@ 0x48
 8010f62:	d102      	bne.n	8010f6a <SD_SendCmd+0x68>
 8010f64:	2387      	movs	r3, #135	@ 0x87
 8010f66:	73fb      	strb	r3, [r7, #15]
 8010f68:	e001      	b.n	8010f6e <SD_SendCmd+0x6c>
  else crc = 1;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8010f6e:	7bfb      	ldrb	r3, [r7, #15]
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7ff fe83 	bl	8010c7c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8010f76:	79fb      	ldrb	r3, [r7, #7]
 8010f78:	2b4c      	cmp	r3, #76	@ 0x4c
 8010f7a:	d101      	bne.n	8010f80 <SD_SendCmd+0x7e>
 8010f7c:	f7ff feb2 	bl	8010ce4 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8010f80:	230a      	movs	r3, #10
 8010f82:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8010f84:	f7ff feae 	bl	8010ce4 <SPI_RxByte>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8010f8c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	da05      	bge.n	8010fa0 <SD_SendCmd+0x9e>
 8010f94:	7bbb      	ldrb	r3, [r7, #14]
 8010f96:	3b01      	subs	r3, #1
 8010f98:	73bb      	strb	r3, [r7, #14]
 8010f9a:	7bbb      	ldrb	r3, [r7, #14]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d1f1      	bne.n	8010f84 <SD_SendCmd+0x82>

  return res;
 8010fa0:	7b7b      	ldrb	r3, [r7, #13]
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	3710      	adds	r7, #16
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	bd80      	pop	{r7, pc}
	...

08010fac <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8010fac:	b590      	push	{r4, r7, lr}
 8010fae:	b085      	sub	sp, #20
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8010fb6:	79fb      	ldrb	r3, [r7, #7]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d001      	beq.n	8010fc0 <SD_disk_initialize+0x14>
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	e0d1      	b.n	8011164 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8010fc0:	4b6a      	ldr	r3, [pc, #424]	@ (801116c <SD_disk_initialize+0x1c0>)
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	b2db      	uxtb	r3, r3
 8010fc6:	f003 0302 	and.w	r3, r3, #2
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d003      	beq.n	8010fd6 <SD_disk_initialize+0x2a>
 8010fce:	4b67      	ldr	r3, [pc, #412]	@ (801116c <SD_disk_initialize+0x1c0>)
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	e0c6      	b.n	8011164 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8010fd6:	f7ff fec9 	bl	8010d6c <SD_PowerOn>
  /* slave select */
  SELECT();
 8010fda:	f7ff fe37 	bl	8010c4c <SELECT>
  /* check disk type */
  type = 0;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8010fe2:	2100      	movs	r1, #0
 8010fe4:	2040      	movs	r0, #64	@ 0x40
 8010fe6:	f7ff ff8c 	bl	8010f02 <SD_SendCmd>
 8010fea:	4603      	mov	r3, r0
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	f040 80a1 	bne.w	8011134 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8010ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8011170 <SD_disk_initialize+0x1c4>)
 8010ff4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010ff8:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8010ffa:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8010ffe:	2048      	movs	r0, #72	@ 0x48
 8011000:	f7ff ff7f 	bl	8010f02 <SD_SendCmd>
 8011004:	4603      	mov	r3, r0
 8011006:	2b01      	cmp	r3, #1
 8011008:	d155      	bne.n	80110b6 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 801100a:	2300      	movs	r3, #0
 801100c:	73fb      	strb	r3, [r7, #15]
 801100e:	e00c      	b.n	801102a <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8011010:	7bfc      	ldrb	r4, [r7, #15]
 8011012:	f7ff fe67 	bl	8010ce4 <SPI_RxByte>
 8011016:	4603      	mov	r3, r0
 8011018:	461a      	mov	r2, r3
 801101a:	f104 0310 	add.w	r3, r4, #16
 801101e:	443b      	add	r3, r7
 8011020:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8011024:	7bfb      	ldrb	r3, [r7, #15]
 8011026:	3301      	adds	r3, #1
 8011028:	73fb      	strb	r3, [r7, #15]
 801102a:	7bfb      	ldrb	r3, [r7, #15]
 801102c:	2b03      	cmp	r3, #3
 801102e:	d9ef      	bls.n	8011010 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8011030:	7abb      	ldrb	r3, [r7, #10]
 8011032:	2b01      	cmp	r3, #1
 8011034:	d17e      	bne.n	8011134 <SD_disk_initialize+0x188>
 8011036:	7afb      	ldrb	r3, [r7, #11]
 8011038:	2baa      	cmp	r3, #170	@ 0xaa
 801103a:	d17b      	bne.n	8011134 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 801103c:	2100      	movs	r1, #0
 801103e:	2077      	movs	r0, #119	@ 0x77
 8011040:	f7ff ff5f 	bl	8010f02 <SD_SendCmd>
 8011044:	4603      	mov	r3, r0
 8011046:	2b01      	cmp	r3, #1
 8011048:	d807      	bhi.n	801105a <SD_disk_initialize+0xae>
 801104a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 801104e:	2069      	movs	r0, #105	@ 0x69
 8011050:	f7ff ff57 	bl	8010f02 <SD_SendCmd>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d004      	beq.n	8011064 <SD_disk_initialize+0xb8>
        } while (Timer1);
 801105a:	4b45      	ldr	r3, [pc, #276]	@ (8011170 <SD_disk_initialize+0x1c4>)
 801105c:	881b      	ldrh	r3, [r3, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d1ec      	bne.n	801103c <SD_disk_initialize+0x90>
 8011062:	e000      	b.n	8011066 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8011064:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8011066:	4b42      	ldr	r3, [pc, #264]	@ (8011170 <SD_disk_initialize+0x1c4>)
 8011068:	881b      	ldrh	r3, [r3, #0]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d062      	beq.n	8011134 <SD_disk_initialize+0x188>
 801106e:	2100      	movs	r1, #0
 8011070:	207a      	movs	r0, #122	@ 0x7a
 8011072:	f7ff ff46 	bl	8010f02 <SD_SendCmd>
 8011076:	4603      	mov	r3, r0
 8011078:	2b00      	cmp	r3, #0
 801107a:	d15b      	bne.n	8011134 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 801107c:	2300      	movs	r3, #0
 801107e:	73fb      	strb	r3, [r7, #15]
 8011080:	e00c      	b.n	801109c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8011082:	7bfc      	ldrb	r4, [r7, #15]
 8011084:	f7ff fe2e 	bl	8010ce4 <SPI_RxByte>
 8011088:	4603      	mov	r3, r0
 801108a:	461a      	mov	r2, r3
 801108c:	f104 0310 	add.w	r3, r4, #16
 8011090:	443b      	add	r3, r7
 8011092:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8011096:	7bfb      	ldrb	r3, [r7, #15]
 8011098:	3301      	adds	r3, #1
 801109a:	73fb      	strb	r3, [r7, #15]
 801109c:	7bfb      	ldrb	r3, [r7, #15]
 801109e:	2b03      	cmp	r3, #3
 80110a0:	d9ef      	bls.n	8011082 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80110a2:	7a3b      	ldrb	r3, [r7, #8]
 80110a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d001      	beq.n	80110b0 <SD_disk_initialize+0x104>
 80110ac:	230c      	movs	r3, #12
 80110ae:	e000      	b.n	80110b2 <SD_disk_initialize+0x106>
 80110b0:	2304      	movs	r3, #4
 80110b2:	73bb      	strb	r3, [r7, #14]
 80110b4:	e03e      	b.n	8011134 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80110b6:	2100      	movs	r1, #0
 80110b8:	2077      	movs	r0, #119	@ 0x77
 80110ba:	f7ff ff22 	bl	8010f02 <SD_SendCmd>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d808      	bhi.n	80110d6 <SD_disk_initialize+0x12a>
 80110c4:	2100      	movs	r1, #0
 80110c6:	2069      	movs	r0, #105	@ 0x69
 80110c8:	f7ff ff1b 	bl	8010f02 <SD_SendCmd>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	d801      	bhi.n	80110d6 <SD_disk_initialize+0x12a>
 80110d2:	2302      	movs	r3, #2
 80110d4:	e000      	b.n	80110d8 <SD_disk_initialize+0x12c>
 80110d6:	2301      	movs	r3, #1
 80110d8:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 80110da:	7bbb      	ldrb	r3, [r7, #14]
 80110dc:	2b02      	cmp	r3, #2
 80110de:	d10e      	bne.n	80110fe <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80110e0:	2100      	movs	r1, #0
 80110e2:	2077      	movs	r0, #119	@ 0x77
 80110e4:	f7ff ff0d 	bl	8010f02 <SD_SendCmd>
 80110e8:	4603      	mov	r3, r0
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d80e      	bhi.n	801110c <SD_disk_initialize+0x160>
 80110ee:	2100      	movs	r1, #0
 80110f0:	2069      	movs	r0, #105	@ 0x69
 80110f2:	f7ff ff06 	bl	8010f02 <SD_SendCmd>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d107      	bne.n	801110c <SD_disk_initialize+0x160>
 80110fc:	e00c      	b.n	8011118 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80110fe:	2100      	movs	r1, #0
 8011100:	2041      	movs	r0, #65	@ 0x41
 8011102:	f7ff fefe 	bl	8010f02 <SD_SendCmd>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d004      	beq.n	8011116 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 801110c:	4b18      	ldr	r3, [pc, #96]	@ (8011170 <SD_disk_initialize+0x1c4>)
 801110e:	881b      	ldrh	r3, [r3, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d1e2      	bne.n	80110da <SD_disk_initialize+0x12e>
 8011114:	e000      	b.n	8011118 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8011116:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8011118:	4b15      	ldr	r3, [pc, #84]	@ (8011170 <SD_disk_initialize+0x1c4>)
 801111a:	881b      	ldrh	r3, [r3, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d007      	beq.n	8011130 <SD_disk_initialize+0x184>
 8011120:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011124:	2050      	movs	r0, #80	@ 0x50
 8011126:	f7ff feec 	bl	8010f02 <SD_SendCmd>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	d001      	beq.n	8011134 <SD_disk_initialize+0x188>
 8011130:	2300      	movs	r3, #0
 8011132:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8011134:	4a0f      	ldr	r2, [pc, #60]	@ (8011174 <SD_disk_initialize+0x1c8>)
 8011136:	7bbb      	ldrb	r3, [r7, #14]
 8011138:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 801113a:	f7ff fd93 	bl	8010c64 <DESELECT>
  SPI_RxByte();
 801113e:	f7ff fdd1 	bl	8010ce4 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8011142:	7bbb      	ldrb	r3, [r7, #14]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d008      	beq.n	801115a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8011148:	4b08      	ldr	r3, [pc, #32]	@ (801116c <SD_disk_initialize+0x1c0>)
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	b2db      	uxtb	r3, r3
 801114e:	f023 0301 	bic.w	r3, r3, #1
 8011152:	b2da      	uxtb	r2, r3
 8011154:	4b05      	ldr	r3, [pc, #20]	@ (801116c <SD_disk_initialize+0x1c0>)
 8011156:	701a      	strb	r2, [r3, #0]
 8011158:	e001      	b.n	801115e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 801115a:	f7ff fe49 	bl	8010df0 <SD_PowerOff>
  }
  return Stat;
 801115e:	4b03      	ldr	r3, [pc, #12]	@ (801116c <SD_disk_initialize+0x1c0>)
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	b2db      	uxtb	r3, r3
}
 8011164:	4618      	mov	r0, r3
 8011166:	3714      	adds	r7, #20
 8011168:	46bd      	mov	sp, r7
 801116a:	bd90      	pop	{r4, r7, pc}
 801116c:	240000e4 	.word	0x240000e4
 8011170:	24005498 	.word	0x24005498
 8011174:	2400549c 	.word	0x2400549c

08011178 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	4603      	mov	r3, r0
 8011180:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8011182:	79fb      	ldrb	r3, [r7, #7]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d001      	beq.n	801118c <SD_disk_status+0x14>
 8011188:	2301      	movs	r3, #1
 801118a:	e002      	b.n	8011192 <SD_disk_status+0x1a>
  return Stat;
 801118c:	4b04      	ldr	r3, [pc, #16]	@ (80111a0 <SD_disk_status+0x28>)
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	b2db      	uxtb	r3, r3
}
 8011192:	4618      	mov	r0, r3
 8011194:	370c      	adds	r7, #12
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop
 80111a0:	240000e4 	.word	0x240000e4

080111a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60b9      	str	r1, [r7, #8]
 80111ac:	607a      	str	r2, [r7, #4]
 80111ae:	603b      	str	r3, [r7, #0]
 80111b0:	4603      	mov	r3, r0
 80111b2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80111b4:	7bfb      	ldrb	r3, [r7, #15]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d102      	bne.n	80111c0 <SD_disk_read+0x1c>
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d101      	bne.n	80111c4 <SD_disk_read+0x20>
 80111c0:	2304      	movs	r3, #4
 80111c2:	e051      	b.n	8011268 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80111c4:	4b2a      	ldr	r3, [pc, #168]	@ (8011270 <SD_disk_read+0xcc>)
 80111c6:	781b      	ldrb	r3, [r3, #0]
 80111c8:	b2db      	uxtb	r3, r3
 80111ca:	f003 0301 	and.w	r3, r3, #1
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d001      	beq.n	80111d6 <SD_disk_read+0x32>
 80111d2:	2303      	movs	r3, #3
 80111d4:	e048      	b.n	8011268 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80111d6:	4b27      	ldr	r3, [pc, #156]	@ (8011274 <SD_disk_read+0xd0>)
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	f003 0304 	and.w	r3, r3, #4
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d102      	bne.n	80111e8 <SD_disk_read+0x44>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	025b      	lsls	r3, r3, #9
 80111e6:	607b      	str	r3, [r7, #4]

  SELECT();
 80111e8:	f7ff fd30 	bl	8010c4c <SELECT>

  if (count == 1)
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d111      	bne.n	8011216 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80111f2:	6879      	ldr	r1, [r7, #4]
 80111f4:	2051      	movs	r0, #81	@ 0x51
 80111f6:	f7ff fe84 	bl	8010f02 <SD_SendCmd>
 80111fa:	4603      	mov	r3, r0
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d129      	bne.n	8011254 <SD_disk_read+0xb0>
 8011200:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011204:	68b8      	ldr	r0, [r7, #8]
 8011206:	f7ff fe0b 	bl	8010e20 <SD_RxDataBlock>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d021      	beq.n	8011254 <SD_disk_read+0xb0>
 8011210:	2300      	movs	r3, #0
 8011212:	603b      	str	r3, [r7, #0]
 8011214:	e01e      	b.n	8011254 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8011216:	6879      	ldr	r1, [r7, #4]
 8011218:	2052      	movs	r0, #82	@ 0x52
 801121a:	f7ff fe72 	bl	8010f02 <SD_SendCmd>
 801121e:	4603      	mov	r3, r0
 8011220:	2b00      	cmp	r3, #0
 8011222:	d117      	bne.n	8011254 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8011224:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011228:	68b8      	ldr	r0, [r7, #8]
 801122a:	f7ff fdf9 	bl	8010e20 <SD_RxDataBlock>
 801122e:	4603      	mov	r3, r0
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00a      	beq.n	801124a <SD_disk_read+0xa6>
        buff += 512;
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801123a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	3b01      	subs	r3, #1
 8011240:	603b      	str	r3, [r7, #0]
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d1ed      	bne.n	8011224 <SD_disk_read+0x80>
 8011248:	e000      	b.n	801124c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 801124a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 801124c:	2100      	movs	r1, #0
 801124e:	204c      	movs	r0, #76	@ 0x4c
 8011250:	f7ff fe57 	bl	8010f02 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8011254:	f7ff fd06 	bl	8010c64 <DESELECT>
  SPI_RxByte();
 8011258:	f7ff fd44 	bl	8010ce4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	2b00      	cmp	r3, #0
 8011260:	bf14      	ite	ne
 8011262:	2301      	movne	r3, #1
 8011264:	2300      	moveq	r3, #0
 8011266:	b2db      	uxtb	r3, r3
}
 8011268:	4618      	mov	r0, r3
 801126a:	3710      	adds	r7, #16
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	240000e4 	.word	0x240000e4
 8011274:	2400549c 	.word	0x2400549c

08011278 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b084      	sub	sp, #16
 801127c:	af00      	add	r7, sp, #0
 801127e:	60b9      	str	r1, [r7, #8]
 8011280:	607a      	str	r2, [r7, #4]
 8011282:	603b      	str	r3, [r7, #0]
 8011284:	4603      	mov	r3, r0
 8011286:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8011288:	7bfb      	ldrb	r3, [r7, #15]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d102      	bne.n	8011294 <SD_disk_write+0x1c>
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d101      	bne.n	8011298 <SD_disk_write+0x20>
 8011294:	2304      	movs	r3, #4
 8011296:	e06b      	b.n	8011370 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011298:	4b37      	ldr	r3, [pc, #220]	@ (8011378 <SD_disk_write+0x100>)
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	b2db      	uxtb	r3, r3
 801129e:	f003 0301 	and.w	r3, r3, #1
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d001      	beq.n	80112aa <SD_disk_write+0x32>
 80112a6:	2303      	movs	r3, #3
 80112a8:	e062      	b.n	8011370 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80112aa:	4b33      	ldr	r3, [pc, #204]	@ (8011378 <SD_disk_write+0x100>)
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	f003 0304 	and.w	r3, r3, #4
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d001      	beq.n	80112bc <SD_disk_write+0x44>
 80112b8:	2302      	movs	r3, #2
 80112ba:	e059      	b.n	8011370 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80112bc:	4b2f      	ldr	r3, [pc, #188]	@ (801137c <SD_disk_write+0x104>)
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	f003 0304 	and.w	r3, r3, #4
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d102      	bne.n	80112ce <SD_disk_write+0x56>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	025b      	lsls	r3, r3, #9
 80112cc:	607b      	str	r3, [r7, #4]

  SELECT();
 80112ce:	f7ff fcbd 	bl	8010c4c <SELECT>

  if (count == 1)
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d110      	bne.n	80112fa <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80112d8:	6879      	ldr	r1, [r7, #4]
 80112da:	2058      	movs	r0, #88	@ 0x58
 80112dc:	f7ff fe11 	bl	8010f02 <SD_SendCmd>
 80112e0:	4603      	mov	r3, r0
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d13a      	bne.n	801135c <SD_disk_write+0xe4>
 80112e6:	21fe      	movs	r1, #254	@ 0xfe
 80112e8:	68b8      	ldr	r0, [r7, #8]
 80112ea:	f7ff fdc7 	bl	8010e7c <SD_TxDataBlock>
 80112ee:	4603      	mov	r3, r0
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d033      	beq.n	801135c <SD_disk_write+0xe4>
      count = 0;
 80112f4:	2300      	movs	r3, #0
 80112f6:	603b      	str	r3, [r7, #0]
 80112f8:	e030      	b.n	801135c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80112fa:	4b20      	ldr	r3, [pc, #128]	@ (801137c <SD_disk_write+0x104>)
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	f003 0302 	and.w	r3, r3, #2
 8011302:	2b00      	cmp	r3, #0
 8011304:	d007      	beq.n	8011316 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8011306:	2100      	movs	r1, #0
 8011308:	2077      	movs	r0, #119	@ 0x77
 801130a:	f7ff fdfa 	bl	8010f02 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 801130e:	6839      	ldr	r1, [r7, #0]
 8011310:	2057      	movs	r0, #87	@ 0x57
 8011312:	f7ff fdf6 	bl	8010f02 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8011316:	6879      	ldr	r1, [r7, #4]
 8011318:	2059      	movs	r0, #89	@ 0x59
 801131a:	f7ff fdf2 	bl	8010f02 <SD_SendCmd>
 801131e:	4603      	mov	r3, r0
 8011320:	2b00      	cmp	r3, #0
 8011322:	d11b      	bne.n	801135c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8011324:	21fc      	movs	r1, #252	@ 0xfc
 8011326:	68b8      	ldr	r0, [r7, #8]
 8011328:	f7ff fda8 	bl	8010e7c <SD_TxDataBlock>
 801132c:	4603      	mov	r3, r0
 801132e:	2b00      	cmp	r3, #0
 8011330:	d00a      	beq.n	8011348 <SD_disk_write+0xd0>
        buff += 512;
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8011338:	60bb      	str	r3, [r7, #8]
      } while (--count);
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	3b01      	subs	r3, #1
 801133e:	603b      	str	r3, [r7, #0]
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d1ee      	bne.n	8011324 <SD_disk_write+0xac>
 8011346:	e000      	b.n	801134a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8011348:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 801134a:	21fd      	movs	r1, #253	@ 0xfd
 801134c:	2000      	movs	r0, #0
 801134e:	f7ff fd95 	bl	8010e7c <SD_TxDataBlock>
 8011352:	4603      	mov	r3, r0
 8011354:	2b00      	cmp	r3, #0
 8011356:	d101      	bne.n	801135c <SD_disk_write+0xe4>
      {
        count = 1;
 8011358:	2301      	movs	r3, #1
 801135a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 801135c:	f7ff fc82 	bl	8010c64 <DESELECT>
  SPI_RxByte();
 8011360:	f7ff fcc0 	bl	8010ce4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	bf14      	ite	ne
 801136a:	2301      	movne	r3, #1
 801136c:	2300      	moveq	r3, #0
 801136e:	b2db      	uxtb	r3, r3
}
 8011370:	4618      	mov	r0, r3
 8011372:	3710      	adds	r7, #16
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	240000e4 	.word	0x240000e4
 801137c:	2400549c 	.word	0x2400549c

08011380 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8011380:	b590      	push	{r4, r7, lr}
 8011382:	b08b      	sub	sp, #44	@ 0x2c
 8011384:	af00      	add	r7, sp, #0
 8011386:	4603      	mov	r3, r0
 8011388:	603a      	str	r2, [r7, #0]
 801138a:	71fb      	strb	r3, [r7, #7]
 801138c:	460b      	mov	r3, r1
 801138e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8011394:	79fb      	ldrb	r3, [r7, #7]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d001      	beq.n	801139e <SD_disk_ioctl+0x1e>
 801139a:	2304      	movs	r3, #4
 801139c:	e113      	b.n	80115c6 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 801139e:	2301      	movs	r3, #1
 80113a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80113a4:	79bb      	ldrb	r3, [r7, #6]
 80113a6:	2b05      	cmp	r3, #5
 80113a8:	d124      	bne.n	80113f4 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80113aa:	6a3b      	ldr	r3, [r7, #32]
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	2b02      	cmp	r3, #2
 80113b0:	d012      	beq.n	80113d8 <SD_disk_ioctl+0x58>
 80113b2:	2b02      	cmp	r3, #2
 80113b4:	dc1a      	bgt.n	80113ec <SD_disk_ioctl+0x6c>
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d002      	beq.n	80113c0 <SD_disk_ioctl+0x40>
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d006      	beq.n	80113cc <SD_disk_ioctl+0x4c>
 80113be:	e015      	b.n	80113ec <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80113c0:	f7ff fd16 	bl	8010df0 <SD_PowerOff>
      res = RES_OK;
 80113c4:	2300      	movs	r3, #0
 80113c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80113ca:	e0fa      	b.n	80115c2 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 80113cc:	f7ff fcce 	bl	8010d6c <SD_PowerOn>
      res = RES_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80113d6:	e0f4      	b.n	80115c2 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80113d8:	6a3b      	ldr	r3, [r7, #32]
 80113da:	1c5c      	adds	r4, r3, #1
 80113dc:	f7ff fd14 	bl	8010e08 <SD_CheckPower>
 80113e0:	4603      	mov	r3, r0
 80113e2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80113e4:	2300      	movs	r3, #0
 80113e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80113ea:	e0ea      	b.n	80115c2 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80113ec:	2304      	movs	r3, #4
 80113ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80113f2:	e0e6      	b.n	80115c2 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80113f4:	4b76      	ldr	r3, [pc, #472]	@ (80115d0 <SD_disk_ioctl+0x250>)
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	f003 0301 	and.w	r3, r3, #1
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d001      	beq.n	8011406 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8011402:	2303      	movs	r3, #3
 8011404:	e0df      	b.n	80115c6 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8011406:	f7ff fc21 	bl	8010c4c <SELECT>
    switch (ctrl)
 801140a:	79bb      	ldrb	r3, [r7, #6]
 801140c:	2b0d      	cmp	r3, #13
 801140e:	f200 80c9 	bhi.w	80115a4 <SD_disk_ioctl+0x224>
 8011412:	a201      	add	r2, pc, #4	@ (adr r2, 8011418 <SD_disk_ioctl+0x98>)
 8011414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011418:	0801150f 	.word	0x0801150f
 801141c:	08011451 	.word	0x08011451
 8011420:	080114ff 	.word	0x080114ff
 8011424:	080115a5 	.word	0x080115a5
 8011428:	080115a5 	.word	0x080115a5
 801142c:	080115a5 	.word	0x080115a5
 8011430:	080115a5 	.word	0x080115a5
 8011434:	080115a5 	.word	0x080115a5
 8011438:	080115a5 	.word	0x080115a5
 801143c:	080115a5 	.word	0x080115a5
 8011440:	080115a5 	.word	0x080115a5
 8011444:	08011521 	.word	0x08011521
 8011448:	08011545 	.word	0x08011545
 801144c:	08011569 	.word	0x08011569
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8011450:	2100      	movs	r1, #0
 8011452:	2049      	movs	r0, #73	@ 0x49
 8011454:	f7ff fd55 	bl	8010f02 <SD_SendCmd>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	f040 80a6 	bne.w	80115ac <SD_disk_ioctl+0x22c>
 8011460:	f107 030c 	add.w	r3, r7, #12
 8011464:	2110      	movs	r1, #16
 8011466:	4618      	mov	r0, r3
 8011468:	f7ff fcda 	bl	8010e20 <SD_RxDataBlock>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	f000 809c 	beq.w	80115ac <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8011474:	7b3b      	ldrb	r3, [r7, #12]
 8011476:	099b      	lsrs	r3, r3, #6
 8011478:	b2db      	uxtb	r3, r3
 801147a:	2b01      	cmp	r3, #1
 801147c:	d10d      	bne.n	801149a <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 801147e:	7d7b      	ldrb	r3, [r7, #21]
 8011480:	461a      	mov	r2, r3
 8011482:	7d3b      	ldrb	r3, [r7, #20]
 8011484:	021b      	lsls	r3, r3, #8
 8011486:	b29b      	uxth	r3, r3
 8011488:	4413      	add	r3, r2
 801148a:	b29b      	uxth	r3, r3
 801148c:	3301      	adds	r3, #1
 801148e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8011490:	8bfb      	ldrh	r3, [r7, #30]
 8011492:	029a      	lsls	r2, r3, #10
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	601a      	str	r2, [r3, #0]
 8011498:	e02d      	b.n	80114f6 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 801149a:	7c7b      	ldrb	r3, [r7, #17]
 801149c:	f003 030f 	and.w	r3, r3, #15
 80114a0:	b2da      	uxtb	r2, r3
 80114a2:	7dbb      	ldrb	r3, [r7, #22]
 80114a4:	09db      	lsrs	r3, r3, #7
 80114a6:	b2db      	uxtb	r3, r3
 80114a8:	4413      	add	r3, r2
 80114aa:	b2da      	uxtb	r2, r3
 80114ac:	7d7b      	ldrb	r3, [r7, #21]
 80114ae:	005b      	lsls	r3, r3, #1
 80114b0:	b2db      	uxtb	r3, r3
 80114b2:	f003 0306 	and.w	r3, r3, #6
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	4413      	add	r3, r2
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	3302      	adds	r3, #2
 80114be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80114c2:	7d3b      	ldrb	r3, [r7, #20]
 80114c4:	099b      	lsrs	r3, r3, #6
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	461a      	mov	r2, r3
 80114ca:	7cfb      	ldrb	r3, [r7, #19]
 80114cc:	009b      	lsls	r3, r3, #2
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	4413      	add	r3, r2
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	7cbb      	ldrb	r3, [r7, #18]
 80114d6:	029b      	lsls	r3, r3, #10
 80114d8:	b29b      	uxth	r3, r3
 80114da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80114de:	b29b      	uxth	r3, r3
 80114e0:	4413      	add	r3, r2
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	3301      	adds	r3, #1
 80114e6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80114e8:	8bfa      	ldrh	r2, [r7, #30]
 80114ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80114ee:	3b09      	subs	r3, #9
 80114f0:	409a      	lsls	r2, r3
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80114f6:	2300      	movs	r3, #0
 80114f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80114fc:	e056      	b.n	80115ac <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011504:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8011506:	2300      	movs	r3, #0
 8011508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801150c:	e055      	b.n	80115ba <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 801150e:	f7ff fc13 	bl	8010d38 <SD_ReadyWait>
 8011512:	4603      	mov	r3, r0
 8011514:	2bff      	cmp	r3, #255	@ 0xff
 8011516:	d14b      	bne.n	80115b0 <SD_disk_ioctl+0x230>
 8011518:	2300      	movs	r3, #0
 801151a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801151e:	e047      	b.n	80115b0 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8011520:	2100      	movs	r1, #0
 8011522:	2049      	movs	r0, #73	@ 0x49
 8011524:	f7ff fced 	bl	8010f02 <SD_SendCmd>
 8011528:	4603      	mov	r3, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	d142      	bne.n	80115b4 <SD_disk_ioctl+0x234>
 801152e:	2110      	movs	r1, #16
 8011530:	6a38      	ldr	r0, [r7, #32]
 8011532:	f7ff fc75 	bl	8010e20 <SD_RxDataBlock>
 8011536:	4603      	mov	r3, r0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d03b      	beq.n	80115b4 <SD_disk_ioctl+0x234>
 801153c:	2300      	movs	r3, #0
 801153e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8011542:	e037      	b.n	80115b4 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8011544:	2100      	movs	r1, #0
 8011546:	204a      	movs	r0, #74	@ 0x4a
 8011548:	f7ff fcdb 	bl	8010f02 <SD_SendCmd>
 801154c:	4603      	mov	r3, r0
 801154e:	2b00      	cmp	r3, #0
 8011550:	d132      	bne.n	80115b8 <SD_disk_ioctl+0x238>
 8011552:	2110      	movs	r1, #16
 8011554:	6a38      	ldr	r0, [r7, #32]
 8011556:	f7ff fc63 	bl	8010e20 <SD_RxDataBlock>
 801155a:	4603      	mov	r3, r0
 801155c:	2b00      	cmp	r3, #0
 801155e:	d02b      	beq.n	80115b8 <SD_disk_ioctl+0x238>
 8011560:	2300      	movs	r3, #0
 8011562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8011566:	e027      	b.n	80115b8 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8011568:	2100      	movs	r1, #0
 801156a:	207a      	movs	r0, #122	@ 0x7a
 801156c:	f7ff fcc9 	bl	8010f02 <SD_SendCmd>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d116      	bne.n	80115a4 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8011576:	2300      	movs	r3, #0
 8011578:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801157c:	e00b      	b.n	8011596 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 801157e:	6a3c      	ldr	r4, [r7, #32]
 8011580:	1c63      	adds	r3, r4, #1
 8011582:	623b      	str	r3, [r7, #32]
 8011584:	f7ff fbae 	bl	8010ce4 <SPI_RxByte>
 8011588:	4603      	mov	r3, r0
 801158a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 801158c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011590:	3301      	adds	r3, #1
 8011592:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011596:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801159a:	2b03      	cmp	r3, #3
 801159c:	d9ef      	bls.n	801157e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 801159e:	2300      	movs	r3, #0
 80115a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 80115a4:	2304      	movs	r3, #4
 80115a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80115aa:	e006      	b.n	80115ba <SD_disk_ioctl+0x23a>
      break;
 80115ac:	bf00      	nop
 80115ae:	e004      	b.n	80115ba <SD_disk_ioctl+0x23a>
      break;
 80115b0:	bf00      	nop
 80115b2:	e002      	b.n	80115ba <SD_disk_ioctl+0x23a>
      break;
 80115b4:	bf00      	nop
 80115b6:	e000      	b.n	80115ba <SD_disk_ioctl+0x23a>
      break;
 80115b8:	bf00      	nop
    }
    DESELECT();
 80115ba:	f7ff fb53 	bl	8010c64 <DESELECT>
    SPI_RxByte();
 80115be:	f7ff fb91 	bl	8010ce4 <SPI_RxByte>
  }
  return res;
 80115c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	372c      	adds	r7, #44	@ 0x2c
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd90      	pop	{r4, r7, pc}
 80115ce:	bf00      	nop
 80115d0:	240000e4 	.word	0x240000e4

080115d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b084      	sub	sp, #16
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80115de:	79fb      	ldrb	r3, [r7, #7]
 80115e0:	4a08      	ldr	r2, [pc, #32]	@ (8011604 <disk_status+0x30>)
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	4413      	add	r3, r2
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	79fa      	ldrb	r2, [r7, #7]
 80115ec:	4905      	ldr	r1, [pc, #20]	@ (8011604 <disk_status+0x30>)
 80115ee:	440a      	add	r2, r1
 80115f0:	7a12      	ldrb	r2, [r2, #8]
 80115f2:	4610      	mov	r0, r2
 80115f4:	4798      	blx	r3
 80115f6:	4603      	mov	r3, r0
 80115f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80115fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3710      	adds	r7, #16
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	240056c8 	.word	0x240056c8

08011608 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b084      	sub	sp, #16
 801160c:	af00      	add	r7, sp, #0
 801160e:	4603      	mov	r3, r0
 8011610:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011612:	2300      	movs	r3, #0
 8011614:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011616:	79fb      	ldrb	r3, [r7, #7]
 8011618:	4a0e      	ldr	r2, [pc, #56]	@ (8011654 <disk_initialize+0x4c>)
 801161a:	5cd3      	ldrb	r3, [r2, r3]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d114      	bne.n	801164a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011620:	79fb      	ldrb	r3, [r7, #7]
 8011622:	4a0c      	ldr	r2, [pc, #48]	@ (8011654 <disk_initialize+0x4c>)
 8011624:	009b      	lsls	r3, r3, #2
 8011626:	4413      	add	r3, r2
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	79fa      	ldrb	r2, [r7, #7]
 801162e:	4909      	ldr	r1, [pc, #36]	@ (8011654 <disk_initialize+0x4c>)
 8011630:	440a      	add	r2, r1
 8011632:	7a12      	ldrb	r2, [r2, #8]
 8011634:	4610      	mov	r0, r2
 8011636:	4798      	blx	r3
 8011638:	4603      	mov	r3, r0
 801163a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801163c:	7bfb      	ldrb	r3, [r7, #15]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d103      	bne.n	801164a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8011642:	79fb      	ldrb	r3, [r7, #7]
 8011644:	4a03      	ldr	r2, [pc, #12]	@ (8011654 <disk_initialize+0x4c>)
 8011646:	2101      	movs	r1, #1
 8011648:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801164a:	7bfb      	ldrb	r3, [r7, #15]
}
 801164c:	4618      	mov	r0, r3
 801164e:	3710      	adds	r7, #16
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}
 8011654:	240056c8 	.word	0x240056c8

08011658 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011658:	b590      	push	{r4, r7, lr}
 801165a:	b087      	sub	sp, #28
 801165c:	af00      	add	r7, sp, #0
 801165e:	60b9      	str	r1, [r7, #8]
 8011660:	607a      	str	r2, [r7, #4]
 8011662:	603b      	str	r3, [r7, #0]
 8011664:	4603      	mov	r3, r0
 8011666:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011668:	7bfb      	ldrb	r3, [r7, #15]
 801166a:	4a0a      	ldr	r2, [pc, #40]	@ (8011694 <disk_read+0x3c>)
 801166c:	009b      	lsls	r3, r3, #2
 801166e:	4413      	add	r3, r2
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	689c      	ldr	r4, [r3, #8]
 8011674:	7bfb      	ldrb	r3, [r7, #15]
 8011676:	4a07      	ldr	r2, [pc, #28]	@ (8011694 <disk_read+0x3c>)
 8011678:	4413      	add	r3, r2
 801167a:	7a18      	ldrb	r0, [r3, #8]
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	687a      	ldr	r2, [r7, #4]
 8011680:	68b9      	ldr	r1, [r7, #8]
 8011682:	47a0      	blx	r4
 8011684:	4603      	mov	r3, r0
 8011686:	75fb      	strb	r3, [r7, #23]
  return res;
 8011688:	7dfb      	ldrb	r3, [r7, #23]
}
 801168a:	4618      	mov	r0, r3
 801168c:	371c      	adds	r7, #28
 801168e:	46bd      	mov	sp, r7
 8011690:	bd90      	pop	{r4, r7, pc}
 8011692:	bf00      	nop
 8011694:	240056c8 	.word	0x240056c8

08011698 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011698:	b590      	push	{r4, r7, lr}
 801169a:	b087      	sub	sp, #28
 801169c:	af00      	add	r7, sp, #0
 801169e:	60b9      	str	r1, [r7, #8]
 80116a0:	607a      	str	r2, [r7, #4]
 80116a2:	603b      	str	r3, [r7, #0]
 80116a4:	4603      	mov	r3, r0
 80116a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80116a8:	7bfb      	ldrb	r3, [r7, #15]
 80116aa:	4a0a      	ldr	r2, [pc, #40]	@ (80116d4 <disk_write+0x3c>)
 80116ac:	009b      	lsls	r3, r3, #2
 80116ae:	4413      	add	r3, r2
 80116b0:	685b      	ldr	r3, [r3, #4]
 80116b2:	68dc      	ldr	r4, [r3, #12]
 80116b4:	7bfb      	ldrb	r3, [r7, #15]
 80116b6:	4a07      	ldr	r2, [pc, #28]	@ (80116d4 <disk_write+0x3c>)
 80116b8:	4413      	add	r3, r2
 80116ba:	7a18      	ldrb	r0, [r3, #8]
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	68b9      	ldr	r1, [r7, #8]
 80116c2:	47a0      	blx	r4
 80116c4:	4603      	mov	r3, r0
 80116c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80116c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	371c      	adds	r7, #28
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd90      	pop	{r4, r7, pc}
 80116d2:	bf00      	nop
 80116d4:	240056c8 	.word	0x240056c8

080116d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b084      	sub	sp, #16
 80116dc:	af00      	add	r7, sp, #0
 80116de:	4603      	mov	r3, r0
 80116e0:	603a      	str	r2, [r7, #0]
 80116e2:	71fb      	strb	r3, [r7, #7]
 80116e4:	460b      	mov	r3, r1
 80116e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80116e8:	79fb      	ldrb	r3, [r7, #7]
 80116ea:	4a09      	ldr	r2, [pc, #36]	@ (8011710 <disk_ioctl+0x38>)
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	4413      	add	r3, r2
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	691b      	ldr	r3, [r3, #16]
 80116f4:	79fa      	ldrb	r2, [r7, #7]
 80116f6:	4906      	ldr	r1, [pc, #24]	@ (8011710 <disk_ioctl+0x38>)
 80116f8:	440a      	add	r2, r1
 80116fa:	7a10      	ldrb	r0, [r2, #8]
 80116fc:	79b9      	ldrb	r1, [r7, #6]
 80116fe:	683a      	ldr	r2, [r7, #0]
 8011700:	4798      	blx	r3
 8011702:	4603      	mov	r3, r0
 8011704:	73fb      	strb	r3, [r7, #15]
  return res;
 8011706:	7bfb      	ldrb	r3, [r7, #15]
}
 8011708:	4618      	mov	r0, r3
 801170a:	3710      	adds	r7, #16
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	240056c8 	.word	0x240056c8

08011714 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011714:	b480      	push	{r7}
 8011716:	b085      	sub	sp, #20
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	3301      	adds	r3, #1
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011724:	89fb      	ldrh	r3, [r7, #14]
 8011726:	021b      	lsls	r3, r3, #8
 8011728:	b21a      	sxth	r2, r3
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	b21b      	sxth	r3, r3
 8011730:	4313      	orrs	r3, r2
 8011732:	b21b      	sxth	r3, r3
 8011734:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011736:	89fb      	ldrh	r3, [r7, #14]
}
 8011738:	4618      	mov	r0, r3
 801173a:	3714      	adds	r7, #20
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr

08011744 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011744:	b480      	push	{r7}
 8011746:	b085      	sub	sp, #20
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	3303      	adds	r3, #3
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	021b      	lsls	r3, r3, #8
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	3202      	adds	r2, #2
 801175c:	7812      	ldrb	r2, [r2, #0]
 801175e:	4313      	orrs	r3, r2
 8011760:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	021b      	lsls	r3, r3, #8
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	3201      	adds	r2, #1
 801176a:	7812      	ldrb	r2, [r2, #0]
 801176c:	4313      	orrs	r3, r2
 801176e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	021b      	lsls	r3, r3, #8
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	7812      	ldrb	r2, [r2, #0]
 8011778:	4313      	orrs	r3, r2
 801177a:	60fb      	str	r3, [r7, #12]
	return rv;
 801177c:	68fb      	ldr	r3, [r7, #12]
}
 801177e:	4618      	mov	r0, r3
 8011780:	3714      	adds	r7, #20
 8011782:	46bd      	mov	sp, r7
 8011784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011788:	4770      	bx	lr

0801178a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801178a:	b480      	push	{r7}
 801178c:	b083      	sub	sp, #12
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
 8011792:	460b      	mov	r3, r1
 8011794:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	1c5a      	adds	r2, r3, #1
 801179a:	607a      	str	r2, [r7, #4]
 801179c:	887a      	ldrh	r2, [r7, #2]
 801179e:	b2d2      	uxtb	r2, r2
 80117a0:	701a      	strb	r2, [r3, #0]
 80117a2:	887b      	ldrh	r3, [r7, #2]
 80117a4:	0a1b      	lsrs	r3, r3, #8
 80117a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	607a      	str	r2, [r7, #4]
 80117ae:	887a      	ldrh	r2, [r7, #2]
 80117b0:	b2d2      	uxtb	r2, r2
 80117b2:	701a      	strb	r2, [r3, #0]
}
 80117b4:	bf00      	nop
 80117b6:	370c      	adds	r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	1c5a      	adds	r2, r3, #1
 80117ce:	607a      	str	r2, [r7, #4]
 80117d0:	683a      	ldr	r2, [r7, #0]
 80117d2:	b2d2      	uxtb	r2, r2
 80117d4:	701a      	strb	r2, [r3, #0]
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	0a1b      	lsrs	r3, r3, #8
 80117da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	1c5a      	adds	r2, r3, #1
 80117e0:	607a      	str	r2, [r7, #4]
 80117e2:	683a      	ldr	r2, [r7, #0]
 80117e4:	b2d2      	uxtb	r2, r2
 80117e6:	701a      	strb	r2, [r3, #0]
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	0a1b      	lsrs	r3, r3, #8
 80117ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	1c5a      	adds	r2, r3, #1
 80117f2:	607a      	str	r2, [r7, #4]
 80117f4:	683a      	ldr	r2, [r7, #0]
 80117f6:	b2d2      	uxtb	r2, r2
 80117f8:	701a      	strb	r2, [r3, #0]
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	0a1b      	lsrs	r3, r3, #8
 80117fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	1c5a      	adds	r2, r3, #1
 8011804:	607a      	str	r2, [r7, #4]
 8011806:	683a      	ldr	r2, [r7, #0]
 8011808:	b2d2      	uxtb	r2, r2
 801180a:	701a      	strb	r2, [r3, #0]
}
 801180c:	bf00      	nop
 801180e:	370c      	adds	r7, #12
 8011810:	46bd      	mov	sp, r7
 8011812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011816:	4770      	bx	lr

08011818 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011818:	b480      	push	{r7}
 801181a:	b087      	sub	sp, #28
 801181c:	af00      	add	r7, sp, #0
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00d      	beq.n	801184e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011832:	693a      	ldr	r2, [r7, #16]
 8011834:	1c53      	adds	r3, r2, #1
 8011836:	613b      	str	r3, [r7, #16]
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	1c59      	adds	r1, r3, #1
 801183c:	6179      	str	r1, [r7, #20]
 801183e:	7812      	ldrb	r2, [r2, #0]
 8011840:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	3b01      	subs	r3, #1
 8011846:	607b      	str	r3, [r7, #4]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d1f1      	bne.n	8011832 <mem_cpy+0x1a>
	}
}
 801184e:	bf00      	nop
 8011850:	371c      	adds	r7, #28
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr

0801185a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801185a:	b480      	push	{r7}
 801185c:	b087      	sub	sp, #28
 801185e:	af00      	add	r7, sp, #0
 8011860:	60f8      	str	r0, [r7, #12]
 8011862:	60b9      	str	r1, [r7, #8]
 8011864:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	1c5a      	adds	r2, r3, #1
 801186e:	617a      	str	r2, [r7, #20]
 8011870:	68ba      	ldr	r2, [r7, #8]
 8011872:	b2d2      	uxtb	r2, r2
 8011874:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	3b01      	subs	r3, #1
 801187a:	607b      	str	r3, [r7, #4]
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d1f3      	bne.n	801186a <mem_set+0x10>
}
 8011882:	bf00      	nop
 8011884:	bf00      	nop
 8011886:	371c      	adds	r7, #28
 8011888:	46bd      	mov	sp, r7
 801188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188e:	4770      	bx	lr

08011890 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011890:	b480      	push	{r7}
 8011892:	b089      	sub	sp, #36	@ 0x24
 8011894:	af00      	add	r7, sp, #0
 8011896:	60f8      	str	r0, [r7, #12]
 8011898:	60b9      	str	r1, [r7, #8]
 801189a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	61fb      	str	r3, [r7, #28]
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80118a4:	2300      	movs	r3, #0
 80118a6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	1c5a      	adds	r2, r3, #1
 80118ac:	61fa      	str	r2, [r7, #28]
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	4619      	mov	r1, r3
 80118b2:	69bb      	ldr	r3, [r7, #24]
 80118b4:	1c5a      	adds	r2, r3, #1
 80118b6:	61ba      	str	r2, [r7, #24]
 80118b8:	781b      	ldrb	r3, [r3, #0]
 80118ba:	1acb      	subs	r3, r1, r3
 80118bc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	3b01      	subs	r3, #1
 80118c2:	607b      	str	r3, [r7, #4]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d002      	beq.n	80118d0 <mem_cmp+0x40>
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d0eb      	beq.n	80118a8 <mem_cmp+0x18>

	return r;
 80118d0:	697b      	ldr	r3, [r7, #20]
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	3724      	adds	r7, #36	@ 0x24
 80118d6:	46bd      	mov	sp, r7
 80118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118dc:	4770      	bx	lr

080118de <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80118de:	b480      	push	{r7}
 80118e0:	b083      	sub	sp, #12
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
 80118e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80118e8:	e002      	b.n	80118f0 <chk_chr+0x12>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	3301      	adds	r3, #1
 80118ee:	607b      	str	r3, [r7, #4]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d005      	beq.n	8011904 <chk_chr+0x26>
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	461a      	mov	r2, r3
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	4293      	cmp	r3, r2
 8011902:	d1f2      	bne.n	80118ea <chk_chr+0xc>
	return *str;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	781b      	ldrb	r3, [r3, #0]
}
 8011908:	4618      	mov	r0, r3
 801190a:	370c      	adds	r7, #12
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr

08011914 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011914:	b480      	push	{r7}
 8011916:	b085      	sub	sp, #20
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801191e:	2300      	movs	r3, #0
 8011920:	60bb      	str	r3, [r7, #8]
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	60fb      	str	r3, [r7, #12]
 8011926:	e029      	b.n	801197c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011928:	4a27      	ldr	r2, [pc, #156]	@ (80119c8 <chk_lock+0xb4>)
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	011b      	lsls	r3, r3, #4
 801192e:	4413      	add	r3, r2
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d01d      	beq.n	8011972 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011936:	4a24      	ldr	r2, [pc, #144]	@ (80119c8 <chk_lock+0xb4>)
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	011b      	lsls	r3, r3, #4
 801193c:	4413      	add	r3, r2
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	429a      	cmp	r2, r3
 8011946:	d116      	bne.n	8011976 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011948:	4a1f      	ldr	r2, [pc, #124]	@ (80119c8 <chk_lock+0xb4>)
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	011b      	lsls	r3, r3, #4
 801194e:	4413      	add	r3, r2
 8011950:	3304      	adds	r3, #4
 8011952:	681a      	ldr	r2, [r3, #0]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011958:	429a      	cmp	r2, r3
 801195a:	d10c      	bne.n	8011976 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801195c:	4a1a      	ldr	r2, [pc, #104]	@ (80119c8 <chk_lock+0xb4>)
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	011b      	lsls	r3, r3, #4
 8011962:	4413      	add	r3, r2
 8011964:	3308      	adds	r3, #8
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801196c:	429a      	cmp	r2, r3
 801196e:	d102      	bne.n	8011976 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011970:	e007      	b.n	8011982 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011972:	2301      	movs	r3, #1
 8011974:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	3301      	adds	r3, #1
 801197a:	60fb      	str	r3, [r7, #12]
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2b01      	cmp	r3, #1
 8011980:	d9d2      	bls.n	8011928 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	2b02      	cmp	r3, #2
 8011986:	d109      	bne.n	801199c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d102      	bne.n	8011994 <chk_lock+0x80>
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	2b02      	cmp	r3, #2
 8011992:	d101      	bne.n	8011998 <chk_lock+0x84>
 8011994:	2300      	movs	r3, #0
 8011996:	e010      	b.n	80119ba <chk_lock+0xa6>
 8011998:	2312      	movs	r3, #18
 801199a:	e00e      	b.n	80119ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d108      	bne.n	80119b4 <chk_lock+0xa0>
 80119a2:	4a09      	ldr	r2, [pc, #36]	@ (80119c8 <chk_lock+0xb4>)
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	011b      	lsls	r3, r3, #4
 80119a8:	4413      	add	r3, r2
 80119aa:	330c      	adds	r3, #12
 80119ac:	881b      	ldrh	r3, [r3, #0]
 80119ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80119b2:	d101      	bne.n	80119b8 <chk_lock+0xa4>
 80119b4:	2310      	movs	r3, #16
 80119b6:	e000      	b.n	80119ba <chk_lock+0xa6>
 80119b8:	2300      	movs	r3, #0
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3714      	adds	r7, #20
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr
 80119c6:	bf00      	nop
 80119c8:	240054a8 	.word	0x240054a8

080119cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80119cc:	b480      	push	{r7}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80119d2:	2300      	movs	r3, #0
 80119d4:	607b      	str	r3, [r7, #4]
 80119d6:	e002      	b.n	80119de <enq_lock+0x12>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	3301      	adds	r3, #1
 80119dc:	607b      	str	r3, [r7, #4]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d806      	bhi.n	80119f2 <enq_lock+0x26>
 80119e4:	4a09      	ldr	r2, [pc, #36]	@ (8011a0c <enq_lock+0x40>)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	011b      	lsls	r3, r3, #4
 80119ea:	4413      	add	r3, r2
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d1f2      	bne.n	80119d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2b02      	cmp	r3, #2
 80119f6:	bf14      	ite	ne
 80119f8:	2301      	movne	r3, #1
 80119fa:	2300      	moveq	r3, #0
 80119fc:	b2db      	uxtb	r3, r3
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	370c      	adds	r7, #12
 8011a02:	46bd      	mov	sp, r7
 8011a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop
 8011a0c:	240054a8 	.word	0x240054a8

08011a10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a10:	b480      	push	{r7}
 8011a12:	b085      	sub	sp, #20
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	60fb      	str	r3, [r7, #12]
 8011a1e:	e01f      	b.n	8011a60 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011a20:	4a41      	ldr	r2, [pc, #260]	@ (8011b28 <inc_lock+0x118>)
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	011b      	lsls	r3, r3, #4
 8011a26:	4413      	add	r3, r2
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d113      	bne.n	8011a5a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011a32:	4a3d      	ldr	r2, [pc, #244]	@ (8011b28 <inc_lock+0x118>)
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	011b      	lsls	r3, r3, #4
 8011a38:	4413      	add	r3, r2
 8011a3a:	3304      	adds	r3, #4
 8011a3c:	681a      	ldr	r2, [r3, #0]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d109      	bne.n	8011a5a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011a46:	4a38      	ldr	r2, [pc, #224]	@ (8011b28 <inc_lock+0x118>)
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	011b      	lsls	r3, r3, #4
 8011a4c:	4413      	add	r3, r2
 8011a4e:	3308      	adds	r3, #8
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d006      	beq.n	8011a68 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	60fb      	str	r3, [r7, #12]
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	d9dc      	bls.n	8011a20 <inc_lock+0x10>
 8011a66:	e000      	b.n	8011a6a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011a68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2b02      	cmp	r3, #2
 8011a6e:	d132      	bne.n	8011ad6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011a70:	2300      	movs	r3, #0
 8011a72:	60fb      	str	r3, [r7, #12]
 8011a74:	e002      	b.n	8011a7c <inc_lock+0x6c>
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	3301      	adds	r3, #1
 8011a7a:	60fb      	str	r3, [r7, #12]
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	2b01      	cmp	r3, #1
 8011a80:	d806      	bhi.n	8011a90 <inc_lock+0x80>
 8011a82:	4a29      	ldr	r2, [pc, #164]	@ (8011b28 <inc_lock+0x118>)
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	011b      	lsls	r3, r3, #4
 8011a88:	4413      	add	r3, r2
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1f2      	bne.n	8011a76 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2b02      	cmp	r3, #2
 8011a94:	d101      	bne.n	8011a9a <inc_lock+0x8a>
 8011a96:	2300      	movs	r3, #0
 8011a98:	e040      	b.n	8011b1c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681a      	ldr	r2, [r3, #0]
 8011a9e:	4922      	ldr	r1, [pc, #136]	@ (8011b28 <inc_lock+0x118>)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	011b      	lsls	r3, r3, #4
 8011aa4:	440b      	add	r3, r1
 8011aa6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	689a      	ldr	r2, [r3, #8]
 8011aac:	491e      	ldr	r1, [pc, #120]	@ (8011b28 <inc_lock+0x118>)
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	011b      	lsls	r3, r3, #4
 8011ab2:	440b      	add	r3, r1
 8011ab4:	3304      	adds	r3, #4
 8011ab6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	695a      	ldr	r2, [r3, #20]
 8011abc:	491a      	ldr	r1, [pc, #104]	@ (8011b28 <inc_lock+0x118>)
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	011b      	lsls	r3, r3, #4
 8011ac2:	440b      	add	r3, r1
 8011ac4:	3308      	adds	r3, #8
 8011ac6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011ac8:	4a17      	ldr	r2, [pc, #92]	@ (8011b28 <inc_lock+0x118>)
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	011b      	lsls	r3, r3, #4
 8011ace:	4413      	add	r3, r2
 8011ad0:	330c      	adds	r3, #12
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d009      	beq.n	8011af0 <inc_lock+0xe0>
 8011adc:	4a12      	ldr	r2, [pc, #72]	@ (8011b28 <inc_lock+0x118>)
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	011b      	lsls	r3, r3, #4
 8011ae2:	4413      	add	r3, r2
 8011ae4:	330c      	adds	r3, #12
 8011ae6:	881b      	ldrh	r3, [r3, #0]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d001      	beq.n	8011af0 <inc_lock+0xe0>
 8011aec:	2300      	movs	r3, #0
 8011aee:	e015      	b.n	8011b1c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d108      	bne.n	8011b08 <inc_lock+0xf8>
 8011af6:	4a0c      	ldr	r2, [pc, #48]	@ (8011b28 <inc_lock+0x118>)
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	011b      	lsls	r3, r3, #4
 8011afc:	4413      	add	r3, r2
 8011afe:	330c      	adds	r3, #12
 8011b00:	881b      	ldrh	r3, [r3, #0]
 8011b02:	3301      	adds	r3, #1
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	e001      	b.n	8011b0c <inc_lock+0xfc>
 8011b08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011b0c:	4906      	ldr	r1, [pc, #24]	@ (8011b28 <inc_lock+0x118>)
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	011b      	lsls	r3, r3, #4
 8011b12:	440b      	add	r3, r1
 8011b14:	330c      	adds	r3, #12
 8011b16:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	3301      	adds	r3, #1
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3714      	adds	r7, #20
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr
 8011b28:	240054a8 	.word	0x240054a8

08011b2c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b085      	sub	sp, #20
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	3b01      	subs	r3, #1
 8011b38:	607b      	str	r3, [r7, #4]
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	d825      	bhi.n	8011b8c <dec_lock+0x60>
		n = Files[i].ctr;
 8011b40:	4a17      	ldr	r2, [pc, #92]	@ (8011ba0 <dec_lock+0x74>)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	011b      	lsls	r3, r3, #4
 8011b46:	4413      	add	r3, r2
 8011b48:	330c      	adds	r3, #12
 8011b4a:	881b      	ldrh	r3, [r3, #0]
 8011b4c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011b4e:	89fb      	ldrh	r3, [r7, #14]
 8011b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b54:	d101      	bne.n	8011b5a <dec_lock+0x2e>
 8011b56:	2300      	movs	r3, #0
 8011b58:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011b5a:	89fb      	ldrh	r3, [r7, #14]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d002      	beq.n	8011b66 <dec_lock+0x3a>
 8011b60:	89fb      	ldrh	r3, [r7, #14]
 8011b62:	3b01      	subs	r3, #1
 8011b64:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011b66:	4a0e      	ldr	r2, [pc, #56]	@ (8011ba0 <dec_lock+0x74>)
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	011b      	lsls	r3, r3, #4
 8011b6c:	4413      	add	r3, r2
 8011b6e:	330c      	adds	r3, #12
 8011b70:	89fa      	ldrh	r2, [r7, #14]
 8011b72:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011b74:	89fb      	ldrh	r3, [r7, #14]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d105      	bne.n	8011b86 <dec_lock+0x5a>
 8011b7a:	4a09      	ldr	r2, [pc, #36]	@ (8011ba0 <dec_lock+0x74>)
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	011b      	lsls	r3, r3, #4
 8011b80:	4413      	add	r3, r2
 8011b82:	2200      	movs	r2, #0
 8011b84:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011b86:	2300      	movs	r3, #0
 8011b88:	737b      	strb	r3, [r7, #13]
 8011b8a:	e001      	b.n	8011b90 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011b8c:	2302      	movs	r3, #2
 8011b8e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011b90:	7b7b      	ldrb	r3, [r7, #13]
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3714      	adds	r7, #20
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop
 8011ba0:	240054a8 	.word	0x240054a8

08011ba4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b085      	sub	sp, #20
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011bac:	2300      	movs	r3, #0
 8011bae:	60fb      	str	r3, [r7, #12]
 8011bb0:	e010      	b.n	8011bd4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8011be8 <clear_lock+0x44>)
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	011b      	lsls	r3, r3, #4
 8011bb8:	4413      	add	r3, r2
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d105      	bne.n	8011bce <clear_lock+0x2a>
 8011bc2:	4a09      	ldr	r2, [pc, #36]	@ (8011be8 <clear_lock+0x44>)
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	011b      	lsls	r3, r3, #4
 8011bc8:	4413      	add	r3, r2
 8011bca:	2200      	movs	r2, #0
 8011bcc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	3301      	adds	r3, #1
 8011bd2:	60fb      	str	r3, [r7, #12]
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	2b01      	cmp	r3, #1
 8011bd8:	d9eb      	bls.n	8011bb2 <clear_lock+0xe>
	}
}
 8011bda:	bf00      	nop
 8011bdc:	bf00      	nop
 8011bde:	3714      	adds	r7, #20
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr
 8011be8:	240054a8 	.word	0x240054a8

08011bec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b086      	sub	sp, #24
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	78db      	ldrb	r3, [r3, #3]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d034      	beq.n	8011c6a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c04:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	7858      	ldrb	r0, [r3, #1]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011c10:	2301      	movs	r3, #1
 8011c12:	697a      	ldr	r2, [r7, #20]
 8011c14:	f7ff fd40 	bl	8011698 <disk_write>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d002      	beq.n	8011c24 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011c1e:	2301      	movs	r3, #1
 8011c20:	73fb      	strb	r3, [r7, #15]
 8011c22:	e022      	b.n	8011c6a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2200      	movs	r2, #0
 8011c28:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c2e:	697a      	ldr	r2, [r7, #20]
 8011c30:	1ad2      	subs	r2, r2, r3
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c36:	429a      	cmp	r2, r3
 8011c38:	d217      	bcs.n	8011c6a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	789b      	ldrb	r3, [r3, #2]
 8011c3e:	613b      	str	r3, [r7, #16]
 8011c40:	e010      	b.n	8011c64 <sync_window+0x78>
					wsect += fs->fsize;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c46:	697a      	ldr	r2, [r7, #20]
 8011c48:	4413      	add	r3, r2
 8011c4a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	7858      	ldrb	r0, [r3, #1]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011c56:	2301      	movs	r3, #1
 8011c58:	697a      	ldr	r2, [r7, #20]
 8011c5a:	f7ff fd1d 	bl	8011698 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	3b01      	subs	r3, #1
 8011c62:	613b      	str	r3, [r7, #16]
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	2b01      	cmp	r3, #1
 8011c68:	d8eb      	bhi.n	8011c42 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3718      	adds	r7, #24
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c86:	683a      	ldr	r2, [r7, #0]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d01b      	beq.n	8011cc4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7ff ffad 	bl	8011bec <sync_window>
 8011c92:	4603      	mov	r3, r0
 8011c94:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011c96:	7bfb      	ldrb	r3, [r7, #15]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d113      	bne.n	8011cc4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	7858      	ldrb	r0, [r3, #1]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	683a      	ldr	r2, [r7, #0]
 8011caa:	f7ff fcd5 	bl	8011658 <disk_read>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d004      	beq.n	8011cbe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8011cb8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	683a      	ldr	r2, [r7, #0]
 8011cc2:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8011cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3710      	adds	r7, #16
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
	...

08011cd0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b084      	sub	sp, #16
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff ff87 	bl	8011bec <sync_window>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011ce2:	7bfb      	ldrb	r3, [r7, #15]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d159      	bne.n	8011d9c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	2b03      	cmp	r3, #3
 8011cee:	d149      	bne.n	8011d84 <sync_fs+0xb4>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	791b      	ldrb	r3, [r3, #4]
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	d145      	bne.n	8011d84 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	899b      	ldrh	r3, [r3, #12]
 8011d02:	461a      	mov	r2, r3
 8011d04:	2100      	movs	r1, #0
 8011d06:	f7ff fda8 	bl	801185a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	333c      	adds	r3, #60	@ 0x3c
 8011d0e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011d12:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7ff fd37 	bl	801178a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	333c      	adds	r3, #60	@ 0x3c
 8011d20:	4921      	ldr	r1, [pc, #132]	@ (8011da8 <sync_fs+0xd8>)
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7ff fd4c 	bl	80117c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	333c      	adds	r3, #60	@ 0x3c
 8011d2c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011d30:	491e      	ldr	r1, [pc, #120]	@ (8011dac <sync_fs+0xdc>)
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7ff fd44 	bl	80117c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	333c      	adds	r3, #60	@ 0x3c
 8011d3c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	699b      	ldr	r3, [r3, #24]
 8011d44:	4619      	mov	r1, r3
 8011d46:	4610      	mov	r0, r2
 8011d48:	f7ff fd3a 	bl	80117c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	333c      	adds	r3, #60	@ 0x3c
 8011d50:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	695b      	ldr	r3, [r3, #20]
 8011d58:	4619      	mov	r1, r3
 8011d5a:	4610      	mov	r0, r2
 8011d5c:	f7ff fd30 	bl	80117c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d64:	1c5a      	adds	r2, r3, #1
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	7858      	ldrb	r0, [r3, #1]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011d78:	2301      	movs	r3, #1
 8011d7a:	f7ff fc8d 	bl	8011698 <disk_write>
			fs->fsi_flag = 0;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2200      	movs	r2, #0
 8011d82:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	785b      	ldrb	r3, [r3, #1]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	2100      	movs	r1, #0
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7ff fca3 	bl	80116d8 <disk_ioctl>
 8011d92:	4603      	mov	r3, r0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d001      	beq.n	8011d9c <sync_fs+0xcc>
 8011d98:	2301      	movs	r3, #1
 8011d9a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3710      	adds	r7, #16
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	41615252 	.word	0x41615252
 8011dac:	61417272 	.word	0x61417272

08011db0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011db0:	b480      	push	{r7}
 8011db2:	b083      	sub	sp, #12
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	3b02      	subs	r3, #2
 8011dbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6a1b      	ldr	r3, [r3, #32]
 8011dc4:	3b02      	subs	r3, #2
 8011dc6:	683a      	ldr	r2, [r7, #0]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d301      	bcc.n	8011dd0 <clust2sect+0x20>
 8011dcc:	2300      	movs	r3, #0
 8011dce:	e008      	b.n	8011de2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	895b      	ldrh	r3, [r3, #10]
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	fb03 f202 	mul.w	r2, r3, r2
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011de0:	4413      	add	r3, r2
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	370c      	adds	r7, #12
 8011de6:	46bd      	mov	sp, r7
 8011de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dec:	4770      	bx	lr

08011dee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011dee:	b580      	push	{r7, lr}
 8011df0:	b086      	sub	sp, #24
 8011df2:	af00      	add	r7, sp, #0
 8011df4:	6078      	str	r0, [r7, #4]
 8011df6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	2b01      	cmp	r3, #1
 8011e02:	d904      	bls.n	8011e0e <get_fat+0x20>
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	6a1b      	ldr	r3, [r3, #32]
 8011e08:	683a      	ldr	r2, [r7, #0]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d302      	bcc.n	8011e14 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011e0e:	2301      	movs	r3, #1
 8011e10:	617b      	str	r3, [r7, #20]
 8011e12:	e0ba      	b.n	8011f8a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011e14:	f04f 33ff 	mov.w	r3, #4294967295
 8011e18:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	2b03      	cmp	r3, #3
 8011e20:	f000 8082 	beq.w	8011f28 <get_fat+0x13a>
 8011e24:	2b03      	cmp	r3, #3
 8011e26:	f300 80a6 	bgt.w	8011f76 <get_fat+0x188>
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d002      	beq.n	8011e34 <get_fat+0x46>
 8011e2e:	2b02      	cmp	r3, #2
 8011e30:	d055      	beq.n	8011ede <get_fat+0xf0>
 8011e32:	e0a0      	b.n	8011f76 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	60fb      	str	r3, [r7, #12]
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	085b      	lsrs	r3, r3, #1
 8011e3c:	68fa      	ldr	r2, [r7, #12]
 8011e3e:	4413      	add	r3, r2
 8011e40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	899b      	ldrh	r3, [r3, #12]
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e52:	4413      	add	r3, r2
 8011e54:	4619      	mov	r1, r3
 8011e56:	6938      	ldr	r0, [r7, #16]
 8011e58:	f7ff ff0c 	bl	8011c74 <move_window>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	f040 808c 	bne.w	8011f7c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	1c5a      	adds	r2, r3, #1
 8011e68:	60fa      	str	r2, [r7, #12]
 8011e6a:	693a      	ldr	r2, [r7, #16]
 8011e6c:	8992      	ldrh	r2, [r2, #12]
 8011e6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e72:	fb01 f202 	mul.w	r2, r1, r2
 8011e76:	1a9b      	subs	r3, r3, r2
 8011e78:	693a      	ldr	r2, [r7, #16]
 8011e7a:	4413      	add	r3, r2
 8011e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011e80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	899b      	ldrh	r3, [r3, #12]
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e92:	4413      	add	r3, r2
 8011e94:	4619      	mov	r1, r3
 8011e96:	6938      	ldr	r0, [r7, #16]
 8011e98:	f7ff feec 	bl	8011c74 <move_window>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d16e      	bne.n	8011f80 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	899b      	ldrh	r3, [r3, #12]
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8011eae:	fb01 f202 	mul.w	r2, r1, r2
 8011eb2:	1a9b      	subs	r3, r3, r2
 8011eb4:	693a      	ldr	r2, [r7, #16]
 8011eb6:	4413      	add	r3, r2
 8011eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011ebc:	021b      	lsls	r3, r3, #8
 8011ebe:	68ba      	ldr	r2, [r7, #8]
 8011ec0:	4313      	orrs	r3, r2
 8011ec2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	f003 0301 	and.w	r3, r3, #1
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d002      	beq.n	8011ed4 <get_fat+0xe6>
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	091b      	lsrs	r3, r3, #4
 8011ed2:	e002      	b.n	8011eda <get_fat+0xec>
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011eda:	617b      	str	r3, [r7, #20]
			break;
 8011edc:	e055      	b.n	8011f8a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	899b      	ldrh	r3, [r3, #12]
 8011ee6:	085b      	lsrs	r3, r3, #1
 8011ee8:	b29b      	uxth	r3, r3
 8011eea:	4619      	mov	r1, r3
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ef2:	4413      	add	r3, r2
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	6938      	ldr	r0, [r7, #16]
 8011ef8:	f7ff febc 	bl	8011c74 <move_window>
 8011efc:	4603      	mov	r3, r0
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d140      	bne.n	8011f84 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	005b      	lsls	r3, r3, #1
 8011f0c:	693a      	ldr	r2, [r7, #16]
 8011f0e:	8992      	ldrh	r2, [r2, #12]
 8011f10:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f14:	fb00 f202 	mul.w	r2, r0, r2
 8011f18:	1a9b      	subs	r3, r3, r2
 8011f1a:	440b      	add	r3, r1
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7ff fbf9 	bl	8011714 <ld_word>
 8011f22:	4603      	mov	r3, r0
 8011f24:	617b      	str	r3, [r7, #20]
			break;
 8011f26:	e030      	b.n	8011f8a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	899b      	ldrh	r3, [r3, #12]
 8011f30:	089b      	lsrs	r3, r3, #2
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	4619      	mov	r1, r3
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f3c:	4413      	add	r3, r2
 8011f3e:	4619      	mov	r1, r3
 8011f40:	6938      	ldr	r0, [r7, #16]
 8011f42:	f7ff fe97 	bl	8011c74 <move_window>
 8011f46:	4603      	mov	r3, r0
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d11d      	bne.n	8011f88 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	009b      	lsls	r3, r3, #2
 8011f56:	693a      	ldr	r2, [r7, #16]
 8011f58:	8992      	ldrh	r2, [r2, #12]
 8011f5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f5e:	fb00 f202 	mul.w	r2, r0, r2
 8011f62:	1a9b      	subs	r3, r3, r2
 8011f64:	440b      	add	r3, r1
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7ff fbec 	bl	8011744 <ld_dword>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011f72:	617b      	str	r3, [r7, #20]
			break;
 8011f74:	e009      	b.n	8011f8a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011f76:	2301      	movs	r3, #1
 8011f78:	617b      	str	r3, [r7, #20]
 8011f7a:	e006      	b.n	8011f8a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f7c:	bf00      	nop
 8011f7e:	e004      	b.n	8011f8a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f80:	bf00      	nop
 8011f82:	e002      	b.n	8011f8a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011f84:	bf00      	nop
 8011f86:	e000      	b.n	8011f8a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011f88:	bf00      	nop
		}
	}

	return val;
 8011f8a:	697b      	ldr	r3, [r7, #20]
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3718      	adds	r7, #24
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011f94:	b590      	push	{r4, r7, lr}
 8011f96:	b089      	sub	sp, #36	@ 0x24
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	60f8      	str	r0, [r7, #12]
 8011f9c:	60b9      	str	r1, [r7, #8]
 8011f9e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011fa0:	2302      	movs	r3, #2
 8011fa2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	f240 8109 	bls.w	80121be <put_fat+0x22a>
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6a1b      	ldr	r3, [r3, #32]
 8011fb0:	68ba      	ldr	r2, [r7, #8]
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	f080 8103 	bcs.w	80121be <put_fat+0x22a>
		switch (fs->fs_type) {
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	2b03      	cmp	r3, #3
 8011fbe:	f000 80b6 	beq.w	801212e <put_fat+0x19a>
 8011fc2:	2b03      	cmp	r3, #3
 8011fc4:	f300 80fb 	bgt.w	80121be <put_fat+0x22a>
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d003      	beq.n	8011fd4 <put_fat+0x40>
 8011fcc:	2b02      	cmp	r3, #2
 8011fce:	f000 8083 	beq.w	80120d8 <put_fat+0x144>
 8011fd2:	e0f4      	b.n	80121be <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	61bb      	str	r3, [r7, #24]
 8011fd8:	69bb      	ldr	r3, [r7, #24]
 8011fda:	085b      	lsrs	r3, r3, #1
 8011fdc:	69ba      	ldr	r2, [r7, #24]
 8011fde:	4413      	add	r3, r2
 8011fe0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	899b      	ldrh	r3, [r3, #12]
 8011fea:	4619      	mov	r1, r3
 8011fec:	69bb      	ldr	r3, [r7, #24]
 8011fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ff2:	4413      	add	r3, r2
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	68f8      	ldr	r0, [r7, #12]
 8011ff8:	f7ff fe3c 	bl	8011c74 <move_window>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012000:	7ffb      	ldrb	r3, [r7, #31]
 8012002:	2b00      	cmp	r3, #0
 8012004:	f040 80d4 	bne.w	80121b0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	1c5a      	adds	r2, r3, #1
 8012012:	61ba      	str	r2, [r7, #24]
 8012014:	68fa      	ldr	r2, [r7, #12]
 8012016:	8992      	ldrh	r2, [r2, #12]
 8012018:	fbb3 f0f2 	udiv	r0, r3, r2
 801201c:	fb00 f202 	mul.w	r2, r0, r2
 8012020:	1a9b      	subs	r3, r3, r2
 8012022:	440b      	add	r3, r1
 8012024:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	f003 0301 	and.w	r3, r3, #1
 801202c:	2b00      	cmp	r3, #0
 801202e:	d00d      	beq.n	801204c <put_fat+0xb8>
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	b25b      	sxtb	r3, r3
 8012036:	f003 030f 	and.w	r3, r3, #15
 801203a:	b25a      	sxtb	r2, r3
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	b2db      	uxtb	r3, r3
 8012040:	011b      	lsls	r3, r3, #4
 8012042:	b25b      	sxtb	r3, r3
 8012044:	4313      	orrs	r3, r2
 8012046:	b25b      	sxtb	r3, r3
 8012048:	b2db      	uxtb	r3, r3
 801204a:	e001      	b.n	8012050 <put_fat+0xbc>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	b2db      	uxtb	r3, r3
 8012050:	697a      	ldr	r2, [r7, #20]
 8012052:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	2201      	movs	r2, #1
 8012058:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	899b      	ldrh	r3, [r3, #12]
 8012062:	4619      	mov	r1, r3
 8012064:	69bb      	ldr	r3, [r7, #24]
 8012066:	fbb3 f3f1 	udiv	r3, r3, r1
 801206a:	4413      	add	r3, r2
 801206c:	4619      	mov	r1, r3
 801206e:	68f8      	ldr	r0, [r7, #12]
 8012070:	f7ff fe00 	bl	8011c74 <move_window>
 8012074:	4603      	mov	r3, r0
 8012076:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012078:	7ffb      	ldrb	r3, [r7, #31]
 801207a:	2b00      	cmp	r3, #0
 801207c:	f040 809a 	bne.w	80121b4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	899b      	ldrh	r3, [r3, #12]
 801208a:	461a      	mov	r2, r3
 801208c:	69bb      	ldr	r3, [r7, #24]
 801208e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012092:	fb00 f202 	mul.w	r2, r0, r2
 8012096:	1a9b      	subs	r3, r3, r2
 8012098:	440b      	add	r3, r1
 801209a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	f003 0301 	and.w	r3, r3, #1
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d003      	beq.n	80120ae <put_fat+0x11a>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	091b      	lsrs	r3, r3, #4
 80120aa:	b2db      	uxtb	r3, r3
 80120ac:	e00e      	b.n	80120cc <put_fat+0x138>
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	b25b      	sxtb	r3, r3
 80120b4:	f023 030f 	bic.w	r3, r3, #15
 80120b8:	b25a      	sxtb	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	0a1b      	lsrs	r3, r3, #8
 80120be:	b25b      	sxtb	r3, r3
 80120c0:	f003 030f 	and.w	r3, r3, #15
 80120c4:	b25b      	sxtb	r3, r3
 80120c6:	4313      	orrs	r3, r2
 80120c8:	b25b      	sxtb	r3, r3
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	697a      	ldr	r2, [r7, #20]
 80120ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	2201      	movs	r2, #1
 80120d4:	70da      	strb	r2, [r3, #3]
			break;
 80120d6:	e072      	b.n	80121be <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	899b      	ldrh	r3, [r3, #12]
 80120e0:	085b      	lsrs	r3, r3, #1
 80120e2:	b29b      	uxth	r3, r3
 80120e4:	4619      	mov	r1, r3
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80120ec:	4413      	add	r3, r2
 80120ee:	4619      	mov	r1, r3
 80120f0:	68f8      	ldr	r0, [r7, #12]
 80120f2:	f7ff fdbf 	bl	8011c74 <move_window>
 80120f6:	4603      	mov	r3, r0
 80120f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120fa:	7ffb      	ldrb	r3, [r7, #31]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d15b      	bne.n	80121b8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	005b      	lsls	r3, r3, #1
 801210a:	68fa      	ldr	r2, [r7, #12]
 801210c:	8992      	ldrh	r2, [r2, #12]
 801210e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012112:	fb00 f202 	mul.w	r2, r0, r2
 8012116:	1a9b      	subs	r3, r3, r2
 8012118:	440b      	add	r3, r1
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	b292      	uxth	r2, r2
 801211e:	4611      	mov	r1, r2
 8012120:	4618      	mov	r0, r3
 8012122:	f7ff fb32 	bl	801178a <st_word>
			fs->wflag = 1;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2201      	movs	r2, #1
 801212a:	70da      	strb	r2, [r3, #3]
			break;
 801212c:	e047      	b.n	80121be <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	899b      	ldrh	r3, [r3, #12]
 8012136:	089b      	lsrs	r3, r3, #2
 8012138:	b29b      	uxth	r3, r3
 801213a:	4619      	mov	r1, r3
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012142:	4413      	add	r3, r2
 8012144:	4619      	mov	r1, r3
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	f7ff fd94 	bl	8011c74 <move_window>
 801214c:	4603      	mov	r3, r0
 801214e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012150:	7ffb      	ldrb	r3, [r7, #31]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d132      	bne.n	80121bc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	009b      	lsls	r3, r3, #2
 8012166:	68fa      	ldr	r2, [r7, #12]
 8012168:	8992      	ldrh	r2, [r2, #12]
 801216a:	fbb3 f0f2 	udiv	r0, r3, r2
 801216e:	fb00 f202 	mul.w	r2, r0, r2
 8012172:	1a9b      	subs	r3, r3, r2
 8012174:	440b      	add	r3, r1
 8012176:	4618      	mov	r0, r3
 8012178:	f7ff fae4 	bl	8011744 <ld_dword>
 801217c:	4603      	mov	r3, r0
 801217e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012182:	4323      	orrs	r3, r4
 8012184:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	68fa      	ldr	r2, [r7, #12]
 8012192:	8992      	ldrh	r2, [r2, #12]
 8012194:	fbb3 f0f2 	udiv	r0, r3, r2
 8012198:	fb00 f202 	mul.w	r2, r0, r2
 801219c:	1a9b      	subs	r3, r3, r2
 801219e:	440b      	add	r3, r1
 80121a0:	6879      	ldr	r1, [r7, #4]
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7ff fb0c 	bl	80117c0 <st_dword>
			fs->wflag = 1;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2201      	movs	r2, #1
 80121ac:	70da      	strb	r2, [r3, #3]
			break;
 80121ae:	e006      	b.n	80121be <put_fat+0x22a>
			if (res != FR_OK) break;
 80121b0:	bf00      	nop
 80121b2:	e004      	b.n	80121be <put_fat+0x22a>
			if (res != FR_OK) break;
 80121b4:	bf00      	nop
 80121b6:	e002      	b.n	80121be <put_fat+0x22a>
			if (res != FR_OK) break;
 80121b8:	bf00      	nop
 80121ba:	e000      	b.n	80121be <put_fat+0x22a>
			if (res != FR_OK) break;
 80121bc:	bf00      	nop
		}
	}
	return res;
 80121be:	7ffb      	ldrb	r3, [r7, #31]
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3724      	adds	r7, #36	@ 0x24
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd90      	pop	{r4, r7, pc}

080121c8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b088      	sub	sp, #32
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80121d4:	2300      	movs	r3, #0
 80121d6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d904      	bls.n	80121ee <remove_chain+0x26>
 80121e4:	69bb      	ldr	r3, [r7, #24]
 80121e6:	6a1b      	ldr	r3, [r3, #32]
 80121e8:	68ba      	ldr	r2, [r7, #8]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d301      	bcc.n	80121f2 <remove_chain+0x2a>
 80121ee:	2302      	movs	r3, #2
 80121f0:	e04b      	b.n	801228a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d00c      	beq.n	8012212 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80121f8:	f04f 32ff 	mov.w	r2, #4294967295
 80121fc:	6879      	ldr	r1, [r7, #4]
 80121fe:	69b8      	ldr	r0, [r7, #24]
 8012200:	f7ff fec8 	bl	8011f94 <put_fat>
 8012204:	4603      	mov	r3, r0
 8012206:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012208:	7ffb      	ldrb	r3, [r7, #31]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d001      	beq.n	8012212 <remove_chain+0x4a>
 801220e:	7ffb      	ldrb	r3, [r7, #31]
 8012210:	e03b      	b.n	801228a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012212:	68b9      	ldr	r1, [r7, #8]
 8012214:	68f8      	ldr	r0, [r7, #12]
 8012216:	f7ff fdea 	bl	8011dee <get_fat>
 801221a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d031      	beq.n	8012286 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	2b01      	cmp	r3, #1
 8012226:	d101      	bne.n	801222c <remove_chain+0x64>
 8012228:	2302      	movs	r3, #2
 801222a:	e02e      	b.n	801228a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012232:	d101      	bne.n	8012238 <remove_chain+0x70>
 8012234:	2301      	movs	r3, #1
 8012236:	e028      	b.n	801228a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012238:	2200      	movs	r2, #0
 801223a:	68b9      	ldr	r1, [r7, #8]
 801223c:	69b8      	ldr	r0, [r7, #24]
 801223e:	f7ff fea9 	bl	8011f94 <put_fat>
 8012242:	4603      	mov	r3, r0
 8012244:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012246:	7ffb      	ldrb	r3, [r7, #31]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d001      	beq.n	8012250 <remove_chain+0x88>
 801224c:	7ffb      	ldrb	r3, [r7, #31]
 801224e:	e01c      	b.n	801228a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	699a      	ldr	r2, [r3, #24]
 8012254:	69bb      	ldr	r3, [r7, #24]
 8012256:	6a1b      	ldr	r3, [r3, #32]
 8012258:	3b02      	subs	r3, #2
 801225a:	429a      	cmp	r2, r3
 801225c:	d20b      	bcs.n	8012276 <remove_chain+0xae>
			fs->free_clst++;
 801225e:	69bb      	ldr	r3, [r7, #24]
 8012260:	699b      	ldr	r3, [r3, #24]
 8012262:	1c5a      	adds	r2, r3, #1
 8012264:	69bb      	ldr	r3, [r7, #24]
 8012266:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8012268:	69bb      	ldr	r3, [r7, #24]
 801226a:	791b      	ldrb	r3, [r3, #4]
 801226c:	f043 0301 	orr.w	r3, r3, #1
 8012270:	b2da      	uxtb	r2, r3
 8012272:	69bb      	ldr	r3, [r7, #24]
 8012274:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801227a:	69bb      	ldr	r3, [r7, #24]
 801227c:	6a1b      	ldr	r3, [r3, #32]
 801227e:	68ba      	ldr	r2, [r7, #8]
 8012280:	429a      	cmp	r2, r3
 8012282:	d3c6      	bcc.n	8012212 <remove_chain+0x4a>
 8012284:	e000      	b.n	8012288 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012286:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012288:	2300      	movs	r3, #0
}
 801228a:	4618      	mov	r0, r3
 801228c:	3720      	adds	r7, #32
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012292:	b580      	push	{r7, lr}
 8012294:	b088      	sub	sp, #32
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
 801229a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d10d      	bne.n	80122c4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	695b      	ldr	r3, [r3, #20]
 80122ac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d004      	beq.n	80122be <create_chain+0x2c>
 80122b4:	693b      	ldr	r3, [r7, #16]
 80122b6:	6a1b      	ldr	r3, [r3, #32]
 80122b8:	69ba      	ldr	r2, [r7, #24]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d31b      	bcc.n	80122f6 <create_chain+0x64>
 80122be:	2301      	movs	r3, #1
 80122c0:	61bb      	str	r3, [r7, #24]
 80122c2:	e018      	b.n	80122f6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80122c4:	6839      	ldr	r1, [r7, #0]
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f7ff fd91 	bl	8011dee <get_fat>
 80122cc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d801      	bhi.n	80122d8 <create_chain+0x46>
 80122d4:	2301      	movs	r3, #1
 80122d6:	e070      	b.n	80123ba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122de:	d101      	bne.n	80122e4 <create_chain+0x52>
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	e06a      	b.n	80123ba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80122e4:	693b      	ldr	r3, [r7, #16]
 80122e6:	6a1b      	ldr	r3, [r3, #32]
 80122e8:	68fa      	ldr	r2, [r7, #12]
 80122ea:	429a      	cmp	r2, r3
 80122ec:	d201      	bcs.n	80122f2 <create_chain+0x60>
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	e063      	b.n	80123ba <create_chain+0x128>
		scl = clst;
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80122f6:	69bb      	ldr	r3, [r7, #24]
 80122f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80122fa:	69fb      	ldr	r3, [r7, #28]
 80122fc:	3301      	adds	r3, #1
 80122fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	6a1b      	ldr	r3, [r3, #32]
 8012304:	69fa      	ldr	r2, [r7, #28]
 8012306:	429a      	cmp	r2, r3
 8012308:	d307      	bcc.n	801231a <create_chain+0x88>
				ncl = 2;
 801230a:	2302      	movs	r3, #2
 801230c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801230e:	69fa      	ldr	r2, [r7, #28]
 8012310:	69bb      	ldr	r3, [r7, #24]
 8012312:	429a      	cmp	r2, r3
 8012314:	d901      	bls.n	801231a <create_chain+0x88>
 8012316:	2300      	movs	r3, #0
 8012318:	e04f      	b.n	80123ba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801231a:	69f9      	ldr	r1, [r7, #28]
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f7ff fd66 	bl	8011dee <get_fat>
 8012322:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d00e      	beq.n	8012348 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	2b01      	cmp	r3, #1
 801232e:	d003      	beq.n	8012338 <create_chain+0xa6>
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012336:	d101      	bne.n	801233c <create_chain+0xaa>
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	e03e      	b.n	80123ba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801233c:	69fa      	ldr	r2, [r7, #28]
 801233e:	69bb      	ldr	r3, [r7, #24]
 8012340:	429a      	cmp	r2, r3
 8012342:	d1da      	bne.n	80122fa <create_chain+0x68>
 8012344:	2300      	movs	r3, #0
 8012346:	e038      	b.n	80123ba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012348:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801234a:	f04f 32ff 	mov.w	r2, #4294967295
 801234e:	69f9      	ldr	r1, [r7, #28]
 8012350:	6938      	ldr	r0, [r7, #16]
 8012352:	f7ff fe1f 	bl	8011f94 <put_fat>
 8012356:	4603      	mov	r3, r0
 8012358:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801235a:	7dfb      	ldrb	r3, [r7, #23]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d109      	bne.n	8012374 <create_chain+0xe2>
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d006      	beq.n	8012374 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012366:	69fa      	ldr	r2, [r7, #28]
 8012368:	6839      	ldr	r1, [r7, #0]
 801236a:	6938      	ldr	r0, [r7, #16]
 801236c:	f7ff fe12 	bl	8011f94 <put_fat>
 8012370:	4603      	mov	r3, r0
 8012372:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012374:	7dfb      	ldrb	r3, [r7, #23]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d116      	bne.n	80123a8 <create_chain+0x116>
		fs->last_clst = ncl;
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	69fa      	ldr	r2, [r7, #28]
 801237e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	699a      	ldr	r2, [r3, #24]
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	6a1b      	ldr	r3, [r3, #32]
 8012388:	3b02      	subs	r3, #2
 801238a:	429a      	cmp	r2, r3
 801238c:	d804      	bhi.n	8012398 <create_chain+0x106>
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	699b      	ldr	r3, [r3, #24]
 8012392:	1e5a      	subs	r2, r3, #1
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	791b      	ldrb	r3, [r3, #4]
 801239c:	f043 0301 	orr.w	r3, r3, #1
 80123a0:	b2da      	uxtb	r2, r3
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	711a      	strb	r2, [r3, #4]
 80123a6:	e007      	b.n	80123b8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80123a8:	7dfb      	ldrb	r3, [r7, #23]
 80123aa:	2b01      	cmp	r3, #1
 80123ac:	d102      	bne.n	80123b4 <create_chain+0x122>
 80123ae:	f04f 33ff 	mov.w	r3, #4294967295
 80123b2:	e000      	b.n	80123b6 <create_chain+0x124>
 80123b4:	2301      	movs	r3, #1
 80123b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80123b8:	69fb      	ldr	r3, [r7, #28]
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3720      	adds	r7, #32
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}

080123c2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80123c2:	b480      	push	{r7}
 80123c4:	b087      	sub	sp, #28
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
 80123ca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123d6:	3304      	adds	r3, #4
 80123d8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	899b      	ldrh	r3, [r3, #12]
 80123de:	461a      	mov	r2, r3
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	8952      	ldrh	r2, [r2, #10]
 80123ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80123ee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	1d1a      	adds	r2, r3, #4
 80123f4:	613a      	str	r2, [r7, #16]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d101      	bne.n	8012404 <clmt_clust+0x42>
 8012400:	2300      	movs	r3, #0
 8012402:	e010      	b.n	8012426 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012404:	697a      	ldr	r2, [r7, #20]
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	429a      	cmp	r2, r3
 801240a:	d307      	bcc.n	801241c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801240c:	697a      	ldr	r2, [r7, #20]
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	1ad3      	subs	r3, r2, r3
 8012412:	617b      	str	r3, [r7, #20]
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	3304      	adds	r3, #4
 8012418:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801241a:	e7e9      	b.n	80123f0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801241c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	4413      	add	r3, r2
}
 8012426:	4618      	mov	r0, r3
 8012428:	371c      	adds	r7, #28
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr

08012432 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012432:	b580      	push	{r7, lr}
 8012434:	b086      	sub	sp, #24
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
 801243a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012448:	d204      	bcs.n	8012454 <dir_sdi+0x22>
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	f003 031f 	and.w	r3, r3, #31
 8012450:	2b00      	cmp	r3, #0
 8012452:	d001      	beq.n	8012458 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012454:	2302      	movs	r3, #2
 8012456:	e071      	b.n	801253c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	683a      	ldr	r2, [r7, #0]
 801245c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	689b      	ldr	r3, [r3, #8]
 8012462:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d106      	bne.n	8012478 <dir_sdi+0x46>
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	781b      	ldrb	r3, [r3, #0]
 801246e:	2b02      	cmp	r3, #2
 8012470:	d902      	bls.n	8012478 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012476:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d10c      	bne.n	8012498 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	095b      	lsrs	r3, r3, #5
 8012482:	693a      	ldr	r2, [r7, #16]
 8012484:	8912      	ldrh	r2, [r2, #8]
 8012486:	4293      	cmp	r3, r2
 8012488:	d301      	bcc.n	801248e <dir_sdi+0x5c>
 801248a:	2302      	movs	r3, #2
 801248c:	e056      	b.n	801253c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	61da      	str	r2, [r3, #28]
 8012496:	e02d      	b.n	80124f4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	895b      	ldrh	r3, [r3, #10]
 801249c:	461a      	mov	r2, r3
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	899b      	ldrh	r3, [r3, #12]
 80124a2:	fb02 f303 	mul.w	r3, r2, r3
 80124a6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80124a8:	e019      	b.n	80124de <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6979      	ldr	r1, [r7, #20]
 80124ae:	4618      	mov	r0, r3
 80124b0:	f7ff fc9d 	bl	8011dee <get_fat>
 80124b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124bc:	d101      	bne.n	80124c2 <dir_sdi+0x90>
 80124be:	2301      	movs	r3, #1
 80124c0:	e03c      	b.n	801253c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d904      	bls.n	80124d2 <dir_sdi+0xa0>
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	6a1b      	ldr	r3, [r3, #32]
 80124cc:	697a      	ldr	r2, [r7, #20]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d301      	bcc.n	80124d6 <dir_sdi+0xa4>
 80124d2:	2302      	movs	r3, #2
 80124d4:	e032      	b.n	801253c <dir_sdi+0x10a>
			ofs -= csz;
 80124d6:	683a      	ldr	r2, [r7, #0]
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80124de:	683a      	ldr	r2, [r7, #0]
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d2e1      	bcs.n	80124aa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80124e6:	6979      	ldr	r1, [r7, #20]
 80124e8:	6938      	ldr	r0, [r7, #16]
 80124ea:	f7ff fc61 	bl	8011db0 <clust2sect>
 80124ee:	4602      	mov	r2, r0
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	697a      	ldr	r2, [r7, #20]
 80124f8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	69db      	ldr	r3, [r3, #28]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d101      	bne.n	8012506 <dir_sdi+0xd4>
 8012502:	2302      	movs	r3, #2
 8012504:	e01a      	b.n	801253c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	69da      	ldr	r2, [r3, #28]
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	899b      	ldrh	r3, [r3, #12]
 801250e:	4619      	mov	r1, r3
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	fbb3 f3f1 	udiv	r3, r3, r1
 8012516:	441a      	add	r2, r3
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	899b      	ldrh	r3, [r3, #12]
 8012526:	461a      	mov	r2, r3
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	fbb3 f0f2 	udiv	r0, r3, r2
 801252e:	fb00 f202 	mul.w	r2, r0, r2
 8012532:	1a9b      	subs	r3, r3, r2
 8012534:	18ca      	adds	r2, r1, r3
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801253a:	2300      	movs	r3, #0
}
 801253c:	4618      	mov	r0, r3
 801253e:	3718      	adds	r7, #24
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	695b      	ldr	r3, [r3, #20]
 8012558:	3320      	adds	r3, #32
 801255a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	69db      	ldr	r3, [r3, #28]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d003      	beq.n	801256c <dir_next+0x28>
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801256a:	d301      	bcc.n	8012570 <dir_next+0x2c>
 801256c:	2304      	movs	r3, #4
 801256e:	e0bb      	b.n	80126e8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	899b      	ldrh	r3, [r3, #12]
 8012574:	461a      	mov	r2, r3
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	fbb3 f1f2 	udiv	r1, r3, r2
 801257c:	fb01 f202 	mul.w	r2, r1, r2
 8012580:	1a9b      	subs	r3, r3, r2
 8012582:	2b00      	cmp	r3, #0
 8012584:	f040 809d 	bne.w	80126c2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	69db      	ldr	r3, [r3, #28]
 801258c:	1c5a      	adds	r2, r3, #1
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	699b      	ldr	r3, [r3, #24]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d10b      	bne.n	80125b2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	095b      	lsrs	r3, r3, #5
 801259e:	68fa      	ldr	r2, [r7, #12]
 80125a0:	8912      	ldrh	r2, [r2, #8]
 80125a2:	4293      	cmp	r3, r2
 80125a4:	f0c0 808d 	bcc.w	80126c2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2200      	movs	r2, #0
 80125ac:	61da      	str	r2, [r3, #28]
 80125ae:	2304      	movs	r3, #4
 80125b0:	e09a      	b.n	80126e8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	899b      	ldrh	r3, [r3, #12]
 80125b6:	461a      	mov	r2, r3
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80125be:	68fa      	ldr	r2, [r7, #12]
 80125c0:	8952      	ldrh	r2, [r2, #10]
 80125c2:	3a01      	subs	r2, #1
 80125c4:	4013      	ands	r3, r2
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d17b      	bne.n	80126c2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80125ca:	687a      	ldr	r2, [r7, #4]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	699b      	ldr	r3, [r3, #24]
 80125d0:	4619      	mov	r1, r3
 80125d2:	4610      	mov	r0, r2
 80125d4:	f7ff fc0b 	bl	8011dee <get_fat>
 80125d8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	2b01      	cmp	r3, #1
 80125de:	d801      	bhi.n	80125e4 <dir_next+0xa0>
 80125e0:	2302      	movs	r3, #2
 80125e2:	e081      	b.n	80126e8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125ea:	d101      	bne.n	80125f0 <dir_next+0xac>
 80125ec:	2301      	movs	r3, #1
 80125ee:	e07b      	b.n	80126e8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	6a1b      	ldr	r3, [r3, #32]
 80125f4:	697a      	ldr	r2, [r7, #20]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d359      	bcc.n	80126ae <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d104      	bne.n	801260a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2200      	movs	r2, #0
 8012604:	61da      	str	r2, [r3, #28]
 8012606:	2304      	movs	r3, #4
 8012608:	e06e      	b.n	80126e8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801260a:	687a      	ldr	r2, [r7, #4]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	699b      	ldr	r3, [r3, #24]
 8012610:	4619      	mov	r1, r3
 8012612:	4610      	mov	r0, r2
 8012614:	f7ff fe3d 	bl	8012292 <create_chain>
 8012618:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d101      	bne.n	8012624 <dir_next+0xe0>
 8012620:	2307      	movs	r3, #7
 8012622:	e061      	b.n	80126e8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	2b01      	cmp	r3, #1
 8012628:	d101      	bne.n	801262e <dir_next+0xea>
 801262a:	2302      	movs	r3, #2
 801262c:	e05c      	b.n	80126e8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012634:	d101      	bne.n	801263a <dir_next+0xf6>
 8012636:	2301      	movs	r3, #1
 8012638:	e056      	b.n	80126e8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801263a:	68f8      	ldr	r0, [r7, #12]
 801263c:	f7ff fad6 	bl	8011bec <sync_window>
 8012640:	4603      	mov	r3, r0
 8012642:	2b00      	cmp	r3, #0
 8012644:	d001      	beq.n	801264a <dir_next+0x106>
 8012646:	2301      	movs	r3, #1
 8012648:	e04e      	b.n	80126e8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	899b      	ldrh	r3, [r3, #12]
 8012654:	461a      	mov	r2, r3
 8012656:	2100      	movs	r1, #0
 8012658:	f7ff f8ff 	bl	801185a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801265c:	2300      	movs	r3, #0
 801265e:	613b      	str	r3, [r7, #16]
 8012660:	6979      	ldr	r1, [r7, #20]
 8012662:	68f8      	ldr	r0, [r7, #12]
 8012664:	f7ff fba4 	bl	8011db0 <clust2sect>
 8012668:	4602      	mov	r2, r0
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	639a      	str	r2, [r3, #56]	@ 0x38
 801266e:	e012      	b.n	8012696 <dir_next+0x152>
						fs->wflag = 1;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	2201      	movs	r2, #1
 8012674:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f7ff fab8 	bl	8011bec <sync_window>
 801267c:	4603      	mov	r3, r0
 801267e:	2b00      	cmp	r3, #0
 8012680:	d001      	beq.n	8012686 <dir_next+0x142>
 8012682:	2301      	movs	r3, #1
 8012684:	e030      	b.n	80126e8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	3301      	adds	r3, #1
 801268a:	613b      	str	r3, [r7, #16]
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012690:	1c5a      	adds	r2, r3, #1
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	639a      	str	r2, [r3, #56]	@ 0x38
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	895b      	ldrh	r3, [r3, #10]
 801269a:	461a      	mov	r2, r3
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	4293      	cmp	r3, r2
 80126a0:	d3e6      	bcc.n	8012670 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	1ad2      	subs	r2, r2, r3
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	697a      	ldr	r2, [r7, #20]
 80126b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80126b4:	6979      	ldr	r1, [r7, #20]
 80126b6:	68f8      	ldr	r0, [r7, #12]
 80126b8:	f7ff fb7a 	bl	8011db0 <clust2sect>
 80126bc:	4602      	mov	r2, r0
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	68ba      	ldr	r2, [r7, #8]
 80126c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	899b      	ldrh	r3, [r3, #12]
 80126d2:	461a      	mov	r2, r3
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80126da:	fb00 f202 	mul.w	r2, r0, r2
 80126de:	1a9b      	subs	r3, r3, r2
 80126e0:	18ca      	adds	r2, r1, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80126e6:	2300      	movs	r3, #0
}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3718      	adds	r7, #24
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b086      	sub	sp, #24
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012700:	2100      	movs	r1, #0
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f7ff fe95 	bl	8012432 <dir_sdi>
 8012708:	4603      	mov	r3, r0
 801270a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801270c:	7dfb      	ldrb	r3, [r7, #23]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d12b      	bne.n	801276a <dir_alloc+0x7a>
		n = 0;
 8012712:	2300      	movs	r3, #0
 8012714:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	69db      	ldr	r3, [r3, #28]
 801271a:	4619      	mov	r1, r3
 801271c:	68f8      	ldr	r0, [r7, #12]
 801271e:	f7ff faa9 	bl	8011c74 <move_window>
 8012722:	4603      	mov	r3, r0
 8012724:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012726:	7dfb      	ldrb	r3, [r7, #23]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d11d      	bne.n	8012768 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	6a1b      	ldr	r3, [r3, #32]
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	2be5      	cmp	r3, #229	@ 0xe5
 8012734:	d004      	beq.n	8012740 <dir_alloc+0x50>
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6a1b      	ldr	r3, [r3, #32]
 801273a:	781b      	ldrb	r3, [r3, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d107      	bne.n	8012750 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	3301      	adds	r3, #1
 8012744:	613b      	str	r3, [r7, #16]
 8012746:	693a      	ldr	r2, [r7, #16]
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	429a      	cmp	r2, r3
 801274c:	d102      	bne.n	8012754 <dir_alloc+0x64>
 801274e:	e00c      	b.n	801276a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012750:	2300      	movs	r3, #0
 8012752:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012754:	2101      	movs	r1, #1
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f7ff fef4 	bl	8012544 <dir_next>
 801275c:	4603      	mov	r3, r0
 801275e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012760:	7dfb      	ldrb	r3, [r7, #23]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d0d7      	beq.n	8012716 <dir_alloc+0x26>
 8012766:	e000      	b.n	801276a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012768:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801276a:	7dfb      	ldrb	r3, [r7, #23]
 801276c:	2b04      	cmp	r3, #4
 801276e:	d101      	bne.n	8012774 <dir_alloc+0x84>
 8012770:	2307      	movs	r3, #7
 8012772:	75fb      	strb	r3, [r7, #23]
	return res;
 8012774:	7dfb      	ldrb	r3, [r7, #23]
}
 8012776:	4618      	mov	r0, r3
 8012778:	3718      	adds	r7, #24
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}

0801277e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801277e:	b580      	push	{r7, lr}
 8012780:	b084      	sub	sp, #16
 8012782:	af00      	add	r7, sp, #0
 8012784:	6078      	str	r0, [r7, #4]
 8012786:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	331a      	adds	r3, #26
 801278c:	4618      	mov	r0, r3
 801278e:	f7fe ffc1 	bl	8011714 <ld_word>
 8012792:	4603      	mov	r3, r0
 8012794:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	2b03      	cmp	r3, #3
 801279c:	d109      	bne.n	80127b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	3314      	adds	r3, #20
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7fe ffb6 	bl	8011714 <ld_word>
 80127a8:	4603      	mov	r3, r0
 80127aa:	041b      	lsls	r3, r3, #16
 80127ac:	68fa      	ldr	r2, [r7, #12]
 80127ae:	4313      	orrs	r3, r2
 80127b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80127b2:	68fb      	ldr	r3, [r7, #12]
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	3710      	adds	r7, #16
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b084      	sub	sp, #16
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	60f8      	str	r0, [r7, #12]
 80127c4:	60b9      	str	r1, [r7, #8]
 80127c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	331a      	adds	r3, #26
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	b292      	uxth	r2, r2
 80127d0:	4611      	mov	r1, r2
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fe ffd9 	bl	801178a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	2b03      	cmp	r3, #3
 80127de:	d109      	bne.n	80127f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	f103 0214 	add.w	r2, r3, #20
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	0c1b      	lsrs	r3, r3, #16
 80127ea:	b29b      	uxth	r3, r3
 80127ec:	4619      	mov	r1, r3
 80127ee:	4610      	mov	r0, r2
 80127f0:	f7fe ffcb 	bl	801178a <st_word>
	}
}
 80127f4:	bf00      	nop
 80127f6:	3710      	adds	r7, #16
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}

080127fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80127fc:	b590      	push	{r4, r7, lr}
 80127fe:	b087      	sub	sp, #28
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	331a      	adds	r3, #26
 801280a:	4618      	mov	r0, r3
 801280c:	f7fe ff82 	bl	8011714 <ld_word>
 8012810:	4603      	mov	r3, r0
 8012812:	2b00      	cmp	r3, #0
 8012814:	d001      	beq.n	801281a <cmp_lfn+0x1e>
 8012816:	2300      	movs	r3, #0
 8012818:	e059      	b.n	80128ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012822:	1e5a      	subs	r2, r3, #1
 8012824:	4613      	mov	r3, r2
 8012826:	005b      	lsls	r3, r3, #1
 8012828:	4413      	add	r3, r2
 801282a:	009b      	lsls	r3, r3, #2
 801282c:	4413      	add	r3, r2
 801282e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012830:	2301      	movs	r3, #1
 8012832:	81fb      	strh	r3, [r7, #14]
 8012834:	2300      	movs	r3, #0
 8012836:	613b      	str	r3, [r7, #16]
 8012838:	e033      	b.n	80128a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801283a:	4a27      	ldr	r2, [pc, #156]	@ (80128d8 <cmp_lfn+0xdc>)
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	4413      	add	r3, r2
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	461a      	mov	r2, r3
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	4413      	add	r3, r2
 8012848:	4618      	mov	r0, r3
 801284a:	f7fe ff63 	bl	8011714 <ld_word>
 801284e:	4603      	mov	r3, r0
 8012850:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012852:	89fb      	ldrh	r3, [r7, #14]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d01a      	beq.n	801288e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	2bfe      	cmp	r3, #254	@ 0xfe
 801285c:	d812      	bhi.n	8012884 <cmp_lfn+0x88>
 801285e:	89bb      	ldrh	r3, [r7, #12]
 8012860:	4618      	mov	r0, r3
 8012862:	f002 ff73 	bl	801574c <ff_wtoupper>
 8012866:	4603      	mov	r3, r0
 8012868:	461c      	mov	r4, r3
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	1c5a      	adds	r2, r3, #1
 801286e:	617a      	str	r2, [r7, #20]
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	4413      	add	r3, r2
 8012876:	881b      	ldrh	r3, [r3, #0]
 8012878:	4618      	mov	r0, r3
 801287a:	f002 ff67 	bl	801574c <ff_wtoupper>
 801287e:	4603      	mov	r3, r0
 8012880:	429c      	cmp	r4, r3
 8012882:	d001      	beq.n	8012888 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012884:	2300      	movs	r3, #0
 8012886:	e022      	b.n	80128ce <cmp_lfn+0xd2>
			}
			wc = uc;
 8012888:	89bb      	ldrh	r3, [r7, #12]
 801288a:	81fb      	strh	r3, [r7, #14]
 801288c:	e006      	b.n	801289c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801288e:	89bb      	ldrh	r3, [r7, #12]
 8012890:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012894:	4293      	cmp	r3, r2
 8012896:	d001      	beq.n	801289c <cmp_lfn+0xa0>
 8012898:	2300      	movs	r3, #0
 801289a:	e018      	b.n	80128ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	3301      	adds	r3, #1
 80128a0:	613b      	str	r3, [r7, #16]
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	2b0c      	cmp	r3, #12
 80128a6:	d9c8      	bls.n	801283a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d00b      	beq.n	80128cc <cmp_lfn+0xd0>
 80128b4:	89fb      	ldrh	r3, [r7, #14]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d008      	beq.n	80128cc <cmp_lfn+0xd0>
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	005b      	lsls	r3, r3, #1
 80128be:	687a      	ldr	r2, [r7, #4]
 80128c0:	4413      	add	r3, r2
 80128c2:	881b      	ldrh	r3, [r3, #0]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d001      	beq.n	80128cc <cmp_lfn+0xd0>
 80128c8:	2300      	movs	r3, #0
 80128ca:	e000      	b.n	80128ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80128cc:	2301      	movs	r3, #1
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	371c      	adds	r7, #28
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd90      	pop	{r4, r7, pc}
 80128d6:	bf00      	nop
 80128d8:	080188ec 	.word	0x080188ec

080128dc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b086      	sub	sp, #24
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	331a      	adds	r3, #26
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7fe ff12 	bl	8011714 <ld_word>
 80128f0:	4603      	mov	r3, r0
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d001      	beq.n	80128fa <pick_lfn+0x1e>
 80128f6:	2300      	movs	r3, #0
 80128f8:	e04d      	b.n	8012996 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012902:	1e5a      	subs	r2, r3, #1
 8012904:	4613      	mov	r3, r2
 8012906:	005b      	lsls	r3, r3, #1
 8012908:	4413      	add	r3, r2
 801290a:	009b      	lsls	r3, r3, #2
 801290c:	4413      	add	r3, r2
 801290e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012910:	2301      	movs	r3, #1
 8012912:	81fb      	strh	r3, [r7, #14]
 8012914:	2300      	movs	r3, #0
 8012916:	613b      	str	r3, [r7, #16]
 8012918:	e028      	b.n	801296c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801291a:	4a21      	ldr	r2, [pc, #132]	@ (80129a0 <pick_lfn+0xc4>)
 801291c:	693b      	ldr	r3, [r7, #16]
 801291e:	4413      	add	r3, r2
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	461a      	mov	r2, r3
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	4413      	add	r3, r2
 8012928:	4618      	mov	r0, r3
 801292a:	f7fe fef3 	bl	8011714 <ld_word>
 801292e:	4603      	mov	r3, r0
 8012930:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012932:	89fb      	ldrh	r3, [r7, #14]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d00f      	beq.n	8012958 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	2bfe      	cmp	r3, #254	@ 0xfe
 801293c:	d901      	bls.n	8012942 <pick_lfn+0x66>
 801293e:	2300      	movs	r3, #0
 8012940:	e029      	b.n	8012996 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012942:	89bb      	ldrh	r3, [r7, #12]
 8012944:	81fb      	strh	r3, [r7, #14]
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	1c5a      	adds	r2, r3, #1
 801294a:	617a      	str	r2, [r7, #20]
 801294c:	005b      	lsls	r3, r3, #1
 801294e:	687a      	ldr	r2, [r7, #4]
 8012950:	4413      	add	r3, r2
 8012952:	89fa      	ldrh	r2, [r7, #14]
 8012954:	801a      	strh	r2, [r3, #0]
 8012956:	e006      	b.n	8012966 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012958:	89bb      	ldrh	r3, [r7, #12]
 801295a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801295e:	4293      	cmp	r3, r2
 8012960:	d001      	beq.n	8012966 <pick_lfn+0x8a>
 8012962:	2300      	movs	r3, #0
 8012964:	e017      	b.n	8012996 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	3301      	adds	r3, #1
 801296a:	613b      	str	r3, [r7, #16]
 801296c:	693b      	ldr	r3, [r7, #16]
 801296e:	2b0c      	cmp	r3, #12
 8012970:	d9d3      	bls.n	801291a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801297a:	2b00      	cmp	r3, #0
 801297c:	d00a      	beq.n	8012994 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	2bfe      	cmp	r3, #254	@ 0xfe
 8012982:	d901      	bls.n	8012988 <pick_lfn+0xac>
 8012984:	2300      	movs	r3, #0
 8012986:	e006      	b.n	8012996 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	005b      	lsls	r3, r3, #1
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	4413      	add	r3, r2
 8012990:	2200      	movs	r2, #0
 8012992:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8012994:	2301      	movs	r3, #1
}
 8012996:	4618      	mov	r0, r3
 8012998:	3718      	adds	r7, #24
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	080188ec 	.word	0x080188ec

080129a4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b088      	sub	sp, #32
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	60f8      	str	r0, [r7, #12]
 80129ac:	60b9      	str	r1, [r7, #8]
 80129ae:	4611      	mov	r1, r2
 80129b0:	461a      	mov	r2, r3
 80129b2:	460b      	mov	r3, r1
 80129b4:	71fb      	strb	r3, [r7, #7]
 80129b6:	4613      	mov	r3, r2
 80129b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	330d      	adds	r3, #13
 80129be:	79ba      	ldrb	r2, [r7, #6]
 80129c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	330b      	adds	r3, #11
 80129c6:	220f      	movs	r2, #15
 80129c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	330c      	adds	r3, #12
 80129ce:	2200      	movs	r2, #0
 80129d0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	331a      	adds	r3, #26
 80129d6:	2100      	movs	r1, #0
 80129d8:	4618      	mov	r0, r3
 80129da:	f7fe fed6 	bl	801178a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80129de:	79fb      	ldrb	r3, [r7, #7]
 80129e0:	1e5a      	subs	r2, r3, #1
 80129e2:	4613      	mov	r3, r2
 80129e4:	005b      	lsls	r3, r3, #1
 80129e6:	4413      	add	r3, r2
 80129e8:	009b      	lsls	r3, r3, #2
 80129ea:	4413      	add	r3, r2
 80129ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80129ee:	2300      	movs	r3, #0
 80129f0:	82fb      	strh	r3, [r7, #22]
 80129f2:	2300      	movs	r3, #0
 80129f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80129f6:	8afb      	ldrh	r3, [r7, #22]
 80129f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80129fc:	4293      	cmp	r3, r2
 80129fe:	d007      	beq.n	8012a10 <put_lfn+0x6c>
 8012a00:	69fb      	ldr	r3, [r7, #28]
 8012a02:	1c5a      	adds	r2, r3, #1
 8012a04:	61fa      	str	r2, [r7, #28]
 8012a06:	005b      	lsls	r3, r3, #1
 8012a08:	68fa      	ldr	r2, [r7, #12]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	881b      	ldrh	r3, [r3, #0]
 8012a0e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012a10:	4a17      	ldr	r2, [pc, #92]	@ (8012a70 <put_lfn+0xcc>)
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	4413      	add	r3, r2
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	461a      	mov	r2, r3
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	4413      	add	r3, r2
 8012a1e:	8afa      	ldrh	r2, [r7, #22]
 8012a20:	4611      	mov	r1, r2
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7fe feb1 	bl	801178a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012a28:	8afb      	ldrh	r3, [r7, #22]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d102      	bne.n	8012a34 <put_lfn+0x90>
 8012a2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012a32:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012a34:	69bb      	ldr	r3, [r7, #24]
 8012a36:	3301      	adds	r3, #1
 8012a38:	61bb      	str	r3, [r7, #24]
 8012a3a:	69bb      	ldr	r3, [r7, #24]
 8012a3c:	2b0c      	cmp	r3, #12
 8012a3e:	d9da      	bls.n	80129f6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012a40:	8afb      	ldrh	r3, [r7, #22]
 8012a42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012a46:	4293      	cmp	r3, r2
 8012a48:	d006      	beq.n	8012a58 <put_lfn+0xb4>
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	005b      	lsls	r3, r3, #1
 8012a4e:	68fa      	ldr	r2, [r7, #12]
 8012a50:	4413      	add	r3, r2
 8012a52:	881b      	ldrh	r3, [r3, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d103      	bne.n	8012a60 <put_lfn+0xbc>
 8012a58:	79fb      	ldrb	r3, [r7, #7]
 8012a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a5e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	79fa      	ldrb	r2, [r7, #7]
 8012a64:	701a      	strb	r2, [r3, #0]
}
 8012a66:	bf00      	nop
 8012a68:	3720      	adds	r7, #32
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	080188ec 	.word	0x080188ec

08012a74 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b08c      	sub	sp, #48	@ 0x30
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	60f8      	str	r0, [r7, #12]
 8012a7c:	60b9      	str	r1, [r7, #8]
 8012a7e:	607a      	str	r2, [r7, #4]
 8012a80:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012a82:	220b      	movs	r2, #11
 8012a84:	68b9      	ldr	r1, [r7, #8]
 8012a86:	68f8      	ldr	r0, [r7, #12]
 8012a88:	f7fe fec6 	bl	8011818 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	2b05      	cmp	r3, #5
 8012a90:	d929      	bls.n	8012ae6 <gen_numname+0x72>
		sr = seq;
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012a96:	e020      	b.n	8012ada <gen_numname+0x66>
			wc = *lfn++;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	1c9a      	adds	r2, r3, #2
 8012a9c:	607a      	str	r2, [r7, #4]
 8012a9e:	881b      	ldrh	r3, [r3, #0]
 8012aa0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012aa6:	e015      	b.n	8012ad4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8012aa8:	69fb      	ldr	r3, [r7, #28]
 8012aaa:	005a      	lsls	r2, r3, #1
 8012aac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012aae:	f003 0301 	and.w	r3, r3, #1
 8012ab2:	4413      	add	r3, r2
 8012ab4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012ab6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ab8:	085b      	lsrs	r3, r3, #1
 8012aba:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8012abc:	69fb      	ldr	r3, [r7, #28]
 8012abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d003      	beq.n	8012ace <gen_numname+0x5a>
 8012ac6:	69fa      	ldr	r2, [r7, #28]
 8012ac8:	4b30      	ldr	r3, [pc, #192]	@ (8012b8c <gen_numname+0x118>)
 8012aca:	4053      	eors	r3, r2
 8012acc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ad0:	3301      	adds	r3, #1
 8012ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ad6:	2b0f      	cmp	r3, #15
 8012ad8:	d9e6      	bls.n	8012aa8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	881b      	ldrh	r3, [r3, #0]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d1da      	bne.n	8012a98 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012ae2:	69fb      	ldr	r3, [r7, #28]
 8012ae4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012ae6:	2307      	movs	r3, #7
 8012ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	f003 030f 	and.w	r3, r3, #15
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	3330      	adds	r3, #48	@ 0x30
 8012af6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8012afa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012afe:	2b39      	cmp	r3, #57	@ 0x39
 8012b00:	d904      	bls.n	8012b0c <gen_numname+0x98>
 8012b02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012b06:	3307      	adds	r3, #7
 8012b08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8012b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b0e:	1e5a      	subs	r2, r3, #1
 8012b10:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012b12:	3330      	adds	r3, #48	@ 0x30
 8012b14:	443b      	add	r3, r7
 8012b16:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8012b1a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	091b      	lsrs	r3, r3, #4
 8012b22:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d1df      	bne.n	8012aea <gen_numname+0x76>
	ns[i] = '~';
 8012b2a:	f107 0214 	add.w	r2, r7, #20
 8012b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b30:	4413      	add	r3, r2
 8012b32:	227e      	movs	r2, #126	@ 0x7e
 8012b34:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012b36:	2300      	movs	r3, #0
 8012b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b3a:	e002      	b.n	8012b42 <gen_numname+0xce>
 8012b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b3e:	3301      	adds	r3, #1
 8012b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d205      	bcs.n	8012b56 <gen_numname+0xe2>
 8012b4a:	68fa      	ldr	r2, [r7, #12]
 8012b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b4e:	4413      	add	r3, r2
 8012b50:	781b      	ldrb	r3, [r3, #0]
 8012b52:	2b20      	cmp	r3, #32
 8012b54:	d1f2      	bne.n	8012b3c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b58:	2b07      	cmp	r3, #7
 8012b5a:	d807      	bhi.n	8012b6c <gen_numname+0xf8>
 8012b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b5e:	1c5a      	adds	r2, r3, #1
 8012b60:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012b62:	3330      	adds	r3, #48	@ 0x30
 8012b64:	443b      	add	r3, r7
 8012b66:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012b6a:	e000      	b.n	8012b6e <gen_numname+0xfa>
 8012b6c:	2120      	movs	r1, #32
 8012b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b70:	1c5a      	adds	r2, r3, #1
 8012b72:	627a      	str	r2, [r7, #36]	@ 0x24
 8012b74:	68fa      	ldr	r2, [r7, #12]
 8012b76:	4413      	add	r3, r2
 8012b78:	460a      	mov	r2, r1
 8012b7a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b7e:	2b07      	cmp	r3, #7
 8012b80:	d9e9      	bls.n	8012b56 <gen_numname+0xe2>
}
 8012b82:	bf00      	nop
 8012b84:	bf00      	nop
 8012b86:	3730      	adds	r7, #48	@ 0x30
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	00011021 	.word	0x00011021

08012b90 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b085      	sub	sp, #20
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012b9c:	230b      	movs	r3, #11
 8012b9e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012ba0:	7bfb      	ldrb	r3, [r7, #15]
 8012ba2:	b2da      	uxtb	r2, r3
 8012ba4:	0852      	lsrs	r2, r2, #1
 8012ba6:	01db      	lsls	r3, r3, #7
 8012ba8:	4313      	orrs	r3, r2
 8012baa:	b2da      	uxtb	r2, r3
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	1c59      	adds	r1, r3, #1
 8012bb0:	6079      	str	r1, [r7, #4]
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	4413      	add	r3, r2
 8012bb6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	3b01      	subs	r3, #1
 8012bbc:	60bb      	str	r3, [r7, #8]
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d1ed      	bne.n	8012ba0 <sum_sfn+0x10>
	return sum;
 8012bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3714      	adds	r7, #20
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd0:	4770      	bx	lr

08012bd2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012bd2:	b580      	push	{r7, lr}
 8012bd4:	b086      	sub	sp, #24
 8012bd6:	af00      	add	r7, sp, #0
 8012bd8:	6078      	str	r0, [r7, #4]
 8012bda:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012bdc:	2304      	movs	r3, #4
 8012bde:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8012be6:	23ff      	movs	r3, #255	@ 0xff
 8012be8:	757b      	strb	r3, [r7, #21]
 8012bea:	23ff      	movs	r3, #255	@ 0xff
 8012bec:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8012bee:	e081      	b.n	8012cf4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	69db      	ldr	r3, [r3, #28]
 8012bf4:	4619      	mov	r1, r3
 8012bf6:	6938      	ldr	r0, [r7, #16]
 8012bf8:	f7ff f83c 	bl	8011c74 <move_window>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012c00:	7dfb      	ldrb	r3, [r7, #23]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d17c      	bne.n	8012d00 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	6a1b      	ldr	r3, [r3, #32]
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012c0e:	7dbb      	ldrb	r3, [r7, #22]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d102      	bne.n	8012c1a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012c14:	2304      	movs	r3, #4
 8012c16:	75fb      	strb	r3, [r7, #23]
 8012c18:	e077      	b.n	8012d0a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6a1b      	ldr	r3, [r3, #32]
 8012c1e:	330b      	adds	r3, #11
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012c26:	73fb      	strb	r3, [r7, #15]
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	7bfa      	ldrb	r2, [r7, #15]
 8012c2c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012c2e:	7dbb      	ldrb	r3, [r7, #22]
 8012c30:	2be5      	cmp	r3, #229	@ 0xe5
 8012c32:	d00e      	beq.n	8012c52 <dir_read+0x80>
 8012c34:	7dbb      	ldrb	r3, [r7, #22]
 8012c36:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c38:	d00b      	beq.n	8012c52 <dir_read+0x80>
 8012c3a:	7bfb      	ldrb	r3, [r7, #15]
 8012c3c:	f023 0320 	bic.w	r3, r3, #32
 8012c40:	2b08      	cmp	r3, #8
 8012c42:	bf0c      	ite	eq
 8012c44:	2301      	moveq	r3, #1
 8012c46:	2300      	movne	r3, #0
 8012c48:	b2db      	uxtb	r3, r3
 8012c4a:	461a      	mov	r2, r3
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d002      	beq.n	8012c58 <dir_read+0x86>
				ord = 0xFF;
 8012c52:	23ff      	movs	r3, #255	@ 0xff
 8012c54:	757b      	strb	r3, [r7, #21]
 8012c56:	e044      	b.n	8012ce2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8012c58:	7bfb      	ldrb	r3, [r7, #15]
 8012c5a:	2b0f      	cmp	r3, #15
 8012c5c:	d12f      	bne.n	8012cbe <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8012c5e:	7dbb      	ldrb	r3, [r7, #22]
 8012c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d00d      	beq.n	8012c84 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6a1b      	ldr	r3, [r3, #32]
 8012c6c:	7b5b      	ldrb	r3, [r3, #13]
 8012c6e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8012c70:	7dbb      	ldrb	r3, [r7, #22]
 8012c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012c76:	75bb      	strb	r3, [r7, #22]
 8012c78:	7dbb      	ldrb	r3, [r7, #22]
 8012c7a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	695a      	ldr	r2, [r3, #20]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012c84:	7dba      	ldrb	r2, [r7, #22]
 8012c86:	7d7b      	ldrb	r3, [r7, #21]
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d115      	bne.n	8012cb8 <dir_read+0xe6>
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6a1b      	ldr	r3, [r3, #32]
 8012c90:	330d      	adds	r3, #13
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	7d3a      	ldrb	r2, [r7, #20]
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d10e      	bne.n	8012cb8 <dir_read+0xe6>
 8012c9a:	693b      	ldr	r3, [r7, #16]
 8012c9c:	691a      	ldr	r2, [r3, #16]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	6a1b      	ldr	r3, [r3, #32]
 8012ca2:	4619      	mov	r1, r3
 8012ca4:	4610      	mov	r0, r2
 8012ca6:	f7ff fe19 	bl	80128dc <pick_lfn>
 8012caa:	4603      	mov	r3, r0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d003      	beq.n	8012cb8 <dir_read+0xe6>
 8012cb0:	7d7b      	ldrb	r3, [r7, #21]
 8012cb2:	3b01      	subs	r3, #1
 8012cb4:	b2db      	uxtb	r3, r3
 8012cb6:	e000      	b.n	8012cba <dir_read+0xe8>
 8012cb8:	23ff      	movs	r3, #255	@ 0xff
 8012cba:	757b      	strb	r3, [r7, #21]
 8012cbc:	e011      	b.n	8012ce2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012cbe:	7d7b      	ldrb	r3, [r7, #21]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d109      	bne.n	8012cd8 <dir_read+0x106>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6a1b      	ldr	r3, [r3, #32]
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7ff ff61 	bl	8012b90 <sum_sfn>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	7d3b      	ldrb	r3, [r7, #20]
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	d015      	beq.n	8012d04 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f04f 32ff 	mov.w	r2, #4294967295
 8012cde:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8012ce0:	e010      	b.n	8012d04 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012ce2:	2100      	movs	r1, #0
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f7ff fc2d 	bl	8012544 <dir_next>
 8012cea:	4603      	mov	r3, r0
 8012cec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012cee:	7dfb      	ldrb	r3, [r7, #23]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d109      	bne.n	8012d08 <dir_read+0x136>
	while (dp->sect) {
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	69db      	ldr	r3, [r3, #28]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	f47f af79 	bne.w	8012bf0 <dir_read+0x1e>
 8012cfe:	e004      	b.n	8012d0a <dir_read+0x138>
		if (res != FR_OK) break;
 8012d00:	bf00      	nop
 8012d02:	e002      	b.n	8012d0a <dir_read+0x138>
					break;
 8012d04:	bf00      	nop
 8012d06:	e000      	b.n	8012d0a <dir_read+0x138>
		if (res != FR_OK) break;
 8012d08:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012d0a:	7dfb      	ldrb	r3, [r7, #23]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d002      	beq.n	8012d16 <dir_read+0x144>
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2200      	movs	r2, #0
 8012d14:	61da      	str	r2, [r3, #28]
	return res;
 8012d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3718      	adds	r7, #24
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b086      	sub	sp, #24
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012d2e:	2100      	movs	r1, #0
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f7ff fb7e 	bl	8012432 <dir_sdi>
 8012d36:	4603      	mov	r3, r0
 8012d38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012d3a:	7dfb      	ldrb	r3, [r7, #23]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d001      	beq.n	8012d44 <dir_find+0x24>
 8012d40:	7dfb      	ldrb	r3, [r7, #23]
 8012d42:	e0a9      	b.n	8012e98 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012d44:	23ff      	movs	r3, #255	@ 0xff
 8012d46:	753b      	strb	r3, [r7, #20]
 8012d48:	7d3b      	ldrb	r3, [r7, #20]
 8012d4a:	757b      	strb	r3, [r7, #21]
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d52:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	69db      	ldr	r3, [r3, #28]
 8012d58:	4619      	mov	r1, r3
 8012d5a:	6938      	ldr	r0, [r7, #16]
 8012d5c:	f7fe ff8a 	bl	8011c74 <move_window>
 8012d60:	4603      	mov	r3, r0
 8012d62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012d64:	7dfb      	ldrb	r3, [r7, #23]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	f040 8090 	bne.w	8012e8c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	6a1b      	ldr	r3, [r3, #32]
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012d74:	7dbb      	ldrb	r3, [r7, #22]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d102      	bne.n	8012d80 <dir_find+0x60>
 8012d7a:	2304      	movs	r3, #4
 8012d7c:	75fb      	strb	r3, [r7, #23]
 8012d7e:	e08a      	b.n	8012e96 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6a1b      	ldr	r3, [r3, #32]
 8012d84:	330b      	adds	r3, #11
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012d8c:	73fb      	strb	r3, [r7, #15]
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	7bfa      	ldrb	r2, [r7, #15]
 8012d92:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012d94:	7dbb      	ldrb	r3, [r7, #22]
 8012d96:	2be5      	cmp	r3, #229	@ 0xe5
 8012d98:	d007      	beq.n	8012daa <dir_find+0x8a>
 8012d9a:	7bfb      	ldrb	r3, [r7, #15]
 8012d9c:	f003 0308 	and.w	r3, r3, #8
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d009      	beq.n	8012db8 <dir_find+0x98>
 8012da4:	7bfb      	ldrb	r3, [r7, #15]
 8012da6:	2b0f      	cmp	r3, #15
 8012da8:	d006      	beq.n	8012db8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012daa:	23ff      	movs	r3, #255	@ 0xff
 8012dac:	757b      	strb	r3, [r7, #21]
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f04f 32ff 	mov.w	r2, #4294967295
 8012db4:	631a      	str	r2, [r3, #48]	@ 0x30
 8012db6:	e05e      	b.n	8012e76 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012db8:	7bfb      	ldrb	r3, [r7, #15]
 8012dba:	2b0f      	cmp	r3, #15
 8012dbc:	d136      	bne.n	8012e2c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d154      	bne.n	8012e76 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012dcc:	7dbb      	ldrb	r3, [r7, #22]
 8012dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d00d      	beq.n	8012df2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	6a1b      	ldr	r3, [r3, #32]
 8012dda:	7b5b      	ldrb	r3, [r3, #13]
 8012ddc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012dde:	7dbb      	ldrb	r3, [r7, #22]
 8012de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012de4:	75bb      	strb	r3, [r7, #22]
 8012de6:	7dbb      	ldrb	r3, [r7, #22]
 8012de8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	695a      	ldr	r2, [r3, #20]
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012df2:	7dba      	ldrb	r2, [r7, #22]
 8012df4:	7d7b      	ldrb	r3, [r7, #21]
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d115      	bne.n	8012e26 <dir_find+0x106>
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6a1b      	ldr	r3, [r3, #32]
 8012dfe:	330d      	adds	r3, #13
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	7d3a      	ldrb	r2, [r7, #20]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d10e      	bne.n	8012e26 <dir_find+0x106>
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	691a      	ldr	r2, [r3, #16]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6a1b      	ldr	r3, [r3, #32]
 8012e10:	4619      	mov	r1, r3
 8012e12:	4610      	mov	r0, r2
 8012e14:	f7ff fcf2 	bl	80127fc <cmp_lfn>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d003      	beq.n	8012e26 <dir_find+0x106>
 8012e1e:	7d7b      	ldrb	r3, [r7, #21]
 8012e20:	3b01      	subs	r3, #1
 8012e22:	b2db      	uxtb	r3, r3
 8012e24:	e000      	b.n	8012e28 <dir_find+0x108>
 8012e26:	23ff      	movs	r3, #255	@ 0xff
 8012e28:	757b      	strb	r3, [r7, #21]
 8012e2a:	e024      	b.n	8012e76 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012e2c:	7d7b      	ldrb	r3, [r7, #21]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d109      	bne.n	8012e46 <dir_find+0x126>
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6a1b      	ldr	r3, [r3, #32]
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7ff feaa 	bl	8012b90 <sum_sfn>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	461a      	mov	r2, r3
 8012e40:	7d3b      	ldrb	r3, [r7, #20]
 8012e42:	4293      	cmp	r3, r2
 8012e44:	d024      	beq.n	8012e90 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012e4c:	f003 0301 	and.w	r3, r3, #1
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d10a      	bne.n	8012e6a <dir_find+0x14a>
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6a18      	ldr	r0, [r3, #32]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	3324      	adds	r3, #36	@ 0x24
 8012e5c:	220b      	movs	r2, #11
 8012e5e:	4619      	mov	r1, r3
 8012e60:	f7fe fd16 	bl	8011890 <mem_cmp>
 8012e64:	4603      	mov	r3, r0
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d014      	beq.n	8012e94 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012e6a:	23ff      	movs	r3, #255	@ 0xff
 8012e6c:	757b      	strb	r3, [r7, #21]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	f04f 32ff 	mov.w	r2, #4294967295
 8012e74:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012e76:	2100      	movs	r1, #0
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7ff fb63 	bl	8012544 <dir_next>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012e82:	7dfb      	ldrb	r3, [r7, #23]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	f43f af65 	beq.w	8012d54 <dir_find+0x34>
 8012e8a:	e004      	b.n	8012e96 <dir_find+0x176>
		if (res != FR_OK) break;
 8012e8c:	bf00      	nop
 8012e8e:	e002      	b.n	8012e96 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012e90:	bf00      	nop
 8012e92:	e000      	b.n	8012e96 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012e94:	bf00      	nop

	return res;
 8012e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3718      	adds	r7, #24
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}

08012ea0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b08c      	sub	sp, #48	@ 0x30
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012eb4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d001      	beq.n	8012ec0 <dir_register+0x20>
 8012ebc:	2306      	movs	r3, #6
 8012ebe:	e0e0      	b.n	8013082 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ec4:	e002      	b.n	8012ecc <dir_register+0x2c>
 8012ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ec8:	3301      	adds	r3, #1
 8012eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	691a      	ldr	r2, [r3, #16]
 8012ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ed2:	005b      	lsls	r3, r3, #1
 8012ed4:	4413      	add	r3, r2
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d1f4      	bne.n	8012ec6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012ee2:	f107 030c 	add.w	r3, r7, #12
 8012ee6:	220c      	movs	r2, #12
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fe fc95 	bl	8011818 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012eee:	7dfb      	ldrb	r3, [r7, #23]
 8012ef0:	f003 0301 	and.w	r3, r3, #1
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d032      	beq.n	8012f5e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2240      	movs	r2, #64	@ 0x40
 8012efc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8012f00:	2301      	movs	r3, #1
 8012f02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012f04:	e016      	b.n	8012f34 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	691a      	ldr	r2, [r3, #16]
 8012f10:	f107 010c 	add.w	r1, r7, #12
 8012f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f16:	f7ff fdad 	bl	8012a74 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f7ff ff00 	bl	8012d20 <dir_find>
 8012f20:	4603      	mov	r3, r0
 8012f22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8012f26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d106      	bne.n	8012f3c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f30:	3301      	adds	r3, #1
 8012f32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f36:	2b63      	cmp	r3, #99	@ 0x63
 8012f38:	d9e5      	bls.n	8012f06 <dir_register+0x66>
 8012f3a:	e000      	b.n	8012f3e <dir_register+0x9e>
			if (res != FR_OK) break;
 8012f3c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f40:	2b64      	cmp	r3, #100	@ 0x64
 8012f42:	d101      	bne.n	8012f48 <dir_register+0xa8>
 8012f44:	2307      	movs	r3, #7
 8012f46:	e09c      	b.n	8013082 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012f48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f4c:	2b04      	cmp	r3, #4
 8012f4e:	d002      	beq.n	8012f56 <dir_register+0xb6>
 8012f50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f54:	e095      	b.n	8013082 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012f56:	7dfa      	ldrb	r2, [r7, #23]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012f5e:	7dfb      	ldrb	r3, [r7, #23]
 8012f60:	f003 0302 	and.w	r3, r3, #2
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d007      	beq.n	8012f78 <dir_register+0xd8>
 8012f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f6a:	330c      	adds	r3, #12
 8012f6c:	4a47      	ldr	r2, [pc, #284]	@ (801308c <dir_register+0x1ec>)
 8012f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8012f72:	089b      	lsrs	r3, r3, #2
 8012f74:	3301      	adds	r3, #1
 8012f76:	e000      	b.n	8012f7a <dir_register+0xda>
 8012f78:	2301      	movs	r3, #1
 8012f7a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012f7c:	6a39      	ldr	r1, [r7, #32]
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f7ff fbb6 	bl	80126f0 <dir_alloc>
 8012f84:	4603      	mov	r3, r0
 8012f86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d148      	bne.n	8013024 <dir_register+0x184>
 8012f92:	6a3b      	ldr	r3, [r7, #32]
 8012f94:	3b01      	subs	r3, #1
 8012f96:	623b      	str	r3, [r7, #32]
 8012f98:	6a3b      	ldr	r3, [r7, #32]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d042      	beq.n	8013024 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	695a      	ldr	r2, [r3, #20]
 8012fa2:	6a3b      	ldr	r3, [r7, #32]
 8012fa4:	015b      	lsls	r3, r3, #5
 8012fa6:	1ad3      	subs	r3, r2, r3
 8012fa8:	4619      	mov	r1, r3
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f7ff fa41 	bl	8012432 <dir_sdi>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d132      	bne.n	8013024 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	3324      	adds	r3, #36	@ 0x24
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7ff fde4 	bl	8012b90 <sum_sfn>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	69db      	ldr	r3, [r3, #28]
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	69f8      	ldr	r0, [r7, #28]
 8012fd4:	f7fe fe4e 	bl	8011c74 <move_window>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8012fde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d11d      	bne.n	8013022 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012fe6:	69fb      	ldr	r3, [r7, #28]
 8012fe8:	6918      	ldr	r0, [r3, #16]
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	6a19      	ldr	r1, [r3, #32]
 8012fee:	6a3b      	ldr	r3, [r7, #32]
 8012ff0:	b2da      	uxtb	r2, r3
 8012ff2:	7efb      	ldrb	r3, [r7, #27]
 8012ff4:	f7ff fcd6 	bl	80129a4 <put_lfn>
				fs->wflag = 1;
 8012ff8:	69fb      	ldr	r3, [r7, #28]
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012ffe:	2100      	movs	r1, #0
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f7ff fa9f 	bl	8012544 <dir_next>
 8013006:	4603      	mov	r3, r0
 8013008:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801300c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013010:	2b00      	cmp	r3, #0
 8013012:	d107      	bne.n	8013024 <dir_register+0x184>
 8013014:	6a3b      	ldr	r3, [r7, #32]
 8013016:	3b01      	subs	r3, #1
 8013018:	623b      	str	r3, [r7, #32]
 801301a:	6a3b      	ldr	r3, [r7, #32]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d1d5      	bne.n	8012fcc <dir_register+0x12c>
 8013020:	e000      	b.n	8013024 <dir_register+0x184>
				if (res != FR_OK) break;
 8013022:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013024:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013028:	2b00      	cmp	r3, #0
 801302a:	d128      	bne.n	801307e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	69db      	ldr	r3, [r3, #28]
 8013030:	4619      	mov	r1, r3
 8013032:	69f8      	ldr	r0, [r7, #28]
 8013034:	f7fe fe1e 	bl	8011c74 <move_window>
 8013038:	4603      	mov	r3, r0
 801303a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801303e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013042:	2b00      	cmp	r3, #0
 8013044:	d11b      	bne.n	801307e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6a1b      	ldr	r3, [r3, #32]
 801304a:	2220      	movs	r2, #32
 801304c:	2100      	movs	r1, #0
 801304e:	4618      	mov	r0, r3
 8013050:	f7fe fc03 	bl	801185a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6a18      	ldr	r0, [r3, #32]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	3324      	adds	r3, #36	@ 0x24
 801305c:	220b      	movs	r2, #11
 801305e:	4619      	mov	r1, r3
 8013060:	f7fe fbda 	bl	8011818 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6a1b      	ldr	r3, [r3, #32]
 801306e:	330c      	adds	r3, #12
 8013070:	f002 0218 	and.w	r2, r2, #24
 8013074:	b2d2      	uxtb	r2, r2
 8013076:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013078:	69fb      	ldr	r3, [r7, #28]
 801307a:	2201      	movs	r2, #1
 801307c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801307e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013082:	4618      	mov	r0, r3
 8013084:	3730      	adds	r7, #48	@ 0x30
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
 801308a:	bf00      	nop
 801308c:	4ec4ec4f 	.word	0x4ec4ec4f

08013090 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	695b      	ldr	r3, [r3, #20]
 80130a2:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ac:	d007      	beq.n	80130be <dir_remove+0x2e>
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130b2:	4619      	mov	r1, r3
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f7ff f9bc 	bl	8012432 <dir_sdi>
 80130ba:	4603      	mov	r3, r0
 80130bc:	e000      	b.n	80130c0 <dir_remove+0x30>
 80130be:	2300      	movs	r3, #0
 80130c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80130c2:	7dfb      	ldrb	r3, [r7, #23]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d128      	bne.n	801311a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	69db      	ldr	r3, [r3, #28]
 80130cc:	4619      	mov	r1, r3
 80130ce:	6938      	ldr	r0, [r7, #16]
 80130d0:	f7fe fdd0 	bl	8011c74 <move_window>
 80130d4:	4603      	mov	r3, r0
 80130d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80130d8:	7dfb      	ldrb	r3, [r7, #23]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d115      	bne.n	801310a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6a1b      	ldr	r3, [r3, #32]
 80130e2:	22e5      	movs	r2, #229	@ 0xe5
 80130e4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	2201      	movs	r2, #1
 80130ea:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	695b      	ldr	r3, [r3, #20]
 80130f0:	68fa      	ldr	r2, [r7, #12]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d90b      	bls.n	801310e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80130f6:	2100      	movs	r1, #0
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f7ff fa23 	bl	8012544 <dir_next>
 80130fe:	4603      	mov	r3, r0
 8013100:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8013102:	7dfb      	ldrb	r3, [r7, #23]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d0df      	beq.n	80130c8 <dir_remove+0x38>
 8013108:	e002      	b.n	8013110 <dir_remove+0x80>
			if (res != FR_OK) break;
 801310a:	bf00      	nop
 801310c:	e000      	b.n	8013110 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801310e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8013110:	7dfb      	ldrb	r3, [r7, #23]
 8013112:	2b04      	cmp	r3, #4
 8013114:	d101      	bne.n	801311a <dir_remove+0x8a>
 8013116:	2302      	movs	r3, #2
 8013118:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801311a:	7dfb      	ldrb	r3, [r7, #23]
}
 801311c:	4618      	mov	r0, r3
 801311e:	3718      	adds	r7, #24
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}

08013124 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b08a      	sub	sp, #40	@ 0x28
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	613b      	str	r3, [r7, #16]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	691b      	ldr	r3, [r3, #16]
 801313a:	60fb      	str	r3, [r7, #12]
 801313c:	2300      	movs	r3, #0
 801313e:	617b      	str	r3, [r7, #20]
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013144:	69bb      	ldr	r3, [r7, #24]
 8013146:	1c5a      	adds	r2, r3, #1
 8013148:	61ba      	str	r2, [r7, #24]
 801314a:	693a      	ldr	r2, [r7, #16]
 801314c:	4413      	add	r3, r2
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013152:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013154:	2b1f      	cmp	r3, #31
 8013156:	d940      	bls.n	80131da <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8013158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801315a:	2b2f      	cmp	r3, #47	@ 0x2f
 801315c:	d006      	beq.n	801316c <create_name+0x48>
 801315e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013160:	2b5c      	cmp	r3, #92	@ 0x5c
 8013162:	d110      	bne.n	8013186 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013164:	e002      	b.n	801316c <create_name+0x48>
 8013166:	69bb      	ldr	r3, [r7, #24]
 8013168:	3301      	adds	r3, #1
 801316a:	61bb      	str	r3, [r7, #24]
 801316c:	693a      	ldr	r2, [r7, #16]
 801316e:	69bb      	ldr	r3, [r7, #24]
 8013170:	4413      	add	r3, r2
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	2b2f      	cmp	r3, #47	@ 0x2f
 8013176:	d0f6      	beq.n	8013166 <create_name+0x42>
 8013178:	693a      	ldr	r2, [r7, #16]
 801317a:	69bb      	ldr	r3, [r7, #24]
 801317c:	4413      	add	r3, r2
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	2b5c      	cmp	r3, #92	@ 0x5c
 8013182:	d0f0      	beq.n	8013166 <create_name+0x42>
			break;
 8013184:	e02a      	b.n	80131dc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	2bfe      	cmp	r3, #254	@ 0xfe
 801318a:	d901      	bls.n	8013190 <create_name+0x6c>
 801318c:	2306      	movs	r3, #6
 801318e:	e1ca      	b.n	8013526 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013190:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013192:	b2db      	uxtb	r3, r3
 8013194:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8013196:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013198:	2101      	movs	r1, #1
 801319a:	4618      	mov	r0, r3
 801319c:	f002 fa9a 	bl	80156d4 <ff_convert>
 80131a0:	4603      	mov	r3, r0
 80131a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80131a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d101      	bne.n	80131ae <create_name+0x8a>
 80131aa:	2306      	movs	r3, #6
 80131ac:	e1bb      	b.n	8013526 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80131ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80131b2:	d809      	bhi.n	80131c8 <create_name+0xa4>
 80131b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131b6:	4619      	mov	r1, r3
 80131b8:	489e      	ldr	r0, [pc, #632]	@ (8013434 <create_name+0x310>)
 80131ba:	f7fe fb90 	bl	80118de <chk_chr>
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d001      	beq.n	80131c8 <create_name+0xa4>
 80131c4:	2306      	movs	r3, #6
 80131c6:	e1ae      	b.n	8013526 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	1c5a      	adds	r2, r3, #1
 80131cc:	617a      	str	r2, [r7, #20]
 80131ce:	005b      	lsls	r3, r3, #1
 80131d0:	68fa      	ldr	r2, [r7, #12]
 80131d2:	4413      	add	r3, r2
 80131d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80131d6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80131d8:	e7b4      	b.n	8013144 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80131da:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80131dc:	693a      	ldr	r2, [r7, #16]
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	441a      	add	r2, r3
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80131e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131e8:	2b1f      	cmp	r3, #31
 80131ea:	d801      	bhi.n	80131f0 <create_name+0xcc>
 80131ec:	2304      	movs	r3, #4
 80131ee:	e000      	b.n	80131f2 <create_name+0xce>
 80131f0:	2300      	movs	r3, #0
 80131f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	d109      	bne.n	8013210 <create_name+0xec>
 80131fc:	697a      	ldr	r2, [r7, #20]
 80131fe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013202:	4413      	add	r3, r2
 8013204:	005b      	lsls	r3, r3, #1
 8013206:	68fa      	ldr	r2, [r7, #12]
 8013208:	4413      	add	r3, r2
 801320a:	881b      	ldrh	r3, [r3, #0]
 801320c:	2b2e      	cmp	r3, #46	@ 0x2e
 801320e:	d015      	beq.n	801323c <create_name+0x118>
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	2b02      	cmp	r3, #2
 8013214:	d14d      	bne.n	80132b2 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8013216:	697a      	ldr	r2, [r7, #20]
 8013218:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801321c:	4413      	add	r3, r2
 801321e:	005b      	lsls	r3, r3, #1
 8013220:	68fa      	ldr	r2, [r7, #12]
 8013222:	4413      	add	r3, r2
 8013224:	881b      	ldrh	r3, [r3, #0]
 8013226:	2b2e      	cmp	r3, #46	@ 0x2e
 8013228:	d143      	bne.n	80132b2 <create_name+0x18e>
 801322a:	697a      	ldr	r2, [r7, #20]
 801322c:	4b82      	ldr	r3, [pc, #520]	@ (8013438 <create_name+0x314>)
 801322e:	4413      	add	r3, r2
 8013230:	005b      	lsls	r3, r3, #1
 8013232:	68fa      	ldr	r2, [r7, #12]
 8013234:	4413      	add	r3, r2
 8013236:	881b      	ldrh	r3, [r3, #0]
 8013238:	2b2e      	cmp	r3, #46	@ 0x2e
 801323a:	d13a      	bne.n	80132b2 <create_name+0x18e>
		lfn[di] = 0;
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	005b      	lsls	r3, r3, #1
 8013240:	68fa      	ldr	r2, [r7, #12]
 8013242:	4413      	add	r3, r2
 8013244:	2200      	movs	r2, #0
 8013246:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8013248:	2300      	movs	r3, #0
 801324a:	623b      	str	r3, [r7, #32]
 801324c:	e00f      	b.n	801326e <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 801324e:	6a3a      	ldr	r2, [r7, #32]
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	429a      	cmp	r2, r3
 8013254:	d201      	bcs.n	801325a <create_name+0x136>
 8013256:	212e      	movs	r1, #46	@ 0x2e
 8013258:	e000      	b.n	801325c <create_name+0x138>
 801325a:	2120      	movs	r1, #32
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	6a3b      	ldr	r3, [r7, #32]
 8013260:	4413      	add	r3, r2
 8013262:	3324      	adds	r3, #36	@ 0x24
 8013264:	460a      	mov	r2, r1
 8013266:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8013268:	6a3b      	ldr	r3, [r7, #32]
 801326a:	3301      	adds	r3, #1
 801326c:	623b      	str	r3, [r7, #32]
 801326e:	6a3b      	ldr	r3, [r7, #32]
 8013270:	2b0a      	cmp	r3, #10
 8013272:	d9ec      	bls.n	801324e <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8013274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013278:	f043 0320 	orr.w	r3, r3, #32
 801327c:	b2d9      	uxtb	r1, r3
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	6a3b      	ldr	r3, [r7, #32]
 8013282:	4413      	add	r3, r2
 8013284:	3324      	adds	r3, #36	@ 0x24
 8013286:	460a      	mov	r2, r1
 8013288:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 801328a:	2300      	movs	r3, #0
 801328c:	e14b      	b.n	8013526 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 801328e:	697a      	ldr	r2, [r7, #20]
 8013290:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013294:	4413      	add	r3, r2
 8013296:	005b      	lsls	r3, r3, #1
 8013298:	68fa      	ldr	r2, [r7, #12]
 801329a:	4413      	add	r3, r2
 801329c:	881b      	ldrh	r3, [r3, #0]
 801329e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80132a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132a2:	2b20      	cmp	r3, #32
 80132a4:	d002      	beq.n	80132ac <create_name+0x188>
 80132a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80132aa:	d106      	bne.n	80132ba <create_name+0x196>
		di--;
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	3b01      	subs	r3, #1
 80132b0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d1ea      	bne.n	801328e <create_name+0x16a>
 80132b8:	e000      	b.n	80132bc <create_name+0x198>
		if (w != ' ' && w != '.') break;
 80132ba:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	005b      	lsls	r3, r3, #1
 80132c0:	68fa      	ldr	r2, [r7, #12]
 80132c2:	4413      	add	r3, r2
 80132c4:	2200      	movs	r2, #0
 80132c6:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d101      	bne.n	80132d2 <create_name+0x1ae>
 80132ce:	2306      	movs	r3, #6
 80132d0:	e129      	b.n	8013526 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	3324      	adds	r3, #36	@ 0x24
 80132d6:	220b      	movs	r2, #11
 80132d8:	2120      	movs	r1, #32
 80132da:	4618      	mov	r0, r3
 80132dc:	f7fe fabd 	bl	801185a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80132e0:	2300      	movs	r3, #0
 80132e2:	61bb      	str	r3, [r7, #24]
 80132e4:	e002      	b.n	80132ec <create_name+0x1c8>
 80132e6:	69bb      	ldr	r3, [r7, #24]
 80132e8:	3301      	adds	r3, #1
 80132ea:	61bb      	str	r3, [r7, #24]
 80132ec:	69bb      	ldr	r3, [r7, #24]
 80132ee:	005b      	lsls	r3, r3, #1
 80132f0:	68fa      	ldr	r2, [r7, #12]
 80132f2:	4413      	add	r3, r2
 80132f4:	881b      	ldrh	r3, [r3, #0]
 80132f6:	2b20      	cmp	r3, #32
 80132f8:	d0f5      	beq.n	80132e6 <create_name+0x1c2>
 80132fa:	69bb      	ldr	r3, [r7, #24]
 80132fc:	005b      	lsls	r3, r3, #1
 80132fe:	68fa      	ldr	r2, [r7, #12]
 8013300:	4413      	add	r3, r2
 8013302:	881b      	ldrh	r3, [r3, #0]
 8013304:	2b2e      	cmp	r3, #46	@ 0x2e
 8013306:	d0ee      	beq.n	80132e6 <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d009      	beq.n	8013322 <create_name+0x1fe>
 801330e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013312:	f043 0303 	orr.w	r3, r3, #3
 8013316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801331a:	e002      	b.n	8013322 <create_name+0x1fe>
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	3b01      	subs	r3, #1
 8013320:	617b      	str	r3, [r7, #20]
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d009      	beq.n	801333c <create_name+0x218>
 8013328:	697a      	ldr	r2, [r7, #20]
 801332a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801332e:	4413      	add	r3, r2
 8013330:	005b      	lsls	r3, r3, #1
 8013332:	68fa      	ldr	r2, [r7, #12]
 8013334:	4413      	add	r3, r2
 8013336:	881b      	ldrh	r3, [r3, #0]
 8013338:	2b2e      	cmp	r3, #46	@ 0x2e
 801333a:	d1ef      	bne.n	801331c <create_name+0x1f8>

	i = b = 0; ni = 8;
 801333c:	2300      	movs	r3, #0
 801333e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013342:	2300      	movs	r3, #0
 8013344:	623b      	str	r3, [r7, #32]
 8013346:	2308      	movs	r3, #8
 8013348:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801334a:	69bb      	ldr	r3, [r7, #24]
 801334c:	1c5a      	adds	r2, r3, #1
 801334e:	61ba      	str	r2, [r7, #24]
 8013350:	005b      	lsls	r3, r3, #1
 8013352:	68fa      	ldr	r2, [r7, #12]
 8013354:	4413      	add	r3, r2
 8013356:	881b      	ldrh	r3, [r3, #0]
 8013358:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801335a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801335c:	2b00      	cmp	r3, #0
 801335e:	f000 8098 	beq.w	8013492 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013362:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013364:	2b20      	cmp	r3, #32
 8013366:	d006      	beq.n	8013376 <create_name+0x252>
 8013368:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801336a:	2b2e      	cmp	r3, #46	@ 0x2e
 801336c:	d10a      	bne.n	8013384 <create_name+0x260>
 801336e:	69ba      	ldr	r2, [r7, #24]
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	429a      	cmp	r2, r3
 8013374:	d006      	beq.n	8013384 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 8013376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801337a:	f043 0303 	orr.w	r3, r3, #3
 801337e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013382:	e085      	b.n	8013490 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013384:	6a3a      	ldr	r2, [r7, #32]
 8013386:	69fb      	ldr	r3, [r7, #28]
 8013388:	429a      	cmp	r2, r3
 801338a:	d203      	bcs.n	8013394 <create_name+0x270>
 801338c:	69ba      	ldr	r2, [r7, #24]
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	429a      	cmp	r2, r3
 8013392:	d123      	bne.n	80133dc <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 8013394:	69fb      	ldr	r3, [r7, #28]
 8013396:	2b0b      	cmp	r3, #11
 8013398:	d106      	bne.n	80133a8 <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 801339a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801339e:	f043 0303 	orr.w	r3, r3, #3
 80133a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80133a6:	e077      	b.n	8013498 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80133a8:	69ba      	ldr	r2, [r7, #24]
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d005      	beq.n	80133bc <create_name+0x298>
 80133b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133b4:	f043 0303 	orr.w	r3, r3, #3
 80133b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80133bc:	69ba      	ldr	r2, [r7, #24]
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d868      	bhi.n	8013496 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	61bb      	str	r3, [r7, #24]
 80133c8:	2308      	movs	r3, #8
 80133ca:	623b      	str	r3, [r7, #32]
 80133cc:	230b      	movs	r3, #11
 80133ce:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80133d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80133d4:	009b      	lsls	r3, r3, #2
 80133d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80133da:	e059      	b.n	8013490 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80133dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133de:	2b7f      	cmp	r3, #127	@ 0x7f
 80133e0:	d914      	bls.n	801340c <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80133e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133e4:	2100      	movs	r1, #0
 80133e6:	4618      	mov	r0, r3
 80133e8:	f002 f974 	bl	80156d4 <ff_convert>
 80133ec:	4603      	mov	r3, r0
 80133ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80133f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d004      	beq.n	8013400 <create_name+0x2dc>
 80133f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133f8:	3b80      	subs	r3, #128	@ 0x80
 80133fa:	4a10      	ldr	r2, [pc, #64]	@ (801343c <create_name+0x318>)
 80133fc:	5cd3      	ldrb	r3, [r2, r3]
 80133fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8013400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013404:	f043 0302 	orr.w	r3, r3, #2
 8013408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801340c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801340e:	2b00      	cmp	r3, #0
 8013410:	d007      	beq.n	8013422 <create_name+0x2fe>
 8013412:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013414:	4619      	mov	r1, r3
 8013416:	480a      	ldr	r0, [pc, #40]	@ (8013440 <create_name+0x31c>)
 8013418:	f7fe fa61 	bl	80118de <chk_chr>
 801341c:	4603      	mov	r3, r0
 801341e:	2b00      	cmp	r3, #0
 8013420:	d010      	beq.n	8013444 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013422:	235f      	movs	r3, #95	@ 0x5f
 8013424:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8013426:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801342a:	f043 0303 	orr.w	r3, r3, #3
 801342e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013432:	e023      	b.n	801347c <create_name+0x358>
 8013434:	080187e4 	.word	0x080187e4
 8013438:	7ffffffe 	.word	0x7ffffffe
 801343c:	0801886c 	.word	0x0801886c
 8013440:	080187f0 	.word	0x080187f0
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8013444:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013446:	2b40      	cmp	r3, #64	@ 0x40
 8013448:	d909      	bls.n	801345e <create_name+0x33a>
 801344a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801344c:	2b5a      	cmp	r3, #90	@ 0x5a
 801344e:	d806      	bhi.n	801345e <create_name+0x33a>
					b |= 2;
 8013450:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013454:	f043 0302 	orr.w	r3, r3, #2
 8013458:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801345c:	e00e      	b.n	801347c <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801345e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013460:	2b60      	cmp	r3, #96	@ 0x60
 8013462:	d90b      	bls.n	801347c <create_name+0x358>
 8013464:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013466:	2b7a      	cmp	r3, #122	@ 0x7a
 8013468:	d808      	bhi.n	801347c <create_name+0x358>
						b |= 1; w -= 0x20;
 801346a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801346e:	f043 0301 	orr.w	r3, r3, #1
 8013472:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013476:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013478:	3b20      	subs	r3, #32
 801347a:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801347c:	6a3b      	ldr	r3, [r7, #32]
 801347e:	1c5a      	adds	r2, r3, #1
 8013480:	623a      	str	r2, [r7, #32]
 8013482:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013484:	b2d1      	uxtb	r1, r2
 8013486:	687a      	ldr	r2, [r7, #4]
 8013488:	4413      	add	r3, r2
 801348a:	460a      	mov	r2, r1
 801348c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013490:	e75b      	b.n	801334a <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 8013492:	bf00      	nop
 8013494:	e000      	b.n	8013498 <create_name+0x374>
			if (si > di) break;			/* No extension */
 8013496:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801349e:	2be5      	cmp	r3, #229	@ 0xe5
 80134a0:	d103      	bne.n	80134aa <create_name+0x386>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2205      	movs	r2, #5
 80134a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80134aa:	69fb      	ldr	r3, [r7, #28]
 80134ac:	2b08      	cmp	r3, #8
 80134ae:	d104      	bne.n	80134ba <create_name+0x396>
 80134b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80134ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134be:	f003 030c 	and.w	r3, r3, #12
 80134c2:	2b0c      	cmp	r3, #12
 80134c4:	d005      	beq.n	80134d2 <create_name+0x3ae>
 80134c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134ca:	f003 0303 	and.w	r3, r3, #3
 80134ce:	2b03      	cmp	r3, #3
 80134d0:	d105      	bne.n	80134de <create_name+0x3ba>
 80134d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134d6:	f043 0302 	orr.w	r3, r3, #2
 80134da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80134de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134e2:	f003 0302 	and.w	r3, r3, #2
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d117      	bne.n	801351a <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80134ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134ee:	f003 0303 	and.w	r3, r3, #3
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	d105      	bne.n	8013502 <create_name+0x3de>
 80134f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134fa:	f043 0310 	orr.w	r3, r3, #16
 80134fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013502:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013506:	f003 030c 	and.w	r3, r3, #12
 801350a:	2b04      	cmp	r3, #4
 801350c:	d105      	bne.n	801351a <create_name+0x3f6>
 801350e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013512:	f043 0308 	orr.w	r3, r3, #8
 8013516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013520:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8013524:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8013526:	4618      	mov	r0, r3
 8013528:	3728      	adds	r7, #40	@ 0x28
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}
 801352e:	bf00      	nop

08013530 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	2b2f      	cmp	r3, #47	@ 0x2f
 801354a:	d00b      	beq.n	8013564 <follow_path+0x34>
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	2b5c      	cmp	r3, #92	@ 0x5c
 8013552:	d007      	beq.n	8013564 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	69da      	ldr	r2, [r3, #28]
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	609a      	str	r2, [r3, #8]
 801355c:	e00d      	b.n	801357a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	3301      	adds	r3, #1
 8013562:	603b      	str	r3, [r7, #0]
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	2b2f      	cmp	r3, #47	@ 0x2f
 801356a:	d0f8      	beq.n	801355e <follow_path+0x2e>
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	2b5c      	cmp	r3, #92	@ 0x5c
 8013572:	d0f4      	beq.n	801355e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	2200      	movs	r2, #0
 8013578:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	781b      	ldrb	r3, [r3, #0]
 801357e:	2b1f      	cmp	r3, #31
 8013580:	d80a      	bhi.n	8013598 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2280      	movs	r2, #128	@ 0x80
 8013586:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801358a:	2100      	movs	r1, #0
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f7fe ff50 	bl	8012432 <dir_sdi>
 8013592:	4603      	mov	r3, r0
 8013594:	75fb      	strb	r3, [r7, #23]
 8013596:	e05b      	b.n	8013650 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013598:	463b      	mov	r3, r7
 801359a:	4619      	mov	r1, r3
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f7ff fdc1 	bl	8013124 <create_name>
 80135a2:	4603      	mov	r3, r0
 80135a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80135a6:	7dfb      	ldrb	r3, [r7, #23]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d14c      	bne.n	8013646 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f7ff fbb7 	bl	8012d20 <dir_find>
 80135b2:	4603      	mov	r3, r0
 80135b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80135bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80135be:	7dfb      	ldrb	r3, [r7, #23]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d01b      	beq.n	80135fc <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80135c4:	7dfb      	ldrb	r3, [r7, #23]
 80135c6:	2b04      	cmp	r3, #4
 80135c8:	d13f      	bne.n	801364a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80135ca:	7afb      	ldrb	r3, [r7, #11]
 80135cc:	f003 0320 	and.w	r3, r3, #32
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d00b      	beq.n	80135ec <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80135d4:	7afb      	ldrb	r3, [r7, #11]
 80135d6:	f003 0304 	and.w	r3, r3, #4
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d031      	beq.n	8013642 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2280      	movs	r2, #128	@ 0x80
 80135e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 80135e6:	2300      	movs	r3, #0
 80135e8:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80135ea:	e02e      	b.n	801364a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80135ec:	7afb      	ldrb	r3, [r7, #11]
 80135ee:	f003 0304 	and.w	r3, r3, #4
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d129      	bne.n	801364a <follow_path+0x11a>
 80135f6:	2305      	movs	r3, #5
 80135f8:	75fb      	strb	r3, [r7, #23]
				break;
 80135fa:	e026      	b.n	801364a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135fc:	7afb      	ldrb	r3, [r7, #11]
 80135fe:	f003 0304 	and.w	r3, r3, #4
 8013602:	2b00      	cmp	r3, #0
 8013604:	d123      	bne.n	801364e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	799b      	ldrb	r3, [r3, #6]
 801360a:	f003 0310 	and.w	r3, r3, #16
 801360e:	2b00      	cmp	r3, #0
 8013610:	d102      	bne.n	8013618 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8013612:	2305      	movs	r3, #5
 8013614:	75fb      	strb	r3, [r7, #23]
 8013616:	e01b      	b.n	8013650 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	695b      	ldr	r3, [r3, #20]
 8013622:	68fa      	ldr	r2, [r7, #12]
 8013624:	8992      	ldrh	r2, [r2, #12]
 8013626:	fbb3 f0f2 	udiv	r0, r3, r2
 801362a:	fb00 f202 	mul.w	r2, r0, r2
 801362e:	1a9b      	subs	r3, r3, r2
 8013630:	440b      	add	r3, r1
 8013632:	4619      	mov	r1, r3
 8013634:	68f8      	ldr	r0, [r7, #12]
 8013636:	f7ff f8a2 	bl	801277e <ld_clust>
 801363a:	4602      	mov	r2, r0
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	609a      	str	r2, [r3, #8]
 8013640:	e7aa      	b.n	8013598 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8013642:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013644:	e7a8      	b.n	8013598 <follow_path+0x68>
			if (res != FR_OK) break;
 8013646:	bf00      	nop
 8013648:	e002      	b.n	8013650 <follow_path+0x120>
				break;
 801364a:	bf00      	nop
 801364c:	e000      	b.n	8013650 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801364e:	bf00      	nop
			}
		}
	}

	return res;
 8013650:	7dfb      	ldrb	r3, [r7, #23]
}
 8013652:	4618      	mov	r0, r3
 8013654:	3718      	adds	r7, #24
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}

0801365a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801365a:	b480      	push	{r7}
 801365c:	b087      	sub	sp, #28
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013662:	f04f 33ff 	mov.w	r3, #4294967295
 8013666:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d031      	beq.n	80136d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	617b      	str	r3, [r7, #20]
 8013676:	e002      	b.n	801367e <get_ldnumber+0x24>
 8013678:	697b      	ldr	r3, [r7, #20]
 801367a:	3301      	adds	r3, #1
 801367c:	617b      	str	r3, [r7, #20]
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	2b1f      	cmp	r3, #31
 8013684:	d903      	bls.n	801368e <get_ldnumber+0x34>
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	2b3a      	cmp	r3, #58	@ 0x3a
 801368c:	d1f4      	bne.n	8013678 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	781b      	ldrb	r3, [r3, #0]
 8013692:	2b3a      	cmp	r3, #58	@ 0x3a
 8013694:	d11c      	bne.n	80136d0 <get_ldnumber+0x76>
			tp = *path;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	1c5a      	adds	r2, r3, #1
 80136a0:	60fa      	str	r2, [r7, #12]
 80136a2:	781b      	ldrb	r3, [r3, #0]
 80136a4:	3b30      	subs	r3, #48	@ 0x30
 80136a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	2b09      	cmp	r3, #9
 80136ac:	d80e      	bhi.n	80136cc <get_ldnumber+0x72>
 80136ae:	68fa      	ldr	r2, [r7, #12]
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	429a      	cmp	r2, r3
 80136b4:	d10a      	bne.n	80136cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d107      	bne.n	80136cc <get_ldnumber+0x72>
					vol = (int)i;
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	3301      	adds	r3, #1
 80136c4:	617b      	str	r3, [r7, #20]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	697a      	ldr	r2, [r7, #20]
 80136ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80136cc:	693b      	ldr	r3, [r7, #16]
 80136ce:	e002      	b.n	80136d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80136d0:	2300      	movs	r3, #0
 80136d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80136d4:	693b      	ldr	r3, [r7, #16]
}
 80136d6:	4618      	mov	r0, r3
 80136d8:	371c      	adds	r7, #28
 80136da:	46bd      	mov	sp, r7
 80136dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e0:	4770      	bx	lr
	...

080136e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2200      	movs	r2, #0
 80136f2:	70da      	strb	r2, [r3, #3]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f04f 32ff 	mov.w	r2, #4294967295
 80136fa:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80136fc:	6839      	ldr	r1, [r7, #0]
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f7fe fab8 	bl	8011c74 <move_window>
 8013704:	4603      	mov	r3, r0
 8013706:	2b00      	cmp	r3, #0
 8013708:	d001      	beq.n	801370e <check_fs+0x2a>
 801370a:	2304      	movs	r3, #4
 801370c:	e038      	b.n	8013780 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	333c      	adds	r3, #60	@ 0x3c
 8013712:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013716:	4618      	mov	r0, r3
 8013718:	f7fd fffc 	bl	8011714 <ld_word>
 801371c:	4603      	mov	r3, r0
 801371e:	461a      	mov	r2, r3
 8013720:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013724:	429a      	cmp	r2, r3
 8013726:	d001      	beq.n	801372c <check_fs+0x48>
 8013728:	2303      	movs	r3, #3
 801372a:	e029      	b.n	8013780 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013732:	2be9      	cmp	r3, #233	@ 0xe9
 8013734:	d009      	beq.n	801374a <check_fs+0x66>
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801373c:	2beb      	cmp	r3, #235	@ 0xeb
 801373e:	d11e      	bne.n	801377e <check_fs+0x9a>
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8013746:	2b90      	cmp	r3, #144	@ 0x90
 8013748:	d119      	bne.n	801377e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	333c      	adds	r3, #60	@ 0x3c
 801374e:	3336      	adds	r3, #54	@ 0x36
 8013750:	4618      	mov	r0, r3
 8013752:	f7fd fff7 	bl	8011744 <ld_dword>
 8013756:	4603      	mov	r3, r0
 8013758:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801375c:	4a0a      	ldr	r2, [pc, #40]	@ (8013788 <check_fs+0xa4>)
 801375e:	4293      	cmp	r3, r2
 8013760:	d101      	bne.n	8013766 <check_fs+0x82>
 8013762:	2300      	movs	r3, #0
 8013764:	e00c      	b.n	8013780 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	333c      	adds	r3, #60	@ 0x3c
 801376a:	3352      	adds	r3, #82	@ 0x52
 801376c:	4618      	mov	r0, r3
 801376e:	f7fd ffe9 	bl	8011744 <ld_dword>
 8013772:	4603      	mov	r3, r0
 8013774:	4a05      	ldr	r2, [pc, #20]	@ (801378c <check_fs+0xa8>)
 8013776:	4293      	cmp	r3, r2
 8013778:	d101      	bne.n	801377e <check_fs+0x9a>
 801377a:	2300      	movs	r3, #0
 801377c:	e000      	b.n	8013780 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801377e:	2302      	movs	r3, #2
}
 8013780:	4618      	mov	r0, r3
 8013782:	3708      	adds	r7, #8
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}
 8013788:	00544146 	.word	0x00544146
 801378c:	33544146 	.word	0x33544146

08013790 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b096      	sub	sp, #88	@ 0x58
 8013794:	af00      	add	r7, sp, #0
 8013796:	60f8      	str	r0, [r7, #12]
 8013798:	60b9      	str	r1, [r7, #8]
 801379a:	4613      	mov	r3, r2
 801379c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	2200      	movs	r2, #0
 80137a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80137a4:	68f8      	ldr	r0, [r7, #12]
 80137a6:	f7ff ff58 	bl	801365a <get_ldnumber>
 80137aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80137ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	da01      	bge.n	80137b6 <find_volume+0x26>
 80137b2:	230b      	movs	r3, #11
 80137b4:	e268      	b.n	8013c88 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80137b6:	4a9f      	ldr	r2, [pc, #636]	@ (8013a34 <find_volume+0x2a4>)
 80137b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137be:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80137c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d101      	bne.n	80137ca <find_volume+0x3a>
 80137c6:	230c      	movs	r3, #12
 80137c8:	e25e      	b.n	8013c88 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80137ca:	68bb      	ldr	r3, [r7, #8]
 80137cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80137d0:	79fb      	ldrb	r3, [r7, #7]
 80137d2:	f023 0301 	bic.w	r3, r3, #1
 80137d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80137d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d01a      	beq.n	8013816 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80137e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e2:	785b      	ldrb	r3, [r3, #1]
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7fd fef5 	bl	80115d4 <disk_status>
 80137ea:	4603      	mov	r3, r0
 80137ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80137f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80137f4:	f003 0301 	and.w	r3, r3, #1
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d10c      	bne.n	8013816 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80137fc:	79fb      	ldrb	r3, [r7, #7]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d007      	beq.n	8013812 <find_volume+0x82>
 8013802:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013806:	f003 0304 	and.w	r3, r3, #4
 801380a:	2b00      	cmp	r3, #0
 801380c:	d001      	beq.n	8013812 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801380e:	230a      	movs	r3, #10
 8013810:	e23a      	b.n	8013c88 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8013812:	2300      	movs	r3, #0
 8013814:	e238      	b.n	8013c88 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013818:	2200      	movs	r2, #0
 801381a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801381c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801381e:	b2da      	uxtb	r2, r3
 8013820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013822:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013826:	785b      	ldrb	r3, [r3, #1]
 8013828:	4618      	mov	r0, r3
 801382a:	f7fd feed 	bl	8011608 <disk_initialize>
 801382e:	4603      	mov	r3, r0
 8013830:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013834:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013838:	f003 0301 	and.w	r3, r3, #1
 801383c:	2b00      	cmp	r3, #0
 801383e:	d001      	beq.n	8013844 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013840:	2303      	movs	r3, #3
 8013842:	e221      	b.n	8013c88 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013844:	79fb      	ldrb	r3, [r7, #7]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d007      	beq.n	801385a <find_volume+0xca>
 801384a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801384e:	f003 0304 	and.w	r3, r3, #4
 8013852:	2b00      	cmp	r3, #0
 8013854:	d001      	beq.n	801385a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013856:	230a      	movs	r3, #10
 8013858:	e216      	b.n	8013c88 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801385c:	7858      	ldrb	r0, [r3, #1]
 801385e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013860:	330c      	adds	r3, #12
 8013862:	461a      	mov	r2, r3
 8013864:	2102      	movs	r1, #2
 8013866:	f7fd ff37 	bl	80116d8 <disk_ioctl>
 801386a:	4603      	mov	r3, r0
 801386c:	2b00      	cmp	r3, #0
 801386e:	d001      	beq.n	8013874 <find_volume+0xe4>
 8013870:	2301      	movs	r3, #1
 8013872:	e209      	b.n	8013c88 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8013874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013876:	899b      	ldrh	r3, [r3, #12]
 8013878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801387c:	d80d      	bhi.n	801389a <find_volume+0x10a>
 801387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013880:	899b      	ldrh	r3, [r3, #12]
 8013882:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013886:	d308      	bcc.n	801389a <find_volume+0x10a>
 8013888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801388a:	899b      	ldrh	r3, [r3, #12]
 801388c:	461a      	mov	r2, r3
 801388e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013890:	899b      	ldrh	r3, [r3, #12]
 8013892:	3b01      	subs	r3, #1
 8013894:	4013      	ands	r3, r2
 8013896:	2b00      	cmp	r3, #0
 8013898:	d001      	beq.n	801389e <find_volume+0x10e>
 801389a:	2301      	movs	r3, #1
 801389c:	e1f4      	b.n	8013c88 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801389e:	2300      	movs	r3, #0
 80138a0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80138a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80138a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80138a6:	f7ff ff1d 	bl	80136e4 <check_fs>
 80138aa:	4603      	mov	r3, r0
 80138ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80138b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80138b4:	2b02      	cmp	r3, #2
 80138b6:	d149      	bne.n	801394c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80138b8:	2300      	movs	r3, #0
 80138ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80138bc:	e01e      	b.n	80138fc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80138be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c0:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80138c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138c6:	011b      	lsls	r3, r3, #4
 80138c8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80138cc:	4413      	add	r3, r2
 80138ce:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80138d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138d2:	3304      	adds	r3, #4
 80138d4:	781b      	ldrb	r3, [r3, #0]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d006      	beq.n	80138e8 <find_volume+0x158>
 80138da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138dc:	3308      	adds	r3, #8
 80138de:	4618      	mov	r0, r3
 80138e0:	f7fd ff30 	bl	8011744 <ld_dword>
 80138e4:	4602      	mov	r2, r0
 80138e6:	e000      	b.n	80138ea <find_volume+0x15a>
 80138e8:	2200      	movs	r2, #0
 80138ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138ec:	009b      	lsls	r3, r3, #2
 80138ee:	3358      	adds	r3, #88	@ 0x58
 80138f0:	443b      	add	r3, r7
 80138f2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80138f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138f8:	3301      	adds	r3, #1
 80138fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80138fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138fe:	2b03      	cmp	r3, #3
 8013900:	d9dd      	bls.n	80138be <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013902:	2300      	movs	r3, #0
 8013904:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8013906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013908:	2b00      	cmp	r3, #0
 801390a:	d002      	beq.n	8013912 <find_volume+0x182>
 801390c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801390e:	3b01      	subs	r3, #1
 8013910:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013914:	009b      	lsls	r3, r3, #2
 8013916:	3358      	adds	r3, #88	@ 0x58
 8013918:	443b      	add	r3, r7
 801391a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801391e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013922:	2b00      	cmp	r3, #0
 8013924:	d005      	beq.n	8013932 <find_volume+0x1a2>
 8013926:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013928:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801392a:	f7ff fedb 	bl	80136e4 <check_fs>
 801392e:	4603      	mov	r3, r0
 8013930:	e000      	b.n	8013934 <find_volume+0x1a4>
 8013932:	2303      	movs	r3, #3
 8013934:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013938:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801393c:	2b01      	cmp	r3, #1
 801393e:	d905      	bls.n	801394c <find_volume+0x1bc>
 8013940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013942:	3301      	adds	r3, #1
 8013944:	643b      	str	r3, [r7, #64]	@ 0x40
 8013946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013948:	2b03      	cmp	r3, #3
 801394a:	d9e2      	bls.n	8013912 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801394c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013950:	2b04      	cmp	r3, #4
 8013952:	d101      	bne.n	8013958 <find_volume+0x1c8>
 8013954:	2301      	movs	r3, #1
 8013956:	e197      	b.n	8013c88 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013958:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801395c:	2b01      	cmp	r3, #1
 801395e:	d901      	bls.n	8013964 <find_volume+0x1d4>
 8013960:	230d      	movs	r3, #13
 8013962:	e191      	b.n	8013c88 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013966:	333c      	adds	r3, #60	@ 0x3c
 8013968:	330b      	adds	r3, #11
 801396a:	4618      	mov	r0, r3
 801396c:	f7fd fed2 	bl	8011714 <ld_word>
 8013970:	4603      	mov	r3, r0
 8013972:	461a      	mov	r2, r3
 8013974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013976:	899b      	ldrh	r3, [r3, #12]
 8013978:	429a      	cmp	r2, r3
 801397a:	d001      	beq.n	8013980 <find_volume+0x1f0>
 801397c:	230d      	movs	r3, #13
 801397e:	e183      	b.n	8013c88 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013982:	333c      	adds	r3, #60	@ 0x3c
 8013984:	3316      	adds	r3, #22
 8013986:	4618      	mov	r0, r3
 8013988:	f7fd fec4 	bl	8011714 <ld_word>
 801398c:	4603      	mov	r3, r0
 801398e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013992:	2b00      	cmp	r3, #0
 8013994:	d106      	bne.n	80139a4 <find_volume+0x214>
 8013996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013998:	333c      	adds	r3, #60	@ 0x3c
 801399a:	3324      	adds	r3, #36	@ 0x24
 801399c:	4618      	mov	r0, r3
 801399e:	f7fd fed1 	bl	8011744 <ld_dword>
 80139a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80139a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80139a8:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80139aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ac:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 80139b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80139b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139b6:	789b      	ldrb	r3, [r3, #2]
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d005      	beq.n	80139c8 <find_volume+0x238>
 80139bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139be:	789b      	ldrb	r3, [r3, #2]
 80139c0:	2b02      	cmp	r3, #2
 80139c2:	d001      	beq.n	80139c8 <find_volume+0x238>
 80139c4:	230d      	movs	r3, #13
 80139c6:	e15f      	b.n	8013c88 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80139c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ca:	789b      	ldrb	r3, [r3, #2]
 80139cc:	461a      	mov	r2, r3
 80139ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139d0:	fb02 f303 	mul.w	r3, r2, r3
 80139d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80139d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139d8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80139dc:	461a      	mov	r2, r3
 80139de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80139e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139e4:	895b      	ldrh	r3, [r3, #10]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d008      	beq.n	80139fc <find_volume+0x26c>
 80139ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ec:	895b      	ldrh	r3, [r3, #10]
 80139ee:	461a      	mov	r2, r3
 80139f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f2:	895b      	ldrh	r3, [r3, #10]
 80139f4:	3b01      	subs	r3, #1
 80139f6:	4013      	ands	r3, r2
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d001      	beq.n	8013a00 <find_volume+0x270>
 80139fc:	230d      	movs	r3, #13
 80139fe:	e143      	b.n	8013c88 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a02:	333c      	adds	r3, #60	@ 0x3c
 8013a04:	3311      	adds	r3, #17
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fd fe84 	bl	8011714 <ld_word>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	461a      	mov	r2, r3
 8013a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a12:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a16:	891b      	ldrh	r3, [r3, #8]
 8013a18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a1a:	8992      	ldrh	r2, [r2, #12]
 8013a1c:	0952      	lsrs	r2, r2, #5
 8013a1e:	b292      	uxth	r2, r2
 8013a20:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a24:	fb01 f202 	mul.w	r2, r1, r2
 8013a28:	1a9b      	subs	r3, r3, r2
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d003      	beq.n	8013a38 <find_volume+0x2a8>
 8013a30:	230d      	movs	r3, #13
 8013a32:	e129      	b.n	8013c88 <find_volume+0x4f8>
 8013a34:	240054a0 	.word	0x240054a0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a3a:	333c      	adds	r3, #60	@ 0x3c
 8013a3c:	3313      	adds	r3, #19
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7fd fe68 	bl	8011714 <ld_word>
 8013a44:	4603      	mov	r3, r0
 8013a46:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d106      	bne.n	8013a5c <find_volume+0x2cc>
 8013a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a50:	333c      	adds	r3, #60	@ 0x3c
 8013a52:	3320      	adds	r3, #32
 8013a54:	4618      	mov	r0, r3
 8013a56:	f7fd fe75 	bl	8011744 <ld_dword>
 8013a5a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a5e:	333c      	adds	r3, #60	@ 0x3c
 8013a60:	330e      	adds	r3, #14
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7fd fe56 	bl	8011714 <ld_word>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013a6c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d101      	bne.n	8013a76 <find_volume+0x2e6>
 8013a72:	230d      	movs	r3, #13
 8013a74:	e108      	b.n	8013c88 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013a76:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a7a:	4413      	add	r3, r2
 8013a7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a7e:	8911      	ldrh	r1, [r2, #8]
 8013a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a82:	8992      	ldrh	r2, [r2, #12]
 8013a84:	0952      	lsrs	r2, r2, #5
 8013a86:	b292      	uxth	r2, r2
 8013a88:	fbb1 f2f2 	udiv	r2, r1, r2
 8013a8c:	b292      	uxth	r2, r2
 8013a8e:	4413      	add	r3, r2
 8013a90:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d201      	bcs.n	8013a9e <find_volume+0x30e>
 8013a9a:	230d      	movs	r3, #13
 8013a9c:	e0f4      	b.n	8013c88 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013a9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aa2:	1ad3      	subs	r3, r2, r3
 8013aa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013aa6:	8952      	ldrh	r2, [r2, #10]
 8013aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013aac:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d101      	bne.n	8013ab8 <find_volume+0x328>
 8013ab4:	230d      	movs	r3, #13
 8013ab6:	e0e7      	b.n	8013c88 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8013ab8:	2303      	movs	r3, #3
 8013aba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ac0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	d802      	bhi.n	8013ace <find_volume+0x33e>
 8013ac8:	2302      	movs	r3, #2
 8013aca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ad0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	d802      	bhi.n	8013ade <find_volume+0x34e>
 8013ad8:	2301      	movs	r3, #1
 8013ada:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae0:	1c9a      	adds	r2, r3, #2
 8013ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ae4:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8013ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ae8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013aea:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013aec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013af0:	441a      	add	r2, r3
 8013af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013af4:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8013af6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013afa:	441a      	add	r2, r3
 8013afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013afe:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8013b00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013b04:	2b03      	cmp	r3, #3
 8013b06:	d11e      	bne.n	8013b46 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b0a:	333c      	adds	r3, #60	@ 0x3c
 8013b0c:	332a      	adds	r3, #42	@ 0x2a
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7fd fe00 	bl	8011714 <ld_word>
 8013b14:	4603      	mov	r3, r0
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d001      	beq.n	8013b1e <find_volume+0x38e>
 8013b1a:	230d      	movs	r3, #13
 8013b1c:	e0b4      	b.n	8013c88 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b20:	891b      	ldrh	r3, [r3, #8]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d001      	beq.n	8013b2a <find_volume+0x39a>
 8013b26:	230d      	movs	r3, #13
 8013b28:	e0ae      	b.n	8013c88 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b2c:	333c      	adds	r3, #60	@ 0x3c
 8013b2e:	332c      	adds	r3, #44	@ 0x2c
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7fd fe07 	bl	8011744 <ld_dword>
 8013b36:	4602      	mov	r2, r0
 8013b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b3a:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b3e:	6a1b      	ldr	r3, [r3, #32]
 8013b40:	009b      	lsls	r3, r3, #2
 8013b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8013b44:	e01f      	b.n	8013b86 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b48:	891b      	ldrh	r3, [r3, #8]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d101      	bne.n	8013b52 <find_volume+0x3c2>
 8013b4e:	230d      	movs	r3, #13
 8013b50:	e09a      	b.n	8013c88 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b58:	441a      	add	r2, r3
 8013b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b5c:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013b5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013b62:	2b02      	cmp	r3, #2
 8013b64:	d103      	bne.n	8013b6e <find_volume+0x3de>
 8013b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b68:	6a1b      	ldr	r3, [r3, #32]
 8013b6a:	005b      	lsls	r3, r3, #1
 8013b6c:	e00a      	b.n	8013b84 <find_volume+0x3f4>
 8013b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b70:	6a1a      	ldr	r2, [r3, #32]
 8013b72:	4613      	mov	r3, r2
 8013b74:	005b      	lsls	r3, r3, #1
 8013b76:	4413      	add	r3, r2
 8013b78:	085a      	lsrs	r2, r3, #1
 8013b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b7c:	6a1b      	ldr	r3, [r3, #32]
 8013b7e:	f003 0301 	and.w	r3, r3, #1
 8013b82:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013b84:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b8c:	899b      	ldrh	r3, [r3, #12]
 8013b8e:	4619      	mov	r1, r3
 8013b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b92:	440b      	add	r3, r1
 8013b94:	3b01      	subs	r3, #1
 8013b96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013b98:	8989      	ldrh	r1, [r1, #12]
 8013b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	d201      	bcs.n	8013ba6 <find_volume+0x416>
 8013ba2:	230d      	movs	r3, #13
 8013ba4:	e070      	b.n	8013c88 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8013bac:	619a      	str	r2, [r3, #24]
 8013bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bb0:	699a      	ldr	r2, [r3, #24]
 8013bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bb4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8013bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bb8:	2280      	movs	r2, #128	@ 0x80
 8013bba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013bc0:	2b03      	cmp	r3, #3
 8013bc2:	d149      	bne.n	8013c58 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bc6:	333c      	adds	r3, #60	@ 0x3c
 8013bc8:	3330      	adds	r3, #48	@ 0x30
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7fd fda2 	bl	8011714 <ld_word>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	2b01      	cmp	r3, #1
 8013bd4:	d140      	bne.n	8013c58 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bd8:	3301      	adds	r3, #1
 8013bda:	4619      	mov	r1, r3
 8013bdc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013bde:	f7fe f849 	bl	8011c74 <move_window>
 8013be2:	4603      	mov	r3, r0
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d137      	bne.n	8013c58 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8013be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bea:	2200      	movs	r2, #0
 8013bec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bf0:	333c      	adds	r3, #60	@ 0x3c
 8013bf2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f7fd fd8c 	bl	8011714 <ld_word>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	461a      	mov	r2, r3
 8013c00:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d127      	bne.n	8013c58 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c0a:	333c      	adds	r3, #60	@ 0x3c
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7fd fd99 	bl	8011744 <ld_dword>
 8013c12:	4603      	mov	r3, r0
 8013c14:	4a1e      	ldr	r2, [pc, #120]	@ (8013c90 <find_volume+0x500>)
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d11e      	bne.n	8013c58 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c1c:	333c      	adds	r3, #60	@ 0x3c
 8013c1e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7fd fd8e 	bl	8011744 <ld_dword>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8013c94 <find_volume+0x504>)
 8013c2c:	4293      	cmp	r3, r2
 8013c2e:	d113      	bne.n	8013c58 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c32:	333c      	adds	r3, #60	@ 0x3c
 8013c34:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7fd fd83 	bl	8011744 <ld_dword>
 8013c3e:	4602      	mov	r2, r0
 8013c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c42:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c46:	333c      	adds	r3, #60	@ 0x3c
 8013c48:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7fd fd79 	bl	8011744 <ld_dword>
 8013c52:	4602      	mov	r2, r0
 8013c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c56:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c5a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013c5e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013c60:	4b0d      	ldr	r3, [pc, #52]	@ (8013c98 <find_volume+0x508>)
 8013c62:	881b      	ldrh	r3, [r3, #0]
 8013c64:	3301      	adds	r3, #1
 8013c66:	b29a      	uxth	r2, r3
 8013c68:	4b0b      	ldr	r3, [pc, #44]	@ (8013c98 <find_volume+0x508>)
 8013c6a:	801a      	strh	r2, [r3, #0]
 8013c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8013c98 <find_volume+0x508>)
 8013c6e:	881a      	ldrh	r2, [r3, #0]
 8013c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c72:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8013c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c76:	4a09      	ldr	r2, [pc, #36]	@ (8013c9c <find_volume+0x50c>)
 8013c78:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013c80:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013c82:	f7fd ff8f 	bl	8011ba4 <clear_lock>
#endif
	return FR_OK;
 8013c86:	2300      	movs	r3, #0
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3758      	adds	r7, #88	@ 0x58
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}
 8013c90:	41615252 	.word	0x41615252
 8013c94:	61417272 	.word	0x61417272
 8013c98:	240054a4 	.word	0x240054a4
 8013c9c:	240054c8 	.word	0x240054c8

08013ca0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b084      	sub	sp, #16
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013caa:	2309      	movs	r3, #9
 8013cac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d01c      	beq.n	8013cee <validate+0x4e>
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d018      	beq.n	8013cee <validate+0x4e>
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	781b      	ldrb	r3, [r3, #0]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d013      	beq.n	8013cee <validate+0x4e>
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	889a      	ldrh	r2, [r3, #4]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	88db      	ldrh	r3, [r3, #6]
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	d10c      	bne.n	8013cee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	785b      	ldrb	r3, [r3, #1]
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7fd fc7a 	bl	80115d4 <disk_status>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	f003 0301 	and.w	r3, r3, #1
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d101      	bne.n	8013cee <validate+0x4e>
			res = FR_OK;
 8013cea:	2300      	movs	r3, #0
 8013cec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013cee:	7bfb      	ldrb	r3, [r7, #15]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d102      	bne.n	8013cfa <validate+0x5a>
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	e000      	b.n	8013cfc <validate+0x5c>
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	683a      	ldr	r2, [r7, #0]
 8013cfe:	6013      	str	r3, [r2, #0]
	return res;
 8013d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3710      	adds	r7, #16
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}
	...

08013d0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b088      	sub	sp, #32
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	60f8      	str	r0, [r7, #12]
 8013d14:	60b9      	str	r1, [r7, #8]
 8013d16:	4613      	mov	r3, r2
 8013d18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013d1e:	f107 0310 	add.w	r3, r7, #16
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7ff fc99 	bl	801365a <get_ldnumber>
 8013d28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013d2a:	69fb      	ldr	r3, [r7, #28]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	da01      	bge.n	8013d34 <f_mount+0x28>
 8013d30:	230b      	movs	r3, #11
 8013d32:	e02b      	b.n	8013d8c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013d34:	4a17      	ldr	r2, [pc, #92]	@ (8013d94 <f_mount+0x88>)
 8013d36:	69fb      	ldr	r3, [r7, #28]
 8013d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013d3e:	69bb      	ldr	r3, [r7, #24]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d005      	beq.n	8013d50 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013d44:	69b8      	ldr	r0, [r7, #24]
 8013d46:	f7fd ff2d 	bl	8011ba4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013d4a:	69bb      	ldr	r3, [r7, #24]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d002      	beq.n	8013d5c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013d5c:	68fa      	ldr	r2, [r7, #12]
 8013d5e:	490d      	ldr	r1, [pc, #52]	@ (8013d94 <f_mount+0x88>)
 8013d60:	69fb      	ldr	r3, [r7, #28]
 8013d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d002      	beq.n	8013d72 <f_mount+0x66>
 8013d6c:	79fb      	ldrb	r3, [r7, #7]
 8013d6e:	2b01      	cmp	r3, #1
 8013d70:	d001      	beq.n	8013d76 <f_mount+0x6a>
 8013d72:	2300      	movs	r3, #0
 8013d74:	e00a      	b.n	8013d8c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013d76:	f107 010c 	add.w	r1, r7, #12
 8013d7a:	f107 0308 	add.w	r3, r7, #8
 8013d7e:	2200      	movs	r2, #0
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7ff fd05 	bl	8013790 <find_volume>
 8013d86:	4603      	mov	r3, r0
 8013d88:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3720      	adds	r7, #32
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}
 8013d94:	240054a0 	.word	0x240054a0

08013d98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b09a      	sub	sp, #104	@ 0x68
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	60f8      	str	r0, [r7, #12]
 8013da0:	60b9      	str	r1, [r7, #8]
 8013da2:	4613      	mov	r3, r2
 8013da4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d101      	bne.n	8013db0 <f_open+0x18>
 8013dac:	2309      	movs	r3, #9
 8013dae:	e1b7      	b.n	8014120 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013db0:	79fb      	ldrb	r3, [r7, #7]
 8013db2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013db6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013db8:	79fa      	ldrb	r2, [r7, #7]
 8013dba:	f107 0114 	add.w	r1, r7, #20
 8013dbe:	f107 0308 	add.w	r3, r7, #8
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7ff fce4 	bl	8013790 <find_volume>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8013dce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	f040 819b 	bne.w	801410e <f_open+0x376>
		dj.obj.fs = fs;
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013ddc:	68ba      	ldr	r2, [r7, #8]
 8013dde:	f107 0318 	add.w	r3, r7, #24
 8013de2:	4611      	mov	r1, r2
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7ff fba3 	bl	8013530 <follow_path>
 8013dea:	4603      	mov	r3, r0
 8013dec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013df0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d118      	bne.n	8013e2a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013df8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013dfc:	b25b      	sxtb	r3, r3
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	da03      	bge.n	8013e0a <f_open+0x72>
				res = FR_INVALID_NAME;
 8013e02:	2306      	movs	r3, #6
 8013e04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013e08:	e00f      	b.n	8013e2a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013e0a:	79fb      	ldrb	r3, [r7, #7]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	bf8c      	ite	hi
 8013e10:	2301      	movhi	r3, #1
 8013e12:	2300      	movls	r3, #0
 8013e14:	b2db      	uxtb	r3, r3
 8013e16:	461a      	mov	r2, r3
 8013e18:	f107 0318 	add.w	r3, r7, #24
 8013e1c:	4611      	mov	r1, r2
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7fd fd78 	bl	8011914 <chk_lock>
 8013e24:	4603      	mov	r3, r0
 8013e26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013e2a:	79fb      	ldrb	r3, [r7, #7]
 8013e2c:	f003 031c 	and.w	r3, r3, #28
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d07f      	beq.n	8013f34 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8013e34:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d017      	beq.n	8013e6c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013e3c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013e40:	2b04      	cmp	r3, #4
 8013e42:	d10e      	bne.n	8013e62 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013e44:	f7fd fdc2 	bl	80119cc <enq_lock>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d006      	beq.n	8013e5c <f_open+0xc4>
 8013e4e:	f107 0318 	add.w	r3, r7, #24
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7ff f824 	bl	8012ea0 <dir_register>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	e000      	b.n	8013e5e <f_open+0xc6>
 8013e5c:	2312      	movs	r3, #18
 8013e5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013e62:	79fb      	ldrb	r3, [r7, #7]
 8013e64:	f043 0308 	orr.w	r3, r3, #8
 8013e68:	71fb      	strb	r3, [r7, #7]
 8013e6a:	e010      	b.n	8013e8e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013e6c:	7fbb      	ldrb	r3, [r7, #30]
 8013e6e:	f003 0311 	and.w	r3, r3, #17
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d003      	beq.n	8013e7e <f_open+0xe6>
					res = FR_DENIED;
 8013e76:	2307      	movs	r3, #7
 8013e78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013e7c:	e007      	b.n	8013e8e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013e7e:	79fb      	ldrb	r3, [r7, #7]
 8013e80:	f003 0304 	and.w	r3, r3, #4
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d002      	beq.n	8013e8e <f_open+0xf6>
 8013e88:	2308      	movs	r3, #8
 8013e8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013e8e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d168      	bne.n	8013f68 <f_open+0x1d0>
 8013e96:	79fb      	ldrb	r3, [r7, #7]
 8013e98:	f003 0308 	and.w	r3, r3, #8
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d063      	beq.n	8013f68 <f_open+0x1d0>
				dw = GET_FATTIME();
 8013ea0:	f7fc fe76 	bl	8010b90 <get_fattime>
 8013ea4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ea8:	330e      	adds	r3, #14
 8013eaa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7fd fc87 	bl	80117c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013eb4:	3316      	adds	r3, #22
 8013eb6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7fd fc81 	bl	80117c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ec0:	330b      	adds	r3, #11
 8013ec2:	2220      	movs	r2, #32
 8013ec4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013eca:	4611      	mov	r1, r2
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7fe fc56 	bl	801277e <ld_clust>
 8013ed2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013ed8:	2200      	movs	r2, #0
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7fe fc6e 	bl	80127bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ee2:	331c      	adds	r3, #28
 8013ee4:	2100      	movs	r1, #0
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fd fc6a 	bl	80117c0 <st_dword>
					fs->wflag = 1;
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	2201      	movs	r2, #1
 8013ef0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d037      	beq.n	8013f68 <f_open+0x1d0>
						dw = fs->winsect;
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013efc:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8013efe:	f107 0318 	add.w	r3, r7, #24
 8013f02:	2200      	movs	r2, #0
 8013f04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fe f95e 	bl	80121c8 <remove_chain>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8013f12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d126      	bne.n	8013f68 <f_open+0x1d0>
							res = move_window(fs, dw);
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fd fea8 	bl	8011c74 <move_window>
 8013f24:	4603      	mov	r3, r0
 8013f26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f2e:	3a01      	subs	r2, #1
 8013f30:	615a      	str	r2, [r3, #20]
 8013f32:	e019      	b.n	8013f68 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013f34:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d115      	bne.n	8013f68 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013f3c:	7fbb      	ldrb	r3, [r7, #30]
 8013f3e:	f003 0310 	and.w	r3, r3, #16
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d003      	beq.n	8013f4e <f_open+0x1b6>
					res = FR_NO_FILE;
 8013f46:	2304      	movs	r3, #4
 8013f48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013f4c:	e00c      	b.n	8013f68 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013f4e:	79fb      	ldrb	r3, [r7, #7]
 8013f50:	f003 0302 	and.w	r3, r3, #2
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d007      	beq.n	8013f68 <f_open+0x1d0>
 8013f58:	7fbb      	ldrb	r3, [r7, #30]
 8013f5a:	f003 0301 	and.w	r3, r3, #1
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d002      	beq.n	8013f68 <f_open+0x1d0>
						res = FR_DENIED;
 8013f62:	2307      	movs	r3, #7
 8013f64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8013f68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d126      	bne.n	8013fbe <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013f70:	79fb      	ldrb	r3, [r7, #7]
 8013f72:	f003 0308 	and.w	r3, r3, #8
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d003      	beq.n	8013f82 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8013f7a:	79fb      	ldrb	r3, [r7, #7]
 8013f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f80:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8013f8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013f90:	79fb      	ldrb	r3, [r7, #7]
 8013f92:	2b01      	cmp	r3, #1
 8013f94:	bf8c      	ite	hi
 8013f96:	2301      	movhi	r3, #1
 8013f98:	2300      	movls	r3, #0
 8013f9a:	b2db      	uxtb	r3, r3
 8013f9c:	461a      	mov	r2, r3
 8013f9e:	f107 0318 	add.w	r3, r7, #24
 8013fa2:	4611      	mov	r1, r2
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7fd fd33 	bl	8011a10 <inc_lock>
 8013faa:	4602      	mov	r2, r0
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	691b      	ldr	r3, [r3, #16]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d102      	bne.n	8013fbe <f_open+0x226>
 8013fb8:	2302      	movs	r3, #2
 8013fba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013fbe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	f040 80a3 	bne.w	801410e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013fcc:	4611      	mov	r1, r2
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f7fe fbd5 	bl	801277e <ld_clust>
 8013fd4:	4602      	mov	r2, r0
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fdc:	331c      	adds	r3, #28
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7fd fbb0 	bl	8011744 <ld_dword>
 8013fe4:	4602      	mov	r2, r0
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2200      	movs	r2, #0
 8013fee:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013ff0:	697a      	ldr	r2, [r7, #20]
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	88da      	ldrh	r2, [r3, #6]
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	79fa      	ldrb	r2, [r7, #7]
 8014002:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	2200      	movs	r2, #0
 8014008:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2200      	movs	r2, #0
 801400e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2200      	movs	r2, #0
 8014014:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	3330      	adds	r3, #48	@ 0x30
 801401a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801401e:	2100      	movs	r1, #0
 8014020:	4618      	mov	r0, r3
 8014022:	f7fd fc1a 	bl	801185a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014026:	79fb      	ldrb	r3, [r7, #7]
 8014028:	f003 0320 	and.w	r3, r3, #32
 801402c:	2b00      	cmp	r3, #0
 801402e:	d06e      	beq.n	801410e <f_open+0x376>
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	68db      	ldr	r3, [r3, #12]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d06a      	beq.n	801410e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	68da      	ldr	r2, [r3, #12]
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	895b      	ldrh	r3, [r3, #10]
 8014044:	461a      	mov	r2, r3
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	899b      	ldrh	r3, [r3, #12]
 801404a:	fb02 f303 	mul.w	r3, r2, r3
 801404e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	689b      	ldr	r3, [r3, #8]
 8014054:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	68db      	ldr	r3, [r3, #12]
 801405a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801405c:	e016      	b.n	801408c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014062:	4618      	mov	r0, r3
 8014064:	f7fd fec3 	bl	8011dee <get_fat>
 8014068:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801406a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801406c:	2b01      	cmp	r3, #1
 801406e:	d802      	bhi.n	8014076 <f_open+0x2de>
 8014070:	2302      	movs	r3, #2
 8014072:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801407c:	d102      	bne.n	8014084 <f_open+0x2ec>
 801407e:	2301      	movs	r3, #1
 8014080:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014084:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014088:	1ad3      	subs	r3, r2, r3
 801408a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801408c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014090:	2b00      	cmp	r3, #0
 8014092:	d103      	bne.n	801409c <f_open+0x304>
 8014094:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014098:	429a      	cmp	r2, r3
 801409a:	d8e0      	bhi.n	801405e <f_open+0x2c6>
				}
				fp->clust = clst;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80140a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80140a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d131      	bne.n	801410e <f_open+0x376>
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	899b      	ldrh	r3, [r3, #12]
 80140ae:	461a      	mov	r2, r3
 80140b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80140b6:	fb01 f202 	mul.w	r2, r1, r2
 80140ba:	1a9b      	subs	r3, r3, r2
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d026      	beq.n	801410e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7fd fe73 	bl	8011db0 <clust2sect>
 80140ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80140cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d103      	bne.n	80140da <f_open+0x342>
						res = FR_INT_ERR;
 80140d2:	2302      	movs	r3, #2
 80140d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80140d8:	e019      	b.n	801410e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	899b      	ldrh	r3, [r3, #12]
 80140de:	461a      	mov	r2, r3
 80140e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80140e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140e8:	441a      	add	r2, r3
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80140ee:	697b      	ldr	r3, [r7, #20]
 80140f0:	7858      	ldrb	r0, [r3, #1]
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	6a1a      	ldr	r2, [r3, #32]
 80140fc:	2301      	movs	r3, #1
 80140fe:	f7fd faab 	bl	8011658 <disk_read>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	d002      	beq.n	801410e <f_open+0x376>
 8014108:	2301      	movs	r3, #1
 801410a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801410e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014112:	2b00      	cmp	r3, #0
 8014114:	d002      	beq.n	801411c <f_open+0x384>
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	2200      	movs	r2, #0
 801411a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801411c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8014120:	4618      	mov	r0, r3
 8014122:	3768      	adds	r7, #104	@ 0x68
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b08e      	sub	sp, #56	@ 0x38
 801412c:	af00      	add	r7, sp, #0
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	607a      	str	r2, [r7, #4]
 8014134:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	2200      	movs	r2, #0
 801413e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	f107 0214 	add.w	r2, r7, #20
 8014146:	4611      	mov	r1, r2
 8014148:	4618      	mov	r0, r3
 801414a:	f7ff fda9 	bl	8013ca0 <validate>
 801414e:	4603      	mov	r3, r0
 8014150:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014154:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014158:	2b00      	cmp	r3, #0
 801415a:	d107      	bne.n	801416c <f_read+0x44>
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	7d5b      	ldrb	r3, [r3, #21]
 8014160:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014164:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014168:	2b00      	cmp	r3, #0
 801416a:	d002      	beq.n	8014172 <f_read+0x4a>
 801416c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014170:	e135      	b.n	80143de <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	7d1b      	ldrb	r3, [r3, #20]
 8014176:	f003 0301 	and.w	r3, r3, #1
 801417a:	2b00      	cmp	r3, #0
 801417c:	d101      	bne.n	8014182 <f_read+0x5a>
 801417e:	2307      	movs	r3, #7
 8014180:	e12d      	b.n	80143de <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	68da      	ldr	r2, [r3, #12]
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	699b      	ldr	r3, [r3, #24]
 801418a:	1ad3      	subs	r3, r2, r3
 801418c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	6a3b      	ldr	r3, [r7, #32]
 8014192:	429a      	cmp	r2, r3
 8014194:	f240 811e 	bls.w	80143d4 <f_read+0x2ac>
 8014198:	6a3b      	ldr	r3, [r7, #32]
 801419a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801419c:	e11a      	b.n	80143d4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	699b      	ldr	r3, [r3, #24]
 80141a2:	697a      	ldr	r2, [r7, #20]
 80141a4:	8992      	ldrh	r2, [r2, #12]
 80141a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80141aa:	fb01 f202 	mul.w	r2, r1, r2
 80141ae:	1a9b      	subs	r3, r3, r2
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	f040 80d5 	bne.w	8014360 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	699b      	ldr	r3, [r3, #24]
 80141ba:	697a      	ldr	r2, [r7, #20]
 80141bc:	8992      	ldrh	r2, [r2, #12]
 80141be:	fbb3 f3f2 	udiv	r3, r3, r2
 80141c2:	697a      	ldr	r2, [r7, #20]
 80141c4:	8952      	ldrh	r2, [r2, #10]
 80141c6:	3a01      	subs	r2, #1
 80141c8:	4013      	ands	r3, r2
 80141ca:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80141cc:	69fb      	ldr	r3, [r7, #28]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d12f      	bne.n	8014232 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	699b      	ldr	r3, [r3, #24]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d103      	bne.n	80141e2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	689b      	ldr	r3, [r3, #8]
 80141de:	633b      	str	r3, [r7, #48]	@ 0x30
 80141e0:	e013      	b.n	801420a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d007      	beq.n	80141fa <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	699b      	ldr	r3, [r3, #24]
 80141ee:	4619      	mov	r1, r3
 80141f0:	68f8      	ldr	r0, [r7, #12]
 80141f2:	f7fe f8e6 	bl	80123c2 <clmt_clust>
 80141f6:	6338      	str	r0, [r7, #48]	@ 0x30
 80141f8:	e007      	b.n	801420a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80141fa:	68fa      	ldr	r2, [r7, #12]
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	69db      	ldr	r3, [r3, #28]
 8014200:	4619      	mov	r1, r3
 8014202:	4610      	mov	r0, r2
 8014204:	f7fd fdf3 	bl	8011dee <get_fat>
 8014208:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801420c:	2b01      	cmp	r3, #1
 801420e:	d804      	bhi.n	801421a <f_read+0xf2>
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	2202      	movs	r2, #2
 8014214:	755a      	strb	r2, [r3, #21]
 8014216:	2302      	movs	r3, #2
 8014218:	e0e1      	b.n	80143de <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014220:	d104      	bne.n	801422c <f_read+0x104>
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	2201      	movs	r2, #1
 8014226:	755a      	strb	r2, [r3, #21]
 8014228:	2301      	movs	r3, #1
 801422a:	e0d8      	b.n	80143de <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014230:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014232:	697a      	ldr	r2, [r7, #20]
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	69db      	ldr	r3, [r3, #28]
 8014238:	4619      	mov	r1, r3
 801423a:	4610      	mov	r0, r2
 801423c:	f7fd fdb8 	bl	8011db0 <clust2sect>
 8014240:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014242:	69bb      	ldr	r3, [r7, #24]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d104      	bne.n	8014252 <f_read+0x12a>
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	2202      	movs	r2, #2
 801424c:	755a      	strb	r2, [r3, #21]
 801424e:	2302      	movs	r3, #2
 8014250:	e0c5      	b.n	80143de <f_read+0x2b6>
			sect += csect;
 8014252:	69ba      	ldr	r2, [r7, #24]
 8014254:	69fb      	ldr	r3, [r7, #28]
 8014256:	4413      	add	r3, r2
 8014258:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	899b      	ldrh	r3, [r3, #12]
 801425e:	461a      	mov	r2, r3
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	fbb3 f3f2 	udiv	r3, r3, r2
 8014266:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801426a:	2b00      	cmp	r3, #0
 801426c:	d041      	beq.n	80142f2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801426e:	69fa      	ldr	r2, [r7, #28]
 8014270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014272:	4413      	add	r3, r2
 8014274:	697a      	ldr	r2, [r7, #20]
 8014276:	8952      	ldrh	r2, [r2, #10]
 8014278:	4293      	cmp	r3, r2
 801427a:	d905      	bls.n	8014288 <f_read+0x160>
					cc = fs->csize - csect;
 801427c:	697b      	ldr	r3, [r7, #20]
 801427e:	895b      	ldrh	r3, [r3, #10]
 8014280:	461a      	mov	r2, r3
 8014282:	69fb      	ldr	r3, [r7, #28]
 8014284:	1ad3      	subs	r3, r2, r3
 8014286:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014288:	697b      	ldr	r3, [r7, #20]
 801428a:	7858      	ldrb	r0, [r3, #1]
 801428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801428e:	69ba      	ldr	r2, [r7, #24]
 8014290:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014292:	f7fd f9e1 	bl	8011658 <disk_read>
 8014296:	4603      	mov	r3, r0
 8014298:	2b00      	cmp	r3, #0
 801429a:	d004      	beq.n	80142a6 <f_read+0x17e>
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	2201      	movs	r2, #1
 80142a0:	755a      	strb	r2, [r3, #21]
 80142a2:	2301      	movs	r3, #1
 80142a4:	e09b      	b.n	80143de <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	7d1b      	ldrb	r3, [r3, #20]
 80142aa:	b25b      	sxtb	r3, r3
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	da18      	bge.n	80142e2 <f_read+0x1ba>
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	6a1a      	ldr	r2, [r3, #32]
 80142b4:	69bb      	ldr	r3, [r7, #24]
 80142b6:	1ad3      	subs	r3, r2, r3
 80142b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80142ba:	429a      	cmp	r2, r3
 80142bc:	d911      	bls.n	80142e2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	6a1a      	ldr	r2, [r3, #32]
 80142c2:	69bb      	ldr	r3, [r7, #24]
 80142c4:	1ad3      	subs	r3, r2, r3
 80142c6:	697a      	ldr	r2, [r7, #20]
 80142c8:	8992      	ldrh	r2, [r2, #12]
 80142ca:	fb02 f303 	mul.w	r3, r2, r3
 80142ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142d0:	18d0      	adds	r0, r2, r3
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	899b      	ldrh	r3, [r3, #12]
 80142dc:	461a      	mov	r2, r3
 80142de:	f7fd fa9b 	bl	8011818 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	899b      	ldrh	r3, [r3, #12]
 80142e6:	461a      	mov	r2, r3
 80142e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142ea:	fb02 f303 	mul.w	r3, r2, r3
 80142ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80142f0:	e05c      	b.n	80143ac <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	6a1b      	ldr	r3, [r3, #32]
 80142f6:	69ba      	ldr	r2, [r7, #24]
 80142f8:	429a      	cmp	r2, r3
 80142fa:	d02e      	beq.n	801435a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	7d1b      	ldrb	r3, [r3, #20]
 8014300:	b25b      	sxtb	r3, r3
 8014302:	2b00      	cmp	r3, #0
 8014304:	da18      	bge.n	8014338 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	7858      	ldrb	r0, [r3, #1]
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	6a1a      	ldr	r2, [r3, #32]
 8014314:	2301      	movs	r3, #1
 8014316:	f7fd f9bf 	bl	8011698 <disk_write>
 801431a:	4603      	mov	r3, r0
 801431c:	2b00      	cmp	r3, #0
 801431e:	d004      	beq.n	801432a <f_read+0x202>
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	2201      	movs	r2, #1
 8014324:	755a      	strb	r2, [r3, #21]
 8014326:	2301      	movs	r3, #1
 8014328:	e059      	b.n	80143de <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	7d1b      	ldrb	r3, [r3, #20]
 801432e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014332:	b2da      	uxtb	r2, r3
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	7858      	ldrb	r0, [r3, #1]
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014342:	2301      	movs	r3, #1
 8014344:	69ba      	ldr	r2, [r7, #24]
 8014346:	f7fd f987 	bl	8011658 <disk_read>
 801434a:	4603      	mov	r3, r0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d004      	beq.n	801435a <f_read+0x232>
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	2201      	movs	r2, #1
 8014354:	755a      	strb	r2, [r3, #21]
 8014356:	2301      	movs	r3, #1
 8014358:	e041      	b.n	80143de <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	69ba      	ldr	r2, [r7, #24]
 801435e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	899b      	ldrh	r3, [r3, #12]
 8014364:	4618      	mov	r0, r3
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	699b      	ldr	r3, [r3, #24]
 801436a:	697a      	ldr	r2, [r7, #20]
 801436c:	8992      	ldrh	r2, [r2, #12]
 801436e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014372:	fb01 f202 	mul.w	r2, r1, r2
 8014376:	1a9b      	subs	r3, r3, r2
 8014378:	1ac3      	subs	r3, r0, r3
 801437a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801437c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	429a      	cmp	r2, r3
 8014382:	d901      	bls.n	8014388 <f_read+0x260>
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	699b      	ldr	r3, [r3, #24]
 8014392:	697a      	ldr	r2, [r7, #20]
 8014394:	8992      	ldrh	r2, [r2, #12]
 8014396:	fbb3 f0f2 	udiv	r0, r3, r2
 801439a:	fb00 f202 	mul.w	r2, r0, r2
 801439e:	1a9b      	subs	r3, r3, r2
 80143a0:	440b      	add	r3, r1
 80143a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80143a4:	4619      	mov	r1, r3
 80143a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80143a8:	f7fd fa36 	bl	8011818 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80143ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80143ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143b0:	4413      	add	r3, r2
 80143b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	699a      	ldr	r2, [r3, #24]
 80143b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ba:	441a      	add	r2, r3
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	619a      	str	r2, [r3, #24]
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	681a      	ldr	r2, [r3, #0]
 80143c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143c6:	441a      	add	r2, r3
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	601a      	str	r2, [r3, #0]
 80143cc:	687a      	ldr	r2, [r7, #4]
 80143ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d0:	1ad3      	subs	r3, r2, r3
 80143d2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	f47f aee1 	bne.w	801419e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80143dc:	2300      	movs	r3, #0
}
 80143de:	4618      	mov	r0, r3
 80143e0:	3738      	adds	r7, #56	@ 0x38
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}

080143e6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80143e6:	b580      	push	{r7, lr}
 80143e8:	b08c      	sub	sp, #48	@ 0x30
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	60f8      	str	r0, [r7, #12]
 80143ee:	60b9      	str	r1, [r7, #8]
 80143f0:	607a      	str	r2, [r7, #4]
 80143f2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	2200      	movs	r2, #0
 80143fc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	f107 0210 	add.w	r2, r7, #16
 8014404:	4611      	mov	r1, r2
 8014406:	4618      	mov	r0, r3
 8014408:	f7ff fc4a 	bl	8013ca0 <validate>
 801440c:	4603      	mov	r3, r0
 801440e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014412:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014416:	2b00      	cmp	r3, #0
 8014418:	d107      	bne.n	801442a <f_write+0x44>
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	7d5b      	ldrb	r3, [r3, #21]
 801441e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014422:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014426:	2b00      	cmp	r3, #0
 8014428:	d002      	beq.n	8014430 <f_write+0x4a>
 801442a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801442e:	e16a      	b.n	8014706 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	7d1b      	ldrb	r3, [r3, #20]
 8014434:	f003 0302 	and.w	r3, r3, #2
 8014438:	2b00      	cmp	r3, #0
 801443a:	d101      	bne.n	8014440 <f_write+0x5a>
 801443c:	2307      	movs	r3, #7
 801443e:	e162      	b.n	8014706 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	699a      	ldr	r2, [r3, #24]
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	441a      	add	r2, r3
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	699b      	ldr	r3, [r3, #24]
 801444c:	429a      	cmp	r2, r3
 801444e:	f080 814c 	bcs.w	80146ea <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	699b      	ldr	r3, [r3, #24]
 8014456:	43db      	mvns	r3, r3
 8014458:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801445a:	e146      	b.n	80146ea <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	699b      	ldr	r3, [r3, #24]
 8014460:	693a      	ldr	r2, [r7, #16]
 8014462:	8992      	ldrh	r2, [r2, #12]
 8014464:	fbb3 f1f2 	udiv	r1, r3, r2
 8014468:	fb01 f202 	mul.w	r2, r1, r2
 801446c:	1a9b      	subs	r3, r3, r2
 801446e:	2b00      	cmp	r3, #0
 8014470:	f040 80f1 	bne.w	8014656 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	699b      	ldr	r3, [r3, #24]
 8014478:	693a      	ldr	r2, [r7, #16]
 801447a:	8992      	ldrh	r2, [r2, #12]
 801447c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014480:	693a      	ldr	r2, [r7, #16]
 8014482:	8952      	ldrh	r2, [r2, #10]
 8014484:	3a01      	subs	r2, #1
 8014486:	4013      	ands	r3, r2
 8014488:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801448a:	69bb      	ldr	r3, [r7, #24]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d143      	bne.n	8014518 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	699b      	ldr	r3, [r3, #24]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d10c      	bne.n	80144b2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	689b      	ldr	r3, [r3, #8]
 801449c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801449e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d11a      	bne.n	80144da <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	2100      	movs	r1, #0
 80144a8:	4618      	mov	r0, r3
 80144aa:	f7fd fef2 	bl	8012292 <create_chain>
 80144ae:	62b8      	str	r0, [r7, #40]	@ 0x28
 80144b0:	e013      	b.n	80144da <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d007      	beq.n	80144ca <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	699b      	ldr	r3, [r3, #24]
 80144be:	4619      	mov	r1, r3
 80144c0:	68f8      	ldr	r0, [r7, #12]
 80144c2:	f7fd ff7e 	bl	80123c2 <clmt_clust>
 80144c6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80144c8:	e007      	b.n	80144da <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80144ca:	68fa      	ldr	r2, [r7, #12]
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	69db      	ldr	r3, [r3, #28]
 80144d0:	4619      	mov	r1, r3
 80144d2:	4610      	mov	r0, r2
 80144d4:	f7fd fedd 	bl	8012292 <create_chain>
 80144d8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80144da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144dc:	2b00      	cmp	r3, #0
 80144de:	f000 8109 	beq.w	80146f4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80144e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144e4:	2b01      	cmp	r3, #1
 80144e6:	d104      	bne.n	80144f2 <f_write+0x10c>
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2202      	movs	r2, #2
 80144ec:	755a      	strb	r2, [r3, #21]
 80144ee:	2302      	movs	r3, #2
 80144f0:	e109      	b.n	8014706 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80144f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144f8:	d104      	bne.n	8014504 <f_write+0x11e>
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	2201      	movs	r2, #1
 80144fe:	755a      	strb	r2, [r3, #21]
 8014500:	2301      	movs	r3, #1
 8014502:	e100      	b.n	8014706 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014508:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	689b      	ldr	r3, [r3, #8]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d102      	bne.n	8014518 <f_write+0x132>
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014516:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	7d1b      	ldrb	r3, [r3, #20]
 801451c:	b25b      	sxtb	r3, r3
 801451e:	2b00      	cmp	r3, #0
 8014520:	da18      	bge.n	8014554 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	7858      	ldrb	r0, [r3, #1]
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	6a1a      	ldr	r2, [r3, #32]
 8014530:	2301      	movs	r3, #1
 8014532:	f7fd f8b1 	bl	8011698 <disk_write>
 8014536:	4603      	mov	r3, r0
 8014538:	2b00      	cmp	r3, #0
 801453a:	d004      	beq.n	8014546 <f_write+0x160>
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	2201      	movs	r2, #1
 8014540:	755a      	strb	r2, [r3, #21]
 8014542:	2301      	movs	r3, #1
 8014544:	e0df      	b.n	8014706 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	7d1b      	ldrb	r3, [r3, #20]
 801454a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801454e:	b2da      	uxtb	r2, r3
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014554:	693a      	ldr	r2, [r7, #16]
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	69db      	ldr	r3, [r3, #28]
 801455a:	4619      	mov	r1, r3
 801455c:	4610      	mov	r0, r2
 801455e:	f7fd fc27 	bl	8011db0 <clust2sect>
 8014562:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014564:	697b      	ldr	r3, [r7, #20]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d104      	bne.n	8014574 <f_write+0x18e>
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	2202      	movs	r2, #2
 801456e:	755a      	strb	r2, [r3, #21]
 8014570:	2302      	movs	r3, #2
 8014572:	e0c8      	b.n	8014706 <f_write+0x320>
			sect += csect;
 8014574:	697a      	ldr	r2, [r7, #20]
 8014576:	69bb      	ldr	r3, [r7, #24]
 8014578:	4413      	add	r3, r2
 801457a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	899b      	ldrh	r3, [r3, #12]
 8014580:	461a      	mov	r2, r3
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	fbb3 f3f2 	udiv	r3, r3, r2
 8014588:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801458a:	6a3b      	ldr	r3, [r7, #32]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d043      	beq.n	8014618 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014590:	69ba      	ldr	r2, [r7, #24]
 8014592:	6a3b      	ldr	r3, [r7, #32]
 8014594:	4413      	add	r3, r2
 8014596:	693a      	ldr	r2, [r7, #16]
 8014598:	8952      	ldrh	r2, [r2, #10]
 801459a:	4293      	cmp	r3, r2
 801459c:	d905      	bls.n	80145aa <f_write+0x1c4>
					cc = fs->csize - csect;
 801459e:	693b      	ldr	r3, [r7, #16]
 80145a0:	895b      	ldrh	r3, [r3, #10]
 80145a2:	461a      	mov	r2, r3
 80145a4:	69bb      	ldr	r3, [r7, #24]
 80145a6:	1ad3      	subs	r3, r2, r3
 80145a8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80145aa:	693b      	ldr	r3, [r7, #16]
 80145ac:	7858      	ldrb	r0, [r3, #1]
 80145ae:	6a3b      	ldr	r3, [r7, #32]
 80145b0:	697a      	ldr	r2, [r7, #20]
 80145b2:	69f9      	ldr	r1, [r7, #28]
 80145b4:	f7fd f870 	bl	8011698 <disk_write>
 80145b8:	4603      	mov	r3, r0
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d004      	beq.n	80145c8 <f_write+0x1e2>
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	2201      	movs	r2, #1
 80145c2:	755a      	strb	r2, [r3, #21]
 80145c4:	2301      	movs	r3, #1
 80145c6:	e09e      	b.n	8014706 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	6a1a      	ldr	r2, [r3, #32]
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	1ad3      	subs	r3, r2, r3
 80145d0:	6a3a      	ldr	r2, [r7, #32]
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d918      	bls.n	8014608 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	6a1a      	ldr	r2, [r3, #32]
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	1ad3      	subs	r3, r2, r3
 80145e4:	693a      	ldr	r2, [r7, #16]
 80145e6:	8992      	ldrh	r2, [r2, #12]
 80145e8:	fb02 f303 	mul.w	r3, r2, r3
 80145ec:	69fa      	ldr	r2, [r7, #28]
 80145ee:	18d1      	adds	r1, r2, r3
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	899b      	ldrh	r3, [r3, #12]
 80145f4:	461a      	mov	r2, r3
 80145f6:	f7fd f90f 	bl	8011818 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	7d1b      	ldrb	r3, [r3, #20]
 80145fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014602:	b2da      	uxtb	r2, r3
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	899b      	ldrh	r3, [r3, #12]
 801460c:	461a      	mov	r2, r3
 801460e:	6a3b      	ldr	r3, [r7, #32]
 8014610:	fb02 f303 	mul.w	r3, r2, r3
 8014614:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014616:	e04b      	b.n	80146b0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	6a1b      	ldr	r3, [r3, #32]
 801461c:	697a      	ldr	r2, [r7, #20]
 801461e:	429a      	cmp	r2, r3
 8014620:	d016      	beq.n	8014650 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	699a      	ldr	r2, [r3, #24]
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801462a:	429a      	cmp	r2, r3
 801462c:	d210      	bcs.n	8014650 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	7858      	ldrb	r0, [r3, #1]
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014638:	2301      	movs	r3, #1
 801463a:	697a      	ldr	r2, [r7, #20]
 801463c:	f7fd f80c 	bl	8011658 <disk_read>
 8014640:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014642:	2b00      	cmp	r3, #0
 8014644:	d004      	beq.n	8014650 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	2201      	movs	r2, #1
 801464a:	755a      	strb	r2, [r3, #21]
 801464c:	2301      	movs	r3, #1
 801464e:	e05a      	b.n	8014706 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	697a      	ldr	r2, [r7, #20]
 8014654:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	899b      	ldrh	r3, [r3, #12]
 801465a:	4618      	mov	r0, r3
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	699b      	ldr	r3, [r3, #24]
 8014660:	693a      	ldr	r2, [r7, #16]
 8014662:	8992      	ldrh	r2, [r2, #12]
 8014664:	fbb3 f1f2 	udiv	r1, r3, r2
 8014668:	fb01 f202 	mul.w	r2, r1, r2
 801466c:	1a9b      	subs	r3, r3, r2
 801466e:	1ac3      	subs	r3, r0, r3
 8014670:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	429a      	cmp	r2, r3
 8014678:	d901      	bls.n	801467e <f_write+0x298>
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	699b      	ldr	r3, [r3, #24]
 8014688:	693a      	ldr	r2, [r7, #16]
 801468a:	8992      	ldrh	r2, [r2, #12]
 801468c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014690:	fb00 f202 	mul.w	r2, r0, r2
 8014694:	1a9b      	subs	r3, r3, r2
 8014696:	440b      	add	r3, r1
 8014698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801469a:	69f9      	ldr	r1, [r7, #28]
 801469c:	4618      	mov	r0, r3
 801469e:	f7fd f8bb 	bl	8011818 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	7d1b      	ldrb	r3, [r3, #20]
 80146a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80146aa:	b2da      	uxtb	r2, r3
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80146b0:	69fa      	ldr	r2, [r7, #28]
 80146b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146b4:	4413      	add	r3, r2
 80146b6:	61fb      	str	r3, [r7, #28]
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	699a      	ldr	r2, [r3, #24]
 80146bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146be:	441a      	add	r2, r3
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	619a      	str	r2, [r3, #24]
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	68da      	ldr	r2, [r3, #12]
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	699b      	ldr	r3, [r3, #24]
 80146cc:	429a      	cmp	r2, r3
 80146ce:	bf38      	it	cc
 80146d0:	461a      	movcc	r2, r3
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	60da      	str	r2, [r3, #12]
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	681a      	ldr	r2, [r3, #0]
 80146da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146dc:	441a      	add	r2, r3
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	601a      	str	r2, [r3, #0]
 80146e2:	687a      	ldr	r2, [r7, #4]
 80146e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146e6:	1ad3      	subs	r3, r2, r3
 80146e8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	f47f aeb5 	bne.w	801445c <f_write+0x76>
 80146f2:	e000      	b.n	80146f6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80146f4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	7d1b      	ldrb	r3, [r3, #20]
 80146fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146fe:	b2da      	uxtb	r2, r3
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014704:	2300      	movs	r3, #0
}
 8014706:	4618      	mov	r0, r3
 8014708:	3730      	adds	r7, #48	@ 0x30
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}

0801470e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801470e:	b580      	push	{r7, lr}
 8014710:	b086      	sub	sp, #24
 8014712:	af00      	add	r7, sp, #0
 8014714:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f107 0208 	add.w	r2, r7, #8
 801471c:	4611      	mov	r1, r2
 801471e:	4618      	mov	r0, r3
 8014720:	f7ff fabe 	bl	8013ca0 <validate>
 8014724:	4603      	mov	r3, r0
 8014726:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014728:	7dfb      	ldrb	r3, [r7, #23]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d168      	bne.n	8014800 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	7d1b      	ldrb	r3, [r3, #20]
 8014732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014736:	2b00      	cmp	r3, #0
 8014738:	d062      	beq.n	8014800 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	7d1b      	ldrb	r3, [r3, #20]
 801473e:	b25b      	sxtb	r3, r3
 8014740:	2b00      	cmp	r3, #0
 8014742:	da15      	bge.n	8014770 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	7858      	ldrb	r0, [r3, #1]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	6a1a      	ldr	r2, [r3, #32]
 8014752:	2301      	movs	r3, #1
 8014754:	f7fc ffa0 	bl	8011698 <disk_write>
 8014758:	4603      	mov	r3, r0
 801475a:	2b00      	cmp	r3, #0
 801475c:	d001      	beq.n	8014762 <f_sync+0x54>
 801475e:	2301      	movs	r3, #1
 8014760:	e04f      	b.n	8014802 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	7d1b      	ldrb	r3, [r3, #20]
 8014766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801476a:	b2da      	uxtb	r2, r3
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014770:	f7fc fa0e 	bl	8010b90 <get_fattime>
 8014774:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014776:	68ba      	ldr	r2, [r7, #8]
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801477c:	4619      	mov	r1, r3
 801477e:	4610      	mov	r0, r2
 8014780:	f7fd fa78 	bl	8011c74 <move_window>
 8014784:	4603      	mov	r3, r0
 8014786:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014788:	7dfb      	ldrb	r3, [r7, #23]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d138      	bne.n	8014800 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014792:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	330b      	adds	r3, #11
 8014798:	781a      	ldrb	r2, [r3, #0]
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	330b      	adds	r3, #11
 801479e:	f042 0220 	orr.w	r2, r2, #32
 80147a2:	b2d2      	uxtb	r2, r2
 80147a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	6818      	ldr	r0, [r3, #0]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	689b      	ldr	r3, [r3, #8]
 80147ae:	461a      	mov	r2, r3
 80147b0:	68f9      	ldr	r1, [r7, #12]
 80147b2:	f7fe f803 	bl	80127bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	f103 021c 	add.w	r2, r3, #28
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	68db      	ldr	r3, [r3, #12]
 80147c0:	4619      	mov	r1, r3
 80147c2:	4610      	mov	r0, r2
 80147c4:	f7fc fffc 	bl	80117c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	3316      	adds	r3, #22
 80147cc:	6939      	ldr	r1, [r7, #16]
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7fc fff6 	bl	80117c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	3312      	adds	r3, #18
 80147d8:	2100      	movs	r1, #0
 80147da:	4618      	mov	r0, r3
 80147dc:	f7fc ffd5 	bl	801178a <st_word>
					fs->wflag = 1;
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	2201      	movs	r2, #1
 80147e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7fd fa71 	bl	8011cd0 <sync_fs>
 80147ee:	4603      	mov	r3, r0
 80147f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	7d1b      	ldrb	r3, [r3, #20]
 80147f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80147fa:	b2da      	uxtb	r2, r3
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014800:	7dfb      	ldrb	r3, [r7, #23]
}
 8014802:	4618      	mov	r0, r3
 8014804:	3718      	adds	r7, #24
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}

0801480a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801480a:	b580      	push	{r7, lr}
 801480c:	b084      	sub	sp, #16
 801480e:	af00      	add	r7, sp, #0
 8014810:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f7ff ff7b 	bl	801470e <f_sync>
 8014818:	4603      	mov	r3, r0
 801481a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801481c:	7bfb      	ldrb	r3, [r7, #15]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d118      	bne.n	8014854 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	f107 0208 	add.w	r2, r7, #8
 8014828:	4611      	mov	r1, r2
 801482a:	4618      	mov	r0, r3
 801482c:	f7ff fa38 	bl	8013ca0 <validate>
 8014830:	4603      	mov	r3, r0
 8014832:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014834:	7bfb      	ldrb	r3, [r7, #15]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d10c      	bne.n	8014854 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	691b      	ldr	r3, [r3, #16]
 801483e:	4618      	mov	r0, r3
 8014840:	f7fd f974 	bl	8011b2c <dec_lock>
 8014844:	4603      	mov	r3, r0
 8014846:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014848:	7bfb      	ldrb	r3, [r7, #15]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d102      	bne.n	8014854 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2200      	movs	r2, #0
 8014852:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014854:	7bfb      	ldrb	r3, [r7, #15]
}
 8014856:	4618      	mov	r0, r3
 8014858:	3710      	adds	r7, #16
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}

0801485e <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801485e:	b590      	push	{r4, r7, lr}
 8014860:	b093      	sub	sp, #76	@ 0x4c
 8014862:	af00      	add	r7, sp, #0
 8014864:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014866:	f107 010c 	add.w	r1, r7, #12
 801486a:	1d3b      	adds	r3, r7, #4
 801486c:	2200      	movs	r2, #0
 801486e:	4618      	mov	r0, r3
 8014870:	f7fe ff8e 	bl	8013790 <find_volume>
 8014874:	4603      	mov	r3, r0
 8014876:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 801487a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801487e:	2b00      	cmp	r3, #0
 8014880:	d131      	bne.n	80148e6 <f_chdir+0x88>
		dj.obj.fs = fs;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8014886:	687a      	ldr	r2, [r7, #4]
 8014888:	f107 0310 	add.w	r3, r7, #16
 801488c:	4611      	mov	r1, r2
 801488e:	4618      	mov	r0, r3
 8014890:	f7fe fe4e 	bl	8013530 <follow_path>
 8014894:	4603      	mov	r3, r0
 8014896:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {					/* Follow completed */
 801489a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d11a      	bne.n	80148d8 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80148a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80148a6:	b25b      	sxtb	r3, r3
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	da03      	bge.n	80148b4 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	69ba      	ldr	r2, [r7, #24]
 80148b0:	61da      	str	r2, [r3, #28]
 80148b2:	e011      	b.n	80148d8 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80148b4:	7dbb      	ldrb	r3, [r7, #22]
 80148b6:	f003 0310 	and.w	r3, r3, #16
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d009      	beq.n	80148d2 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80148c2:	68fc      	ldr	r4, [r7, #12]
 80148c4:	4611      	mov	r1, r2
 80148c6:	4618      	mov	r0, r3
 80148c8:	f7fd ff59 	bl	801277e <ld_clust>
 80148cc:	4603      	mov	r3, r0
 80148ce:	61e3      	str	r3, [r4, #28]
 80148d0:	e002      	b.n	80148d8 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80148d2:	2305      	movs	r3, #5
 80148d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80148d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80148dc:	2b04      	cmp	r3, #4
 80148de:	d102      	bne.n	80148e6 <f_chdir+0x88>
 80148e0:	2305      	movs	r3, #5
 80148e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	LEAVE_FF(fs, res);
 80148e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	374c      	adds	r7, #76	@ 0x4c
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd90      	pop	{r4, r7, pc}

080148f2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80148f2:	b580      	push	{r7, lr}
 80148f4:	b090      	sub	sp, #64	@ 0x40
 80148f6:	af00      	add	r7, sp, #0
 80148f8:	6078      	str	r0, [r7, #4]
 80148fa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	f107 0208 	add.w	r2, r7, #8
 8014902:	4611      	mov	r1, r2
 8014904:	4618      	mov	r0, r3
 8014906:	f7ff f9cb 	bl	8013ca0 <validate>
 801490a:	4603      	mov	r3, r0
 801490c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014910:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014914:	2b00      	cmp	r3, #0
 8014916:	d103      	bne.n	8014920 <f_lseek+0x2e>
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	7d5b      	ldrb	r3, [r3, #21]
 801491c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014920:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014924:	2b00      	cmp	r3, #0
 8014926:	d002      	beq.n	801492e <f_lseek+0x3c>
 8014928:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801492c:	e201      	b.n	8014d32 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014932:	2b00      	cmp	r3, #0
 8014934:	f000 80d9 	beq.w	8014aea <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801493e:	d15a      	bne.n	80149f6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014944:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014948:	1d1a      	adds	r2, r3, #4
 801494a:	627a      	str	r2, [r7, #36]	@ 0x24
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	617b      	str	r3, [r7, #20]
 8014950:	2302      	movs	r3, #2
 8014952:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	689b      	ldr	r3, [r3, #8]
 8014958:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801495c:	2b00      	cmp	r3, #0
 801495e:	d03a      	beq.n	80149d6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014962:	613b      	str	r3, [r7, #16]
 8014964:	2300      	movs	r3, #0
 8014966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801496a:	3302      	adds	r3, #2
 801496c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801496e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014970:	60fb      	str	r3, [r7, #12]
 8014972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014974:	3301      	adds	r3, #1
 8014976:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801497c:	4618      	mov	r0, r3
 801497e:	f7fd fa36 	bl	8011dee <get_fat>
 8014982:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014986:	2b01      	cmp	r3, #1
 8014988:	d804      	bhi.n	8014994 <f_lseek+0xa2>
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2202      	movs	r2, #2
 801498e:	755a      	strb	r2, [r3, #21]
 8014990:	2302      	movs	r3, #2
 8014992:	e1ce      	b.n	8014d32 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014996:	f1b3 3fff 	cmp.w	r3, #4294967295
 801499a:	d104      	bne.n	80149a6 <f_lseek+0xb4>
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	2201      	movs	r2, #1
 80149a0:	755a      	strb	r2, [r3, #21]
 80149a2:	2301      	movs	r3, #1
 80149a4:	e1c5      	b.n	8014d32 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	3301      	adds	r3, #1
 80149aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80149ac:	429a      	cmp	r2, r3
 80149ae:	d0de      	beq.n	801496e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80149b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d809      	bhi.n	80149cc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80149b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149ba:	1d1a      	adds	r2, r3, #4
 80149bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80149be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80149c0:	601a      	str	r2, [r3, #0]
 80149c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149c4:	1d1a      	adds	r2, r3, #4
 80149c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80149c8:	693a      	ldr	r2, [r7, #16]
 80149ca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	6a1b      	ldr	r3, [r3, #32]
 80149d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d3c4      	bcc.n	8014960 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80149dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80149de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d803      	bhi.n	80149ee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80149e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149e8:	2200      	movs	r2, #0
 80149ea:	601a      	str	r2, [r3, #0]
 80149ec:	e19f      	b.n	8014d2e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80149ee:	2311      	movs	r3, #17
 80149f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80149f4:	e19b      	b.n	8014d2e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	68db      	ldr	r3, [r3, #12]
 80149fa:	683a      	ldr	r2, [r7, #0]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d902      	bls.n	8014a06 <f_lseek+0x114>
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	683a      	ldr	r2, [r7, #0]
 8014a0a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	f000 818d 	beq.w	8014d2e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	3b01      	subs	r3, #1
 8014a18:	4619      	mov	r1, r3
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f7fd fcd1 	bl	80123c2 <clmt_clust>
 8014a20:	4602      	mov	r2, r0
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014a26:	68ba      	ldr	r2, [r7, #8]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	69db      	ldr	r3, [r3, #28]
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	4610      	mov	r0, r2
 8014a30:	f7fd f9be 	bl	8011db0 <clust2sect>
 8014a34:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014a36:	69bb      	ldr	r3, [r7, #24]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d104      	bne.n	8014a46 <f_lseek+0x154>
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2202      	movs	r2, #2
 8014a40:	755a      	strb	r2, [r3, #21]
 8014a42:	2302      	movs	r3, #2
 8014a44:	e175      	b.n	8014d32 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	3b01      	subs	r3, #1
 8014a4a:	68ba      	ldr	r2, [r7, #8]
 8014a4c:	8992      	ldrh	r2, [r2, #12]
 8014a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a52:	68ba      	ldr	r2, [r7, #8]
 8014a54:	8952      	ldrh	r2, [r2, #10]
 8014a56:	3a01      	subs	r2, #1
 8014a58:	4013      	ands	r3, r2
 8014a5a:	69ba      	ldr	r2, [r7, #24]
 8014a5c:	4413      	add	r3, r2
 8014a5e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	699b      	ldr	r3, [r3, #24]
 8014a64:	68ba      	ldr	r2, [r7, #8]
 8014a66:	8992      	ldrh	r2, [r2, #12]
 8014a68:	fbb3 f1f2 	udiv	r1, r3, r2
 8014a6c:	fb01 f202 	mul.w	r2, r1, r2
 8014a70:	1a9b      	subs	r3, r3, r2
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	f000 815b 	beq.w	8014d2e <f_lseek+0x43c>
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	6a1b      	ldr	r3, [r3, #32]
 8014a7c:	69ba      	ldr	r2, [r7, #24]
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	f000 8155 	beq.w	8014d2e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	7d1b      	ldrb	r3, [r3, #20]
 8014a88:	b25b      	sxtb	r3, r3
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	da18      	bge.n	8014ac0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	7858      	ldrb	r0, [r3, #1]
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6a1a      	ldr	r2, [r3, #32]
 8014a9c:	2301      	movs	r3, #1
 8014a9e:	f7fc fdfb 	bl	8011698 <disk_write>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d004      	beq.n	8014ab2 <f_lseek+0x1c0>
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2201      	movs	r2, #1
 8014aac:	755a      	strb	r2, [r3, #21]
 8014aae:	2301      	movs	r3, #1
 8014ab0:	e13f      	b.n	8014d32 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	7d1b      	ldrb	r3, [r3, #20]
 8014ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014aba:	b2da      	uxtb	r2, r3
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	7858      	ldrb	r0, [r3, #1]
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014aca:	2301      	movs	r3, #1
 8014acc:	69ba      	ldr	r2, [r7, #24]
 8014ace:	f7fc fdc3 	bl	8011658 <disk_read>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d004      	beq.n	8014ae2 <f_lseek+0x1f0>
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2201      	movs	r2, #1
 8014adc:	755a      	strb	r2, [r3, #21]
 8014ade:	2301      	movs	r3, #1
 8014ae0:	e127      	b.n	8014d32 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	69ba      	ldr	r2, [r7, #24]
 8014ae6:	621a      	str	r2, [r3, #32]
 8014ae8:	e121      	b.n	8014d2e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	68db      	ldr	r3, [r3, #12]
 8014aee:	683a      	ldr	r2, [r7, #0]
 8014af0:	429a      	cmp	r2, r3
 8014af2:	d908      	bls.n	8014b06 <f_lseek+0x214>
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	7d1b      	ldrb	r3, [r3, #20]
 8014af8:	f003 0302 	and.w	r3, r3, #2
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d102      	bne.n	8014b06 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	68db      	ldr	r3, [r3, #12]
 8014b04:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	699b      	ldr	r3, [r3, #24]
 8014b0a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014b14:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	f000 80b5 	beq.w	8014c88 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	895b      	ldrh	r3, [r3, #10]
 8014b22:	461a      	mov	r2, r3
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	899b      	ldrh	r3, [r3, #12]
 8014b28:	fb02 f303 	mul.w	r3, r2, r3
 8014b2c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014b2e:	6a3b      	ldr	r3, [r7, #32]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d01b      	beq.n	8014b6c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	1e5a      	subs	r2, r3, #1
 8014b38:	69fb      	ldr	r3, [r7, #28]
 8014b3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8014b3e:	6a3b      	ldr	r3, [r7, #32]
 8014b40:	1e59      	subs	r1, r3, #1
 8014b42:	69fb      	ldr	r3, [r7, #28]
 8014b44:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	d30f      	bcc.n	8014b6c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014b4c:	6a3b      	ldr	r3, [r7, #32]
 8014b4e:	1e5a      	subs	r2, r3, #1
 8014b50:	69fb      	ldr	r3, [r7, #28]
 8014b52:	425b      	negs	r3, r3
 8014b54:	401a      	ands	r2, r3
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	699b      	ldr	r3, [r3, #24]
 8014b5e:	683a      	ldr	r2, [r7, #0]
 8014b60:	1ad3      	subs	r3, r2, r3
 8014b62:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	69db      	ldr	r3, [r3, #28]
 8014b68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014b6a:	e022      	b.n	8014bb2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	689b      	ldr	r3, [r3, #8]
 8014b70:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d119      	bne.n	8014bac <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	2100      	movs	r1, #0
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7fd fb88 	bl	8012292 <create_chain>
 8014b82:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b86:	2b01      	cmp	r3, #1
 8014b88:	d104      	bne.n	8014b94 <f_lseek+0x2a2>
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2202      	movs	r2, #2
 8014b8e:	755a      	strb	r2, [r3, #21]
 8014b90:	2302      	movs	r3, #2
 8014b92:	e0ce      	b.n	8014d32 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b9a:	d104      	bne.n	8014ba6 <f_lseek+0x2b4>
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2201      	movs	r2, #1
 8014ba0:	755a      	strb	r2, [r3, #21]
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	e0c5      	b.n	8014d32 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014baa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014bb0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d067      	beq.n	8014c88 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8014bb8:	e03a      	b.n	8014c30 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8014bba:	683a      	ldr	r2, [r7, #0]
 8014bbc:	69fb      	ldr	r3, [r7, #28]
 8014bbe:	1ad3      	subs	r3, r2, r3
 8014bc0:	603b      	str	r3, [r7, #0]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	699a      	ldr	r2, [r3, #24]
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	441a      	add	r2, r3
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	7d1b      	ldrb	r3, [r3, #20]
 8014bd2:	f003 0302 	and.w	r3, r3, #2
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d00b      	beq.n	8014bf2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fd fb57 	bl	8012292 <create_chain>
 8014be4:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d108      	bne.n	8014bfe <f_lseek+0x30c>
							ofs = 0; break;
 8014bec:	2300      	movs	r3, #0
 8014bee:	603b      	str	r3, [r7, #0]
 8014bf0:	e022      	b.n	8014c38 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7fd f8f9 	bl	8011dee <get_fat>
 8014bfc:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c04:	d104      	bne.n	8014c10 <f_lseek+0x31e>
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	2201      	movs	r2, #1
 8014c0a:	755a      	strb	r2, [r3, #21]
 8014c0c:	2301      	movs	r3, #1
 8014c0e:	e090      	b.n	8014d32 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d904      	bls.n	8014c20 <f_lseek+0x32e>
 8014c16:	68bb      	ldr	r3, [r7, #8]
 8014c18:	6a1b      	ldr	r3, [r3, #32]
 8014c1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d304      	bcc.n	8014c2a <f_lseek+0x338>
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	2202      	movs	r2, #2
 8014c24:	755a      	strb	r2, [r3, #21]
 8014c26:	2302      	movs	r3, #2
 8014c28:	e083      	b.n	8014d32 <f_lseek+0x440>
					fp->clust = clst;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014c2e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014c30:	683a      	ldr	r2, [r7, #0]
 8014c32:	69fb      	ldr	r3, [r7, #28]
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d8c0      	bhi.n	8014bba <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	699a      	ldr	r2, [r3, #24]
 8014c3c:	683b      	ldr	r3, [r7, #0]
 8014c3e:	441a      	add	r2, r3
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	899b      	ldrh	r3, [r3, #12]
 8014c48:	461a      	mov	r2, r3
 8014c4a:	683b      	ldr	r3, [r7, #0]
 8014c4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014c50:	fb01 f202 	mul.w	r2, r1, r2
 8014c54:	1a9b      	subs	r3, r3, r2
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d016      	beq.n	8014c88 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f7fd f8a6 	bl	8011db0 <clust2sect>
 8014c64:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d104      	bne.n	8014c76 <f_lseek+0x384>
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	2202      	movs	r2, #2
 8014c70:	755a      	strb	r2, [r3, #21]
 8014c72:	2302      	movs	r3, #2
 8014c74:	e05d      	b.n	8014d32 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	899b      	ldrh	r3, [r3, #12]
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014c84:	4413      	add	r3, r2
 8014c86:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	699a      	ldr	r2, [r3, #24]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	68db      	ldr	r3, [r3, #12]
 8014c90:	429a      	cmp	r2, r3
 8014c92:	d90a      	bls.n	8014caa <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	699a      	ldr	r2, [r3, #24]
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	7d1b      	ldrb	r3, [r3, #20]
 8014ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ca4:	b2da      	uxtb	r2, r3
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	699b      	ldr	r3, [r3, #24]
 8014cae:	68ba      	ldr	r2, [r7, #8]
 8014cb0:	8992      	ldrh	r2, [r2, #12]
 8014cb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8014cb6:	fb01 f202 	mul.w	r2, r1, r2
 8014cba:	1a9b      	subs	r3, r3, r2
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d036      	beq.n	8014d2e <f_lseek+0x43c>
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	6a1b      	ldr	r3, [r3, #32]
 8014cc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d031      	beq.n	8014d2e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	7d1b      	ldrb	r3, [r3, #20]
 8014cce:	b25b      	sxtb	r3, r3
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	da18      	bge.n	8014d06 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	7858      	ldrb	r0, [r3, #1]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	6a1a      	ldr	r2, [r3, #32]
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	f7fc fcd8 	bl	8011698 <disk_write>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d004      	beq.n	8014cf8 <f_lseek+0x406>
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2201      	movs	r2, #1
 8014cf2:	755a      	strb	r2, [r3, #21]
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	e01c      	b.n	8014d32 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	7d1b      	ldrb	r3, [r3, #20]
 8014cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014d00:	b2da      	uxtb	r2, r3
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014d06:	68bb      	ldr	r3, [r7, #8]
 8014d08:	7858      	ldrb	r0, [r3, #1]
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014d10:	2301      	movs	r3, #1
 8014d12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014d14:	f7fc fca0 	bl	8011658 <disk_read>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d004      	beq.n	8014d28 <f_lseek+0x436>
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2201      	movs	r2, #1
 8014d22:	755a      	strb	r2, [r3, #21]
 8014d24:	2301      	movs	r3, #1
 8014d26:	e004      	b.n	8014d32 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014d2c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014d2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014d32:	4618      	mov	r0, r3
 8014d34:	3740      	adds	r7, #64	@ 0x40
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}

08014d3a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014d3a:	b580      	push	{r7, lr}
 8014d3c:	b0a0      	sub	sp, #128	@ 0x80
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014d42:	2300      	movs	r3, #0
 8014d44:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014d46:	f107 010c 	add.w	r1, r7, #12
 8014d4a:	1d3b      	adds	r3, r7, #4
 8014d4c:	2202      	movs	r2, #2
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7fe fd1e 	bl	8013790 <find_volume>
 8014d54:	4603      	mov	r3, r0
 8014d56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 8014d5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	f040 80a4 	bne.w	8014eb0 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014d68:	687a      	ldr	r2, [r7, #4]
 8014d6a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014d6e:	4611      	mov	r1, r2
 8014d70:	4618      	mov	r0, r3
 8014d72:	f7fe fbdd 	bl	8013530 <follow_path>
 8014d76:	4603      	mov	r3, r0
 8014d78:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8014d7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d108      	bne.n	8014d96 <f_unlink+0x5c>
 8014d84:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8014d88:	f003 0320 	and.w	r3, r3, #32
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d002      	beq.n	8014d96 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8014d90:	2306      	movs	r3, #6
 8014d92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014d96:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d108      	bne.n	8014db0 <f_unlink+0x76>
 8014d9e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014da2:	2102      	movs	r1, #2
 8014da4:	4618      	mov	r0, r3
 8014da6:	f7fc fdb5 	bl	8011914 <chk_lock>
 8014daa:	4603      	mov	r3, r0
 8014dac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014db0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d17b      	bne.n	8014eb0 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014db8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8014dbc:	b25b      	sxtb	r3, r3
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	da03      	bge.n	8014dca <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8014dc2:	2306      	movs	r3, #6
 8014dc4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8014dc8:	e008      	b.n	8014ddc <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014dca:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8014dce:	f003 0301 	and.w	r3, r3, #1
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d002      	beq.n	8014ddc <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014dd6:	2307      	movs	r3, #7
 8014dd8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 8014ddc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d13d      	bne.n	8014e60 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014de8:	4611      	mov	r1, r2
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7fd fcc7 	bl	801277e <ld_clust>
 8014df0:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8014df2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8014df6:	f003 0310 	and.w	r3, r3, #16
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d030      	beq.n	8014e60 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	69db      	ldr	r3, [r3, #28]
 8014e02:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d103      	bne.n	8014e10 <f_unlink+0xd6>
						res = FR_DENIED;
 8014e08:	2307      	movs	r3, #7
 8014e0a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8014e0e:	e027      	b.n	8014e60 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8014e14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e16:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8014e18:	f107 0310 	add.w	r3, r7, #16
 8014e1c:	2100      	movs	r1, #0
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7fd fb07 	bl	8012432 <dir_sdi>
 8014e24:	4603      	mov	r3, r0
 8014e26:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 8014e2a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d116      	bne.n	8014e60 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014e32:	f107 0310 	add.w	r3, r7, #16
 8014e36:	2100      	movs	r1, #0
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7fd feca 	bl	8012bd2 <dir_read>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014e44:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d102      	bne.n	8014e52 <f_unlink+0x118>
 8014e4c:	2307      	movs	r3, #7
 8014e4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014e52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014e56:	2b04      	cmp	r3, #4
 8014e58:	d102      	bne.n	8014e60 <f_unlink+0x126>
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8014e60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d123      	bne.n	8014eb0 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014e68:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f7fe f90f 	bl	8013090 <dir_remove>
 8014e72:	4603      	mov	r3, r0
 8014e74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014e78:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d10c      	bne.n	8014e9a <f_unlink+0x160>
 8014e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d009      	beq.n	8014e9a <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014e86:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7fd f99a 	bl	80121c8 <remove_chain>
 8014e94:	4603      	mov	r3, r0
 8014e96:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014e9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d106      	bne.n	8014eb0 <f_unlink+0x176>
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7fc ff13 	bl	8011cd0 <sync_fs>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014eb0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	3780      	adds	r7, #128	@ 0x80
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	bd80      	pop	{r7, pc}

08014ebc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b098      	sub	sp, #96	@ 0x60
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014ec4:	f107 010c 	add.w	r1, r7, #12
 8014ec8:	1d3b      	adds	r3, r7, #4
 8014eca:	2202      	movs	r2, #2
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7fe fc5f 	bl	8013790 <find_volume>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8014edc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	f040 80ff 	bne.w	80150e4 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	f107 0310 	add.w	r3, r7, #16
 8014eec:	4611      	mov	r1, r2
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7fe fb1e 	bl	8013530 <follow_path>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014efa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d102      	bne.n	8014f08 <f_mkdir+0x4c>
 8014f02:	2308      	movs	r3, #8
 8014f04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014f08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014f0c:	2b04      	cmp	r3, #4
 8014f0e:	d108      	bne.n	8014f22 <f_mkdir+0x66>
 8014f10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014f14:	f003 0320 	and.w	r3, r3, #32
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d002      	beq.n	8014f22 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014f1c:	2306      	movs	r3, #6
 8014f1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014f22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014f26:	2b04      	cmp	r3, #4
 8014f28:	f040 80dc 	bne.w	80150e4 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014f2c:	f107 0310 	add.w	r3, r7, #16
 8014f30:	2100      	movs	r1, #0
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7fd f9ad 	bl	8012292 <create_chain>
 8014f38:	64f8      	str	r0, [r7, #76]	@ 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	895b      	ldrh	r3, [r3, #10]
 8014f3e:	461a      	mov	r2, r3
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	899b      	ldrh	r3, [r3, #12]
 8014f44:	fb02 f303 	mul.w	r3, r2, r3
 8014f48:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d102      	bne.n	8014f5c <f_mkdir+0xa0>
 8014f56:	2307      	movs	r3, #7
 8014f58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8014f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f5e:	2b01      	cmp	r3, #1
 8014f60:	d102      	bne.n	8014f68 <f_mkdir+0xac>
 8014f62:	2302      	movs	r3, #2
 8014f64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f6e:	d102      	bne.n	8014f76 <f_mkdir+0xba>
 8014f70:	2301      	movs	r3, #1
 8014f72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014f76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d106      	bne.n	8014f8c <f_mkdir+0xd0>
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7fc fe33 	bl	8011bec <sync_window>
 8014f86:	4603      	mov	r3, r0
 8014f88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 8014f8c:	f7fb fe00 	bl	8010b90 <get_fattime>
 8014f90:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014f92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d16c      	bne.n	8015074 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7fc ff06 	bl	8011db0 <clust2sect>
 8014fa4:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	333c      	adds	r3, #60	@ 0x3c
 8014faa:	647b      	str	r3, [r7, #68]	@ 0x44
				mem_set(dir, 0, SS(fs));
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	899b      	ldrh	r3, [r3, #12]
 8014fb0:	461a      	mov	r2, r3
 8014fb2:	2100      	movs	r1, #0
 8014fb4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8014fb6:	f7fc fc50 	bl	801185a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014fba:	220b      	movs	r2, #11
 8014fbc:	2120      	movs	r1, #32
 8014fbe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8014fc0:	f7fc fc4b 	bl	801185a <mem_set>
					dir[DIR_Name] = '.';
 8014fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fc6:	222e      	movs	r2, #46	@ 0x2e
 8014fc8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fcc:	330b      	adds	r3, #11
 8014fce:	2210      	movs	r2, #16
 8014fd0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fd4:	3316      	adds	r3, #22
 8014fd6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f7fc fbf1 	bl	80117c0 <st_dword>
					st_clust(fs, dir, dcl);
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014fe2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f7fd fbe9 	bl	80127bc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fec:	3320      	adds	r3, #32
 8014fee:	2220      	movs	r2, #32
 8014ff0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7fc fc10 	bl	8011818 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ffa:	3321      	adds	r3, #33	@ 0x21
 8014ffc:	222e      	movs	r2, #46	@ 0x2e
 8014ffe:	701a      	strb	r2, [r3, #0]
 8015000:	69bb      	ldr	r3, [r7, #24]
 8015002:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	781b      	ldrb	r3, [r3, #0]
 8015008:	2b03      	cmp	r3, #3
 801500a:	d106      	bne.n	801501a <f_mkdir+0x15e>
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015010:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015012:	429a      	cmp	r2, r3
 8015014:	d101      	bne.n	801501a <f_mkdir+0x15e>
 8015016:	2300      	movs	r3, #0
 8015018:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 801501a:	68f8      	ldr	r0, [r7, #12]
 801501c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801501e:	3320      	adds	r3, #32
 8015020:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015022:	4619      	mov	r1, r3
 8015024:	f7fd fbca 	bl	80127bc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	895b      	ldrh	r3, [r3, #10]
 801502c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801502e:	e01c      	b.n	801506a <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8015030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015032:	1c5a      	adds	r2, r3, #1
 8015034:	657a      	str	r2, [r7, #84]	@ 0x54
 8015036:	68fa      	ldr	r2, [r7, #12]
 8015038:	6393      	str	r3, [r2, #56]	@ 0x38
					fs->wflag = 1;
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	2201      	movs	r2, #1
 801503e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	4618      	mov	r0, r3
 8015044:	f7fc fdd2 	bl	8011bec <sync_window>
 8015048:	4603      	mov	r3, r0
 801504a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 801504e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015052:	2b00      	cmp	r3, #0
 8015054:	d10d      	bne.n	8015072 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	899b      	ldrh	r3, [r3, #12]
 801505a:	461a      	mov	r2, r3
 801505c:	2100      	movs	r1, #0
 801505e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015060:	f7fc fbfb 	bl	801185a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015066:	3b01      	subs	r3, #1
 8015068:	65bb      	str	r3, [r7, #88]	@ 0x58
 801506a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801506c:	2b00      	cmp	r3, #0
 801506e:	d1df      	bne.n	8015030 <f_mkdir+0x174>
 8015070:	e000      	b.n	8015074 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8015072:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015074:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015078:	2b00      	cmp	r3, #0
 801507a:	d107      	bne.n	801508c <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801507c:	f107 0310 	add.w	r3, r7, #16
 8015080:	4618      	mov	r0, r3
 8015082:	f7fd ff0d 	bl	8012ea0 <dir_register>
 8015086:	4603      	mov	r3, r0
 8015088:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 801508c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015090:	2b00      	cmp	r3, #0
 8015092:	d120      	bne.n	80150d6 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015096:	647b      	str	r3, [r7, #68]	@ 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801509a:	3316      	adds	r3, #22
 801509c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801509e:	4618      	mov	r0, r3
 80150a0:	f7fc fb8e 	bl	80117c0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80150a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7fd fb86 	bl	80127bc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80150b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80150b2:	330b      	adds	r3, #11
 80150b4:	2210      	movs	r2, #16
 80150b6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	2201      	movs	r2, #1
 80150bc:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80150be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d10e      	bne.n	80150e4 <f_mkdir+0x228>
					res = sync_fs(fs);
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	4618      	mov	r0, r3
 80150ca:	f7fc fe01 	bl	8011cd0 <sync_fs>
 80150ce:	4603      	mov	r3, r0
 80150d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80150d4:	e006      	b.n	80150e4 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80150d6:	f107 0310 	add.w	r3, r7, #16
 80150da:	2200      	movs	r2, #0
 80150dc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80150de:	4618      	mov	r0, r3
 80150e0:	f7fd f872 	bl	80121c8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80150e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	3760      	adds	r7, #96	@ 0x60
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	460b      	mov	r3, r1
 80150fa:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80150fc:	78fb      	ldrb	r3, [r7, #3]
 80150fe:	2b0a      	cmp	r3, #10
 8015100:	d103      	bne.n	801510a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8015102:	210d      	movs	r1, #13
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f7ff fff3 	bl	80150f0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	685b      	ldr	r3, [r3, #4]
 801510e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	2b00      	cmp	r3, #0
 8015114:	db25      	blt.n	8015162 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	1c5a      	adds	r2, r3, #1
 801511a:	60fa      	str	r2, [r7, #12]
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	4413      	add	r3, r2
 8015120:	78fa      	ldrb	r2, [r7, #3]
 8015122:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	2b3c      	cmp	r3, #60	@ 0x3c
 8015128:	dd12      	ble.n	8015150 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6818      	ldr	r0, [r3, #0]
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f103 010c 	add.w	r1, r3, #12
 8015134:	68fa      	ldr	r2, [r7, #12]
 8015136:	f107 0308 	add.w	r3, r7, #8
 801513a:	f7ff f954 	bl	80143e6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801513e:	68ba      	ldr	r2, [r7, #8]
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	429a      	cmp	r2, r3
 8015144:	d101      	bne.n	801514a <putc_bfd+0x5a>
 8015146:	2300      	movs	r3, #0
 8015148:	e001      	b.n	801514e <putc_bfd+0x5e>
 801514a:	f04f 33ff 	mov.w	r3, #4294967295
 801514e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	68fa      	ldr	r2, [r7, #12]
 8015154:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	689b      	ldr	r3, [r3, #8]
 801515a:	1c5a      	adds	r2, r3, #1
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	609a      	str	r2, [r3, #8]
 8015160:	e000      	b.n	8015164 <putc_bfd+0x74>
	if (i < 0) return;
 8015162:	bf00      	nop
}
 8015164:	3710      	adds	r7, #16
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}

0801516a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801516a:	b580      	push	{r7, lr}
 801516c:	b084      	sub	sp, #16
 801516e:	af00      	add	r7, sp, #0
 8015170:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	685b      	ldr	r3, [r3, #4]
 8015176:	2b00      	cmp	r3, #0
 8015178:	db16      	blt.n	80151a8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	6818      	ldr	r0, [r3, #0]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f103 010c 	add.w	r1, r3, #12
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	461a      	mov	r2, r3
 801518a:	f107 030c 	add.w	r3, r7, #12
 801518e:	f7ff f92a 	bl	80143e6 <f_write>
 8015192:	4603      	mov	r3, r0
 8015194:	2b00      	cmp	r3, #0
 8015196:	d107      	bne.n	80151a8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	685b      	ldr	r3, [r3, #4]
 801519c:	68fa      	ldr	r2, [r7, #12]
 801519e:	4293      	cmp	r3, r2
 80151a0:	d102      	bne.n	80151a8 <putc_flush+0x3e>
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	689b      	ldr	r3, [r3, #8]
 80151a6:	e001      	b.n	80151ac <putc_flush+0x42>
	return EOF;
 80151a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80151ac:	4618      	mov	r0, r3
 80151ae:	3710      	adds	r7, #16
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}

080151b4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80151b4:	b480      	push	{r7}
 80151b6:	b083      	sub	sp, #12
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
 80151bc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	683a      	ldr	r2, [r7, #0]
 80151c2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2200      	movs	r2, #0
 80151c8:	605a      	str	r2, [r3, #4]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	685a      	ldr	r2, [r3, #4]
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	609a      	str	r2, [r3, #8]
}
 80151d2:	bf00      	nop
 80151d4:	370c      	adds	r7, #12
 80151d6:	46bd      	mov	sp, r7
 80151d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151dc:	4770      	bx	lr
	...

080151e0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80151e0:	b40e      	push	{r1, r2, r3}
 80151e2:	b580      	push	{r7, lr}
 80151e4:	b0a7      	sub	sp, #156	@ 0x9c
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80151ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80151ee:	6879      	ldr	r1, [r7, #4]
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7ff ffdf 	bl	80151b4 <putc_init>

	va_start(arp, fmt);
 80151f6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80151fa:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 80151fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015200:	1c5a      	adds	r2, r3, #1
 8015202:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015206:	781b      	ldrb	r3, [r3, #0]
 8015208:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 801520c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015210:	2b00      	cmp	r3, #0
 8015212:	f000 81f2 	beq.w	80155fa <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8015216:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801521a:	2b25      	cmp	r3, #37	@ 0x25
 801521c:	d008      	beq.n	8015230 <f_printf+0x50>
			putc_bfd(&pb, c);
 801521e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8015222:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015226:	4611      	mov	r1, r2
 8015228:	4618      	mov	r0, r3
 801522a:	f7ff ff61 	bl	80150f0 <putc_bfd>
			continue;
 801522e:	e1e3      	b.n	80155f8 <f_printf+0x418>
		}
		w = f = 0;
 8015230:	2300      	movs	r3, #0
 8015232:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8015236:	2300      	movs	r3, #0
 8015238:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 801523c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015240:	1c5a      	adds	r2, r3, #1
 8015242:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015246:	781b      	ldrb	r3, [r3, #0]
 8015248:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 801524c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015250:	2b30      	cmp	r3, #48	@ 0x30
 8015252:	d10b      	bne.n	801526c <f_printf+0x8c>
			f = 1; c = *fmt++;
 8015254:	2301      	movs	r3, #1
 8015256:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801525a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801525e:	1c5a      	adds	r2, r3, #1
 8015260:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 801526a:	e024      	b.n	80152b6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 801526c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015270:	2b2d      	cmp	r3, #45	@ 0x2d
 8015272:	d120      	bne.n	80152b6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 8015274:	2302      	movs	r3, #2
 8015276:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801527a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801527e:	1c5a      	adds	r2, r3, #1
 8015280:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015284:	781b      	ldrb	r3, [r3, #0]
 8015286:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801528a:	e014      	b.n	80152b6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 801528c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015290:	4613      	mov	r3, r2
 8015292:	009b      	lsls	r3, r3, #2
 8015294:	4413      	add	r3, r2
 8015296:	005b      	lsls	r3, r3, #1
 8015298:	461a      	mov	r2, r3
 801529a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801529e:	4413      	add	r3, r2
 80152a0:	3b30      	subs	r3, #48	@ 0x30
 80152a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 80152a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80152aa:	1c5a      	adds	r2, r3, #1
 80152ac:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80152b0:	781b      	ldrb	r3, [r3, #0]
 80152b2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 80152b6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80152ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80152bc:	d903      	bls.n	80152c6 <f_printf+0xe6>
 80152be:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80152c2:	2b39      	cmp	r3, #57	@ 0x39
 80152c4:	d9e2      	bls.n	801528c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80152c6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80152ca:	2b6c      	cmp	r3, #108	@ 0x6c
 80152cc:	d003      	beq.n	80152d6 <f_printf+0xf6>
 80152ce:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80152d2:	2b4c      	cmp	r3, #76	@ 0x4c
 80152d4:	d10d      	bne.n	80152f2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 80152d6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80152da:	f043 0304 	orr.w	r3, r3, #4
 80152de:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80152e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80152e6:	1c5a      	adds	r2, r3, #1
 80152e8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 80152f2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	f000 8181 	beq.w	80155fe <f_printf+0x41e>
		d = c;
 80152fc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015300:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8015304:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015308:	2b60      	cmp	r3, #96	@ 0x60
 801530a:	d908      	bls.n	801531e <f_printf+0x13e>
 801530c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015310:	2b7a      	cmp	r3, #122	@ 0x7a
 8015312:	d804      	bhi.n	801531e <f_printf+0x13e>
 8015314:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015318:	3b20      	subs	r3, #32
 801531a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 801531e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015322:	3b42      	subs	r3, #66	@ 0x42
 8015324:	2b16      	cmp	r3, #22
 8015326:	f200 8098 	bhi.w	801545a <f_printf+0x27a>
 801532a:	a201      	add	r2, pc, #4	@ (adr r2, 8015330 <f_printf+0x150>)
 801532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015330:	0801543b 	.word	0x0801543b
 8015334:	08015423 	.word	0x08015423
 8015338:	0801544b 	.word	0x0801544b
 801533c:	0801545b 	.word	0x0801545b
 8015340:	0801545b 	.word	0x0801545b
 8015344:	0801545b 	.word	0x0801545b
 8015348:	0801545b 	.word	0x0801545b
 801534c:	0801545b 	.word	0x0801545b
 8015350:	0801545b 	.word	0x0801545b
 8015354:	0801545b 	.word	0x0801545b
 8015358:	0801545b 	.word	0x0801545b
 801535c:	0801545b 	.word	0x0801545b
 8015360:	0801545b 	.word	0x0801545b
 8015364:	08015443 	.word	0x08015443
 8015368:	0801545b 	.word	0x0801545b
 801536c:	0801545b 	.word	0x0801545b
 8015370:	0801545b 	.word	0x0801545b
 8015374:	0801538d 	.word	0x0801538d
 8015378:	0801545b 	.word	0x0801545b
 801537c:	0801544b 	.word	0x0801544b
 8015380:	0801545b 	.word	0x0801545b
 8015384:	0801545b 	.word	0x0801545b
 8015388:	08015453 	.word	0x08015453
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 801538c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801538e:	1d1a      	adds	r2, r3, #4
 8015390:	67ba      	str	r2, [r7, #120]	@ 0x78
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8015396:	2300      	movs	r3, #0
 8015398:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801539c:	e004      	b.n	80153a8 <f_printf+0x1c8>
 801539e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80153a2:	3301      	adds	r3, #1
 80153a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80153a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80153aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80153ae:	4413      	add	r3, r2
 80153b0:	781b      	ldrb	r3, [r3, #0]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d1f3      	bne.n	801539e <f_printf+0x1be>
			if (!(f & 2)) {
 80153b6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80153ba:	f003 0302 	and.w	r3, r3, #2
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d11a      	bne.n	80153f8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80153c2:	e005      	b.n	80153d0 <f_printf+0x1f0>
 80153c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80153c8:	2120      	movs	r1, #32
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7ff fe90 	bl	80150f0 <putc_bfd>
 80153d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80153d4:	1c5a      	adds	r2, r3, #1
 80153d6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80153da:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80153de:	429a      	cmp	r2, r3
 80153e0:	d8f0      	bhi.n	80153c4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80153e2:	e009      	b.n	80153f8 <f_printf+0x218>
 80153e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80153e6:	1c5a      	adds	r2, r3, #1
 80153e8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80153ea:	781a      	ldrb	r2, [r3, #0]
 80153ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80153f0:	4611      	mov	r1, r2
 80153f2:	4618      	mov	r0, r3
 80153f4:	f7ff fe7c 	bl	80150f0 <putc_bfd>
 80153f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d1f1      	bne.n	80153e4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8015400:	e005      	b.n	801540e <f_printf+0x22e>
 8015402:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015406:	2120      	movs	r1, #32
 8015408:	4618      	mov	r0, r3
 801540a:	f7ff fe71 	bl	80150f0 <putc_bfd>
 801540e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015412:	1c5a      	adds	r2, r3, #1
 8015414:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015418:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801541c:	429a      	cmp	r2, r3
 801541e:	d8f0      	bhi.n	8015402 <f_printf+0x222>
			continue;
 8015420:	e0ea      	b.n	80155f8 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8015422:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015424:	1d1a      	adds	r2, r3, #4
 8015426:	67ba      	str	r2, [r7, #120]	@ 0x78
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	b2da      	uxtb	r2, r3
 801542c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015430:	4611      	mov	r1, r2
 8015432:	4618      	mov	r0, r3
 8015434:	f7ff fe5c 	bl	80150f0 <putc_bfd>
 8015438:	e0de      	b.n	80155f8 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 801543a:	2302      	movs	r3, #2
 801543c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8015440:	e014      	b.n	801546c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8015442:	2308      	movs	r3, #8
 8015444:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8015448:	e010      	b.n	801546c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801544a:	230a      	movs	r3, #10
 801544c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8015450:	e00c      	b.n	801546c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8015452:	2310      	movs	r3, #16
 8015454:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8015458:	e008      	b.n	801546c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801545a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 801545e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015462:	4611      	mov	r1, r2
 8015464:	4618      	mov	r0, r3
 8015466:	f7ff fe43 	bl	80150f0 <putc_bfd>
 801546a:	e0c5      	b.n	80155f8 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801546c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015470:	f003 0304 	and.w	r3, r3, #4
 8015474:	2b00      	cmp	r3, #0
 8015476:	d004      	beq.n	8015482 <f_printf+0x2a2>
 8015478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801547a:	1d1a      	adds	r2, r3, #4
 801547c:	67ba      	str	r2, [r7, #120]	@ 0x78
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	e00c      	b.n	801549c <f_printf+0x2bc>
 8015482:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015486:	2b44      	cmp	r3, #68	@ 0x44
 8015488:	d104      	bne.n	8015494 <f_printf+0x2b4>
 801548a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801548c:	1d1a      	adds	r2, r3, #4
 801548e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	e003      	b.n	801549c <f_printf+0x2bc>
 8015494:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015496:	1d1a      	adds	r2, r3, #4
 8015498:	67ba      	str	r2, [r7, #120]	@ 0x78
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80154a0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80154a4:	2b44      	cmp	r3, #68	@ 0x44
 80154a6:	d10e      	bne.n	80154c6 <f_printf+0x2e6>
 80154a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	da0a      	bge.n	80154c6 <f_printf+0x2e6>
			v = 0 - v;
 80154b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80154b4:	425b      	negs	r3, r3
 80154b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 80154ba:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80154be:	f043 0308 	orr.w	r3, r3, #8
 80154c2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 80154c6:	2300      	movs	r3, #0
 80154c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80154cc:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 80154d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80154d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80154d8:	fb01 f202 	mul.w	r2, r1, r2
 80154dc:	1a9b      	subs	r3, r3, r2
 80154de:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 80154e2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80154e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80154ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80154ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80154f2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80154f6:	2b09      	cmp	r3, #9
 80154f8:	d90b      	bls.n	8015512 <f_printf+0x332>
 80154fa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80154fe:	2b78      	cmp	r3, #120	@ 0x78
 8015500:	d101      	bne.n	8015506 <f_printf+0x326>
 8015502:	2227      	movs	r2, #39	@ 0x27
 8015504:	e000      	b.n	8015508 <f_printf+0x328>
 8015506:	2207      	movs	r2, #7
 8015508:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801550c:	4413      	add	r3, r2
 801550e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 8015512:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015516:	1c5a      	adds	r2, r3, #1
 8015518:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801551c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8015520:	3230      	adds	r2, #48	@ 0x30
 8015522:	b2d2      	uxtb	r2, r2
 8015524:	3398      	adds	r3, #152	@ 0x98
 8015526:	443b      	add	r3, r7
 8015528:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 801552c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015530:	2b00      	cmp	r3, #0
 8015532:	d003      	beq.n	801553c <f_printf+0x35c>
 8015534:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015538:	2b1f      	cmp	r3, #31
 801553a:	d9c7      	bls.n	80154cc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 801553c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015540:	f003 0308 	and.w	r3, r3, #8
 8015544:	2b00      	cmp	r3, #0
 8015546:	d009      	beq.n	801555c <f_printf+0x37c>
 8015548:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801554c:	1c5a      	adds	r2, r3, #1
 801554e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8015552:	3398      	adds	r3, #152	@ 0x98
 8015554:	443b      	add	r3, r7
 8015556:	222d      	movs	r2, #45	@ 0x2d
 8015558:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 801555c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015560:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015564:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015568:	f003 0301 	and.w	r3, r3, #1
 801556c:	2b00      	cmp	r3, #0
 801556e:	d001      	beq.n	8015574 <f_printf+0x394>
 8015570:	2330      	movs	r3, #48	@ 0x30
 8015572:	e000      	b.n	8015576 <f_printf+0x396>
 8015574:	2320      	movs	r3, #32
 8015576:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801557a:	e007      	b.n	801558c <f_printf+0x3ac>
 801557c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8015580:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015584:	4611      	mov	r1, r2
 8015586:	4618      	mov	r0, r3
 8015588:	f7ff fdb2 	bl	80150f0 <putc_bfd>
 801558c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015590:	f003 0302 	and.w	r3, r3, #2
 8015594:	2b00      	cmp	r3, #0
 8015596:	d108      	bne.n	80155aa <f_printf+0x3ca>
 8015598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801559c:	1c5a      	adds	r2, r3, #1
 801559e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80155a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80155a6:	429a      	cmp	r2, r3
 80155a8:	d8e8      	bhi.n	801557c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80155aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80155ae:	3b01      	subs	r3, #1
 80155b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80155b4:	f107 020c 	add.w	r2, r7, #12
 80155b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80155bc:	4413      	add	r3, r2
 80155be:	781a      	ldrb	r2, [r3, #0]
 80155c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80155c4:	4611      	mov	r1, r2
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7ff fd92 	bl	80150f0 <putc_bfd>
		} while (i);
 80155cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d1ea      	bne.n	80155aa <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 80155d4:	e007      	b.n	80155e6 <f_printf+0x406>
 80155d6:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80155da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80155de:	4611      	mov	r1, r2
 80155e0:	4618      	mov	r0, r3
 80155e2:	f7ff fd85 	bl	80150f0 <putc_bfd>
 80155e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80155ea:	1c5a      	adds	r2, r3, #1
 80155ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80155f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d8ee      	bhi.n	80155d6 <f_printf+0x3f6>
		c = *fmt++;
 80155f8:	e600      	b.n	80151fc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80155fa:	bf00      	nop
 80155fc:	e000      	b.n	8015600 <f_printf+0x420>
		if (!c) break;
 80155fe:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8015600:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015604:	4618      	mov	r0, r3
 8015606:	f7ff fdb0 	bl	801516a <putc_flush>
 801560a:	4603      	mov	r3, r0
}
 801560c:	4618      	mov	r0, r3
 801560e:	379c      	adds	r7, #156	@ 0x9c
 8015610:	46bd      	mov	sp, r7
 8015612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015616:	b003      	add	sp, #12
 8015618:	4770      	bx	lr
 801561a:	bf00      	nop

0801561c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801561c:	b480      	push	{r7}
 801561e:	b087      	sub	sp, #28
 8015620:	af00      	add	r7, sp, #0
 8015622:	60f8      	str	r0, [r7, #12]
 8015624:	60b9      	str	r1, [r7, #8]
 8015626:	4613      	mov	r3, r2
 8015628:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801562a:	2301      	movs	r3, #1
 801562c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801562e:	2300      	movs	r3, #0
 8015630:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015632:	4b1f      	ldr	r3, [pc, #124]	@ (80156b0 <FATFS_LinkDriverEx+0x94>)
 8015634:	7a5b      	ldrb	r3, [r3, #9]
 8015636:	b2db      	uxtb	r3, r3
 8015638:	2b00      	cmp	r3, #0
 801563a:	d131      	bne.n	80156a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801563c:	4b1c      	ldr	r3, [pc, #112]	@ (80156b0 <FATFS_LinkDriverEx+0x94>)
 801563e:	7a5b      	ldrb	r3, [r3, #9]
 8015640:	b2db      	uxtb	r3, r3
 8015642:	461a      	mov	r2, r3
 8015644:	4b1a      	ldr	r3, [pc, #104]	@ (80156b0 <FATFS_LinkDriverEx+0x94>)
 8015646:	2100      	movs	r1, #0
 8015648:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801564a:	4b19      	ldr	r3, [pc, #100]	@ (80156b0 <FATFS_LinkDriverEx+0x94>)
 801564c:	7a5b      	ldrb	r3, [r3, #9]
 801564e:	b2db      	uxtb	r3, r3
 8015650:	4a17      	ldr	r2, [pc, #92]	@ (80156b0 <FATFS_LinkDriverEx+0x94>)
 8015652:	009b      	lsls	r3, r3, #2
 8015654:	4413      	add	r3, r2
 8015656:	68fa      	ldr	r2, [r7, #12]
 8015658:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801565a:	4b15      	ldr	r3, [pc, #84]	@ (80156b0 <FATFS_LinkDriverEx+0x94>)
 801565c:	7a5b      	ldrb	r3, [r3, #9]
 801565e:	b2db      	uxtb	r3, r3
 8015660:	461a      	mov	r2, r3
 8015662:	4b13      	ldr	r3, [pc, #76]	@ (80156b0 <FATFS_LinkDriverEx+0x94>)
 8015664:	4413      	add	r3, r2
 8015666:	79fa      	ldrb	r2, [r7, #7]
 8015668:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801566a:	4b11      	ldr	r3, [pc, #68]	@ (80156b0 <FATFS_LinkDriverEx+0x94>)
 801566c:	7a5b      	ldrb	r3, [r3, #9]
 801566e:	b2db      	uxtb	r3, r3
 8015670:	1c5a      	adds	r2, r3, #1
 8015672:	b2d1      	uxtb	r1, r2
 8015674:	4a0e      	ldr	r2, [pc, #56]	@ (80156b0 <FATFS_LinkDriverEx+0x94>)
 8015676:	7251      	strb	r1, [r2, #9]
 8015678:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801567a:	7dbb      	ldrb	r3, [r7, #22]
 801567c:	3330      	adds	r3, #48	@ 0x30
 801567e:	b2da      	uxtb	r2, r3
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	3301      	adds	r3, #1
 8015688:	223a      	movs	r2, #58	@ 0x3a
 801568a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	3302      	adds	r3, #2
 8015690:	222f      	movs	r2, #47	@ 0x2f
 8015692:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	3303      	adds	r3, #3
 8015698:	2200      	movs	r2, #0
 801569a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801569c:	2300      	movs	r3, #0
 801569e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80156a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	371c      	adds	r7, #28
 80156a6:	46bd      	mov	sp, r7
 80156a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ac:	4770      	bx	lr
 80156ae:	bf00      	nop
 80156b0:	240056c8 	.word	0x240056c8

080156b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
 80156bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80156be:	2200      	movs	r2, #0
 80156c0:	6839      	ldr	r1, [r7, #0]
 80156c2:	6878      	ldr	r0, [r7, #4]
 80156c4:	f7ff ffaa 	bl	801561c <FATFS_LinkDriverEx>
 80156c8:	4603      	mov	r3, r0
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3708      	adds	r7, #8
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}
	...

080156d4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80156d4:	b480      	push	{r7}
 80156d6:	b085      	sub	sp, #20
 80156d8:	af00      	add	r7, sp, #0
 80156da:	4603      	mov	r3, r0
 80156dc:	6039      	str	r1, [r7, #0]
 80156de:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80156e0:	88fb      	ldrh	r3, [r7, #6]
 80156e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80156e4:	d802      	bhi.n	80156ec <ff_convert+0x18>
		c = chr;
 80156e6:	88fb      	ldrh	r3, [r7, #6]
 80156e8:	81fb      	strh	r3, [r7, #14]
 80156ea:	e025      	b.n	8015738 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d00b      	beq.n	801570a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80156f2:	88fb      	ldrh	r3, [r7, #6]
 80156f4:	2bff      	cmp	r3, #255	@ 0xff
 80156f6:	d805      	bhi.n	8015704 <ff_convert+0x30>
 80156f8:	88fb      	ldrh	r3, [r7, #6]
 80156fa:	3b80      	subs	r3, #128	@ 0x80
 80156fc:	4a12      	ldr	r2, [pc, #72]	@ (8015748 <ff_convert+0x74>)
 80156fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015702:	e000      	b.n	8015706 <ff_convert+0x32>
 8015704:	2300      	movs	r3, #0
 8015706:	81fb      	strh	r3, [r7, #14]
 8015708:	e016      	b.n	8015738 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801570a:	2300      	movs	r3, #0
 801570c:	81fb      	strh	r3, [r7, #14]
 801570e:	e009      	b.n	8015724 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8015710:	89fb      	ldrh	r3, [r7, #14]
 8015712:	4a0d      	ldr	r2, [pc, #52]	@ (8015748 <ff_convert+0x74>)
 8015714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015718:	88fa      	ldrh	r2, [r7, #6]
 801571a:	429a      	cmp	r2, r3
 801571c:	d006      	beq.n	801572c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801571e:	89fb      	ldrh	r3, [r7, #14]
 8015720:	3301      	adds	r3, #1
 8015722:	81fb      	strh	r3, [r7, #14]
 8015724:	89fb      	ldrh	r3, [r7, #14]
 8015726:	2b7f      	cmp	r3, #127	@ 0x7f
 8015728:	d9f2      	bls.n	8015710 <ff_convert+0x3c>
 801572a:	e000      	b.n	801572e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801572c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801572e:	89fb      	ldrh	r3, [r7, #14]
 8015730:	3380      	adds	r3, #128	@ 0x80
 8015732:	b29b      	uxth	r3, r3
 8015734:	b2db      	uxtb	r3, r3
 8015736:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015738:	89fb      	ldrh	r3, [r7, #14]
}
 801573a:	4618      	mov	r0, r3
 801573c:	3714      	adds	r7, #20
 801573e:	46bd      	mov	sp, r7
 8015740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015744:	4770      	bx	lr
 8015746:	bf00      	nop
 8015748:	080188fc 	.word	0x080188fc

0801574c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801574c:	b480      	push	{r7}
 801574e:	b087      	sub	sp, #28
 8015750:	af00      	add	r7, sp, #0
 8015752:	4603      	mov	r3, r0
 8015754:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015756:	88fb      	ldrh	r3, [r7, #6]
 8015758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801575c:	d201      	bcs.n	8015762 <ff_wtoupper+0x16>
 801575e:	4b3e      	ldr	r3, [pc, #248]	@ (8015858 <ff_wtoupper+0x10c>)
 8015760:	e000      	b.n	8015764 <ff_wtoupper+0x18>
 8015762:	4b3e      	ldr	r3, [pc, #248]	@ (801585c <ff_wtoupper+0x110>)
 8015764:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	1c9a      	adds	r2, r3, #2
 801576a:	617a      	str	r2, [r7, #20]
 801576c:	881b      	ldrh	r3, [r3, #0]
 801576e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8015770:	8a7b      	ldrh	r3, [r7, #18]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d068      	beq.n	8015848 <ff_wtoupper+0xfc>
 8015776:	88fa      	ldrh	r2, [r7, #6]
 8015778:	8a7b      	ldrh	r3, [r7, #18]
 801577a:	429a      	cmp	r2, r3
 801577c:	d364      	bcc.n	8015848 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	1c9a      	adds	r2, r3, #2
 8015782:	617a      	str	r2, [r7, #20]
 8015784:	881b      	ldrh	r3, [r3, #0]
 8015786:	823b      	strh	r3, [r7, #16]
 8015788:	8a3b      	ldrh	r3, [r7, #16]
 801578a:	0a1b      	lsrs	r3, r3, #8
 801578c:	81fb      	strh	r3, [r7, #14]
 801578e:	8a3b      	ldrh	r3, [r7, #16]
 8015790:	b2db      	uxtb	r3, r3
 8015792:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015794:	88fa      	ldrh	r2, [r7, #6]
 8015796:	8a79      	ldrh	r1, [r7, #18]
 8015798:	8a3b      	ldrh	r3, [r7, #16]
 801579a:	440b      	add	r3, r1
 801579c:	429a      	cmp	r2, r3
 801579e:	da49      	bge.n	8015834 <ff_wtoupper+0xe8>
			switch (cmd) {
 80157a0:	89fb      	ldrh	r3, [r7, #14]
 80157a2:	2b08      	cmp	r3, #8
 80157a4:	d84f      	bhi.n	8015846 <ff_wtoupper+0xfa>
 80157a6:	a201      	add	r2, pc, #4	@ (adr r2, 80157ac <ff_wtoupper+0x60>)
 80157a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157ac:	080157d1 	.word	0x080157d1
 80157b0:	080157e3 	.word	0x080157e3
 80157b4:	080157f9 	.word	0x080157f9
 80157b8:	08015801 	.word	0x08015801
 80157bc:	08015809 	.word	0x08015809
 80157c0:	08015811 	.word	0x08015811
 80157c4:	08015819 	.word	0x08015819
 80157c8:	08015821 	.word	0x08015821
 80157cc:	08015829 	.word	0x08015829
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80157d0:	88fa      	ldrh	r2, [r7, #6]
 80157d2:	8a7b      	ldrh	r3, [r7, #18]
 80157d4:	1ad3      	subs	r3, r2, r3
 80157d6:	005b      	lsls	r3, r3, #1
 80157d8:	697a      	ldr	r2, [r7, #20]
 80157da:	4413      	add	r3, r2
 80157dc:	881b      	ldrh	r3, [r3, #0]
 80157de:	80fb      	strh	r3, [r7, #6]
 80157e0:	e027      	b.n	8015832 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80157e2:	88fa      	ldrh	r2, [r7, #6]
 80157e4:	8a7b      	ldrh	r3, [r7, #18]
 80157e6:	1ad3      	subs	r3, r2, r3
 80157e8:	b29b      	uxth	r3, r3
 80157ea:	f003 0301 	and.w	r3, r3, #1
 80157ee:	b29b      	uxth	r3, r3
 80157f0:	88fa      	ldrh	r2, [r7, #6]
 80157f2:	1ad3      	subs	r3, r2, r3
 80157f4:	80fb      	strh	r3, [r7, #6]
 80157f6:	e01c      	b.n	8015832 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80157f8:	88fb      	ldrh	r3, [r7, #6]
 80157fa:	3b10      	subs	r3, #16
 80157fc:	80fb      	strh	r3, [r7, #6]
 80157fe:	e018      	b.n	8015832 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015800:	88fb      	ldrh	r3, [r7, #6]
 8015802:	3b20      	subs	r3, #32
 8015804:	80fb      	strh	r3, [r7, #6]
 8015806:	e014      	b.n	8015832 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015808:	88fb      	ldrh	r3, [r7, #6]
 801580a:	3b30      	subs	r3, #48	@ 0x30
 801580c:	80fb      	strh	r3, [r7, #6]
 801580e:	e010      	b.n	8015832 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015810:	88fb      	ldrh	r3, [r7, #6]
 8015812:	3b1a      	subs	r3, #26
 8015814:	80fb      	strh	r3, [r7, #6]
 8015816:	e00c      	b.n	8015832 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015818:	88fb      	ldrh	r3, [r7, #6]
 801581a:	3308      	adds	r3, #8
 801581c:	80fb      	strh	r3, [r7, #6]
 801581e:	e008      	b.n	8015832 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015820:	88fb      	ldrh	r3, [r7, #6]
 8015822:	3b50      	subs	r3, #80	@ 0x50
 8015824:	80fb      	strh	r3, [r7, #6]
 8015826:	e004      	b.n	8015832 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015828:	88fb      	ldrh	r3, [r7, #6]
 801582a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801582e:	80fb      	strh	r3, [r7, #6]
 8015830:	bf00      	nop
			}
			break;
 8015832:	e008      	b.n	8015846 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015834:	89fb      	ldrh	r3, [r7, #14]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d195      	bne.n	8015766 <ff_wtoupper+0x1a>
 801583a:	8a3b      	ldrh	r3, [r7, #16]
 801583c:	005b      	lsls	r3, r3, #1
 801583e:	697a      	ldr	r2, [r7, #20]
 8015840:	4413      	add	r3, r2
 8015842:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015844:	e78f      	b.n	8015766 <ff_wtoupper+0x1a>
			break;
 8015846:	bf00      	nop
	}

	return chr;
 8015848:	88fb      	ldrh	r3, [r7, #6]
}
 801584a:	4618      	mov	r0, r3
 801584c:	371c      	adds	r7, #28
 801584e:	46bd      	mov	sp, r7
 8015850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015854:	4770      	bx	lr
 8015856:	bf00      	nop
 8015858:	080189fc 	.word	0x080189fc
 801585c:	08018bf0 	.word	0x08018bf0

08015860 <atof>:
 8015860:	2100      	movs	r1, #0
 8015862:	f000 bdb7 	b.w	80163d4 <strtod>

08015866 <atoi>:
 8015866:	220a      	movs	r2, #10
 8015868:	2100      	movs	r1, #0
 801586a:	f000 be39 	b.w	80164e0 <strtol>

0801586e <sulp>:
 801586e:	b570      	push	{r4, r5, r6, lr}
 8015870:	4604      	mov	r4, r0
 8015872:	460d      	mov	r5, r1
 8015874:	4616      	mov	r6, r2
 8015876:	ec45 4b10 	vmov	d0, r4, r5
 801587a:	f001 ffa9 	bl	80177d0 <__ulp>
 801587e:	b17e      	cbz	r6, 80158a0 <sulp+0x32>
 8015880:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015884:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015888:	2b00      	cmp	r3, #0
 801588a:	dd09      	ble.n	80158a0 <sulp+0x32>
 801588c:	051b      	lsls	r3, r3, #20
 801588e:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015892:	2000      	movs	r0, #0
 8015894:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8015898:	ec41 0b17 	vmov	d7, r0, r1
 801589c:	ee20 0b07 	vmul.f64	d0, d0, d7
 80158a0:	bd70      	pop	{r4, r5, r6, pc}
 80158a2:	0000      	movs	r0, r0
 80158a4:	0000      	movs	r0, r0
	...

080158a8 <_strtod_l>:
 80158a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ac:	ed2d 8b0a 	vpush	{d8-d12}
 80158b0:	b097      	sub	sp, #92	@ 0x5c
 80158b2:	4688      	mov	r8, r1
 80158b4:	920e      	str	r2, [sp, #56]	@ 0x38
 80158b6:	2200      	movs	r2, #0
 80158b8:	9212      	str	r2, [sp, #72]	@ 0x48
 80158ba:	9005      	str	r0, [sp, #20]
 80158bc:	f04f 0a00 	mov.w	sl, #0
 80158c0:	f04f 0b00 	mov.w	fp, #0
 80158c4:	460a      	mov	r2, r1
 80158c6:	9211      	str	r2, [sp, #68]	@ 0x44
 80158c8:	7811      	ldrb	r1, [r2, #0]
 80158ca:	292b      	cmp	r1, #43	@ 0x2b
 80158cc:	d04c      	beq.n	8015968 <_strtod_l+0xc0>
 80158ce:	d839      	bhi.n	8015944 <_strtod_l+0x9c>
 80158d0:	290d      	cmp	r1, #13
 80158d2:	d833      	bhi.n	801593c <_strtod_l+0x94>
 80158d4:	2908      	cmp	r1, #8
 80158d6:	d833      	bhi.n	8015940 <_strtod_l+0x98>
 80158d8:	2900      	cmp	r1, #0
 80158da:	d03c      	beq.n	8015956 <_strtod_l+0xae>
 80158dc:	2200      	movs	r2, #0
 80158de:	9208      	str	r2, [sp, #32]
 80158e0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80158e2:	782a      	ldrb	r2, [r5, #0]
 80158e4:	2a30      	cmp	r2, #48	@ 0x30
 80158e6:	f040 80b5 	bne.w	8015a54 <_strtod_l+0x1ac>
 80158ea:	786a      	ldrb	r2, [r5, #1]
 80158ec:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80158f0:	2a58      	cmp	r2, #88	@ 0x58
 80158f2:	d170      	bne.n	80159d6 <_strtod_l+0x12e>
 80158f4:	9302      	str	r3, [sp, #8]
 80158f6:	9b08      	ldr	r3, [sp, #32]
 80158f8:	9301      	str	r3, [sp, #4]
 80158fa:	ab12      	add	r3, sp, #72	@ 0x48
 80158fc:	9300      	str	r3, [sp, #0]
 80158fe:	4a8b      	ldr	r2, [pc, #556]	@ (8015b2c <_strtod_l+0x284>)
 8015900:	9805      	ldr	r0, [sp, #20]
 8015902:	ab13      	add	r3, sp, #76	@ 0x4c
 8015904:	a911      	add	r1, sp, #68	@ 0x44
 8015906:	f001 f85d 	bl	80169c4 <__gethex>
 801590a:	f010 060f 	ands.w	r6, r0, #15
 801590e:	4604      	mov	r4, r0
 8015910:	d005      	beq.n	801591e <_strtod_l+0x76>
 8015912:	2e06      	cmp	r6, #6
 8015914:	d12a      	bne.n	801596c <_strtod_l+0xc4>
 8015916:	3501      	adds	r5, #1
 8015918:	2300      	movs	r3, #0
 801591a:	9511      	str	r5, [sp, #68]	@ 0x44
 801591c:	9308      	str	r3, [sp, #32]
 801591e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015920:	2b00      	cmp	r3, #0
 8015922:	f040 852f 	bne.w	8016384 <_strtod_l+0xadc>
 8015926:	9b08      	ldr	r3, [sp, #32]
 8015928:	ec4b ab10 	vmov	d0, sl, fp
 801592c:	b1cb      	cbz	r3, 8015962 <_strtod_l+0xba>
 801592e:	eeb1 0b40 	vneg.f64	d0, d0
 8015932:	b017      	add	sp, #92	@ 0x5c
 8015934:	ecbd 8b0a 	vpop	{d8-d12}
 8015938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801593c:	2920      	cmp	r1, #32
 801593e:	d1cd      	bne.n	80158dc <_strtod_l+0x34>
 8015940:	3201      	adds	r2, #1
 8015942:	e7c0      	b.n	80158c6 <_strtod_l+0x1e>
 8015944:	292d      	cmp	r1, #45	@ 0x2d
 8015946:	d1c9      	bne.n	80158dc <_strtod_l+0x34>
 8015948:	2101      	movs	r1, #1
 801594a:	9108      	str	r1, [sp, #32]
 801594c:	1c51      	adds	r1, r2, #1
 801594e:	9111      	str	r1, [sp, #68]	@ 0x44
 8015950:	7852      	ldrb	r2, [r2, #1]
 8015952:	2a00      	cmp	r2, #0
 8015954:	d1c4      	bne.n	80158e0 <_strtod_l+0x38>
 8015956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015958:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 801595c:	2b00      	cmp	r3, #0
 801595e:	f040 850f 	bne.w	8016380 <_strtod_l+0xad8>
 8015962:	ec4b ab10 	vmov	d0, sl, fp
 8015966:	e7e4      	b.n	8015932 <_strtod_l+0x8a>
 8015968:	2100      	movs	r1, #0
 801596a:	e7ee      	b.n	801594a <_strtod_l+0xa2>
 801596c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801596e:	b13a      	cbz	r2, 8015980 <_strtod_l+0xd8>
 8015970:	2135      	movs	r1, #53	@ 0x35
 8015972:	a814      	add	r0, sp, #80	@ 0x50
 8015974:	f002 f823 	bl	80179be <__copybits>
 8015978:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801597a:	9805      	ldr	r0, [sp, #20]
 801597c:	f001 fbf4 	bl	8017168 <_Bfree>
 8015980:	1e73      	subs	r3, r6, #1
 8015982:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015984:	2b04      	cmp	r3, #4
 8015986:	d806      	bhi.n	8015996 <_strtod_l+0xee>
 8015988:	e8df f003 	tbb	[pc, r3]
 801598c:	201d0314 	.word	0x201d0314
 8015990:	14          	.byte	0x14
 8015991:	00          	.byte	0x00
 8015992:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8015996:	05e3      	lsls	r3, r4, #23
 8015998:	bf48      	it	mi
 801599a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801599e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80159a2:	0d1b      	lsrs	r3, r3, #20
 80159a4:	051b      	lsls	r3, r3, #20
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d1b9      	bne.n	801591e <_strtod_l+0x76>
 80159aa:	f000 ff15 	bl	80167d8 <__errno>
 80159ae:	2322      	movs	r3, #34	@ 0x22
 80159b0:	6003      	str	r3, [r0, #0]
 80159b2:	e7b4      	b.n	801591e <_strtod_l+0x76>
 80159b4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 80159b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80159bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80159c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80159c4:	e7e7      	b.n	8015996 <_strtod_l+0xee>
 80159c6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8015b34 <_strtod_l+0x28c>
 80159ca:	e7e4      	b.n	8015996 <_strtod_l+0xee>
 80159cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80159d0:	f04f 3aff 	mov.w	sl, #4294967295
 80159d4:	e7df      	b.n	8015996 <_strtod_l+0xee>
 80159d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80159d8:	1c5a      	adds	r2, r3, #1
 80159da:	9211      	str	r2, [sp, #68]	@ 0x44
 80159dc:	785b      	ldrb	r3, [r3, #1]
 80159de:	2b30      	cmp	r3, #48	@ 0x30
 80159e0:	d0f9      	beq.n	80159d6 <_strtod_l+0x12e>
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d09b      	beq.n	801591e <_strtod_l+0x76>
 80159e6:	2301      	movs	r3, #1
 80159e8:	2600      	movs	r6, #0
 80159ea:	9307      	str	r3, [sp, #28]
 80159ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80159ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80159f0:	46b1      	mov	r9, r6
 80159f2:	4635      	mov	r5, r6
 80159f4:	220a      	movs	r2, #10
 80159f6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80159f8:	7804      	ldrb	r4, [r0, #0]
 80159fa:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80159fe:	b2d9      	uxtb	r1, r3
 8015a00:	2909      	cmp	r1, #9
 8015a02:	d929      	bls.n	8015a58 <_strtod_l+0x1b0>
 8015a04:	494a      	ldr	r1, [pc, #296]	@ (8015b30 <_strtod_l+0x288>)
 8015a06:	2201      	movs	r2, #1
 8015a08:	f000 fe8e 	bl	8016728 <strncmp>
 8015a0c:	b378      	cbz	r0, 8015a6e <_strtod_l+0x1c6>
 8015a0e:	2000      	movs	r0, #0
 8015a10:	4622      	mov	r2, r4
 8015a12:	462b      	mov	r3, r5
 8015a14:	4607      	mov	r7, r0
 8015a16:	9006      	str	r0, [sp, #24]
 8015a18:	2a65      	cmp	r2, #101	@ 0x65
 8015a1a:	d001      	beq.n	8015a20 <_strtod_l+0x178>
 8015a1c:	2a45      	cmp	r2, #69	@ 0x45
 8015a1e:	d117      	bne.n	8015a50 <_strtod_l+0x1a8>
 8015a20:	b91b      	cbnz	r3, 8015a2a <_strtod_l+0x182>
 8015a22:	9b07      	ldr	r3, [sp, #28]
 8015a24:	4303      	orrs	r3, r0
 8015a26:	d096      	beq.n	8015956 <_strtod_l+0xae>
 8015a28:	2300      	movs	r3, #0
 8015a2a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8015a2e:	f108 0201 	add.w	r2, r8, #1
 8015a32:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a34:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015a38:	2a2b      	cmp	r2, #43	@ 0x2b
 8015a3a:	d06b      	beq.n	8015b14 <_strtod_l+0x26c>
 8015a3c:	2a2d      	cmp	r2, #45	@ 0x2d
 8015a3e:	d071      	beq.n	8015b24 <_strtod_l+0x27c>
 8015a40:	f04f 0e00 	mov.w	lr, #0
 8015a44:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015a48:	2c09      	cmp	r4, #9
 8015a4a:	d979      	bls.n	8015b40 <_strtod_l+0x298>
 8015a4c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8015a50:	2400      	movs	r4, #0
 8015a52:	e094      	b.n	8015b7e <_strtod_l+0x2d6>
 8015a54:	2300      	movs	r3, #0
 8015a56:	e7c7      	b.n	80159e8 <_strtod_l+0x140>
 8015a58:	2d08      	cmp	r5, #8
 8015a5a:	f100 0001 	add.w	r0, r0, #1
 8015a5e:	bfd4      	ite	le
 8015a60:	fb02 3909 	mlale	r9, r2, r9, r3
 8015a64:	fb02 3606 	mlagt	r6, r2, r6, r3
 8015a68:	3501      	adds	r5, #1
 8015a6a:	9011      	str	r0, [sp, #68]	@ 0x44
 8015a6c:	e7c3      	b.n	80159f6 <_strtod_l+0x14e>
 8015a6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a70:	1c5a      	adds	r2, r3, #1
 8015a72:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a74:	785a      	ldrb	r2, [r3, #1]
 8015a76:	b375      	cbz	r5, 8015ad6 <_strtod_l+0x22e>
 8015a78:	4607      	mov	r7, r0
 8015a7a:	462b      	mov	r3, r5
 8015a7c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015a80:	2909      	cmp	r1, #9
 8015a82:	d913      	bls.n	8015aac <_strtod_l+0x204>
 8015a84:	2101      	movs	r1, #1
 8015a86:	9106      	str	r1, [sp, #24]
 8015a88:	e7c6      	b.n	8015a18 <_strtod_l+0x170>
 8015a8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015a8c:	1c5a      	adds	r2, r3, #1
 8015a8e:	9211      	str	r2, [sp, #68]	@ 0x44
 8015a90:	785a      	ldrb	r2, [r3, #1]
 8015a92:	3001      	adds	r0, #1
 8015a94:	2a30      	cmp	r2, #48	@ 0x30
 8015a96:	d0f8      	beq.n	8015a8a <_strtod_l+0x1e2>
 8015a98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015a9c:	2b08      	cmp	r3, #8
 8015a9e:	f200 8476 	bhi.w	801638e <_strtod_l+0xae6>
 8015aa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015aa4:	930a      	str	r3, [sp, #40]	@ 0x28
 8015aa6:	4607      	mov	r7, r0
 8015aa8:	2000      	movs	r0, #0
 8015aaa:	4603      	mov	r3, r0
 8015aac:	3a30      	subs	r2, #48	@ 0x30
 8015aae:	f100 0101 	add.w	r1, r0, #1
 8015ab2:	d023      	beq.n	8015afc <_strtod_l+0x254>
 8015ab4:	440f      	add	r7, r1
 8015ab6:	eb00 0c03 	add.w	ip, r0, r3
 8015aba:	4619      	mov	r1, r3
 8015abc:	240a      	movs	r4, #10
 8015abe:	4561      	cmp	r1, ip
 8015ac0:	d10b      	bne.n	8015ada <_strtod_l+0x232>
 8015ac2:	1c5c      	adds	r4, r3, #1
 8015ac4:	4403      	add	r3, r0
 8015ac6:	2b08      	cmp	r3, #8
 8015ac8:	4404      	add	r4, r0
 8015aca:	dc11      	bgt.n	8015af0 <_strtod_l+0x248>
 8015acc:	230a      	movs	r3, #10
 8015ace:	fb03 2909 	mla	r9, r3, r9, r2
 8015ad2:	2100      	movs	r1, #0
 8015ad4:	e013      	b.n	8015afe <_strtod_l+0x256>
 8015ad6:	4628      	mov	r0, r5
 8015ad8:	e7dc      	b.n	8015a94 <_strtod_l+0x1ec>
 8015ada:	2908      	cmp	r1, #8
 8015adc:	f101 0101 	add.w	r1, r1, #1
 8015ae0:	dc02      	bgt.n	8015ae8 <_strtod_l+0x240>
 8015ae2:	fb04 f909 	mul.w	r9, r4, r9
 8015ae6:	e7ea      	b.n	8015abe <_strtod_l+0x216>
 8015ae8:	2910      	cmp	r1, #16
 8015aea:	bfd8      	it	le
 8015aec:	4366      	mulle	r6, r4
 8015aee:	e7e6      	b.n	8015abe <_strtod_l+0x216>
 8015af0:	2b0f      	cmp	r3, #15
 8015af2:	dcee      	bgt.n	8015ad2 <_strtod_l+0x22a>
 8015af4:	230a      	movs	r3, #10
 8015af6:	fb03 2606 	mla	r6, r3, r6, r2
 8015afa:	e7ea      	b.n	8015ad2 <_strtod_l+0x22a>
 8015afc:	461c      	mov	r4, r3
 8015afe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015b00:	1c5a      	adds	r2, r3, #1
 8015b02:	9211      	str	r2, [sp, #68]	@ 0x44
 8015b04:	785a      	ldrb	r2, [r3, #1]
 8015b06:	4608      	mov	r0, r1
 8015b08:	4623      	mov	r3, r4
 8015b0a:	e7b7      	b.n	8015a7c <_strtod_l+0x1d4>
 8015b0c:	2301      	movs	r3, #1
 8015b0e:	2700      	movs	r7, #0
 8015b10:	9306      	str	r3, [sp, #24]
 8015b12:	e786      	b.n	8015a22 <_strtod_l+0x17a>
 8015b14:	f04f 0e00 	mov.w	lr, #0
 8015b18:	f108 0202 	add.w	r2, r8, #2
 8015b1c:	9211      	str	r2, [sp, #68]	@ 0x44
 8015b1e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015b22:	e78f      	b.n	8015a44 <_strtod_l+0x19c>
 8015b24:	f04f 0e01 	mov.w	lr, #1
 8015b28:	e7f6      	b.n	8015b18 <_strtod_l+0x270>
 8015b2a:	bf00      	nop
 8015b2c:	08018cd0 	.word	0x08018cd0
 8015b30:	08018cac 	.word	0x08018cac
 8015b34:	7ff00000 	.word	0x7ff00000
 8015b38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b3a:	1c54      	adds	r4, r2, #1
 8015b3c:	9411      	str	r4, [sp, #68]	@ 0x44
 8015b3e:	7852      	ldrb	r2, [r2, #1]
 8015b40:	2a30      	cmp	r2, #48	@ 0x30
 8015b42:	d0f9      	beq.n	8015b38 <_strtod_l+0x290>
 8015b44:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8015b48:	2c08      	cmp	r4, #8
 8015b4a:	d881      	bhi.n	8015a50 <_strtod_l+0x1a8>
 8015b4c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8015b50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b52:	9209      	str	r2, [sp, #36]	@ 0x24
 8015b54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015b56:	1c51      	adds	r1, r2, #1
 8015b58:	9111      	str	r1, [sp, #68]	@ 0x44
 8015b5a:	7852      	ldrb	r2, [r2, #1]
 8015b5c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8015b60:	2c09      	cmp	r4, #9
 8015b62:	d938      	bls.n	8015bd6 <_strtod_l+0x32e>
 8015b64:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015b66:	1b0c      	subs	r4, r1, r4
 8015b68:	2c08      	cmp	r4, #8
 8015b6a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8015b6e:	dc02      	bgt.n	8015b76 <_strtod_l+0x2ce>
 8015b70:	4564      	cmp	r4, ip
 8015b72:	bfa8      	it	ge
 8015b74:	4664      	movge	r4, ip
 8015b76:	f1be 0f00 	cmp.w	lr, #0
 8015b7a:	d000      	beq.n	8015b7e <_strtod_l+0x2d6>
 8015b7c:	4264      	negs	r4, r4
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d14e      	bne.n	8015c20 <_strtod_l+0x378>
 8015b82:	9b07      	ldr	r3, [sp, #28]
 8015b84:	4318      	orrs	r0, r3
 8015b86:	f47f aeca 	bne.w	801591e <_strtod_l+0x76>
 8015b8a:	9b06      	ldr	r3, [sp, #24]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	f47f aee2 	bne.w	8015956 <_strtod_l+0xae>
 8015b92:	2a69      	cmp	r2, #105	@ 0x69
 8015b94:	d027      	beq.n	8015be6 <_strtod_l+0x33e>
 8015b96:	dc24      	bgt.n	8015be2 <_strtod_l+0x33a>
 8015b98:	2a49      	cmp	r2, #73	@ 0x49
 8015b9a:	d024      	beq.n	8015be6 <_strtod_l+0x33e>
 8015b9c:	2a4e      	cmp	r2, #78	@ 0x4e
 8015b9e:	f47f aeda 	bne.w	8015956 <_strtod_l+0xae>
 8015ba2:	4997      	ldr	r1, [pc, #604]	@ (8015e00 <_strtod_l+0x558>)
 8015ba4:	a811      	add	r0, sp, #68	@ 0x44
 8015ba6:	f001 f92f 	bl	8016e08 <__match>
 8015baa:	2800      	cmp	r0, #0
 8015bac:	f43f aed3 	beq.w	8015956 <_strtod_l+0xae>
 8015bb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015bb2:	781b      	ldrb	r3, [r3, #0]
 8015bb4:	2b28      	cmp	r3, #40	@ 0x28
 8015bb6:	d12d      	bne.n	8015c14 <_strtod_l+0x36c>
 8015bb8:	4992      	ldr	r1, [pc, #584]	@ (8015e04 <_strtod_l+0x55c>)
 8015bba:	aa14      	add	r2, sp, #80	@ 0x50
 8015bbc:	a811      	add	r0, sp, #68	@ 0x44
 8015bbe:	f001 f937 	bl	8016e30 <__hexnan>
 8015bc2:	2805      	cmp	r0, #5
 8015bc4:	d126      	bne.n	8015c14 <_strtod_l+0x36c>
 8015bc6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015bc8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8015bcc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8015bd0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015bd4:	e6a3      	b.n	801591e <_strtod_l+0x76>
 8015bd6:	240a      	movs	r4, #10
 8015bd8:	fb04 2c0c 	mla	ip, r4, ip, r2
 8015bdc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8015be0:	e7b8      	b.n	8015b54 <_strtod_l+0x2ac>
 8015be2:	2a6e      	cmp	r2, #110	@ 0x6e
 8015be4:	e7db      	b.n	8015b9e <_strtod_l+0x2f6>
 8015be6:	4988      	ldr	r1, [pc, #544]	@ (8015e08 <_strtod_l+0x560>)
 8015be8:	a811      	add	r0, sp, #68	@ 0x44
 8015bea:	f001 f90d 	bl	8016e08 <__match>
 8015bee:	2800      	cmp	r0, #0
 8015bf0:	f43f aeb1 	beq.w	8015956 <_strtod_l+0xae>
 8015bf4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015bf6:	4985      	ldr	r1, [pc, #532]	@ (8015e0c <_strtod_l+0x564>)
 8015bf8:	3b01      	subs	r3, #1
 8015bfa:	a811      	add	r0, sp, #68	@ 0x44
 8015bfc:	9311      	str	r3, [sp, #68]	@ 0x44
 8015bfe:	f001 f903 	bl	8016e08 <__match>
 8015c02:	b910      	cbnz	r0, 8015c0a <_strtod_l+0x362>
 8015c04:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015c06:	3301      	adds	r3, #1
 8015c08:	9311      	str	r3, [sp, #68]	@ 0x44
 8015c0a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8015e20 <_strtod_l+0x578>
 8015c0e:	f04f 0a00 	mov.w	sl, #0
 8015c12:	e684      	b.n	801591e <_strtod_l+0x76>
 8015c14:	487e      	ldr	r0, [pc, #504]	@ (8015e10 <_strtod_l+0x568>)
 8015c16:	f000 fe1b 	bl	8016850 <nan>
 8015c1a:	ec5b ab10 	vmov	sl, fp, d0
 8015c1e:	e67e      	b.n	801591e <_strtod_l+0x76>
 8015c20:	ee07 9a90 	vmov	s15, r9
 8015c24:	1be2      	subs	r2, r4, r7
 8015c26:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015c2a:	2d00      	cmp	r5, #0
 8015c2c:	bf08      	it	eq
 8015c2e:	461d      	moveq	r5, r3
 8015c30:	2b10      	cmp	r3, #16
 8015c32:	9209      	str	r2, [sp, #36]	@ 0x24
 8015c34:	461a      	mov	r2, r3
 8015c36:	bfa8      	it	ge
 8015c38:	2210      	movge	r2, #16
 8015c3a:	2b09      	cmp	r3, #9
 8015c3c:	ec5b ab17 	vmov	sl, fp, d7
 8015c40:	dc15      	bgt.n	8015c6e <_strtod_l+0x3c6>
 8015c42:	1be1      	subs	r1, r4, r7
 8015c44:	2900      	cmp	r1, #0
 8015c46:	f43f ae6a 	beq.w	801591e <_strtod_l+0x76>
 8015c4a:	eba4 0107 	sub.w	r1, r4, r7
 8015c4e:	dd72      	ble.n	8015d36 <_strtod_l+0x48e>
 8015c50:	2916      	cmp	r1, #22
 8015c52:	dc59      	bgt.n	8015d08 <_strtod_l+0x460>
 8015c54:	4b6f      	ldr	r3, [pc, #444]	@ (8015e14 <_strtod_l+0x56c>)
 8015c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c5c:	ed93 7b00 	vldr	d7, [r3]
 8015c60:	ec4b ab16 	vmov	d6, sl, fp
 8015c64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015c68:	ec5b ab17 	vmov	sl, fp, d7
 8015c6c:	e657      	b.n	801591e <_strtod_l+0x76>
 8015c6e:	4969      	ldr	r1, [pc, #420]	@ (8015e14 <_strtod_l+0x56c>)
 8015c70:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8015c74:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8015c78:	ee06 6a90 	vmov	s13, r6
 8015c7c:	2b0f      	cmp	r3, #15
 8015c7e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8015c82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015c86:	ec5b ab16 	vmov	sl, fp, d6
 8015c8a:	ddda      	ble.n	8015c42 <_strtod_l+0x39a>
 8015c8c:	1a9a      	subs	r2, r3, r2
 8015c8e:	1be1      	subs	r1, r4, r7
 8015c90:	440a      	add	r2, r1
 8015c92:	2a00      	cmp	r2, #0
 8015c94:	f340 8094 	ble.w	8015dc0 <_strtod_l+0x518>
 8015c98:	f012 000f 	ands.w	r0, r2, #15
 8015c9c:	d00a      	beq.n	8015cb4 <_strtod_l+0x40c>
 8015c9e:	495d      	ldr	r1, [pc, #372]	@ (8015e14 <_strtod_l+0x56c>)
 8015ca0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015ca4:	ed91 7b00 	vldr	d7, [r1]
 8015ca8:	ec4b ab16 	vmov	d6, sl, fp
 8015cac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015cb0:	ec5b ab17 	vmov	sl, fp, d7
 8015cb4:	f032 020f 	bics.w	r2, r2, #15
 8015cb8:	d073      	beq.n	8015da2 <_strtod_l+0x4fa>
 8015cba:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8015cbe:	dd47      	ble.n	8015d50 <_strtod_l+0x4a8>
 8015cc0:	2400      	movs	r4, #0
 8015cc2:	4625      	mov	r5, r4
 8015cc4:	9407      	str	r4, [sp, #28]
 8015cc6:	4626      	mov	r6, r4
 8015cc8:	9a05      	ldr	r2, [sp, #20]
 8015cca:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015e20 <_strtod_l+0x578>
 8015cce:	2322      	movs	r3, #34	@ 0x22
 8015cd0:	6013      	str	r3, [r2, #0]
 8015cd2:	f04f 0a00 	mov.w	sl, #0
 8015cd6:	9b07      	ldr	r3, [sp, #28]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	f43f ae20 	beq.w	801591e <_strtod_l+0x76>
 8015cde:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015ce0:	9805      	ldr	r0, [sp, #20]
 8015ce2:	f001 fa41 	bl	8017168 <_Bfree>
 8015ce6:	9805      	ldr	r0, [sp, #20]
 8015ce8:	4631      	mov	r1, r6
 8015cea:	f001 fa3d 	bl	8017168 <_Bfree>
 8015cee:	9805      	ldr	r0, [sp, #20]
 8015cf0:	4629      	mov	r1, r5
 8015cf2:	f001 fa39 	bl	8017168 <_Bfree>
 8015cf6:	9907      	ldr	r1, [sp, #28]
 8015cf8:	9805      	ldr	r0, [sp, #20]
 8015cfa:	f001 fa35 	bl	8017168 <_Bfree>
 8015cfe:	9805      	ldr	r0, [sp, #20]
 8015d00:	4621      	mov	r1, r4
 8015d02:	f001 fa31 	bl	8017168 <_Bfree>
 8015d06:	e60a      	b.n	801591e <_strtod_l+0x76>
 8015d08:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8015d0c:	1be0      	subs	r0, r4, r7
 8015d0e:	4281      	cmp	r1, r0
 8015d10:	dbbc      	blt.n	8015c8c <_strtod_l+0x3e4>
 8015d12:	4a40      	ldr	r2, [pc, #256]	@ (8015e14 <_strtod_l+0x56c>)
 8015d14:	f1c3 030f 	rsb	r3, r3, #15
 8015d18:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8015d1c:	ed91 7b00 	vldr	d7, [r1]
 8015d20:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015d22:	ec4b ab16 	vmov	d6, sl, fp
 8015d26:	1acb      	subs	r3, r1, r3
 8015d28:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8015d2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d30:	ed92 6b00 	vldr	d6, [r2]
 8015d34:	e796      	b.n	8015c64 <_strtod_l+0x3bc>
 8015d36:	3116      	adds	r1, #22
 8015d38:	dba8      	blt.n	8015c8c <_strtod_l+0x3e4>
 8015d3a:	4b36      	ldr	r3, [pc, #216]	@ (8015e14 <_strtod_l+0x56c>)
 8015d3c:	1b3c      	subs	r4, r7, r4
 8015d3e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015d42:	ed94 7b00 	vldr	d7, [r4]
 8015d46:	ec4b ab16 	vmov	d6, sl, fp
 8015d4a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015d4e:	e78b      	b.n	8015c68 <_strtod_l+0x3c0>
 8015d50:	2000      	movs	r0, #0
 8015d52:	ec4b ab17 	vmov	d7, sl, fp
 8015d56:	4e30      	ldr	r6, [pc, #192]	@ (8015e18 <_strtod_l+0x570>)
 8015d58:	1112      	asrs	r2, r2, #4
 8015d5a:	4601      	mov	r1, r0
 8015d5c:	2a01      	cmp	r2, #1
 8015d5e:	dc23      	bgt.n	8015da8 <_strtod_l+0x500>
 8015d60:	b108      	cbz	r0, 8015d66 <_strtod_l+0x4be>
 8015d62:	ec5b ab17 	vmov	sl, fp, d7
 8015d66:	4a2c      	ldr	r2, [pc, #176]	@ (8015e18 <_strtod_l+0x570>)
 8015d68:	482c      	ldr	r0, [pc, #176]	@ (8015e1c <_strtod_l+0x574>)
 8015d6a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015d6e:	ed92 7b00 	vldr	d7, [r2]
 8015d72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015d76:	ec4b ab16 	vmov	d6, sl, fp
 8015d7a:	4a29      	ldr	r2, [pc, #164]	@ (8015e20 <_strtod_l+0x578>)
 8015d7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d80:	ee17 1a90 	vmov	r1, s15
 8015d84:	400a      	ands	r2, r1
 8015d86:	4282      	cmp	r2, r0
 8015d88:	ec5b ab17 	vmov	sl, fp, d7
 8015d8c:	d898      	bhi.n	8015cc0 <_strtod_l+0x418>
 8015d8e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8015d92:	4282      	cmp	r2, r0
 8015d94:	bf86      	itte	hi
 8015d96:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8015e24 <_strtod_l+0x57c>
 8015d9a:	f04f 3aff 	movhi.w	sl, #4294967295
 8015d9e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8015da2:	2200      	movs	r2, #0
 8015da4:	9206      	str	r2, [sp, #24]
 8015da6:	e076      	b.n	8015e96 <_strtod_l+0x5ee>
 8015da8:	f012 0f01 	tst.w	r2, #1
 8015dac:	d004      	beq.n	8015db8 <_strtod_l+0x510>
 8015dae:	ed96 6b00 	vldr	d6, [r6]
 8015db2:	2001      	movs	r0, #1
 8015db4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015db8:	3101      	adds	r1, #1
 8015dba:	1052      	asrs	r2, r2, #1
 8015dbc:	3608      	adds	r6, #8
 8015dbe:	e7cd      	b.n	8015d5c <_strtod_l+0x4b4>
 8015dc0:	d0ef      	beq.n	8015da2 <_strtod_l+0x4fa>
 8015dc2:	4252      	negs	r2, r2
 8015dc4:	f012 000f 	ands.w	r0, r2, #15
 8015dc8:	d00a      	beq.n	8015de0 <_strtod_l+0x538>
 8015dca:	4912      	ldr	r1, [pc, #72]	@ (8015e14 <_strtod_l+0x56c>)
 8015dcc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015dd0:	ed91 7b00 	vldr	d7, [r1]
 8015dd4:	ec4b ab16 	vmov	d6, sl, fp
 8015dd8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015ddc:	ec5b ab17 	vmov	sl, fp, d7
 8015de0:	1112      	asrs	r2, r2, #4
 8015de2:	d0de      	beq.n	8015da2 <_strtod_l+0x4fa>
 8015de4:	2a1f      	cmp	r2, #31
 8015de6:	dd1f      	ble.n	8015e28 <_strtod_l+0x580>
 8015de8:	2400      	movs	r4, #0
 8015dea:	4625      	mov	r5, r4
 8015dec:	9407      	str	r4, [sp, #28]
 8015dee:	4626      	mov	r6, r4
 8015df0:	9a05      	ldr	r2, [sp, #20]
 8015df2:	2322      	movs	r3, #34	@ 0x22
 8015df4:	f04f 0a00 	mov.w	sl, #0
 8015df8:	f04f 0b00 	mov.w	fp, #0
 8015dfc:	6013      	str	r3, [r2, #0]
 8015dfe:	e76a      	b.n	8015cd6 <_strtod_l+0x42e>
 8015e00:	08018cb7 	.word	0x08018cb7
 8015e04:	08018cbc 	.word	0x08018cbc
 8015e08:	08018cae 	.word	0x08018cae
 8015e0c:	08018cb1 	.word	0x08018cb1
 8015e10:	08019033 	.word	0x08019033
 8015e14:	08018f30 	.word	0x08018f30
 8015e18:	08018f08 	.word	0x08018f08
 8015e1c:	7ca00000 	.word	0x7ca00000
 8015e20:	7ff00000 	.word	0x7ff00000
 8015e24:	7fefffff 	.word	0x7fefffff
 8015e28:	f012 0110 	ands.w	r1, r2, #16
 8015e2c:	bf18      	it	ne
 8015e2e:	216a      	movne	r1, #106	@ 0x6a
 8015e30:	9106      	str	r1, [sp, #24]
 8015e32:	ec4b ab17 	vmov	d7, sl, fp
 8015e36:	49b0      	ldr	r1, [pc, #704]	@ (80160f8 <_strtod_l+0x850>)
 8015e38:	2000      	movs	r0, #0
 8015e3a:	07d6      	lsls	r6, r2, #31
 8015e3c:	d504      	bpl.n	8015e48 <_strtod_l+0x5a0>
 8015e3e:	ed91 6b00 	vldr	d6, [r1]
 8015e42:	2001      	movs	r0, #1
 8015e44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015e48:	1052      	asrs	r2, r2, #1
 8015e4a:	f101 0108 	add.w	r1, r1, #8
 8015e4e:	d1f4      	bne.n	8015e3a <_strtod_l+0x592>
 8015e50:	b108      	cbz	r0, 8015e56 <_strtod_l+0x5ae>
 8015e52:	ec5b ab17 	vmov	sl, fp, d7
 8015e56:	9a06      	ldr	r2, [sp, #24]
 8015e58:	b1b2      	cbz	r2, 8015e88 <_strtod_l+0x5e0>
 8015e5a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8015e5e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8015e62:	2a00      	cmp	r2, #0
 8015e64:	4658      	mov	r0, fp
 8015e66:	dd0f      	ble.n	8015e88 <_strtod_l+0x5e0>
 8015e68:	2a1f      	cmp	r2, #31
 8015e6a:	dd55      	ble.n	8015f18 <_strtod_l+0x670>
 8015e6c:	2a34      	cmp	r2, #52	@ 0x34
 8015e6e:	bfde      	ittt	le
 8015e70:	f04f 32ff 	movle.w	r2, #4294967295
 8015e74:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8015e78:	408a      	lslle	r2, r1
 8015e7a:	f04f 0a00 	mov.w	sl, #0
 8015e7e:	bfcc      	ite	gt
 8015e80:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015e84:	ea02 0b00 	andle.w	fp, r2, r0
 8015e88:	ec4b ab17 	vmov	d7, sl, fp
 8015e8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e94:	d0a8      	beq.n	8015de8 <_strtod_l+0x540>
 8015e96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015e98:	9805      	ldr	r0, [sp, #20]
 8015e9a:	f8cd 9000 	str.w	r9, [sp]
 8015e9e:	462a      	mov	r2, r5
 8015ea0:	f001 f9ca 	bl	8017238 <__s2b>
 8015ea4:	9007      	str	r0, [sp, #28]
 8015ea6:	2800      	cmp	r0, #0
 8015ea8:	f43f af0a 	beq.w	8015cc0 <_strtod_l+0x418>
 8015eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015eae:	1b3f      	subs	r7, r7, r4
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	bfb4      	ite	lt
 8015eb4:	463b      	movlt	r3, r7
 8015eb6:	2300      	movge	r3, #0
 8015eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8015eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ebc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80160e8 <_strtod_l+0x840>
 8015ec0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015ec4:	2400      	movs	r4, #0
 8015ec6:	930d      	str	r3, [sp, #52]	@ 0x34
 8015ec8:	4625      	mov	r5, r4
 8015eca:	9b07      	ldr	r3, [sp, #28]
 8015ecc:	9805      	ldr	r0, [sp, #20]
 8015ece:	6859      	ldr	r1, [r3, #4]
 8015ed0:	f001 f90a 	bl	80170e8 <_Balloc>
 8015ed4:	4606      	mov	r6, r0
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	f43f aef6 	beq.w	8015cc8 <_strtod_l+0x420>
 8015edc:	9b07      	ldr	r3, [sp, #28]
 8015ede:	691a      	ldr	r2, [r3, #16]
 8015ee0:	ec4b ab19 	vmov	d9, sl, fp
 8015ee4:	3202      	adds	r2, #2
 8015ee6:	f103 010c 	add.w	r1, r3, #12
 8015eea:	0092      	lsls	r2, r2, #2
 8015eec:	300c      	adds	r0, #12
 8015eee:	f000 fca0 	bl	8016832 <memcpy>
 8015ef2:	eeb0 0b49 	vmov.f64	d0, d9
 8015ef6:	9805      	ldr	r0, [sp, #20]
 8015ef8:	aa14      	add	r2, sp, #80	@ 0x50
 8015efa:	a913      	add	r1, sp, #76	@ 0x4c
 8015efc:	f001 fcd8 	bl	80178b0 <__d2b>
 8015f00:	9012      	str	r0, [sp, #72]	@ 0x48
 8015f02:	2800      	cmp	r0, #0
 8015f04:	f43f aee0 	beq.w	8015cc8 <_strtod_l+0x420>
 8015f08:	9805      	ldr	r0, [sp, #20]
 8015f0a:	2101      	movs	r1, #1
 8015f0c:	f001 fa2a 	bl	8017364 <__i2b>
 8015f10:	4605      	mov	r5, r0
 8015f12:	b940      	cbnz	r0, 8015f26 <_strtod_l+0x67e>
 8015f14:	2500      	movs	r5, #0
 8015f16:	e6d7      	b.n	8015cc8 <_strtod_l+0x420>
 8015f18:	f04f 31ff 	mov.w	r1, #4294967295
 8015f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8015f20:	ea02 0a0a 	and.w	sl, r2, sl
 8015f24:	e7b0      	b.n	8015e88 <_strtod_l+0x5e0>
 8015f26:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8015f28:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015f2a:	2f00      	cmp	r7, #0
 8015f2c:	bfab      	itete	ge
 8015f2e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8015f30:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8015f32:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8015f36:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8015f3a:	bfac      	ite	ge
 8015f3c:	eb07 0903 	addge.w	r9, r7, r3
 8015f40:	eba3 0807 	sublt.w	r8, r3, r7
 8015f44:	9b06      	ldr	r3, [sp, #24]
 8015f46:	1aff      	subs	r7, r7, r3
 8015f48:	4417      	add	r7, r2
 8015f4a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8015f4e:	4a6b      	ldr	r2, [pc, #428]	@ (80160fc <_strtod_l+0x854>)
 8015f50:	3f01      	subs	r7, #1
 8015f52:	4297      	cmp	r7, r2
 8015f54:	da51      	bge.n	8015ffa <_strtod_l+0x752>
 8015f56:	1bd1      	subs	r1, r2, r7
 8015f58:	291f      	cmp	r1, #31
 8015f5a:	eba3 0301 	sub.w	r3, r3, r1
 8015f5e:	f04f 0201 	mov.w	r2, #1
 8015f62:	dc3e      	bgt.n	8015fe2 <_strtod_l+0x73a>
 8015f64:	408a      	lsls	r2, r1
 8015f66:	920c      	str	r2, [sp, #48]	@ 0x30
 8015f68:	2200      	movs	r2, #0
 8015f6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015f6c:	eb09 0703 	add.w	r7, r9, r3
 8015f70:	4498      	add	r8, r3
 8015f72:	9b06      	ldr	r3, [sp, #24]
 8015f74:	45b9      	cmp	r9, r7
 8015f76:	4498      	add	r8, r3
 8015f78:	464b      	mov	r3, r9
 8015f7a:	bfa8      	it	ge
 8015f7c:	463b      	movge	r3, r7
 8015f7e:	4543      	cmp	r3, r8
 8015f80:	bfa8      	it	ge
 8015f82:	4643      	movge	r3, r8
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	bfc2      	ittt	gt
 8015f88:	1aff      	subgt	r7, r7, r3
 8015f8a:	eba8 0803 	subgt.w	r8, r8, r3
 8015f8e:	eba9 0903 	subgt.w	r9, r9, r3
 8015f92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	dd16      	ble.n	8015fc6 <_strtod_l+0x71e>
 8015f98:	4629      	mov	r1, r5
 8015f9a:	9805      	ldr	r0, [sp, #20]
 8015f9c:	461a      	mov	r2, r3
 8015f9e:	f001 faa1 	bl	80174e4 <__pow5mult>
 8015fa2:	4605      	mov	r5, r0
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	d0b5      	beq.n	8015f14 <_strtod_l+0x66c>
 8015fa8:	4601      	mov	r1, r0
 8015faa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015fac:	9805      	ldr	r0, [sp, #20]
 8015fae:	f001 f9ef 	bl	8017390 <__multiply>
 8015fb2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	f43f ae87 	beq.w	8015cc8 <_strtod_l+0x420>
 8015fba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015fbc:	9805      	ldr	r0, [sp, #20]
 8015fbe:	f001 f8d3 	bl	8017168 <_Bfree>
 8015fc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fc4:	9312      	str	r3, [sp, #72]	@ 0x48
 8015fc6:	2f00      	cmp	r7, #0
 8015fc8:	dc1b      	bgt.n	8016002 <_strtod_l+0x75a>
 8015fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	dd21      	ble.n	8016014 <_strtod_l+0x76c>
 8015fd0:	4631      	mov	r1, r6
 8015fd2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015fd4:	9805      	ldr	r0, [sp, #20]
 8015fd6:	f001 fa85 	bl	80174e4 <__pow5mult>
 8015fda:	4606      	mov	r6, r0
 8015fdc:	b9d0      	cbnz	r0, 8016014 <_strtod_l+0x76c>
 8015fde:	2600      	movs	r6, #0
 8015fe0:	e672      	b.n	8015cc8 <_strtod_l+0x420>
 8015fe2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8015fe6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8015fea:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8015fee:	37e2      	adds	r7, #226	@ 0xe2
 8015ff0:	fa02 f107 	lsl.w	r1, r2, r7
 8015ff4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8015ff6:	920c      	str	r2, [sp, #48]	@ 0x30
 8015ff8:	e7b8      	b.n	8015f6c <_strtod_l+0x6c4>
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015ffe:	2201      	movs	r2, #1
 8016000:	e7f9      	b.n	8015ff6 <_strtod_l+0x74e>
 8016002:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016004:	9805      	ldr	r0, [sp, #20]
 8016006:	463a      	mov	r2, r7
 8016008:	f001 fac6 	bl	8017598 <__lshift>
 801600c:	9012      	str	r0, [sp, #72]	@ 0x48
 801600e:	2800      	cmp	r0, #0
 8016010:	d1db      	bne.n	8015fca <_strtod_l+0x722>
 8016012:	e659      	b.n	8015cc8 <_strtod_l+0x420>
 8016014:	f1b8 0f00 	cmp.w	r8, #0
 8016018:	dd07      	ble.n	801602a <_strtod_l+0x782>
 801601a:	4631      	mov	r1, r6
 801601c:	9805      	ldr	r0, [sp, #20]
 801601e:	4642      	mov	r2, r8
 8016020:	f001 faba 	bl	8017598 <__lshift>
 8016024:	4606      	mov	r6, r0
 8016026:	2800      	cmp	r0, #0
 8016028:	d0d9      	beq.n	8015fde <_strtod_l+0x736>
 801602a:	f1b9 0f00 	cmp.w	r9, #0
 801602e:	dd08      	ble.n	8016042 <_strtod_l+0x79a>
 8016030:	4629      	mov	r1, r5
 8016032:	9805      	ldr	r0, [sp, #20]
 8016034:	464a      	mov	r2, r9
 8016036:	f001 faaf 	bl	8017598 <__lshift>
 801603a:	4605      	mov	r5, r0
 801603c:	2800      	cmp	r0, #0
 801603e:	f43f ae43 	beq.w	8015cc8 <_strtod_l+0x420>
 8016042:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016044:	9805      	ldr	r0, [sp, #20]
 8016046:	4632      	mov	r2, r6
 8016048:	f001 fb2e 	bl	80176a8 <__mdiff>
 801604c:	4604      	mov	r4, r0
 801604e:	2800      	cmp	r0, #0
 8016050:	f43f ae3a 	beq.w	8015cc8 <_strtod_l+0x420>
 8016054:	2300      	movs	r3, #0
 8016056:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801605a:	60c3      	str	r3, [r0, #12]
 801605c:	4629      	mov	r1, r5
 801605e:	f001 fb07 	bl	8017670 <__mcmp>
 8016062:	2800      	cmp	r0, #0
 8016064:	da4e      	bge.n	8016104 <_strtod_l+0x85c>
 8016066:	ea58 080a 	orrs.w	r8, r8, sl
 801606a:	d174      	bne.n	8016156 <_strtod_l+0x8ae>
 801606c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016070:	2b00      	cmp	r3, #0
 8016072:	d170      	bne.n	8016156 <_strtod_l+0x8ae>
 8016074:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016078:	0d1b      	lsrs	r3, r3, #20
 801607a:	051b      	lsls	r3, r3, #20
 801607c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016080:	d969      	bls.n	8016156 <_strtod_l+0x8ae>
 8016082:	6963      	ldr	r3, [r4, #20]
 8016084:	b913      	cbnz	r3, 801608c <_strtod_l+0x7e4>
 8016086:	6923      	ldr	r3, [r4, #16]
 8016088:	2b01      	cmp	r3, #1
 801608a:	dd64      	ble.n	8016156 <_strtod_l+0x8ae>
 801608c:	4621      	mov	r1, r4
 801608e:	2201      	movs	r2, #1
 8016090:	9805      	ldr	r0, [sp, #20]
 8016092:	f001 fa81 	bl	8017598 <__lshift>
 8016096:	4629      	mov	r1, r5
 8016098:	4604      	mov	r4, r0
 801609a:	f001 fae9 	bl	8017670 <__mcmp>
 801609e:	2800      	cmp	r0, #0
 80160a0:	dd59      	ble.n	8016156 <_strtod_l+0x8ae>
 80160a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80160a6:	9a06      	ldr	r2, [sp, #24]
 80160a8:	0d1b      	lsrs	r3, r3, #20
 80160aa:	051b      	lsls	r3, r3, #20
 80160ac:	2a00      	cmp	r2, #0
 80160ae:	d070      	beq.n	8016192 <_strtod_l+0x8ea>
 80160b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80160b4:	d86d      	bhi.n	8016192 <_strtod_l+0x8ea>
 80160b6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80160ba:	f67f ae99 	bls.w	8015df0 <_strtod_l+0x548>
 80160be:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80160f0 <_strtod_l+0x848>
 80160c2:	ec4b ab16 	vmov	d6, sl, fp
 80160c6:	4b0e      	ldr	r3, [pc, #56]	@ (8016100 <_strtod_l+0x858>)
 80160c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80160cc:	ee17 2a90 	vmov	r2, s15
 80160d0:	4013      	ands	r3, r2
 80160d2:	ec5b ab17 	vmov	sl, fp, d7
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	f47f ae01 	bne.w	8015cde <_strtod_l+0x436>
 80160dc:	9a05      	ldr	r2, [sp, #20]
 80160de:	2322      	movs	r3, #34	@ 0x22
 80160e0:	6013      	str	r3, [r2, #0]
 80160e2:	e5fc      	b.n	8015cde <_strtod_l+0x436>
 80160e4:	f3af 8000 	nop.w
 80160e8:	ffc00000 	.word	0xffc00000
 80160ec:	41dfffff 	.word	0x41dfffff
 80160f0:	00000000 	.word	0x00000000
 80160f4:	39500000 	.word	0x39500000
 80160f8:	08018ce8 	.word	0x08018ce8
 80160fc:	fffffc02 	.word	0xfffffc02
 8016100:	7ff00000 	.word	0x7ff00000
 8016104:	46d9      	mov	r9, fp
 8016106:	d15d      	bne.n	80161c4 <_strtod_l+0x91c>
 8016108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801610c:	f1b8 0f00 	cmp.w	r8, #0
 8016110:	d02a      	beq.n	8016168 <_strtod_l+0x8c0>
 8016112:	4aab      	ldr	r2, [pc, #684]	@ (80163c0 <_strtod_l+0xb18>)
 8016114:	4293      	cmp	r3, r2
 8016116:	d12a      	bne.n	801616e <_strtod_l+0x8c6>
 8016118:	9b06      	ldr	r3, [sp, #24]
 801611a:	4652      	mov	r2, sl
 801611c:	b1fb      	cbz	r3, 801615e <_strtod_l+0x8b6>
 801611e:	4ba9      	ldr	r3, [pc, #676]	@ (80163c4 <_strtod_l+0xb1c>)
 8016120:	ea0b 0303 	and.w	r3, fp, r3
 8016124:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016128:	f04f 31ff 	mov.w	r1, #4294967295
 801612c:	d81a      	bhi.n	8016164 <_strtod_l+0x8bc>
 801612e:	0d1b      	lsrs	r3, r3, #20
 8016130:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016134:	fa01 f303 	lsl.w	r3, r1, r3
 8016138:	429a      	cmp	r2, r3
 801613a:	d118      	bne.n	801616e <_strtod_l+0x8c6>
 801613c:	4ba2      	ldr	r3, [pc, #648]	@ (80163c8 <_strtod_l+0xb20>)
 801613e:	4599      	cmp	r9, r3
 8016140:	d102      	bne.n	8016148 <_strtod_l+0x8a0>
 8016142:	3201      	adds	r2, #1
 8016144:	f43f adc0 	beq.w	8015cc8 <_strtod_l+0x420>
 8016148:	4b9e      	ldr	r3, [pc, #632]	@ (80163c4 <_strtod_l+0xb1c>)
 801614a:	ea09 0303 	and.w	r3, r9, r3
 801614e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8016152:	f04f 0a00 	mov.w	sl, #0
 8016156:	9b06      	ldr	r3, [sp, #24]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d1b0      	bne.n	80160be <_strtod_l+0x816>
 801615c:	e5bf      	b.n	8015cde <_strtod_l+0x436>
 801615e:	f04f 33ff 	mov.w	r3, #4294967295
 8016162:	e7e9      	b.n	8016138 <_strtod_l+0x890>
 8016164:	460b      	mov	r3, r1
 8016166:	e7e7      	b.n	8016138 <_strtod_l+0x890>
 8016168:	ea53 030a 	orrs.w	r3, r3, sl
 801616c:	d099      	beq.n	80160a2 <_strtod_l+0x7fa>
 801616e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016170:	b1c3      	cbz	r3, 80161a4 <_strtod_l+0x8fc>
 8016172:	ea13 0f09 	tst.w	r3, r9
 8016176:	d0ee      	beq.n	8016156 <_strtod_l+0x8ae>
 8016178:	9a06      	ldr	r2, [sp, #24]
 801617a:	4650      	mov	r0, sl
 801617c:	4659      	mov	r1, fp
 801617e:	f1b8 0f00 	cmp.w	r8, #0
 8016182:	d013      	beq.n	80161ac <_strtod_l+0x904>
 8016184:	f7ff fb73 	bl	801586e <sulp>
 8016188:	ee39 7b00 	vadd.f64	d7, d9, d0
 801618c:	ec5b ab17 	vmov	sl, fp, d7
 8016190:	e7e1      	b.n	8016156 <_strtod_l+0x8ae>
 8016192:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016196:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801619a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801619e:	f04f 3aff 	mov.w	sl, #4294967295
 80161a2:	e7d8      	b.n	8016156 <_strtod_l+0x8ae>
 80161a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80161a6:	ea13 0f0a 	tst.w	r3, sl
 80161aa:	e7e4      	b.n	8016176 <_strtod_l+0x8ce>
 80161ac:	f7ff fb5f 	bl	801586e <sulp>
 80161b0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80161b4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80161b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161bc:	ec5b ab10 	vmov	sl, fp, d0
 80161c0:	d1c9      	bne.n	8016156 <_strtod_l+0x8ae>
 80161c2:	e615      	b.n	8015df0 <_strtod_l+0x548>
 80161c4:	4629      	mov	r1, r5
 80161c6:	4620      	mov	r0, r4
 80161c8:	f001 fbca 	bl	8017960 <__ratio>
 80161cc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80161d0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80161d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161d8:	d85d      	bhi.n	8016296 <_strtod_l+0x9ee>
 80161da:	f1b8 0f00 	cmp.w	r8, #0
 80161de:	d164      	bne.n	80162aa <_strtod_l+0xa02>
 80161e0:	f1ba 0f00 	cmp.w	sl, #0
 80161e4:	d14b      	bne.n	801627e <_strtod_l+0x9d6>
 80161e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161ea:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d160      	bne.n	80162b4 <_strtod_l+0xa0c>
 80161f2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80161f6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80161fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161fe:	d401      	bmi.n	8016204 <_strtod_l+0x95c>
 8016200:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016204:	eeb1 ab48 	vneg.f64	d10, d8
 8016208:	486e      	ldr	r0, [pc, #440]	@ (80163c4 <_strtod_l+0xb1c>)
 801620a:	4970      	ldr	r1, [pc, #448]	@ (80163cc <_strtod_l+0xb24>)
 801620c:	ea09 0700 	and.w	r7, r9, r0
 8016210:	428f      	cmp	r7, r1
 8016212:	ec53 2b1a 	vmov	r2, r3, d10
 8016216:	d17d      	bne.n	8016314 <_strtod_l+0xa6c>
 8016218:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801621c:	ec4b ab1c 	vmov	d12, sl, fp
 8016220:	eeb0 0b4c 	vmov.f64	d0, d12
 8016224:	f001 fad4 	bl	80177d0 <__ulp>
 8016228:	4866      	ldr	r0, [pc, #408]	@ (80163c4 <_strtod_l+0xb1c>)
 801622a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801622e:	ee1c 3a90 	vmov	r3, s25
 8016232:	4a67      	ldr	r2, [pc, #412]	@ (80163d0 <_strtod_l+0xb28>)
 8016234:	ea03 0100 	and.w	r1, r3, r0
 8016238:	4291      	cmp	r1, r2
 801623a:	ec5b ab1c 	vmov	sl, fp, d12
 801623e:	d93c      	bls.n	80162ba <_strtod_l+0xa12>
 8016240:	ee19 2a90 	vmov	r2, s19
 8016244:	4b60      	ldr	r3, [pc, #384]	@ (80163c8 <_strtod_l+0xb20>)
 8016246:	429a      	cmp	r2, r3
 8016248:	d104      	bne.n	8016254 <_strtod_l+0x9ac>
 801624a:	ee19 3a10 	vmov	r3, s18
 801624e:	3301      	adds	r3, #1
 8016250:	f43f ad3a 	beq.w	8015cc8 <_strtod_l+0x420>
 8016254:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80163c8 <_strtod_l+0xb20>
 8016258:	f04f 3aff 	mov.w	sl, #4294967295
 801625c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801625e:	9805      	ldr	r0, [sp, #20]
 8016260:	f000 ff82 	bl	8017168 <_Bfree>
 8016264:	9805      	ldr	r0, [sp, #20]
 8016266:	4631      	mov	r1, r6
 8016268:	f000 ff7e 	bl	8017168 <_Bfree>
 801626c:	9805      	ldr	r0, [sp, #20]
 801626e:	4629      	mov	r1, r5
 8016270:	f000 ff7a 	bl	8017168 <_Bfree>
 8016274:	9805      	ldr	r0, [sp, #20]
 8016276:	4621      	mov	r1, r4
 8016278:	f000 ff76 	bl	8017168 <_Bfree>
 801627c:	e625      	b.n	8015eca <_strtod_l+0x622>
 801627e:	f1ba 0f01 	cmp.w	sl, #1
 8016282:	d103      	bne.n	801628c <_strtod_l+0x9e4>
 8016284:	f1bb 0f00 	cmp.w	fp, #0
 8016288:	f43f adb2 	beq.w	8015df0 <_strtod_l+0x548>
 801628c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016290:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016294:	e7b8      	b.n	8016208 <_strtod_l+0x960>
 8016296:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801629a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801629e:	f1b8 0f00 	cmp.w	r8, #0
 80162a2:	d0af      	beq.n	8016204 <_strtod_l+0x95c>
 80162a4:	eeb0 ab48 	vmov.f64	d10, d8
 80162a8:	e7ae      	b.n	8016208 <_strtod_l+0x960>
 80162aa:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80162ae:	eeb0 8b4a 	vmov.f64	d8, d10
 80162b2:	e7a9      	b.n	8016208 <_strtod_l+0x960>
 80162b4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80162b8:	e7a6      	b.n	8016208 <_strtod_l+0x960>
 80162ba:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80162be:	9b06      	ldr	r3, [sp, #24]
 80162c0:	46d9      	mov	r9, fp
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d1ca      	bne.n	801625c <_strtod_l+0x9b4>
 80162c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80162ca:	0d1b      	lsrs	r3, r3, #20
 80162cc:	051b      	lsls	r3, r3, #20
 80162ce:	429f      	cmp	r7, r3
 80162d0:	d1c4      	bne.n	801625c <_strtod_l+0x9b4>
 80162d2:	ec51 0b18 	vmov	r0, r1, d8
 80162d6:	f7ea fa8f 	bl	80007f8 <__aeabi_d2lz>
 80162da:	f7ea f9f7 	bl	80006cc <__aeabi_l2d>
 80162de:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80162e2:	ec41 0b17 	vmov	d7, r0, r1
 80162e6:	ea49 090a 	orr.w	r9, r9, sl
 80162ea:	ea59 0908 	orrs.w	r9, r9, r8
 80162ee:	ee38 8b47 	vsub.f64	d8, d8, d7
 80162f2:	d03c      	beq.n	801636e <_strtod_l+0xac6>
 80162f4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80163a8 <_strtod_l+0xb00>
 80162f8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80162fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016300:	f53f aced 	bmi.w	8015cde <_strtod_l+0x436>
 8016304:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80163b0 <_strtod_l+0xb08>
 8016308:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801630c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016310:	dda4      	ble.n	801625c <_strtod_l+0x9b4>
 8016312:	e4e4      	b.n	8015cde <_strtod_l+0x436>
 8016314:	9906      	ldr	r1, [sp, #24]
 8016316:	b1e1      	cbz	r1, 8016352 <_strtod_l+0xaaa>
 8016318:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801631c:	d819      	bhi.n	8016352 <_strtod_l+0xaaa>
 801631e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8016322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016326:	d811      	bhi.n	801634c <_strtod_l+0xaa4>
 8016328:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801632c:	ee18 3a10 	vmov	r3, s16
 8016330:	2b01      	cmp	r3, #1
 8016332:	bf38      	it	cc
 8016334:	2301      	movcc	r3, #1
 8016336:	ee08 3a10 	vmov	s16, r3
 801633a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801633e:	f1b8 0f00 	cmp.w	r8, #0
 8016342:	d111      	bne.n	8016368 <_strtod_l+0xac0>
 8016344:	eeb1 7b48 	vneg.f64	d7, d8
 8016348:	ec53 2b17 	vmov	r2, r3, d7
 801634c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016350:	1bcb      	subs	r3, r1, r7
 8016352:	eeb0 0b49 	vmov.f64	d0, d9
 8016356:	ec43 2b1a 	vmov	d10, r2, r3
 801635a:	f001 fa39 	bl	80177d0 <__ulp>
 801635e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8016362:	ec5b ab19 	vmov	sl, fp, d9
 8016366:	e7aa      	b.n	80162be <_strtod_l+0xa16>
 8016368:	eeb0 7b48 	vmov.f64	d7, d8
 801636c:	e7ec      	b.n	8016348 <_strtod_l+0xaa0>
 801636e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80163b8 <_strtod_l+0xb10>
 8016372:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801637a:	f57f af6f 	bpl.w	801625c <_strtod_l+0x9b4>
 801637e:	e4ae      	b.n	8015cde <_strtod_l+0x436>
 8016380:	2300      	movs	r3, #0
 8016382:	9308      	str	r3, [sp, #32]
 8016384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016386:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016388:	6013      	str	r3, [r2, #0]
 801638a:	f7ff bacc 	b.w	8015926 <_strtod_l+0x7e>
 801638e:	2a65      	cmp	r2, #101	@ 0x65
 8016390:	f43f abbc 	beq.w	8015b0c <_strtod_l+0x264>
 8016394:	2a45      	cmp	r2, #69	@ 0x45
 8016396:	f43f abb9 	beq.w	8015b0c <_strtod_l+0x264>
 801639a:	2301      	movs	r3, #1
 801639c:	9306      	str	r3, [sp, #24]
 801639e:	f7ff bbf0 	b.w	8015b82 <_strtod_l+0x2da>
 80163a2:	bf00      	nop
 80163a4:	f3af 8000 	nop.w
 80163a8:	94a03595 	.word	0x94a03595
 80163ac:	3fdfffff 	.word	0x3fdfffff
 80163b0:	35afe535 	.word	0x35afe535
 80163b4:	3fe00000 	.word	0x3fe00000
 80163b8:	94a03595 	.word	0x94a03595
 80163bc:	3fcfffff 	.word	0x3fcfffff
 80163c0:	000fffff 	.word	0x000fffff
 80163c4:	7ff00000 	.word	0x7ff00000
 80163c8:	7fefffff 	.word	0x7fefffff
 80163cc:	7fe00000 	.word	0x7fe00000
 80163d0:	7c9fffff 	.word	0x7c9fffff

080163d4 <strtod>:
 80163d4:	460a      	mov	r2, r1
 80163d6:	4601      	mov	r1, r0
 80163d8:	4802      	ldr	r0, [pc, #8]	@ (80163e4 <strtod+0x10>)
 80163da:	4b03      	ldr	r3, [pc, #12]	@ (80163e8 <strtod+0x14>)
 80163dc:	6800      	ldr	r0, [r0, #0]
 80163de:	f7ff ba63 	b.w	80158a8 <_strtod_l>
 80163e2:	bf00      	nop
 80163e4:	24000260 	.word	0x24000260
 80163e8:	240000f4 	.word	0x240000f4

080163ec <_strtol_l.constprop.0>:
 80163ec:	2b24      	cmp	r3, #36	@ 0x24
 80163ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163f2:	4686      	mov	lr, r0
 80163f4:	4690      	mov	r8, r2
 80163f6:	d801      	bhi.n	80163fc <_strtol_l.constprop.0+0x10>
 80163f8:	2b01      	cmp	r3, #1
 80163fa:	d106      	bne.n	801640a <_strtol_l.constprop.0+0x1e>
 80163fc:	f000 f9ec 	bl	80167d8 <__errno>
 8016400:	2316      	movs	r3, #22
 8016402:	6003      	str	r3, [r0, #0]
 8016404:	2000      	movs	r0, #0
 8016406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801640a:	4834      	ldr	r0, [pc, #208]	@ (80164dc <_strtol_l.constprop.0+0xf0>)
 801640c:	460d      	mov	r5, r1
 801640e:	462a      	mov	r2, r5
 8016410:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016414:	5d06      	ldrb	r6, [r0, r4]
 8016416:	f016 0608 	ands.w	r6, r6, #8
 801641a:	d1f8      	bne.n	801640e <_strtol_l.constprop.0+0x22>
 801641c:	2c2d      	cmp	r4, #45	@ 0x2d
 801641e:	d12d      	bne.n	801647c <_strtol_l.constprop.0+0x90>
 8016420:	782c      	ldrb	r4, [r5, #0]
 8016422:	2601      	movs	r6, #1
 8016424:	1c95      	adds	r5, r2, #2
 8016426:	f033 0210 	bics.w	r2, r3, #16
 801642a:	d109      	bne.n	8016440 <_strtol_l.constprop.0+0x54>
 801642c:	2c30      	cmp	r4, #48	@ 0x30
 801642e:	d12a      	bne.n	8016486 <_strtol_l.constprop.0+0x9a>
 8016430:	782a      	ldrb	r2, [r5, #0]
 8016432:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016436:	2a58      	cmp	r2, #88	@ 0x58
 8016438:	d125      	bne.n	8016486 <_strtol_l.constprop.0+0x9a>
 801643a:	786c      	ldrb	r4, [r5, #1]
 801643c:	2310      	movs	r3, #16
 801643e:	3502      	adds	r5, #2
 8016440:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016444:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016448:	2200      	movs	r2, #0
 801644a:	fbbc f9f3 	udiv	r9, ip, r3
 801644e:	4610      	mov	r0, r2
 8016450:	fb03 ca19 	mls	sl, r3, r9, ip
 8016454:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016458:	2f09      	cmp	r7, #9
 801645a:	d81b      	bhi.n	8016494 <_strtol_l.constprop.0+0xa8>
 801645c:	463c      	mov	r4, r7
 801645e:	42a3      	cmp	r3, r4
 8016460:	dd27      	ble.n	80164b2 <_strtol_l.constprop.0+0xc6>
 8016462:	1c57      	adds	r7, r2, #1
 8016464:	d007      	beq.n	8016476 <_strtol_l.constprop.0+0x8a>
 8016466:	4581      	cmp	r9, r0
 8016468:	d320      	bcc.n	80164ac <_strtol_l.constprop.0+0xc0>
 801646a:	d101      	bne.n	8016470 <_strtol_l.constprop.0+0x84>
 801646c:	45a2      	cmp	sl, r4
 801646e:	db1d      	blt.n	80164ac <_strtol_l.constprop.0+0xc0>
 8016470:	fb00 4003 	mla	r0, r0, r3, r4
 8016474:	2201      	movs	r2, #1
 8016476:	f815 4b01 	ldrb.w	r4, [r5], #1
 801647a:	e7eb      	b.n	8016454 <_strtol_l.constprop.0+0x68>
 801647c:	2c2b      	cmp	r4, #43	@ 0x2b
 801647e:	bf04      	itt	eq
 8016480:	782c      	ldrbeq	r4, [r5, #0]
 8016482:	1c95      	addeq	r5, r2, #2
 8016484:	e7cf      	b.n	8016426 <_strtol_l.constprop.0+0x3a>
 8016486:	2b00      	cmp	r3, #0
 8016488:	d1da      	bne.n	8016440 <_strtol_l.constprop.0+0x54>
 801648a:	2c30      	cmp	r4, #48	@ 0x30
 801648c:	bf0c      	ite	eq
 801648e:	2308      	moveq	r3, #8
 8016490:	230a      	movne	r3, #10
 8016492:	e7d5      	b.n	8016440 <_strtol_l.constprop.0+0x54>
 8016494:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016498:	2f19      	cmp	r7, #25
 801649a:	d801      	bhi.n	80164a0 <_strtol_l.constprop.0+0xb4>
 801649c:	3c37      	subs	r4, #55	@ 0x37
 801649e:	e7de      	b.n	801645e <_strtol_l.constprop.0+0x72>
 80164a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80164a4:	2f19      	cmp	r7, #25
 80164a6:	d804      	bhi.n	80164b2 <_strtol_l.constprop.0+0xc6>
 80164a8:	3c57      	subs	r4, #87	@ 0x57
 80164aa:	e7d8      	b.n	801645e <_strtol_l.constprop.0+0x72>
 80164ac:	f04f 32ff 	mov.w	r2, #4294967295
 80164b0:	e7e1      	b.n	8016476 <_strtol_l.constprop.0+0x8a>
 80164b2:	1c53      	adds	r3, r2, #1
 80164b4:	d108      	bne.n	80164c8 <_strtol_l.constprop.0+0xdc>
 80164b6:	2322      	movs	r3, #34	@ 0x22
 80164b8:	f8ce 3000 	str.w	r3, [lr]
 80164bc:	4660      	mov	r0, ip
 80164be:	f1b8 0f00 	cmp.w	r8, #0
 80164c2:	d0a0      	beq.n	8016406 <_strtol_l.constprop.0+0x1a>
 80164c4:	1e69      	subs	r1, r5, #1
 80164c6:	e006      	b.n	80164d6 <_strtol_l.constprop.0+0xea>
 80164c8:	b106      	cbz	r6, 80164cc <_strtol_l.constprop.0+0xe0>
 80164ca:	4240      	negs	r0, r0
 80164cc:	f1b8 0f00 	cmp.w	r8, #0
 80164d0:	d099      	beq.n	8016406 <_strtol_l.constprop.0+0x1a>
 80164d2:	2a00      	cmp	r2, #0
 80164d4:	d1f6      	bne.n	80164c4 <_strtol_l.constprop.0+0xd8>
 80164d6:	f8c8 1000 	str.w	r1, [r8]
 80164da:	e794      	b.n	8016406 <_strtol_l.constprop.0+0x1a>
 80164dc:	08018d11 	.word	0x08018d11

080164e0 <strtol>:
 80164e0:	4613      	mov	r3, r2
 80164e2:	460a      	mov	r2, r1
 80164e4:	4601      	mov	r1, r0
 80164e6:	4802      	ldr	r0, [pc, #8]	@ (80164f0 <strtol+0x10>)
 80164e8:	6800      	ldr	r0, [r0, #0]
 80164ea:	f7ff bf7f 	b.w	80163ec <_strtol_l.constprop.0>
 80164ee:	bf00      	nop
 80164f0:	24000260 	.word	0x24000260

080164f4 <std>:
 80164f4:	2300      	movs	r3, #0
 80164f6:	b510      	push	{r4, lr}
 80164f8:	4604      	mov	r4, r0
 80164fa:	e9c0 3300 	strd	r3, r3, [r0]
 80164fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016502:	6083      	str	r3, [r0, #8]
 8016504:	8181      	strh	r1, [r0, #12]
 8016506:	6643      	str	r3, [r0, #100]	@ 0x64
 8016508:	81c2      	strh	r2, [r0, #14]
 801650a:	6183      	str	r3, [r0, #24]
 801650c:	4619      	mov	r1, r3
 801650e:	2208      	movs	r2, #8
 8016510:	305c      	adds	r0, #92	@ 0x5c
 8016512:	f000 f8f4 	bl	80166fe <memset>
 8016516:	4b0d      	ldr	r3, [pc, #52]	@ (801654c <std+0x58>)
 8016518:	6263      	str	r3, [r4, #36]	@ 0x24
 801651a:	4b0d      	ldr	r3, [pc, #52]	@ (8016550 <std+0x5c>)
 801651c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801651e:	4b0d      	ldr	r3, [pc, #52]	@ (8016554 <std+0x60>)
 8016520:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016522:	4b0d      	ldr	r3, [pc, #52]	@ (8016558 <std+0x64>)
 8016524:	6323      	str	r3, [r4, #48]	@ 0x30
 8016526:	4b0d      	ldr	r3, [pc, #52]	@ (801655c <std+0x68>)
 8016528:	6224      	str	r4, [r4, #32]
 801652a:	429c      	cmp	r4, r3
 801652c:	d006      	beq.n	801653c <std+0x48>
 801652e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016532:	4294      	cmp	r4, r2
 8016534:	d002      	beq.n	801653c <std+0x48>
 8016536:	33d0      	adds	r3, #208	@ 0xd0
 8016538:	429c      	cmp	r4, r3
 801653a:	d105      	bne.n	8016548 <std+0x54>
 801653c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016544:	f000 b972 	b.w	801682c <__retarget_lock_init_recursive>
 8016548:	bd10      	pop	{r4, pc}
 801654a:	bf00      	nop
 801654c:	08016679 	.word	0x08016679
 8016550:	0801669b 	.word	0x0801669b
 8016554:	080166d3 	.word	0x080166d3
 8016558:	080166f7 	.word	0x080166f7
 801655c:	240056d4 	.word	0x240056d4

08016560 <stdio_exit_handler>:
 8016560:	4a02      	ldr	r2, [pc, #8]	@ (801656c <stdio_exit_handler+0xc>)
 8016562:	4903      	ldr	r1, [pc, #12]	@ (8016570 <stdio_exit_handler+0x10>)
 8016564:	4803      	ldr	r0, [pc, #12]	@ (8016574 <stdio_exit_handler+0x14>)
 8016566:	f000 b869 	b.w	801663c <_fwalk_sglue>
 801656a:	bf00      	nop
 801656c:	240000e8 	.word	0x240000e8
 8016570:	08017b69 	.word	0x08017b69
 8016574:	24000264 	.word	0x24000264

08016578 <cleanup_stdio>:
 8016578:	6841      	ldr	r1, [r0, #4]
 801657a:	4b0c      	ldr	r3, [pc, #48]	@ (80165ac <cleanup_stdio+0x34>)
 801657c:	4299      	cmp	r1, r3
 801657e:	b510      	push	{r4, lr}
 8016580:	4604      	mov	r4, r0
 8016582:	d001      	beq.n	8016588 <cleanup_stdio+0x10>
 8016584:	f001 faf0 	bl	8017b68 <_fflush_r>
 8016588:	68a1      	ldr	r1, [r4, #8]
 801658a:	4b09      	ldr	r3, [pc, #36]	@ (80165b0 <cleanup_stdio+0x38>)
 801658c:	4299      	cmp	r1, r3
 801658e:	d002      	beq.n	8016596 <cleanup_stdio+0x1e>
 8016590:	4620      	mov	r0, r4
 8016592:	f001 fae9 	bl	8017b68 <_fflush_r>
 8016596:	68e1      	ldr	r1, [r4, #12]
 8016598:	4b06      	ldr	r3, [pc, #24]	@ (80165b4 <cleanup_stdio+0x3c>)
 801659a:	4299      	cmp	r1, r3
 801659c:	d004      	beq.n	80165a8 <cleanup_stdio+0x30>
 801659e:	4620      	mov	r0, r4
 80165a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165a4:	f001 bae0 	b.w	8017b68 <_fflush_r>
 80165a8:	bd10      	pop	{r4, pc}
 80165aa:	bf00      	nop
 80165ac:	240056d4 	.word	0x240056d4
 80165b0:	2400573c 	.word	0x2400573c
 80165b4:	240057a4 	.word	0x240057a4

080165b8 <global_stdio_init.part.0>:
 80165b8:	b510      	push	{r4, lr}
 80165ba:	4b0b      	ldr	r3, [pc, #44]	@ (80165e8 <global_stdio_init.part.0+0x30>)
 80165bc:	4c0b      	ldr	r4, [pc, #44]	@ (80165ec <global_stdio_init.part.0+0x34>)
 80165be:	4a0c      	ldr	r2, [pc, #48]	@ (80165f0 <global_stdio_init.part.0+0x38>)
 80165c0:	601a      	str	r2, [r3, #0]
 80165c2:	4620      	mov	r0, r4
 80165c4:	2200      	movs	r2, #0
 80165c6:	2104      	movs	r1, #4
 80165c8:	f7ff ff94 	bl	80164f4 <std>
 80165cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80165d0:	2201      	movs	r2, #1
 80165d2:	2109      	movs	r1, #9
 80165d4:	f7ff ff8e 	bl	80164f4 <std>
 80165d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80165dc:	2202      	movs	r2, #2
 80165de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165e2:	2112      	movs	r1, #18
 80165e4:	f7ff bf86 	b.w	80164f4 <std>
 80165e8:	2400580c 	.word	0x2400580c
 80165ec:	240056d4 	.word	0x240056d4
 80165f0:	08016561 	.word	0x08016561

080165f4 <__sfp_lock_acquire>:
 80165f4:	4801      	ldr	r0, [pc, #4]	@ (80165fc <__sfp_lock_acquire+0x8>)
 80165f6:	f000 b91a 	b.w	801682e <__retarget_lock_acquire_recursive>
 80165fa:	bf00      	nop
 80165fc:	24005815 	.word	0x24005815

08016600 <__sfp_lock_release>:
 8016600:	4801      	ldr	r0, [pc, #4]	@ (8016608 <__sfp_lock_release+0x8>)
 8016602:	f000 b915 	b.w	8016830 <__retarget_lock_release_recursive>
 8016606:	bf00      	nop
 8016608:	24005815 	.word	0x24005815

0801660c <__sinit>:
 801660c:	b510      	push	{r4, lr}
 801660e:	4604      	mov	r4, r0
 8016610:	f7ff fff0 	bl	80165f4 <__sfp_lock_acquire>
 8016614:	6a23      	ldr	r3, [r4, #32]
 8016616:	b11b      	cbz	r3, 8016620 <__sinit+0x14>
 8016618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801661c:	f7ff bff0 	b.w	8016600 <__sfp_lock_release>
 8016620:	4b04      	ldr	r3, [pc, #16]	@ (8016634 <__sinit+0x28>)
 8016622:	6223      	str	r3, [r4, #32]
 8016624:	4b04      	ldr	r3, [pc, #16]	@ (8016638 <__sinit+0x2c>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d1f5      	bne.n	8016618 <__sinit+0xc>
 801662c:	f7ff ffc4 	bl	80165b8 <global_stdio_init.part.0>
 8016630:	e7f2      	b.n	8016618 <__sinit+0xc>
 8016632:	bf00      	nop
 8016634:	08016579 	.word	0x08016579
 8016638:	2400580c 	.word	0x2400580c

0801663c <_fwalk_sglue>:
 801663c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016640:	4607      	mov	r7, r0
 8016642:	4688      	mov	r8, r1
 8016644:	4614      	mov	r4, r2
 8016646:	2600      	movs	r6, #0
 8016648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801664c:	f1b9 0901 	subs.w	r9, r9, #1
 8016650:	d505      	bpl.n	801665e <_fwalk_sglue+0x22>
 8016652:	6824      	ldr	r4, [r4, #0]
 8016654:	2c00      	cmp	r4, #0
 8016656:	d1f7      	bne.n	8016648 <_fwalk_sglue+0xc>
 8016658:	4630      	mov	r0, r6
 801665a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801665e:	89ab      	ldrh	r3, [r5, #12]
 8016660:	2b01      	cmp	r3, #1
 8016662:	d907      	bls.n	8016674 <_fwalk_sglue+0x38>
 8016664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016668:	3301      	adds	r3, #1
 801666a:	d003      	beq.n	8016674 <_fwalk_sglue+0x38>
 801666c:	4629      	mov	r1, r5
 801666e:	4638      	mov	r0, r7
 8016670:	47c0      	blx	r8
 8016672:	4306      	orrs	r6, r0
 8016674:	3568      	adds	r5, #104	@ 0x68
 8016676:	e7e9      	b.n	801664c <_fwalk_sglue+0x10>

08016678 <__sread>:
 8016678:	b510      	push	{r4, lr}
 801667a:	460c      	mov	r4, r1
 801667c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016680:	f000 f886 	bl	8016790 <_read_r>
 8016684:	2800      	cmp	r0, #0
 8016686:	bfab      	itete	ge
 8016688:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801668a:	89a3      	ldrhlt	r3, [r4, #12]
 801668c:	181b      	addge	r3, r3, r0
 801668e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016692:	bfac      	ite	ge
 8016694:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016696:	81a3      	strhlt	r3, [r4, #12]
 8016698:	bd10      	pop	{r4, pc}

0801669a <__swrite>:
 801669a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801669e:	461f      	mov	r7, r3
 80166a0:	898b      	ldrh	r3, [r1, #12]
 80166a2:	05db      	lsls	r3, r3, #23
 80166a4:	4605      	mov	r5, r0
 80166a6:	460c      	mov	r4, r1
 80166a8:	4616      	mov	r6, r2
 80166aa:	d505      	bpl.n	80166b8 <__swrite+0x1e>
 80166ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166b0:	2302      	movs	r3, #2
 80166b2:	2200      	movs	r2, #0
 80166b4:	f000 f85a 	bl	801676c <_lseek_r>
 80166b8:	89a3      	ldrh	r3, [r4, #12]
 80166ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80166be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80166c2:	81a3      	strh	r3, [r4, #12]
 80166c4:	4632      	mov	r2, r6
 80166c6:	463b      	mov	r3, r7
 80166c8:	4628      	mov	r0, r5
 80166ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80166ce:	f000 b871 	b.w	80167b4 <_write_r>

080166d2 <__sseek>:
 80166d2:	b510      	push	{r4, lr}
 80166d4:	460c      	mov	r4, r1
 80166d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166da:	f000 f847 	bl	801676c <_lseek_r>
 80166de:	1c43      	adds	r3, r0, #1
 80166e0:	89a3      	ldrh	r3, [r4, #12]
 80166e2:	bf15      	itete	ne
 80166e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80166e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80166ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80166ee:	81a3      	strheq	r3, [r4, #12]
 80166f0:	bf18      	it	ne
 80166f2:	81a3      	strhne	r3, [r4, #12]
 80166f4:	bd10      	pop	{r4, pc}

080166f6 <__sclose>:
 80166f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166fa:	f000 b827 	b.w	801674c <_close_r>

080166fe <memset>:
 80166fe:	4402      	add	r2, r0
 8016700:	4603      	mov	r3, r0
 8016702:	4293      	cmp	r3, r2
 8016704:	d100      	bne.n	8016708 <memset+0xa>
 8016706:	4770      	bx	lr
 8016708:	f803 1b01 	strb.w	r1, [r3], #1
 801670c:	e7f9      	b.n	8016702 <memset+0x4>

0801670e <strchr>:
 801670e:	b2c9      	uxtb	r1, r1
 8016710:	4603      	mov	r3, r0
 8016712:	4618      	mov	r0, r3
 8016714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016718:	b112      	cbz	r2, 8016720 <strchr+0x12>
 801671a:	428a      	cmp	r2, r1
 801671c:	d1f9      	bne.n	8016712 <strchr+0x4>
 801671e:	4770      	bx	lr
 8016720:	2900      	cmp	r1, #0
 8016722:	bf18      	it	ne
 8016724:	2000      	movne	r0, #0
 8016726:	4770      	bx	lr

08016728 <strncmp>:
 8016728:	b510      	push	{r4, lr}
 801672a:	b16a      	cbz	r2, 8016748 <strncmp+0x20>
 801672c:	3901      	subs	r1, #1
 801672e:	1884      	adds	r4, r0, r2
 8016730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016734:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016738:	429a      	cmp	r2, r3
 801673a:	d103      	bne.n	8016744 <strncmp+0x1c>
 801673c:	42a0      	cmp	r0, r4
 801673e:	d001      	beq.n	8016744 <strncmp+0x1c>
 8016740:	2a00      	cmp	r2, #0
 8016742:	d1f5      	bne.n	8016730 <strncmp+0x8>
 8016744:	1ad0      	subs	r0, r2, r3
 8016746:	bd10      	pop	{r4, pc}
 8016748:	4610      	mov	r0, r2
 801674a:	e7fc      	b.n	8016746 <strncmp+0x1e>

0801674c <_close_r>:
 801674c:	b538      	push	{r3, r4, r5, lr}
 801674e:	4d06      	ldr	r5, [pc, #24]	@ (8016768 <_close_r+0x1c>)
 8016750:	2300      	movs	r3, #0
 8016752:	4604      	mov	r4, r0
 8016754:	4608      	mov	r0, r1
 8016756:	602b      	str	r3, [r5, #0]
 8016758:	f7ed ff56 	bl	8004608 <_close>
 801675c:	1c43      	adds	r3, r0, #1
 801675e:	d102      	bne.n	8016766 <_close_r+0x1a>
 8016760:	682b      	ldr	r3, [r5, #0]
 8016762:	b103      	cbz	r3, 8016766 <_close_r+0x1a>
 8016764:	6023      	str	r3, [r4, #0]
 8016766:	bd38      	pop	{r3, r4, r5, pc}
 8016768:	24005810 	.word	0x24005810

0801676c <_lseek_r>:
 801676c:	b538      	push	{r3, r4, r5, lr}
 801676e:	4d07      	ldr	r5, [pc, #28]	@ (801678c <_lseek_r+0x20>)
 8016770:	4604      	mov	r4, r0
 8016772:	4608      	mov	r0, r1
 8016774:	4611      	mov	r1, r2
 8016776:	2200      	movs	r2, #0
 8016778:	602a      	str	r2, [r5, #0]
 801677a:	461a      	mov	r2, r3
 801677c:	f7ed ff6b 	bl	8004656 <_lseek>
 8016780:	1c43      	adds	r3, r0, #1
 8016782:	d102      	bne.n	801678a <_lseek_r+0x1e>
 8016784:	682b      	ldr	r3, [r5, #0]
 8016786:	b103      	cbz	r3, 801678a <_lseek_r+0x1e>
 8016788:	6023      	str	r3, [r4, #0]
 801678a:	bd38      	pop	{r3, r4, r5, pc}
 801678c:	24005810 	.word	0x24005810

08016790 <_read_r>:
 8016790:	b538      	push	{r3, r4, r5, lr}
 8016792:	4d07      	ldr	r5, [pc, #28]	@ (80167b0 <_read_r+0x20>)
 8016794:	4604      	mov	r4, r0
 8016796:	4608      	mov	r0, r1
 8016798:	4611      	mov	r1, r2
 801679a:	2200      	movs	r2, #0
 801679c:	602a      	str	r2, [r5, #0]
 801679e:	461a      	mov	r2, r3
 80167a0:	f7ed fef9 	bl	8004596 <_read>
 80167a4:	1c43      	adds	r3, r0, #1
 80167a6:	d102      	bne.n	80167ae <_read_r+0x1e>
 80167a8:	682b      	ldr	r3, [r5, #0]
 80167aa:	b103      	cbz	r3, 80167ae <_read_r+0x1e>
 80167ac:	6023      	str	r3, [r4, #0]
 80167ae:	bd38      	pop	{r3, r4, r5, pc}
 80167b0:	24005810 	.word	0x24005810

080167b4 <_write_r>:
 80167b4:	b538      	push	{r3, r4, r5, lr}
 80167b6:	4d07      	ldr	r5, [pc, #28]	@ (80167d4 <_write_r+0x20>)
 80167b8:	4604      	mov	r4, r0
 80167ba:	4608      	mov	r0, r1
 80167bc:	4611      	mov	r1, r2
 80167be:	2200      	movs	r2, #0
 80167c0:	602a      	str	r2, [r5, #0]
 80167c2:	461a      	mov	r2, r3
 80167c4:	f7ed ff04 	bl	80045d0 <_write>
 80167c8:	1c43      	adds	r3, r0, #1
 80167ca:	d102      	bne.n	80167d2 <_write_r+0x1e>
 80167cc:	682b      	ldr	r3, [r5, #0]
 80167ce:	b103      	cbz	r3, 80167d2 <_write_r+0x1e>
 80167d0:	6023      	str	r3, [r4, #0]
 80167d2:	bd38      	pop	{r3, r4, r5, pc}
 80167d4:	24005810 	.word	0x24005810

080167d8 <__errno>:
 80167d8:	4b01      	ldr	r3, [pc, #4]	@ (80167e0 <__errno+0x8>)
 80167da:	6818      	ldr	r0, [r3, #0]
 80167dc:	4770      	bx	lr
 80167de:	bf00      	nop
 80167e0:	24000260 	.word	0x24000260

080167e4 <__libc_init_array>:
 80167e4:	b570      	push	{r4, r5, r6, lr}
 80167e6:	4d0d      	ldr	r5, [pc, #52]	@ (801681c <__libc_init_array+0x38>)
 80167e8:	4c0d      	ldr	r4, [pc, #52]	@ (8016820 <__libc_init_array+0x3c>)
 80167ea:	1b64      	subs	r4, r4, r5
 80167ec:	10a4      	asrs	r4, r4, #2
 80167ee:	2600      	movs	r6, #0
 80167f0:	42a6      	cmp	r6, r4
 80167f2:	d109      	bne.n	8016808 <__libc_init_array+0x24>
 80167f4:	4d0b      	ldr	r5, [pc, #44]	@ (8016824 <__libc_init_array+0x40>)
 80167f6:	4c0c      	ldr	r4, [pc, #48]	@ (8016828 <__libc_init_array+0x44>)
 80167f8:	f001 ff9a 	bl	8018730 <_init>
 80167fc:	1b64      	subs	r4, r4, r5
 80167fe:	10a4      	asrs	r4, r4, #2
 8016800:	2600      	movs	r6, #0
 8016802:	42a6      	cmp	r6, r4
 8016804:	d105      	bne.n	8016812 <__libc_init_array+0x2e>
 8016806:	bd70      	pop	{r4, r5, r6, pc}
 8016808:	f855 3b04 	ldr.w	r3, [r5], #4
 801680c:	4798      	blx	r3
 801680e:	3601      	adds	r6, #1
 8016810:	e7ee      	b.n	80167f0 <__libc_init_array+0xc>
 8016812:	f855 3b04 	ldr.w	r3, [r5], #4
 8016816:	4798      	blx	r3
 8016818:	3601      	adds	r6, #1
 801681a:	e7f2      	b.n	8016802 <__libc_init_array+0x1e>
 801681c:	08019900 	.word	0x08019900
 8016820:	08019900 	.word	0x08019900
 8016824:	08019900 	.word	0x08019900
 8016828:	08019904 	.word	0x08019904

0801682c <__retarget_lock_init_recursive>:
 801682c:	4770      	bx	lr

0801682e <__retarget_lock_acquire_recursive>:
 801682e:	4770      	bx	lr

08016830 <__retarget_lock_release_recursive>:
 8016830:	4770      	bx	lr

08016832 <memcpy>:
 8016832:	440a      	add	r2, r1
 8016834:	4291      	cmp	r1, r2
 8016836:	f100 33ff 	add.w	r3, r0, #4294967295
 801683a:	d100      	bne.n	801683e <memcpy+0xc>
 801683c:	4770      	bx	lr
 801683e:	b510      	push	{r4, lr}
 8016840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016848:	4291      	cmp	r1, r2
 801684a:	d1f9      	bne.n	8016840 <memcpy+0xe>
 801684c:	bd10      	pop	{r4, pc}
	...

08016850 <nan>:
 8016850:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016858 <nan+0x8>
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop
 8016858:	00000000 	.word	0x00000000
 801685c:	7ff80000 	.word	0x7ff80000

08016860 <_free_r>:
 8016860:	b538      	push	{r3, r4, r5, lr}
 8016862:	4605      	mov	r5, r0
 8016864:	2900      	cmp	r1, #0
 8016866:	d041      	beq.n	80168ec <_free_r+0x8c>
 8016868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801686c:	1f0c      	subs	r4, r1, #4
 801686e:	2b00      	cmp	r3, #0
 8016870:	bfb8      	it	lt
 8016872:	18e4      	addlt	r4, r4, r3
 8016874:	f000 fc2c 	bl	80170d0 <__malloc_lock>
 8016878:	4a1d      	ldr	r2, [pc, #116]	@ (80168f0 <_free_r+0x90>)
 801687a:	6813      	ldr	r3, [r2, #0]
 801687c:	b933      	cbnz	r3, 801688c <_free_r+0x2c>
 801687e:	6063      	str	r3, [r4, #4]
 8016880:	6014      	str	r4, [r2, #0]
 8016882:	4628      	mov	r0, r5
 8016884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016888:	f000 bc28 	b.w	80170dc <__malloc_unlock>
 801688c:	42a3      	cmp	r3, r4
 801688e:	d908      	bls.n	80168a2 <_free_r+0x42>
 8016890:	6820      	ldr	r0, [r4, #0]
 8016892:	1821      	adds	r1, r4, r0
 8016894:	428b      	cmp	r3, r1
 8016896:	bf01      	itttt	eq
 8016898:	6819      	ldreq	r1, [r3, #0]
 801689a:	685b      	ldreq	r3, [r3, #4]
 801689c:	1809      	addeq	r1, r1, r0
 801689e:	6021      	streq	r1, [r4, #0]
 80168a0:	e7ed      	b.n	801687e <_free_r+0x1e>
 80168a2:	461a      	mov	r2, r3
 80168a4:	685b      	ldr	r3, [r3, #4]
 80168a6:	b10b      	cbz	r3, 80168ac <_free_r+0x4c>
 80168a8:	42a3      	cmp	r3, r4
 80168aa:	d9fa      	bls.n	80168a2 <_free_r+0x42>
 80168ac:	6811      	ldr	r1, [r2, #0]
 80168ae:	1850      	adds	r0, r2, r1
 80168b0:	42a0      	cmp	r0, r4
 80168b2:	d10b      	bne.n	80168cc <_free_r+0x6c>
 80168b4:	6820      	ldr	r0, [r4, #0]
 80168b6:	4401      	add	r1, r0
 80168b8:	1850      	adds	r0, r2, r1
 80168ba:	4283      	cmp	r3, r0
 80168bc:	6011      	str	r1, [r2, #0]
 80168be:	d1e0      	bne.n	8016882 <_free_r+0x22>
 80168c0:	6818      	ldr	r0, [r3, #0]
 80168c2:	685b      	ldr	r3, [r3, #4]
 80168c4:	6053      	str	r3, [r2, #4]
 80168c6:	4408      	add	r0, r1
 80168c8:	6010      	str	r0, [r2, #0]
 80168ca:	e7da      	b.n	8016882 <_free_r+0x22>
 80168cc:	d902      	bls.n	80168d4 <_free_r+0x74>
 80168ce:	230c      	movs	r3, #12
 80168d0:	602b      	str	r3, [r5, #0]
 80168d2:	e7d6      	b.n	8016882 <_free_r+0x22>
 80168d4:	6820      	ldr	r0, [r4, #0]
 80168d6:	1821      	adds	r1, r4, r0
 80168d8:	428b      	cmp	r3, r1
 80168da:	bf04      	itt	eq
 80168dc:	6819      	ldreq	r1, [r3, #0]
 80168de:	685b      	ldreq	r3, [r3, #4]
 80168e0:	6063      	str	r3, [r4, #4]
 80168e2:	bf04      	itt	eq
 80168e4:	1809      	addeq	r1, r1, r0
 80168e6:	6021      	streq	r1, [r4, #0]
 80168e8:	6054      	str	r4, [r2, #4]
 80168ea:	e7ca      	b.n	8016882 <_free_r+0x22>
 80168ec:	bd38      	pop	{r3, r4, r5, pc}
 80168ee:	bf00      	nop
 80168f0:	2400581c 	.word	0x2400581c

080168f4 <rshift>:
 80168f4:	6903      	ldr	r3, [r0, #16]
 80168f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80168fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016902:	f100 0414 	add.w	r4, r0, #20
 8016906:	dd45      	ble.n	8016994 <rshift+0xa0>
 8016908:	f011 011f 	ands.w	r1, r1, #31
 801690c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016910:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016914:	d10c      	bne.n	8016930 <rshift+0x3c>
 8016916:	f100 0710 	add.w	r7, r0, #16
 801691a:	4629      	mov	r1, r5
 801691c:	42b1      	cmp	r1, r6
 801691e:	d334      	bcc.n	801698a <rshift+0x96>
 8016920:	1a9b      	subs	r3, r3, r2
 8016922:	009b      	lsls	r3, r3, #2
 8016924:	1eea      	subs	r2, r5, #3
 8016926:	4296      	cmp	r6, r2
 8016928:	bf38      	it	cc
 801692a:	2300      	movcc	r3, #0
 801692c:	4423      	add	r3, r4
 801692e:	e015      	b.n	801695c <rshift+0x68>
 8016930:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016934:	f1c1 0820 	rsb	r8, r1, #32
 8016938:	40cf      	lsrs	r7, r1
 801693a:	f105 0e04 	add.w	lr, r5, #4
 801693e:	46a1      	mov	r9, r4
 8016940:	4576      	cmp	r6, lr
 8016942:	46f4      	mov	ip, lr
 8016944:	d815      	bhi.n	8016972 <rshift+0x7e>
 8016946:	1a9a      	subs	r2, r3, r2
 8016948:	0092      	lsls	r2, r2, #2
 801694a:	3a04      	subs	r2, #4
 801694c:	3501      	adds	r5, #1
 801694e:	42ae      	cmp	r6, r5
 8016950:	bf38      	it	cc
 8016952:	2200      	movcc	r2, #0
 8016954:	18a3      	adds	r3, r4, r2
 8016956:	50a7      	str	r7, [r4, r2]
 8016958:	b107      	cbz	r7, 801695c <rshift+0x68>
 801695a:	3304      	adds	r3, #4
 801695c:	1b1a      	subs	r2, r3, r4
 801695e:	42a3      	cmp	r3, r4
 8016960:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016964:	bf08      	it	eq
 8016966:	2300      	moveq	r3, #0
 8016968:	6102      	str	r2, [r0, #16]
 801696a:	bf08      	it	eq
 801696c:	6143      	streq	r3, [r0, #20]
 801696e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016972:	f8dc c000 	ldr.w	ip, [ip]
 8016976:	fa0c fc08 	lsl.w	ip, ip, r8
 801697a:	ea4c 0707 	orr.w	r7, ip, r7
 801697e:	f849 7b04 	str.w	r7, [r9], #4
 8016982:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016986:	40cf      	lsrs	r7, r1
 8016988:	e7da      	b.n	8016940 <rshift+0x4c>
 801698a:	f851 cb04 	ldr.w	ip, [r1], #4
 801698e:	f847 cf04 	str.w	ip, [r7, #4]!
 8016992:	e7c3      	b.n	801691c <rshift+0x28>
 8016994:	4623      	mov	r3, r4
 8016996:	e7e1      	b.n	801695c <rshift+0x68>

08016998 <__hexdig_fun>:
 8016998:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801699c:	2b09      	cmp	r3, #9
 801699e:	d802      	bhi.n	80169a6 <__hexdig_fun+0xe>
 80169a0:	3820      	subs	r0, #32
 80169a2:	b2c0      	uxtb	r0, r0
 80169a4:	4770      	bx	lr
 80169a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80169aa:	2b05      	cmp	r3, #5
 80169ac:	d801      	bhi.n	80169b2 <__hexdig_fun+0x1a>
 80169ae:	3847      	subs	r0, #71	@ 0x47
 80169b0:	e7f7      	b.n	80169a2 <__hexdig_fun+0xa>
 80169b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80169b6:	2b05      	cmp	r3, #5
 80169b8:	d801      	bhi.n	80169be <__hexdig_fun+0x26>
 80169ba:	3827      	subs	r0, #39	@ 0x27
 80169bc:	e7f1      	b.n	80169a2 <__hexdig_fun+0xa>
 80169be:	2000      	movs	r0, #0
 80169c0:	4770      	bx	lr
	...

080169c4 <__gethex>:
 80169c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169c8:	b085      	sub	sp, #20
 80169ca:	468a      	mov	sl, r1
 80169cc:	9302      	str	r3, [sp, #8]
 80169ce:	680b      	ldr	r3, [r1, #0]
 80169d0:	9001      	str	r0, [sp, #4]
 80169d2:	4690      	mov	r8, r2
 80169d4:	1c9c      	adds	r4, r3, #2
 80169d6:	46a1      	mov	r9, r4
 80169d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80169dc:	2830      	cmp	r0, #48	@ 0x30
 80169de:	d0fa      	beq.n	80169d6 <__gethex+0x12>
 80169e0:	eba9 0303 	sub.w	r3, r9, r3
 80169e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80169e8:	f7ff ffd6 	bl	8016998 <__hexdig_fun>
 80169ec:	4605      	mov	r5, r0
 80169ee:	2800      	cmp	r0, #0
 80169f0:	d168      	bne.n	8016ac4 <__gethex+0x100>
 80169f2:	49a0      	ldr	r1, [pc, #640]	@ (8016c74 <__gethex+0x2b0>)
 80169f4:	2201      	movs	r2, #1
 80169f6:	4648      	mov	r0, r9
 80169f8:	f7ff fe96 	bl	8016728 <strncmp>
 80169fc:	4607      	mov	r7, r0
 80169fe:	2800      	cmp	r0, #0
 8016a00:	d167      	bne.n	8016ad2 <__gethex+0x10e>
 8016a02:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016a06:	4626      	mov	r6, r4
 8016a08:	f7ff ffc6 	bl	8016998 <__hexdig_fun>
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	d062      	beq.n	8016ad6 <__gethex+0x112>
 8016a10:	4623      	mov	r3, r4
 8016a12:	7818      	ldrb	r0, [r3, #0]
 8016a14:	2830      	cmp	r0, #48	@ 0x30
 8016a16:	4699      	mov	r9, r3
 8016a18:	f103 0301 	add.w	r3, r3, #1
 8016a1c:	d0f9      	beq.n	8016a12 <__gethex+0x4e>
 8016a1e:	f7ff ffbb 	bl	8016998 <__hexdig_fun>
 8016a22:	fab0 f580 	clz	r5, r0
 8016a26:	096d      	lsrs	r5, r5, #5
 8016a28:	f04f 0b01 	mov.w	fp, #1
 8016a2c:	464a      	mov	r2, r9
 8016a2e:	4616      	mov	r6, r2
 8016a30:	3201      	adds	r2, #1
 8016a32:	7830      	ldrb	r0, [r6, #0]
 8016a34:	f7ff ffb0 	bl	8016998 <__hexdig_fun>
 8016a38:	2800      	cmp	r0, #0
 8016a3a:	d1f8      	bne.n	8016a2e <__gethex+0x6a>
 8016a3c:	498d      	ldr	r1, [pc, #564]	@ (8016c74 <__gethex+0x2b0>)
 8016a3e:	2201      	movs	r2, #1
 8016a40:	4630      	mov	r0, r6
 8016a42:	f7ff fe71 	bl	8016728 <strncmp>
 8016a46:	2800      	cmp	r0, #0
 8016a48:	d13f      	bne.n	8016aca <__gethex+0x106>
 8016a4a:	b944      	cbnz	r4, 8016a5e <__gethex+0x9a>
 8016a4c:	1c74      	adds	r4, r6, #1
 8016a4e:	4622      	mov	r2, r4
 8016a50:	4616      	mov	r6, r2
 8016a52:	3201      	adds	r2, #1
 8016a54:	7830      	ldrb	r0, [r6, #0]
 8016a56:	f7ff ff9f 	bl	8016998 <__hexdig_fun>
 8016a5a:	2800      	cmp	r0, #0
 8016a5c:	d1f8      	bne.n	8016a50 <__gethex+0x8c>
 8016a5e:	1ba4      	subs	r4, r4, r6
 8016a60:	00a7      	lsls	r7, r4, #2
 8016a62:	7833      	ldrb	r3, [r6, #0]
 8016a64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016a68:	2b50      	cmp	r3, #80	@ 0x50
 8016a6a:	d13e      	bne.n	8016aea <__gethex+0x126>
 8016a6c:	7873      	ldrb	r3, [r6, #1]
 8016a6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8016a70:	d033      	beq.n	8016ada <__gethex+0x116>
 8016a72:	2b2d      	cmp	r3, #45	@ 0x2d
 8016a74:	d034      	beq.n	8016ae0 <__gethex+0x11c>
 8016a76:	1c71      	adds	r1, r6, #1
 8016a78:	2400      	movs	r4, #0
 8016a7a:	7808      	ldrb	r0, [r1, #0]
 8016a7c:	f7ff ff8c 	bl	8016998 <__hexdig_fun>
 8016a80:	1e43      	subs	r3, r0, #1
 8016a82:	b2db      	uxtb	r3, r3
 8016a84:	2b18      	cmp	r3, #24
 8016a86:	d830      	bhi.n	8016aea <__gethex+0x126>
 8016a88:	f1a0 0210 	sub.w	r2, r0, #16
 8016a8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016a90:	f7ff ff82 	bl	8016998 <__hexdig_fun>
 8016a94:	f100 3cff 	add.w	ip, r0, #4294967295
 8016a98:	fa5f fc8c 	uxtb.w	ip, ip
 8016a9c:	f1bc 0f18 	cmp.w	ip, #24
 8016aa0:	f04f 030a 	mov.w	r3, #10
 8016aa4:	d91e      	bls.n	8016ae4 <__gethex+0x120>
 8016aa6:	b104      	cbz	r4, 8016aaa <__gethex+0xe6>
 8016aa8:	4252      	negs	r2, r2
 8016aaa:	4417      	add	r7, r2
 8016aac:	f8ca 1000 	str.w	r1, [sl]
 8016ab0:	b1ed      	cbz	r5, 8016aee <__gethex+0x12a>
 8016ab2:	f1bb 0f00 	cmp.w	fp, #0
 8016ab6:	bf0c      	ite	eq
 8016ab8:	2506      	moveq	r5, #6
 8016aba:	2500      	movne	r5, #0
 8016abc:	4628      	mov	r0, r5
 8016abe:	b005      	add	sp, #20
 8016ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac4:	2500      	movs	r5, #0
 8016ac6:	462c      	mov	r4, r5
 8016ac8:	e7b0      	b.n	8016a2c <__gethex+0x68>
 8016aca:	2c00      	cmp	r4, #0
 8016acc:	d1c7      	bne.n	8016a5e <__gethex+0x9a>
 8016ace:	4627      	mov	r7, r4
 8016ad0:	e7c7      	b.n	8016a62 <__gethex+0x9e>
 8016ad2:	464e      	mov	r6, r9
 8016ad4:	462f      	mov	r7, r5
 8016ad6:	2501      	movs	r5, #1
 8016ad8:	e7c3      	b.n	8016a62 <__gethex+0x9e>
 8016ada:	2400      	movs	r4, #0
 8016adc:	1cb1      	adds	r1, r6, #2
 8016ade:	e7cc      	b.n	8016a7a <__gethex+0xb6>
 8016ae0:	2401      	movs	r4, #1
 8016ae2:	e7fb      	b.n	8016adc <__gethex+0x118>
 8016ae4:	fb03 0002 	mla	r0, r3, r2, r0
 8016ae8:	e7ce      	b.n	8016a88 <__gethex+0xc4>
 8016aea:	4631      	mov	r1, r6
 8016aec:	e7de      	b.n	8016aac <__gethex+0xe8>
 8016aee:	eba6 0309 	sub.w	r3, r6, r9
 8016af2:	3b01      	subs	r3, #1
 8016af4:	4629      	mov	r1, r5
 8016af6:	2b07      	cmp	r3, #7
 8016af8:	dc0a      	bgt.n	8016b10 <__gethex+0x14c>
 8016afa:	9801      	ldr	r0, [sp, #4]
 8016afc:	f000 faf4 	bl	80170e8 <_Balloc>
 8016b00:	4604      	mov	r4, r0
 8016b02:	b940      	cbnz	r0, 8016b16 <__gethex+0x152>
 8016b04:	4b5c      	ldr	r3, [pc, #368]	@ (8016c78 <__gethex+0x2b4>)
 8016b06:	4602      	mov	r2, r0
 8016b08:	21e4      	movs	r1, #228	@ 0xe4
 8016b0a:	485c      	ldr	r0, [pc, #368]	@ (8016c7c <__gethex+0x2b8>)
 8016b0c:	f001 f864 	bl	8017bd8 <__assert_func>
 8016b10:	3101      	adds	r1, #1
 8016b12:	105b      	asrs	r3, r3, #1
 8016b14:	e7ef      	b.n	8016af6 <__gethex+0x132>
 8016b16:	f100 0a14 	add.w	sl, r0, #20
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	4655      	mov	r5, sl
 8016b1e:	469b      	mov	fp, r3
 8016b20:	45b1      	cmp	r9, r6
 8016b22:	d337      	bcc.n	8016b94 <__gethex+0x1d0>
 8016b24:	f845 bb04 	str.w	fp, [r5], #4
 8016b28:	eba5 050a 	sub.w	r5, r5, sl
 8016b2c:	10ad      	asrs	r5, r5, #2
 8016b2e:	6125      	str	r5, [r4, #16]
 8016b30:	4658      	mov	r0, fp
 8016b32:	f000 fbcb 	bl	80172cc <__hi0bits>
 8016b36:	016d      	lsls	r5, r5, #5
 8016b38:	f8d8 6000 	ldr.w	r6, [r8]
 8016b3c:	1a2d      	subs	r5, r5, r0
 8016b3e:	42b5      	cmp	r5, r6
 8016b40:	dd54      	ble.n	8016bec <__gethex+0x228>
 8016b42:	1bad      	subs	r5, r5, r6
 8016b44:	4629      	mov	r1, r5
 8016b46:	4620      	mov	r0, r4
 8016b48:	f000 ff5c 	bl	8017a04 <__any_on>
 8016b4c:	4681      	mov	r9, r0
 8016b4e:	b178      	cbz	r0, 8016b70 <__gethex+0x1ac>
 8016b50:	1e6b      	subs	r3, r5, #1
 8016b52:	1159      	asrs	r1, r3, #5
 8016b54:	f003 021f 	and.w	r2, r3, #31
 8016b58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016b5c:	f04f 0901 	mov.w	r9, #1
 8016b60:	fa09 f202 	lsl.w	r2, r9, r2
 8016b64:	420a      	tst	r2, r1
 8016b66:	d003      	beq.n	8016b70 <__gethex+0x1ac>
 8016b68:	454b      	cmp	r3, r9
 8016b6a:	dc36      	bgt.n	8016bda <__gethex+0x216>
 8016b6c:	f04f 0902 	mov.w	r9, #2
 8016b70:	4629      	mov	r1, r5
 8016b72:	4620      	mov	r0, r4
 8016b74:	f7ff febe 	bl	80168f4 <rshift>
 8016b78:	442f      	add	r7, r5
 8016b7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016b7e:	42bb      	cmp	r3, r7
 8016b80:	da42      	bge.n	8016c08 <__gethex+0x244>
 8016b82:	9801      	ldr	r0, [sp, #4]
 8016b84:	4621      	mov	r1, r4
 8016b86:	f000 faef 	bl	8017168 <_Bfree>
 8016b8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	6013      	str	r3, [r2, #0]
 8016b90:	25a3      	movs	r5, #163	@ 0xa3
 8016b92:	e793      	b.n	8016abc <__gethex+0xf8>
 8016b94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016b98:	2a2e      	cmp	r2, #46	@ 0x2e
 8016b9a:	d012      	beq.n	8016bc2 <__gethex+0x1fe>
 8016b9c:	2b20      	cmp	r3, #32
 8016b9e:	d104      	bne.n	8016baa <__gethex+0x1e6>
 8016ba0:	f845 bb04 	str.w	fp, [r5], #4
 8016ba4:	f04f 0b00 	mov.w	fp, #0
 8016ba8:	465b      	mov	r3, fp
 8016baa:	7830      	ldrb	r0, [r6, #0]
 8016bac:	9303      	str	r3, [sp, #12]
 8016bae:	f7ff fef3 	bl	8016998 <__hexdig_fun>
 8016bb2:	9b03      	ldr	r3, [sp, #12]
 8016bb4:	f000 000f 	and.w	r0, r0, #15
 8016bb8:	4098      	lsls	r0, r3
 8016bba:	ea4b 0b00 	orr.w	fp, fp, r0
 8016bbe:	3304      	adds	r3, #4
 8016bc0:	e7ae      	b.n	8016b20 <__gethex+0x15c>
 8016bc2:	45b1      	cmp	r9, r6
 8016bc4:	d8ea      	bhi.n	8016b9c <__gethex+0x1d8>
 8016bc6:	492b      	ldr	r1, [pc, #172]	@ (8016c74 <__gethex+0x2b0>)
 8016bc8:	9303      	str	r3, [sp, #12]
 8016bca:	2201      	movs	r2, #1
 8016bcc:	4630      	mov	r0, r6
 8016bce:	f7ff fdab 	bl	8016728 <strncmp>
 8016bd2:	9b03      	ldr	r3, [sp, #12]
 8016bd4:	2800      	cmp	r0, #0
 8016bd6:	d1e1      	bne.n	8016b9c <__gethex+0x1d8>
 8016bd8:	e7a2      	b.n	8016b20 <__gethex+0x15c>
 8016bda:	1ea9      	subs	r1, r5, #2
 8016bdc:	4620      	mov	r0, r4
 8016bde:	f000 ff11 	bl	8017a04 <__any_on>
 8016be2:	2800      	cmp	r0, #0
 8016be4:	d0c2      	beq.n	8016b6c <__gethex+0x1a8>
 8016be6:	f04f 0903 	mov.w	r9, #3
 8016bea:	e7c1      	b.n	8016b70 <__gethex+0x1ac>
 8016bec:	da09      	bge.n	8016c02 <__gethex+0x23e>
 8016bee:	1b75      	subs	r5, r6, r5
 8016bf0:	4621      	mov	r1, r4
 8016bf2:	9801      	ldr	r0, [sp, #4]
 8016bf4:	462a      	mov	r2, r5
 8016bf6:	f000 fccf 	bl	8017598 <__lshift>
 8016bfa:	1b7f      	subs	r7, r7, r5
 8016bfc:	4604      	mov	r4, r0
 8016bfe:	f100 0a14 	add.w	sl, r0, #20
 8016c02:	f04f 0900 	mov.w	r9, #0
 8016c06:	e7b8      	b.n	8016b7a <__gethex+0x1b6>
 8016c08:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016c0c:	42bd      	cmp	r5, r7
 8016c0e:	dd6f      	ble.n	8016cf0 <__gethex+0x32c>
 8016c10:	1bed      	subs	r5, r5, r7
 8016c12:	42ae      	cmp	r6, r5
 8016c14:	dc34      	bgt.n	8016c80 <__gethex+0x2bc>
 8016c16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016c1a:	2b02      	cmp	r3, #2
 8016c1c:	d022      	beq.n	8016c64 <__gethex+0x2a0>
 8016c1e:	2b03      	cmp	r3, #3
 8016c20:	d024      	beq.n	8016c6c <__gethex+0x2a8>
 8016c22:	2b01      	cmp	r3, #1
 8016c24:	d115      	bne.n	8016c52 <__gethex+0x28e>
 8016c26:	42ae      	cmp	r6, r5
 8016c28:	d113      	bne.n	8016c52 <__gethex+0x28e>
 8016c2a:	2e01      	cmp	r6, #1
 8016c2c:	d10b      	bne.n	8016c46 <__gethex+0x282>
 8016c2e:	9a02      	ldr	r2, [sp, #8]
 8016c30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016c34:	6013      	str	r3, [r2, #0]
 8016c36:	2301      	movs	r3, #1
 8016c38:	6123      	str	r3, [r4, #16]
 8016c3a:	f8ca 3000 	str.w	r3, [sl]
 8016c3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c40:	2562      	movs	r5, #98	@ 0x62
 8016c42:	601c      	str	r4, [r3, #0]
 8016c44:	e73a      	b.n	8016abc <__gethex+0xf8>
 8016c46:	1e71      	subs	r1, r6, #1
 8016c48:	4620      	mov	r0, r4
 8016c4a:	f000 fedb 	bl	8017a04 <__any_on>
 8016c4e:	2800      	cmp	r0, #0
 8016c50:	d1ed      	bne.n	8016c2e <__gethex+0x26a>
 8016c52:	9801      	ldr	r0, [sp, #4]
 8016c54:	4621      	mov	r1, r4
 8016c56:	f000 fa87 	bl	8017168 <_Bfree>
 8016c5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	6013      	str	r3, [r2, #0]
 8016c60:	2550      	movs	r5, #80	@ 0x50
 8016c62:	e72b      	b.n	8016abc <__gethex+0xf8>
 8016c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d1f3      	bne.n	8016c52 <__gethex+0x28e>
 8016c6a:	e7e0      	b.n	8016c2e <__gethex+0x26a>
 8016c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d1dd      	bne.n	8016c2e <__gethex+0x26a>
 8016c72:	e7ee      	b.n	8016c52 <__gethex+0x28e>
 8016c74:	08018cac 	.word	0x08018cac
 8016c78:	08018e19 	.word	0x08018e19
 8016c7c:	08018e2a 	.word	0x08018e2a
 8016c80:	1e6f      	subs	r7, r5, #1
 8016c82:	f1b9 0f00 	cmp.w	r9, #0
 8016c86:	d130      	bne.n	8016cea <__gethex+0x326>
 8016c88:	b127      	cbz	r7, 8016c94 <__gethex+0x2d0>
 8016c8a:	4639      	mov	r1, r7
 8016c8c:	4620      	mov	r0, r4
 8016c8e:	f000 feb9 	bl	8017a04 <__any_on>
 8016c92:	4681      	mov	r9, r0
 8016c94:	117a      	asrs	r2, r7, #5
 8016c96:	2301      	movs	r3, #1
 8016c98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016c9c:	f007 071f 	and.w	r7, r7, #31
 8016ca0:	40bb      	lsls	r3, r7
 8016ca2:	4213      	tst	r3, r2
 8016ca4:	4629      	mov	r1, r5
 8016ca6:	4620      	mov	r0, r4
 8016ca8:	bf18      	it	ne
 8016caa:	f049 0902 	orrne.w	r9, r9, #2
 8016cae:	f7ff fe21 	bl	80168f4 <rshift>
 8016cb2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016cb6:	1b76      	subs	r6, r6, r5
 8016cb8:	2502      	movs	r5, #2
 8016cba:	f1b9 0f00 	cmp.w	r9, #0
 8016cbe:	d047      	beq.n	8016d50 <__gethex+0x38c>
 8016cc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016cc4:	2b02      	cmp	r3, #2
 8016cc6:	d015      	beq.n	8016cf4 <__gethex+0x330>
 8016cc8:	2b03      	cmp	r3, #3
 8016cca:	d017      	beq.n	8016cfc <__gethex+0x338>
 8016ccc:	2b01      	cmp	r3, #1
 8016cce:	d109      	bne.n	8016ce4 <__gethex+0x320>
 8016cd0:	f019 0f02 	tst.w	r9, #2
 8016cd4:	d006      	beq.n	8016ce4 <__gethex+0x320>
 8016cd6:	f8da 3000 	ldr.w	r3, [sl]
 8016cda:	ea49 0903 	orr.w	r9, r9, r3
 8016cde:	f019 0f01 	tst.w	r9, #1
 8016ce2:	d10e      	bne.n	8016d02 <__gethex+0x33e>
 8016ce4:	f045 0510 	orr.w	r5, r5, #16
 8016ce8:	e032      	b.n	8016d50 <__gethex+0x38c>
 8016cea:	f04f 0901 	mov.w	r9, #1
 8016cee:	e7d1      	b.n	8016c94 <__gethex+0x2d0>
 8016cf0:	2501      	movs	r5, #1
 8016cf2:	e7e2      	b.n	8016cba <__gethex+0x2f6>
 8016cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016cf6:	f1c3 0301 	rsb	r3, r3, #1
 8016cfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d0f0      	beq.n	8016ce4 <__gethex+0x320>
 8016d02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016d06:	f104 0314 	add.w	r3, r4, #20
 8016d0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016d0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016d12:	f04f 0c00 	mov.w	ip, #0
 8016d16:	4618      	mov	r0, r3
 8016d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016d20:	d01b      	beq.n	8016d5a <__gethex+0x396>
 8016d22:	3201      	adds	r2, #1
 8016d24:	6002      	str	r2, [r0, #0]
 8016d26:	2d02      	cmp	r5, #2
 8016d28:	f104 0314 	add.w	r3, r4, #20
 8016d2c:	d13c      	bne.n	8016da8 <__gethex+0x3e4>
 8016d2e:	f8d8 2000 	ldr.w	r2, [r8]
 8016d32:	3a01      	subs	r2, #1
 8016d34:	42b2      	cmp	r2, r6
 8016d36:	d109      	bne.n	8016d4c <__gethex+0x388>
 8016d38:	1171      	asrs	r1, r6, #5
 8016d3a:	2201      	movs	r2, #1
 8016d3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016d40:	f006 061f 	and.w	r6, r6, #31
 8016d44:	fa02 f606 	lsl.w	r6, r2, r6
 8016d48:	421e      	tst	r6, r3
 8016d4a:	d13a      	bne.n	8016dc2 <__gethex+0x3fe>
 8016d4c:	f045 0520 	orr.w	r5, r5, #32
 8016d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d52:	601c      	str	r4, [r3, #0]
 8016d54:	9b02      	ldr	r3, [sp, #8]
 8016d56:	601f      	str	r7, [r3, #0]
 8016d58:	e6b0      	b.n	8016abc <__gethex+0xf8>
 8016d5a:	4299      	cmp	r1, r3
 8016d5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016d60:	d8d9      	bhi.n	8016d16 <__gethex+0x352>
 8016d62:	68a3      	ldr	r3, [r4, #8]
 8016d64:	459b      	cmp	fp, r3
 8016d66:	db17      	blt.n	8016d98 <__gethex+0x3d4>
 8016d68:	6861      	ldr	r1, [r4, #4]
 8016d6a:	9801      	ldr	r0, [sp, #4]
 8016d6c:	3101      	adds	r1, #1
 8016d6e:	f000 f9bb 	bl	80170e8 <_Balloc>
 8016d72:	4681      	mov	r9, r0
 8016d74:	b918      	cbnz	r0, 8016d7e <__gethex+0x3ba>
 8016d76:	4b1a      	ldr	r3, [pc, #104]	@ (8016de0 <__gethex+0x41c>)
 8016d78:	4602      	mov	r2, r0
 8016d7a:	2184      	movs	r1, #132	@ 0x84
 8016d7c:	e6c5      	b.n	8016b0a <__gethex+0x146>
 8016d7e:	6922      	ldr	r2, [r4, #16]
 8016d80:	3202      	adds	r2, #2
 8016d82:	f104 010c 	add.w	r1, r4, #12
 8016d86:	0092      	lsls	r2, r2, #2
 8016d88:	300c      	adds	r0, #12
 8016d8a:	f7ff fd52 	bl	8016832 <memcpy>
 8016d8e:	4621      	mov	r1, r4
 8016d90:	9801      	ldr	r0, [sp, #4]
 8016d92:	f000 f9e9 	bl	8017168 <_Bfree>
 8016d96:	464c      	mov	r4, r9
 8016d98:	6923      	ldr	r3, [r4, #16]
 8016d9a:	1c5a      	adds	r2, r3, #1
 8016d9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016da0:	6122      	str	r2, [r4, #16]
 8016da2:	2201      	movs	r2, #1
 8016da4:	615a      	str	r2, [r3, #20]
 8016da6:	e7be      	b.n	8016d26 <__gethex+0x362>
 8016da8:	6922      	ldr	r2, [r4, #16]
 8016daa:	455a      	cmp	r2, fp
 8016dac:	dd0b      	ble.n	8016dc6 <__gethex+0x402>
 8016dae:	2101      	movs	r1, #1
 8016db0:	4620      	mov	r0, r4
 8016db2:	f7ff fd9f 	bl	80168f4 <rshift>
 8016db6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016dba:	3701      	adds	r7, #1
 8016dbc:	42bb      	cmp	r3, r7
 8016dbe:	f6ff aee0 	blt.w	8016b82 <__gethex+0x1be>
 8016dc2:	2501      	movs	r5, #1
 8016dc4:	e7c2      	b.n	8016d4c <__gethex+0x388>
 8016dc6:	f016 061f 	ands.w	r6, r6, #31
 8016dca:	d0fa      	beq.n	8016dc2 <__gethex+0x3fe>
 8016dcc:	4453      	add	r3, sl
 8016dce:	f1c6 0620 	rsb	r6, r6, #32
 8016dd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016dd6:	f000 fa79 	bl	80172cc <__hi0bits>
 8016dda:	42b0      	cmp	r0, r6
 8016ddc:	dbe7      	blt.n	8016dae <__gethex+0x3ea>
 8016dde:	e7f0      	b.n	8016dc2 <__gethex+0x3fe>
 8016de0:	08018e19 	.word	0x08018e19

08016de4 <L_shift>:
 8016de4:	f1c2 0208 	rsb	r2, r2, #8
 8016de8:	0092      	lsls	r2, r2, #2
 8016dea:	b570      	push	{r4, r5, r6, lr}
 8016dec:	f1c2 0620 	rsb	r6, r2, #32
 8016df0:	6843      	ldr	r3, [r0, #4]
 8016df2:	6804      	ldr	r4, [r0, #0]
 8016df4:	fa03 f506 	lsl.w	r5, r3, r6
 8016df8:	432c      	orrs	r4, r5
 8016dfa:	40d3      	lsrs	r3, r2
 8016dfc:	6004      	str	r4, [r0, #0]
 8016dfe:	f840 3f04 	str.w	r3, [r0, #4]!
 8016e02:	4288      	cmp	r0, r1
 8016e04:	d3f4      	bcc.n	8016df0 <L_shift+0xc>
 8016e06:	bd70      	pop	{r4, r5, r6, pc}

08016e08 <__match>:
 8016e08:	b530      	push	{r4, r5, lr}
 8016e0a:	6803      	ldr	r3, [r0, #0]
 8016e0c:	3301      	adds	r3, #1
 8016e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e12:	b914      	cbnz	r4, 8016e1a <__match+0x12>
 8016e14:	6003      	str	r3, [r0, #0]
 8016e16:	2001      	movs	r0, #1
 8016e18:	bd30      	pop	{r4, r5, pc}
 8016e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e1e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016e22:	2d19      	cmp	r5, #25
 8016e24:	bf98      	it	ls
 8016e26:	3220      	addls	r2, #32
 8016e28:	42a2      	cmp	r2, r4
 8016e2a:	d0f0      	beq.n	8016e0e <__match+0x6>
 8016e2c:	2000      	movs	r0, #0
 8016e2e:	e7f3      	b.n	8016e18 <__match+0x10>

08016e30 <__hexnan>:
 8016e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e34:	680b      	ldr	r3, [r1, #0]
 8016e36:	6801      	ldr	r1, [r0, #0]
 8016e38:	115e      	asrs	r6, r3, #5
 8016e3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016e3e:	f013 031f 	ands.w	r3, r3, #31
 8016e42:	b087      	sub	sp, #28
 8016e44:	bf18      	it	ne
 8016e46:	3604      	addne	r6, #4
 8016e48:	2500      	movs	r5, #0
 8016e4a:	1f37      	subs	r7, r6, #4
 8016e4c:	4682      	mov	sl, r0
 8016e4e:	4690      	mov	r8, r2
 8016e50:	9301      	str	r3, [sp, #4]
 8016e52:	f846 5c04 	str.w	r5, [r6, #-4]
 8016e56:	46b9      	mov	r9, r7
 8016e58:	463c      	mov	r4, r7
 8016e5a:	9502      	str	r5, [sp, #8]
 8016e5c:	46ab      	mov	fp, r5
 8016e5e:	784a      	ldrb	r2, [r1, #1]
 8016e60:	1c4b      	adds	r3, r1, #1
 8016e62:	9303      	str	r3, [sp, #12]
 8016e64:	b342      	cbz	r2, 8016eb8 <__hexnan+0x88>
 8016e66:	4610      	mov	r0, r2
 8016e68:	9105      	str	r1, [sp, #20]
 8016e6a:	9204      	str	r2, [sp, #16]
 8016e6c:	f7ff fd94 	bl	8016998 <__hexdig_fun>
 8016e70:	2800      	cmp	r0, #0
 8016e72:	d151      	bne.n	8016f18 <__hexnan+0xe8>
 8016e74:	9a04      	ldr	r2, [sp, #16]
 8016e76:	9905      	ldr	r1, [sp, #20]
 8016e78:	2a20      	cmp	r2, #32
 8016e7a:	d818      	bhi.n	8016eae <__hexnan+0x7e>
 8016e7c:	9b02      	ldr	r3, [sp, #8]
 8016e7e:	459b      	cmp	fp, r3
 8016e80:	dd13      	ble.n	8016eaa <__hexnan+0x7a>
 8016e82:	454c      	cmp	r4, r9
 8016e84:	d206      	bcs.n	8016e94 <__hexnan+0x64>
 8016e86:	2d07      	cmp	r5, #7
 8016e88:	dc04      	bgt.n	8016e94 <__hexnan+0x64>
 8016e8a:	462a      	mov	r2, r5
 8016e8c:	4649      	mov	r1, r9
 8016e8e:	4620      	mov	r0, r4
 8016e90:	f7ff ffa8 	bl	8016de4 <L_shift>
 8016e94:	4544      	cmp	r4, r8
 8016e96:	d952      	bls.n	8016f3e <__hexnan+0x10e>
 8016e98:	2300      	movs	r3, #0
 8016e9a:	f1a4 0904 	sub.w	r9, r4, #4
 8016e9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016ea2:	f8cd b008 	str.w	fp, [sp, #8]
 8016ea6:	464c      	mov	r4, r9
 8016ea8:	461d      	mov	r5, r3
 8016eaa:	9903      	ldr	r1, [sp, #12]
 8016eac:	e7d7      	b.n	8016e5e <__hexnan+0x2e>
 8016eae:	2a29      	cmp	r2, #41	@ 0x29
 8016eb0:	d157      	bne.n	8016f62 <__hexnan+0x132>
 8016eb2:	3102      	adds	r1, #2
 8016eb4:	f8ca 1000 	str.w	r1, [sl]
 8016eb8:	f1bb 0f00 	cmp.w	fp, #0
 8016ebc:	d051      	beq.n	8016f62 <__hexnan+0x132>
 8016ebe:	454c      	cmp	r4, r9
 8016ec0:	d206      	bcs.n	8016ed0 <__hexnan+0xa0>
 8016ec2:	2d07      	cmp	r5, #7
 8016ec4:	dc04      	bgt.n	8016ed0 <__hexnan+0xa0>
 8016ec6:	462a      	mov	r2, r5
 8016ec8:	4649      	mov	r1, r9
 8016eca:	4620      	mov	r0, r4
 8016ecc:	f7ff ff8a 	bl	8016de4 <L_shift>
 8016ed0:	4544      	cmp	r4, r8
 8016ed2:	d936      	bls.n	8016f42 <__hexnan+0x112>
 8016ed4:	f1a8 0204 	sub.w	r2, r8, #4
 8016ed8:	4623      	mov	r3, r4
 8016eda:	f853 1b04 	ldr.w	r1, [r3], #4
 8016ede:	f842 1f04 	str.w	r1, [r2, #4]!
 8016ee2:	429f      	cmp	r7, r3
 8016ee4:	d2f9      	bcs.n	8016eda <__hexnan+0xaa>
 8016ee6:	1b3b      	subs	r3, r7, r4
 8016ee8:	f023 0303 	bic.w	r3, r3, #3
 8016eec:	3304      	adds	r3, #4
 8016eee:	3401      	adds	r4, #1
 8016ef0:	3e03      	subs	r6, #3
 8016ef2:	42b4      	cmp	r4, r6
 8016ef4:	bf88      	it	hi
 8016ef6:	2304      	movhi	r3, #4
 8016ef8:	4443      	add	r3, r8
 8016efa:	2200      	movs	r2, #0
 8016efc:	f843 2b04 	str.w	r2, [r3], #4
 8016f00:	429f      	cmp	r7, r3
 8016f02:	d2fb      	bcs.n	8016efc <__hexnan+0xcc>
 8016f04:	683b      	ldr	r3, [r7, #0]
 8016f06:	b91b      	cbnz	r3, 8016f10 <__hexnan+0xe0>
 8016f08:	4547      	cmp	r7, r8
 8016f0a:	d128      	bne.n	8016f5e <__hexnan+0x12e>
 8016f0c:	2301      	movs	r3, #1
 8016f0e:	603b      	str	r3, [r7, #0]
 8016f10:	2005      	movs	r0, #5
 8016f12:	b007      	add	sp, #28
 8016f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f18:	3501      	adds	r5, #1
 8016f1a:	2d08      	cmp	r5, #8
 8016f1c:	f10b 0b01 	add.w	fp, fp, #1
 8016f20:	dd06      	ble.n	8016f30 <__hexnan+0x100>
 8016f22:	4544      	cmp	r4, r8
 8016f24:	d9c1      	bls.n	8016eaa <__hexnan+0x7a>
 8016f26:	2300      	movs	r3, #0
 8016f28:	f844 3c04 	str.w	r3, [r4, #-4]
 8016f2c:	2501      	movs	r5, #1
 8016f2e:	3c04      	subs	r4, #4
 8016f30:	6822      	ldr	r2, [r4, #0]
 8016f32:	f000 000f 	and.w	r0, r0, #15
 8016f36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016f3a:	6020      	str	r0, [r4, #0]
 8016f3c:	e7b5      	b.n	8016eaa <__hexnan+0x7a>
 8016f3e:	2508      	movs	r5, #8
 8016f40:	e7b3      	b.n	8016eaa <__hexnan+0x7a>
 8016f42:	9b01      	ldr	r3, [sp, #4]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d0dd      	beq.n	8016f04 <__hexnan+0xd4>
 8016f48:	f1c3 0320 	rsb	r3, r3, #32
 8016f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8016f50:	40da      	lsrs	r2, r3
 8016f52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016f56:	4013      	ands	r3, r2
 8016f58:	f846 3c04 	str.w	r3, [r6, #-4]
 8016f5c:	e7d2      	b.n	8016f04 <__hexnan+0xd4>
 8016f5e:	3f04      	subs	r7, #4
 8016f60:	e7d0      	b.n	8016f04 <__hexnan+0xd4>
 8016f62:	2004      	movs	r0, #4
 8016f64:	e7d5      	b.n	8016f12 <__hexnan+0xe2>
	...

08016f68 <sbrk_aligned>:
 8016f68:	b570      	push	{r4, r5, r6, lr}
 8016f6a:	4e0f      	ldr	r6, [pc, #60]	@ (8016fa8 <sbrk_aligned+0x40>)
 8016f6c:	460c      	mov	r4, r1
 8016f6e:	6831      	ldr	r1, [r6, #0]
 8016f70:	4605      	mov	r5, r0
 8016f72:	b911      	cbnz	r1, 8016f7a <sbrk_aligned+0x12>
 8016f74:	f000 fe20 	bl	8017bb8 <_sbrk_r>
 8016f78:	6030      	str	r0, [r6, #0]
 8016f7a:	4621      	mov	r1, r4
 8016f7c:	4628      	mov	r0, r5
 8016f7e:	f000 fe1b 	bl	8017bb8 <_sbrk_r>
 8016f82:	1c43      	adds	r3, r0, #1
 8016f84:	d103      	bne.n	8016f8e <sbrk_aligned+0x26>
 8016f86:	f04f 34ff 	mov.w	r4, #4294967295
 8016f8a:	4620      	mov	r0, r4
 8016f8c:	bd70      	pop	{r4, r5, r6, pc}
 8016f8e:	1cc4      	adds	r4, r0, #3
 8016f90:	f024 0403 	bic.w	r4, r4, #3
 8016f94:	42a0      	cmp	r0, r4
 8016f96:	d0f8      	beq.n	8016f8a <sbrk_aligned+0x22>
 8016f98:	1a21      	subs	r1, r4, r0
 8016f9a:	4628      	mov	r0, r5
 8016f9c:	f000 fe0c 	bl	8017bb8 <_sbrk_r>
 8016fa0:	3001      	adds	r0, #1
 8016fa2:	d1f2      	bne.n	8016f8a <sbrk_aligned+0x22>
 8016fa4:	e7ef      	b.n	8016f86 <sbrk_aligned+0x1e>
 8016fa6:	bf00      	nop
 8016fa8:	24005818 	.word	0x24005818

08016fac <_malloc_r>:
 8016fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fb0:	1ccd      	adds	r5, r1, #3
 8016fb2:	f025 0503 	bic.w	r5, r5, #3
 8016fb6:	3508      	adds	r5, #8
 8016fb8:	2d0c      	cmp	r5, #12
 8016fba:	bf38      	it	cc
 8016fbc:	250c      	movcc	r5, #12
 8016fbe:	2d00      	cmp	r5, #0
 8016fc0:	4606      	mov	r6, r0
 8016fc2:	db01      	blt.n	8016fc8 <_malloc_r+0x1c>
 8016fc4:	42a9      	cmp	r1, r5
 8016fc6:	d904      	bls.n	8016fd2 <_malloc_r+0x26>
 8016fc8:	230c      	movs	r3, #12
 8016fca:	6033      	str	r3, [r6, #0]
 8016fcc:	2000      	movs	r0, #0
 8016fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80170a8 <_malloc_r+0xfc>
 8016fd6:	f000 f87b 	bl	80170d0 <__malloc_lock>
 8016fda:	f8d8 3000 	ldr.w	r3, [r8]
 8016fde:	461c      	mov	r4, r3
 8016fe0:	bb44      	cbnz	r4, 8017034 <_malloc_r+0x88>
 8016fe2:	4629      	mov	r1, r5
 8016fe4:	4630      	mov	r0, r6
 8016fe6:	f7ff ffbf 	bl	8016f68 <sbrk_aligned>
 8016fea:	1c43      	adds	r3, r0, #1
 8016fec:	4604      	mov	r4, r0
 8016fee:	d158      	bne.n	80170a2 <_malloc_r+0xf6>
 8016ff0:	f8d8 4000 	ldr.w	r4, [r8]
 8016ff4:	4627      	mov	r7, r4
 8016ff6:	2f00      	cmp	r7, #0
 8016ff8:	d143      	bne.n	8017082 <_malloc_r+0xd6>
 8016ffa:	2c00      	cmp	r4, #0
 8016ffc:	d04b      	beq.n	8017096 <_malloc_r+0xea>
 8016ffe:	6823      	ldr	r3, [r4, #0]
 8017000:	4639      	mov	r1, r7
 8017002:	4630      	mov	r0, r6
 8017004:	eb04 0903 	add.w	r9, r4, r3
 8017008:	f000 fdd6 	bl	8017bb8 <_sbrk_r>
 801700c:	4581      	cmp	r9, r0
 801700e:	d142      	bne.n	8017096 <_malloc_r+0xea>
 8017010:	6821      	ldr	r1, [r4, #0]
 8017012:	1a6d      	subs	r5, r5, r1
 8017014:	4629      	mov	r1, r5
 8017016:	4630      	mov	r0, r6
 8017018:	f7ff ffa6 	bl	8016f68 <sbrk_aligned>
 801701c:	3001      	adds	r0, #1
 801701e:	d03a      	beq.n	8017096 <_malloc_r+0xea>
 8017020:	6823      	ldr	r3, [r4, #0]
 8017022:	442b      	add	r3, r5
 8017024:	6023      	str	r3, [r4, #0]
 8017026:	f8d8 3000 	ldr.w	r3, [r8]
 801702a:	685a      	ldr	r2, [r3, #4]
 801702c:	bb62      	cbnz	r2, 8017088 <_malloc_r+0xdc>
 801702e:	f8c8 7000 	str.w	r7, [r8]
 8017032:	e00f      	b.n	8017054 <_malloc_r+0xa8>
 8017034:	6822      	ldr	r2, [r4, #0]
 8017036:	1b52      	subs	r2, r2, r5
 8017038:	d420      	bmi.n	801707c <_malloc_r+0xd0>
 801703a:	2a0b      	cmp	r2, #11
 801703c:	d917      	bls.n	801706e <_malloc_r+0xc2>
 801703e:	1961      	adds	r1, r4, r5
 8017040:	42a3      	cmp	r3, r4
 8017042:	6025      	str	r5, [r4, #0]
 8017044:	bf18      	it	ne
 8017046:	6059      	strne	r1, [r3, #4]
 8017048:	6863      	ldr	r3, [r4, #4]
 801704a:	bf08      	it	eq
 801704c:	f8c8 1000 	streq.w	r1, [r8]
 8017050:	5162      	str	r2, [r4, r5]
 8017052:	604b      	str	r3, [r1, #4]
 8017054:	4630      	mov	r0, r6
 8017056:	f000 f841 	bl	80170dc <__malloc_unlock>
 801705a:	f104 000b 	add.w	r0, r4, #11
 801705e:	1d23      	adds	r3, r4, #4
 8017060:	f020 0007 	bic.w	r0, r0, #7
 8017064:	1ac2      	subs	r2, r0, r3
 8017066:	bf1c      	itt	ne
 8017068:	1a1b      	subne	r3, r3, r0
 801706a:	50a3      	strne	r3, [r4, r2]
 801706c:	e7af      	b.n	8016fce <_malloc_r+0x22>
 801706e:	6862      	ldr	r2, [r4, #4]
 8017070:	42a3      	cmp	r3, r4
 8017072:	bf0c      	ite	eq
 8017074:	f8c8 2000 	streq.w	r2, [r8]
 8017078:	605a      	strne	r2, [r3, #4]
 801707a:	e7eb      	b.n	8017054 <_malloc_r+0xa8>
 801707c:	4623      	mov	r3, r4
 801707e:	6864      	ldr	r4, [r4, #4]
 8017080:	e7ae      	b.n	8016fe0 <_malloc_r+0x34>
 8017082:	463c      	mov	r4, r7
 8017084:	687f      	ldr	r7, [r7, #4]
 8017086:	e7b6      	b.n	8016ff6 <_malloc_r+0x4a>
 8017088:	461a      	mov	r2, r3
 801708a:	685b      	ldr	r3, [r3, #4]
 801708c:	42a3      	cmp	r3, r4
 801708e:	d1fb      	bne.n	8017088 <_malloc_r+0xdc>
 8017090:	2300      	movs	r3, #0
 8017092:	6053      	str	r3, [r2, #4]
 8017094:	e7de      	b.n	8017054 <_malloc_r+0xa8>
 8017096:	230c      	movs	r3, #12
 8017098:	6033      	str	r3, [r6, #0]
 801709a:	4630      	mov	r0, r6
 801709c:	f000 f81e 	bl	80170dc <__malloc_unlock>
 80170a0:	e794      	b.n	8016fcc <_malloc_r+0x20>
 80170a2:	6005      	str	r5, [r0, #0]
 80170a4:	e7d6      	b.n	8017054 <_malloc_r+0xa8>
 80170a6:	bf00      	nop
 80170a8:	2400581c 	.word	0x2400581c

080170ac <__ascii_mbtowc>:
 80170ac:	b082      	sub	sp, #8
 80170ae:	b901      	cbnz	r1, 80170b2 <__ascii_mbtowc+0x6>
 80170b0:	a901      	add	r1, sp, #4
 80170b2:	b142      	cbz	r2, 80170c6 <__ascii_mbtowc+0x1a>
 80170b4:	b14b      	cbz	r3, 80170ca <__ascii_mbtowc+0x1e>
 80170b6:	7813      	ldrb	r3, [r2, #0]
 80170b8:	600b      	str	r3, [r1, #0]
 80170ba:	7812      	ldrb	r2, [r2, #0]
 80170bc:	1e10      	subs	r0, r2, #0
 80170be:	bf18      	it	ne
 80170c0:	2001      	movne	r0, #1
 80170c2:	b002      	add	sp, #8
 80170c4:	4770      	bx	lr
 80170c6:	4610      	mov	r0, r2
 80170c8:	e7fb      	b.n	80170c2 <__ascii_mbtowc+0x16>
 80170ca:	f06f 0001 	mvn.w	r0, #1
 80170ce:	e7f8      	b.n	80170c2 <__ascii_mbtowc+0x16>

080170d0 <__malloc_lock>:
 80170d0:	4801      	ldr	r0, [pc, #4]	@ (80170d8 <__malloc_lock+0x8>)
 80170d2:	f7ff bbac 	b.w	801682e <__retarget_lock_acquire_recursive>
 80170d6:	bf00      	nop
 80170d8:	24005814 	.word	0x24005814

080170dc <__malloc_unlock>:
 80170dc:	4801      	ldr	r0, [pc, #4]	@ (80170e4 <__malloc_unlock+0x8>)
 80170de:	f7ff bba7 	b.w	8016830 <__retarget_lock_release_recursive>
 80170e2:	bf00      	nop
 80170e4:	24005814 	.word	0x24005814

080170e8 <_Balloc>:
 80170e8:	b570      	push	{r4, r5, r6, lr}
 80170ea:	69c6      	ldr	r6, [r0, #28]
 80170ec:	4604      	mov	r4, r0
 80170ee:	460d      	mov	r5, r1
 80170f0:	b976      	cbnz	r6, 8017110 <_Balloc+0x28>
 80170f2:	2010      	movs	r0, #16
 80170f4:	f000 fda2 	bl	8017c3c <malloc>
 80170f8:	4602      	mov	r2, r0
 80170fa:	61e0      	str	r0, [r4, #28]
 80170fc:	b920      	cbnz	r0, 8017108 <_Balloc+0x20>
 80170fe:	4b18      	ldr	r3, [pc, #96]	@ (8017160 <_Balloc+0x78>)
 8017100:	4818      	ldr	r0, [pc, #96]	@ (8017164 <_Balloc+0x7c>)
 8017102:	216b      	movs	r1, #107	@ 0x6b
 8017104:	f000 fd68 	bl	8017bd8 <__assert_func>
 8017108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801710c:	6006      	str	r6, [r0, #0]
 801710e:	60c6      	str	r6, [r0, #12]
 8017110:	69e6      	ldr	r6, [r4, #28]
 8017112:	68f3      	ldr	r3, [r6, #12]
 8017114:	b183      	cbz	r3, 8017138 <_Balloc+0x50>
 8017116:	69e3      	ldr	r3, [r4, #28]
 8017118:	68db      	ldr	r3, [r3, #12]
 801711a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801711e:	b9b8      	cbnz	r0, 8017150 <_Balloc+0x68>
 8017120:	2101      	movs	r1, #1
 8017122:	fa01 f605 	lsl.w	r6, r1, r5
 8017126:	1d72      	adds	r2, r6, #5
 8017128:	0092      	lsls	r2, r2, #2
 801712a:	4620      	mov	r0, r4
 801712c:	f000 fd72 	bl	8017c14 <_calloc_r>
 8017130:	b160      	cbz	r0, 801714c <_Balloc+0x64>
 8017132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017136:	e00e      	b.n	8017156 <_Balloc+0x6e>
 8017138:	2221      	movs	r2, #33	@ 0x21
 801713a:	2104      	movs	r1, #4
 801713c:	4620      	mov	r0, r4
 801713e:	f000 fd69 	bl	8017c14 <_calloc_r>
 8017142:	69e3      	ldr	r3, [r4, #28]
 8017144:	60f0      	str	r0, [r6, #12]
 8017146:	68db      	ldr	r3, [r3, #12]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d1e4      	bne.n	8017116 <_Balloc+0x2e>
 801714c:	2000      	movs	r0, #0
 801714e:	bd70      	pop	{r4, r5, r6, pc}
 8017150:	6802      	ldr	r2, [r0, #0]
 8017152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017156:	2300      	movs	r3, #0
 8017158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801715c:	e7f7      	b.n	801714e <_Balloc+0x66>
 801715e:	bf00      	nop
 8017160:	08018e8a 	.word	0x08018e8a
 8017164:	08018ea1 	.word	0x08018ea1

08017168 <_Bfree>:
 8017168:	b570      	push	{r4, r5, r6, lr}
 801716a:	69c6      	ldr	r6, [r0, #28]
 801716c:	4605      	mov	r5, r0
 801716e:	460c      	mov	r4, r1
 8017170:	b976      	cbnz	r6, 8017190 <_Bfree+0x28>
 8017172:	2010      	movs	r0, #16
 8017174:	f000 fd62 	bl	8017c3c <malloc>
 8017178:	4602      	mov	r2, r0
 801717a:	61e8      	str	r0, [r5, #28]
 801717c:	b920      	cbnz	r0, 8017188 <_Bfree+0x20>
 801717e:	4b09      	ldr	r3, [pc, #36]	@ (80171a4 <_Bfree+0x3c>)
 8017180:	4809      	ldr	r0, [pc, #36]	@ (80171a8 <_Bfree+0x40>)
 8017182:	218f      	movs	r1, #143	@ 0x8f
 8017184:	f000 fd28 	bl	8017bd8 <__assert_func>
 8017188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801718c:	6006      	str	r6, [r0, #0]
 801718e:	60c6      	str	r6, [r0, #12]
 8017190:	b13c      	cbz	r4, 80171a2 <_Bfree+0x3a>
 8017192:	69eb      	ldr	r3, [r5, #28]
 8017194:	6862      	ldr	r2, [r4, #4]
 8017196:	68db      	ldr	r3, [r3, #12]
 8017198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801719c:	6021      	str	r1, [r4, #0]
 801719e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80171a2:	bd70      	pop	{r4, r5, r6, pc}
 80171a4:	08018e8a 	.word	0x08018e8a
 80171a8:	08018ea1 	.word	0x08018ea1

080171ac <__multadd>:
 80171ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171b0:	690d      	ldr	r5, [r1, #16]
 80171b2:	4607      	mov	r7, r0
 80171b4:	460c      	mov	r4, r1
 80171b6:	461e      	mov	r6, r3
 80171b8:	f101 0c14 	add.w	ip, r1, #20
 80171bc:	2000      	movs	r0, #0
 80171be:	f8dc 3000 	ldr.w	r3, [ip]
 80171c2:	b299      	uxth	r1, r3
 80171c4:	fb02 6101 	mla	r1, r2, r1, r6
 80171c8:	0c1e      	lsrs	r6, r3, #16
 80171ca:	0c0b      	lsrs	r3, r1, #16
 80171cc:	fb02 3306 	mla	r3, r2, r6, r3
 80171d0:	b289      	uxth	r1, r1
 80171d2:	3001      	adds	r0, #1
 80171d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80171d8:	4285      	cmp	r5, r0
 80171da:	f84c 1b04 	str.w	r1, [ip], #4
 80171de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80171e2:	dcec      	bgt.n	80171be <__multadd+0x12>
 80171e4:	b30e      	cbz	r6, 801722a <__multadd+0x7e>
 80171e6:	68a3      	ldr	r3, [r4, #8]
 80171e8:	42ab      	cmp	r3, r5
 80171ea:	dc19      	bgt.n	8017220 <__multadd+0x74>
 80171ec:	6861      	ldr	r1, [r4, #4]
 80171ee:	4638      	mov	r0, r7
 80171f0:	3101      	adds	r1, #1
 80171f2:	f7ff ff79 	bl	80170e8 <_Balloc>
 80171f6:	4680      	mov	r8, r0
 80171f8:	b928      	cbnz	r0, 8017206 <__multadd+0x5a>
 80171fa:	4602      	mov	r2, r0
 80171fc:	4b0c      	ldr	r3, [pc, #48]	@ (8017230 <__multadd+0x84>)
 80171fe:	480d      	ldr	r0, [pc, #52]	@ (8017234 <__multadd+0x88>)
 8017200:	21ba      	movs	r1, #186	@ 0xba
 8017202:	f000 fce9 	bl	8017bd8 <__assert_func>
 8017206:	6922      	ldr	r2, [r4, #16]
 8017208:	3202      	adds	r2, #2
 801720a:	f104 010c 	add.w	r1, r4, #12
 801720e:	0092      	lsls	r2, r2, #2
 8017210:	300c      	adds	r0, #12
 8017212:	f7ff fb0e 	bl	8016832 <memcpy>
 8017216:	4621      	mov	r1, r4
 8017218:	4638      	mov	r0, r7
 801721a:	f7ff ffa5 	bl	8017168 <_Bfree>
 801721e:	4644      	mov	r4, r8
 8017220:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017224:	3501      	adds	r5, #1
 8017226:	615e      	str	r6, [r3, #20]
 8017228:	6125      	str	r5, [r4, #16]
 801722a:	4620      	mov	r0, r4
 801722c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017230:	08018e19 	.word	0x08018e19
 8017234:	08018ea1 	.word	0x08018ea1

08017238 <__s2b>:
 8017238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801723c:	460c      	mov	r4, r1
 801723e:	4615      	mov	r5, r2
 8017240:	461f      	mov	r7, r3
 8017242:	2209      	movs	r2, #9
 8017244:	3308      	adds	r3, #8
 8017246:	4606      	mov	r6, r0
 8017248:	fb93 f3f2 	sdiv	r3, r3, r2
 801724c:	2100      	movs	r1, #0
 801724e:	2201      	movs	r2, #1
 8017250:	429a      	cmp	r2, r3
 8017252:	db09      	blt.n	8017268 <__s2b+0x30>
 8017254:	4630      	mov	r0, r6
 8017256:	f7ff ff47 	bl	80170e8 <_Balloc>
 801725a:	b940      	cbnz	r0, 801726e <__s2b+0x36>
 801725c:	4602      	mov	r2, r0
 801725e:	4b19      	ldr	r3, [pc, #100]	@ (80172c4 <__s2b+0x8c>)
 8017260:	4819      	ldr	r0, [pc, #100]	@ (80172c8 <__s2b+0x90>)
 8017262:	21d3      	movs	r1, #211	@ 0xd3
 8017264:	f000 fcb8 	bl	8017bd8 <__assert_func>
 8017268:	0052      	lsls	r2, r2, #1
 801726a:	3101      	adds	r1, #1
 801726c:	e7f0      	b.n	8017250 <__s2b+0x18>
 801726e:	9b08      	ldr	r3, [sp, #32]
 8017270:	6143      	str	r3, [r0, #20]
 8017272:	2d09      	cmp	r5, #9
 8017274:	f04f 0301 	mov.w	r3, #1
 8017278:	6103      	str	r3, [r0, #16]
 801727a:	dd16      	ble.n	80172aa <__s2b+0x72>
 801727c:	f104 0909 	add.w	r9, r4, #9
 8017280:	46c8      	mov	r8, r9
 8017282:	442c      	add	r4, r5
 8017284:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017288:	4601      	mov	r1, r0
 801728a:	3b30      	subs	r3, #48	@ 0x30
 801728c:	220a      	movs	r2, #10
 801728e:	4630      	mov	r0, r6
 8017290:	f7ff ff8c 	bl	80171ac <__multadd>
 8017294:	45a0      	cmp	r8, r4
 8017296:	d1f5      	bne.n	8017284 <__s2b+0x4c>
 8017298:	f1a5 0408 	sub.w	r4, r5, #8
 801729c:	444c      	add	r4, r9
 801729e:	1b2d      	subs	r5, r5, r4
 80172a0:	1963      	adds	r3, r4, r5
 80172a2:	42bb      	cmp	r3, r7
 80172a4:	db04      	blt.n	80172b0 <__s2b+0x78>
 80172a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172aa:	340a      	adds	r4, #10
 80172ac:	2509      	movs	r5, #9
 80172ae:	e7f6      	b.n	801729e <__s2b+0x66>
 80172b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80172b4:	4601      	mov	r1, r0
 80172b6:	3b30      	subs	r3, #48	@ 0x30
 80172b8:	220a      	movs	r2, #10
 80172ba:	4630      	mov	r0, r6
 80172bc:	f7ff ff76 	bl	80171ac <__multadd>
 80172c0:	e7ee      	b.n	80172a0 <__s2b+0x68>
 80172c2:	bf00      	nop
 80172c4:	08018e19 	.word	0x08018e19
 80172c8:	08018ea1 	.word	0x08018ea1

080172cc <__hi0bits>:
 80172cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80172d0:	4603      	mov	r3, r0
 80172d2:	bf36      	itet	cc
 80172d4:	0403      	lslcc	r3, r0, #16
 80172d6:	2000      	movcs	r0, #0
 80172d8:	2010      	movcc	r0, #16
 80172da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80172de:	bf3c      	itt	cc
 80172e0:	021b      	lslcc	r3, r3, #8
 80172e2:	3008      	addcc	r0, #8
 80172e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80172e8:	bf3c      	itt	cc
 80172ea:	011b      	lslcc	r3, r3, #4
 80172ec:	3004      	addcc	r0, #4
 80172ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80172f2:	bf3c      	itt	cc
 80172f4:	009b      	lslcc	r3, r3, #2
 80172f6:	3002      	addcc	r0, #2
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	db05      	blt.n	8017308 <__hi0bits+0x3c>
 80172fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017300:	f100 0001 	add.w	r0, r0, #1
 8017304:	bf08      	it	eq
 8017306:	2020      	moveq	r0, #32
 8017308:	4770      	bx	lr

0801730a <__lo0bits>:
 801730a:	6803      	ldr	r3, [r0, #0]
 801730c:	4602      	mov	r2, r0
 801730e:	f013 0007 	ands.w	r0, r3, #7
 8017312:	d00b      	beq.n	801732c <__lo0bits+0x22>
 8017314:	07d9      	lsls	r1, r3, #31
 8017316:	d421      	bmi.n	801735c <__lo0bits+0x52>
 8017318:	0798      	lsls	r0, r3, #30
 801731a:	bf49      	itett	mi
 801731c:	085b      	lsrmi	r3, r3, #1
 801731e:	089b      	lsrpl	r3, r3, #2
 8017320:	2001      	movmi	r0, #1
 8017322:	6013      	strmi	r3, [r2, #0]
 8017324:	bf5c      	itt	pl
 8017326:	6013      	strpl	r3, [r2, #0]
 8017328:	2002      	movpl	r0, #2
 801732a:	4770      	bx	lr
 801732c:	b299      	uxth	r1, r3
 801732e:	b909      	cbnz	r1, 8017334 <__lo0bits+0x2a>
 8017330:	0c1b      	lsrs	r3, r3, #16
 8017332:	2010      	movs	r0, #16
 8017334:	b2d9      	uxtb	r1, r3
 8017336:	b909      	cbnz	r1, 801733c <__lo0bits+0x32>
 8017338:	3008      	adds	r0, #8
 801733a:	0a1b      	lsrs	r3, r3, #8
 801733c:	0719      	lsls	r1, r3, #28
 801733e:	bf04      	itt	eq
 8017340:	091b      	lsreq	r3, r3, #4
 8017342:	3004      	addeq	r0, #4
 8017344:	0799      	lsls	r1, r3, #30
 8017346:	bf04      	itt	eq
 8017348:	089b      	lsreq	r3, r3, #2
 801734a:	3002      	addeq	r0, #2
 801734c:	07d9      	lsls	r1, r3, #31
 801734e:	d403      	bmi.n	8017358 <__lo0bits+0x4e>
 8017350:	085b      	lsrs	r3, r3, #1
 8017352:	f100 0001 	add.w	r0, r0, #1
 8017356:	d003      	beq.n	8017360 <__lo0bits+0x56>
 8017358:	6013      	str	r3, [r2, #0]
 801735a:	4770      	bx	lr
 801735c:	2000      	movs	r0, #0
 801735e:	4770      	bx	lr
 8017360:	2020      	movs	r0, #32
 8017362:	4770      	bx	lr

08017364 <__i2b>:
 8017364:	b510      	push	{r4, lr}
 8017366:	460c      	mov	r4, r1
 8017368:	2101      	movs	r1, #1
 801736a:	f7ff febd 	bl	80170e8 <_Balloc>
 801736e:	4602      	mov	r2, r0
 8017370:	b928      	cbnz	r0, 801737e <__i2b+0x1a>
 8017372:	4b05      	ldr	r3, [pc, #20]	@ (8017388 <__i2b+0x24>)
 8017374:	4805      	ldr	r0, [pc, #20]	@ (801738c <__i2b+0x28>)
 8017376:	f240 1145 	movw	r1, #325	@ 0x145
 801737a:	f000 fc2d 	bl	8017bd8 <__assert_func>
 801737e:	2301      	movs	r3, #1
 8017380:	6144      	str	r4, [r0, #20]
 8017382:	6103      	str	r3, [r0, #16]
 8017384:	bd10      	pop	{r4, pc}
 8017386:	bf00      	nop
 8017388:	08018e19 	.word	0x08018e19
 801738c:	08018ea1 	.word	0x08018ea1

08017390 <__multiply>:
 8017390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017394:	4614      	mov	r4, r2
 8017396:	690a      	ldr	r2, [r1, #16]
 8017398:	6923      	ldr	r3, [r4, #16]
 801739a:	429a      	cmp	r2, r3
 801739c:	bfa8      	it	ge
 801739e:	4623      	movge	r3, r4
 80173a0:	460f      	mov	r7, r1
 80173a2:	bfa4      	itt	ge
 80173a4:	460c      	movge	r4, r1
 80173a6:	461f      	movge	r7, r3
 80173a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80173ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80173b0:	68a3      	ldr	r3, [r4, #8]
 80173b2:	6861      	ldr	r1, [r4, #4]
 80173b4:	eb0a 0609 	add.w	r6, sl, r9
 80173b8:	42b3      	cmp	r3, r6
 80173ba:	b085      	sub	sp, #20
 80173bc:	bfb8      	it	lt
 80173be:	3101      	addlt	r1, #1
 80173c0:	f7ff fe92 	bl	80170e8 <_Balloc>
 80173c4:	b930      	cbnz	r0, 80173d4 <__multiply+0x44>
 80173c6:	4602      	mov	r2, r0
 80173c8:	4b44      	ldr	r3, [pc, #272]	@ (80174dc <__multiply+0x14c>)
 80173ca:	4845      	ldr	r0, [pc, #276]	@ (80174e0 <__multiply+0x150>)
 80173cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80173d0:	f000 fc02 	bl	8017bd8 <__assert_func>
 80173d4:	f100 0514 	add.w	r5, r0, #20
 80173d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80173dc:	462b      	mov	r3, r5
 80173de:	2200      	movs	r2, #0
 80173e0:	4543      	cmp	r3, r8
 80173e2:	d321      	bcc.n	8017428 <__multiply+0x98>
 80173e4:	f107 0114 	add.w	r1, r7, #20
 80173e8:	f104 0214 	add.w	r2, r4, #20
 80173ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80173f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80173f4:	9302      	str	r3, [sp, #8]
 80173f6:	1b13      	subs	r3, r2, r4
 80173f8:	3b15      	subs	r3, #21
 80173fa:	f023 0303 	bic.w	r3, r3, #3
 80173fe:	3304      	adds	r3, #4
 8017400:	f104 0715 	add.w	r7, r4, #21
 8017404:	42ba      	cmp	r2, r7
 8017406:	bf38      	it	cc
 8017408:	2304      	movcc	r3, #4
 801740a:	9301      	str	r3, [sp, #4]
 801740c:	9b02      	ldr	r3, [sp, #8]
 801740e:	9103      	str	r1, [sp, #12]
 8017410:	428b      	cmp	r3, r1
 8017412:	d80c      	bhi.n	801742e <__multiply+0x9e>
 8017414:	2e00      	cmp	r6, #0
 8017416:	dd03      	ble.n	8017420 <__multiply+0x90>
 8017418:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801741c:	2b00      	cmp	r3, #0
 801741e:	d05b      	beq.n	80174d8 <__multiply+0x148>
 8017420:	6106      	str	r6, [r0, #16]
 8017422:	b005      	add	sp, #20
 8017424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017428:	f843 2b04 	str.w	r2, [r3], #4
 801742c:	e7d8      	b.n	80173e0 <__multiply+0x50>
 801742e:	f8b1 a000 	ldrh.w	sl, [r1]
 8017432:	f1ba 0f00 	cmp.w	sl, #0
 8017436:	d024      	beq.n	8017482 <__multiply+0xf2>
 8017438:	f104 0e14 	add.w	lr, r4, #20
 801743c:	46a9      	mov	r9, r5
 801743e:	f04f 0c00 	mov.w	ip, #0
 8017442:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017446:	f8d9 3000 	ldr.w	r3, [r9]
 801744a:	fa1f fb87 	uxth.w	fp, r7
 801744e:	b29b      	uxth	r3, r3
 8017450:	fb0a 330b 	mla	r3, sl, fp, r3
 8017454:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017458:	f8d9 7000 	ldr.w	r7, [r9]
 801745c:	4463      	add	r3, ip
 801745e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017462:	fb0a c70b 	mla	r7, sl, fp, ip
 8017466:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801746a:	b29b      	uxth	r3, r3
 801746c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017470:	4572      	cmp	r2, lr
 8017472:	f849 3b04 	str.w	r3, [r9], #4
 8017476:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801747a:	d8e2      	bhi.n	8017442 <__multiply+0xb2>
 801747c:	9b01      	ldr	r3, [sp, #4]
 801747e:	f845 c003 	str.w	ip, [r5, r3]
 8017482:	9b03      	ldr	r3, [sp, #12]
 8017484:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017488:	3104      	adds	r1, #4
 801748a:	f1b9 0f00 	cmp.w	r9, #0
 801748e:	d021      	beq.n	80174d4 <__multiply+0x144>
 8017490:	682b      	ldr	r3, [r5, #0]
 8017492:	f104 0c14 	add.w	ip, r4, #20
 8017496:	46ae      	mov	lr, r5
 8017498:	f04f 0a00 	mov.w	sl, #0
 801749c:	f8bc b000 	ldrh.w	fp, [ip]
 80174a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80174a4:	fb09 770b 	mla	r7, r9, fp, r7
 80174a8:	4457      	add	r7, sl
 80174aa:	b29b      	uxth	r3, r3
 80174ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80174b0:	f84e 3b04 	str.w	r3, [lr], #4
 80174b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80174b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80174bc:	f8be 3000 	ldrh.w	r3, [lr]
 80174c0:	fb09 330a 	mla	r3, r9, sl, r3
 80174c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80174c8:	4562      	cmp	r2, ip
 80174ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80174ce:	d8e5      	bhi.n	801749c <__multiply+0x10c>
 80174d0:	9f01      	ldr	r7, [sp, #4]
 80174d2:	51eb      	str	r3, [r5, r7]
 80174d4:	3504      	adds	r5, #4
 80174d6:	e799      	b.n	801740c <__multiply+0x7c>
 80174d8:	3e01      	subs	r6, #1
 80174da:	e79b      	b.n	8017414 <__multiply+0x84>
 80174dc:	08018e19 	.word	0x08018e19
 80174e0:	08018ea1 	.word	0x08018ea1

080174e4 <__pow5mult>:
 80174e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174e8:	4615      	mov	r5, r2
 80174ea:	f012 0203 	ands.w	r2, r2, #3
 80174ee:	4607      	mov	r7, r0
 80174f0:	460e      	mov	r6, r1
 80174f2:	d007      	beq.n	8017504 <__pow5mult+0x20>
 80174f4:	4c25      	ldr	r4, [pc, #148]	@ (801758c <__pow5mult+0xa8>)
 80174f6:	3a01      	subs	r2, #1
 80174f8:	2300      	movs	r3, #0
 80174fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80174fe:	f7ff fe55 	bl	80171ac <__multadd>
 8017502:	4606      	mov	r6, r0
 8017504:	10ad      	asrs	r5, r5, #2
 8017506:	d03d      	beq.n	8017584 <__pow5mult+0xa0>
 8017508:	69fc      	ldr	r4, [r7, #28]
 801750a:	b97c      	cbnz	r4, 801752c <__pow5mult+0x48>
 801750c:	2010      	movs	r0, #16
 801750e:	f000 fb95 	bl	8017c3c <malloc>
 8017512:	4602      	mov	r2, r0
 8017514:	61f8      	str	r0, [r7, #28]
 8017516:	b928      	cbnz	r0, 8017524 <__pow5mult+0x40>
 8017518:	4b1d      	ldr	r3, [pc, #116]	@ (8017590 <__pow5mult+0xac>)
 801751a:	481e      	ldr	r0, [pc, #120]	@ (8017594 <__pow5mult+0xb0>)
 801751c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017520:	f000 fb5a 	bl	8017bd8 <__assert_func>
 8017524:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017528:	6004      	str	r4, [r0, #0]
 801752a:	60c4      	str	r4, [r0, #12]
 801752c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017530:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017534:	b94c      	cbnz	r4, 801754a <__pow5mult+0x66>
 8017536:	f240 2171 	movw	r1, #625	@ 0x271
 801753a:	4638      	mov	r0, r7
 801753c:	f7ff ff12 	bl	8017364 <__i2b>
 8017540:	2300      	movs	r3, #0
 8017542:	f8c8 0008 	str.w	r0, [r8, #8]
 8017546:	4604      	mov	r4, r0
 8017548:	6003      	str	r3, [r0, #0]
 801754a:	f04f 0900 	mov.w	r9, #0
 801754e:	07eb      	lsls	r3, r5, #31
 8017550:	d50a      	bpl.n	8017568 <__pow5mult+0x84>
 8017552:	4631      	mov	r1, r6
 8017554:	4622      	mov	r2, r4
 8017556:	4638      	mov	r0, r7
 8017558:	f7ff ff1a 	bl	8017390 <__multiply>
 801755c:	4631      	mov	r1, r6
 801755e:	4680      	mov	r8, r0
 8017560:	4638      	mov	r0, r7
 8017562:	f7ff fe01 	bl	8017168 <_Bfree>
 8017566:	4646      	mov	r6, r8
 8017568:	106d      	asrs	r5, r5, #1
 801756a:	d00b      	beq.n	8017584 <__pow5mult+0xa0>
 801756c:	6820      	ldr	r0, [r4, #0]
 801756e:	b938      	cbnz	r0, 8017580 <__pow5mult+0x9c>
 8017570:	4622      	mov	r2, r4
 8017572:	4621      	mov	r1, r4
 8017574:	4638      	mov	r0, r7
 8017576:	f7ff ff0b 	bl	8017390 <__multiply>
 801757a:	6020      	str	r0, [r4, #0]
 801757c:	f8c0 9000 	str.w	r9, [r0]
 8017580:	4604      	mov	r4, r0
 8017582:	e7e4      	b.n	801754e <__pow5mult+0x6a>
 8017584:	4630      	mov	r0, r6
 8017586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801758a:	bf00      	nop
 801758c:	08018efc 	.word	0x08018efc
 8017590:	08018e8a 	.word	0x08018e8a
 8017594:	08018ea1 	.word	0x08018ea1

08017598 <__lshift>:
 8017598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801759c:	460c      	mov	r4, r1
 801759e:	6849      	ldr	r1, [r1, #4]
 80175a0:	6923      	ldr	r3, [r4, #16]
 80175a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80175a6:	68a3      	ldr	r3, [r4, #8]
 80175a8:	4607      	mov	r7, r0
 80175aa:	4691      	mov	r9, r2
 80175ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80175b0:	f108 0601 	add.w	r6, r8, #1
 80175b4:	42b3      	cmp	r3, r6
 80175b6:	db0b      	blt.n	80175d0 <__lshift+0x38>
 80175b8:	4638      	mov	r0, r7
 80175ba:	f7ff fd95 	bl	80170e8 <_Balloc>
 80175be:	4605      	mov	r5, r0
 80175c0:	b948      	cbnz	r0, 80175d6 <__lshift+0x3e>
 80175c2:	4602      	mov	r2, r0
 80175c4:	4b28      	ldr	r3, [pc, #160]	@ (8017668 <__lshift+0xd0>)
 80175c6:	4829      	ldr	r0, [pc, #164]	@ (801766c <__lshift+0xd4>)
 80175c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80175cc:	f000 fb04 	bl	8017bd8 <__assert_func>
 80175d0:	3101      	adds	r1, #1
 80175d2:	005b      	lsls	r3, r3, #1
 80175d4:	e7ee      	b.n	80175b4 <__lshift+0x1c>
 80175d6:	2300      	movs	r3, #0
 80175d8:	f100 0114 	add.w	r1, r0, #20
 80175dc:	f100 0210 	add.w	r2, r0, #16
 80175e0:	4618      	mov	r0, r3
 80175e2:	4553      	cmp	r3, sl
 80175e4:	db33      	blt.n	801764e <__lshift+0xb6>
 80175e6:	6920      	ldr	r0, [r4, #16]
 80175e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80175ec:	f104 0314 	add.w	r3, r4, #20
 80175f0:	f019 091f 	ands.w	r9, r9, #31
 80175f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80175f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80175fc:	d02b      	beq.n	8017656 <__lshift+0xbe>
 80175fe:	f1c9 0e20 	rsb	lr, r9, #32
 8017602:	468a      	mov	sl, r1
 8017604:	2200      	movs	r2, #0
 8017606:	6818      	ldr	r0, [r3, #0]
 8017608:	fa00 f009 	lsl.w	r0, r0, r9
 801760c:	4310      	orrs	r0, r2
 801760e:	f84a 0b04 	str.w	r0, [sl], #4
 8017612:	f853 2b04 	ldr.w	r2, [r3], #4
 8017616:	459c      	cmp	ip, r3
 8017618:	fa22 f20e 	lsr.w	r2, r2, lr
 801761c:	d8f3      	bhi.n	8017606 <__lshift+0x6e>
 801761e:	ebac 0304 	sub.w	r3, ip, r4
 8017622:	3b15      	subs	r3, #21
 8017624:	f023 0303 	bic.w	r3, r3, #3
 8017628:	3304      	adds	r3, #4
 801762a:	f104 0015 	add.w	r0, r4, #21
 801762e:	4584      	cmp	ip, r0
 8017630:	bf38      	it	cc
 8017632:	2304      	movcc	r3, #4
 8017634:	50ca      	str	r2, [r1, r3]
 8017636:	b10a      	cbz	r2, 801763c <__lshift+0xa4>
 8017638:	f108 0602 	add.w	r6, r8, #2
 801763c:	3e01      	subs	r6, #1
 801763e:	4638      	mov	r0, r7
 8017640:	612e      	str	r6, [r5, #16]
 8017642:	4621      	mov	r1, r4
 8017644:	f7ff fd90 	bl	8017168 <_Bfree>
 8017648:	4628      	mov	r0, r5
 801764a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801764e:	f842 0f04 	str.w	r0, [r2, #4]!
 8017652:	3301      	adds	r3, #1
 8017654:	e7c5      	b.n	80175e2 <__lshift+0x4a>
 8017656:	3904      	subs	r1, #4
 8017658:	f853 2b04 	ldr.w	r2, [r3], #4
 801765c:	f841 2f04 	str.w	r2, [r1, #4]!
 8017660:	459c      	cmp	ip, r3
 8017662:	d8f9      	bhi.n	8017658 <__lshift+0xc0>
 8017664:	e7ea      	b.n	801763c <__lshift+0xa4>
 8017666:	bf00      	nop
 8017668:	08018e19 	.word	0x08018e19
 801766c:	08018ea1 	.word	0x08018ea1

08017670 <__mcmp>:
 8017670:	690a      	ldr	r2, [r1, #16]
 8017672:	4603      	mov	r3, r0
 8017674:	6900      	ldr	r0, [r0, #16]
 8017676:	1a80      	subs	r0, r0, r2
 8017678:	b530      	push	{r4, r5, lr}
 801767a:	d10e      	bne.n	801769a <__mcmp+0x2a>
 801767c:	3314      	adds	r3, #20
 801767e:	3114      	adds	r1, #20
 8017680:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017684:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017688:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801768c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017690:	4295      	cmp	r5, r2
 8017692:	d003      	beq.n	801769c <__mcmp+0x2c>
 8017694:	d205      	bcs.n	80176a2 <__mcmp+0x32>
 8017696:	f04f 30ff 	mov.w	r0, #4294967295
 801769a:	bd30      	pop	{r4, r5, pc}
 801769c:	42a3      	cmp	r3, r4
 801769e:	d3f3      	bcc.n	8017688 <__mcmp+0x18>
 80176a0:	e7fb      	b.n	801769a <__mcmp+0x2a>
 80176a2:	2001      	movs	r0, #1
 80176a4:	e7f9      	b.n	801769a <__mcmp+0x2a>
	...

080176a8 <__mdiff>:
 80176a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ac:	4689      	mov	r9, r1
 80176ae:	4606      	mov	r6, r0
 80176b0:	4611      	mov	r1, r2
 80176b2:	4648      	mov	r0, r9
 80176b4:	4614      	mov	r4, r2
 80176b6:	f7ff ffdb 	bl	8017670 <__mcmp>
 80176ba:	1e05      	subs	r5, r0, #0
 80176bc:	d112      	bne.n	80176e4 <__mdiff+0x3c>
 80176be:	4629      	mov	r1, r5
 80176c0:	4630      	mov	r0, r6
 80176c2:	f7ff fd11 	bl	80170e8 <_Balloc>
 80176c6:	4602      	mov	r2, r0
 80176c8:	b928      	cbnz	r0, 80176d6 <__mdiff+0x2e>
 80176ca:	4b3f      	ldr	r3, [pc, #252]	@ (80177c8 <__mdiff+0x120>)
 80176cc:	f240 2137 	movw	r1, #567	@ 0x237
 80176d0:	483e      	ldr	r0, [pc, #248]	@ (80177cc <__mdiff+0x124>)
 80176d2:	f000 fa81 	bl	8017bd8 <__assert_func>
 80176d6:	2301      	movs	r3, #1
 80176d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80176dc:	4610      	mov	r0, r2
 80176de:	b003      	add	sp, #12
 80176e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176e4:	bfbc      	itt	lt
 80176e6:	464b      	movlt	r3, r9
 80176e8:	46a1      	movlt	r9, r4
 80176ea:	4630      	mov	r0, r6
 80176ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80176f0:	bfba      	itte	lt
 80176f2:	461c      	movlt	r4, r3
 80176f4:	2501      	movlt	r5, #1
 80176f6:	2500      	movge	r5, #0
 80176f8:	f7ff fcf6 	bl	80170e8 <_Balloc>
 80176fc:	4602      	mov	r2, r0
 80176fe:	b918      	cbnz	r0, 8017708 <__mdiff+0x60>
 8017700:	4b31      	ldr	r3, [pc, #196]	@ (80177c8 <__mdiff+0x120>)
 8017702:	f240 2145 	movw	r1, #581	@ 0x245
 8017706:	e7e3      	b.n	80176d0 <__mdiff+0x28>
 8017708:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801770c:	6926      	ldr	r6, [r4, #16]
 801770e:	60c5      	str	r5, [r0, #12]
 8017710:	f109 0310 	add.w	r3, r9, #16
 8017714:	f109 0514 	add.w	r5, r9, #20
 8017718:	f104 0e14 	add.w	lr, r4, #20
 801771c:	f100 0b14 	add.w	fp, r0, #20
 8017720:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017724:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017728:	9301      	str	r3, [sp, #4]
 801772a:	46d9      	mov	r9, fp
 801772c:	f04f 0c00 	mov.w	ip, #0
 8017730:	9b01      	ldr	r3, [sp, #4]
 8017732:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017736:	f853 af04 	ldr.w	sl, [r3, #4]!
 801773a:	9301      	str	r3, [sp, #4]
 801773c:	fa1f f38a 	uxth.w	r3, sl
 8017740:	4619      	mov	r1, r3
 8017742:	b283      	uxth	r3, r0
 8017744:	1acb      	subs	r3, r1, r3
 8017746:	0c00      	lsrs	r0, r0, #16
 8017748:	4463      	add	r3, ip
 801774a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801774e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017752:	b29b      	uxth	r3, r3
 8017754:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017758:	4576      	cmp	r6, lr
 801775a:	f849 3b04 	str.w	r3, [r9], #4
 801775e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017762:	d8e5      	bhi.n	8017730 <__mdiff+0x88>
 8017764:	1b33      	subs	r3, r6, r4
 8017766:	3b15      	subs	r3, #21
 8017768:	f023 0303 	bic.w	r3, r3, #3
 801776c:	3415      	adds	r4, #21
 801776e:	3304      	adds	r3, #4
 8017770:	42a6      	cmp	r6, r4
 8017772:	bf38      	it	cc
 8017774:	2304      	movcc	r3, #4
 8017776:	441d      	add	r5, r3
 8017778:	445b      	add	r3, fp
 801777a:	461e      	mov	r6, r3
 801777c:	462c      	mov	r4, r5
 801777e:	4544      	cmp	r4, r8
 8017780:	d30e      	bcc.n	80177a0 <__mdiff+0xf8>
 8017782:	f108 0103 	add.w	r1, r8, #3
 8017786:	1b49      	subs	r1, r1, r5
 8017788:	f021 0103 	bic.w	r1, r1, #3
 801778c:	3d03      	subs	r5, #3
 801778e:	45a8      	cmp	r8, r5
 8017790:	bf38      	it	cc
 8017792:	2100      	movcc	r1, #0
 8017794:	440b      	add	r3, r1
 8017796:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801779a:	b191      	cbz	r1, 80177c2 <__mdiff+0x11a>
 801779c:	6117      	str	r7, [r2, #16]
 801779e:	e79d      	b.n	80176dc <__mdiff+0x34>
 80177a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80177a4:	46e6      	mov	lr, ip
 80177a6:	0c08      	lsrs	r0, r1, #16
 80177a8:	fa1c fc81 	uxtah	ip, ip, r1
 80177ac:	4471      	add	r1, lr
 80177ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80177b2:	b289      	uxth	r1, r1
 80177b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80177b8:	f846 1b04 	str.w	r1, [r6], #4
 80177bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80177c0:	e7dd      	b.n	801777e <__mdiff+0xd6>
 80177c2:	3f01      	subs	r7, #1
 80177c4:	e7e7      	b.n	8017796 <__mdiff+0xee>
 80177c6:	bf00      	nop
 80177c8:	08018e19 	.word	0x08018e19
 80177cc:	08018ea1 	.word	0x08018ea1

080177d0 <__ulp>:
 80177d0:	b082      	sub	sp, #8
 80177d2:	ed8d 0b00 	vstr	d0, [sp]
 80177d6:	9a01      	ldr	r2, [sp, #4]
 80177d8:	4b0f      	ldr	r3, [pc, #60]	@ (8017818 <__ulp+0x48>)
 80177da:	4013      	ands	r3, r2
 80177dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	dc08      	bgt.n	80177f6 <__ulp+0x26>
 80177e4:	425b      	negs	r3, r3
 80177e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80177ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80177ee:	da04      	bge.n	80177fa <__ulp+0x2a>
 80177f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80177f4:	4113      	asrs	r3, r2
 80177f6:	2200      	movs	r2, #0
 80177f8:	e008      	b.n	801780c <__ulp+0x3c>
 80177fa:	f1a2 0314 	sub.w	r3, r2, #20
 80177fe:	2b1e      	cmp	r3, #30
 8017800:	bfda      	itte	le
 8017802:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017806:	40da      	lsrle	r2, r3
 8017808:	2201      	movgt	r2, #1
 801780a:	2300      	movs	r3, #0
 801780c:	4619      	mov	r1, r3
 801780e:	4610      	mov	r0, r2
 8017810:	ec41 0b10 	vmov	d0, r0, r1
 8017814:	b002      	add	sp, #8
 8017816:	4770      	bx	lr
 8017818:	7ff00000 	.word	0x7ff00000

0801781c <__b2d>:
 801781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017820:	6906      	ldr	r6, [r0, #16]
 8017822:	f100 0814 	add.w	r8, r0, #20
 8017826:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801782a:	1f37      	subs	r7, r6, #4
 801782c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017830:	4610      	mov	r0, r2
 8017832:	f7ff fd4b 	bl	80172cc <__hi0bits>
 8017836:	f1c0 0320 	rsb	r3, r0, #32
 801783a:	280a      	cmp	r0, #10
 801783c:	600b      	str	r3, [r1, #0]
 801783e:	491b      	ldr	r1, [pc, #108]	@ (80178ac <__b2d+0x90>)
 8017840:	dc15      	bgt.n	801786e <__b2d+0x52>
 8017842:	f1c0 0c0b 	rsb	ip, r0, #11
 8017846:	fa22 f30c 	lsr.w	r3, r2, ip
 801784a:	45b8      	cmp	r8, r7
 801784c:	ea43 0501 	orr.w	r5, r3, r1
 8017850:	bf34      	ite	cc
 8017852:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017856:	2300      	movcs	r3, #0
 8017858:	3015      	adds	r0, #21
 801785a:	fa02 f000 	lsl.w	r0, r2, r0
 801785e:	fa23 f30c 	lsr.w	r3, r3, ip
 8017862:	4303      	orrs	r3, r0
 8017864:	461c      	mov	r4, r3
 8017866:	ec45 4b10 	vmov	d0, r4, r5
 801786a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801786e:	45b8      	cmp	r8, r7
 8017870:	bf3a      	itte	cc
 8017872:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017876:	f1a6 0708 	subcc.w	r7, r6, #8
 801787a:	2300      	movcs	r3, #0
 801787c:	380b      	subs	r0, #11
 801787e:	d012      	beq.n	80178a6 <__b2d+0x8a>
 8017880:	f1c0 0120 	rsb	r1, r0, #32
 8017884:	fa23 f401 	lsr.w	r4, r3, r1
 8017888:	4082      	lsls	r2, r0
 801788a:	4322      	orrs	r2, r4
 801788c:	4547      	cmp	r7, r8
 801788e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8017892:	bf8c      	ite	hi
 8017894:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017898:	2200      	movls	r2, #0
 801789a:	4083      	lsls	r3, r0
 801789c:	40ca      	lsrs	r2, r1
 801789e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80178a2:	4313      	orrs	r3, r2
 80178a4:	e7de      	b.n	8017864 <__b2d+0x48>
 80178a6:	ea42 0501 	orr.w	r5, r2, r1
 80178aa:	e7db      	b.n	8017864 <__b2d+0x48>
 80178ac:	3ff00000 	.word	0x3ff00000

080178b0 <__d2b>:
 80178b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80178b4:	460f      	mov	r7, r1
 80178b6:	2101      	movs	r1, #1
 80178b8:	ec59 8b10 	vmov	r8, r9, d0
 80178bc:	4616      	mov	r6, r2
 80178be:	f7ff fc13 	bl	80170e8 <_Balloc>
 80178c2:	4604      	mov	r4, r0
 80178c4:	b930      	cbnz	r0, 80178d4 <__d2b+0x24>
 80178c6:	4602      	mov	r2, r0
 80178c8:	4b23      	ldr	r3, [pc, #140]	@ (8017958 <__d2b+0xa8>)
 80178ca:	4824      	ldr	r0, [pc, #144]	@ (801795c <__d2b+0xac>)
 80178cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80178d0:	f000 f982 	bl	8017bd8 <__assert_func>
 80178d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80178d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80178dc:	b10d      	cbz	r5, 80178e2 <__d2b+0x32>
 80178de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80178e2:	9301      	str	r3, [sp, #4]
 80178e4:	f1b8 0300 	subs.w	r3, r8, #0
 80178e8:	d023      	beq.n	8017932 <__d2b+0x82>
 80178ea:	4668      	mov	r0, sp
 80178ec:	9300      	str	r3, [sp, #0]
 80178ee:	f7ff fd0c 	bl	801730a <__lo0bits>
 80178f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80178f6:	b1d0      	cbz	r0, 801792e <__d2b+0x7e>
 80178f8:	f1c0 0320 	rsb	r3, r0, #32
 80178fc:	fa02 f303 	lsl.w	r3, r2, r3
 8017900:	430b      	orrs	r3, r1
 8017902:	40c2      	lsrs	r2, r0
 8017904:	6163      	str	r3, [r4, #20]
 8017906:	9201      	str	r2, [sp, #4]
 8017908:	9b01      	ldr	r3, [sp, #4]
 801790a:	61a3      	str	r3, [r4, #24]
 801790c:	2b00      	cmp	r3, #0
 801790e:	bf0c      	ite	eq
 8017910:	2201      	moveq	r2, #1
 8017912:	2202      	movne	r2, #2
 8017914:	6122      	str	r2, [r4, #16]
 8017916:	b1a5      	cbz	r5, 8017942 <__d2b+0x92>
 8017918:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801791c:	4405      	add	r5, r0
 801791e:	603d      	str	r5, [r7, #0]
 8017920:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017924:	6030      	str	r0, [r6, #0]
 8017926:	4620      	mov	r0, r4
 8017928:	b003      	add	sp, #12
 801792a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801792e:	6161      	str	r1, [r4, #20]
 8017930:	e7ea      	b.n	8017908 <__d2b+0x58>
 8017932:	a801      	add	r0, sp, #4
 8017934:	f7ff fce9 	bl	801730a <__lo0bits>
 8017938:	9b01      	ldr	r3, [sp, #4]
 801793a:	6163      	str	r3, [r4, #20]
 801793c:	3020      	adds	r0, #32
 801793e:	2201      	movs	r2, #1
 8017940:	e7e8      	b.n	8017914 <__d2b+0x64>
 8017942:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017946:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801794a:	6038      	str	r0, [r7, #0]
 801794c:	6918      	ldr	r0, [r3, #16]
 801794e:	f7ff fcbd 	bl	80172cc <__hi0bits>
 8017952:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017956:	e7e5      	b.n	8017924 <__d2b+0x74>
 8017958:	08018e19 	.word	0x08018e19
 801795c:	08018ea1 	.word	0x08018ea1

08017960 <__ratio>:
 8017960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017964:	4688      	mov	r8, r1
 8017966:	4669      	mov	r1, sp
 8017968:	4681      	mov	r9, r0
 801796a:	f7ff ff57 	bl	801781c <__b2d>
 801796e:	a901      	add	r1, sp, #4
 8017970:	4640      	mov	r0, r8
 8017972:	ec55 4b10 	vmov	r4, r5, d0
 8017976:	f7ff ff51 	bl	801781c <__b2d>
 801797a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801797e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017982:	1ad2      	subs	r2, r2, r3
 8017984:	e9dd 3100 	ldrd	r3, r1, [sp]
 8017988:	1a5b      	subs	r3, r3, r1
 801798a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801798e:	ec57 6b10 	vmov	r6, r7, d0
 8017992:	2b00      	cmp	r3, #0
 8017994:	bfd6      	itet	le
 8017996:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801799a:	462a      	movgt	r2, r5
 801799c:	463a      	movle	r2, r7
 801799e:	46ab      	mov	fp, r5
 80179a0:	46a2      	mov	sl, r4
 80179a2:	bfce      	itee	gt
 80179a4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80179a8:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80179ac:	ee00 3a90 	vmovle	s1, r3
 80179b0:	ec4b ab17 	vmov	d7, sl, fp
 80179b4:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80179b8:	b003      	add	sp, #12
 80179ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080179be <__copybits>:
 80179be:	3901      	subs	r1, #1
 80179c0:	b570      	push	{r4, r5, r6, lr}
 80179c2:	1149      	asrs	r1, r1, #5
 80179c4:	6914      	ldr	r4, [r2, #16]
 80179c6:	3101      	adds	r1, #1
 80179c8:	f102 0314 	add.w	r3, r2, #20
 80179cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80179d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80179d4:	1f05      	subs	r5, r0, #4
 80179d6:	42a3      	cmp	r3, r4
 80179d8:	d30c      	bcc.n	80179f4 <__copybits+0x36>
 80179da:	1aa3      	subs	r3, r4, r2
 80179dc:	3b11      	subs	r3, #17
 80179de:	f023 0303 	bic.w	r3, r3, #3
 80179e2:	3211      	adds	r2, #17
 80179e4:	42a2      	cmp	r2, r4
 80179e6:	bf88      	it	hi
 80179e8:	2300      	movhi	r3, #0
 80179ea:	4418      	add	r0, r3
 80179ec:	2300      	movs	r3, #0
 80179ee:	4288      	cmp	r0, r1
 80179f0:	d305      	bcc.n	80179fe <__copybits+0x40>
 80179f2:	bd70      	pop	{r4, r5, r6, pc}
 80179f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80179f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80179fc:	e7eb      	b.n	80179d6 <__copybits+0x18>
 80179fe:	f840 3b04 	str.w	r3, [r0], #4
 8017a02:	e7f4      	b.n	80179ee <__copybits+0x30>

08017a04 <__any_on>:
 8017a04:	f100 0214 	add.w	r2, r0, #20
 8017a08:	6900      	ldr	r0, [r0, #16]
 8017a0a:	114b      	asrs	r3, r1, #5
 8017a0c:	4298      	cmp	r0, r3
 8017a0e:	b510      	push	{r4, lr}
 8017a10:	db11      	blt.n	8017a36 <__any_on+0x32>
 8017a12:	dd0a      	ble.n	8017a2a <__any_on+0x26>
 8017a14:	f011 011f 	ands.w	r1, r1, #31
 8017a18:	d007      	beq.n	8017a2a <__any_on+0x26>
 8017a1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017a1e:	fa24 f001 	lsr.w	r0, r4, r1
 8017a22:	fa00 f101 	lsl.w	r1, r0, r1
 8017a26:	428c      	cmp	r4, r1
 8017a28:	d10b      	bne.n	8017a42 <__any_on+0x3e>
 8017a2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017a2e:	4293      	cmp	r3, r2
 8017a30:	d803      	bhi.n	8017a3a <__any_on+0x36>
 8017a32:	2000      	movs	r0, #0
 8017a34:	bd10      	pop	{r4, pc}
 8017a36:	4603      	mov	r3, r0
 8017a38:	e7f7      	b.n	8017a2a <__any_on+0x26>
 8017a3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017a3e:	2900      	cmp	r1, #0
 8017a40:	d0f5      	beq.n	8017a2e <__any_on+0x2a>
 8017a42:	2001      	movs	r0, #1
 8017a44:	e7f6      	b.n	8017a34 <__any_on+0x30>

08017a46 <__ascii_wctomb>:
 8017a46:	4603      	mov	r3, r0
 8017a48:	4608      	mov	r0, r1
 8017a4a:	b141      	cbz	r1, 8017a5e <__ascii_wctomb+0x18>
 8017a4c:	2aff      	cmp	r2, #255	@ 0xff
 8017a4e:	d904      	bls.n	8017a5a <__ascii_wctomb+0x14>
 8017a50:	228a      	movs	r2, #138	@ 0x8a
 8017a52:	601a      	str	r2, [r3, #0]
 8017a54:	f04f 30ff 	mov.w	r0, #4294967295
 8017a58:	4770      	bx	lr
 8017a5a:	700a      	strb	r2, [r1, #0]
 8017a5c:	2001      	movs	r0, #1
 8017a5e:	4770      	bx	lr

08017a60 <__sflush_r>:
 8017a60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a68:	0716      	lsls	r6, r2, #28
 8017a6a:	4605      	mov	r5, r0
 8017a6c:	460c      	mov	r4, r1
 8017a6e:	d454      	bmi.n	8017b1a <__sflush_r+0xba>
 8017a70:	684b      	ldr	r3, [r1, #4]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	dc02      	bgt.n	8017a7c <__sflush_r+0x1c>
 8017a76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	dd48      	ble.n	8017b0e <__sflush_r+0xae>
 8017a7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017a7e:	2e00      	cmp	r6, #0
 8017a80:	d045      	beq.n	8017b0e <__sflush_r+0xae>
 8017a82:	2300      	movs	r3, #0
 8017a84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017a88:	682f      	ldr	r7, [r5, #0]
 8017a8a:	6a21      	ldr	r1, [r4, #32]
 8017a8c:	602b      	str	r3, [r5, #0]
 8017a8e:	d030      	beq.n	8017af2 <__sflush_r+0x92>
 8017a90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017a92:	89a3      	ldrh	r3, [r4, #12]
 8017a94:	0759      	lsls	r1, r3, #29
 8017a96:	d505      	bpl.n	8017aa4 <__sflush_r+0x44>
 8017a98:	6863      	ldr	r3, [r4, #4]
 8017a9a:	1ad2      	subs	r2, r2, r3
 8017a9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017a9e:	b10b      	cbz	r3, 8017aa4 <__sflush_r+0x44>
 8017aa0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017aa2:	1ad2      	subs	r2, r2, r3
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017aa8:	6a21      	ldr	r1, [r4, #32]
 8017aaa:	4628      	mov	r0, r5
 8017aac:	47b0      	blx	r6
 8017aae:	1c43      	adds	r3, r0, #1
 8017ab0:	89a3      	ldrh	r3, [r4, #12]
 8017ab2:	d106      	bne.n	8017ac2 <__sflush_r+0x62>
 8017ab4:	6829      	ldr	r1, [r5, #0]
 8017ab6:	291d      	cmp	r1, #29
 8017ab8:	d82b      	bhi.n	8017b12 <__sflush_r+0xb2>
 8017aba:	4a2a      	ldr	r2, [pc, #168]	@ (8017b64 <__sflush_r+0x104>)
 8017abc:	410a      	asrs	r2, r1
 8017abe:	07d6      	lsls	r6, r2, #31
 8017ac0:	d427      	bmi.n	8017b12 <__sflush_r+0xb2>
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	6062      	str	r2, [r4, #4]
 8017ac6:	04d9      	lsls	r1, r3, #19
 8017ac8:	6922      	ldr	r2, [r4, #16]
 8017aca:	6022      	str	r2, [r4, #0]
 8017acc:	d504      	bpl.n	8017ad8 <__sflush_r+0x78>
 8017ace:	1c42      	adds	r2, r0, #1
 8017ad0:	d101      	bne.n	8017ad6 <__sflush_r+0x76>
 8017ad2:	682b      	ldr	r3, [r5, #0]
 8017ad4:	b903      	cbnz	r3, 8017ad8 <__sflush_r+0x78>
 8017ad6:	6560      	str	r0, [r4, #84]	@ 0x54
 8017ad8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017ada:	602f      	str	r7, [r5, #0]
 8017adc:	b1b9      	cbz	r1, 8017b0e <__sflush_r+0xae>
 8017ade:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017ae2:	4299      	cmp	r1, r3
 8017ae4:	d002      	beq.n	8017aec <__sflush_r+0x8c>
 8017ae6:	4628      	mov	r0, r5
 8017ae8:	f7fe feba 	bl	8016860 <_free_r>
 8017aec:	2300      	movs	r3, #0
 8017aee:	6363      	str	r3, [r4, #52]	@ 0x34
 8017af0:	e00d      	b.n	8017b0e <__sflush_r+0xae>
 8017af2:	2301      	movs	r3, #1
 8017af4:	4628      	mov	r0, r5
 8017af6:	47b0      	blx	r6
 8017af8:	4602      	mov	r2, r0
 8017afa:	1c50      	adds	r0, r2, #1
 8017afc:	d1c9      	bne.n	8017a92 <__sflush_r+0x32>
 8017afe:	682b      	ldr	r3, [r5, #0]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d0c6      	beq.n	8017a92 <__sflush_r+0x32>
 8017b04:	2b1d      	cmp	r3, #29
 8017b06:	d001      	beq.n	8017b0c <__sflush_r+0xac>
 8017b08:	2b16      	cmp	r3, #22
 8017b0a:	d11e      	bne.n	8017b4a <__sflush_r+0xea>
 8017b0c:	602f      	str	r7, [r5, #0]
 8017b0e:	2000      	movs	r0, #0
 8017b10:	e022      	b.n	8017b58 <__sflush_r+0xf8>
 8017b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b16:	b21b      	sxth	r3, r3
 8017b18:	e01b      	b.n	8017b52 <__sflush_r+0xf2>
 8017b1a:	690f      	ldr	r7, [r1, #16]
 8017b1c:	2f00      	cmp	r7, #0
 8017b1e:	d0f6      	beq.n	8017b0e <__sflush_r+0xae>
 8017b20:	0793      	lsls	r3, r2, #30
 8017b22:	680e      	ldr	r6, [r1, #0]
 8017b24:	bf08      	it	eq
 8017b26:	694b      	ldreq	r3, [r1, #20]
 8017b28:	600f      	str	r7, [r1, #0]
 8017b2a:	bf18      	it	ne
 8017b2c:	2300      	movne	r3, #0
 8017b2e:	eba6 0807 	sub.w	r8, r6, r7
 8017b32:	608b      	str	r3, [r1, #8]
 8017b34:	f1b8 0f00 	cmp.w	r8, #0
 8017b38:	dde9      	ble.n	8017b0e <__sflush_r+0xae>
 8017b3a:	6a21      	ldr	r1, [r4, #32]
 8017b3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017b3e:	4643      	mov	r3, r8
 8017b40:	463a      	mov	r2, r7
 8017b42:	4628      	mov	r0, r5
 8017b44:	47b0      	blx	r6
 8017b46:	2800      	cmp	r0, #0
 8017b48:	dc08      	bgt.n	8017b5c <__sflush_r+0xfc>
 8017b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b52:	81a3      	strh	r3, [r4, #12]
 8017b54:	f04f 30ff 	mov.w	r0, #4294967295
 8017b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b5c:	4407      	add	r7, r0
 8017b5e:	eba8 0800 	sub.w	r8, r8, r0
 8017b62:	e7e7      	b.n	8017b34 <__sflush_r+0xd4>
 8017b64:	dfbffffe 	.word	0xdfbffffe

08017b68 <_fflush_r>:
 8017b68:	b538      	push	{r3, r4, r5, lr}
 8017b6a:	690b      	ldr	r3, [r1, #16]
 8017b6c:	4605      	mov	r5, r0
 8017b6e:	460c      	mov	r4, r1
 8017b70:	b913      	cbnz	r3, 8017b78 <_fflush_r+0x10>
 8017b72:	2500      	movs	r5, #0
 8017b74:	4628      	mov	r0, r5
 8017b76:	bd38      	pop	{r3, r4, r5, pc}
 8017b78:	b118      	cbz	r0, 8017b82 <_fflush_r+0x1a>
 8017b7a:	6a03      	ldr	r3, [r0, #32]
 8017b7c:	b90b      	cbnz	r3, 8017b82 <_fflush_r+0x1a>
 8017b7e:	f7fe fd45 	bl	801660c <__sinit>
 8017b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d0f3      	beq.n	8017b72 <_fflush_r+0xa>
 8017b8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017b8c:	07d0      	lsls	r0, r2, #31
 8017b8e:	d404      	bmi.n	8017b9a <_fflush_r+0x32>
 8017b90:	0599      	lsls	r1, r3, #22
 8017b92:	d402      	bmi.n	8017b9a <_fflush_r+0x32>
 8017b94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017b96:	f7fe fe4a 	bl	801682e <__retarget_lock_acquire_recursive>
 8017b9a:	4628      	mov	r0, r5
 8017b9c:	4621      	mov	r1, r4
 8017b9e:	f7ff ff5f 	bl	8017a60 <__sflush_r>
 8017ba2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ba4:	07da      	lsls	r2, r3, #31
 8017ba6:	4605      	mov	r5, r0
 8017ba8:	d4e4      	bmi.n	8017b74 <_fflush_r+0xc>
 8017baa:	89a3      	ldrh	r3, [r4, #12]
 8017bac:	059b      	lsls	r3, r3, #22
 8017bae:	d4e1      	bmi.n	8017b74 <_fflush_r+0xc>
 8017bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017bb2:	f7fe fe3d 	bl	8016830 <__retarget_lock_release_recursive>
 8017bb6:	e7dd      	b.n	8017b74 <_fflush_r+0xc>

08017bb8 <_sbrk_r>:
 8017bb8:	b538      	push	{r3, r4, r5, lr}
 8017bba:	4d06      	ldr	r5, [pc, #24]	@ (8017bd4 <_sbrk_r+0x1c>)
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	4604      	mov	r4, r0
 8017bc0:	4608      	mov	r0, r1
 8017bc2:	602b      	str	r3, [r5, #0]
 8017bc4:	f7ec fd54 	bl	8004670 <_sbrk>
 8017bc8:	1c43      	adds	r3, r0, #1
 8017bca:	d102      	bne.n	8017bd2 <_sbrk_r+0x1a>
 8017bcc:	682b      	ldr	r3, [r5, #0]
 8017bce:	b103      	cbz	r3, 8017bd2 <_sbrk_r+0x1a>
 8017bd0:	6023      	str	r3, [r4, #0]
 8017bd2:	bd38      	pop	{r3, r4, r5, pc}
 8017bd4:	24005810 	.word	0x24005810

08017bd8 <__assert_func>:
 8017bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bda:	4614      	mov	r4, r2
 8017bdc:	461a      	mov	r2, r3
 8017bde:	4b09      	ldr	r3, [pc, #36]	@ (8017c04 <__assert_func+0x2c>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	4605      	mov	r5, r0
 8017be4:	68d8      	ldr	r0, [r3, #12]
 8017be6:	b954      	cbnz	r4, 8017bfe <__assert_func+0x26>
 8017be8:	4b07      	ldr	r3, [pc, #28]	@ (8017c08 <__assert_func+0x30>)
 8017bea:	461c      	mov	r4, r3
 8017bec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017bf0:	9100      	str	r1, [sp, #0]
 8017bf2:	462b      	mov	r3, r5
 8017bf4:	4905      	ldr	r1, [pc, #20]	@ (8017c0c <__assert_func+0x34>)
 8017bf6:	f000 f829 	bl	8017c4c <fiprintf>
 8017bfa:	f000 f839 	bl	8017c70 <abort>
 8017bfe:	4b04      	ldr	r3, [pc, #16]	@ (8017c10 <__assert_func+0x38>)
 8017c00:	e7f4      	b.n	8017bec <__assert_func+0x14>
 8017c02:	bf00      	nop
 8017c04:	24000260 	.word	0x24000260
 8017c08:	08019033 	.word	0x08019033
 8017c0c:	08019005 	.word	0x08019005
 8017c10:	08018ff8 	.word	0x08018ff8

08017c14 <_calloc_r>:
 8017c14:	b570      	push	{r4, r5, r6, lr}
 8017c16:	fba1 5402 	umull	r5, r4, r1, r2
 8017c1a:	b93c      	cbnz	r4, 8017c2c <_calloc_r+0x18>
 8017c1c:	4629      	mov	r1, r5
 8017c1e:	f7ff f9c5 	bl	8016fac <_malloc_r>
 8017c22:	4606      	mov	r6, r0
 8017c24:	b928      	cbnz	r0, 8017c32 <_calloc_r+0x1e>
 8017c26:	2600      	movs	r6, #0
 8017c28:	4630      	mov	r0, r6
 8017c2a:	bd70      	pop	{r4, r5, r6, pc}
 8017c2c:	220c      	movs	r2, #12
 8017c2e:	6002      	str	r2, [r0, #0]
 8017c30:	e7f9      	b.n	8017c26 <_calloc_r+0x12>
 8017c32:	462a      	mov	r2, r5
 8017c34:	4621      	mov	r1, r4
 8017c36:	f7fe fd62 	bl	80166fe <memset>
 8017c3a:	e7f5      	b.n	8017c28 <_calloc_r+0x14>

08017c3c <malloc>:
 8017c3c:	4b02      	ldr	r3, [pc, #8]	@ (8017c48 <malloc+0xc>)
 8017c3e:	4601      	mov	r1, r0
 8017c40:	6818      	ldr	r0, [r3, #0]
 8017c42:	f7ff b9b3 	b.w	8016fac <_malloc_r>
 8017c46:	bf00      	nop
 8017c48:	24000260 	.word	0x24000260

08017c4c <fiprintf>:
 8017c4c:	b40e      	push	{r1, r2, r3}
 8017c4e:	b503      	push	{r0, r1, lr}
 8017c50:	4601      	mov	r1, r0
 8017c52:	ab03      	add	r3, sp, #12
 8017c54:	4805      	ldr	r0, [pc, #20]	@ (8017c6c <fiprintf+0x20>)
 8017c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c5a:	6800      	ldr	r0, [r0, #0]
 8017c5c:	9301      	str	r3, [sp, #4]
 8017c5e:	f000 f837 	bl	8017cd0 <_vfiprintf_r>
 8017c62:	b002      	add	sp, #8
 8017c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c68:	b003      	add	sp, #12
 8017c6a:	4770      	bx	lr
 8017c6c:	24000260 	.word	0x24000260

08017c70 <abort>:
 8017c70:	b508      	push	{r3, lr}
 8017c72:	2006      	movs	r0, #6
 8017c74:	f000 fb8e 	bl	8018394 <raise>
 8017c78:	2001      	movs	r0, #1
 8017c7a:	f7ec fc81 	bl	8004580 <_exit>

08017c7e <__sfputc_r>:
 8017c7e:	6893      	ldr	r3, [r2, #8]
 8017c80:	3b01      	subs	r3, #1
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	b410      	push	{r4}
 8017c86:	6093      	str	r3, [r2, #8]
 8017c88:	da08      	bge.n	8017c9c <__sfputc_r+0x1e>
 8017c8a:	6994      	ldr	r4, [r2, #24]
 8017c8c:	42a3      	cmp	r3, r4
 8017c8e:	db01      	blt.n	8017c94 <__sfputc_r+0x16>
 8017c90:	290a      	cmp	r1, #10
 8017c92:	d103      	bne.n	8017c9c <__sfputc_r+0x1e>
 8017c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c98:	f000 bac0 	b.w	801821c <__swbuf_r>
 8017c9c:	6813      	ldr	r3, [r2, #0]
 8017c9e:	1c58      	adds	r0, r3, #1
 8017ca0:	6010      	str	r0, [r2, #0]
 8017ca2:	7019      	strb	r1, [r3, #0]
 8017ca4:	4608      	mov	r0, r1
 8017ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017caa:	4770      	bx	lr

08017cac <__sfputs_r>:
 8017cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cae:	4606      	mov	r6, r0
 8017cb0:	460f      	mov	r7, r1
 8017cb2:	4614      	mov	r4, r2
 8017cb4:	18d5      	adds	r5, r2, r3
 8017cb6:	42ac      	cmp	r4, r5
 8017cb8:	d101      	bne.n	8017cbe <__sfputs_r+0x12>
 8017cba:	2000      	movs	r0, #0
 8017cbc:	e007      	b.n	8017cce <__sfputs_r+0x22>
 8017cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cc2:	463a      	mov	r2, r7
 8017cc4:	4630      	mov	r0, r6
 8017cc6:	f7ff ffda 	bl	8017c7e <__sfputc_r>
 8017cca:	1c43      	adds	r3, r0, #1
 8017ccc:	d1f3      	bne.n	8017cb6 <__sfputs_r+0xa>
 8017cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017cd0 <_vfiprintf_r>:
 8017cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cd4:	460d      	mov	r5, r1
 8017cd6:	b09d      	sub	sp, #116	@ 0x74
 8017cd8:	4614      	mov	r4, r2
 8017cda:	4698      	mov	r8, r3
 8017cdc:	4606      	mov	r6, r0
 8017cde:	b118      	cbz	r0, 8017ce8 <_vfiprintf_r+0x18>
 8017ce0:	6a03      	ldr	r3, [r0, #32]
 8017ce2:	b90b      	cbnz	r3, 8017ce8 <_vfiprintf_r+0x18>
 8017ce4:	f7fe fc92 	bl	801660c <__sinit>
 8017ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017cea:	07d9      	lsls	r1, r3, #31
 8017cec:	d405      	bmi.n	8017cfa <_vfiprintf_r+0x2a>
 8017cee:	89ab      	ldrh	r3, [r5, #12]
 8017cf0:	059a      	lsls	r2, r3, #22
 8017cf2:	d402      	bmi.n	8017cfa <_vfiprintf_r+0x2a>
 8017cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017cf6:	f7fe fd9a 	bl	801682e <__retarget_lock_acquire_recursive>
 8017cfa:	89ab      	ldrh	r3, [r5, #12]
 8017cfc:	071b      	lsls	r3, r3, #28
 8017cfe:	d501      	bpl.n	8017d04 <_vfiprintf_r+0x34>
 8017d00:	692b      	ldr	r3, [r5, #16]
 8017d02:	b99b      	cbnz	r3, 8017d2c <_vfiprintf_r+0x5c>
 8017d04:	4629      	mov	r1, r5
 8017d06:	4630      	mov	r0, r6
 8017d08:	f000 fac6 	bl	8018298 <__swsetup_r>
 8017d0c:	b170      	cbz	r0, 8017d2c <_vfiprintf_r+0x5c>
 8017d0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d10:	07dc      	lsls	r4, r3, #31
 8017d12:	d504      	bpl.n	8017d1e <_vfiprintf_r+0x4e>
 8017d14:	f04f 30ff 	mov.w	r0, #4294967295
 8017d18:	b01d      	add	sp, #116	@ 0x74
 8017d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d1e:	89ab      	ldrh	r3, [r5, #12]
 8017d20:	0598      	lsls	r0, r3, #22
 8017d22:	d4f7      	bmi.n	8017d14 <_vfiprintf_r+0x44>
 8017d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d26:	f7fe fd83 	bl	8016830 <__retarget_lock_release_recursive>
 8017d2a:	e7f3      	b.n	8017d14 <_vfiprintf_r+0x44>
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d30:	2320      	movs	r3, #32
 8017d32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d3a:	2330      	movs	r3, #48	@ 0x30
 8017d3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017eec <_vfiprintf_r+0x21c>
 8017d40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017d44:	f04f 0901 	mov.w	r9, #1
 8017d48:	4623      	mov	r3, r4
 8017d4a:	469a      	mov	sl, r3
 8017d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d50:	b10a      	cbz	r2, 8017d56 <_vfiprintf_r+0x86>
 8017d52:	2a25      	cmp	r2, #37	@ 0x25
 8017d54:	d1f9      	bne.n	8017d4a <_vfiprintf_r+0x7a>
 8017d56:	ebba 0b04 	subs.w	fp, sl, r4
 8017d5a:	d00b      	beq.n	8017d74 <_vfiprintf_r+0xa4>
 8017d5c:	465b      	mov	r3, fp
 8017d5e:	4622      	mov	r2, r4
 8017d60:	4629      	mov	r1, r5
 8017d62:	4630      	mov	r0, r6
 8017d64:	f7ff ffa2 	bl	8017cac <__sfputs_r>
 8017d68:	3001      	adds	r0, #1
 8017d6a:	f000 80a7 	beq.w	8017ebc <_vfiprintf_r+0x1ec>
 8017d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d70:	445a      	add	r2, fp
 8017d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8017d74:	f89a 3000 	ldrb.w	r3, [sl]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	f000 809f 	beq.w	8017ebc <_vfiprintf_r+0x1ec>
 8017d7e:	2300      	movs	r3, #0
 8017d80:	f04f 32ff 	mov.w	r2, #4294967295
 8017d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d88:	f10a 0a01 	add.w	sl, sl, #1
 8017d8c:	9304      	str	r3, [sp, #16]
 8017d8e:	9307      	str	r3, [sp, #28]
 8017d90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8017d96:	4654      	mov	r4, sl
 8017d98:	2205      	movs	r2, #5
 8017d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d9e:	4853      	ldr	r0, [pc, #332]	@ (8017eec <_vfiprintf_r+0x21c>)
 8017da0:	f7e8 fab6 	bl	8000310 <memchr>
 8017da4:	9a04      	ldr	r2, [sp, #16]
 8017da6:	b9d8      	cbnz	r0, 8017de0 <_vfiprintf_r+0x110>
 8017da8:	06d1      	lsls	r1, r2, #27
 8017daa:	bf44      	itt	mi
 8017dac:	2320      	movmi	r3, #32
 8017dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017db2:	0713      	lsls	r3, r2, #28
 8017db4:	bf44      	itt	mi
 8017db6:	232b      	movmi	r3, #43	@ 0x2b
 8017db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8017dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8017dc2:	d015      	beq.n	8017df0 <_vfiprintf_r+0x120>
 8017dc4:	9a07      	ldr	r2, [sp, #28]
 8017dc6:	4654      	mov	r4, sl
 8017dc8:	2000      	movs	r0, #0
 8017dca:	f04f 0c0a 	mov.w	ip, #10
 8017dce:	4621      	mov	r1, r4
 8017dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017dd4:	3b30      	subs	r3, #48	@ 0x30
 8017dd6:	2b09      	cmp	r3, #9
 8017dd8:	d94b      	bls.n	8017e72 <_vfiprintf_r+0x1a2>
 8017dda:	b1b0      	cbz	r0, 8017e0a <_vfiprintf_r+0x13a>
 8017ddc:	9207      	str	r2, [sp, #28]
 8017dde:	e014      	b.n	8017e0a <_vfiprintf_r+0x13a>
 8017de0:	eba0 0308 	sub.w	r3, r0, r8
 8017de4:	fa09 f303 	lsl.w	r3, r9, r3
 8017de8:	4313      	orrs	r3, r2
 8017dea:	9304      	str	r3, [sp, #16]
 8017dec:	46a2      	mov	sl, r4
 8017dee:	e7d2      	b.n	8017d96 <_vfiprintf_r+0xc6>
 8017df0:	9b03      	ldr	r3, [sp, #12]
 8017df2:	1d19      	adds	r1, r3, #4
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	9103      	str	r1, [sp, #12]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	bfbb      	ittet	lt
 8017dfc:	425b      	neglt	r3, r3
 8017dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8017e02:	9307      	strge	r3, [sp, #28]
 8017e04:	9307      	strlt	r3, [sp, #28]
 8017e06:	bfb8      	it	lt
 8017e08:	9204      	strlt	r2, [sp, #16]
 8017e0a:	7823      	ldrb	r3, [r4, #0]
 8017e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8017e0e:	d10a      	bne.n	8017e26 <_vfiprintf_r+0x156>
 8017e10:	7863      	ldrb	r3, [r4, #1]
 8017e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e14:	d132      	bne.n	8017e7c <_vfiprintf_r+0x1ac>
 8017e16:	9b03      	ldr	r3, [sp, #12]
 8017e18:	1d1a      	adds	r2, r3, #4
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	9203      	str	r2, [sp, #12]
 8017e1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017e22:	3402      	adds	r4, #2
 8017e24:	9305      	str	r3, [sp, #20]
 8017e26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017efc <_vfiprintf_r+0x22c>
 8017e2a:	7821      	ldrb	r1, [r4, #0]
 8017e2c:	2203      	movs	r2, #3
 8017e2e:	4650      	mov	r0, sl
 8017e30:	f7e8 fa6e 	bl	8000310 <memchr>
 8017e34:	b138      	cbz	r0, 8017e46 <_vfiprintf_r+0x176>
 8017e36:	9b04      	ldr	r3, [sp, #16]
 8017e38:	eba0 000a 	sub.w	r0, r0, sl
 8017e3c:	2240      	movs	r2, #64	@ 0x40
 8017e3e:	4082      	lsls	r2, r0
 8017e40:	4313      	orrs	r3, r2
 8017e42:	3401      	adds	r4, #1
 8017e44:	9304      	str	r3, [sp, #16]
 8017e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e4a:	4829      	ldr	r0, [pc, #164]	@ (8017ef0 <_vfiprintf_r+0x220>)
 8017e4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017e50:	2206      	movs	r2, #6
 8017e52:	f7e8 fa5d 	bl	8000310 <memchr>
 8017e56:	2800      	cmp	r0, #0
 8017e58:	d03f      	beq.n	8017eda <_vfiprintf_r+0x20a>
 8017e5a:	4b26      	ldr	r3, [pc, #152]	@ (8017ef4 <_vfiprintf_r+0x224>)
 8017e5c:	bb1b      	cbnz	r3, 8017ea6 <_vfiprintf_r+0x1d6>
 8017e5e:	9b03      	ldr	r3, [sp, #12]
 8017e60:	3307      	adds	r3, #7
 8017e62:	f023 0307 	bic.w	r3, r3, #7
 8017e66:	3308      	adds	r3, #8
 8017e68:	9303      	str	r3, [sp, #12]
 8017e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e6c:	443b      	add	r3, r7
 8017e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e70:	e76a      	b.n	8017d48 <_vfiprintf_r+0x78>
 8017e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e76:	460c      	mov	r4, r1
 8017e78:	2001      	movs	r0, #1
 8017e7a:	e7a8      	b.n	8017dce <_vfiprintf_r+0xfe>
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	3401      	adds	r4, #1
 8017e80:	9305      	str	r3, [sp, #20]
 8017e82:	4619      	mov	r1, r3
 8017e84:	f04f 0c0a 	mov.w	ip, #10
 8017e88:	4620      	mov	r0, r4
 8017e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e8e:	3a30      	subs	r2, #48	@ 0x30
 8017e90:	2a09      	cmp	r2, #9
 8017e92:	d903      	bls.n	8017e9c <_vfiprintf_r+0x1cc>
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d0c6      	beq.n	8017e26 <_vfiprintf_r+0x156>
 8017e98:	9105      	str	r1, [sp, #20]
 8017e9a:	e7c4      	b.n	8017e26 <_vfiprintf_r+0x156>
 8017e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	2301      	movs	r3, #1
 8017ea4:	e7f0      	b.n	8017e88 <_vfiprintf_r+0x1b8>
 8017ea6:	ab03      	add	r3, sp, #12
 8017ea8:	9300      	str	r3, [sp, #0]
 8017eaa:	462a      	mov	r2, r5
 8017eac:	4b12      	ldr	r3, [pc, #72]	@ (8017ef8 <_vfiprintf_r+0x228>)
 8017eae:	a904      	add	r1, sp, #16
 8017eb0:	4630      	mov	r0, r6
 8017eb2:	f3af 8000 	nop.w
 8017eb6:	4607      	mov	r7, r0
 8017eb8:	1c78      	adds	r0, r7, #1
 8017eba:	d1d6      	bne.n	8017e6a <_vfiprintf_r+0x19a>
 8017ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ebe:	07d9      	lsls	r1, r3, #31
 8017ec0:	d405      	bmi.n	8017ece <_vfiprintf_r+0x1fe>
 8017ec2:	89ab      	ldrh	r3, [r5, #12]
 8017ec4:	059a      	lsls	r2, r3, #22
 8017ec6:	d402      	bmi.n	8017ece <_vfiprintf_r+0x1fe>
 8017ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017eca:	f7fe fcb1 	bl	8016830 <__retarget_lock_release_recursive>
 8017ece:	89ab      	ldrh	r3, [r5, #12]
 8017ed0:	065b      	lsls	r3, r3, #25
 8017ed2:	f53f af1f 	bmi.w	8017d14 <_vfiprintf_r+0x44>
 8017ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ed8:	e71e      	b.n	8017d18 <_vfiprintf_r+0x48>
 8017eda:	ab03      	add	r3, sp, #12
 8017edc:	9300      	str	r3, [sp, #0]
 8017ede:	462a      	mov	r2, r5
 8017ee0:	4b05      	ldr	r3, [pc, #20]	@ (8017ef8 <_vfiprintf_r+0x228>)
 8017ee2:	a904      	add	r1, sp, #16
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	f000 f879 	bl	8017fdc <_printf_i>
 8017eea:	e7e4      	b.n	8017eb6 <_vfiprintf_r+0x1e6>
 8017eec:	08019034 	.word	0x08019034
 8017ef0:	0801903e 	.word	0x0801903e
 8017ef4:	00000000 	.word	0x00000000
 8017ef8:	08017cad 	.word	0x08017cad
 8017efc:	0801903a 	.word	0x0801903a

08017f00 <_printf_common>:
 8017f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f04:	4616      	mov	r6, r2
 8017f06:	4698      	mov	r8, r3
 8017f08:	688a      	ldr	r2, [r1, #8]
 8017f0a:	690b      	ldr	r3, [r1, #16]
 8017f0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017f10:	4293      	cmp	r3, r2
 8017f12:	bfb8      	it	lt
 8017f14:	4613      	movlt	r3, r2
 8017f16:	6033      	str	r3, [r6, #0]
 8017f18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017f1c:	4607      	mov	r7, r0
 8017f1e:	460c      	mov	r4, r1
 8017f20:	b10a      	cbz	r2, 8017f26 <_printf_common+0x26>
 8017f22:	3301      	adds	r3, #1
 8017f24:	6033      	str	r3, [r6, #0]
 8017f26:	6823      	ldr	r3, [r4, #0]
 8017f28:	0699      	lsls	r1, r3, #26
 8017f2a:	bf42      	ittt	mi
 8017f2c:	6833      	ldrmi	r3, [r6, #0]
 8017f2e:	3302      	addmi	r3, #2
 8017f30:	6033      	strmi	r3, [r6, #0]
 8017f32:	6825      	ldr	r5, [r4, #0]
 8017f34:	f015 0506 	ands.w	r5, r5, #6
 8017f38:	d106      	bne.n	8017f48 <_printf_common+0x48>
 8017f3a:	f104 0a19 	add.w	sl, r4, #25
 8017f3e:	68e3      	ldr	r3, [r4, #12]
 8017f40:	6832      	ldr	r2, [r6, #0]
 8017f42:	1a9b      	subs	r3, r3, r2
 8017f44:	42ab      	cmp	r3, r5
 8017f46:	dc26      	bgt.n	8017f96 <_printf_common+0x96>
 8017f48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017f4c:	6822      	ldr	r2, [r4, #0]
 8017f4e:	3b00      	subs	r3, #0
 8017f50:	bf18      	it	ne
 8017f52:	2301      	movne	r3, #1
 8017f54:	0692      	lsls	r2, r2, #26
 8017f56:	d42b      	bmi.n	8017fb0 <_printf_common+0xb0>
 8017f58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017f5c:	4641      	mov	r1, r8
 8017f5e:	4638      	mov	r0, r7
 8017f60:	47c8      	blx	r9
 8017f62:	3001      	adds	r0, #1
 8017f64:	d01e      	beq.n	8017fa4 <_printf_common+0xa4>
 8017f66:	6823      	ldr	r3, [r4, #0]
 8017f68:	6922      	ldr	r2, [r4, #16]
 8017f6a:	f003 0306 	and.w	r3, r3, #6
 8017f6e:	2b04      	cmp	r3, #4
 8017f70:	bf02      	ittt	eq
 8017f72:	68e5      	ldreq	r5, [r4, #12]
 8017f74:	6833      	ldreq	r3, [r6, #0]
 8017f76:	1aed      	subeq	r5, r5, r3
 8017f78:	68a3      	ldr	r3, [r4, #8]
 8017f7a:	bf0c      	ite	eq
 8017f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f80:	2500      	movne	r5, #0
 8017f82:	4293      	cmp	r3, r2
 8017f84:	bfc4      	itt	gt
 8017f86:	1a9b      	subgt	r3, r3, r2
 8017f88:	18ed      	addgt	r5, r5, r3
 8017f8a:	2600      	movs	r6, #0
 8017f8c:	341a      	adds	r4, #26
 8017f8e:	42b5      	cmp	r5, r6
 8017f90:	d11a      	bne.n	8017fc8 <_printf_common+0xc8>
 8017f92:	2000      	movs	r0, #0
 8017f94:	e008      	b.n	8017fa8 <_printf_common+0xa8>
 8017f96:	2301      	movs	r3, #1
 8017f98:	4652      	mov	r2, sl
 8017f9a:	4641      	mov	r1, r8
 8017f9c:	4638      	mov	r0, r7
 8017f9e:	47c8      	blx	r9
 8017fa0:	3001      	adds	r0, #1
 8017fa2:	d103      	bne.n	8017fac <_printf_common+0xac>
 8017fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8017fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fac:	3501      	adds	r5, #1
 8017fae:	e7c6      	b.n	8017f3e <_printf_common+0x3e>
 8017fb0:	18e1      	adds	r1, r4, r3
 8017fb2:	1c5a      	adds	r2, r3, #1
 8017fb4:	2030      	movs	r0, #48	@ 0x30
 8017fb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017fba:	4422      	add	r2, r4
 8017fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017fc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017fc4:	3302      	adds	r3, #2
 8017fc6:	e7c7      	b.n	8017f58 <_printf_common+0x58>
 8017fc8:	2301      	movs	r3, #1
 8017fca:	4622      	mov	r2, r4
 8017fcc:	4641      	mov	r1, r8
 8017fce:	4638      	mov	r0, r7
 8017fd0:	47c8      	blx	r9
 8017fd2:	3001      	adds	r0, #1
 8017fd4:	d0e6      	beq.n	8017fa4 <_printf_common+0xa4>
 8017fd6:	3601      	adds	r6, #1
 8017fd8:	e7d9      	b.n	8017f8e <_printf_common+0x8e>
	...

08017fdc <_printf_i>:
 8017fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017fe0:	7e0f      	ldrb	r7, [r1, #24]
 8017fe2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017fe4:	2f78      	cmp	r7, #120	@ 0x78
 8017fe6:	4691      	mov	r9, r2
 8017fe8:	4680      	mov	r8, r0
 8017fea:	460c      	mov	r4, r1
 8017fec:	469a      	mov	sl, r3
 8017fee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017ff2:	d807      	bhi.n	8018004 <_printf_i+0x28>
 8017ff4:	2f62      	cmp	r7, #98	@ 0x62
 8017ff6:	d80a      	bhi.n	801800e <_printf_i+0x32>
 8017ff8:	2f00      	cmp	r7, #0
 8017ffa:	f000 80d2 	beq.w	80181a2 <_printf_i+0x1c6>
 8017ffe:	2f58      	cmp	r7, #88	@ 0x58
 8018000:	f000 80b9 	beq.w	8018176 <_printf_i+0x19a>
 8018004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018008:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801800c:	e03a      	b.n	8018084 <_printf_i+0xa8>
 801800e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018012:	2b15      	cmp	r3, #21
 8018014:	d8f6      	bhi.n	8018004 <_printf_i+0x28>
 8018016:	a101      	add	r1, pc, #4	@ (adr r1, 801801c <_printf_i+0x40>)
 8018018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801801c:	08018075 	.word	0x08018075
 8018020:	08018089 	.word	0x08018089
 8018024:	08018005 	.word	0x08018005
 8018028:	08018005 	.word	0x08018005
 801802c:	08018005 	.word	0x08018005
 8018030:	08018005 	.word	0x08018005
 8018034:	08018089 	.word	0x08018089
 8018038:	08018005 	.word	0x08018005
 801803c:	08018005 	.word	0x08018005
 8018040:	08018005 	.word	0x08018005
 8018044:	08018005 	.word	0x08018005
 8018048:	08018189 	.word	0x08018189
 801804c:	080180b3 	.word	0x080180b3
 8018050:	08018143 	.word	0x08018143
 8018054:	08018005 	.word	0x08018005
 8018058:	08018005 	.word	0x08018005
 801805c:	080181ab 	.word	0x080181ab
 8018060:	08018005 	.word	0x08018005
 8018064:	080180b3 	.word	0x080180b3
 8018068:	08018005 	.word	0x08018005
 801806c:	08018005 	.word	0x08018005
 8018070:	0801814b 	.word	0x0801814b
 8018074:	6833      	ldr	r3, [r6, #0]
 8018076:	1d1a      	adds	r2, r3, #4
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	6032      	str	r2, [r6, #0]
 801807c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018080:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018084:	2301      	movs	r3, #1
 8018086:	e09d      	b.n	80181c4 <_printf_i+0x1e8>
 8018088:	6833      	ldr	r3, [r6, #0]
 801808a:	6820      	ldr	r0, [r4, #0]
 801808c:	1d19      	adds	r1, r3, #4
 801808e:	6031      	str	r1, [r6, #0]
 8018090:	0606      	lsls	r6, r0, #24
 8018092:	d501      	bpl.n	8018098 <_printf_i+0xbc>
 8018094:	681d      	ldr	r5, [r3, #0]
 8018096:	e003      	b.n	80180a0 <_printf_i+0xc4>
 8018098:	0645      	lsls	r5, r0, #25
 801809a:	d5fb      	bpl.n	8018094 <_printf_i+0xb8>
 801809c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80180a0:	2d00      	cmp	r5, #0
 80180a2:	da03      	bge.n	80180ac <_printf_i+0xd0>
 80180a4:	232d      	movs	r3, #45	@ 0x2d
 80180a6:	426d      	negs	r5, r5
 80180a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80180ac:	4859      	ldr	r0, [pc, #356]	@ (8018214 <_printf_i+0x238>)
 80180ae:	230a      	movs	r3, #10
 80180b0:	e011      	b.n	80180d6 <_printf_i+0xfa>
 80180b2:	6821      	ldr	r1, [r4, #0]
 80180b4:	6833      	ldr	r3, [r6, #0]
 80180b6:	0608      	lsls	r0, r1, #24
 80180b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80180bc:	d402      	bmi.n	80180c4 <_printf_i+0xe8>
 80180be:	0649      	lsls	r1, r1, #25
 80180c0:	bf48      	it	mi
 80180c2:	b2ad      	uxthmi	r5, r5
 80180c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80180c6:	4853      	ldr	r0, [pc, #332]	@ (8018214 <_printf_i+0x238>)
 80180c8:	6033      	str	r3, [r6, #0]
 80180ca:	bf14      	ite	ne
 80180cc:	230a      	movne	r3, #10
 80180ce:	2308      	moveq	r3, #8
 80180d0:	2100      	movs	r1, #0
 80180d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80180d6:	6866      	ldr	r6, [r4, #4]
 80180d8:	60a6      	str	r6, [r4, #8]
 80180da:	2e00      	cmp	r6, #0
 80180dc:	bfa2      	ittt	ge
 80180de:	6821      	ldrge	r1, [r4, #0]
 80180e0:	f021 0104 	bicge.w	r1, r1, #4
 80180e4:	6021      	strge	r1, [r4, #0]
 80180e6:	b90d      	cbnz	r5, 80180ec <_printf_i+0x110>
 80180e8:	2e00      	cmp	r6, #0
 80180ea:	d04b      	beq.n	8018184 <_printf_i+0x1a8>
 80180ec:	4616      	mov	r6, r2
 80180ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80180f2:	fb03 5711 	mls	r7, r3, r1, r5
 80180f6:	5dc7      	ldrb	r7, [r0, r7]
 80180f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80180fc:	462f      	mov	r7, r5
 80180fe:	42bb      	cmp	r3, r7
 8018100:	460d      	mov	r5, r1
 8018102:	d9f4      	bls.n	80180ee <_printf_i+0x112>
 8018104:	2b08      	cmp	r3, #8
 8018106:	d10b      	bne.n	8018120 <_printf_i+0x144>
 8018108:	6823      	ldr	r3, [r4, #0]
 801810a:	07df      	lsls	r7, r3, #31
 801810c:	d508      	bpl.n	8018120 <_printf_i+0x144>
 801810e:	6923      	ldr	r3, [r4, #16]
 8018110:	6861      	ldr	r1, [r4, #4]
 8018112:	4299      	cmp	r1, r3
 8018114:	bfde      	ittt	le
 8018116:	2330      	movle	r3, #48	@ 0x30
 8018118:	f806 3c01 	strble.w	r3, [r6, #-1]
 801811c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018120:	1b92      	subs	r2, r2, r6
 8018122:	6122      	str	r2, [r4, #16]
 8018124:	f8cd a000 	str.w	sl, [sp]
 8018128:	464b      	mov	r3, r9
 801812a:	aa03      	add	r2, sp, #12
 801812c:	4621      	mov	r1, r4
 801812e:	4640      	mov	r0, r8
 8018130:	f7ff fee6 	bl	8017f00 <_printf_common>
 8018134:	3001      	adds	r0, #1
 8018136:	d14a      	bne.n	80181ce <_printf_i+0x1f2>
 8018138:	f04f 30ff 	mov.w	r0, #4294967295
 801813c:	b004      	add	sp, #16
 801813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018142:	6823      	ldr	r3, [r4, #0]
 8018144:	f043 0320 	orr.w	r3, r3, #32
 8018148:	6023      	str	r3, [r4, #0]
 801814a:	4833      	ldr	r0, [pc, #204]	@ (8018218 <_printf_i+0x23c>)
 801814c:	2778      	movs	r7, #120	@ 0x78
 801814e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018152:	6823      	ldr	r3, [r4, #0]
 8018154:	6831      	ldr	r1, [r6, #0]
 8018156:	061f      	lsls	r7, r3, #24
 8018158:	f851 5b04 	ldr.w	r5, [r1], #4
 801815c:	d402      	bmi.n	8018164 <_printf_i+0x188>
 801815e:	065f      	lsls	r7, r3, #25
 8018160:	bf48      	it	mi
 8018162:	b2ad      	uxthmi	r5, r5
 8018164:	6031      	str	r1, [r6, #0]
 8018166:	07d9      	lsls	r1, r3, #31
 8018168:	bf44      	itt	mi
 801816a:	f043 0320 	orrmi.w	r3, r3, #32
 801816e:	6023      	strmi	r3, [r4, #0]
 8018170:	b11d      	cbz	r5, 801817a <_printf_i+0x19e>
 8018172:	2310      	movs	r3, #16
 8018174:	e7ac      	b.n	80180d0 <_printf_i+0xf4>
 8018176:	4827      	ldr	r0, [pc, #156]	@ (8018214 <_printf_i+0x238>)
 8018178:	e7e9      	b.n	801814e <_printf_i+0x172>
 801817a:	6823      	ldr	r3, [r4, #0]
 801817c:	f023 0320 	bic.w	r3, r3, #32
 8018180:	6023      	str	r3, [r4, #0]
 8018182:	e7f6      	b.n	8018172 <_printf_i+0x196>
 8018184:	4616      	mov	r6, r2
 8018186:	e7bd      	b.n	8018104 <_printf_i+0x128>
 8018188:	6833      	ldr	r3, [r6, #0]
 801818a:	6825      	ldr	r5, [r4, #0]
 801818c:	6961      	ldr	r1, [r4, #20]
 801818e:	1d18      	adds	r0, r3, #4
 8018190:	6030      	str	r0, [r6, #0]
 8018192:	062e      	lsls	r6, r5, #24
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	d501      	bpl.n	801819c <_printf_i+0x1c0>
 8018198:	6019      	str	r1, [r3, #0]
 801819a:	e002      	b.n	80181a2 <_printf_i+0x1c6>
 801819c:	0668      	lsls	r0, r5, #25
 801819e:	d5fb      	bpl.n	8018198 <_printf_i+0x1bc>
 80181a0:	8019      	strh	r1, [r3, #0]
 80181a2:	2300      	movs	r3, #0
 80181a4:	6123      	str	r3, [r4, #16]
 80181a6:	4616      	mov	r6, r2
 80181a8:	e7bc      	b.n	8018124 <_printf_i+0x148>
 80181aa:	6833      	ldr	r3, [r6, #0]
 80181ac:	1d1a      	adds	r2, r3, #4
 80181ae:	6032      	str	r2, [r6, #0]
 80181b0:	681e      	ldr	r6, [r3, #0]
 80181b2:	6862      	ldr	r2, [r4, #4]
 80181b4:	2100      	movs	r1, #0
 80181b6:	4630      	mov	r0, r6
 80181b8:	f7e8 f8aa 	bl	8000310 <memchr>
 80181bc:	b108      	cbz	r0, 80181c2 <_printf_i+0x1e6>
 80181be:	1b80      	subs	r0, r0, r6
 80181c0:	6060      	str	r0, [r4, #4]
 80181c2:	6863      	ldr	r3, [r4, #4]
 80181c4:	6123      	str	r3, [r4, #16]
 80181c6:	2300      	movs	r3, #0
 80181c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80181cc:	e7aa      	b.n	8018124 <_printf_i+0x148>
 80181ce:	6923      	ldr	r3, [r4, #16]
 80181d0:	4632      	mov	r2, r6
 80181d2:	4649      	mov	r1, r9
 80181d4:	4640      	mov	r0, r8
 80181d6:	47d0      	blx	sl
 80181d8:	3001      	adds	r0, #1
 80181da:	d0ad      	beq.n	8018138 <_printf_i+0x15c>
 80181dc:	6823      	ldr	r3, [r4, #0]
 80181de:	079b      	lsls	r3, r3, #30
 80181e0:	d413      	bmi.n	801820a <_printf_i+0x22e>
 80181e2:	68e0      	ldr	r0, [r4, #12]
 80181e4:	9b03      	ldr	r3, [sp, #12]
 80181e6:	4298      	cmp	r0, r3
 80181e8:	bfb8      	it	lt
 80181ea:	4618      	movlt	r0, r3
 80181ec:	e7a6      	b.n	801813c <_printf_i+0x160>
 80181ee:	2301      	movs	r3, #1
 80181f0:	4632      	mov	r2, r6
 80181f2:	4649      	mov	r1, r9
 80181f4:	4640      	mov	r0, r8
 80181f6:	47d0      	blx	sl
 80181f8:	3001      	adds	r0, #1
 80181fa:	d09d      	beq.n	8018138 <_printf_i+0x15c>
 80181fc:	3501      	adds	r5, #1
 80181fe:	68e3      	ldr	r3, [r4, #12]
 8018200:	9903      	ldr	r1, [sp, #12]
 8018202:	1a5b      	subs	r3, r3, r1
 8018204:	42ab      	cmp	r3, r5
 8018206:	dcf2      	bgt.n	80181ee <_printf_i+0x212>
 8018208:	e7eb      	b.n	80181e2 <_printf_i+0x206>
 801820a:	2500      	movs	r5, #0
 801820c:	f104 0619 	add.w	r6, r4, #25
 8018210:	e7f5      	b.n	80181fe <_printf_i+0x222>
 8018212:	bf00      	nop
 8018214:	08019045 	.word	0x08019045
 8018218:	08019056 	.word	0x08019056

0801821c <__swbuf_r>:
 801821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801821e:	460e      	mov	r6, r1
 8018220:	4614      	mov	r4, r2
 8018222:	4605      	mov	r5, r0
 8018224:	b118      	cbz	r0, 801822e <__swbuf_r+0x12>
 8018226:	6a03      	ldr	r3, [r0, #32]
 8018228:	b90b      	cbnz	r3, 801822e <__swbuf_r+0x12>
 801822a:	f7fe f9ef 	bl	801660c <__sinit>
 801822e:	69a3      	ldr	r3, [r4, #24]
 8018230:	60a3      	str	r3, [r4, #8]
 8018232:	89a3      	ldrh	r3, [r4, #12]
 8018234:	071a      	lsls	r2, r3, #28
 8018236:	d501      	bpl.n	801823c <__swbuf_r+0x20>
 8018238:	6923      	ldr	r3, [r4, #16]
 801823a:	b943      	cbnz	r3, 801824e <__swbuf_r+0x32>
 801823c:	4621      	mov	r1, r4
 801823e:	4628      	mov	r0, r5
 8018240:	f000 f82a 	bl	8018298 <__swsetup_r>
 8018244:	b118      	cbz	r0, 801824e <__swbuf_r+0x32>
 8018246:	f04f 37ff 	mov.w	r7, #4294967295
 801824a:	4638      	mov	r0, r7
 801824c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801824e:	6823      	ldr	r3, [r4, #0]
 8018250:	6922      	ldr	r2, [r4, #16]
 8018252:	1a98      	subs	r0, r3, r2
 8018254:	6963      	ldr	r3, [r4, #20]
 8018256:	b2f6      	uxtb	r6, r6
 8018258:	4283      	cmp	r3, r0
 801825a:	4637      	mov	r7, r6
 801825c:	dc05      	bgt.n	801826a <__swbuf_r+0x4e>
 801825e:	4621      	mov	r1, r4
 8018260:	4628      	mov	r0, r5
 8018262:	f7ff fc81 	bl	8017b68 <_fflush_r>
 8018266:	2800      	cmp	r0, #0
 8018268:	d1ed      	bne.n	8018246 <__swbuf_r+0x2a>
 801826a:	68a3      	ldr	r3, [r4, #8]
 801826c:	3b01      	subs	r3, #1
 801826e:	60a3      	str	r3, [r4, #8]
 8018270:	6823      	ldr	r3, [r4, #0]
 8018272:	1c5a      	adds	r2, r3, #1
 8018274:	6022      	str	r2, [r4, #0]
 8018276:	701e      	strb	r6, [r3, #0]
 8018278:	6962      	ldr	r2, [r4, #20]
 801827a:	1c43      	adds	r3, r0, #1
 801827c:	429a      	cmp	r2, r3
 801827e:	d004      	beq.n	801828a <__swbuf_r+0x6e>
 8018280:	89a3      	ldrh	r3, [r4, #12]
 8018282:	07db      	lsls	r3, r3, #31
 8018284:	d5e1      	bpl.n	801824a <__swbuf_r+0x2e>
 8018286:	2e0a      	cmp	r6, #10
 8018288:	d1df      	bne.n	801824a <__swbuf_r+0x2e>
 801828a:	4621      	mov	r1, r4
 801828c:	4628      	mov	r0, r5
 801828e:	f7ff fc6b 	bl	8017b68 <_fflush_r>
 8018292:	2800      	cmp	r0, #0
 8018294:	d0d9      	beq.n	801824a <__swbuf_r+0x2e>
 8018296:	e7d6      	b.n	8018246 <__swbuf_r+0x2a>

08018298 <__swsetup_r>:
 8018298:	b538      	push	{r3, r4, r5, lr}
 801829a:	4b29      	ldr	r3, [pc, #164]	@ (8018340 <__swsetup_r+0xa8>)
 801829c:	4605      	mov	r5, r0
 801829e:	6818      	ldr	r0, [r3, #0]
 80182a0:	460c      	mov	r4, r1
 80182a2:	b118      	cbz	r0, 80182ac <__swsetup_r+0x14>
 80182a4:	6a03      	ldr	r3, [r0, #32]
 80182a6:	b90b      	cbnz	r3, 80182ac <__swsetup_r+0x14>
 80182a8:	f7fe f9b0 	bl	801660c <__sinit>
 80182ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182b0:	0719      	lsls	r1, r3, #28
 80182b2:	d422      	bmi.n	80182fa <__swsetup_r+0x62>
 80182b4:	06da      	lsls	r2, r3, #27
 80182b6:	d407      	bmi.n	80182c8 <__swsetup_r+0x30>
 80182b8:	2209      	movs	r2, #9
 80182ba:	602a      	str	r2, [r5, #0]
 80182bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80182c0:	81a3      	strh	r3, [r4, #12]
 80182c2:	f04f 30ff 	mov.w	r0, #4294967295
 80182c6:	e033      	b.n	8018330 <__swsetup_r+0x98>
 80182c8:	0758      	lsls	r0, r3, #29
 80182ca:	d512      	bpl.n	80182f2 <__swsetup_r+0x5a>
 80182cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80182ce:	b141      	cbz	r1, 80182e2 <__swsetup_r+0x4a>
 80182d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80182d4:	4299      	cmp	r1, r3
 80182d6:	d002      	beq.n	80182de <__swsetup_r+0x46>
 80182d8:	4628      	mov	r0, r5
 80182da:	f7fe fac1 	bl	8016860 <_free_r>
 80182de:	2300      	movs	r3, #0
 80182e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80182e2:	89a3      	ldrh	r3, [r4, #12]
 80182e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80182e8:	81a3      	strh	r3, [r4, #12]
 80182ea:	2300      	movs	r3, #0
 80182ec:	6063      	str	r3, [r4, #4]
 80182ee:	6923      	ldr	r3, [r4, #16]
 80182f0:	6023      	str	r3, [r4, #0]
 80182f2:	89a3      	ldrh	r3, [r4, #12]
 80182f4:	f043 0308 	orr.w	r3, r3, #8
 80182f8:	81a3      	strh	r3, [r4, #12]
 80182fa:	6923      	ldr	r3, [r4, #16]
 80182fc:	b94b      	cbnz	r3, 8018312 <__swsetup_r+0x7a>
 80182fe:	89a3      	ldrh	r3, [r4, #12]
 8018300:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018308:	d003      	beq.n	8018312 <__swsetup_r+0x7a>
 801830a:	4621      	mov	r1, r4
 801830c:	4628      	mov	r0, r5
 801830e:	f000 f883 	bl	8018418 <__smakebuf_r>
 8018312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018316:	f013 0201 	ands.w	r2, r3, #1
 801831a:	d00a      	beq.n	8018332 <__swsetup_r+0x9a>
 801831c:	2200      	movs	r2, #0
 801831e:	60a2      	str	r2, [r4, #8]
 8018320:	6962      	ldr	r2, [r4, #20]
 8018322:	4252      	negs	r2, r2
 8018324:	61a2      	str	r2, [r4, #24]
 8018326:	6922      	ldr	r2, [r4, #16]
 8018328:	b942      	cbnz	r2, 801833c <__swsetup_r+0xa4>
 801832a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801832e:	d1c5      	bne.n	80182bc <__swsetup_r+0x24>
 8018330:	bd38      	pop	{r3, r4, r5, pc}
 8018332:	0799      	lsls	r1, r3, #30
 8018334:	bf58      	it	pl
 8018336:	6962      	ldrpl	r2, [r4, #20]
 8018338:	60a2      	str	r2, [r4, #8]
 801833a:	e7f4      	b.n	8018326 <__swsetup_r+0x8e>
 801833c:	2000      	movs	r0, #0
 801833e:	e7f7      	b.n	8018330 <__swsetup_r+0x98>
 8018340:	24000260 	.word	0x24000260

08018344 <_raise_r>:
 8018344:	291f      	cmp	r1, #31
 8018346:	b538      	push	{r3, r4, r5, lr}
 8018348:	4605      	mov	r5, r0
 801834a:	460c      	mov	r4, r1
 801834c:	d904      	bls.n	8018358 <_raise_r+0x14>
 801834e:	2316      	movs	r3, #22
 8018350:	6003      	str	r3, [r0, #0]
 8018352:	f04f 30ff 	mov.w	r0, #4294967295
 8018356:	bd38      	pop	{r3, r4, r5, pc}
 8018358:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801835a:	b112      	cbz	r2, 8018362 <_raise_r+0x1e>
 801835c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018360:	b94b      	cbnz	r3, 8018376 <_raise_r+0x32>
 8018362:	4628      	mov	r0, r5
 8018364:	f000 f830 	bl	80183c8 <_getpid_r>
 8018368:	4622      	mov	r2, r4
 801836a:	4601      	mov	r1, r0
 801836c:	4628      	mov	r0, r5
 801836e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018372:	f000 b817 	b.w	80183a4 <_kill_r>
 8018376:	2b01      	cmp	r3, #1
 8018378:	d00a      	beq.n	8018390 <_raise_r+0x4c>
 801837a:	1c59      	adds	r1, r3, #1
 801837c:	d103      	bne.n	8018386 <_raise_r+0x42>
 801837e:	2316      	movs	r3, #22
 8018380:	6003      	str	r3, [r0, #0]
 8018382:	2001      	movs	r0, #1
 8018384:	e7e7      	b.n	8018356 <_raise_r+0x12>
 8018386:	2100      	movs	r1, #0
 8018388:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801838c:	4620      	mov	r0, r4
 801838e:	4798      	blx	r3
 8018390:	2000      	movs	r0, #0
 8018392:	e7e0      	b.n	8018356 <_raise_r+0x12>

08018394 <raise>:
 8018394:	4b02      	ldr	r3, [pc, #8]	@ (80183a0 <raise+0xc>)
 8018396:	4601      	mov	r1, r0
 8018398:	6818      	ldr	r0, [r3, #0]
 801839a:	f7ff bfd3 	b.w	8018344 <_raise_r>
 801839e:	bf00      	nop
 80183a0:	24000260 	.word	0x24000260

080183a4 <_kill_r>:
 80183a4:	b538      	push	{r3, r4, r5, lr}
 80183a6:	4d07      	ldr	r5, [pc, #28]	@ (80183c4 <_kill_r+0x20>)
 80183a8:	2300      	movs	r3, #0
 80183aa:	4604      	mov	r4, r0
 80183ac:	4608      	mov	r0, r1
 80183ae:	4611      	mov	r1, r2
 80183b0:	602b      	str	r3, [r5, #0]
 80183b2:	f7ec f8d5 	bl	8004560 <_kill>
 80183b6:	1c43      	adds	r3, r0, #1
 80183b8:	d102      	bne.n	80183c0 <_kill_r+0x1c>
 80183ba:	682b      	ldr	r3, [r5, #0]
 80183bc:	b103      	cbz	r3, 80183c0 <_kill_r+0x1c>
 80183be:	6023      	str	r3, [r4, #0]
 80183c0:	bd38      	pop	{r3, r4, r5, pc}
 80183c2:	bf00      	nop
 80183c4:	24005810 	.word	0x24005810

080183c8 <_getpid_r>:
 80183c8:	f7ec b8c2 	b.w	8004550 <_getpid>

080183cc <__swhatbuf_r>:
 80183cc:	b570      	push	{r4, r5, r6, lr}
 80183ce:	460c      	mov	r4, r1
 80183d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183d4:	2900      	cmp	r1, #0
 80183d6:	b096      	sub	sp, #88	@ 0x58
 80183d8:	4615      	mov	r5, r2
 80183da:	461e      	mov	r6, r3
 80183dc:	da0d      	bge.n	80183fa <__swhatbuf_r+0x2e>
 80183de:	89a3      	ldrh	r3, [r4, #12]
 80183e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80183e4:	f04f 0100 	mov.w	r1, #0
 80183e8:	bf14      	ite	ne
 80183ea:	2340      	movne	r3, #64	@ 0x40
 80183ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80183f0:	2000      	movs	r0, #0
 80183f2:	6031      	str	r1, [r6, #0]
 80183f4:	602b      	str	r3, [r5, #0]
 80183f6:	b016      	add	sp, #88	@ 0x58
 80183f8:	bd70      	pop	{r4, r5, r6, pc}
 80183fa:	466a      	mov	r2, sp
 80183fc:	f000 f848 	bl	8018490 <_fstat_r>
 8018400:	2800      	cmp	r0, #0
 8018402:	dbec      	blt.n	80183de <__swhatbuf_r+0x12>
 8018404:	9901      	ldr	r1, [sp, #4]
 8018406:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801840a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801840e:	4259      	negs	r1, r3
 8018410:	4159      	adcs	r1, r3
 8018412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018416:	e7eb      	b.n	80183f0 <__swhatbuf_r+0x24>

08018418 <__smakebuf_r>:
 8018418:	898b      	ldrh	r3, [r1, #12]
 801841a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801841c:	079d      	lsls	r5, r3, #30
 801841e:	4606      	mov	r6, r0
 8018420:	460c      	mov	r4, r1
 8018422:	d507      	bpl.n	8018434 <__smakebuf_r+0x1c>
 8018424:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018428:	6023      	str	r3, [r4, #0]
 801842a:	6123      	str	r3, [r4, #16]
 801842c:	2301      	movs	r3, #1
 801842e:	6163      	str	r3, [r4, #20]
 8018430:	b003      	add	sp, #12
 8018432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018434:	ab01      	add	r3, sp, #4
 8018436:	466a      	mov	r2, sp
 8018438:	f7ff ffc8 	bl	80183cc <__swhatbuf_r>
 801843c:	9f00      	ldr	r7, [sp, #0]
 801843e:	4605      	mov	r5, r0
 8018440:	4639      	mov	r1, r7
 8018442:	4630      	mov	r0, r6
 8018444:	f7fe fdb2 	bl	8016fac <_malloc_r>
 8018448:	b948      	cbnz	r0, 801845e <__smakebuf_r+0x46>
 801844a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801844e:	059a      	lsls	r2, r3, #22
 8018450:	d4ee      	bmi.n	8018430 <__smakebuf_r+0x18>
 8018452:	f023 0303 	bic.w	r3, r3, #3
 8018456:	f043 0302 	orr.w	r3, r3, #2
 801845a:	81a3      	strh	r3, [r4, #12]
 801845c:	e7e2      	b.n	8018424 <__smakebuf_r+0xc>
 801845e:	89a3      	ldrh	r3, [r4, #12]
 8018460:	6020      	str	r0, [r4, #0]
 8018462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018466:	81a3      	strh	r3, [r4, #12]
 8018468:	9b01      	ldr	r3, [sp, #4]
 801846a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801846e:	b15b      	cbz	r3, 8018488 <__smakebuf_r+0x70>
 8018470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018474:	4630      	mov	r0, r6
 8018476:	f000 f81d 	bl	80184b4 <_isatty_r>
 801847a:	b128      	cbz	r0, 8018488 <__smakebuf_r+0x70>
 801847c:	89a3      	ldrh	r3, [r4, #12]
 801847e:	f023 0303 	bic.w	r3, r3, #3
 8018482:	f043 0301 	orr.w	r3, r3, #1
 8018486:	81a3      	strh	r3, [r4, #12]
 8018488:	89a3      	ldrh	r3, [r4, #12]
 801848a:	431d      	orrs	r5, r3
 801848c:	81a5      	strh	r5, [r4, #12]
 801848e:	e7cf      	b.n	8018430 <__smakebuf_r+0x18>

08018490 <_fstat_r>:
 8018490:	b538      	push	{r3, r4, r5, lr}
 8018492:	4d07      	ldr	r5, [pc, #28]	@ (80184b0 <_fstat_r+0x20>)
 8018494:	2300      	movs	r3, #0
 8018496:	4604      	mov	r4, r0
 8018498:	4608      	mov	r0, r1
 801849a:	4611      	mov	r1, r2
 801849c:	602b      	str	r3, [r5, #0]
 801849e:	f7ec f8bf 	bl	8004620 <_fstat>
 80184a2:	1c43      	adds	r3, r0, #1
 80184a4:	d102      	bne.n	80184ac <_fstat_r+0x1c>
 80184a6:	682b      	ldr	r3, [r5, #0]
 80184a8:	b103      	cbz	r3, 80184ac <_fstat_r+0x1c>
 80184aa:	6023      	str	r3, [r4, #0]
 80184ac:	bd38      	pop	{r3, r4, r5, pc}
 80184ae:	bf00      	nop
 80184b0:	24005810 	.word	0x24005810

080184b4 <_isatty_r>:
 80184b4:	b538      	push	{r3, r4, r5, lr}
 80184b6:	4d06      	ldr	r5, [pc, #24]	@ (80184d0 <_isatty_r+0x1c>)
 80184b8:	2300      	movs	r3, #0
 80184ba:	4604      	mov	r4, r0
 80184bc:	4608      	mov	r0, r1
 80184be:	602b      	str	r3, [r5, #0]
 80184c0:	f7ec f8be 	bl	8004640 <_isatty>
 80184c4:	1c43      	adds	r3, r0, #1
 80184c6:	d102      	bne.n	80184ce <_isatty_r+0x1a>
 80184c8:	682b      	ldr	r3, [r5, #0]
 80184ca:	b103      	cbz	r3, 80184ce <_isatty_r+0x1a>
 80184cc:	6023      	str	r3, [r4, #0]
 80184ce:	bd38      	pop	{r3, r4, r5, pc}
 80184d0:	24005810 	.word	0x24005810
 80184d4:	00000000 	.word	0x00000000

080184d8 <log>:
 80184d8:	b4f0      	push	{r4, r5, r6, r7}
 80184da:	ee10 0a90 	vmov	r0, s1
 80184de:	ee10 3a10 	vmov	r3, s0
 80184e2:	f04f 34ff 	mov.w	r4, #4294967295
 80184e6:	429c      	cmp	r4, r3
 80184e8:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80184ec:	4c70      	ldr	r4, [pc, #448]	@ (80186b0 <log+0x1d8>)
 80184ee:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 80184f2:	418c      	sbcs	r4, r1
 80184f4:	ed2d 8b02 	vpush	{d8}
 80184f8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80184fc:	d35a      	bcc.n	80185b4 <log+0xdc>
 80184fe:	4a6d      	ldr	r2, [pc, #436]	@ (80186b4 <log+0x1dc>)
 8018500:	4290      	cmp	r0, r2
 8018502:	bf08      	it	eq
 8018504:	2b00      	cmpeq	r3, #0
 8018506:	f000 80c4 	beq.w	8018692 <log+0x1ba>
 801850a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801850e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018512:	4b69      	ldr	r3, [pc, #420]	@ (80186b8 <log+0x1e0>)
 8018514:	ee20 2b00 	vmul.f64	d2, d0, d0
 8018518:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801851c:	ee20 4b02 	vmul.f64	d4, d0, d2
 8018520:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8018524:	eea6 7b00 	vfma.f64	d7, d6, d0
 8018528:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 801852c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8018530:	eea6 7b02 	vfma.f64	d7, d6, d2
 8018534:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8018538:	eea5 6b00 	vfma.f64	d6, d5, d0
 801853c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8018540:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8018544:	eea5 6b02 	vfma.f64	d6, d5, d2
 8018548:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 801854c:	eea3 5b00 	vfma.f64	d5, d3, d0
 8018550:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8018554:	eea3 5b02 	vfma.f64	d5, d3, d2
 8018558:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 801855c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8018560:	eea5 6b04 	vfma.f64	d6, d5, d4
 8018564:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8018568:	eea6 7b04 	vfma.f64	d7, d6, d4
 801856c:	eeb0 2b47 	vmov.f64	d2, d7
 8018570:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8018698 <log+0x1c0>
 8018574:	eeb0 6b40 	vmov.f64	d6, d0
 8018578:	eeb0 3b40 	vmov.f64	d3, d0
 801857c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8018580:	eea0 6b47 	vfms.f64	d6, d0, d7
 8018584:	ee30 8b46 	vsub.f64	d8, d0, d6
 8018588:	ee26 1b06 	vmul.f64	d1, d6, d6
 801858c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8018590:	ee30 7b43 	vsub.f64	d7, d0, d3
 8018594:	ee30 0b06 	vadd.f64	d0, d0, d6
 8018598:	eea1 7b05 	vfma.f64	d7, d1, d5
 801859c:	ee25 5b08 	vmul.f64	d5, d5, d8
 80185a0:	eea5 7b00 	vfma.f64	d7, d5, d0
 80185a4:	eea2 7b04 	vfma.f64	d7, d2, d4
 80185a8:	ee33 0b07 	vadd.f64	d0, d3, d7
 80185ac:	ecbd 8b02 	vpop	{d8}
 80185b0:	bcf0      	pop	{r4, r5, r6, r7}
 80185b2:	4770      	bx	lr
 80185b4:	f1a2 0410 	sub.w	r4, r2, #16
 80185b8:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 80185bc:	428c      	cmp	r4, r1
 80185be:	d923      	bls.n	8018608 <log+0x130>
 80185c0:	18d9      	adds	r1, r3, r3
 80185c2:	eb40 0400 	adc.w	r4, r0, r0
 80185c6:	4321      	orrs	r1, r4
 80185c8:	d105      	bne.n	80185d6 <log+0xfe>
 80185ca:	ecbd 8b02 	vpop	{d8}
 80185ce:	2001      	movs	r0, #1
 80185d0:	bcf0      	pop	{r4, r5, r6, r7}
 80185d2:	f000 b885 	b.w	80186e0 <__math_divzero>
 80185d6:	4939      	ldr	r1, [pc, #228]	@ (80186bc <log+0x1e4>)
 80185d8:	4288      	cmp	r0, r1
 80185da:	bf08      	it	eq
 80185dc:	2b00      	cmpeq	r3, #0
 80185de:	d0e5      	beq.n	80185ac <log+0xd4>
 80185e0:	0413      	lsls	r3, r2, #16
 80185e2:	d403      	bmi.n	80185ec <log+0x114>
 80185e4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80185e8:	4393      	bics	r3, r2
 80185ea:	d104      	bne.n	80185f6 <log+0x11e>
 80185ec:	ecbd 8b02 	vpop	{d8}
 80185f0:	bcf0      	pop	{r4, r5, r6, r7}
 80185f2:	f000 b88d 	b.w	8018710 <__math_invalid>
 80185f6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80186a0 <log+0x1c8>
 80185fa:	ee20 7b07 	vmul.f64	d7, d0, d7
 80185fe:	ec53 2b17 	vmov	r2, r3, d7
 8018602:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8018606:	4613      	mov	r3, r2
 8018608:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 801860c:	492a      	ldr	r1, [pc, #168]	@ (80186b8 <log+0x1e0>)
 801860e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8018612:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8018616:	f3c2 3446 	ubfx	r4, r2, #13, #7
 801861a:	0d15      	lsrs	r5, r2, #20
 801861c:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8018620:	052d      	lsls	r5, r5, #20
 8018622:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8018626:	1e1e      	subs	r6, r3, #0
 8018628:	1b47      	subs	r7, r0, r5
 801862a:	ec47 6b16 	vmov	d6, r6, r7
 801862e:	1512      	asrs	r2, r2, #20
 8018630:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018634:	ee07 2a90 	vmov	s15, r2
 8018638:	ee25 2b05 	vmul.f64	d2, d5, d5
 801863c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8018640:	ed91 4b00 	vldr	d4, [r1]
 8018644:	ee25 1b02 	vmul.f64	d1, d5, d2
 8018648:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 801864c:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018650:	ee35 4b07 	vadd.f64	d4, d5, d7
 8018654:	ee37 0b44 	vsub.f64	d0, d7, d4
 8018658:	ed91 7b02 	vldr	d7, [r1, #8]
 801865c:	ee30 0b05 	vadd.f64	d0, d0, d5
 8018660:	eea7 0b06 	vfma.f64	d0, d7, d6
 8018664:	ed91 7b04 	vldr	d7, [r1, #16]
 8018668:	ed91 6b08 	vldr	d6, [r1, #32]
 801866c:	eea7 0b02 	vfma.f64	d0, d7, d2
 8018670:	ed91 7b06 	vldr	d7, [r1, #24]
 8018674:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8018678:	eea6 7b05 	vfma.f64	d7, d6, d5
 801867c:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8018680:	eea3 6b05 	vfma.f64	d6, d3, d5
 8018684:	eea6 7b02 	vfma.f64	d7, d6, d2
 8018688:	eea1 0b07 	vfma.f64	d0, d1, d7
 801868c:	ee30 0b04 	vadd.f64	d0, d0, d4
 8018690:	e78c      	b.n	80185ac <log+0xd4>
 8018692:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 80186a8 <log+0x1d0>
 8018696:	e789      	b.n	80185ac <log+0xd4>
 8018698:	00000000 	.word	0x00000000
 801869c:	41a00000 	.word	0x41a00000
 80186a0:	00000000 	.word	0x00000000
 80186a4:	43300000 	.word	0x43300000
	...
 80186b0:	000308ff 	.word	0x000308ff
 80186b4:	3ff00000 	.word	0x3ff00000
 80186b8:	08019068 	.word	0x08019068
 80186bc:	7ff00000 	.word	0x7ff00000

080186c0 <with_errno>:
 80186c0:	b510      	push	{r4, lr}
 80186c2:	ed2d 8b02 	vpush	{d8}
 80186c6:	eeb0 8b40 	vmov.f64	d8, d0
 80186ca:	4604      	mov	r4, r0
 80186cc:	f7fe f884 	bl	80167d8 <__errno>
 80186d0:	eeb0 0b48 	vmov.f64	d0, d8
 80186d4:	ecbd 8b02 	vpop	{d8}
 80186d8:	6004      	str	r4, [r0, #0]
 80186da:	bd10      	pop	{r4, pc}
 80186dc:	0000      	movs	r0, r0
	...

080186e0 <__math_divzero>:
 80186e0:	b082      	sub	sp, #8
 80186e2:	2800      	cmp	r0, #0
 80186e4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80186e8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80186ec:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80186f0:	ed8d 7b00 	vstr	d7, [sp]
 80186f4:	ed9d 0b00 	vldr	d0, [sp]
 80186f8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8018708 <__math_divzero+0x28>
 80186fc:	2022      	movs	r0, #34	@ 0x22
 80186fe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8018702:	b002      	add	sp, #8
 8018704:	f7ff bfdc 	b.w	80186c0 <with_errno>
	...

08018710 <__math_invalid>:
 8018710:	eeb0 7b40 	vmov.f64	d7, d0
 8018714:	eeb4 7b47 	vcmp.f64	d7, d7
 8018718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801871c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8018720:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8018724:	d602      	bvs.n	801872c <__math_invalid+0x1c>
 8018726:	2021      	movs	r0, #33	@ 0x21
 8018728:	f7ff bfca 	b.w	80186c0 <with_errno>
 801872c:	4770      	bx	lr
	...

08018730 <_init>:
 8018730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018732:	bf00      	nop
 8018734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018736:	bc08      	pop	{r3}
 8018738:	469e      	mov	lr, r3
 801873a:	4770      	bx	lr

0801873c <_fini>:
 801873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801873e:	bf00      	nop
 8018740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018742:	bc08      	pop	{r3}
 8018744:	469e      	mov	lr, r3
 8018746:	4770      	bx	lr
