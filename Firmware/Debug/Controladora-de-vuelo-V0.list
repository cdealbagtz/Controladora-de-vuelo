
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019640  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  080198f0  080198f0  0001a8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a680  0801a680  0001b680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a688  0801a688  0001b688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a68c  0801a68c  0001b68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000290  24000000  0801a690  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000065a4  24000290  0801a920  0001c290  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006834  0801a920  0001c834  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c290  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035376  00000000  00000000  0001c2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007c25  00000000  00000000  00051634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002938  00000000  00000000  00059260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fbb  00000000  00000000  0005bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d7e8  00000000  00000000  0005db53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00041534  00000000  00000000  0009b33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161634  00000000  00000000  000dc86f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023dea3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bb70  00000000  00000000  0023dee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00249a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000290 	.word	0x24000290
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080198d8 	.word	0x080198d8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000294 	.word	0x24000294
 80002ec:	080198d8 	.word	0x080198d8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <command_filtering>:
Servo_mgmt_s servo_outs ;
FilterState filters[4] = {{0.0f}, {0.0f}, {0.0f}, {0.0f}};


void command_filtering(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
	//
	commands_noise[0] = Command_out.roll   ;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <command_filtering+0xa4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a27      	ldr	r2, [pc, #156]	@ (8000bd0 <command_filtering+0xa8>)
 8000b34:	6013      	str	r3, [r2, #0]
	commands_noise[1] = Command_out.pitch  ;
 8000b36:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <command_filtering+0xa4>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	4a25      	ldr	r2, [pc, #148]	@ (8000bd0 <command_filtering+0xa8>)
 8000b3c:	6053      	str	r3, [r2, #4]
	commands_noise[2] = Command_out.yaw    ;
 8000b3e:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <command_filtering+0xa4>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	4a23      	ldr	r2, [pc, #140]	@ (8000bd0 <command_filtering+0xa8>)
 8000b44:	6093      	str	r3, [r2, #8]
	commands_noise[3] = Command_out.thrust ;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <command_filtering+0xa4>)
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	4a21      	ldr	r2, [pc, #132]	@ (8000bd0 <command_filtering+0xa8>)
 8000b4c:	60d3      	str	r3, [r2, #12]

	for(int idx = 0; idx < 4; idx++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	e023      	b.n	8000b9c <command_filtering+0x74>
	{
		//
		ouput_fltr[idx] = filter_step(&filters[idx], commands_noise[idx],COF_cmds[idx],SAMPLE_ATT) ;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd4 <command_filtering+0xac>)
 8000b5a:	441a      	add	r2, r3
 8000b5c:	491c      	ldr	r1, [pc, #112]	@ (8000bd0 <command_filtering+0xa8>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	440b      	add	r3, r1
 8000b64:	edd3 7a00 	vldr	s15, [r3]
 8000b68:	491b      	ldr	r1, [pc, #108]	@ (8000bd8 <command_filtering+0xb0>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	440b      	add	r3, r1
 8000b70:	ed93 7a00 	vldr	s14, [r3]
 8000b74:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8000bdc <command_filtering+0xb4>
 8000b78:	eef0 0a47 	vmov.f32	s1, s14
 8000b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b80:	4610      	mov	r0, r2
 8000b82:	f001 f959 	bl	8001e38 <filter_step>
 8000b86:	eef0 7a40 	vmov.f32	s15, s0
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <command_filtering+0xb8>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	edc3 7a00 	vstr	s15, [r3]
	for(int idx = 0; idx < 4; idx++)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	ddd8      	ble.n	8000b54 <command_filtering+0x2c>
	}
	//
	Commands.roll 		= 	ouput_fltr[0] ;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <command_filtering+0xb8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <command_filtering+0xbc>)
 8000ba8:	6013      	str	r3, [r2, #0]
	Commands.pitch 		= 	ouput_fltr[1] ;
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <command_filtering+0xb8>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <command_filtering+0xbc>)
 8000bb0:	6053      	str	r3, [r2, #4]
	Commands.yaw 		= 	ouput_fltr[2] ;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <command_filtering+0xb8>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000be4 <command_filtering+0xbc>)
 8000bb8:	6093      	str	r3, [r2, #8]
	Commands.thrust 	= 	ouput_fltr[3] ;
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <command_filtering+0xb8>)
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	4a09      	ldr	r2, [pc, #36]	@ (8000be4 <command_filtering+0xbc>)
 8000bc0:	60d3      	str	r3, [r2, #12]


}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	240002b0 	.word	0x240002b0
 8000bd0:	240002e0 	.word	0x240002e0
 8000bd4:	24000330 	.word	0x24000330
 8000bd8:	24000300 	.word	0x24000300
 8000bdc:	3c23d70a 	.word	0x3c23d70a
 8000be0:	240002f0 	.word	0x240002f0
 8000be4:	240002d0 	.word	0x240002d0

08000be8 <control_allocator>:

void control_allocator(Cmd_s control_cmd, Cmd_s trims )
{
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	b093      	sub	sp, #76	@ 0x4c
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	eeb0 4a40 	vmov.f32	s8, s0
 8000bf2:	eef0 4a60 	vmov.f32	s9, s1
 8000bf6:	eeb0 5a41 	vmov.f32	s10, s2
 8000bfa:	eef0 5a61 	vmov.f32	s11, s3
 8000bfe:	eeb0 6a42 	vmov.f32	s12, s4
 8000c02:	eef0 6a62 	vmov.f32	s13, s5
 8000c06:	eeb0 7a43 	vmov.f32	s14, s6
 8000c0a:	eef0 7a63 	vmov.f32	s15, s7
 8000c0e:	ed87 4a0a 	vstr	s8, [r7, #40]	@ 0x28
 8000c12:	edc7 4a0b 	vstr	s9, [r7, #44]	@ 0x2c
 8000c16:	ed87 5a0c 	vstr	s10, [r7, #48]	@ 0x30
 8000c1a:	edc7 5a0d 	vstr	s11, [r7, #52]	@ 0x34
 8000c1e:	ed87 6a06 	vstr	s12, [r7, #24]
 8000c22:	edc7 6a07 	vstr	s13, [r7, #28]
 8000c26:	ed87 7a08 	vstr	s14, [r7, #32]
 8000c2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	//
	Frame = CONFIGURATION;
 8000c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8000e20 <control_allocator+0x238>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]


	switch(Frame){
 8000c34:	4b7a      	ldr	r3, [pc, #488]	@ (8000e20 <control_allocator+0x238>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	f200 80c3 	bhi.w	8000dc4 <control_allocator+0x1dc>
 8000c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c44 <control_allocator+0x5c>)
 8000c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c44:	08000c55 	.word	0x08000c55
 8000c48:	08000cb1 	.word	0x08000cb1
 8000c4c:	08000d0d 	.word	0x08000d0d
 8000c50:	08000d69 	.word	0x08000d69
		case FIX_WING:
			servo_outs = FIX_WING_MIXER(control_cmd, trims)     ;
 8000c54:	4c73      	ldr	r4, [pc, #460]	@ (8000e24 <control_allocator+0x23c>)
 8000c56:	463b      	mov	r3, r7
 8000c58:	ed97 4a06 	vldr	s8, [r7, #24]
 8000c5c:	edd7 4a07 	vldr	s9, [r7, #28]
 8000c60:	ed97 5a08 	vldr	s10, [r7, #32]
 8000c64:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000c68:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000c6c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000c70:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000c74:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c78:	eeb0 2a44 	vmov.f32	s4, s8
 8000c7c:	eef0 2a64 	vmov.f32	s5, s9
 8000c80:	eeb0 3a45 	vmov.f32	s6, s10
 8000c84:	eef0 3a65 	vmov.f32	s7, s11
 8000c88:	eeb0 0a46 	vmov.f32	s0, s12
 8000c8c:	eef0 0a66 	vmov.f32	s1, s13
 8000c90:	eeb0 1a47 	vmov.f32	s2, s14
 8000c94:	eef0 1a67 	vmov.f32	s3, s15
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 fb87 	bl	80013ac <FIX_WING_MIXER>
 8000c9e:	463d      	mov	r5, r7
 8000ca0:	6828      	ldr	r0, [r5, #0]
 8000ca2:	6869      	ldr	r1, [r5, #4]
 8000ca4:	68aa      	ldr	r2, [r5, #8]
 8000ca6:	68eb      	ldr	r3, [r5, #12]
 8000ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000caa:	6928      	ldr	r0, [r5, #16]
 8000cac:	6020      	str	r0, [r4, #0]
			break;
 8000cae:	e098      	b.n	8000de2 <control_allocator+0x1fa>
		case FLYING_WING:
			servo_outs = FLYING_WING_MIXER(control_cmd, trims)  ;
 8000cb0:	4c5c      	ldr	r4, [pc, #368]	@ (8000e24 <control_allocator+0x23c>)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	ed97 4a06 	vldr	s8, [r7, #24]
 8000cb8:	edd7 4a07 	vldr	s9, [r7, #28]
 8000cbc:	ed97 5a08 	vldr	s10, [r7, #32]
 8000cc0:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000cc4:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000cc8:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000ccc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000cd0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000cd4:	eeb0 2a44 	vmov.f32	s4, s8
 8000cd8:	eef0 2a64 	vmov.f32	s5, s9
 8000cdc:	eeb0 3a45 	vmov.f32	s6, s10
 8000ce0:	eef0 3a65 	vmov.f32	s7, s11
 8000ce4:	eeb0 0a46 	vmov.f32	s0, s12
 8000ce8:	eef0 0a66 	vmov.f32	s1, s13
 8000cec:	eeb0 1a47 	vmov.f32	s2, s14
 8000cf0:	eef0 1a67 	vmov.f32	s3, s15
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fc29 	bl	800154c <FLYING_WING_MIXER>
 8000cfa:	463d      	mov	r5, r7
 8000cfc:	6828      	ldr	r0, [r5, #0]
 8000cfe:	6869      	ldr	r1, [r5, #4]
 8000d00:	68aa      	ldr	r2, [r5, #8]
 8000d02:	68eb      	ldr	r3, [r5, #12]
 8000d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d06:	6928      	ldr	r0, [r5, #16]
 8000d08:	6020      	str	r0, [r4, #0]
			break;
 8000d0a:	e06a      	b.n	8000de2 <control_allocator+0x1fa>
		case TANDEM_WING:
			servo_outs = TANDEM_WING_MIXER(control_cmd, trims)  ;
 8000d0c:	4c45      	ldr	r4, [pc, #276]	@ (8000e24 <control_allocator+0x23c>)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	ed97 4a06 	vldr	s8, [r7, #24]
 8000d14:	edd7 4a07 	vldr	s9, [r7, #28]
 8000d18:	ed97 5a08 	vldr	s10, [r7, #32]
 8000d1c:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000d20:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000d24:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000d28:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000d2c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000d30:	eeb0 2a44 	vmov.f32	s4, s8
 8000d34:	eef0 2a64 	vmov.f32	s5, s9
 8000d38:	eeb0 3a45 	vmov.f32	s6, s10
 8000d3c:	eef0 3a65 	vmov.f32	s7, s11
 8000d40:	eeb0 0a46 	vmov.f32	s0, s12
 8000d44:	eef0 0a66 	vmov.f32	s1, s13
 8000d48:	eeb0 1a47 	vmov.f32	s2, s14
 8000d4c:	eef0 1a67 	vmov.f32	s3, s15
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fce7 	bl	8001724 <TANDEM_WING_MIXER>
 8000d56:	463d      	mov	r5, r7
 8000d58:	6828      	ldr	r0, [r5, #0]
 8000d5a:	6869      	ldr	r1, [r5, #4]
 8000d5c:	68aa      	ldr	r2, [r5, #8]
 8000d5e:	68eb      	ldr	r3, [r5, #12]
 8000d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d62:	6928      	ldr	r0, [r5, #16]
 8000d64:	6020      	str	r0, [r4, #0]
			break;
 8000d66:	e03c      	b.n	8000de2 <control_allocator+0x1fa>
		case CUSTOM_FRAME:
			servo_outs = CUSTOM_FRAME_MIXER(control_cmd, trims) ;
 8000d68:	4c2e      	ldr	r4, [pc, #184]	@ (8000e24 <control_allocator+0x23c>)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	ed97 4a06 	vldr	s8, [r7, #24]
 8000d70:	edd7 4a07 	vldr	s9, [r7, #28]
 8000d74:	ed97 5a08 	vldr	s10, [r7, #32]
 8000d78:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8000d7c:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8000d80:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000d84:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000d88:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000d8c:	eeb0 2a44 	vmov.f32	s4, s8
 8000d90:	eef0 2a64 	vmov.f32	s5, s9
 8000d94:	eeb0 3a45 	vmov.f32	s6, s10
 8000d98:	eef0 3a65 	vmov.f32	s7, s11
 8000d9c:	eeb0 0a46 	vmov.f32	s0, s12
 8000da0:	eef0 0a66 	vmov.f32	s1, s13
 8000da4:	eeb0 1a47 	vmov.f32	s2, s14
 8000da8:	eef0 1a67 	vmov.f32	s3, s15
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fda5 	bl	80018fc <CUSTOM_FRAME_MIXER>
 8000db2:	463d      	mov	r5, r7
 8000db4:	6828      	ldr	r0, [r5, #0]
 8000db6:	6869      	ldr	r1, [r5, #4]
 8000db8:	68aa      	ldr	r2, [r5, #8]
 8000dba:	68eb      	ldr	r3, [r5, #12]
 8000dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbe:	6928      	ldr	r0, [r5, #16]
 8000dc0:	6020      	str	r0, [r4, #0]
			break;
 8000dc2:	e00e      	b.n	8000de2 <control_allocator+0x1fa>
		default:

			for(int i = 0; i < 10; i++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000dc8:	e008      	b.n	8000ddc <control_allocator+0x1f4>
			{
				//
				servo_outs.S[i] = 1500 ;
 8000dca:	4a16      	ldr	r2, [pc, #88]	@ (8000e24 <control_allocator+0x23c>)
 8000dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dce:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000dd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 10; i++)
 8000dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dd8:	3301      	adds	r3, #1
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dde:	2b09      	cmp	r3, #9
 8000de0:	ddf3      	ble.n	8000dca <control_allocator+0x1e2>
			}

		}

	PWM_Output = reverse_servos(servo_outs );
 8000de2:	4e11      	ldr	r6, [pc, #68]	@ (8000e28 <control_allocator+0x240>)
 8000de4:	463c      	mov	r4, r7
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <control_allocator+0x23c>)
 8000de8:	466d      	mov	r5, sp
 8000dea:	f103 020c 	add.w	r2, r3, #12
 8000dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000df6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f000 f835 	bl	8000e68 <reverse_servos>
 8000dfe:	4632      	mov	r2, r6
 8000e00:	463b      	mov	r3, r7
 8000e02:	6819      	ldr	r1, [r3, #0]
 8000e04:	685d      	ldr	r5, [r3, #4]
 8000e06:	689c      	ldr	r4, [r3, #8]
 8000e08:	68d8      	ldr	r0, [r3, #12]
 8000e0a:	6011      	str	r1, [r2, #0]
 8000e0c:	6055      	str	r5, [r2, #4]
 8000e0e:	6094      	str	r4, [r2, #8]
 8000e10:	60d0      	str	r0, [r2, #12]
 8000e12:	6919      	ldr	r1, [r3, #16]
 8000e14:	6111      	str	r1, [r2, #16]
}
 8000e16:	bf00      	nop
 8000e18:	3744      	adds	r7, #68	@ 0x44
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	240002ac 	.word	0x240002ac
 8000e24:	2400031c 	.word	0x2400031c
 8000e28:	24000068 	.word	0x24000068

08000e2c <reverse_servo_value>:

uint16_t reverse_servo_value(uint16_t input)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
    // Asegurarnos que el valor esté dentro del rango válido
    if (input < 1000) input = 1000;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e3c:	d202      	bcs.n	8000e44 <reverse_servo_value+0x18>
 8000e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e42:	80fb      	strh	r3, [r7, #6]
    if (input > 2000) input = 2000;
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e4a:	d902      	bls.n	8000e52 <reverse_servo_value+0x26>
 8000e4c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e50:	80fb      	strh	r3, [r7, #6]

    // Calcular el valor invertido
    return 3000 - input;
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	f5c3 633b 	rsb	r3, r3, #2992	@ 0xbb0
 8000e58:	3308      	adds	r3, #8
 8000e5a:	b29b      	uxth	r3, r3
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <reverse_servos>:


Servo_mgmt_s reverse_servos(Servo_mgmt_s inputs )
{
 8000e68:	b084      	sub	sp, #16
 8000e6a:	b5b0      	push	{r4, r5, r7, lr}
 8000e6c:	b088      	sub	sp, #32
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//
	Servo_mgmt_s uotputs;

	for(int i = 0; i < 10; i++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e024      	b.n	8000eca <reverse_servos+0x62>
	{
		//
		if (Reverse.S[i])
 8000e80:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef4 <reverse_servos+0x8c>)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	4413      	add	r3, r2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d010      	beq.n	8000eae <reverse_servos+0x46>
		{
			//
			uotputs.S[i] = reverse_servo_value(inputs.S[i]);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	3330      	adds	r3, #48	@ 0x30
 8000e92:	443b      	add	r3, r7
 8000e94:	889b      	ldrh	r3, [r3, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ffc8 	bl	8000e2c <reverse_servo_value>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	3320      	adds	r3, #32
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f823 2c18 	strh.w	r2, [r3, #-24]
 8000eac:	e00a      	b.n	8000ec4 <reverse_servos+0x5c>
		}
		else
		{
			//
			uotputs.S[i] = inputs.S[i];
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	3330      	adds	r3, #48	@ 0x30
 8000eb4:	443b      	add	r3, r7
 8000eb6:	889a      	ldrh	r2, [r3, #4]
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	3320      	adds	r3, #32
 8000ebe:	443b      	add	r3, r7
 8000ec0:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i = 0; i < 10; i++)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	61fb      	str	r3, [r7, #28]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	2b09      	cmp	r3, #9
 8000ece:	ddd7      	ble.n	8000e80 <reverse_servos+0x18>
		}
	}

	return uotputs;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	f107 0408 	add.w	r4, r7, #8
 8000ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eda:	6028      	str	r0, [r5, #0]
 8000edc:	6069      	str	r1, [r5, #4]
 8000ede:	60aa      	str	r2, [r5, #8]
 8000ee0:	60eb      	str	r3, [r5, #12]
 8000ee2:	6820      	ldr	r0, [r4, #0]
 8000ee4:	6128      	str	r0, [r5, #16]
}
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	3720      	adds	r7, #32
 8000eea:	46bd      	mov	sp, r7
 8000eec:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ef0:	b004      	add	sp, #16
 8000ef2:	4770      	bx	lr
 8000ef4:	24000310 	.word	0x24000310

08000ef8 <get_commands_rc>:
    }
    return signal_out;
}

Cmd_s get_commands_rc(void)
{
 8000ef8:	b490      	push	{r4, r7}
 8000efa:	b08c      	sub	sp, #48	@ 0x30
 8000efc:	af00      	add	r7, sp, #0
	//
	Cmd_s out_norms;

	out_norms.roll 		= ((float)Radio_input.Canal_1 - 1500.0 ) / 500.0 ;
 8000efe:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff8 <get_commands_rc+0x100>)
 8000f00:	885b      	ldrh	r3, [r3, #2]
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f0e:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8000fe0 <get_commands_rc+0xe8>
 8000f12:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000f16:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8000fe8 <get_commands_rc+0xf0>
 8000f1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f22:	edc7 7a04 	vstr	s15, [r7, #16]

	out_norms.pitch 	= ((float)Radio_input.Canal_2 - 1500.0 ) / 500.0 ;
 8000f26:	4b34      	ldr	r3, [pc, #208]	@ (8000ff8 <get_commands_rc+0x100>)
 8000f28:	889b      	ldrh	r3, [r3, #4]
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f36:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8000fe0 <get_commands_rc+0xe8>
 8000f3a:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000f3e:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8000fe8 <get_commands_rc+0xf0>
 8000f42:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f4a:	edc7 7a05 	vstr	s15, [r7, #20]

	out_norms.yaw 		= ((float)Radio_input.Canal_3 - 1500.0 ) / 500.0 ;
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <get_commands_rc+0x100>)
 8000f50:	88db      	ldrh	r3, [r3, #6]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f5e:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000fe0 <get_commands_rc+0xe8>
 8000f62:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000f66:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8000fe8 <get_commands_rc+0xf0>
 8000f6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f72:	edc7 7a06 	vstr	s15, [r7, #24]

	out_norms.thrust 	= ((float)Radio_input.Canal_4 - 1000.0 ) / 1000.0 ;
 8000f76:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <get_commands_rc+0x100>)
 8000f78:	891b      	ldrh	r3, [r3, #8]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f86:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000ff0 <get_commands_rc+0xf8>
 8000f8a:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000f8e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8000ff0 <get_commands_rc+0xf8>
 8000f92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f9a:	edc7 7a07 	vstr	s15, [r7, #28]

	return out_norms;
 8000f9e:	f107 0420 	add.w	r4, r7, #32
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fac:	6a38      	ldr	r0, [r7, #32]
 8000fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb4:	ee06 0a10 	vmov	s12, r0
 8000fb8:	ee06 1a90 	vmov	s13, r1
 8000fbc:	ee07 2a10 	vmov	s14, r2
 8000fc0:	ee07 3a90 	vmov	s15, r3
}
 8000fc4:	eeb0 0a46 	vmov.f32	s0, s12
 8000fc8:	eef0 0a66 	vmov.f32	s1, s13
 8000fcc:	eeb0 1a47 	vmov.f32	s2, s14
 8000fd0:	eef0 1a67 	vmov.f32	s3, s15
 8000fd4:	3730      	adds	r7, #48	@ 0x30
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc90      	pop	{r4, r7}
 8000fda:	4770      	bx	lr
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	40977000 	.word	0x40977000
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	407f4000 	.word	0x407f4000
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	408f4000 	.word	0x408f4000
 8000ff8:	2400007c 	.word	0x2400007c

08000ffc <get_actual_trims>:

void get_actual_trims(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	//
	Trims.roll 		=  (float)Radio_input.Canal_10 - 1500.0 ;
 8001000:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <get_actual_trims+0x64>)
 8001002:	8a9b      	ldrh	r3, [r3, #20]
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001064 <get_actual_trims+0x68>
 8001010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <get_actual_trims+0x6c>)
 8001016:	edc3 7a00 	vstr	s15, [r3]
	Trims.pitch 	=  (float)Radio_input.Canal_11 - 1500.0 ;
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <get_actual_trims+0x64>)
 800101c:	8adb      	ldrh	r3, [r3, #22]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001026:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001064 <get_actual_trims+0x68>
 800102a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <get_actual_trims+0x6c>)
 8001030:	edc3 7a01 	vstr	s15, [r3, #4]
	Trims.yaw 		=  (float)Radio_input.Canal_12 - 1500.0 ;
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <get_actual_trims+0x64>)
 8001036:	8b1b      	ldrh	r3, [r3, #24]
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001040:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001064 <get_actual_trims+0x68>
 8001044:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001048:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <get_actual_trims+0x6c>)
 800104a:	edc3 7a02 	vstr	s15, [r3, #8]
	Trims.thrust 	=  0.0f ;
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <get_actual_trims+0x6c>)
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	2400007c 	.word	0x2400007c
 8001064:	44bb8000 	.word	0x44bb8000
 8001068:	240002c0 	.word	0x240002c0

0800106c <init_Reverse_Servos>:


void init_Reverse_Servos(Servo_reverse_s *servos)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 10; i++)
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e007      	b.n	800108a <init_Reverse_Servos+0x1e>
    {
    	//
        servos->S[i] = false;
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 10; i++)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2b09      	cmp	r3, #9
 800108e:	ddf4      	ble.n	800107a <init_Reverse_Servos+0xe>
    }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <FlightTaskAttitude>:
Cmd_s rates_Gains;



void FlightTaskAttitude(void)
{
 80010a0:	b598      	push	{r3, r4, r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	//
	attitude_parameters_refresh();
 80010a4:	f000 f8e0 	bl	8001268 <attitude_parameters_refresh>

	refresh_actual_rates();
 80010a8:	f000 f95a 	bl	8001360 <refresh_actual_rates>

	get_flight_mode();
 80010ac:	f000 f8d0 	bl	8001250 <get_flight_mode>

	Command_in = get_commands_rc();
 80010b0:	f7ff ff22 	bl	8000ef8 <get_commands_rc>
 80010b4:	eeb0 6a40 	vmov.f32	s12, s0
 80010b8:	eef0 6a60 	vmov.f32	s13, s1
 80010bc:	eeb0 7a41 	vmov.f32	s14, s2
 80010c0:	eef0 7a61 	vmov.f32	s15, s3
 80010c4:	4b44      	ldr	r3, [pc, #272]	@ (80011d8 <FlightTaskAttitude+0x138>)
 80010c6:	ed83 6a00 	vstr	s12, [r3]
 80010ca:	edc3 6a01 	vstr	s13, [r3, #4]
 80010ce:	ed83 7a02 	vstr	s14, [r3, #8]
 80010d2:	edc3 7a03 	vstr	s15, [r3, #12]


	switch(mode)
 80010d6:	4b41      	ldr	r3, [pc, #260]	@ (80011dc <FlightTaskAttitude+0x13c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	dc47      	bgt.n	800116e <FlightTaskAttitude+0xce>
 80010de:	2b02      	cmp	r3, #2
 80010e0:	da4c      	bge.n	800117c <FlightTaskAttitude+0xdc>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d03c      	beq.n	8001160 <FlightTaskAttitude+0xc0>
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d141      	bne.n	800116e <FlightTaskAttitude+0xce>
	case ATTITUDE_HOLD_MODE:
//		AttitudeHold();
		break;
	case RATE_MODE:
		//
		Command_out = rates_control_law(Command_in , actual_rates, rates_Gains);
 80010ea:	4b3d      	ldr	r3, [pc, #244]	@ (80011e0 <FlightTaskAttitude+0x140>)
 80010ec:	edd3 3a00 	vldr	s7, [r3]
 80010f0:	ed93 4a01 	vldr	s8, [r3, #4]
 80010f4:	edd3 4a02 	vldr	s9, [r3, #8]
 80010f8:	ed93 5a03 	vldr	s10, [r3, #12]
 80010fc:	4b39      	ldr	r3, [pc, #228]	@ (80011e4 <FlightTaskAttitude+0x144>)
 80010fe:	edd3 2a00 	vldr	s5, [r3]
 8001102:	ed93 3a01 	vldr	s6, [r3, #4]
 8001106:	edd3 5a02 	vldr	s11, [r3, #8]
 800110a:	4b33      	ldr	r3, [pc, #204]	@ (80011d8 <FlightTaskAttitude+0x138>)
 800110c:	ed93 6a00 	vldr	s12, [r3]
 8001110:	edd3 6a01 	vldr	s13, [r3, #4]
 8001114:	ed93 7a02 	vldr	s14, [r3, #8]
 8001118:	edd3 7a03 	vldr	s15, [r3, #12]
 800111c:	eeb0 2a62 	vmov.f32	s4, s5
 8001120:	eef0 2a43 	vmov.f32	s5, s6
 8001124:	eeb0 3a65 	vmov.f32	s6, s11
 8001128:	eeb0 0a46 	vmov.f32	s0, s12
 800112c:	eef0 0a66 	vmov.f32	s1, s13
 8001130:	eeb0 1a47 	vmov.f32	s2, s14
 8001134:	eef0 1a67 	vmov.f32	s3, s15
 8001138:	f000 f8aa 	bl	8001290 <rates_control_law>
 800113c:	eeb0 6a40 	vmov.f32	s12, s0
 8001140:	eef0 6a60 	vmov.f32	s13, s1
 8001144:	eeb0 7a41 	vmov.f32	s14, s2
 8001148:	eef0 7a61 	vmov.f32	s15, s3
 800114c:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <FlightTaskAttitude+0x148>)
 800114e:	ed83 6a00 	vstr	s12, [r3]
 8001152:	edc3 6a01 	vstr	s13, [r3, #4]
 8001156:	ed83 7a02 	vstr	s14, [r3, #8]
 800115a:	edc3 7a03 	vstr	s15, [r3, #12]

		break;
 800115e:	e00e      	b.n	800117e <FlightTaskAttitude+0xde>
	case MANUAL_MODE:
		//
		Command_out = Command_in;
 8001160:	4a21      	ldr	r2, [pc, #132]	@ (80011e8 <FlightTaskAttitude+0x148>)
 8001162:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <FlightTaskAttitude+0x138>)
 8001164:	4614      	mov	r4, r2
 8001166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 800116c:	e007      	b.n	800117e <FlightTaskAttitude+0xde>
	default:
		//
		Command_out = Command_in;
 800116e:	4a1e      	ldr	r2, [pc, #120]	@ (80011e8 <FlightTaskAttitude+0x148>)
 8001170:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <FlightTaskAttitude+0x138>)
 8001172:	4614      	mov	r4, r2
 8001174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 800117a:	e000      	b.n	800117e <FlightTaskAttitude+0xde>
		break;
 800117c:	bf00      	nop
	}

	command_filtering();
 800117e:	f7ff fcd3 	bl	8000b28 <command_filtering>

	get_actual_trims();
 8001182:	f7ff ff3b 	bl	8000ffc <get_actual_trims>

	init_Reverse_Servos(&Reverse);
 8001186:	4819      	ldr	r0, [pc, #100]	@ (80011ec <FlightTaskAttitude+0x14c>)
 8001188:	f7ff ff70 	bl	800106c <init_Reverse_Servos>

	control_allocator(Commands , Trims );
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <FlightTaskAttitude+0x150>)
 800118e:	ed93 4a00 	vldr	s8, [r3]
 8001192:	edd3 4a01 	vldr	s9, [r3, #4]
 8001196:	ed93 5a02 	vldr	s10, [r3, #8]
 800119a:	edd3 5a03 	vldr	s11, [r3, #12]
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <FlightTaskAttitude+0x154>)
 80011a0:	ed93 6a00 	vldr	s12, [r3]
 80011a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80011a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80011ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b0:	eeb0 2a44 	vmov.f32	s4, s8
 80011b4:	eef0 2a64 	vmov.f32	s5, s9
 80011b8:	eeb0 3a45 	vmov.f32	s6, s10
 80011bc:	eef0 3a65 	vmov.f32	s7, s11
 80011c0:	eeb0 0a46 	vmov.f32	s0, s12
 80011c4:	eef0 0a66 	vmov.f32	s1, s13
 80011c8:	eeb0 1a47 	vmov.f32	s2, s14
 80011cc:	eef0 1a67 	vmov.f32	s3, s15
 80011d0:	f7ff fd0a 	bl	8000be8 <control_allocator>

}
 80011d4:	bf00      	nop
 80011d6:	bd98      	pop	{r3, r4, r7, pc}
 80011d8:	24000340 	.word	0x24000340
 80011dc:	24000360 	.word	0x24000360
 80011e0:	24000350 	.word	0x24000350
 80011e4:	24000370 	.word	0x24000370
 80011e8:	240002b0 	.word	0x240002b0
 80011ec:	24000310 	.word	0x24000310
 80011f0:	240002c0 	.word	0x240002c0
 80011f4:	240002d0 	.word	0x240002d0

080011f8 <rc_three_steps_CurrentMode>:
#include "Flight_Management_Control/modes_management.h"

FlightMode_t mode ;

uint8_t rc_three_steps_CurrentMode(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
	//
	uint16_t pwm_value = Radio_input.Canal_5;
 80011fe:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <rc_three_steps_CurrentMode+0x50>)
 8001200:	895b      	ldrh	r3, [r3, #10]
 8001202:	80fb      	strh	r3, [r7, #6]

	if (pwm_value < (PWM_MID - PWM_DEADZONE))
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800120a:	4293      	cmp	r3, r2
 800120c:	d801      	bhi.n	8001212 <rc_three_steps_CurrentMode+0x1a>
	{
	        return MANUAL_MODE;
 800120e:	2300      	movs	r3, #0
 8001210:	e014      	b.n	800123c <rc_three_steps_CurrentMode+0x44>
	 }
	else if (pwm_value < 1750 && pwm_value > 1350)
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8001218:	4293      	cmp	r3, r2
 800121a:	d806      	bhi.n	800122a <rc_three_steps_CurrentMode+0x32>
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f240 5246 	movw	r2, #1350	@ 0x546
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <rc_three_steps_CurrentMode+0x32>
	 {
	        return RATE_MODE;
 8001226:	2301      	movs	r3, #1
 8001228:	e008      	b.n	800123c <rc_three_steps_CurrentMode+0x44>
	  }
	else if (pwm_value >= (PWM_MAX - PWM_DEADZONE))
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <rc_three_steps_CurrentMode+0x40>
	 {
	        return ATTITUDE_HOLD_MODE;
 8001234:	2302      	movs	r3, #2
 8001236:	e001      	b.n	800123c <rc_three_steps_CurrentMode+0x44>
	  }
	else
	{
	        // Zona muerta → mantener último modo (evita oscilaciones)
	        static FlightMode_t last_mode = MANUAL_MODE;
	        return last_mode;
 8001238:	4b04      	ldr	r3, [pc, #16]	@ (800124c <rc_three_steps_CurrentMode+0x54>)
 800123a:	781b      	ldrb	r3, [r3, #0]
	 }
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	2400007c 	.word	0x2400007c
 800124c:	24000361 	.word	0x24000361

08001250 <get_flight_mode>:

void get_flight_mode(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	//
	mode = (FlightMode_t)rc_three_steps_CurrentMode();
 8001254:	f7ff ffd0 	bl	80011f8 <rc_three_steps_CurrentMode>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b01      	ldr	r3, [pc, #4]	@ (8001264 <get_flight_mode+0x14>)
 800125e:	701a      	strb	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	24000360 	.word	0x24000360

08001268 <attitude_parameters_refresh>:
#include "Flight_Management_Control/parameters_manager.h"
#include "Flight_Management_Control/flight_management.h"


void attitude_parameters_refresh(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	//
	rates_Gains.roll  = K_P ;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <attitude_parameters_refresh+0x20>)
 800126e:	4a07      	ldr	r2, [pc, #28]	@ (800128c <attitude_parameters_refresh+0x24>)
 8001270:	601a      	str	r2, [r3, #0]
	rates_Gains.pitch = K_Q ;
 8001272:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <attitude_parameters_refresh+0x20>)
 8001274:	4a05      	ldr	r2, [pc, #20]	@ (800128c <attitude_parameters_refresh+0x24>)
 8001276:	605a      	str	r2, [r3, #4]
	rates_Gains.yaw   = K_R ;
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <attitude_parameters_refresh+0x20>)
 800127a:	4a04      	ldr	r2, [pc, #16]	@ (800128c <attitude_parameters_refresh+0x24>)
 800127c:	609a      	str	r2, [r3, #8]

}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	24000350 	.word	0x24000350
 800128c:	3ba3d70a 	.word	0x3ba3d70a

08001290 <rates_control_law>:
 *      Author: rtrujillo
 */
#include "Flight_Management_Control/rates_mode.h"

Cmd_s rates_control_law(Cmd_s inputs_norms, Gyro_s actual_gyro, Cmd_s K)
{
 8001290:	b490      	push	{r4, r7}
 8001292:	b098      	sub	sp, #96	@ 0x60
 8001294:	af00      	add	r7, sp, #0
 8001296:	eef0 5a43 	vmov.f32	s11, s6
 800129a:	eeb0 6a63 	vmov.f32	s12, s7
 800129e:	eef0 6a44 	vmov.f32	s13, s8
 80012a2:	eeb0 7a64 	vmov.f32	s14, s9
 80012a6:	eef0 7a45 	vmov.f32	s15, s10
 80012aa:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 80012ae:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 80012b2:	ed87 1a0e 	vstr	s2, [r7, #56]	@ 0x38
 80012b6:	edc7 1a0f 	vstr	s3, [r7, #60]	@ 0x3c
 80012ba:	ed87 2a09 	vstr	s4, [r7, #36]	@ 0x24
 80012be:	edc7 2a0a 	vstr	s5, [r7, #40]	@ 0x28
 80012c2:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 80012c6:	ed87 6a05 	vstr	s12, [r7, #20]
 80012ca:	edc7 6a06 	vstr	s13, [r7, #24]
 80012ce:	ed87 7a07 	vstr	s14, [r7, #28]
 80012d2:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	Cmd_s out_puts;

	out_puts.roll   = inputs_norms.roll  -  actual_gyro.roll * K.roll ;
 80012d6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80012da:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80012de:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ea:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	out_puts.pitch  = inputs_norms.pitch -  actual_gyro.pitch* K.pitch ;
 80012ee:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80012f2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80012f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80012fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001302:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	out_puts.yaw    = inputs_norms.yaw   -  actual_gyro.yaw  * K.yaw ;
 8001306:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800130a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800130e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	out_puts.thrust = inputs_norms.thrust ;
 800131e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001320:	64fb      	str	r3, [r7, #76]	@ 0x4c

	return out_puts ;
 8001322:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001326:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800132a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800132c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001330:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001332:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001334:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001338:	ee06 0a10 	vmov	s12, r0
 800133c:	ee06 1a90 	vmov	s13, r1
 8001340:	ee07 2a10 	vmov	s14, r2
 8001344:	ee07 3a90 	vmov	s15, r3
}
 8001348:	eeb0 0a46 	vmov.f32	s0, s12
 800134c:	eef0 0a66 	vmov.f32	s1, s13
 8001350:	eeb0 1a47 	vmov.f32	s2, s14
 8001354:	eef0 1a67 	vmov.f32	s3, s15
 8001358:	3760      	adds	r7, #96	@ 0x60
 800135a:	46bd      	mov	sp, r7
 800135c:	bc90      	pop	{r4, r7}
 800135e:	4770      	bx	lr

08001360 <refresh_actual_rates>:

	return acc;
}

void refresh_actual_rates(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	//
	imu_gyr[0] 		= IMU.GYR.x ;
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <refresh_actual_rates+0x40>)
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	4a0e      	ldr	r2, [pc, #56]	@ (80013a4 <refresh_actual_rates+0x44>)
 800136a:	6013      	str	r3, [r2, #0]
	imu_gyr[1] 		= IMU.GYR.y ;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <refresh_actual_rates+0x40>)
 800136e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001370:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <refresh_actual_rates+0x44>)
 8001372:	6053      	str	r3, [r2, #4]
	imu_gyr[2] 		= IMU.GYR.z ;
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <refresh_actual_rates+0x40>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <refresh_actual_rates+0x44>)
 800137a:	6093      	str	r3, [r2, #8]

	actual_rates.roll  = imu_gyr[0] ;
 800137c:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <refresh_actual_rates+0x44>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a09      	ldr	r2, [pc, #36]	@ (80013a8 <refresh_actual_rates+0x48>)
 8001382:	6013      	str	r3, [r2, #0]
	actual_rates.pitch = imu_gyr[1] ;
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <refresh_actual_rates+0x44>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a07      	ldr	r2, [pc, #28]	@ (80013a8 <refresh_actual_rates+0x48>)
 800138a:	6053      	str	r3, [r2, #4]
	actual_rates.yaw   = imu_gyr[2] ;
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <refresh_actual_rates+0x44>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a05      	ldr	r2, [pc, #20]	@ (80013a8 <refresh_actual_rates+0x48>)
 8001392:	6093      	str	r3, [r2, #8]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	24001540 	.word	0x24001540
 80013a4:	24000364 	.word	0x24000364
 80013a8:	24000370 	.word	0x24000370

080013ac <FIX_WING_MIXER>:
#include "Flight_Management_Control/servo_mixers.h"



Servo_mgmt_s FIX_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 80013ac:	b4b0      	push	{r4, r5, r7}
 80013ae:	b091      	sub	sp, #68	@ 0x44
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6278      	str	r0, [r7, #36]	@ 0x24
 80013b4:	eeb0 4a40 	vmov.f32	s8, s0
 80013b8:	eef0 4a60 	vmov.f32	s9, s1
 80013bc:	eeb0 5a41 	vmov.f32	s10, s2
 80013c0:	eef0 5a61 	vmov.f32	s11, s3
 80013c4:	eeb0 6a42 	vmov.f32	s12, s4
 80013c8:	eef0 6a62 	vmov.f32	s13, s5
 80013cc:	eeb0 7a43 	vmov.f32	s14, s6
 80013d0:	eef0 7a63 	vmov.f32	s15, s7
 80013d4:	ed87 4a05 	vstr	s8, [r7, #20]
 80013d8:	edc7 4a06 	vstr	s9, [r7, #24]
 80013dc:	ed87 5a07 	vstr	s10, [r7, #28]
 80013e0:	edc7 5a08 	vstr	s11, [r7, #32]
 80013e4:	ed87 6a01 	vstr	s12, [r7, #4]
 80013e8:	edc7 6a02 	vstr	s13, [r7, #8]
 80013ec:	ed87 7a03 	vstr	s14, [r7, #12]
 80013f0:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (trims.roll  )) ;
 80013f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013f8:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001540 <FIX_WING_MIXER+0x194>
 80013fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001400:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001544 <FIX_WING_MIXER+0x198>
 8001404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001408:	edd7 7a01 	vldr	s15, [r7, #4]
 800140c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001414:	ee17 3a90 	vmov	r3, s15
 8001418:	b29b      	uxth	r3, r3
 800141a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (trims.roll  )) ;
 800141c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001420:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001540 <FIX_WING_MIXER+0x194>
 8001424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001428:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001544 <FIX_WING_MIXER+0x198>
 800142c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001430:	edd7 7a01 	vldr	s15, [r7, #4]
 8001434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143c:	ee17 3a90 	vmov	r3, s15
 8001440:	b29b      	uxth	r3, r3
 8001442:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (trims.pitch )) ;
 8001444:	edd7 7a06 	vldr	s15, [r7, #24]
 8001448:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001540 <FIX_WING_MIXER+0x194>
 800144c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001450:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001544 <FIX_WING_MIXER+0x198>
 8001454:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001458:	edd7 7a02 	vldr	s15, [r7, #8]
 800145c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001464:	ee17 3a90 	vmov	r3, s15
 8001468:	b29b      	uxth	r3, r3
 800146a:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (trims.pitch )) ;
 800146c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001470:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001540 <FIX_WING_MIXER+0x194>
 8001474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001478:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001544 <FIX_WING_MIXER+0x198>
 800147c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001480:	edd7 7a02 	vldr	s15, [r7, #8]
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148c:	ee17 3a90 	vmov	r3, s15
 8001490:	b29b      	uxth	r3, r3
 8001492:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (trims.yaw   )) ;
 8001494:	edd7 7a07 	vldr	s15, [r7, #28]
 8001498:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001540 <FIX_WING_MIXER+0x194>
 800149c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001544 <FIX_WING_MIXER+0x198>
 80014a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80014a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b4:	ee17 3a90 	vmov	r3, s15
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (trims.yaw   )) ;
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001540 <FIX_WING_MIXER+0x194>
 80014c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001544 <FIX_WING_MIXER+0x198>
 80014cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80014d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014dc:	ee17 3a90 	vmov	r3, s15
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (trims.thrust)) ;
 80014e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80014e8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001540 <FIX_WING_MIXER+0x194>
 80014ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001548 <FIX_WING_MIXER+0x19c>
 80014f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80014f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80014fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001504:	ee17 3a90 	vmov	r3, s15
 8001508:	b29b      	uxth	r3, r3
 800150a:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 800150c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001510:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001512:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001516:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001518:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800151c:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	461d      	mov	r5, r3
 8001522:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	6028      	str	r0, [r5, #0]
 800152a:	6069      	str	r1, [r5, #4]
 800152c:	60aa      	str	r2, [r5, #8]
 800152e:	60eb      	str	r3, [r5, #12]
 8001530:	6820      	ldr	r0, [r4, #0]
 8001532:	6128      	str	r0, [r5, #16]
}
 8001534:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001536:	3744      	adds	r7, #68	@ 0x44
 8001538:	46bd      	mov	sp, r7
 800153a:	bcb0      	pop	{r4, r5, r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	43fa0000 	.word	0x43fa0000
 8001544:	44bb8000 	.word	0x44bb8000
 8001548:	447a0000 	.word	0x447a0000

0800154c <FLYING_WING_MIXER>:

Servo_mgmt_s FLYING_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 800154c:	b4b0      	push	{r4, r5, r7}
 800154e:	b091      	sub	sp, #68	@ 0x44
 8001550:	af00      	add	r7, sp, #0
 8001552:	6278      	str	r0, [r7, #36]	@ 0x24
 8001554:	eeb0 4a40 	vmov.f32	s8, s0
 8001558:	eef0 4a60 	vmov.f32	s9, s1
 800155c:	eeb0 5a41 	vmov.f32	s10, s2
 8001560:	eef0 5a61 	vmov.f32	s11, s3
 8001564:	eeb0 6a42 	vmov.f32	s12, s4
 8001568:	eef0 6a62 	vmov.f32	s13, s5
 800156c:	eeb0 7a43 	vmov.f32	s14, s6
 8001570:	eef0 7a63 	vmov.f32	s15, s7
 8001574:	ed87 4a05 	vstr	s8, [r7, #20]
 8001578:	edc7 4a06 	vstr	s9, [r7, #24]
 800157c:	ed87 5a07 	vstr	s10, [r7, #28]
 8001580:	edc7 5a08 	vstr	s11, [r7, #32]
 8001584:	ed87 6a01 	vstr	s12, [r7, #4]
 8001588:	edc7 6a02 	vstr	s13, [r7, #8]
 800158c:	ed87 7a03 	vstr	s14, [r7, #12]
 8001590:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001594:	edd7 7a05 	vldr	s15, [r7, #20]
 8001598:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001718 <FLYING_WING_MIXER+0x1cc>
 800159c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 80015a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80015a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ac:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 80015b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015bc:	ee17 3a90 	vmov	r3, s15
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 80015c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c8:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001718 <FLYING_WING_MIXER+0x1cc>
 80015cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 80015d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80015d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015dc:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 80015e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ec:	ee17 3a90 	vmov	r3, s15
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80015f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015f8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001718 <FLYING_WING_MIXER+0x1cc>
 80015fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001600:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 8001604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001608:	edd7 7a02 	vldr	s15, [r7, #8]
 800160c:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 8001610:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800161c:	ee17 3a90 	vmov	r3, s15
 8001620:	b29b      	uxth	r3, r3
 8001622:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 8001624:	edd7 7a06 	vldr	s15, [r7, #24]
 8001628:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001718 <FLYING_WING_MIXER+0x1cc>
 800162c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001630:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 8001634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001638:	edd7 7a02 	vldr	s15, [r7, #8]
 800163c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 8001640:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800164c:	ee17 3a90 	vmov	r3, s15
 8001650:	b29b      	uxth	r3, r3
 8001652:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001654:	edd7 7a07 	vldr	s15, [r7, #28]
 8001658:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001718 <FLYING_WING_MIXER+0x1cc>
 800165c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001660:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 8001664:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001668:	edd7 7a03 	vldr	s15, [r7, #12]
 800166c:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 8001670:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167c:	ee17 3a90 	vmov	r3, s15
 8001680:	b29b      	uxth	r3, r3
 8001682:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001684:	edd7 7a07 	vldr	s15, [r7, #28]
 8001688:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001718 <FLYING_WING_MIXER+0x1cc>
 800168c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001690:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 8001694:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001698:	edd7 7a03 	vldr	s15, [r7, #12]
 800169c:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 80016a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ac:	ee17 3a90 	vmov	r3, s15
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 80016b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80016b8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001718 <FLYING_WING_MIXER+0x1cc>
 80016bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001720 <FLYING_WING_MIXER+0x1d4>
 80016c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016cc:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800171c <FLYING_WING_MIXER+0x1d0>
 80016d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016dc:	ee17 3a90 	vmov	r3, s15
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 80016e4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80016e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 80016ea:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80016ee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 80016f0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80016f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	461d      	mov	r5, r3
 80016fa:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80016fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001700:	6028      	str	r0, [r5, #0]
 8001702:	6069      	str	r1, [r5, #4]
 8001704:	60aa      	str	r2, [r5, #8]
 8001706:	60eb      	str	r3, [r5, #12]
 8001708:	6820      	ldr	r0, [r4, #0]
 800170a:	6128      	str	r0, [r5, #16]
}
 800170c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800170e:	3744      	adds	r7, #68	@ 0x44
 8001710:	46bd      	mov	sp, r7
 8001712:	bcb0      	pop	{r4, r5, r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	43fa0000 	.word	0x43fa0000
 800171c:	44bb8000 	.word	0x44bb8000
 8001720:	447a0000 	.word	0x447a0000

08001724 <TANDEM_WING_MIXER>:

Servo_mgmt_s TANDEM_WING_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 8001724:	b4b0      	push	{r4, r5, r7}
 8001726:	b091      	sub	sp, #68	@ 0x44
 8001728:	af00      	add	r7, sp, #0
 800172a:	6278      	str	r0, [r7, #36]	@ 0x24
 800172c:	eeb0 4a40 	vmov.f32	s8, s0
 8001730:	eef0 4a60 	vmov.f32	s9, s1
 8001734:	eeb0 5a41 	vmov.f32	s10, s2
 8001738:	eef0 5a61 	vmov.f32	s11, s3
 800173c:	eeb0 6a42 	vmov.f32	s12, s4
 8001740:	eef0 6a62 	vmov.f32	s13, s5
 8001744:	eeb0 7a43 	vmov.f32	s14, s6
 8001748:	eef0 7a63 	vmov.f32	s15, s7
 800174c:	ed87 4a05 	vstr	s8, [r7, #20]
 8001750:	edc7 4a06 	vstr	s9, [r7, #24]
 8001754:	ed87 5a07 	vstr	s10, [r7, #28]
 8001758:	edc7 5a08 	vstr	s11, [r7, #32]
 800175c:	ed87 6a01 	vstr	s12, [r7, #4]
 8001760:	edc7 6a02 	vstr	s13, [r7, #8]
 8001764:	ed87 7a03 	vstr	s14, [r7, #12]
 8001768:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 800176c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001770:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80018f0 <TANDEM_WING_MIXER+0x1cc>
 8001774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001778:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 800177c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001780:	edd7 7a01 	vldr	s15, [r7, #4]
 8001784:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 8001788:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800178c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001794:	ee17 3a90 	vmov	r3, s15
 8001798:	b29b      	uxth	r3, r3
 800179a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 800179c:	edd7 7a05 	vldr	s15, [r7, #20]
 80017a0:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80018f0 <TANDEM_WING_MIXER+0x1cc>
 80017a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 80017ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b4:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 80017b8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c4:	ee17 3a90 	vmov	r3, s15
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80017cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80017d0:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80018f0 <TANDEM_WING_MIXER+0x1cc>
 80017d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 80017dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017e4:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 80017e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f4:	ee17 3a90 	vmov	r3, s15
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80017fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001800:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80018f0 <TANDEM_WING_MIXER+0x1cc>
 8001804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001808:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 800180c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001810:	edd7 7a02 	vldr	s15, [r7, #8]
 8001814:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 8001818:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800181c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001824:	ee17 3a90 	vmov	r3, s15
 8001828:	b29b      	uxth	r3, r3
 800182a:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 800182c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001830:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80018f0 <TANDEM_WING_MIXER+0x1cc>
 8001834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001838:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 800183c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001840:	edd7 7a03 	vldr	s15, [r7, #12]
 8001844:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 8001848:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001854:	ee17 3a90 	vmov	r3, s15
 8001858:	b29b      	uxth	r3, r3
 800185a:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 800185c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001860:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80018f0 <TANDEM_WING_MIXER+0x1cc>
 8001864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001868:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 800186c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001870:	edd7 7a03 	vldr	s15, [r7, #12]
 8001874:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 8001878:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800187c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001884:	ee17 3a90 	vmov	r3, s15
 8001888:	b29b      	uxth	r3, r3
 800188a:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 800188c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001890:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80018f0 <TANDEM_WING_MIXER+0x1cc>
 8001894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001898:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80018f8 <TANDEM_WING_MIXER+0x1d4>
 800189c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80018a4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80018f4 <TANDEM_WING_MIXER+0x1d0>
 80018a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b4:	ee17 3a90 	vmov	r3, s15
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 80018bc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80018c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 80018c2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80018c6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 80018c8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80018cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	461d      	mov	r5, r3
 80018d2:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80018d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d8:	6028      	str	r0, [r5, #0]
 80018da:	6069      	str	r1, [r5, #4]
 80018dc:	60aa      	str	r2, [r5, #8]
 80018de:	60eb      	str	r3, [r5, #12]
 80018e0:	6820      	ldr	r0, [r4, #0]
 80018e2:	6128      	str	r0, [r5, #16]
}
 80018e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018e6:	3744      	adds	r7, #68	@ 0x44
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bcb0      	pop	{r4, r5, r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	43fa0000 	.word	0x43fa0000
 80018f4:	44bb8000 	.word	0x44bb8000
 80018f8:	447a0000 	.word	0x447a0000

080018fc <CUSTOM_FRAME_MIXER>:

Servo_mgmt_s CUSTOM_FRAME_MIXER(Cmd_s control_cmd, Cmd_s trims)
{
 80018fc:	b4b0      	push	{r4, r5, r7}
 80018fe:	b091      	sub	sp, #68	@ 0x44
 8001900:	af00      	add	r7, sp, #0
 8001902:	6278      	str	r0, [r7, #36]	@ 0x24
 8001904:	eeb0 4a40 	vmov.f32	s8, s0
 8001908:	eef0 4a60 	vmov.f32	s9, s1
 800190c:	eeb0 5a41 	vmov.f32	s10, s2
 8001910:	eef0 5a61 	vmov.f32	s11, s3
 8001914:	eeb0 6a42 	vmov.f32	s12, s4
 8001918:	eef0 6a62 	vmov.f32	s13, s5
 800191c:	eeb0 7a43 	vmov.f32	s14, s6
 8001920:	eef0 7a63 	vmov.f32	s15, s7
 8001924:	ed87 4a05 	vstr	s8, [r7, #20]
 8001928:	edc7 4a06 	vstr	s9, [r7, #24]
 800192c:	ed87 5a07 	vstr	s10, [r7, #28]
 8001930:	edc7 5a08 	vstr	s11, [r7, #32]
 8001934:	ed87 6a01 	vstr	s12, [r7, #4]
 8001938:	edc7 6a02 	vstr	s13, [r7, #8]
 800193c:	ed87 7a03 	vstr	s14, [r7, #12]
 8001940:	edc7 7a04 	vstr	s15, [r7, #16]
	//
	Servo_mgmt_s mixer_output;

	mixer_output.S[0]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001944:	edd7 7a05 	vldr	s15, [r7, #20]
 8001948:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001ac8 <CUSTOM_FRAME_MIXER+0x1cc>
 800194c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001950:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 8001954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001958:	edd7 7a01 	vldr	s15, [r7, #4]
 800195c:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 8001960:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196c:	ee17 3a90 	vmov	r3, s15
 8001970:	b29b      	uxth	r3, r3
 8001972:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	mixer_output.S[1]  = (uint16_t)(1500.0f + 500.f * control_cmd.roll  + (1500 - trims.roll  )) ;
 8001974:	edd7 7a05 	vldr	s15, [r7, #20]
 8001978:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001ac8 <CUSTOM_FRAME_MIXER+0x1cc>
 800197c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001980:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 8001984:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001988:	edd7 7a01 	vldr	s15, [r7, #4]
 800198c:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 8001990:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800199c:	ee17 3a90 	vmov	r3, s15
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	mixer_output.S[2]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80019a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019a8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001ac8 <CUSTOM_FRAME_MIXER+0x1cc>
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 80019b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019bc:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 80019c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019cc:	ee17 3a90 	vmov	r3, s15
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	863b      	strh	r3, [r7, #48]	@ 0x30
	mixer_output.S[3]  = (uint16_t)(1500.0f + 500.f * control_cmd.pitch + (1500 - trims.pitch )) ;
 80019d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019d8:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001ac8 <CUSTOM_FRAME_MIXER+0x1cc>
 80019dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e0:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 80019e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ec:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 80019f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019fc:	ee17 3a90 	vmov	r3, s15
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	867b      	strh	r3, [r7, #50]	@ 0x32
	mixer_output.S[4]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001a04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a08:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001ac8 <CUSTOM_FRAME_MIXER+0x1cc>
 8001a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a10:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 8001a14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1c:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 8001a20:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2c:	ee17 3a90 	vmov	r3, s15
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	86bb      	strh	r3, [r7, #52]	@ 0x34
	mixer_output.S[5]  = (uint16_t)(1500.0f + 500.f * control_cmd.yaw   + (1500 - trims.yaw   )) ;
 8001a34:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a38:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001ac8 <CUSTOM_FRAME_MIXER+0x1cc>
 8001a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a40:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 8001a44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4c:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 8001a50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a5c:	ee17 3a90 	vmov	r3, s15
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	86fb      	strh	r3, [r7, #54]	@ 0x36
	mixer_output.S[6]  = (uint16_t)(1000.0f + 500.f * control_cmd.thrust+ (1500 - trims.thrust)) ;
 8001a64:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a68:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001ac8 <CUSTOM_FRAME_MIXER+0x1cc>
 8001a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a70:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001ad0 <CUSTOM_FRAME_MIXER+0x1d4>
 8001a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a7c:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001acc <CUSTOM_FRAME_MIXER+0x1d0>
 8001a80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a8c:	ee17 3a90 	vmov	r3, s15
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	873b      	strh	r3, [r7, #56]	@ 0x38
	mixer_output.S[7]  = (uint16_t)(1500.0f );
 8001a94:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001a98:	877b      	strh	r3, [r7, #58]	@ 0x3a
	mixer_output.S[8]  = (uint16_t)(1500.0f );
 8001a9a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001a9e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	mixer_output.S[9]  = (uint16_t)(1500.0f );
 8001aa0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001aa4:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	return mixer_output;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab0:	6028      	str	r0, [r5, #0]
 8001ab2:	6069      	str	r1, [r5, #4]
 8001ab4:	60aa      	str	r2, [r5, #8]
 8001ab6:	60eb      	str	r3, [r5, #12]
 8001ab8:	6820      	ldr	r0, [r4, #0]
 8001aba:	6128      	str	r0, [r5, #16]
}
 8001abc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001abe:	3744      	adds	r7, #68	@ 0x44
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bcb0      	pop	{r4, r5, r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	43fa0000 	.word	0x43fa0000
 8001acc:	44bb8000 	.word	0x44bb8000
 8001ad0:	447a0000 	.word	0x447a0000

08001ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <MX_DMA_Init+0x5c>)
 8001adc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001ae0:	4a13      	ldr	r2, [pc, #76]	@ (8001b30 <MX_DMA_Init+0x5c>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <MX_DMA_Init+0x5c>)
 8001aec:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2105      	movs	r1, #5
 8001afc:	200b      	movs	r0, #11
 8001afe:	f004 fdbb 	bl	8006678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b02:	200b      	movs	r0, #11
 8001b04:	f004 fdd2 	bl	80066ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2105      	movs	r1, #5
 8001b0c:	200c      	movs	r0, #12
 8001b0e:	f004 fdb3 	bl	8006678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b12:	200c      	movs	r0, #12
 8001b14:	f004 fdca 	bl	80066ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2105      	movs	r1, #5
 8001b1c:	200d      	movs	r0, #13
 8001b1e:	f004 fdab 	bl	8006678 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b22:	200d      	movs	r0, #13
 8001b24:	f004 fdc2 	bl	80066ac <HAL_NVIC_EnableIRQ>

}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	58024400 	.word	0x58024400

08001b34 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001b38:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf8 <MX_FDCAN1_Init+0xc4>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b44:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b50:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b56:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001b5c:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b5e:	2210      	movs	r2, #16
 8001b60:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001b62:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001b68:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001b6e:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b70:	2202      	movs	r2, #2
 8001b72:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001b74:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001b80:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001b86:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001bb0:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001bdc:	2204      	movs	r2, #4
 8001bde:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001be0:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <MX_FDCAN1_Init+0xc0>)
 8001be2:	f007 fcd3 	bl	800958c <HAL_FDCAN_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001bec:	f001 f8f0 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2400037c 	.word	0x2400037c
 8001bf8:	4000a000 	.word	0x4000a000

08001bfc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b0ba      	sub	sp, #232	@ 0xe8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	22c0      	movs	r2, #192	@ 0xc0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f015 fe42 	bl	80178a6 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a2f      	ldr	r2, [pc, #188]	@ (8001ce4 <HAL_FDCAN_MspInit+0xe8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d157      	bne.n	8001cdc <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001c4c:	23c0      	movs	r3, #192	@ 0xc0
 8001c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001c58:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4618      	mov	r0, r3
 8001c66:	f009 fb2d 	bl	800b2c4 <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8001c70:	f001 f8ae 	bl	8002dd0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <HAL_FDCAN_MspInit+0xec>)
 8001c76:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce8 <HAL_FDCAN_MspInit+0xec>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c80:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <HAL_FDCAN_MspInit+0xec>)
 8001c86:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <HAL_FDCAN_MspInit+0xec>)
 8001c94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c98:	4a13      	ldr	r2, [pc, #76]	@ (8001ce8 <HAL_FDCAN_MspInit+0xec>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <HAL_FDCAN_MspInit+0xec>)
 8001ca4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cb0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001cca:	2309      	movs	r3, #9
 8001ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4805      	ldr	r0, [pc, #20]	@ (8001cec <HAL_FDCAN_MspInit+0xf0>)
 8001cd8:	f007 ffbc 	bl	8009c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	37e8      	adds	r7, #232	@ 0xe8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	4000a000 	.word	0x4000a000
 8001ce8:	58024400 	.word	0x58024400
 8001cec:	58020000 	.word	0x58020000

08001cf0 <f>:
/* Includes ------------------------------------------------------------------*/
#include "filter.h"
#include <math.h>

// Derivada dx/dt = f(x,u)
float f(float x, float u,float par) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cfa:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cfe:	ed87 1a01 	vstr	s2, [r7, #4]
    return (-x * par ) + (u * par);
 8001d02:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d06:	eeb1 7a67 	vneg.f32	s14, s15
 8001d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d12:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001d22:	eeb0 0a67 	vmov.f32	s0, s15
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <rk4_step>:

// Paso Runge-Kutta 4
void rk4_step(FilterState *state, float u, float dt, float params) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d40:	ed87 1a00 	vstr	s2, [r7]
    float k1, k2, k3, k4;

    k1 = f(state->x, u,params);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ed97 1a00 	vldr	s2, [r7]
 8001d4e:	edd7 0a02 	vldr	s1, [r7, #8]
 8001d52:	eeb0 0a67 	vmov.f32	s0, s15
 8001d56:	f7ff ffcb 	bl	8001cf0 <f>
 8001d5a:	ed87 0a07 	vstr	s0, [r7, #28]
    k2 = f(state->x + 0.5f*dt*k1, u,params);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	ed93 7a00 	vldr	s14, [r3]
 8001d64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d68:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d6c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d70:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7c:	ed97 1a00 	vldr	s2, [r7]
 8001d80:	edd7 0a02 	vldr	s1, [r7, #8]
 8001d84:	eeb0 0a67 	vmov.f32	s0, s15
 8001d88:	f7ff ffb2 	bl	8001cf0 <f>
 8001d8c:	ed87 0a06 	vstr	s0, [r7, #24]
    k3 = f(state->x + 0.5f*dt*k2, u,params);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	ed93 7a00 	vldr	s14, [r3]
 8001d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d9a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d9e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001da2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	ed97 1a00 	vldr	s2, [r7]
 8001db2:	edd7 0a02 	vldr	s1, [r7, #8]
 8001db6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dba:	f7ff ff99 	bl	8001cf0 <f>
 8001dbe:	ed87 0a05 	vstr	s0, [r7, #20]
    k4 = f(state->x + dt*k3, u,params);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	ed93 7a00 	vldr	s14, [r3]
 8001dc8:	edd7 6a01 	vldr	s13, [r7, #4]
 8001dcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd8:	ed97 1a00 	vldr	s2, [r7]
 8001ddc:	edd7 0a02 	vldr	s1, [r7, #8]
 8001de0:	eeb0 0a67 	vmov.f32	s0, s15
 8001de4:	f7ff ff84 	bl	8001cf0 <f>
 8001de8:	ed87 0a04 	vstr	s0, [r7, #16]

    state->x += (dt/6.0f)*(k1 + 2*k2 + 2*k3 + k4);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df6:	eeb1 6a08 	vmov.f32	s12, #24	@ 0x40c00000  6.0
 8001dfa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001dfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e02:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001e06:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e0a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e16:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e1e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	edc3 7a00 	vstr	s15, [r3]
}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <filter_step>:

// Aplicar filtro
float filter_step(FilterState *state, float u, float cut_off, float DT) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e44:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e48:	ed87 1a00 	vstr	s2, [r7]
    rk4_step(state, u, DT, cut_off);
 8001e4c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001e50:	edd7 0a00 	vldr	s1, [r7]
 8001e54:	ed97 0a02 	vldr	s0, [r7, #8]
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7ff ff69 	bl	8001d30 <rk4_step>
    return state->x;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	ee07 3a90 	vmov	s15, r3
}
 8001e66:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <vApplicationGetIdleTaskMemory+0x2c>)
 8001e80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <vApplicationGetIdleTaskMemory+0x30>)
 8001e86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2280      	movs	r2, #128	@ 0x80
 8001e8c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	24000428 	.word	0x24000428
 8001ea0:	2400047c 	.word	0x2400047c

08001ea4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ea4:	b5b0      	push	{r4, r5, r7, lr}
 8001ea6:	b096      	sub	sp, #88	@ 0x58
 8001ea8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, fTask_1ms, osPriorityNormal, 0, 128);
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f20 <MX_FREERTOS_Init+0x7c>)
 8001eac:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001eb0:	461d      	mov	r5, r3
 8001eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001eba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 8001ebe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f012 fb7b 	bl	80145c0 <osThreadCreate>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4a15      	ldr	r2, [pc, #84]	@ (8001f24 <MX_FREERTOS_Init+0x80>)
 8001ece:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, fTask_10ms, osPriorityNormal, 0, 128);
 8001ed0:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <MX_FREERTOS_Init+0x84>)
 8001ed2:	f107 0420 	add.w	r4, r7, #32
 8001ed6:	461d      	mov	r5, r3
 8001ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001edc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ee0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 8001ee4:	f107 0320 	add.w	r3, r7, #32
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f012 fb68 	bl	80145c0 <osThreadCreate>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f2c <MX_FREERTOS_Init+0x88>)
 8001ef4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, fTask_100ms, osPriorityNormal, 0, 128);
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <MX_FREERTOS_Init+0x8c>)
 8001ef8:	1d3c      	adds	r4, r7, #4
 8001efa:	461d      	mov	r5, r3
 8001efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f012 fb57 	bl	80145c0 <osThreadCreate>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a07      	ldr	r2, [pc, #28]	@ (8001f34 <MX_FREERTOS_Init+0x90>)
 8001f16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001f18:	bf00      	nop
 8001f1a:	3758      	adds	r7, #88	@ 0x58
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f20:	080198fc 	.word	0x080198fc
 8001f24:	2400041c 	.word	0x2400041c
 8001f28:	08019924 	.word	0x08019924
 8001f2c:	24000420 	.word	0x24000420
 8001f30:	0801994c 	.word	0x0801994c
 8001f34:	24000424 	.word	0x24000424

08001f38 <fTask_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_1ms */
void fTask_1ms(void const * argument)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_1ms */
  /* Infinite loop */

  for(;;)
  {
	TimeOn_Counter++;
 8001f40:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <fTask_1ms+0x28>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	4a06      	ldr	r2, [pc, #24]	@ (8001f60 <fTask_1ms+0x28>)
 8001f48:	6013      	str	r3, [r2, #0]
	LED_Tasks();
 8001f4a:	f003 fc2d 	bl	80057a8 <LED_Tasks>
	SBUS_IntegrityVerification();
 8001f4e:	f004 f8ed 	bl	800612c <SBUS_IntegrityVerification>
	NMEA_process_task();
 8001f52:	f000 fdb1 	bl	8002ab8 <NMEA_process_task>
    osDelay(1);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f012 fb7e 	bl	8014658 <osDelay>
	TimeOn_Counter++;
 8001f5c:	bf00      	nop
 8001f5e:	e7ef      	b.n	8001f40 <fTask_1ms+0x8>
 8001f60:	24000db4 	.word	0x24000db4

08001f64 <fTask_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_10ms */
void fTask_10ms(void const * argument)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_10ms */
  /* Infinite loop */
  for(;;)
  {
	BNO_Tasks();
 8001f6c:	f003 fb58 	bl	8005620 <BNO_Tasks>
	BMP280_calculate();
 8001f70:	f002 fda8 	bl	8004ac4 <BMP280_calculate>

	FlightTaskAttitude();
 8001f74:	f7ff f894 	bl	80010a0 <FlightTaskAttitude>

	PWM_Assign();
 8001f78:	f003 fcc8 	bl	800590c <PWM_Assign>
	SD_blackbox_write();
 8001f7c:	f004 f9b8 	bl	80062f0 <SD_blackbox_write>
    osDelay(10);
 8001f80:	200a      	movs	r0, #10
 8001f82:	f012 fb69 	bl	8014658 <osDelay>
  {
 8001f86:	bf00      	nop
 8001f88:	e7f0      	b.n	8001f6c <fTask_10ms+0x8>

08001f8a <fTask_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_100ms */
void fTask_100ms(void const * argument)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_100ms */
  /* Infinite loop */
  for(;;)
  {
	LR03_StateMachine();
 8001f92:	f003 fca3 	bl	80058dc <LR03_StateMachine>
    osDelay(100);
 8001f96:	2064      	movs	r0, #100	@ 0x64
 8001f98:	f012 fb5e 	bl	8014658 <osDelay>
	LR03_StateMachine();
 8001f9c:	bf00      	nop
 8001f9e:	e7f8      	b.n	8001f92 <fTask_100ms+0x8>

08001fa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	@ 0x28
 8001fa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
 8001fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	4b4e      	ldr	r3, [pc, #312]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8001fb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8001fc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b46      	ldr	r3, [pc, #280]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8001fd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fda:	4a45      	ldr	r2, [pc, #276]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fe4:	4b42      	ldr	r3, [pc, #264]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8001fe6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8001ff4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ff8:	4a3d      	ldr	r2, [pc, #244]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002002:	4b3b      	ldr	r3, [pc, #236]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8002004:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002010:	4b37      	ldr	r3, [pc, #220]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8002012:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002016:	4a36      	ldr	r2, [pc, #216]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002020:	4b33      	ldr	r3, [pc, #204]	@ (80020f0 <MX_GPIO_Init+0x150>)
 8002022:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800202e:	2200      	movs	r2, #0
 8002030:	f242 010f 	movw	r1, #8207	@ 0x200f
 8002034:	482f      	ldr	r0, [pc, #188]	@ (80020f4 <MX_GPIO_Init+0x154>)
 8002036:	f007 ffbd 	bl	8009fb4 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	2110      	movs	r1, #16
 800203e:	482e      	ldr	r0, [pc, #184]	@ (80020f8 <MX_GPIO_Init+0x158>)
 8002040:	f007 ffb8 	bl	8009fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8002044:	2200      	movs	r2, #0
 8002046:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800204a:	482c      	ldr	r0, [pc, #176]	@ (80020fc <MX_GPIO_Init+0x15c>)
 800204c:	f007 ffb2 	bl	8009fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8002050:	2200      	movs	r2, #0
 8002052:	2104      	movs	r1, #4
 8002054:	482a      	ldr	r0, [pc, #168]	@ (8002100 <MX_GPIO_Init+0x160>)
 8002056:	f007 ffad 	bl	8009fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800205a:	f242 030f 	movw	r3, #8207	@ 0x200f
 800205e:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002060:	2301      	movs	r3, #1
 8002062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4820      	ldr	r0, [pc, #128]	@ (80020f4 <MX_GPIO_Init+0x154>)
 8002074:	f007 fdee 	bl	8009c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002078:	2310      	movs	r3, #16
 800207a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207c:	2301      	movs	r3, #1
 800207e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4619      	mov	r1, r3
 800208e:	481a      	ldr	r0, [pc, #104]	@ (80020f8 <MX_GPIO_Init+0x158>)
 8002090:	f007 fde0 	bl	8009c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8002094:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	4813      	ldr	r0, [pc, #76]	@ (80020fc <MX_GPIO_Init+0x15c>)
 80020ae:	f007 fdd1 	bl	8009c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80020b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	480b      	ldr	r0, [pc, #44]	@ (80020f4 <MX_GPIO_Init+0x154>)
 80020c8:	f007 fdc4 	bl	8009c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 80020cc:	2304      	movs	r3, #4
 80020ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	4807      	ldr	r0, [pc, #28]	@ (8002100 <MX_GPIO_Init+0x160>)
 80020e4:	f007 fdb6 	bl	8009c54 <HAL_GPIO_Init>

}
 80020e8:	bf00      	nop
 80020ea:	3728      	adds	r7, #40	@ 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	58024400 	.word	0x58024400
 80020f4:	58020800 	.word	0x58020800
 80020f8:	58020000 	.word	0x58020000
 80020fc:	58020400 	.word	0x58020400
 8002100:	58020c00 	.word	0x58020c00

08002104 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <MX_I2C3_Init+0x74>)
 800210a:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <MX_I2C3_Init+0x78>)
 800210c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 800210e:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <MX_I2C3_Init+0x74>)
 8002110:	4a1b      	ldr	r2, [pc, #108]	@ (8002180 <MX_I2C3_Init+0x7c>)
 8002112:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002114:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <MX_I2C3_Init+0x74>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800211a:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <MX_I2C3_Init+0x74>)
 800211c:	2201      	movs	r2, #1
 800211e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002120:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <MX_I2C3_Init+0x74>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002126:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <MX_I2C3_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800212c:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <MX_I2C3_Init+0x74>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <MX_I2C3_Init+0x74>)
 8002134:	2200      	movs	r2, #0
 8002136:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002138:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <MX_I2C3_Init+0x74>)
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800213e:	480e      	ldr	r0, [pc, #56]	@ (8002178 <MX_I2C3_Init+0x74>)
 8002140:	f007 ff52 	bl	8009fe8 <HAL_I2C_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800214a:	f000 fe41 	bl	8002dd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800214e:	2100      	movs	r1, #0
 8002150:	4809      	ldr	r0, [pc, #36]	@ (8002178 <MX_I2C3_Init+0x74>)
 8002152:	f007 ffe5 	bl	800a120 <HAL_I2CEx_ConfigAnalogFilter>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800215c:	f000 fe38 	bl	8002dd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002160:	2100      	movs	r1, #0
 8002162:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_I2C3_Init+0x74>)
 8002164:	f008 f827 	bl	800a1b6 <HAL_I2CEx_ConfigDigitalFilter>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800216e:	f000 fe2f 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2400067c 	.word	0x2400067c
 800217c:	40005c00 	.word	0x40005c00
 8002180:	20b0ccff 	.word	0x20b0ccff

08002184 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b0bc      	sub	sp, #240	@ 0xf0
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	22c0      	movs	r2, #192	@ 0xc0
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f015 fb7e 	bl	80178a6 <memset>
  if(i2cHandle->Instance==I2C3)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a39      	ldr	r2, [pc, #228]	@ (8002294 <HAL_I2C_MspInit+0x110>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d16b      	bne.n	800228c <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80021b4:	f04f 0208 	mov.w	r2, #8
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c6:	f107 0318 	add.w	r3, r7, #24
 80021ca:	4618      	mov	r0, r3
 80021cc:	f009 f87a 	bl	800b2c4 <HAL_RCCEx_PeriphCLKConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80021d6:	f000 fdfb 	bl	8002dd0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <HAL_I2C_MspInit+0x114>)
 80021dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002298 <HAL_I2C_MspInit+0x114>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80021ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <HAL_I2C_MspInit+0x114>)
 80021ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f8:	4b27      	ldr	r3, [pc, #156]	@ (8002298 <HAL_I2C_MspInit+0x114>)
 80021fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021fe:	4a26      	ldr	r2, [pc, #152]	@ (8002298 <HAL_I2C_MspInit+0x114>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002208:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <HAL_I2C_MspInit+0x114>)
 800220a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002216:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800221a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800221e:	2312      	movs	r3, #18
 8002220:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002230:	2304      	movs	r3, #4
 8002232:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002236:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800223a:	4619      	mov	r1, r3
 800223c:	4817      	ldr	r0, [pc, #92]	@ (800229c <HAL_I2C_MspInit+0x118>)
 800223e:	f007 fd09 	bl	8009c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002242:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800224a:	2312      	movs	r3, #18
 800224c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800225c:	2304      	movs	r3, #4
 800225e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002262:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002266:	4619      	mov	r1, r3
 8002268:	480d      	ldr	r0, [pc, #52]	@ (80022a0 <HAL_I2C_MspInit+0x11c>)
 800226a:	f007 fcf3 	bl	8009c54 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_I2C_MspInit+0x114>)
 8002270:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002274:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <HAL_I2C_MspInit+0x114>)
 8002276:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800227a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_I2C_MspInit+0x114>)
 8002280:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002284:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800228c:	bf00      	nop
 800228e:	37f0      	adds	r7, #240	@ 0xf0
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40005c00 	.word	0x40005c00
 8002298:	58024400 	.word	0x58024400
 800229c:	58020800 	.word	0x58020800
 80022a0:	58020000 	.word	0x58020000

080022a4 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 80022b4:	b5b0      	push	{r4, r5, r7, lr}
 80022b6:	b0b2      	sub	sp, #200	@ 0xc8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 80022bc:	4ba9      	ldr	r3, [pc, #676]	@ (8002564 <NMEA_parser+0x2b0>)
 80022be:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80022c2:	461d      	mov	r5, r3
 80022c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022d4:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	2280      	movs	r2, #128	@ 0x80
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f015 fadd 	bl	80178a6 <memset>
	fields[num++]=message;
 80022ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	33c8      	adds	r3, #200	@ 0xc8
 80022fa:	443b      	add	r3, r7
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8002302:	e00f      	b.n	8002324 <NMEA_parser+0x70>
		*message++ = 0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 800230e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	33c8      	adds	r3, #200	@ 0xc8
 800231c:	443b      	add	r3, r7
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8002324:	212c      	movs	r1, #44	@ 0x2c
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f015 fac5 	bl	80178b6 <strchr>
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e7      	bne.n	8002304 <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	498c      	ldr	r1, [pc, #560]	@ (8002568 <NMEA_parser+0x2b4>)
 8002338:	4618      	mov	r0, r3
 800233a:	f7fd ffd9 	bl	80002f0 <strcmp>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11e      	bne.n	8002382 <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4618      	mov	r0, r3
 8002348:	f014 fb5e 	bl	8016a08 <atof>
 800234c:	eeb0 7b40 	vmov.f64	d7, d0
 8002350:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002354:	4b83      	ldr	r3, [pc, #524]	@ (8002564 <NMEA_parser+0x2b0>)
 8002356:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	4b81      	ldr	r3, [pc, #516]	@ (8002564 <NMEA_parser+0x2b0>)
 8002360:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4618      	mov	r0, r3
 8002366:	f014 fb4f 	bl	8016a08 <atof>
 800236a:	eeb0 7b40 	vmov.f64	d7, d0
 800236e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002372:	4b7c      	ldr	r3, [pc, #496]	@ (8002564 <NMEA_parser+0x2b0>)
 8002374:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	4b79      	ldr	r3, [pc, #484]	@ (8002564 <NMEA_parser+0x2b0>)
 800237e:	751a      	strb	r2, [r3, #20]
 8002380:	e10d      	b.n	800259e <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4979      	ldr	r1, [pc, #484]	@ (800256c <NMEA_parser+0x2b8>)
 8002386:	4618      	mov	r0, r3
 8002388:	f7fd ffb2 	bl	80002f0 <strcmp>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d130      	bne.n	80023f4 <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4618      	mov	r0, r3
 8002396:	f014 fb37 	bl	8016a08 <atof>
 800239a:	eeb0 7b40 	vmov.f64	d7, d0
 800239e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023a2:	4b70      	ldr	r3, [pc, #448]	@ (8002564 <NMEA_parser+0x2b0>)
 80023a4:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 80023a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023aa:	4618      	mov	r0, r3
 80023ac:	f014 fb2f 	bl	8016a0e <atoi>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002564 <NMEA_parser+0x2b0>)
 80023b4:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f014 fb25 	bl	8016a08 <atof>
 80023be:	eeb0 7b40 	vmov.f64	d7, d0
 80023c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023c6:	4b67      	ldr	r3, [pc, #412]	@ (8002564 <NMEA_parser+0x2b0>)
 80023c8:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	4b64      	ldr	r3, [pc, #400]	@ (8002564 <NMEA_parser+0x2b0>)
 80023d2:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f014 fb16 	bl	8016a08 <atof>
 80023dc:	eeb0 7b40 	vmov.f64	d7, d0
 80023e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002564 <NMEA_parser+0x2b0>)
 80023e6:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	781a      	ldrb	r2, [r3, #0]
 80023ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002564 <NMEA_parser+0x2b0>)
 80023f0:	751a      	strb	r2, [r3, #20]
 80023f2:	e0d4      	b.n	800259e <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	495e      	ldr	r1, [pc, #376]	@ (8002570 <NMEA_parser+0x2bc>)
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fd ff79 	bl	80002f0 <strcmp>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d116      	bne.n	8002432 <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	4618      	mov	r0, r3
 8002408:	f014 fb01 	bl	8016a0e <atoi>
 800240c:	ee07 0a90 	vmov	s15, r0
 8002410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002414:	4b53      	ldr	r3, [pc, #332]	@ (8002564 <NMEA_parser+0x2b0>)
 8002416:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 800241a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241c:	4618      	mov	r0, r3
 800241e:	f014 faf6 	bl	8016a0e <atoi>
 8002422:	ee07 0a90 	vmov	s15, r0
 8002426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800242a:	4b4e      	ldr	r3, [pc, #312]	@ (8002564 <NMEA_parser+0x2b0>)
 800242c:	edc3 7a08 	vstr	s15, [r3, #32]
 8002430:	e0b5      	b.n	800259e <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	494f      	ldr	r1, [pc, #316]	@ (8002574 <NMEA_parser+0x2c0>)
 8002436:	4618      	mov	r0, r3
 8002438:	f7fd ff5a 	bl	80002f0 <strcmp>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d15c      	bne.n	80024fc <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4618      	mov	r0, r3
 8002446:	f014 fadf 	bl	8016a08 <atof>
 800244a:	eeb0 7b40 	vmov.f64	d7, d0
 800244e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002452:	4b44      	ldr	r3, [pc, #272]	@ (8002564 <NMEA_parser+0x2b0>)
 8002454:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	4618      	mov	r0, r3
 800245c:	f014 fad4 	bl	8016a08 <atof>
 8002460:	eeb0 7b40 	vmov.f64	d7, d0
 8002464:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002468:	4b3e      	ldr	r3, [pc, #248]	@ (8002564 <NMEA_parser+0x2b0>)
 800246a:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b3c      	ldr	r3, [pc, #240]	@ (8002564 <NMEA_parser+0x2b0>)
 8002474:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4618      	mov	r0, r3
 800247a:	f014 fac5 	bl	8016a08 <atof>
 800247e:	eeb0 7b40 	vmov.f64	d7, d0
 8002482:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002486:	4b37      	ldr	r3, [pc, #220]	@ (8002564 <NMEA_parser+0x2b0>)
 8002488:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	4b34      	ldr	r3, [pc, #208]	@ (8002564 <NMEA_parser+0x2b0>)
 8002492:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	4618      	mov	r0, r3
 8002498:	f014 fab9 	bl	8016a0e <atoi>
 800249c:	4603      	mov	r3, r0
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b30      	ldr	r3, [pc, #192]	@ (8002564 <NMEA_parser+0x2b0>)
 80024a2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	4618      	mov	r0, r3
 80024aa:	f014 fab0 	bl	8016a0e <atoi>
 80024ae:	4603      	mov	r3, r0
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002564 <NMEA_parser+0x2b0>)
 80024b4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 80024b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ba:	4618      	mov	r0, r3
 80024bc:	f014 faa4 	bl	8016a08 <atof>
 80024c0:	eeb0 7b40 	vmov.f64	d7, d0
 80024c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024c8:	4b26      	ldr	r3, [pc, #152]	@ (8002564 <NMEA_parser+0x2b0>)
 80024ca:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 80024ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d0:	4618      	mov	r0, r3
 80024d2:	f014 fa99 	bl	8016a08 <atof>
 80024d6:	eeb0 7b40 	vmov.f64	d7, d0
 80024da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024de:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <NMEA_parser+0x2b0>)
 80024e0:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 80024e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e6:	4618      	mov	r0, r3
 80024e8:	f014 fa8e 	bl	8016a08 <atof>
 80024ec:	eeb0 7b40 	vmov.f64	d7, d0
 80024f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <NMEA_parser+0x2b0>)
 80024f6:	edc3 7a07 	vstr	s15, [r3, #28]
 80024fa:	e050      	b.n	800259e <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	491e      	ldr	r1, [pc, #120]	@ (8002578 <NMEA_parser+0x2c4>)
 8002500:	4618      	mov	r0, r3
 8002502:	f7fd fef5 	bl	80002f0 <strcmp>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d137      	bne.n	800257c <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	4618      	mov	r0, r3
 8002510:	f014 fa7d 	bl	8016a0e <atoi>
 8002514:	4603      	mov	r3, r0
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <NMEA_parser+0x2b0>)
 800251a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 800251e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002520:	4618      	mov	r0, r3
 8002522:	f014 fa71 	bl	8016a08 <atof>
 8002526:	eeb0 7b40 	vmov.f64	d7, d0
 800252a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800252e:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <NMEA_parser+0x2b0>)
 8002530:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 8002534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002536:	4618      	mov	r0, r3
 8002538:	f014 fa66 	bl	8016a08 <atof>
 800253c:	eeb0 7b40 	vmov.f64	d7, d0
 8002540:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002544:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <NMEA_parser+0x2b0>)
 8002546:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 800254a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800254c:	4618      	mov	r0, r3
 800254e:	f014 fa5b 	bl	8016a08 <atof>
 8002552:	eeb0 7b40 	vmov.f64	d7, d0
 8002556:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800255a:	4b02      	ldr	r3, [pc, #8]	@ (8002564 <NMEA_parser+0x2b0>)
 800255c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 8002560:	e01d      	b.n	800259e <NMEA_parser+0x2ea>
 8002562:	bf00      	nop
 8002564:	24000d78 	.word	0x24000d78
 8002568:	08019968 	.word	0x08019968
 800256c:	08019970 	.word	0x08019970
 8002570:	08019978 	.word	0x08019978
 8002574:	08019980 	.word	0x08019980
 8002578:	08019988 	.word	0x08019988

	}else if(strcmp(fields[0],"$GPGSV")==0){
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4931      	ldr	r1, [pc, #196]	@ (8002644 <NMEA_parser+0x390>)
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd feb5 	bl	80002f0 <strcmp>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d108      	bne.n	800259e <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4618      	mov	r0, r3
 8002590:	f014 fa3d 	bl	8016a0e <atoi>
 8002594:	4603      	mov	r3, r0
 8002596:	b2da      	uxtb	r2, r3
 8002598:	4b2b      	ldr	r3, [pc, #172]	@ (8002648 <NMEA_parser+0x394>)
 800259a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 800259e:	4b2a      	ldr	r3, [pc, #168]	@ (8002648 <NMEA_parser+0x394>)
 80025a0:	ed93 7a08 	vldr	s14, [r3, #32]
 80025a4:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80025a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025b0:	ee17 3a90 	vmov	r3, s15
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bfb8      	it	lt
 80025b8:	425b      	neglt	r3, r3
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025c2:	4b22      	ldr	r3, [pc, #136]	@ (800264c <NMEA_parser+0x398>)
 80025c4:	edd3 7a00 	vldr	s15, [r3]
 80025c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d0:	dd02      	ble.n	80025d8 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 80025d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <NMEA_parser+0x39c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <NMEA_parser+0x394>)
 80025da:	ed93 7a08 	vldr	s14, [r3, #32]
 80025de:	4b1d      	ldr	r3, [pc, #116]	@ (8002654 <NMEA_parser+0x3a0>)
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	dd0c      	ble.n	8002608 <NMEA_parser+0x354>
 80025ee:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80025f2:	4b18      	ldr	r3, [pc, #96]	@ (8002654 <NMEA_parser+0x3a0>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	d802      	bhi.n	8002608 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 8002602:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <NMEA_parser+0x3a4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8002608:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <NMEA_parser+0x394>)
 800260a:	ed93 7a08 	vldr	s14, [r3, #32]
 800260e:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <NMEA_parser+0x3a0>)
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261c:	d400      	bmi.n	8002620 <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 800261e:	e00d      	b.n	800263c <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8002620:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <NMEA_parser+0x3a0>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002632:	da00      	bge.n	8002636 <NMEA_parser+0x382>
}
 8002634:	e002      	b.n	800263c <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <NMEA_parser+0x3a8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4798      	blx	r3
}
 800263c:	bf00      	nop
 800263e:	37c8      	adds	r7, #200	@ 0xc8
 8002640:	46bd      	mov	sp, r7
 8002642:	bdb0      	pop	{r4, r5, r7, pc}
 8002644:	08019990 	.word	0x08019990
 8002648:	24000d78 	.word	0x24000d78
 800264c:	24000d60 	.word	0x24000d60
 8002650:	24000d5c 	.word	0x24000d5c
 8002654:	24000d68 	.word	0x24000d68
 8002658:	24000d64 	.word	0x24000d64
 800265c:	24000d6c 	.word	0x24000d6c

08002660 <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	460a      	mov	r2, r1
 800266a:	71fb      	strb	r3, [r7, #7]
 800266c:	4613      	mov	r3, r2
 800266e:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	2b39      	cmp	r3, #57	@ 0x39
 8002674:	d803      	bhi.n	800267e <hx2int+0x1e>
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	3b30      	subs	r3, #48	@ 0x30
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	e002      	b.n	8002684 <hx2int+0x24>
	else n2=n2-'A'+10;
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	3b37      	subs	r3, #55	@ 0x37
 8002682:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8002684:	79bb      	ldrb	r3, [r7, #6]
 8002686:	2b39      	cmp	r3, #57	@ 0x39
 8002688:	d803      	bhi.n	8002692 <hx2int+0x32>
 800268a:	79bb      	ldrb	r3, [r7, #6]
 800268c:	3b30      	subs	r3, #48	@ 0x30
 800268e:	71bb      	strb	r3, [r7, #6]
 8002690:	e002      	b.n	8002698 <hx2int+0x38>
	else n1=n1-'A'+10;
 8002692:	79bb      	ldrb	r3, [r7, #6]
 8002694:	3b37      	subs	r3, #55	@ 0x37
 8002696:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	b2da      	uxtb	r2, r3
 800269e:	79bb      	ldrb	r3, [r7, #6]
 80026a0:	4413      	add	r3, r2
 80026a2:	b2db      	uxtb	r3, r3

}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 80026bc:	2300      	movs	r3, #0
 80026be:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 80026c0:	e009      	b.n	80026d6 <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	73fa      	strb	r2, [r7, #15]
 80026c8:	461a      	mov	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	7bbb      	ldrb	r3, [r7, #14]
 80026d2:	4053      	eors	r3, r2
 80026d4:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b2a      	cmp	r3, #42	@ 0x2a
 80026e0:	d002      	beq.n	80026e8 <NMEA_checksum_clc+0x38>
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b7d      	cmp	r3, #125	@ 0x7d
 80026e6:	d9ec      	bls.n	80026c2 <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	3301      	adds	r3, #1
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	7818      	ldrb	r0, [r3, #0]
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	3302      	adds	r3, #2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7ff ffaf 	bl	8002660 <hx2int>
 8002702:	4603      	mov	r3, r0
 8002704:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8002706:	7b7a      	ldrb	r2, [r7, #13]
 8002708:	7bbb      	ldrb	r3, [r7, #14]
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 800270e:	2302      	movs	r3, #2
 8002710:	e000      	b.n	8002714 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 8002712:	2300      	movs	r3, #0


}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
	int index = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 8002726:	e005      	b.n	8002734 <NMEA_read_line+0x18>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	4a2b      	ldr	r2, [pc, #172]	@ (80027dc <NMEA_read_line+0xc0>)
 8002730:	2100      	movs	r1, #0
 8002732:	54d1      	strb	r1, [r2, r3]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b7f      	cmp	r3, #127	@ 0x7f
 8002738:	ddf6      	ble.n	8002728 <NMEA_read_line+0xc>

	index = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 800273e:	e01c      	b.n	800277a <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8002740:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <NMEA_read_line+0xc4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a27      	ldr	r2, [pc, #156]	@ (80027e4 <NMEA_read_line+0xc8>)
 8002746:	5cd1      	ldrb	r1, [r2, r3]
 8002748:	4a24      	ldr	r2, [pc, #144]	@ (80027dc <NMEA_read_line+0xc0>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	460a      	mov	r2, r1
 8002750:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8002752:	4b23      	ldr	r3, [pc, #140]	@ (80027e0 <NMEA_read_line+0xc4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a23      	ldr	r2, [pc, #140]	@ (80027e4 <NMEA_read_line+0xc8>)
 8002758:	2100      	movs	r1, #0
 800275a:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 800275c:	4b20      	ldr	r3, [pc, #128]	@ (80027e0 <NMEA_read_line+0xc4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	425a      	negs	r2, r3
 8002764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002768:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800276c:	bf58      	it	pl
 800276e:	4253      	negpl	r3, r2
 8002770:	4a1b      	ldr	r2, [pc, #108]	@ (80027e0 <NMEA_read_line+0xc4>)
 8002772:	6013      	str	r3, [r2, #0]
		++index;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3301      	adds	r3, #1
 8002778:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 800277a:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <NMEA_read_line+0xc4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a19      	ldr	r2, [pc, #100]	@ (80027e4 <NMEA_read_line+0xc8>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	2b0a      	cmp	r3, #10
 8002784:	d002      	beq.n	800278c <NMEA_read_line+0x70>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b7d      	cmp	r3, #125	@ 0x7d
 800278a:	ddd9      	ble.n	8002740 <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 800278c:	4b14      	ldr	r3, [pc, #80]	@ (80027e0 <NMEA_read_line+0xc4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a14      	ldr	r2, [pc, #80]	@ (80027e4 <NMEA_read_line+0xc8>)
 8002792:	5cd1      	ldrb	r1, [r2, r3]
 8002794:	4a11      	ldr	r2, [pc, #68]	@ (80027dc <NMEA_read_line+0xc0>)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	460a      	mov	r2, r1
 800279c:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 800279e:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <NMEA_read_line+0xc4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a10      	ldr	r2, [pc, #64]	@ (80027e4 <NMEA_read_line+0xc8>)
 80027a4:	2100      	movs	r1, #0
 80027a6:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 80027a8:	4b0d      	ldr	r3, [pc, #52]	@ (80027e0 <NMEA_read_line+0xc4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	425a      	negs	r2, r3
 80027b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80027b8:	bf58      	it	pl
 80027ba:	4253      	negpl	r3, r2
 80027bc:	4a08      	ldr	r2, [pc, #32]	@ (80027e0 <NMEA_read_line+0xc4>)
 80027be:	6013      	str	r3, [r2, #0]
	++index;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3301      	adds	r3, #1
 80027c4:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 80027c6:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <NMEA_read_line+0xcc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	4a06      	ldr	r2, [pc, #24]	@ (80027e8 <NMEA_read_line+0xcc>)
 80027ce:	6013      	str	r3, [r2, #0]

}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	24000cd0 	.word	0x24000cd0
 80027e0:	24000d54 	.word	0x24000d54
 80027e4:	240008d0 	.word	0x240008d0
 80027e8:	24000d58 	.word	0x24000d58

080027ec <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 80027f6:	200a      	movs	r0, #10
 80027f8:	f003 fe62 	bl	80064c0 <HAL_Delay>
	NMEA_huart=huart;
 80027fc:	4a12      	ldr	r2, [pc, #72]	@ (8002848 <NMEA_init+0x5c>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8002802:	4a12      	ldr	r2, [pc, #72]	@ (800284c <NMEA_init+0x60>)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8002808:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <NMEA_init+0x5c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <NMEA_init+0x5c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0210 	orr.w	r2, r2, #16
 800281a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 800281c:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <NMEA_init+0x5c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002824:	490a      	ldr	r1, [pc, #40]	@ (8002850 <NMEA_init+0x64>)
 8002826:	4618      	mov	r0, r3
 8002828:	f00c ff58 	bl	800f6dc <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 800282c:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <NMEA_init+0x68>)
 800282e:	4a0a      	ldr	r2, [pc, #40]	@ (8002858 <NMEA_init+0x6c>)
 8002830:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <NMEA_init+0x70>)
 8002834:	4a08      	ldr	r2, [pc, #32]	@ (8002858 <NMEA_init+0x6c>)
 8002836:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <NMEA_init+0x74>)
 800283a:	4a07      	ldr	r2, [pc, #28]	@ (8002858 <NMEA_init+0x6c>)
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	24000d70 	.word	0x24000d70
 800284c:	24000d74 	.word	0x24000d74
 8002850:	240006d0 	.word	0x240006d0
 8002854:	24000d5c 	.word	0x24000d5c
 8002858:	080022a5 	.word	0x080022a5
 800285c:	24000d64 	.word	0x24000d64
 8002860:	24000d6c 	.word	0x24000d6c

08002864 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 800286e:	4b2d      	ldr	r3, [pc, #180]	@ (8002924 <NMEA_UART_DMA_get_char+0xc0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3301      	adds	r3, #1
 8002874:	425a      	negs	r2, r3
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800287e:	bf58      	it	pl
 8002880:	4253      	negpl	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8002888:	4b27      	ldr	r3, [pc, #156]	@ (8002928 <NMEA_UART_DMA_get_char+0xc4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	429a      	cmp	r2, r3
 8002890:	d130      	bne.n	80028f4 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002892:	e010      	b.n	80028b6 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8002894:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <NMEA_UART_DMA_get_char+0xc4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a24      	ldr	r2, [pc, #144]	@ (800292c <NMEA_UART_DMA_get_char+0xc8>)
 800289a:	2100      	movs	r1, #0
 800289c:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 800289e:	4b22      	ldr	r3, [pc, #136]	@ (8002928 <NMEA_UART_DMA_get_char+0xc4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	425a      	negs	r2, r3
 80028a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80028ae:	bf58      	it	pl
 80028b0:	4253      	negpl	r3, r2
 80028b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002928 <NMEA_UART_DMA_get_char+0xc4>)
 80028b4:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 80028b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002928 <NMEA_UART_DMA_get_char+0xc4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1c      	ldr	r2, [pc, #112]	@ (800292c <NMEA_UART_DMA_get_char+0xc8>)
 80028bc:	5cd3      	ldrb	r3, [r2, r3]
 80028be:	2b0a      	cmp	r3, #10
 80028c0:	d005      	beq.n	80028ce <NMEA_UART_DMA_get_char+0x6a>
 80028c2:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <NMEA_UART_DMA_get_char+0xc4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a19      	ldr	r2, [pc, #100]	@ (800292c <NMEA_UART_DMA_get_char+0xc8>)
 80028c8:	5cd3      	ldrb	r3, [r2, r3]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1e2      	bne.n	8002894 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 80028ce:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <NMEA_UART_DMA_get_char+0xc4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a16      	ldr	r2, [pc, #88]	@ (800292c <NMEA_UART_DMA_get_char+0xc8>)
 80028d4:	2100      	movs	r1, #0
 80028d6:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 80028d8:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <NMEA_UART_DMA_get_char+0xc4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	425a      	negs	r2, r3
 80028e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80028e8:	bf58      	it	pl
 80028ea:	4253      	negpl	r3, r2
 80028ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002928 <NMEA_UART_DMA_get_char+0xc4>)
 80028ee:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 80028f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <NMEA_UART_DMA_get_char+0xc0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	490c      	ldr	r1, [pc, #48]	@ (800292c <NMEA_UART_DMA_get_char+0xc8>)
 80028fa:	79fa      	ldrb	r2, [r7, #7]
 80028fc:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 80028fe:	4a09      	ldr	r2, [pc, #36]	@ (8002924 <NMEA_UART_DMA_get_char+0xc0>)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	2b0a      	cmp	r3, #10
 8002908:	d104      	bne.n	8002914 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 800290a:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <NMEA_UART_DMA_get_char+0xcc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3301      	adds	r3, #1
 8002910:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <NMEA_UART_DMA_get_char+0xcc>)
 8002912:	6013      	str	r3, [r2, #0]
	}

	return stat;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	24000d50 	.word	0x24000d50
 8002928:	24000d54 	.word	0x24000d54
 800292c:	240008d0 	.word	0x240008d0
 8002930:	24000d58 	.word	0x24000d58

08002934 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 800293e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a4a      	ldr	r2, [pc, #296]	@ (8002a70 <NMEA_UART_DMA_copy_buffer+0x13c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d059      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 800294a:	4b48      	ldr	r3, [pc, #288]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a48      	ldr	r2, [pc, #288]	@ (8002a74 <NMEA_UART_DMA_copy_buffer+0x140>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d053      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 8002956:	4b45      	ldr	r3, [pc, #276]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a46      	ldr	r2, [pc, #280]	@ (8002a78 <NMEA_UART_DMA_copy_buffer+0x144>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d04d      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 8002962:	4b42      	ldr	r3, [pc, #264]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a44      	ldr	r2, [pc, #272]	@ (8002a7c <NMEA_UART_DMA_copy_buffer+0x148>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d047      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 800296e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a42      	ldr	r2, [pc, #264]	@ (8002a80 <NMEA_UART_DMA_copy_buffer+0x14c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d041      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 800297a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a40      	ldr	r2, [pc, #256]	@ (8002a84 <NMEA_UART_DMA_copy_buffer+0x150>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d03b      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 8002986:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a3e      	ldr	r2, [pc, #248]	@ (8002a88 <NMEA_UART_DMA_copy_buffer+0x154>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d035      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 8002992:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a3c      	ldr	r2, [pc, #240]	@ (8002a8c <NMEA_UART_DMA_copy_buffer+0x158>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d02f      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 800299e:	4b33      	ldr	r3, [pc, #204]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002a90 <NMEA_UART_DMA_copy_buffer+0x15c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d029      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 80029aa:	4b30      	ldr	r3, [pc, #192]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a38      	ldr	r2, [pc, #224]	@ (8002a94 <NMEA_UART_DMA_copy_buffer+0x160>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d023      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 80029b6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a36      	ldr	r2, [pc, #216]	@ (8002a98 <NMEA_UART_DMA_copy_buffer+0x164>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01d      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 80029c2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a34      	ldr	r2, [pc, #208]	@ (8002a9c <NMEA_UART_DMA_copy_buffer+0x168>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d017      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 80029ce:	4b27      	ldr	r3, [pc, #156]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a32      	ldr	r2, [pc, #200]	@ (8002aa0 <NMEA_UART_DMA_copy_buffer+0x16c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d011      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 80029da:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a30      	ldr	r2, [pc, #192]	@ (8002aa4 <NMEA_UART_DMA_copy_buffer+0x170>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00b      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2e      	ldr	r2, [pc, #184]	@ (8002aa8 <NMEA_UART_DMA_copy_buffer+0x174>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d005      	beq.n	80029fe <NMEA_UART_DMA_copy_buffer+0xca>
 80029f2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2c      	ldr	r2, [pc, #176]	@ (8002aac <NMEA_UART_DMA_copy_buffer+0x178>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d106      	bne.n	8002a0c <NMEA_UART_DMA_copy_buffer+0xd8>
 80029fe:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002a0a:	e005      	b.n	8002a18 <NMEA_UART_DMA_copy_buffer+0xe4>
 8002a0c:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8002a18:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	e013      	b.n	8002a48 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 8002a20:	4a23      	ldr	r2, [pc, #140]	@ (8002ab0 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4413      	add	r3, r2
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff1b 	bl	8002864 <NMEA_UART_DMA_get_char>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8002a38:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab0 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	3301      	adds	r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	dbe7      	blt.n	8002a20 <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002a50:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <NMEA_UART_DMA_copy_buffer+0x180>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a58:	4915      	ldr	r1, [pc, #84]	@ (8002ab0 <NMEA_UART_DMA_copy_buffer+0x17c>)
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f00c fe3e 	bl	800f6dc <HAL_UART_Receive_DMA>
	return stat;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	24000d74 	.word	0x24000d74
 8002a70:	40020010 	.word	0x40020010
 8002a74:	40020028 	.word	0x40020028
 8002a78:	40020040 	.word	0x40020040
 8002a7c:	40020058 	.word	0x40020058
 8002a80:	40020070 	.word	0x40020070
 8002a84:	40020088 	.word	0x40020088
 8002a88:	400200a0 	.word	0x400200a0
 8002a8c:	400200b8 	.word	0x400200b8
 8002a90:	40020410 	.word	0x40020410
 8002a94:	40020428 	.word	0x40020428
 8002a98:	40020440 	.word	0x40020440
 8002a9c:	40020458 	.word	0x40020458
 8002aa0:	40020470 	.word	0x40020470
 8002aa4:	40020488 	.word	0x40020488
 8002aa8:	400204a0 	.word	0x400204a0
 8002aac:	400204b8 	.word	0x400204b8
 8002ab0:	240006d0 	.word	0x240006d0
 8002ab4:	24000d70 	.word	0x24000d70

08002ab8 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8002ac2:	e00d      	b.n	8002ae0 <NMEA_process_task+0x28>
		NMEA_read_line();
 8002ac4:	f7ff fe2a 	bl	800271c <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8002ac8:	480a      	ldr	r0, [pc, #40]	@ (8002af4 <NMEA_process_task+0x3c>)
 8002aca:	f7ff fdf1 	bl	80026b0 <NMEA_checksum_clc>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d103      	bne.n	8002adc <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8002ad4:	4807      	ldr	r0, [pc, #28]	@ (8002af4 <NMEA_process_task+0x3c>)
 8002ad6:	f7ff fbed 	bl	80022b4 <NMEA_parser>
 8002ada:	e001      	b.n	8002ae0 <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8002adc:	2302      	movs	r3, #2
 8002ade:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <NMEA_process_task+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	dced      	bgt.n	8002ac4 <NMEA_process_task+0xc>
	}
	return stat;
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	24000cd0 	.word	0x24000cd0
 8002af8:	24000d58 	.word	0x24000d58

08002afc <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8002b06:	4b0d      	ldr	r3, [pc, #52]	@ (8002b3c <user_UART_IDLE_IT_handler+0x40>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d10d      	bne.n	8002b32 <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8002b16:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <user_UART_IDLE_IT_handler+0x40>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <user_UART_IDLE_IT_handler+0x40>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f00c fe25 	bl	800f774 <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8002b2a:	f7ff ff03 	bl	8002934 <NMEA_UART_DMA_copy_buffer>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8002b32:	79fb      	ldrb	r3, [r7, #7]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	24000d70 	.word	0x24000d70

08002b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002b44:	f000 f906 	bl	8002d54 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b48:	f003 fc5e 	bl	8006408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b4c:	f000 f842 	bl	8002bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b50:	f7ff fa26 	bl	8001fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b54:	f7fe ffbe 	bl	8001ad4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002b58:	f7fe ffec 	bl	8001b34 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 8002b5c:	f7ff fad2 	bl	8002104 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002b60:	f000 f93c 	bl	8002ddc <MX_SPI1_Init>
  MX_SPI2_Init();
 8002b64:	f000 f990 	bl	8002e88 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002b68:	f000 fcc8 	bl	80034fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b6c:	f000 fd42 	bl	80035f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b70:	f000 fda6 	bl	80036c0 <MX_TIM4_Init>
  MX_UART4_Init();
 8002b74:	f000 ff5e 	bl	8003a34 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002b78:	f000 ffa8 	bl	8003acc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002b7c:	f001 f842 	bl	8003c04 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8002b80:	f000 fe1a 	bl	80037b8 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 8002b84:	f000 fff2 	bl	8003b6c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8002b88:	f00f ffe4 	bl	8012b54 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8002b8c:	f001 ff74 	bl	8004a78 <BMP280_init>
  //SD_init();
  SBUS_init();
 8002b90:	f002 ff20 	bl	80059d4 <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002b94:	2201      	movs	r2, #1
 8002b96:	4909      	ldr	r1, [pc, #36]	@ (8002bbc <main+0x7c>)
 8002b98:	4809      	ldr	r0, [pc, #36]	@ (8002bc0 <main+0x80>)
 8002b9a:	f00c fd9f 	bl	800f6dc <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4908      	ldr	r1, [pc, #32]	@ (8002bc4 <main+0x84>)
 8002ba2:	4809      	ldr	r0, [pc, #36]	@ (8002bc8 <main+0x88>)
 8002ba4:	f00c fd4e 	bl	800f644 <HAL_UART_Receive_IT>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8002ba8:	4908      	ldr	r1, [pc, #32]	@ (8002bcc <main+0x8c>)
 8002baa:	4809      	ldr	r0, [pc, #36]	@ (8002bd0 <main+0x90>)
 8002bac:	f7ff fe1e 	bl	80027ec <NMEA_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002bb0:	f7ff f978 	bl	8001ea4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002bb4:	f011 fcfd 	bl	80145b2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <main+0x78>
 8002bbc:	24001537 	.word	0x24001537
 8002bc0:	24001170 	.word	0x24001170
 8002bc4:	24000db0 	.word	0x24000db0
 8002bc8:	24001204 	.word	0x24001204
 8002bcc:	24001298 	.word	0x24001298
 8002bd0:	24001048 	.word	0x24001048

08002bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b09c      	sub	sp, #112	@ 0x70
 8002bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bde:	224c      	movs	r2, #76	@ 0x4c
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f014 fe5f 	bl	80178a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	2220      	movs	r2, #32
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f014 fe59 	bl	80178a6 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002bf4:	4b30      	ldr	r3, [pc, #192]	@ (8002cb8 <SystemClock_Config+0xe4>)
 8002bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002bfe:	2002      	movs	r0, #2
 8002c00:	f007 fb26 	bl	800a250 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002c04:	2300      	movs	r3, #0
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <SystemClock_Config+0xe8>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cbc <SystemClock_Config+0xe8>)
 8002c0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c12:	6193      	str	r3, [r2, #24]
 8002c14:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <SystemClock_Config+0xe8>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c1c:	603b      	str	r3, [r7, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002c20:	bf00      	nop
 8002c22:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <SystemClock_Config+0xe8>)
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2e:	d1f8      	bne.n	8002c22 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c30:	2302      	movs	r3, #2
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002c34:	2301      	movs	r3, #1
 8002c36:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002c38:	2340      	movs	r3, #64	@ 0x40
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c40:	2300      	movs	r3, #0
 8002c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c44:	2304      	movs	r3, #4
 8002c46:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8002c48:	2323      	movs	r3, #35	@ 0x23
 8002c4a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002c50:	2302      	movs	r3, #2
 8002c52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c54:	2302      	movs	r3, #2
 8002c56:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002c58:	230c      	movs	r3, #12
 8002c5a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f007 fb2b 	bl	800a2c4 <HAL_RCC_OscConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002c74:	f000 f8ac 	bl	8002dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c78:	233f      	movs	r3, #63	@ 0x3f
 8002c7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002c88:	2340      	movs	r3, #64	@ 0x40
 8002c8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002c8c:	2340      	movs	r3, #64	@ 0x40
 8002c8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002c96:	2340      	movs	r3, #64	@ 0x40
 8002c98:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	2106      	movs	r1, #6
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f007 ff42 	bl	800ab28 <HAL_RCC_ClockConfig>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <SystemClock_Config+0xda>
  {
    Error_Handler();
 8002caa:	f000 f891 	bl	8002dd0 <Error_Handler>
  }
}
 8002cae:	bf00      	nop
 8002cb0:	3770      	adds	r7, #112	@ 0x70
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	58024400 	.word	0x58024400
 8002cbc:	58024800 	.word	0x58024800

08002cc0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a18      	ldr	r2, [pc, #96]	@ (8002d30 <HAL_UART_RxCpltCallback+0x70>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10a      	bne.n	8002ce8 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 8002cd2:	4b18      	ldr	r3, [pc, #96]	@ (8002d34 <HAL_UART_RxCpltCallback+0x74>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 fe8a 	bl	80059f0 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4915      	ldr	r1, [pc, #84]	@ (8002d34 <HAL_UART_RxCpltCallback+0x74>)
 8002ce0:	4815      	ldr	r0, [pc, #84]	@ (8002d38 <HAL_UART_RxCpltCallback+0x78>)
 8002ce2:	f00c fcfb 	bl	800f6dc <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 8002ce6:	e01e      	b.n	8002d26 <HAL_UART_RxCpltCallback+0x66>
    else if (huart -> Instance == USART3){
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a13      	ldr	r2, [pc, #76]	@ (8002d3c <HAL_UART_RxCpltCallback+0x7c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d10a      	bne.n	8002d08 <HAL_UART_RxCpltCallback+0x48>
        BNO_Receive(BNO_BufferByte);
 8002cf2:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <HAL_UART_RxCpltCallback+0x80>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f002 fbf2 	bl	80054e0 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4910      	ldr	r1, [pc, #64]	@ (8002d40 <HAL_UART_RxCpltCallback+0x80>)
 8002d00:	4810      	ldr	r0, [pc, #64]	@ (8002d44 <HAL_UART_RxCpltCallback+0x84>)
 8002d02:	f00c fceb 	bl	800f6dc <HAL_UART_Receive_DMA>
}
 8002d06:	e00e      	b.n	8002d26 <HAL_UART_RxCpltCallback+0x66>
    else if(huart -> Instance == USART6){
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d48 <HAL_UART_RxCpltCallback+0x88>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d109      	bne.n	8002d26 <HAL_UART_RxCpltCallback+0x66>
    	LR03_Receive(LR03_RxByte);
 8002d12:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <HAL_UART_RxCpltCallback+0x8c>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f002 fdc4 	bl	80058a4 <LR03_Receive>
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	490b      	ldr	r1, [pc, #44]	@ (8002d4c <HAL_UART_RxCpltCallback+0x8c>)
 8002d20:	480b      	ldr	r0, [pc, #44]	@ (8002d50 <HAL_UART_RxCpltCallback+0x90>)
 8002d22:	f00c fc8f 	bl	800f644 <HAL_UART_Receive_IT>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40011000 	.word	0x40011000
 8002d34:	240016c1 	.word	0x240016c1
 8002d38:	240010dc 	.word	0x240010dc
 8002d3c:	40004800 	.word	0x40004800
 8002d40:	24001537 	.word	0x24001537
 8002d44:	24001170 	.word	0x24001170
 8002d48:	40011400 	.word	0x40011400
 8002d4c:	24000db0 	.word	0x24000db0
 8002d50:	24001204 	.word	0x24001204

08002d54 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002d5a:	463b      	mov	r3, r7
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002d66:	f003 fcaf 	bl	80066c8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002d76:	231f      	movs	r3, #31
 8002d78:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002d7a:	2387      	movs	r3, #135	@ 0x87
 8002d7c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002d82:	2300      	movs	r3, #0
 8002d84:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002d86:	2301      	movs	r3, #1
 8002d88:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002d96:	463b      	mov	r3, r7
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fccd 	bl	8006738 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002d9e:	2004      	movs	r0, #4
 8002da0:	f003 fcaa 	bl	80066f8 <HAL_MPU_Enable>

}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a04      	ldr	r2, [pc, #16]	@ (8002dcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002dbe:	f003 fb5f 	bl	8006480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40014800 	.word	0x40014800

08002dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd4:	b672      	cpsid	i
}
 8002dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dd8:	bf00      	nop
 8002dda:	e7fd      	b.n	8002dd8 <Error_Handler+0x8>

08002ddc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002de0:	4b27      	ldr	r3, [pc, #156]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002de2:	4a28      	ldr	r2, [pc, #160]	@ (8002e84 <MX_SPI1_Init+0xa8>)
 8002de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002de6:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002de8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002dec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002dee:	4b24      	ldr	r3, [pc, #144]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002df4:	4b22      	ldr	r3, [pc, #136]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002df6:	2207      	movs	r2, #7
 8002df8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dfa:	4b21      	ldr	r3, [pc, #132]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e00:	4b1f      	ldr	r3, [pc, #124]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e06:	4b1e      	ldr	r3, [pc, #120]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e08:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e10:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8002e14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e16:	4b1a      	ldr	r3, [pc, #104]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e1c:	4b18      	ldr	r3, [pc, #96]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e22:	4b17      	ldr	r3, [pc, #92]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002e28:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e2e:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e34:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002e36:	4b12      	ldr	r3, [pc, #72]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002e3c:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e42:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e48:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002e5a:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002e60:	4b07      	ldr	r3, [pc, #28]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002e66:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e6c:	4804      	ldr	r0, [pc, #16]	@ (8002e80 <MX_SPI1_Init+0xa4>)
 8002e6e:	f00a f809 	bl	800ce84 <HAL_SPI_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002e78:	f7ff ffaa 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	24000db8 	.word	0x24000db8
 8002e84:	40013000 	.word	0x40013000

08002e88 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002e8c:	4b27      	ldr	r3, [pc, #156]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002e8e:	4a28      	ldr	r2, [pc, #160]	@ (8002f30 <MX_SPI2_Init+0xa8>)
 8002e90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e92:	4b26      	ldr	r3, [pc, #152]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002e94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e9a:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ea0:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ea6:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eac:	4b1f      	ldr	r3, [pc, #124]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002eb4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002eb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002eba:	4b1c      	ldr	r3, [pc, #112]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002ebc:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002ec0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ec8:	4b18      	ldr	r3, [pc, #96]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ece:	4b17      	ldr	r3, [pc, #92]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002ed4:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002eda:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002edc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ee0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ee2:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ee8:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002eee:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f12:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f18:	4804      	ldr	r0, [pc, #16]	@ (8002f2c <MX_SPI2_Init+0xa4>)
 8002f1a:	f009 ffb3 	bl	800ce84 <HAL_SPI_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002f24:	f7ff ff54 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	24000e40 	.word	0x24000e40
 8002f30:	40003800 	.word	0x40003800

08002f34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b0bc      	sub	sp, #240	@ 0xf0
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f4c:	f107 0318 	add.w	r3, r7, #24
 8002f50:	22c0      	movs	r2, #192	@ 0xc0
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f014 fca6 	bl	80178a6 <memset>
  if(spiHandle->Instance==SPI1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a4c      	ldr	r2, [pc, #304]	@ (8003090 <HAL_SPI_MspInit+0x15c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d145      	bne.n	8002ff0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002f64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f74:	f107 0318 	add.w	r3, r7, #24
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f008 f9a3 	bl	800b2c4 <HAL_RCCEx_PeriphCLKConfig>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002f84:	f7ff ff24 	bl	8002dd0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f88:	4b42      	ldr	r3, [pc, #264]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 8002f8a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002f8e:	4a41      	ldr	r2, [pc, #260]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 8002f90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f94:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002f98:	4b3e      	ldr	r3, [pc, #248]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 8002f9a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002f9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 8002fa8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002fac:	4a39      	ldr	r2, [pc, #228]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002fb6:	4b37      	ldr	r3, [pc, #220]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 8002fb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002fc4:	23e0      	movs	r3, #224	@ 0xe0
 8002fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fdc:	2305      	movs	r3, #5
 8002fde:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	482b      	ldr	r0, [pc, #172]	@ (8003098 <HAL_SPI_MspInit+0x164>)
 8002fea:	f006 fe33 	bl	8009c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002fee:	e04a      	b.n	8003086 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a29      	ldr	r2, [pc, #164]	@ (800309c <HAL_SPI_MspInit+0x168>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d145      	bne.n	8003086 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002ffa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003006:	2300      	movs	r3, #0
 8003008:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800300a:	f107 0318 	add.w	r3, r7, #24
 800300e:	4618      	mov	r0, r3
 8003010:	f008 f958 	bl	800b2c4 <HAL_RCCEx_PeriphCLKConfig>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800301a:	f7ff fed9 	bl	8002dd0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800301e:	4b1d      	ldr	r3, [pc, #116]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 8003020:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003024:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 8003026:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800302a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800302e:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 8003030:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303c:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 800303e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003042:	4a14      	ldr	r2, [pc, #80]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <HAL_SPI_MspInit+0x160>)
 800304e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 800305a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800305e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003074:	2305      	movs	r3, #5
 8003076:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800307e:	4619      	mov	r1, r3
 8003080:	4807      	ldr	r0, [pc, #28]	@ (80030a0 <HAL_SPI_MspInit+0x16c>)
 8003082:	f006 fde7 	bl	8009c54 <HAL_GPIO_Init>
}
 8003086:	bf00      	nop
 8003088:	37f0      	adds	r7, #240	@ 0xf0
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40013000 	.word	0x40013000
 8003094:	58024400 	.word	0x58024400
 8003098:	58020000 	.word	0x58020000
 800309c:	40003800 	.word	0x40003800
 80030a0:	58020400 	.word	0x58020400

080030a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030aa:	4b0c      	ldr	r3, [pc, #48]	@ (80030dc <HAL_MspInit+0x38>)
 80030ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80030b0:	4a0a      	ldr	r2, [pc, #40]	@ (80030dc <HAL_MspInit+0x38>)
 80030b2:	f043 0302 	orr.w	r3, r3, #2
 80030b6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80030ba:	4b08      	ldr	r3, [pc, #32]	@ (80030dc <HAL_MspInit+0x38>)
 80030bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030c8:	2200      	movs	r2, #0
 80030ca:	210f      	movs	r1, #15
 80030cc:	f06f 0001 	mvn.w	r0, #1
 80030d0:	f003 fad2 	bl	8006678 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	58024400 	.word	0x58024400

080030e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08e      	sub	sp, #56	@ 0x38
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b0f      	cmp	r3, #15
 80030ec:	d844      	bhi.n	8003178 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80030ee:	2200      	movs	r2, #0
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	2076      	movs	r0, #118	@ 0x76
 80030f4:	f003 fac0 	bl	8006678 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80030f8:	2076      	movs	r0, #118	@ 0x76
 80030fa:	f003 fad7 	bl	80066ac <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80030fe:	4a24      	ldr	r2, [pc, #144]	@ (8003190 <HAL_InitTick+0xb0>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003104:	4b23      	ldr	r3, [pc, #140]	@ (8003194 <HAL_InitTick+0xb4>)
 8003106:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800310a:	4a22      	ldr	r2, [pc, #136]	@ (8003194 <HAL_InitTick+0xb4>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003110:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003114:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <HAL_InitTick+0xb4>)
 8003116:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800311a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003122:	f107 020c 	add.w	r2, r7, #12
 8003126:	f107 0310 	add.w	r3, r7, #16
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f008 f887 	bl	800b240 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003132:	f008 f86f 	bl	800b214 <HAL_RCC_GetPCLK2Freq>
 8003136:	4603      	mov	r3, r0
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800313c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313e:	4a16      	ldr	r2, [pc, #88]	@ (8003198 <HAL_InitTick+0xb8>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	0c9b      	lsrs	r3, r3, #18
 8003146:	3b01      	subs	r3, #1
 8003148:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800314a:	4b14      	ldr	r3, [pc, #80]	@ (800319c <HAL_InitTick+0xbc>)
 800314c:	4a14      	ldr	r2, [pc, #80]	@ (80031a0 <HAL_InitTick+0xc0>)
 800314e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003150:	4b12      	ldr	r3, [pc, #72]	@ (800319c <HAL_InitTick+0xbc>)
 8003152:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003156:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003158:	4a10      	ldr	r2, [pc, #64]	@ (800319c <HAL_InitTick+0xbc>)
 800315a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800315e:	4b0f      	ldr	r3, [pc, #60]	@ (800319c <HAL_InitTick+0xbc>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003164:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <HAL_InitTick+0xbc>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800316a:	480c      	ldr	r0, [pc, #48]	@ (800319c <HAL_InitTick+0xbc>)
 800316c:	f00b f831 	bl	800e1d2 <HAL_TIM_Base_Init>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d107      	bne.n	8003186 <HAL_InitTick+0xa6>
 8003176:	e001      	b.n	800317c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e005      	b.n	8003188 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800317c:	4807      	ldr	r0, [pc, #28]	@ (800319c <HAL_InitTick+0xbc>)
 800317e:	f00b f87f 	bl	800e280 <HAL_TIM_Base_Start_IT>
 8003182:	4603      	mov	r3, r0
 8003184:	e000      	b.n	8003188 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	3738      	adds	r7, #56	@ 0x38
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	240000a4 	.word	0x240000a4
 8003194:	58024400 	.word	0x58024400
 8003198:	431bde83 	.word	0x431bde83
 800319c:	24000ec8 	.word	0x24000ec8
 80031a0:	40014800 	.word	0x40014800

080031a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <NMI_Handler+0x4>

080031ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <HardFault_Handler+0x4>

080031b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <MemManage_Handler+0x4>

080031bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <BusFault_Handler+0x4>

080031c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <UsageFault_Handler+0x4>

080031cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80031e0:	4802      	ldr	r0, [pc, #8]	@ (80031ec <DMA1_Stream0_IRQHandler+0x10>)
 80031e2:	f004 fe45 	bl	8007e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	24001310 	.word	0x24001310

080031f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80031f4:	4802      	ldr	r0, [pc, #8]	@ (8003200 <DMA1_Stream1_IRQHandler+0x10>)
 80031f6:	f004 fe3b 	bl	8007e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	24001388 	.word	0x24001388

08003204 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003208:	4802      	ldr	r0, [pc, #8]	@ (8003214 <DMA1_Stream2_IRQHandler+0x10>)
 800320a:	f004 fe31 	bl	8007e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	24001298 	.word	0x24001298

08003218 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800321c:	4802      	ldr	r0, [pc, #8]	@ (8003228 <USART1_IRQHandler+0x10>)
 800321e:	f00c fc7b 	bl	800fb18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	240010dc 	.word	0x240010dc

0800322c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003230:	4802      	ldr	r0, [pc, #8]	@ (800323c <USART3_IRQHandler+0x10>)
 8003232:	f00c fc71 	bl	800fb18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	24001170 	.word	0x24001170

08003240 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 8003244:	f7ff fc5a 	bl	8002afc <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003248:	4802      	ldr	r0, [pc, #8]	@ (8003254 <UART4_IRQHandler+0x14>)
 800324a:	f00c fc65 	bl	800fb18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	24001048 	.word	0x24001048

08003258 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800325c:	4802      	ldr	r0, [pc, #8]	@ (8003268 <USART6_IRQHandler+0x10>)
 800325e:	f00c fc5b 	bl	800fb18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	24001204 	.word	0x24001204

0800326c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003270:	4802      	ldr	r0, [pc, #8]	@ (800327c <TIM17_IRQHandler+0x10>)
 8003272:	f00b f9e3 	bl	800e63c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	24000ec8 	.word	0x24000ec8

08003280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return 1;
 8003284:	2301      	movs	r3, #1
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <_kill>:

int _kill(int pid, int sig)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800329a:	f014 fb71 	bl	8017980 <__errno>
 800329e:	4603      	mov	r3, r0
 80032a0:	2216      	movs	r2, #22
 80032a2:	601a      	str	r2, [r3, #0]
  return -1;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <_exit>:

void _exit (int status)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032b8:	f04f 31ff 	mov.w	r1, #4294967295
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ffe7 	bl	8003290 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032c2:	bf00      	nop
 80032c4:	e7fd      	b.n	80032c2 <_exit+0x12>

080032c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e00a      	b.n	80032ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032d8:	f3af 8000 	nop.w
 80032dc:	4601      	mov	r1, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	60ba      	str	r2, [r7, #8]
 80032e4:	b2ca      	uxtb	r2, r1
 80032e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	3301      	adds	r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	dbf0      	blt.n	80032d8 <_read+0x12>
  }

  return len;
 80032f6:	687b      	ldr	r3, [r7, #4]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	e009      	b.n	8003326 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	60ba      	str	r2, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3301      	adds	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	dbf1      	blt.n	8003312 <_write+0x12>
  }
  return len;
 800332e:	687b      	ldr	r3, [r7, #4]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_close>:

int _close(int file)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003360:	605a      	str	r2, [r3, #4]
  return 0;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <_isatty>:

int _isatty(int file)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003378:	2301      	movs	r3, #1
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a8:	4a14      	ldr	r2, [pc, #80]	@ (80033fc <_sbrk+0x5c>)
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <_sbrk+0x60>)
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033b4:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <_sbrk+0x64>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033bc:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <_sbrk+0x64>)
 80033be:	4a12      	ldr	r2, [pc, #72]	@ (8003408 <_sbrk+0x68>)
 80033c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033c2:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <_sbrk+0x64>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d207      	bcs.n	80033e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033d0:	f014 fad6 	bl	8017980 <__errno>
 80033d4:	4603      	mov	r3, r0
 80033d6:	220c      	movs	r2, #12
 80033d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
 80033de:	e009      	b.n	80033f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033e0:	4b08      	ldr	r3, [pc, #32]	@ (8003404 <_sbrk+0x64>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033e6:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <_sbrk+0x64>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	4a05      	ldr	r2, [pc, #20]	@ (8003404 <_sbrk+0x64>)
 80033f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	24100000 	.word	0x24100000
 8003400:	00000400 	.word	0x00000400
 8003404:	24000f14 	.word	0x24000f14
 8003408:	24006838 	.word	0x24006838

0800340c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003410:	4b32      	ldr	r3, [pc, #200]	@ (80034dc <SystemInit+0xd0>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003416:	4a31      	ldr	r2, [pc, #196]	@ (80034dc <SystemInit+0xd0>)
 8003418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800341c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003420:	4b2f      	ldr	r3, [pc, #188]	@ (80034e0 <SystemInit+0xd4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	2b02      	cmp	r3, #2
 800342a:	d807      	bhi.n	800343c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800342c:	4b2c      	ldr	r3, [pc, #176]	@ (80034e0 <SystemInit+0xd4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 030f 	bic.w	r3, r3, #15
 8003434:	4a2a      	ldr	r2, [pc, #168]	@ (80034e0 <SystemInit+0xd4>)
 8003436:	f043 0303 	orr.w	r3, r3, #3
 800343a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800343c:	4b29      	ldr	r3, [pc, #164]	@ (80034e4 <SystemInit+0xd8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a28      	ldr	r2, [pc, #160]	@ (80034e4 <SystemInit+0xd8>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003448:	4b26      	ldr	r3, [pc, #152]	@ (80034e4 <SystemInit+0xd8>)
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800344e:	4b25      	ldr	r3, [pc, #148]	@ (80034e4 <SystemInit+0xd8>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4924      	ldr	r1, [pc, #144]	@ (80034e4 <SystemInit+0xd8>)
 8003454:	4b24      	ldr	r3, [pc, #144]	@ (80034e8 <SystemInit+0xdc>)
 8003456:	4013      	ands	r3, r2
 8003458:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800345a:	4b21      	ldr	r3, [pc, #132]	@ (80034e0 <SystemInit+0xd4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003466:	4b1e      	ldr	r3, [pc, #120]	@ (80034e0 <SystemInit+0xd4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 030f 	bic.w	r3, r3, #15
 800346e:	4a1c      	ldr	r2, [pc, #112]	@ (80034e0 <SystemInit+0xd4>)
 8003470:	f043 0303 	orr.w	r3, r3, #3
 8003474:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003476:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <SystemInit+0xd8>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800347c:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <SystemInit+0xd8>)
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003482:	4b18      	ldr	r3, [pc, #96]	@ (80034e4 <SystemInit+0xd8>)
 8003484:	2200      	movs	r2, #0
 8003486:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003488:	4b16      	ldr	r3, [pc, #88]	@ (80034e4 <SystemInit+0xd8>)
 800348a:	4a18      	ldr	r2, [pc, #96]	@ (80034ec <SystemInit+0xe0>)
 800348c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800348e:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <SystemInit+0xd8>)
 8003490:	4a17      	ldr	r2, [pc, #92]	@ (80034f0 <SystemInit+0xe4>)
 8003492:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003494:	4b13      	ldr	r3, [pc, #76]	@ (80034e4 <SystemInit+0xd8>)
 8003496:	4a17      	ldr	r2, [pc, #92]	@ (80034f4 <SystemInit+0xe8>)
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800349a:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <SystemInit+0xd8>)
 800349c:	2200      	movs	r2, #0
 800349e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80034a0:	4b10      	ldr	r3, [pc, #64]	@ (80034e4 <SystemInit+0xd8>)
 80034a2:	4a14      	ldr	r2, [pc, #80]	@ (80034f4 <SystemInit+0xe8>)
 80034a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80034a6:	4b0f      	ldr	r3, [pc, #60]	@ (80034e4 <SystemInit+0xd8>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80034ac:	4b0d      	ldr	r3, [pc, #52]	@ (80034e4 <SystemInit+0xd8>)
 80034ae:	4a11      	ldr	r2, [pc, #68]	@ (80034f4 <SystemInit+0xe8>)
 80034b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80034b2:	4b0c      	ldr	r3, [pc, #48]	@ (80034e4 <SystemInit+0xd8>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034b8:	4b0a      	ldr	r3, [pc, #40]	@ (80034e4 <SystemInit+0xd8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a09      	ldr	r2, [pc, #36]	@ (80034e4 <SystemInit+0xd8>)
 80034be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80034c4:	4b07      	ldr	r3, [pc, #28]	@ (80034e4 <SystemInit+0xd8>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <SystemInit+0xec>)
 80034cc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80034d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000ed00 	.word	0xe000ed00
 80034e0:	52002000 	.word	0x52002000
 80034e4:	58024400 	.word	0x58024400
 80034e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80034ec:	02020200 	.word	0x02020200
 80034f0:	01ff0000 	.word	0x01ff0000
 80034f4:	01010280 	.word	0x01010280
 80034f8:	52004000 	.word	0x52004000

080034fc <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	@ 0x28
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003502:	f107 031c 	add.w	r3, r7, #28
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800350e:	463b      	mov	r3, r7
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	611a      	str	r2, [r3, #16]
 800351c:	615a      	str	r2, [r3, #20]
 800351e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003520:	4b33      	ldr	r3, [pc, #204]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 8003522:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8003528:	4b31      	ldr	r3, [pc, #196]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 800352a:	f240 1217 	movw	r2, #279	@ 0x117
 800352e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003530:	4b2f      	ldr	r3, [pc, #188]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8003536:	4b2e      	ldr	r3, [pc, #184]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 8003538:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800353c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800353e:	4b2c      	ldr	r3, [pc, #176]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 8003540:	2200      	movs	r2, #0
 8003542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003544:	4b2a      	ldr	r3, [pc, #168]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 8003546:	2280      	movs	r2, #128	@ 0x80
 8003548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800354a:	4829      	ldr	r0, [pc, #164]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 800354c:	f00a ff10 	bl	800e370 <HAL_TIM_PWM_Init>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8003556:	f7ff fc3b 	bl	8002dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003562:	f107 031c 	add.w	r3, r7, #28
 8003566:	4619      	mov	r1, r3
 8003568:	4821      	ldr	r0, [pc, #132]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 800356a:	f00b fe4d 	bl	800f208 <HAL_TIMEx_MasterConfigSynchronization>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8003574:	f7ff fc2c 	bl	8002dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003578:	2360      	movs	r3, #96	@ 0x60
 800357a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003588:	463b      	mov	r3, r7
 800358a:	2200      	movs	r2, #0
 800358c:	4619      	mov	r1, r3
 800358e:	4818      	ldr	r0, [pc, #96]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 8003590:	f00b f95c 	bl	800e84c <HAL_TIM_PWM_ConfigChannel>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800359a:	f7ff fc19 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800359e:	463b      	mov	r3, r7
 80035a0:	2204      	movs	r2, #4
 80035a2:	4619      	mov	r1, r3
 80035a4:	4812      	ldr	r0, [pc, #72]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 80035a6:	f00b f951 	bl	800e84c <HAL_TIM_PWM_ConfigChannel>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80035b0:	f7ff fc0e 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035b4:	463b      	mov	r3, r7
 80035b6:	2208      	movs	r2, #8
 80035b8:	4619      	mov	r1, r3
 80035ba:	480d      	ldr	r0, [pc, #52]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 80035bc:	f00b f946 	bl	800e84c <HAL_TIM_PWM_ConfigChannel>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 80035c6:	f7ff fc03 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035ca:	463b      	mov	r3, r7
 80035cc:	220c      	movs	r2, #12
 80035ce:	4619      	mov	r1, r3
 80035d0:	4807      	ldr	r0, [pc, #28]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 80035d2:	f00b f93b 	bl	800e84c <HAL_TIM_PWM_ConfigChannel>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80035dc:	f7ff fbf8 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80035e0:	4803      	ldr	r0, [pc, #12]	@ (80035f0 <MX_TIM2_Init+0xf4>)
 80035e2:	f000 f97d 	bl	80038e0 <HAL_TIM_MspPostInit>

}
 80035e6:	bf00      	nop
 80035e8:	3728      	adds	r7, #40	@ 0x28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	24000f18 	.word	0x24000f18

080035f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	@ 0x28
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035fa:	f107 031c 	add.w	r3, r7, #28
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003606:	463b      	mov	r3, r7
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
 8003614:	615a      	str	r2, [r3, #20]
 8003616:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003618:	4b27      	ldr	r3, [pc, #156]	@ (80036b8 <MX_TIM3_Init+0xc4>)
 800361a:	4a28      	ldr	r2, [pc, #160]	@ (80036bc <MX_TIM3_Init+0xc8>)
 800361c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 800361e:	4b26      	ldr	r3, [pc, #152]	@ (80036b8 <MX_TIM3_Init+0xc4>)
 8003620:	f240 1217 	movw	r2, #279	@ 0x117
 8003624:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003626:	4b24      	ldr	r3, [pc, #144]	@ (80036b8 <MX_TIM3_Init+0xc4>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 800362c:	4b22      	ldr	r3, [pc, #136]	@ (80036b8 <MX_TIM3_Init+0xc4>)
 800362e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003632:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003634:	4b20      	ldr	r3, [pc, #128]	@ (80036b8 <MX_TIM3_Init+0xc4>)
 8003636:	2200      	movs	r2, #0
 8003638:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800363a:	4b1f      	ldr	r3, [pc, #124]	@ (80036b8 <MX_TIM3_Init+0xc4>)
 800363c:	2280      	movs	r2, #128	@ 0x80
 800363e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003640:	481d      	ldr	r0, [pc, #116]	@ (80036b8 <MX_TIM3_Init+0xc4>)
 8003642:	f00a fe95 	bl	800e370 <HAL_TIM_PWM_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800364c:	f7ff fbc0 	bl	8002dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003654:	2300      	movs	r3, #0
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003658:	f107 031c 	add.w	r3, r7, #28
 800365c:	4619      	mov	r1, r3
 800365e:	4816      	ldr	r0, [pc, #88]	@ (80036b8 <MX_TIM3_Init+0xc4>)
 8003660:	f00b fdd2 	bl	800f208 <HAL_TIMEx_MasterConfigSynchronization>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800366a:	f7ff fbb1 	bl	8002dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800366e:	2360      	movs	r3, #96	@ 0x60
 8003670:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800367e:	463b      	mov	r3, r7
 8003680:	2200      	movs	r2, #0
 8003682:	4619      	mov	r1, r3
 8003684:	480c      	ldr	r0, [pc, #48]	@ (80036b8 <MX_TIM3_Init+0xc4>)
 8003686:	f00b f8e1 	bl	800e84c <HAL_TIM_PWM_ConfigChannel>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8003690:	f7ff fb9e 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003694:	463b      	mov	r3, r7
 8003696:	2204      	movs	r2, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4807      	ldr	r0, [pc, #28]	@ (80036b8 <MX_TIM3_Init+0xc4>)
 800369c:	f00b f8d6 	bl	800e84c <HAL_TIM_PWM_ConfigChannel>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80036a6:	f7ff fb93 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80036aa:	4803      	ldr	r0, [pc, #12]	@ (80036b8 <MX_TIM3_Init+0xc4>)
 80036ac:	f000 f918 	bl	80038e0 <HAL_TIM_MspPostInit>

}
 80036b0:	bf00      	nop
 80036b2:	3728      	adds	r7, #40	@ 0x28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	24000f64 	.word	0x24000f64
 80036bc:	40000400 	.word	0x40000400

080036c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	@ 0x28
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036c6:	f107 031c 	add.w	r3, r7, #28
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036d2:	463b      	mov	r3, r7
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	611a      	str	r2, [r3, #16]
 80036e0:	615a      	str	r2, [r3, #20]
 80036e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80036e4:	4b32      	ldr	r3, [pc, #200]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 80036e6:	4a33      	ldr	r2, [pc, #204]	@ (80037b4 <MX_TIM4_Init+0xf4>)
 80036e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 80036ea:	4b31      	ldr	r3, [pc, #196]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 80036ec:	f240 1217 	movw	r2, #279	@ 0x117
 80036f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f2:	4b2f      	ldr	r3, [pc, #188]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 80036f8:	4b2d      	ldr	r3, [pc, #180]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 80036fa:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80036fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003700:	4b2b      	ldr	r3, [pc, #172]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003706:	4b2a      	ldr	r3, [pc, #168]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 8003708:	2280      	movs	r2, #128	@ 0x80
 800370a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800370c:	4828      	ldr	r0, [pc, #160]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 800370e:	f00a fe2f 	bl	800e370 <HAL_TIM_PWM_Init>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003718:	f7ff fb5a 	bl	8002dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003720:	2300      	movs	r3, #0
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003724:	f107 031c 	add.w	r3, r7, #28
 8003728:	4619      	mov	r1, r3
 800372a:	4821      	ldr	r0, [pc, #132]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 800372c:	f00b fd6c 	bl	800f208 <HAL_TIMEx_MasterConfigSynchronization>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8003736:	f7ff fb4b 	bl	8002dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800373a:	2360      	movs	r3, #96	@ 0x60
 800373c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800374a:	463b      	mov	r3, r7
 800374c:	2200      	movs	r2, #0
 800374e:	4619      	mov	r1, r3
 8003750:	4817      	ldr	r0, [pc, #92]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 8003752:	f00b f87b 	bl	800e84c <HAL_TIM_PWM_ConfigChannel>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 800375c:	f7ff fb38 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003760:	463b      	mov	r3, r7
 8003762:	2204      	movs	r2, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4812      	ldr	r0, [pc, #72]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 8003768:	f00b f870 	bl	800e84c <HAL_TIM_PWM_ConfigChannel>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8003772:	f7ff fb2d 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003776:	463b      	mov	r3, r7
 8003778:	2208      	movs	r2, #8
 800377a:	4619      	mov	r1, r3
 800377c:	480c      	ldr	r0, [pc, #48]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 800377e:	f00b f865 	bl	800e84c <HAL_TIM_PWM_ConfigChannel>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8003788:	f7ff fb22 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800378c:	463b      	mov	r3, r7
 800378e:	220c      	movs	r2, #12
 8003790:	4619      	mov	r1, r3
 8003792:	4807      	ldr	r0, [pc, #28]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 8003794:	f00b f85a 	bl	800e84c <HAL_TIM_PWM_ConfigChannel>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 800379e:	f7ff fb17 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80037a2:	4803      	ldr	r0, [pc, #12]	@ (80037b0 <MX_TIM4_Init+0xf0>)
 80037a4:	f000 f89c 	bl	80038e0 <HAL_TIM_MspPostInit>

}
 80037a8:	bf00      	nop
 80037aa:	3728      	adds	r7, #40	@ 0x28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	24000fb0 	.word	0x24000fb0
 80037b4:	40000800 	.word	0x40000800

080037b8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80037bc:	4b0e      	ldr	r3, [pc, #56]	@ (80037f8 <MX_TIM13_Init+0x40>)
 80037be:	4a0f      	ldr	r2, [pc, #60]	@ (80037fc <MX_TIM13_Init+0x44>)
 80037c0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <MX_TIM13_Init+0x40>)
 80037c4:	f240 1217 	movw	r2, #279	@ 0x117
 80037c8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ca:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <MX_TIM13_Init+0x40>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80037d0:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <MX_TIM13_Init+0x40>)
 80037d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037d6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d8:	4b07      	ldr	r3, [pc, #28]	@ (80037f8 <MX_TIM13_Init+0x40>)
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <MX_TIM13_Init+0x40>)
 80037e0:	2280      	movs	r2, #128	@ 0x80
 80037e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80037e4:	4804      	ldr	r0, [pc, #16]	@ (80037f8 <MX_TIM13_Init+0x40>)
 80037e6:	f00a fcf4 	bl	800e1d2 <HAL_TIM_Base_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80037f0:	f7ff faee 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80037f4:	bf00      	nop
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	24000ffc 	.word	0x24000ffc
 80037fc:	40001c00 	.word	0x40001c00

08003800 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003810:	d10f      	bne.n	8003832 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003812:	4b1f      	ldr	r3, [pc, #124]	@ (8003890 <HAL_TIM_PWM_MspInit+0x90>)
 8003814:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003818:	4a1d      	ldr	r2, [pc, #116]	@ (8003890 <HAL_TIM_PWM_MspInit+0x90>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003822:	4b1b      	ldr	r3, [pc, #108]	@ (8003890 <HAL_TIM_PWM_MspInit+0x90>)
 8003824:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003830:	e028      	b.n	8003884 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a17      	ldr	r2, [pc, #92]	@ (8003894 <HAL_TIM_PWM_MspInit+0x94>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d10f      	bne.n	800385c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800383c:	4b14      	ldr	r3, [pc, #80]	@ (8003890 <HAL_TIM_PWM_MspInit+0x90>)
 800383e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003842:	4a13      	ldr	r2, [pc, #76]	@ (8003890 <HAL_TIM_PWM_MspInit+0x90>)
 8003844:	f043 0302 	orr.w	r3, r3, #2
 8003848:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800384c:	4b10      	ldr	r3, [pc, #64]	@ (8003890 <HAL_TIM_PWM_MspInit+0x90>)
 800384e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	693b      	ldr	r3, [r7, #16]
}
 800385a:	e013      	b.n	8003884 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a0d      	ldr	r2, [pc, #52]	@ (8003898 <HAL_TIM_PWM_MspInit+0x98>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003866:	4b0a      	ldr	r3, [pc, #40]	@ (8003890 <HAL_TIM_PWM_MspInit+0x90>)
 8003868:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800386c:	4a08      	ldr	r2, [pc, #32]	@ (8003890 <HAL_TIM_PWM_MspInit+0x90>)
 800386e:	f043 0304 	orr.w	r3, r3, #4
 8003872:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003876:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <HAL_TIM_PWM_MspInit+0x90>)
 8003878:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	58024400 	.word	0x58024400
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800

0800389c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0b      	ldr	r2, [pc, #44]	@ (80038d8 <HAL_TIM_Base_MspInit+0x3c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d10e      	bne.n	80038cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80038ae:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <HAL_TIM_Base_MspInit+0x40>)
 80038b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80038b4:	4a09      	ldr	r2, [pc, #36]	@ (80038dc <HAL_TIM_Base_MspInit+0x40>)
 80038b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ba:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80038be:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <HAL_TIM_Base_MspInit+0x40>)
 80038c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80038c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80038cc:	bf00      	nop
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	40001c00 	.word	0x40001c00
 80038dc:	58024400 	.word	0x58024400

080038e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	@ 0x30
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 031c 	add.w	r3, r7, #28
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003900:	d13f      	bne.n	8003982 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003902:	4b47      	ldr	r3, [pc, #284]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 8003904:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003908:	4a45      	ldr	r2, [pc, #276]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003912:	4b43      	ldr	r3, [pc, #268]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 8003914:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003920:	4b3f      	ldr	r3, [pc, #252]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 8003922:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003926:	4a3e      	ldr	r2, [pc, #248]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 8003928:	f043 0302 	orr.w	r3, r3, #2
 800392c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003930:	4b3b      	ldr	r3, [pc, #236]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 8003932:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800393e:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	2300      	movs	r3, #0
 800394e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003950:	2301      	movs	r3, #1
 8003952:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003954:	f107 031c 	add.w	r3, r7, #28
 8003958:	4619      	mov	r1, r3
 800395a:	4832      	ldr	r0, [pc, #200]	@ (8003a24 <HAL_TIM_MspPostInit+0x144>)
 800395c:	f006 f97a 	bl	8009c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003960:	2308      	movs	r3, #8
 8003962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003964:	2302      	movs	r3, #2
 8003966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396c:	2300      	movs	r3, #0
 800396e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003970:	2301      	movs	r3, #1
 8003972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003974:	f107 031c 	add.w	r3, r7, #28
 8003978:	4619      	mov	r1, r3
 800397a:	482b      	ldr	r0, [pc, #172]	@ (8003a28 <HAL_TIM_MspPostInit+0x148>)
 800397c:	f006 f96a 	bl	8009c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003980:	e049      	b.n	8003a16 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a29      	ldr	r2, [pc, #164]	@ (8003a2c <HAL_TIM_MspPostInit+0x14c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d11f      	bne.n	80039cc <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800398c:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 800398e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003992:	4a23      	ldr	r2, [pc, #140]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800399c:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 800399e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80039aa:	2330      	movs	r3, #48	@ 0x30
 80039ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ae:	2302      	movs	r3, #2
 80039b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b6:	2300      	movs	r3, #0
 80039b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039ba:	2302      	movs	r3, #2
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039be:	f107 031c 	add.w	r3, r7, #28
 80039c2:	4619      	mov	r1, r3
 80039c4:	4818      	ldr	r0, [pc, #96]	@ (8003a28 <HAL_TIM_MspPostInit+0x148>)
 80039c6:	f006 f945 	bl	8009c54 <HAL_GPIO_Init>
}
 80039ca:	e024      	b.n	8003a16 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a17      	ldr	r2, [pc, #92]	@ (8003a30 <HAL_TIM_MspPostInit+0x150>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d11f      	bne.n	8003a16 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d6:	4b12      	ldr	r3, [pc, #72]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 80039d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80039dc:	4a10      	ldr	r2, [pc, #64]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 80039de:	f043 0302 	orr.w	r3, r3, #2
 80039e2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80039e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a20 <HAL_TIM_MspPostInit+0x140>)
 80039e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80039f4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80039f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fa:	2302      	movs	r3, #2
 80039fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a02:	2300      	movs	r3, #0
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a06:	2302      	movs	r3, #2
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0a:	f107 031c 	add.w	r3, r7, #28
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4805      	ldr	r0, [pc, #20]	@ (8003a28 <HAL_TIM_MspPostInit+0x148>)
 8003a12:	f006 f91f 	bl	8009c54 <HAL_GPIO_Init>
}
 8003a16:	bf00      	nop
 8003a18:	3730      	adds	r7, #48	@ 0x30
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	58024400 	.word	0x58024400
 8003a24:	58020000 	.word	0x58020000
 8003a28:	58020400 	.word	0x58020400
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800

08003a34 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003a38:	4b22      	ldr	r3, [pc, #136]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a3a:	4a23      	ldr	r2, [pc, #140]	@ (8003ac8 <MX_UART4_Init+0x94>)
 8003a3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003a3e:	4b21      	ldr	r3, [pc, #132]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003a44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003a46:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003a52:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003a58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a5e:	4b19      	ldr	r3, [pc, #100]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a64:	4b17      	ldr	r3, [pc, #92]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a6a:	4b16      	ldr	r3, [pc, #88]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a70:	4b14      	ldr	r3, [pc, #80]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a76:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003a7c:	4811      	ldr	r0, [pc, #68]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a7e:	f00b fc6f 	bl	800f360 <HAL_UART_Init>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003a88:	f7ff f9a2 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	480d      	ldr	r0, [pc, #52]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003a90:	f00e ff95 	bl	80129be <HAL_UARTEx_SetTxFifoThreshold>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003a9a:	f7ff f999 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4808      	ldr	r0, [pc, #32]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003aa2:	f00e ffca 	bl	8012a3a <HAL_UARTEx_SetRxFifoThreshold>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003aac:	f7ff f990 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003ab0:	4804      	ldr	r0, [pc, #16]	@ (8003ac4 <MX_UART4_Init+0x90>)
 8003ab2:	f00e ff4b 	bl	801294c <HAL_UARTEx_DisableFifoMode>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003abc:	f7ff f988 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003ac0:	bf00      	nop
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	24001048 	.word	0x24001048
 8003ac8:	40004c00 	.word	0x40004c00

08003acc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ad0:	4b23      	ldr	r3, [pc, #140]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003ad2:	4a24      	ldr	r2, [pc, #144]	@ (8003b64 <MX_USART1_UART_Init+0x98>)
 8003ad4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003ad6:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003ad8:	4a23      	ldr	r2, [pc, #140]	@ (8003b68 <MX_USART1_UART_Init+0x9c>)
 8003ada:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003adc:	4b20      	ldr	r3, [pc, #128]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003ade:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ae2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8003aea:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003aec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003af0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003af2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003af4:	220c      	movs	r2, #12
 8003af6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003af8:	4b19      	ldr	r3, [pc, #100]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003afe:	4b18      	ldr	r3, [pc, #96]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b04:	4b16      	ldr	r3, [pc, #88]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b0a:	4b15      	ldr	r3, [pc, #84]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b10:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b16:	4812      	ldr	r0, [pc, #72]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003b18:	f00b fc22 	bl	800f360 <HAL_UART_Init>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003b22:	f7ff f955 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b26:	2100      	movs	r1, #0
 8003b28:	480d      	ldr	r0, [pc, #52]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003b2a:	f00e ff48 	bl	80129be <HAL_UARTEx_SetTxFifoThreshold>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003b34:	f7ff f94c 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4809      	ldr	r0, [pc, #36]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003b3c:	f00e ff7d 	bl	8012a3a <HAL_UARTEx_SetRxFifoThreshold>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003b46:	f7ff f943 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b4a:	4805      	ldr	r0, [pc, #20]	@ (8003b60 <MX_USART1_UART_Init+0x94>)
 8003b4c:	f00e fefe 	bl	801294c <HAL_UARTEx_DisableFifoMode>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003b56:	f7ff f93b 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	240010dc 	.word	0x240010dc
 8003b64:	40011000 	.word	0x40011000
 8003b68:	000186a0 	.word	0x000186a0

08003b6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b70:	4b22      	ldr	r3, [pc, #136]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003b72:	4a23      	ldr	r2, [pc, #140]	@ (8003c00 <MX_USART3_UART_Init+0x94>)
 8003b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b76:	4b21      	ldr	r3, [pc, #132]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003b78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b84:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b90:	4b1a      	ldr	r3, [pc, #104]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003b92:	220c      	movs	r2, #12
 8003b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b96:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b9c:	4b17      	ldr	r3, [pc, #92]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ba2:	4b16      	ldr	r3, [pc, #88]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ba8:	4b14      	ldr	r3, [pc, #80]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bae:	4b13      	ldr	r3, [pc, #76]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003bb4:	4811      	ldr	r0, [pc, #68]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003bb6:	f00b fbd3 	bl	800f360 <HAL_UART_Init>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003bc0:	f7ff f906 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	480d      	ldr	r0, [pc, #52]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003bc8:	f00e fef9 	bl	80129be <HAL_UARTEx_SetTxFifoThreshold>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003bd2:	f7ff f8fd 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4808      	ldr	r0, [pc, #32]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003bda:	f00e ff2e 	bl	8012a3a <HAL_UARTEx_SetRxFifoThreshold>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003be4:	f7ff f8f4 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003be8:	4804      	ldr	r0, [pc, #16]	@ (8003bfc <MX_USART3_UART_Init+0x90>)
 8003bea:	f00e feaf 	bl	801294c <HAL_UARTEx_DisableFifoMode>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003bf4:	f7ff f8ec 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	24001170 	.word	0x24001170
 8003c00:	40004800 	.word	0x40004800

08003c04 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003c08:	4b22      	ldr	r3, [pc, #136]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c0a:	4a23      	ldr	r2, [pc, #140]	@ (8003c98 <MX_USART6_UART_Init+0x94>)
 8003c0c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003c0e:	4b21      	ldr	r3, [pc, #132]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c14:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003c16:	4b1f      	ldr	r3, [pc, #124]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003c22:	4b1c      	ldr	r3, [pc, #112]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003c28:	4b1a      	ldr	r3, [pc, #104]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c2a:	220c      	movs	r2, #12
 8003c2c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c2e:	4b19      	ldr	r3, [pc, #100]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c34:	4b17      	ldr	r3, [pc, #92]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c3a:	4b16      	ldr	r3, [pc, #88]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c40:	4b14      	ldr	r3, [pc, #80]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c46:	4b13      	ldr	r3, [pc, #76]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003c4c:	4811      	ldr	r0, [pc, #68]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c4e:	f00b fb87 	bl	800f360 <HAL_UART_Init>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003c58:	f7ff f8ba 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	480d      	ldr	r0, [pc, #52]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c60:	f00e fead 	bl	80129be <HAL_UARTEx_SetTxFifoThreshold>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8003c6a:	f7ff f8b1 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c6e:	2100      	movs	r1, #0
 8003c70:	4808      	ldr	r0, [pc, #32]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c72:	f00e fee2 	bl	8012a3a <HAL_UARTEx_SetRxFifoThreshold>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8003c7c:	f7ff f8a8 	bl	8002dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003c80:	4804      	ldr	r0, [pc, #16]	@ (8003c94 <MX_USART6_UART_Init+0x90>)
 8003c82:	f00e fe63 	bl	801294c <HAL_UARTEx_DisableFifoMode>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8003c8c:	f7ff f8a0 	bl	8002dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003c90:	bf00      	nop
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	24001204 	.word	0x24001204
 8003c98:	40011400 	.word	0x40011400

08003c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b0c0      	sub	sp, #256	@ 0x100
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cb8:	22c0      	movs	r2, #192	@ 0xc0
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f013 fdf2 	bl	80178a6 <memset>
  if(uartHandle->Instance==UART4)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a82      	ldr	r2, [pc, #520]	@ (8003ed0 <HAL_UART_MspInit+0x234>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d17c      	bne.n	8003dc6 <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003ccc:	f04f 0202 	mov.w	r2, #2
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f007 faee 	bl	800b2c4 <HAL_RCCEx_PeriphCLKConfig>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003cee:	f7ff f86f 	bl	8002dd0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003cf2:	4b78      	ldr	r3, [pc, #480]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003cf4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003cf8:	4a76      	ldr	r2, [pc, #472]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003cfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003cfe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003d02:	4b74      	ldr	r3, [pc, #464]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003d04:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003d08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d10:	4b70      	ldr	r3, [pc, #448]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003d12:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003d16:	4a6f      	ldr	r2, [pc, #444]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003d20:	4b6c      	ldr	r3, [pc, #432]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003d22:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	623b      	str	r3, [r7, #32]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d34:	2302      	movs	r3, #2
 8003d36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003d46:	2308      	movs	r3, #8
 8003d48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003d50:	4619      	mov	r1, r3
 8003d52:	4861      	ldr	r0, [pc, #388]	@ (8003ed8 <HAL_UART_MspInit+0x23c>)
 8003d54:	f005 ff7e 	bl	8009c54 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003d58:	4b60      	ldr	r3, [pc, #384]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003d5a:	4a61      	ldr	r2, [pc, #388]	@ (8003ee0 <HAL_UART_MspInit+0x244>)
 8003d5c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003d60:	223f      	movs	r2, #63	@ 0x3f
 8003d62:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d64:	4b5d      	ldr	r3, [pc, #372]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d70:	4b5a      	ldr	r3, [pc, #360]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003d72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d76:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d78:	4b58      	ldr	r3, [pc, #352]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d7e:	4b57      	ldr	r3, [pc, #348]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003d84:	4b55      	ldr	r3, [pc, #340]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d8a:	4b54      	ldr	r3, [pc, #336]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d90:	4b52      	ldr	r3, [pc, #328]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003d96:	4851      	ldr	r0, [pc, #324]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003d98:	f002 fd0e 	bl	80067b8 <HAL_DMA_Init>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8003da2:	f7ff f815 	bl	8002dd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a4c      	ldr	r2, [pc, #304]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003dae:	4a4b      	ldr	r2, [pc, #300]	@ (8003edc <HAL_UART_MspInit+0x240>)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003db4:	2200      	movs	r2, #0
 8003db6:	2105      	movs	r1, #5
 8003db8:	2034      	movs	r0, #52	@ 0x34
 8003dba:	f002 fc5d 	bl	8006678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003dbe:	2034      	movs	r0, #52	@ 0x34
 8003dc0:	f002 fc74 	bl	80066ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003dc4:	e16a      	b.n	800409c <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a46      	ldr	r2, [pc, #280]	@ (8003ee4 <HAL_UART_MspInit+0x248>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f040 808f 	bne.w	8003ef0 <HAL_UART_MspInit+0x254>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003dd2:	f04f 0201 	mov.w	r2, #1
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003de4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003de8:	4618      	mov	r0, r3
 8003dea:	f007 fa6b 	bl	800b2c4 <HAL_RCCEx_PeriphCLKConfig>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 8003df4:	f7fe ffec 	bl	8002dd0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003df8:	4b36      	ldr	r3, [pc, #216]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003dfa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003dfe:	4a35      	ldr	r2, [pc, #212]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003e00:	f043 0310 	orr.w	r3, r3, #16
 8003e04:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003e08:	4b32      	ldr	r3, [pc, #200]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003e0a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e16:	4b2f      	ldr	r3, [pc, #188]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003e18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003e26:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed4 <HAL_UART_MspInit+0x238>)
 8003e28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8003e34:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003e38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e4e:	2307      	movs	r3, #7
 8003e50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e54:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003e58:	4619      	mov	r1, r3
 8003e5a:	481f      	ldr	r0, [pc, #124]	@ (8003ed8 <HAL_UART_MspInit+0x23c>)
 8003e5c:	f005 fefa 	bl	8009c54 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8003e60:	4b21      	ldr	r3, [pc, #132]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003e62:	4a22      	ldr	r2, [pc, #136]	@ (8003eec <HAL_UART_MspInit+0x250>)
 8003e64:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003e66:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003e68:	2229      	movs	r2, #41	@ 0x29
 8003e6a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e72:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003e7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e7e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e80:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e86:	4b18      	ldr	r3, [pc, #96]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003e8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003e92:	4b15      	ldr	r3, [pc, #84]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003e94:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e98:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ea0:	4811      	ldr	r0, [pc, #68]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003ea2:	f002 fc89 	bl	80067b8 <HAL_DMA_Init>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_UART_MspInit+0x214>
      Error_Handler();
 8003eac:	f7fe ff90 	bl	8002dd0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003eb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ee8 <HAL_UART_MspInit+0x24c>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2105      	movs	r1, #5
 8003ec2:	2025      	movs	r0, #37	@ 0x25
 8003ec4:	f002 fbd8 	bl	8006678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ec8:	2025      	movs	r0, #37	@ 0x25
 8003eca:	f002 fbef 	bl	80066ac <HAL_NVIC_EnableIRQ>
}
 8003ece:	e0e5      	b.n	800409c <HAL_UART_MspInit+0x400>
 8003ed0:	40004c00 	.word	0x40004c00
 8003ed4:	58024400 	.word	0x58024400
 8003ed8:	58020000 	.word	0x58020000
 8003edc:	24001298 	.word	0x24001298
 8003ee0:	40020040 	.word	0x40020040
 8003ee4:	40011000 	.word	0x40011000
 8003ee8:	24001310 	.word	0x24001310
 8003eec:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6c      	ldr	r2, [pc, #432]	@ (80040a8 <HAL_UART_MspInit+0x40c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d17d      	bne.n	8003ff6 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003efa:	f04f 0202 	mov.w	r2, #2
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003f10:	4618      	mov	r0, r3
 8003f12:	f007 f9d7 	bl	800b2c4 <HAL_RCCEx_PeriphCLKConfig>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8003f1c:	f7fe ff58 	bl	8002dd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f20:	4b62      	ldr	r3, [pc, #392]	@ (80040ac <HAL_UART_MspInit+0x410>)
 8003f22:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003f26:	4a61      	ldr	r2, [pc, #388]	@ (80040ac <HAL_UART_MspInit+0x410>)
 8003f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f2c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003f30:	4b5e      	ldr	r3, [pc, #376]	@ (80040ac <HAL_UART_MspInit+0x410>)
 8003f32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80040ac <HAL_UART_MspInit+0x410>)
 8003f40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003f44:	4a59      	ldr	r2, [pc, #356]	@ (80040ac <HAL_UART_MspInit+0x410>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003f4e:	4b57      	ldr	r3, [pc, #348]	@ (80040ac <HAL_UART_MspInit+0x410>)
 8003f50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f5c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f64:	2302      	movs	r3, #2
 8003f66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f76:	2307      	movs	r3, #7
 8003f78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f7c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003f80:	4619      	mov	r1, r3
 8003f82:	484b      	ldr	r0, [pc, #300]	@ (80040b0 <HAL_UART_MspInit+0x414>)
 8003f84:	f005 fe66 	bl	8009c54 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003f88:	4b4a      	ldr	r3, [pc, #296]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003f8a:	4a4b      	ldr	r2, [pc, #300]	@ (80040b8 <HAL_UART_MspInit+0x41c>)
 8003f8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003f8e:	4b49      	ldr	r3, [pc, #292]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003f90:	222d      	movs	r2, #45	@ 0x2d
 8003f92:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f94:	4b47      	ldr	r3, [pc, #284]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f9a:	4b46      	ldr	r3, [pc, #280]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fa0:	4b44      	ldr	r3, [pc, #272]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003fa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fa6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fa8:	4b42      	ldr	r3, [pc, #264]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fae:	4b41      	ldr	r3, [pc, #260]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003fba:	4b3e      	ldr	r3, [pc, #248]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003fc6:	483b      	ldr	r0, [pc, #236]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003fc8:	f002 fbf6 	bl	80067b8 <HAL_DMA_Init>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_UART_MspInit+0x33a>
      Error_Handler();
 8003fd2:	f7fe fefd 	bl	8002dd0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a36      	ldr	r2, [pc, #216]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003fda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003fde:	4a35      	ldr	r2, [pc, #212]	@ (80040b4 <HAL_UART_MspInit+0x418>)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2105      	movs	r1, #5
 8003fe8:	2027      	movs	r0, #39	@ 0x27
 8003fea:	f002 fb45 	bl	8006678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003fee:	2027      	movs	r0, #39	@ 0x27
 8003ff0:	f002 fb5c 	bl	80066ac <HAL_NVIC_EnableIRQ>
}
 8003ff4:	e052      	b.n	800409c <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART6)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a30      	ldr	r2, [pc, #192]	@ (80040bc <HAL_UART_MspInit+0x420>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d14d      	bne.n	800409c <HAL_UART_MspInit+0x400>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004000:	f04f 0201 	mov.w	r2, #1
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004012:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004016:	4618      	mov	r0, r3
 8004018:	f007 f954 	bl	800b2c4 <HAL_RCCEx_PeriphCLKConfig>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_UART_MspInit+0x38a>
      Error_Handler();
 8004022:	f7fe fed5 	bl	8002dd0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004026:	4b21      	ldr	r3, [pc, #132]	@ (80040ac <HAL_UART_MspInit+0x410>)
 8004028:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800402c:	4a1f      	ldr	r2, [pc, #124]	@ (80040ac <HAL_UART_MspInit+0x410>)
 800402e:	f043 0320 	orr.w	r3, r3, #32
 8004032:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8004036:	4b1d      	ldr	r3, [pc, #116]	@ (80040ac <HAL_UART_MspInit+0x410>)
 8004038:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004044:	4b19      	ldr	r3, [pc, #100]	@ (80040ac <HAL_UART_MspInit+0x410>)
 8004046:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800404a:	4a18      	ldr	r2, [pc, #96]	@ (80040ac <HAL_UART_MspInit+0x410>)
 800404c:	f043 0304 	orr.w	r3, r3, #4
 8004050:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8004054:	4b15      	ldr	r3, [pc, #84]	@ (80040ac <HAL_UART_MspInit+0x410>)
 8004056:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004062:	23c0      	movs	r3, #192	@ 0xc0
 8004064:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004068:	2302      	movs	r3, #2
 800406a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004074:	2300      	movs	r3, #0
 8004076:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800407a:	2307      	movs	r3, #7
 800407c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004080:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8004084:	4619      	mov	r1, r3
 8004086:	480a      	ldr	r0, [pc, #40]	@ (80040b0 <HAL_UART_MspInit+0x414>)
 8004088:	f005 fde4 	bl	8009c54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800408c:	2200      	movs	r2, #0
 800408e:	2105      	movs	r1, #5
 8004090:	2047      	movs	r0, #71	@ 0x47
 8004092:	f002 faf1 	bl	8006678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004096:	2047      	movs	r0, #71	@ 0x47
 8004098:	f002 fb08 	bl	80066ac <HAL_NVIC_EnableIRQ>
}
 800409c:	bf00      	nop
 800409e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40004800 	.word	0x40004800
 80040ac:	58024400 	.word	0x58024400
 80040b0:	58020800 	.word	0x58020800
 80040b4:	24001388 	.word	0x24001388
 80040b8:	40020028 	.word	0x40020028
 80040bc:	40011400 	.word	0x40011400

080040c0 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	220f      	movs	r2, #15
 80040ce:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f00b fbe5 	bl	800f8a0 <HAL_UART_Abort_IT>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 80040dc:	f7fe fe78 	bl	8002dd0 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	460a      	mov	r2, r1
 80040f2:	71fb      	strb	r3, [r7, #7]
 80040f4:	4613      	mov	r3, r2
 80040f6:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 80040f8:	2200      	movs	r2, #0
 80040fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040fe:	480f      	ldr	r0, [pc, #60]	@ (800413c <BMP280_write+0x54>)
 8004100:	f005 ff58 	bl	8009fb4 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800410a:	b2db      	uxtb	r3, r3
 800410c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800410e:	1df9      	adds	r1, r7, #7
 8004110:	2364      	movs	r3, #100	@ 0x64
 8004112:	2201      	movs	r2, #1
 8004114:	480a      	ldr	r0, [pc, #40]	@ (8004140 <BMP280_write+0x58>)
 8004116:	f008 ffd9 	bl	800d0cc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 800411a:	1db9      	adds	r1, r7, #6
 800411c:	2364      	movs	r3, #100	@ 0x64
 800411e:	2201      	movs	r2, #1
 8004120:	4807      	ldr	r0, [pc, #28]	@ (8004140 <BMP280_write+0x58>)
 8004122:	f008 ffd3 	bl	800d0cc <HAL_SPI_Transmit>

	BMP280_unselect();
 8004126:	2201      	movs	r2, #1
 8004128:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800412c:	4803      	ldr	r0, [pc, #12]	@ (800413c <BMP280_write+0x54>)
 800412e:	f005 ff41 	bl	8009fb4 <HAL_GPIO_WritePin>
}
 8004132:	bf00      	nop
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	58020400 	.word	0x58020400
 8004140:	24000e40 	.word	0x24000e40

08004144 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004154:	b2db      	uxtb	r3, r3
 8004156:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8004158:	2200      	movs	r2, #0
 800415a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800415e:	480e      	ldr	r0, [pc, #56]	@ (8004198 <BMP280_read+0x54>)
 8004160:	f005 ff28 	bl	8009fb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8004164:	f107 010f 	add.w	r1, r7, #15
 8004168:	2364      	movs	r3, #100	@ 0x64
 800416a:	2201      	movs	r2, #1
 800416c:	480b      	ldr	r0, [pc, #44]	@ (800419c <BMP280_read+0x58>)
 800416e:	f008 ffad 	bl	800d0cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8004172:	f107 010f 	add.w	r1, r7, #15
 8004176:	2364      	movs	r3, #100	@ 0x64
 8004178:	2201      	movs	r2, #1
 800417a:	4808      	ldr	r0, [pc, #32]	@ (800419c <BMP280_read+0x58>)
 800417c:	f009 f994 	bl	800d4a8 <HAL_SPI_Receive>
	BMP280_unselect();
 8004180:	2201      	movs	r2, #1
 8004182:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004186:	4804      	ldr	r0, [pc, #16]	@ (8004198 <BMP280_read+0x54>)
 8004188:	f005 ff14 	bl	8009fb4 <HAL_GPIO_WritePin>

	return Buffer;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	58020400 	.word	0x58020400
 800419c:	24000e40 	.word	0x24000e40

080041a0 <BMP280_config>:

void BMP280_config(void){
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 80041a4:	2157      	movs	r1, #87	@ 0x57
 80041a6:	20f4      	movs	r0, #244	@ 0xf4
 80041a8:	f7ff ff9e 	bl	80040e8 <BMP280_write>
	BMP280_write(config, 0x10);
 80041ac:	2110      	movs	r1, #16
 80041ae:	20f5      	movs	r0, #245	@ 0xf5
 80041b0:	f7ff ff9a 	bl	80040e8 <BMP280_write>
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 80041be:	2388      	movs	r3, #136	@ 0x88
 80041c0:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	f107 0308 	add.w	r3, r7, #8
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	605a      	str	r2, [r3, #4]
 80041d0:	609a      	str	r2, [r3, #8]
 80041d2:	60da      	str	r2, [r3, #12]
 80041d4:	611a      	str	r2, [r3, #16]
	BMP280_select();
 80041d6:	2200      	movs	r2, #0
 80041d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80041dc:	4843      	ldr	r0, [pc, #268]	@ (80042ec <BMP280_calibrationData+0x134>)
 80041de:	f005 fee9 	bl	8009fb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80041e2:	f107 011f 	add.w	r1, r7, #31
 80041e6:	2364      	movs	r3, #100	@ 0x64
 80041e8:	2201      	movs	r2, #1
 80041ea:	4841      	ldr	r0, [pc, #260]	@ (80042f0 <BMP280_calibrationData+0x138>)
 80041ec:	f008 ff6e 	bl	800d0cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 80041f0:	1d39      	adds	r1, r7, #4
 80041f2:	2364      	movs	r3, #100	@ 0x64
 80041f4:	2218      	movs	r2, #24
 80041f6:	483e      	ldr	r0, [pc, #248]	@ (80042f0 <BMP280_calibrationData+0x138>)
 80041f8:	f009 f956 	bl	800d4a8 <HAL_SPI_Receive>
	BMP280_unselect();
 80041fc:	2201      	movs	r2, #1
 80041fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004202:	483a      	ldr	r0, [pc, #232]	@ (80042ec <BMP280_calibrationData+0x134>)
 8004204:	f005 fed6 	bl	8009fb4 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8004208:	797b      	ldrb	r3, [r7, #5]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	b21a      	sxth	r2, r3
 800420e:	793b      	ldrb	r3, [r7, #4]
 8004210:	b21b      	sxth	r3, r3
 8004212:	4313      	orrs	r3, r2
 8004214:	b21b      	sxth	r3, r3
 8004216:	b29a      	uxth	r2, r3
 8004218:	4b36      	ldr	r3, [pc, #216]	@ (80042f4 <BMP280_calibrationData+0x13c>)
 800421a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	b21a      	sxth	r2, r3
 8004222:	79bb      	ldrb	r3, [r7, #6]
 8004224:	b21b      	sxth	r3, r3
 8004226:	4313      	orrs	r3, r2
 8004228:	b21a      	sxth	r2, r3
 800422a:	4b33      	ldr	r3, [pc, #204]	@ (80042f8 <BMP280_calibrationData+0x140>)
 800422c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 800422e:	7a7b      	ldrb	r3, [r7, #9]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	b21a      	sxth	r2, r3
 8004234:	7a3b      	ldrb	r3, [r7, #8]
 8004236:	b21b      	sxth	r3, r3
 8004238:	4313      	orrs	r3, r2
 800423a:	b21a      	sxth	r2, r3
 800423c:	4b2f      	ldr	r3, [pc, #188]	@ (80042fc <BMP280_calibrationData+0x144>)
 800423e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8004240:	7afb      	ldrb	r3, [r7, #11]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	b21a      	sxth	r2, r3
 8004246:	7abb      	ldrb	r3, [r7, #10]
 8004248:	b21b      	sxth	r3, r3
 800424a:	4313      	orrs	r3, r2
 800424c:	b21b      	sxth	r3, r3
 800424e:	b29a      	uxth	r2, r3
 8004250:	4b2b      	ldr	r3, [pc, #172]	@ (8004300 <BMP280_calibrationData+0x148>)
 8004252:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8004254:	7b7b      	ldrb	r3, [r7, #13]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	b21a      	sxth	r2, r3
 800425a:	7b3b      	ldrb	r3, [r7, #12]
 800425c:	b21b      	sxth	r3, r3
 800425e:	4313      	orrs	r3, r2
 8004260:	b21a      	sxth	r2, r3
 8004262:	4b28      	ldr	r3, [pc, #160]	@ (8004304 <BMP280_calibrationData+0x14c>)
 8004264:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	b21a      	sxth	r2, r3
 800426c:	7bbb      	ldrb	r3, [r7, #14]
 800426e:	b21b      	sxth	r3, r3
 8004270:	4313      	orrs	r3, r2
 8004272:	b21a      	sxth	r2, r3
 8004274:	4b24      	ldr	r3, [pc, #144]	@ (8004308 <BMP280_calibrationData+0x150>)
 8004276:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8004278:	7c7b      	ldrb	r3, [r7, #17]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	b21a      	sxth	r2, r3
 800427e:	7c3b      	ldrb	r3, [r7, #16]
 8004280:	b21b      	sxth	r3, r3
 8004282:	4313      	orrs	r3, r2
 8004284:	b21a      	sxth	r2, r3
 8004286:	4b21      	ldr	r3, [pc, #132]	@ (800430c <BMP280_calibrationData+0x154>)
 8004288:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 800428a:	7cfb      	ldrb	r3, [r7, #19]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	b21a      	sxth	r2, r3
 8004290:	7cbb      	ldrb	r3, [r7, #18]
 8004292:	b21b      	sxth	r3, r3
 8004294:	4313      	orrs	r3, r2
 8004296:	b21a      	sxth	r2, r3
 8004298:	4b1d      	ldr	r3, [pc, #116]	@ (8004310 <BMP280_calibrationData+0x158>)
 800429a:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 800429c:	7d7b      	ldrb	r3, [r7, #21]
 800429e:	021b      	lsls	r3, r3, #8
 80042a0:	b21a      	sxth	r2, r3
 80042a2:	7d3b      	ldrb	r3, [r7, #20]
 80042a4:	b21b      	sxth	r3, r3
 80042a6:	4313      	orrs	r3, r2
 80042a8:	b21a      	sxth	r2, r3
 80042aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <BMP280_calibrationData+0x15c>)
 80042ac:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	b21a      	sxth	r2, r3
 80042b4:	7dbb      	ldrb	r3, [r7, #22]
 80042b6:	b21b      	sxth	r3, r3
 80042b8:	4313      	orrs	r3, r2
 80042ba:	b21a      	sxth	r2, r3
 80042bc:	4b16      	ldr	r3, [pc, #88]	@ (8004318 <BMP280_calibrationData+0x160>)
 80042be:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80042c0:	7e7b      	ldrb	r3, [r7, #25]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	b21a      	sxth	r2, r3
 80042c6:	7e3b      	ldrb	r3, [r7, #24]
 80042c8:	b21b      	sxth	r3, r3
 80042ca:	4313      	orrs	r3, r2
 80042cc:	b21a      	sxth	r2, r3
 80042ce:	4b13      	ldr	r3, [pc, #76]	@ (800431c <BMP280_calibrationData+0x164>)
 80042d0:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80042d2:	7efb      	ldrb	r3, [r7, #27]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	b21a      	sxth	r2, r3
 80042d8:	7ebb      	ldrb	r3, [r7, #26]
 80042da:	b21b      	sxth	r3, r3
 80042dc:	4313      	orrs	r3, r2
 80042de:	b21a      	sxth	r2, r3
 80042e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004320 <BMP280_calibrationData+0x168>)
 80042e2:	801a      	strh	r2, [r3, #0]
}
 80042e4:	bf00      	nop
 80042e6:	3720      	adds	r7, #32
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	58020400 	.word	0x58020400
 80042f0:	24000e40 	.word	0x24000e40
 80042f4:	24001414 	.word	0x24001414
 80042f8:	24001418 	.word	0x24001418
 80042fc:	2400141a 	.word	0x2400141a
 8004300:	24001416 	.word	0x24001416
 8004304:	2400141c 	.word	0x2400141c
 8004308:	2400141e 	.word	0x2400141e
 800430c:	24001420 	.word	0x24001420
 8004310:	24001422 	.word	0x24001422
 8004314:	24001424 	.word	0x24001424
 8004318:	24001426 	.word	0x24001426
 800431c:	24001428 	.word	0x24001428
 8004320:	2400142a 	.word	0x2400142a

08004324 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 800432a:	23f7      	movs	r3, #247	@ 0xf7
 800432c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 800432e:	2300      	movs	r3, #0
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	2300      	movs	r3, #0
 8004334:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8004336:	2200      	movs	r2, #0
 8004338:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800433c:	4817      	ldr	r0, [pc, #92]	@ (800439c <BMP280_readRawValues+0x78>)
 800433e:	f005 fe39 	bl	8009fb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8004342:	1df9      	adds	r1, r7, #7
 8004344:	2364      	movs	r3, #100	@ 0x64
 8004346:	2201      	movs	r2, #1
 8004348:	4815      	ldr	r0, [pc, #84]	@ (80043a0 <BMP280_readRawValues+0x7c>)
 800434a:	f008 febf 	bl	800d0cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 800434e:	4639      	mov	r1, r7
 8004350:	2364      	movs	r3, #100	@ 0x64
 8004352:	2206      	movs	r2, #6
 8004354:	4812      	ldr	r0, [pc, #72]	@ (80043a0 <BMP280_readRawValues+0x7c>)
 8004356:	f009 f8a7 	bl	800d4a8 <HAL_SPI_Receive>
	BMP280_unselect();
 800435a:	2201      	movs	r2, #1
 800435c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004360:	480e      	ldr	r0, [pc, #56]	@ (800439c <BMP280_readRawValues+0x78>)
 8004362:	f005 fe27 	bl	8009fb4 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8004366:	783b      	ldrb	r3, [r7, #0]
 8004368:	031a      	lsls	r2, r3, #12
 800436a:	787b      	ldrb	r3, [r7, #1]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	4313      	orrs	r3, r2
 8004370:	78ba      	ldrb	r2, [r7, #2]
 8004372:	0912      	lsrs	r2, r2, #4
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	4313      	orrs	r3, r2
 8004378:	4a0a      	ldr	r2, [pc, #40]	@ (80043a4 <BMP280_readRawValues+0x80>)
 800437a:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	031a      	lsls	r2, r3, #12
 8004380:	793b      	ldrb	r3, [r7, #4]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4313      	orrs	r3, r2
 8004386:	797a      	ldrb	r2, [r7, #5]
 8004388:	0912      	lsrs	r2, r2, #4
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	4313      	orrs	r3, r2
 800438e:	4a06      	ldr	r2, [pc, #24]	@ (80043a8 <BMP280_readRawValues+0x84>)
 8004390:	6013      	str	r3, [r2, #0]
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	58020400 	.word	0x58020400
 80043a0:	24000e40 	.word	0x24000e40
 80043a4:	24001430 	.word	0x24001430
 80043a8:	2400142c 	.word	0x2400142c

080043ac <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80043b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004420 <BMP280_measureT+0x74>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	10da      	asrs	r2, r3, #3
 80043ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004424 <BMP280_measureT+0x78>)
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	4a19      	ldr	r2, [pc, #100]	@ (8004428 <BMP280_measureT+0x7c>)
 80043c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	12db      	asrs	r3, r3, #11
 80043ce:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	111b      	asrs	r3, r3, #4
 80043d4:	4a13      	ldr	r2, [pc, #76]	@ (8004424 <BMP280_measureT+0x78>)
 80043d6:	8812      	ldrh	r2, [r2, #0]
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	1112      	asrs	r2, r2, #4
 80043de:	4911      	ldr	r1, [pc, #68]	@ (8004424 <BMP280_measureT+0x78>)
 80043e0:	8809      	ldrh	r1, [r1, #0]
 80043e2:	1a52      	subs	r2, r2, r1
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	131b      	asrs	r3, r3, #12
 80043ea:	4a10      	ldr	r2, [pc, #64]	@ (800442c <BMP280_measureT+0x80>)
 80043ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	139b      	asrs	r3, r3, #14
 80043f6:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4413      	add	r3, r2
 80043fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004430 <BMP280_measureT+0x84>)
 8004400:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8004402:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <BMP280_measureT+0x84>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	3380      	adds	r3, #128	@ 0x80
 800440e:	121b      	asrs	r3, r3, #8
 8004410:	60fb      	str	r3, [r7, #12]
	return T;
 8004412:	68fb      	ldr	r3, [r7, #12]
}
 8004414:	4618      	mov	r0, r3
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	2400142c 	.word	0x2400142c
 8004424:	24001414 	.word	0x24001414
 8004428:	24001418 	.word	0x24001418
 800442c:	2400141a 	.word	0x2400141a
 8004430:	24001434 	.word	0x24001434

08004434 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8004434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004438:	b0ca      	sub	sp, #296	@ 0x128
 800443a:	af00      	add	r7, sp, #0
 800443c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8004440:	4baf      	ldr	r3, [pc, #700]	@ (8004700 <BMP280_measureP+0x2cc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	17da      	asrs	r2, r3, #31
 8004446:	461c      	mov	r4, r3
 8004448:	4615      	mov	r5, r2
 800444a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800444e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8004452:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8004456:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800445a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800445e:	fb03 f102 	mul.w	r1, r3, r2
 8004462:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004466:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800446a:	fb02 f303 	mul.w	r3, r2, r3
 800446e:	18ca      	adds	r2, r1, r3
 8004470:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004474:	fba3 8903 	umull	r8, r9, r3, r3
 8004478:	eb02 0309 	add.w	r3, r2, r9
 800447c:	4699      	mov	r9, r3
 800447e:	4ba1      	ldr	r3, [pc, #644]	@ (8004704 <BMP280_measureP+0x2d0>)
 8004480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004484:	b21b      	sxth	r3, r3
 8004486:	17da      	asrs	r2, r3, #31
 8004488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800448c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004490:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8004494:	4603      	mov	r3, r0
 8004496:	fb03 f209 	mul.w	r2, r3, r9
 800449a:	460b      	mov	r3, r1
 800449c:	fb08 f303 	mul.w	r3, r8, r3
 80044a0:	4413      	add	r3, r2
 80044a2:	4602      	mov	r2, r0
 80044a4:	fba8 1202 	umull	r1, r2, r8, r2
 80044a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044ac:	460a      	mov	r2, r1
 80044ae:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80044b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044b6:	4413      	add	r3, r2
 80044b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044bc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80044c0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80044c4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80044c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004708 <BMP280_measureP+0x2d4>)
 80044ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ce:	b21b      	sxth	r3, r3
 80044d0:	17da      	asrs	r2, r3, #31
 80044d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044d6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80044da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80044de:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80044e2:	462a      	mov	r2, r5
 80044e4:	fb02 f203 	mul.w	r2, r2, r3
 80044e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80044ec:	4621      	mov	r1, r4
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	441a      	add	r2, r3
 80044f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80044f8:	4621      	mov	r1, r4
 80044fa:	fba3 1301 	umull	r1, r3, r3, r1
 80044fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004502:	460b      	mov	r3, r1
 8004504:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450c:	18d3      	adds	r3, r2, r3
 800450e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004512:	f04f 0000 	mov.w	r0, #0
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800451e:	462b      	mov	r3, r5
 8004520:	0459      	lsls	r1, r3, #17
 8004522:	4623      	mov	r3, r4
 8004524:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8004528:	4623      	mov	r3, r4
 800452a:	0458      	lsls	r0, r3, #17
 800452c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004530:	1814      	adds	r4, r2, r0
 8004532:	643c      	str	r4, [r7, #64]	@ 0x40
 8004534:	414b      	adcs	r3, r1
 8004536:	647b      	str	r3, [r7, #68]	@ 0x44
 8004538:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800453c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8004540:	4b72      	ldr	r3, [pc, #456]	@ (800470c <BMP280_measureP+0x2d8>)
 8004542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004546:	b21b      	sxth	r3, r3
 8004548:	17da      	asrs	r2, r3, #31
 800454a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800454e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f04f 0100 	mov.w	r1, #0
 800455a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800455e:	00d9      	lsls	r1, r3, #3
 8004560:	2000      	movs	r0, #0
 8004562:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004566:	1814      	adds	r4, r2, r0
 8004568:	63bc      	str	r4, [r7, #56]	@ 0x38
 800456a:	414b      	adcs	r3, r1
 800456c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800456e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8004572:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8004576:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800457a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800457e:	fb03 f102 	mul.w	r1, r3, r2
 8004582:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004586:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	18ca      	adds	r2, r1, r3
 8004590:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004594:	fba3 1303 	umull	r1, r3, r3, r3
 8004598:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800459c:	460b      	mov	r3, r1
 800459e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80045a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a6:	18d3      	adds	r3, r2, r3
 80045a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80045ac:	4b58      	ldr	r3, [pc, #352]	@ (8004710 <BMP280_measureP+0x2dc>)
 80045ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b2:	b21b      	sxth	r3, r3
 80045b4:	17da      	asrs	r2, r3, #31
 80045b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045be:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80045c2:	462b      	mov	r3, r5
 80045c4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045c8:	4642      	mov	r2, r8
 80045ca:	fb02 f203 	mul.w	r2, r2, r3
 80045ce:	464b      	mov	r3, r9
 80045d0:	4621      	mov	r1, r4
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	4622      	mov	r2, r4
 80045da:	4641      	mov	r1, r8
 80045dc:	fba2 1201 	umull	r1, r2, r2, r1
 80045e0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80045e4:	460a      	mov	r2, r1
 80045e6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80045ea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80045ee:	4413      	add	r3, r2
 80045f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80045f4:	f04f 0000 	mov.w	r0, #0
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8004600:	4623      	mov	r3, r4
 8004602:	0a18      	lsrs	r0, r3, #8
 8004604:	462b      	mov	r3, r5
 8004606:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800460a:	462b      	mov	r3, r5
 800460c:	1219      	asrs	r1, r3, #8
 800460e:	4b41      	ldr	r3, [pc, #260]	@ (8004714 <BMP280_measureP+0x2e0>)
 8004610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004614:	b21b      	sxth	r3, r3
 8004616:	17da      	asrs	r2, r3, #31
 8004618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800461c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004620:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004624:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8004628:	464a      	mov	r2, r9
 800462a:	fb02 f203 	mul.w	r2, r2, r3
 800462e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004632:	4644      	mov	r4, r8
 8004634:	fb04 f303 	mul.w	r3, r4, r3
 8004638:	441a      	add	r2, r3
 800463a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800463e:	4644      	mov	r4, r8
 8004640:	fba3 4304 	umull	r4, r3, r3, r4
 8004644:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004648:	4623      	mov	r3, r4
 800464a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800464e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004652:	18d3      	adds	r3, r2, r3
 8004654:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8004664:	464c      	mov	r4, r9
 8004666:	0323      	lsls	r3, r4, #12
 8004668:	4644      	mov	r4, r8
 800466a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800466e:	4644      	mov	r4, r8
 8004670:	0322      	lsls	r2, r4, #12
 8004672:	1884      	adds	r4, r0, r2
 8004674:	633c      	str	r4, [r7, #48]	@ 0x30
 8004676:	eb41 0303 	adc.w	r3, r1, r3
 800467a:	637b      	str	r3, [r7, #52]	@ 0x34
 800467c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004680:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8004684:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004688:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800468c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8004690:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004694:	4b20      	ldr	r3, [pc, #128]	@ (8004718 <BMP280_measureP+0x2e4>)
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046a4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046a8:	462b      	mov	r3, r5
 80046aa:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046ae:	4642      	mov	r2, r8
 80046b0:	fb02 f203 	mul.w	r2, r2, r3
 80046b4:	464b      	mov	r3, r9
 80046b6:	4621      	mov	r1, r4
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	4622      	mov	r2, r4
 80046c0:	4641      	mov	r1, r8
 80046c2:	fba2 1201 	umull	r1, r2, r2, r1
 80046c6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80046ca:	460a      	mov	r2, r1
 80046cc:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80046d0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80046d4:	4413      	add	r3, r2
 80046d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80046e6:	4629      	mov	r1, r5
 80046e8:	104a      	asrs	r2, r1, #1
 80046ea:	4629      	mov	r1, r5
 80046ec:	17cb      	asrs	r3, r1, #31
 80046ee:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80046f2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80046f6:	4313      	orrs	r3, r2
 80046f8:	d110      	bne.n	800471c <BMP280_measureP+0x2e8>
	{
	return 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	e154      	b.n	80049a8 <BMP280_measureP+0x574>
 80046fe:	bf00      	nop
 8004700:	24001434 	.word	0x24001434
 8004704:	24001424 	.word	0x24001424
 8004708:	24001422 	.word	0x24001422
 800470c:	24001420 	.word	0x24001420
 8004710:	2400141e 	.word	0x2400141e
 8004714:	2400141c 	.word	0x2400141c
 8004718:	24001416 	.word	0x24001416
	}
	p = 1048576-adc_P;
 800471c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004720:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8004724:	17da      	asrs	r2, r3, #31
 8004726:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800472a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800472e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8004732:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004736:	105b      	asrs	r3, r3, #1
 8004738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800473c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004740:	07db      	lsls	r3, r3, #31
 8004742:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004746:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800474a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800474e:	4621      	mov	r1, r4
 8004750:	1a89      	subs	r1, r1, r2
 8004752:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004754:	4629      	mov	r1, r5
 8004756:	eb61 0303 	sbc.w	r3, r1, r3
 800475a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800475c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004760:	4622      	mov	r2, r4
 8004762:	462b      	mov	r3, r5
 8004764:	1891      	adds	r1, r2, r2
 8004766:	6239      	str	r1, [r7, #32]
 8004768:	415b      	adcs	r3, r3
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
 800476c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004770:	4621      	mov	r1, r4
 8004772:	1851      	adds	r1, r2, r1
 8004774:	61b9      	str	r1, [r7, #24]
 8004776:	4629      	mov	r1, r5
 8004778:	414b      	adcs	r3, r1
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004788:	4649      	mov	r1, r9
 800478a:	018b      	lsls	r3, r1, #6
 800478c:	4641      	mov	r1, r8
 800478e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004792:	4641      	mov	r1, r8
 8004794:	018a      	lsls	r2, r1, #6
 8004796:	4641      	mov	r1, r8
 8004798:	1889      	adds	r1, r1, r2
 800479a:	6139      	str	r1, [r7, #16]
 800479c:	4649      	mov	r1, r9
 800479e:	eb43 0101 	adc.w	r1, r3, r1
 80047a2:	6179      	str	r1, [r7, #20]
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80047b0:	4649      	mov	r1, r9
 80047b2:	008b      	lsls	r3, r1, #2
 80047b4:	4641      	mov	r1, r8
 80047b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ba:	4641      	mov	r1, r8
 80047bc:	008a      	lsls	r2, r1, #2
 80047be:	4610      	mov	r0, r2
 80047c0:	4619      	mov	r1, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	4622      	mov	r2, r4
 80047c6:	189b      	adds	r3, r3, r2
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	460b      	mov	r3, r1
 80047cc:	462a      	mov	r2, r5
 80047ce:	eb42 0303 	adc.w	r3, r2, r3
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80047e0:	4649      	mov	r1, r9
 80047e2:	008b      	lsls	r3, r1, #2
 80047e4:	4641      	mov	r1, r8
 80047e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ea:	4641      	mov	r1, r8
 80047ec:	008a      	lsls	r2, r1, #2
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	4622      	mov	r2, r4
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80047fa:	462b      	mov	r3, r5
 80047fc:	460a      	mov	r2, r1
 80047fe:	eb42 0303 	adc.w	r3, r2, r3
 8004802:	677b      	str	r3, [r7, #116]	@ 0x74
 8004804:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004808:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800480c:	f7fb ff8c 	bl	8000728 <__aeabi_ldivmod>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8004818:	4b66      	ldr	r3, [pc, #408]	@ (80049b4 <BMP280_measureP+0x580>)
 800481a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800481e:	b21b      	sxth	r3, r3
 8004820:	17da      	asrs	r2, r3, #31
 8004822:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004824:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004826:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800482a:	f04f 0000 	mov.w	r0, #0
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	0b50      	lsrs	r0, r2, #13
 8004834:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004838:	1359      	asrs	r1, r3, #13
 800483a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800483e:	462b      	mov	r3, r5
 8004840:	fb00 f203 	mul.w	r2, r0, r3
 8004844:	4623      	mov	r3, r4
 8004846:	fb03 f301 	mul.w	r3, r3, r1
 800484a:	4413      	add	r3, r2
 800484c:	4622      	mov	r2, r4
 800484e:	fba2 1200 	umull	r1, r2, r2, r0
 8004852:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004856:	460a      	mov	r2, r1
 8004858:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800485c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004860:	4413      	add	r3, r2
 8004862:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004866:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800486a:	f04f 0000 	mov.w	r0, #0
 800486e:	f04f 0100 	mov.w	r1, #0
 8004872:	0b50      	lsrs	r0, r2, #13
 8004874:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004878:	1359      	asrs	r1, r3, #13
 800487a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800487e:	462b      	mov	r3, r5
 8004880:	fb00 f203 	mul.w	r2, r0, r3
 8004884:	4623      	mov	r3, r4
 8004886:	fb03 f301 	mul.w	r3, r3, r1
 800488a:	4413      	add	r3, r2
 800488c:	4622      	mov	r2, r4
 800488e:	fba2 1200 	umull	r1, r2, r2, r0
 8004892:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004896:	460a      	mov	r2, r1
 8004898:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800489c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80048a0:	4413      	add	r3, r2
 80048a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80048b2:	4621      	mov	r1, r4
 80048b4:	0e4a      	lsrs	r2, r1, #25
 80048b6:	4629      	mov	r1, r5
 80048b8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80048bc:	4629      	mov	r1, r5
 80048be:	164b      	asrs	r3, r1, #25
 80048c0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80048c4:	4b3c      	ldr	r3, [pc, #240]	@ (80049b8 <BMP280_measureP+0x584>)
 80048c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ca:	b21b      	sxth	r3, r3
 80048cc:	17da      	asrs	r2, r3, #31
 80048ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80048d0:	667a      	str	r2, [r7, #100]	@ 0x64
 80048d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80048d6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80048da:	462a      	mov	r2, r5
 80048dc:	fb02 f203 	mul.w	r2, r2, r3
 80048e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e4:	4621      	mov	r1, r4
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80048f0:	4621      	mov	r1, r4
 80048f2:	fba2 1201 	umull	r1, r2, r2, r1
 80048f6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80048fa:	460a      	mov	r2, r1
 80048fc:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8004900:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8004904:	4413      	add	r3, r2
 8004906:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8004916:	4621      	mov	r1, r4
 8004918:	0cca      	lsrs	r2, r1, #19
 800491a:	4629      	mov	r1, r5
 800491c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004920:	4629      	mov	r1, r5
 8004922:	14cb      	asrs	r3, r1, #19
 8004924:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8004928:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800492c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004930:	1884      	adds	r4, r0, r2
 8004932:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004934:	eb41 0303 	adc.w	r3, r1, r3
 8004938:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800493a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800493e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8004942:	4621      	mov	r1, r4
 8004944:	1889      	adds	r1, r1, r2
 8004946:	6539      	str	r1, [r7, #80]	@ 0x50
 8004948:	4629      	mov	r1, r5
 800494a:	eb43 0101 	adc.w	r1, r3, r1
 800494e:	6579      	str	r1, [r7, #84]	@ 0x54
 8004950:	f04f 0000 	mov.w	r0, #0
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800495c:	4623      	mov	r3, r4
 800495e:	0a18      	lsrs	r0, r3, #8
 8004960:	462b      	mov	r3, r5
 8004962:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004966:	462b      	mov	r3, r5
 8004968:	1219      	asrs	r1, r3, #8
 800496a:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <BMP280_measureP+0x588>)
 800496c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004970:	b21b      	sxth	r3, r3
 8004972:	17da      	asrs	r2, r3, #31
 8004974:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004976:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8004984:	464c      	mov	r4, r9
 8004986:	0123      	lsls	r3, r4, #4
 8004988:	4644      	mov	r4, r8
 800498a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800498e:	4644      	mov	r4, r8
 8004990:	0122      	lsls	r2, r4, #4
 8004992:	1884      	adds	r4, r0, r2
 8004994:	603c      	str	r4, [r7, #0]
 8004996:	eb41 0303 	adc.w	r3, r1, r3
 800499a:	607b      	str	r3, [r7, #4]
 800499c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80049a0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80049a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80049ae:	46bd      	mov	sp, r7
 80049b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049b4:	2400142a 	.word	0x2400142a
 80049b8:	24001428 	.word	0x24001428
 80049bc:	24001426 	.word	0x24001426

080049c0 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <BMP280_measureH+0x14>
 80049d0:	2300      	movs	r3, #0
 80049d2:	e03d      	b.n	8004a50 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80049de:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8004a58 <BMP280_measureH+0x98>
 80049e2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80049e6:	eeb0 0b46 	vmov.f64	d0, d6
 80049ea:	f014 fe49 	bl	8019680 <log>
 80049ee:	eeb0 7b40 	vmov.f64	d7, d0
 80049f2:	eeb1 7b47 	vneg.f64	d7, d7
 80049f6:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 80049fa:	ed97 7b06 	vldr	d7, [r7, #24]
 80049fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a06:	d101      	bne.n	8004a0c <BMP280_measureH+0x4c>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e021      	b.n	8004a50 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004a16:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004a60 <BMP280_measureH+0xa0>
 8004a1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004a1e:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8004a68 <BMP280_measureH+0xa8>
 8004a22:	ee37 6b06 	vadd.f64	d6, d7, d6
 8004a26:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004a70 <BMP280_measureH+0xb0>
 8004a2a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004a2e:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8004a32:	ed97 5b06 	vldr	d5, [r7, #24]
 8004a36:	ed97 6b04 	vldr	d6, [r7, #16]
 8004a3a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8004a3e:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8004a42:	ed97 7b02 	vldr	d7, [r7, #8]
 8004a46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004a4a:	ee17 3a90 	vmov	r3, s15
 8004a4e:	b29b      	uxth	r3, r3
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	40f8bcd0 	.word	0x40f8bcd0
 8004a60:	00000000 	.word	0x00000000
 8004a64:	40590000 	.word	0x40590000
 8004a68:	66666666 	.word	0x66666666
 8004a6c:	40711266 	.word	0x40711266
 8004a70:	ca402a92 	.word	0xca402a92
 8004a74:	3fa17e3e 	.word	0x3fa17e3e

08004a78 <BMP280_init>:

void BMP280_init(void){
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004a82:	480d      	ldr	r0, [pc, #52]	@ (8004ab8 <BMP280_init+0x40>)
 8004a84:	f005 fa96 	bl	8009fb4 <HAL_GPIO_WritePin>
	BMP280_config();
 8004a88:	f7ff fb8a 	bl	80041a0 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8004a8c:	2089      	movs	r0, #137	@ 0x89
 8004a8e:	f7ff fb59 	bl	8004144 <BMP280_read>
 8004a92:	4603      	mov	r3, r0
 8004a94:	461a      	mov	r2, r3
 8004a96:	4b09      	ldr	r3, [pc, #36]	@ (8004abc <BMP280_init+0x44>)
 8004a98:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8004a9a:	f7ff fb8d 	bl	80041b8 <BMP280_calibrationData>
	BMP280_readRawValues();
 8004a9e:	f7ff fc41 	bl	8004324 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8004aa2:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <BMP280_init+0x48>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fc80 	bl	80043ac <BMP280_measureT>
 8004aac:	4603      	mov	r3, r0
 8004aae:	4a03      	ldr	r2, [pc, #12]	@ (8004abc <BMP280_init+0x44>)
 8004ab0:	6093      	str	r3, [r2, #8]
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	58020400 	.word	0x58020400
 8004abc:	24001400 	.word	0x24001400
 8004ac0:	2400142c 	.word	0x2400142c

08004ac4 <BMP280_calculate>:

void BMP280_calculate(void){
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8004ac8:	2089      	movs	r0, #137	@ 0x89
 8004aca:	f7ff fb3b 	bl	8004144 <BMP280_read>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4b16      	ldr	r3, [pc, #88]	@ (8004b2c <BMP280_calculate+0x68>)
 8004ad4:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 8004ad6:	f7ff fc25 	bl	8004324 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8004ada:	4b15      	ldr	r3, [pc, #84]	@ (8004b30 <BMP280_calculate+0x6c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fc64 	bl	80043ac <BMP280_measureT>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4a11      	ldr	r2, [pc, #68]	@ (8004b2c <BMP280_calculate+0x68>)
 8004ae8:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8004aea:	4b12      	ldr	r3, [pc, #72]	@ (8004b34 <BMP280_calculate+0x70>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff fca0 	bl	8004434 <BMP280_measureP>
 8004af4:	4603      	mov	r3, r0
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	4a0c      	ldr	r2, [pc, #48]	@ (8004b2c <BMP280_calculate+0x68>)
 8004afa:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8004afc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <BMP280_calculate+0x68>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4a0a      	ldr	r2, [pc, #40]	@ (8004b2c <BMP280_calculate+0x68>)
 8004b02:	6892      	ldr	r2, [r2, #8]
 8004b04:	4611      	mov	r1, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff ff5a 	bl	80049c0 <BMP280_measureH>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4b06      	ldr	r3, [pc, #24]	@ (8004b2c <BMP280_calculate+0x68>)
 8004b12:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 8004b14:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <BMP280_calculate+0x68>)
 8004b16:	8a1a      	ldrh	r2, [r3, #16]
 8004b18:	4b04      	ldr	r3, [pc, #16]	@ (8004b2c <BMP280_calculate+0x68>)
 8004b1a:	8a5b      	ldrh	r3, [r3, #18]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d903      	bls.n	8004b28 <BMP280_calculate+0x64>
 8004b20:	4b02      	ldr	r3, [pc, #8]	@ (8004b2c <BMP280_calculate+0x68>)
 8004b22:	8a1a      	ldrh	r2, [r3, #16]
 8004b24:	4b01      	ldr	r3, [pc, #4]	@ (8004b2c <BMP280_calculate+0x68>)
 8004b26:	825a      	strh	r2, [r3, #18]
}
 8004b28:	bf00      	nop
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	24001400 	.word	0x24001400
 8004b30:	2400142c 	.word	0x2400142c
 8004b34:	24001430 	.word	0x24001430

08004b38 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8004b42:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <bno055_delay+0x24>)
 8004b44:	781a      	ldrb	r2, [r3, #0]
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	4413      	add	r3, r2
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	4b03      	ldr	r3, [pc, #12]	@ (8004b5c <bno055_delay+0x24>)
 8004b4e:	701a      	strb	r2, [r3, #0]
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	2400153b 	.word	0x2400153b

08004b60 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	460a      	mov	r2, r1
 8004b6a:	71fb      	strb	r3, [r7, #7]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8004b70:	23aa      	movs	r3, #170	@ 0xaa
 8004b72:	723b      	strb	r3, [r7, #8]
 8004b74:	2301      	movs	r3, #1
 8004b76:	727b      	strb	r3, [r7, #9]
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	72bb      	strb	r3, [r7, #10]
 8004b7c:	79bb      	ldrb	r3, [r7, #6]
 8004b7e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8004b80:	4a08      	ldr	r2, [pc, #32]	@ (8004ba4 <BNO_Read+0x44>)
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 8004b86:	f107 0108 	add.w	r1, r7, #8
 8004b8a:	2364      	movs	r3, #100	@ 0x64
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	4806      	ldr	r0, [pc, #24]	@ (8004ba8 <BNO_Read+0x48>)
 8004b90:	f00a fc36 	bl	800f400 <HAL_UART_Transmit>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	24001438 	.word	0x24001438
 8004ba8:	24001170 	.word	0x24001170

08004bac <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	460a      	mov	r2, r1
 8004bb6:	71fb      	strb	r3, [r7, #7]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 8004bbc:	23aa      	movs	r3, #170	@ 0xaa
 8004bbe:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 8004bcc:	79bb      	ldrb	r3, [r7, #6]
 8004bce:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 8004bd0:	f107 0108 	add.w	r1, r7, #8
 8004bd4:	2364      	movs	r3, #100	@ 0x64
 8004bd6:	2205      	movs	r2, #5
 8004bd8:	4804      	ldr	r0, [pc, #16]	@ (8004bec <BNO_Write+0x40>)
 8004bda:	f00a fc11 	bl	800f400 <HAL_UART_Transmit>
 8004bde:	4603      	mov	r3, r0
 8004be0:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	24001170 	.word	0x24001170

08004bf0 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b0c4      	sub	sp, #272	@ 0x110
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004bfa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c04:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004c08:	4602      	mov	r2, r0
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c10:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004c14:	460a      	mov	r2, r1
 8004c16:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 8004c18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c20:	22aa      	movs	r2, #170	@ 0xaa
 8004c22:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 8004c24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8004c30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c38:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004c3c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8004c40:	7812      	ldrb	r2, [r2, #0]
 8004c42:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8004c44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c4c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004c50:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8004c54:	7812      	ldrb	r2, [r2, #0]
 8004c56:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004c5e:	e015      	b.n	8004c8c <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 8004c60:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004c64:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004c68:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	441a      	add	r2, r3
 8004c70:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004c74:	3304      	adds	r3, #4
 8004c76:	7811      	ldrb	r1, [r2, #0]
 8004c78:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004c7c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8004c80:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 8004c82:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004c86:	3301      	adds	r3, #1
 8004c88:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004c8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004c90:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004c94:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d3e0      	bcc.n	8004c60 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 8004c9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004ca2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3304      	adds	r3, #4
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	f107 010c 	add.w	r1, r7, #12
 8004cb2:	2364      	movs	r3, #100	@ 0x64
 8004cb4:	4806      	ldr	r0, [pc, #24]	@ (8004cd0 <BNO_Write_MB+0xe0>)
 8004cb6:	f00a fba3 	bl	800f400 <HAL_UART_Transmit>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8004cc0:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	24001170 	.word	0x24001170

08004cd4 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8004cd8:	4ba6      	ldr	r3, [pc, #664]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b55      	cmp	r3, #85	@ 0x55
 8004cde:	f300 8247 	bgt.w	8005170 <BNO_Page0Adress+0x49c>
 8004ce2:	2b35      	cmp	r3, #53	@ 0x35
 8004ce4:	da0a      	bge.n	8004cfc <BNO_Page0Adress+0x28>
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	f000 814a 	beq.w	8004f80 <BNO_Page0Adress+0x2ac>
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	f300 823f 	bgt.w	8005170 <BNO_Page0Adress+0x49c>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d04c      	beq.n	8004d90 <BNO_Page0Adress+0xbc>
 8004cf6:	2b07      	cmp	r3, #7
 8004cf8:	d064      	beq.n	8004dc4 <BNO_Page0Adress+0xf0>
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 8004cfa:	e239      	b.n	8005170 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 8004cfc:	3b35      	subs	r3, #53	@ 0x35
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	f200 8236 	bhi.w	8005170 <BNO_Page0Adress+0x49c>
 8004d04:	a201      	add	r2, pc, #4	@ (adr r2, 8004d0c <BNO_Page0Adress+0x38>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004e0d 	.word	0x08004e0d
 8004d10:	08005171 	.word	0x08005171
 8004d14:	08005171 	.word	0x08005171
 8004d18:	08005171 	.word	0x08005171
 8004d1c:	08004de9 	.word	0x08004de9
 8004d20:	08005171 	.word	0x08005171
 8004d24:	08004dd7 	.word	0x08004dd7
 8004d28:	08005171 	.word	0x08005171
 8004d2c:	08004dfb 	.word	0x08004dfb
 8004d30:	08005171 	.word	0x08005171
 8004d34:	08005171 	.word	0x08005171
 8004d38:	08005171 	.word	0x08005171
 8004d3c:	08005171 	.word	0x08005171
 8004d40:	08005171 	.word	0x08005171
 8004d44:	08005171 	.word	0x08005171
 8004d48:	08005171 	.word	0x08005171
 8004d4c:	08005171 	.word	0x08005171
 8004d50:	08005171 	.word	0x08005171
 8004d54:	08005171 	.word	0x08005171
 8004d58:	08005171 	.word	0x08005171
 8004d5c:	08005171 	.word	0x08005171
 8004d60:	08005171 	.word	0x08005171
 8004d64:	08005171 	.word	0x08005171
 8004d68:	08005171 	.word	0x08005171
 8004d6c:	08005171 	.word	0x08005171
 8004d70:	08005171 	.word	0x08005171
 8004d74:	08005171 	.word	0x08005171
 8004d78:	08005171 	.word	0x08005171
 8004d7c:	08005171 	.word	0x08005171
 8004d80:	08005171 	.word	0x08005171
 8004d84:	08005171 	.word	0x08005171
 8004d88:	08005171 	.word	0x08005171
 8004d8c:	08004e65 	.word	0x08004e65
			if(BNO_RxBuffer[1] != 160) return;
 8004d90:	4b78      	ldr	r3, [pc, #480]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004d92:	785b      	ldrb	r3, [r3, #1]
 8004d94:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d96:	f040 81ed 	bne.w	8005174 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 8004d9a:	4b76      	ldr	r3, [pc, #472]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004d9c:	785a      	ldrb	r2, [r3, #1]
 8004d9e:	4b76      	ldr	r3, [pc, #472]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004da0:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 8004da2:	4b74      	ldr	r3, [pc, #464]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004da4:	789a      	ldrb	r2, [r3, #2]
 8004da6:	4b74      	ldr	r3, [pc, #464]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004da8:	711a      	strb	r2, [r3, #4]
			IMU.MAG.ID = BNO_RxBuffer[3];
 8004daa:	4b72      	ldr	r3, [pc, #456]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004dac:	78da      	ldrb	r2, [r3, #3]
 8004dae:	4b72      	ldr	r3, [pc, #456]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004db0:	751a      	strb	r2, [r3, #20]
			IMU.GYR.ID = BNO_RxBuffer[4];
 8004db2:	4b70      	ldr	r3, [pc, #448]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004db4:	791a      	ldrb	r2, [r3, #4]
 8004db6:	4b70      	ldr	r3, [pc, #448]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BNO_ErrorHandler = ReadSucces;
 8004dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8004f7c <BNO_Page0Adress+0x2a8>)
 8004dbe:	220b      	movs	r2, #11
 8004dc0:	701a      	strb	r2, [r3, #0]
			break;
 8004dc2:	e1d8      	b.n	8005176 <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 8004dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004dc6:	785a      	ldrb	r2, [r3, #1]
 8004dc8:	4b6b      	ldr	r3, [pc, #428]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 8004dce:	4b6b      	ldr	r3, [pc, #428]	@ (8004f7c <BNO_Page0Adress+0x2a8>)
 8004dd0:	220b      	movs	r2, #11
 8004dd2:	701a      	strb	r2, [r3, #0]
			break;
 8004dd4:	e1cf      	b.n	8005176 <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 8004dd6:	4b67      	ldr	r3, [pc, #412]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004dd8:	785a      	ldrb	r2, [r3, #1]
 8004dda:	4b67      	ldr	r3, [pc, #412]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			BNO_ErrorHandler = ReadSucces;
 8004de0:	4b66      	ldr	r3, [pc, #408]	@ (8004f7c <BNO_Page0Adress+0x2a8>)
 8004de2:	220b      	movs	r2, #11
 8004de4:	701a      	strb	r2, [r3, #0]
			break;
 8004de6:	e1c6      	b.n	8005176 <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 8004de8:	4b62      	ldr	r3, [pc, #392]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004dea:	785a      	ldrb	r2, [r3, #1]
 8004dec:	4b62      	ldr	r3, [pc, #392]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004dee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 8004df2:	4b62      	ldr	r3, [pc, #392]	@ (8004f7c <BNO_Page0Adress+0x2a8>)
 8004df4:	220b      	movs	r2, #11
 8004df6:	701a      	strb	r2, [r3, #0]
			break;
 8004df8:	e1bd      	b.n	8005176 <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 8004dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004dfc:	785a      	ldrb	r2, [r3, #1]
 8004dfe:	4b5e      	ldr	r3, [pc, #376]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004e00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			BNO_ErrorHandler = ReadSucces;
 8004e04:	4b5d      	ldr	r3, [pc, #372]	@ (8004f7c <BNO_Page0Adress+0x2a8>)
 8004e06:	220b      	movs	r2, #11
 8004e08:	701a      	strb	r2, [r3, #0]
			break;
 8004e0a:	e1b4      	b.n	8005176 <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 8004e0c:	4b59      	ldr	r3, [pc, #356]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004e0e:	785a      	ldrb	r2, [r3, #1]
 8004e10:	4b59      	ldr	r3, [pc, #356]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004e12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 8004e16:	4b57      	ldr	r3, [pc, #348]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004e18:	785b      	ldrb	r3, [r3, #1]
 8004e1a:	099b      	lsrs	r3, r3, #6
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	4b56      	ldr	r3, [pc, #344]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 8004e24:	4b53      	ldr	r3, [pc, #332]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	4b51      	ldr	r3, [pc, #324]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 8004e38:	4b4e      	ldr	r3, [pc, #312]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	089b      	lsrs	r3, r3, #2
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	4b4c      	ldr	r3, [pc, #304]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 8004e4c:	4b49      	ldr	r3, [pc, #292]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004e4e:	785b      	ldrb	r3, [r3, #1]
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4b48      	ldr	r3, [pc, #288]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			BNO_ErrorHandler = ReadSucces;
 8004e5c:	4b47      	ldr	r3, [pc, #284]	@ (8004f7c <BNO_Page0Adress+0x2a8>)
 8004e5e:	220b      	movs	r2, #11
 8004e60:	701a      	strb	r2, [r3, #0]
			break;
 8004e62:	e188      	b.n	8005176 <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 8004e64:	4b43      	ldr	r3, [pc, #268]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004e66:	789b      	ldrb	r3, [r3, #2]
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	b21a      	sxth	r2, r3
 8004e6c:	4b41      	ldr	r3, [pc, #260]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	b21b      	sxth	r3, r3
 8004e72:	4313      	orrs	r3, r2
 8004e74:	b21a      	sxth	r2, r3
 8004e76:	4b40      	ldr	r3, [pc, #256]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004e78:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 8004e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004e7e:	791b      	ldrb	r3, [r3, #4]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	b21a      	sxth	r2, r3
 8004e84:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004e86:	78db      	ldrb	r3, [r3, #3]
 8004e88:	b21b      	sxth	r3, r3
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	b21a      	sxth	r2, r3
 8004e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004e90:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 8004e94:	4b37      	ldr	r3, [pc, #220]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004e96:	799b      	ldrb	r3, [r3, #6]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	b21a      	sxth	r2, r3
 8004e9c:	4b35      	ldr	r3, [pc, #212]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004e9e:	795b      	ldrb	r3, [r3, #5]
 8004ea0:	b21b      	sxth	r3, r3
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	b21a      	sxth	r2, r3
 8004ea6:	4b34      	ldr	r3, [pc, #208]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004ea8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 8004eac:	4b31      	ldr	r3, [pc, #196]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004eae:	7a1b      	ldrb	r3, [r3, #8]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	b21a      	sxth	r2, r3
 8004eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004eb6:	79db      	ldrb	r3, [r3, #7]
 8004eb8:	b21b      	sxth	r3, r3
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	b21a      	sxth	r2, r3
 8004ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004ec0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 8004ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004ec6:	7a9b      	ldrb	r3, [r3, #10]
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	b21a      	sxth	r2, r3
 8004ecc:	4b29      	ldr	r3, [pc, #164]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004ece:	7a5b      	ldrb	r3, [r3, #9]
 8004ed0:	b21b      	sxth	r3, r3
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	b21a      	sxth	r2, r3
 8004ed6:	4b28      	ldr	r3, [pc, #160]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004ed8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 8004edc:	4b25      	ldr	r3, [pc, #148]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004ede:	7b1b      	ldrb	r3, [r3, #12]
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	b21a      	sxth	r2, r3
 8004ee4:	4b23      	ldr	r3, [pc, #140]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004ee6:	7adb      	ldrb	r3, [r3, #11]
 8004ee8:	b21b      	sxth	r3, r3
 8004eea:	4313      	orrs	r3, r2
 8004eec:	b21a      	sxth	r2, r3
 8004eee:	4b22      	ldr	r3, [pc, #136]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004ef0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 8004ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004ef6:	7b9b      	ldrb	r3, [r3, #14]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	b21a      	sxth	r2, r3
 8004efc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004efe:	7b5b      	ldrb	r3, [r3, #13]
 8004f00:	b21b      	sxth	r3, r3
 8004f02:	4313      	orrs	r3, r2
 8004f04:	b21a      	sxth	r2, r3
 8004f06:	4b1c      	ldr	r3, [pc, #112]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004f08:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 8004f0c:	4b19      	ldr	r3, [pc, #100]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004f0e:	7c1b      	ldrb	r3, [r3, #16]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	b21a      	sxth	r2, r3
 8004f14:	4b17      	ldr	r3, [pc, #92]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004f16:	7bdb      	ldrb	r3, [r3, #15]
 8004f18:	b21b      	sxth	r3, r3
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	b21a      	sxth	r2, r3
 8004f1e:	4b16      	ldr	r3, [pc, #88]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004f20:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 8004f24:	4b13      	ldr	r3, [pc, #76]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004f26:	7c9b      	ldrb	r3, [r3, #18]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	b21a      	sxth	r2, r3
 8004f2c:	4b11      	ldr	r3, [pc, #68]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004f2e:	7c5b      	ldrb	r3, [r3, #17]
 8004f30:	b21b      	sxth	r3, r3
 8004f32:	4313      	orrs	r3, r2
 8004f34:	b21a      	sxth	r2, r3
 8004f36:	4b10      	ldr	r3, [pc, #64]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004f38:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 8004f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004f3e:	7d1b      	ldrb	r3, [r3, #20]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	b21a      	sxth	r2, r3
 8004f44:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004f46:	7cdb      	ldrb	r3, [r3, #19]
 8004f48:	b21b      	sxth	r3, r3
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	b21b      	sxth	r3, r3
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004f52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 8004f56:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004f58:	7d9b      	ldrb	r3, [r3, #22]
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	b21a      	sxth	r2, r3
 8004f5e:	4b05      	ldr	r3, [pc, #20]	@ (8004f74 <BNO_Page0Adress+0x2a0>)
 8004f60:	7d5b      	ldrb	r3, [r3, #21]
 8004f62:	b21b      	sxth	r3, r3
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b21b      	sxth	r3, r3
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	4b03      	ldr	r3, [pc, #12]	@ (8004f78 <BNO_Page0Adress+0x2a4>)
 8004f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			break;
 8004f70:	e101      	b.n	8005176 <BNO_Page0Adress+0x4a2>
 8004f72:	bf00      	nop
 8004f74:	24001438 	.word	0x24001438
 8004f78:	24001540 	.word	0x24001540
 8004f7c:	24001539 	.word	0x24001539
			IMU.ACC.x = ((float)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 8004f80:	4b7f      	ldr	r3, [pc, #508]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8004f82:	789b      	ldrb	r3, [r3, #2]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	b21a      	sxth	r2, r3
 8004f88:	4b7d      	ldr	r3, [pc, #500]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8004f8a:	785b      	ldrb	r3, [r3, #1]
 8004f8c:	b21b      	sxth	r3, r3
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	b21b      	sxth	r3, r3
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f9a:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8005184 <BNO_Page0Adress+0x4b0>
 8004f9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fa2:	4b79      	ldr	r3, [pc, #484]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 8004fa4:	edc3 7a02 	vstr	s15, [r3, #8]
			IMU.ACC.y = ((float)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8004fa8:	4b75      	ldr	r3, [pc, #468]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8004faa:	791b      	ldrb	r3, [r3, #4]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	b21a      	sxth	r2, r3
 8004fb0:	4b73      	ldr	r3, [pc, #460]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8004fb2:	78db      	ldrb	r3, [r3, #3]
 8004fb4:	b21b      	sxth	r3, r3
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	b21b      	sxth	r3, r3
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fc2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005184 <BNO_Page0Adress+0x4b0>
 8004fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fca:	4b6f      	ldr	r3, [pc, #444]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 8004fcc:	edc3 7a03 	vstr	s15, [r3, #12]
			IMU.ACC.z = ((float)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 8004fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8004fd2:	799b      	ldrb	r3, [r3, #6]
 8004fd4:	021b      	lsls	r3, r3, #8
 8004fd6:	b21a      	sxth	r2, r3
 8004fd8:	4b69      	ldr	r3, [pc, #420]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8004fda:	795b      	ldrb	r3, [r3, #5]
 8004fdc:	b21b      	sxth	r3, r3
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	b21b      	sxth	r3, r3
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fea:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8005184 <BNO_Page0Adress+0x4b0>
 8004fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ff2:	4b65      	ldr	r3, [pc, #404]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 8004ff4:	edc3 7a04 	vstr	s15, [r3, #16]
			IMU.MAG.x = ((float)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 8004ff8:	4b61      	ldr	r3, [pc, #388]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8004ffa:	7a1b      	ldrb	r3, [r3, #8]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	b21a      	sxth	r2, r3
 8005000:	4b5f      	ldr	r3, [pc, #380]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8005002:	79db      	ldrb	r3, [r3, #7]
 8005004:	b21b      	sxth	r3, r3
 8005006:	4313      	orrs	r3, r2
 8005008:	b21b      	sxth	r3, r3
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005012:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800501a:	4b5b      	ldr	r3, [pc, #364]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 800501c:	edc3 7a06 	vstr	s15, [r3, #24]
			IMU.MAG.y = ((float)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 8005020:	4b57      	ldr	r3, [pc, #348]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8005022:	7a9b      	ldrb	r3, [r3, #10]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	b21a      	sxth	r2, r3
 8005028:	4b55      	ldr	r3, [pc, #340]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 800502a:	7a5b      	ldrb	r3, [r3, #9]
 800502c:	b21b      	sxth	r3, r3
 800502e:	4313      	orrs	r3, r2
 8005030:	b21b      	sxth	r3, r3
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800503a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800503e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005042:	4b51      	ldr	r3, [pc, #324]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 8005044:	edc3 7a07 	vstr	s15, [r3, #28]
			IMU.MAG.z = ((float)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8005048:	4b4d      	ldr	r3, [pc, #308]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 800504a:	7b1b      	ldrb	r3, [r3, #12]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	b21a      	sxth	r2, r3
 8005050:	4b4b      	ldr	r3, [pc, #300]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8005052:	7adb      	ldrb	r3, [r3, #11]
 8005054:	b21b      	sxth	r3, r3
 8005056:	4313      	orrs	r3, r2
 8005058:	b21b      	sxth	r3, r3
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005062:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800506a:	4b47      	ldr	r3, [pc, #284]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 800506c:	edc3 7a08 	vstr	s15, [r3, #32]
			IMU.GYR.x = ((float)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8005070:	4b43      	ldr	r3, [pc, #268]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8005072:	7b9b      	ldrb	r3, [r3, #14]
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	b21a      	sxth	r2, r3
 8005078:	4b41      	ldr	r3, [pc, #260]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 800507a:	7b5b      	ldrb	r3, [r3, #13]
 800507c:	b21b      	sxth	r3, r3
 800507e:	4313      	orrs	r3, r2
 8005080:	b21b      	sxth	r3, r3
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800508a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800508e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005092:	4b3d      	ldr	r3, [pc, #244]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 8005094:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			IMU.GYR.y = -((float)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8005098:	4b39      	ldr	r3, [pc, #228]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 800509a:	7c1b      	ldrb	r3, [r3, #16]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	b21a      	sxth	r2, r3
 80050a0:	4b37      	ldr	r3, [pc, #220]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 80050a2:	7bdb      	ldrb	r3, [r3, #15]
 80050a4:	b21b      	sxth	r3, r3
 80050a6:	4313      	orrs	r3, r2
 80050a8:	b21b      	sxth	r3, r3
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b2:	eeb1 7a67 	vneg.f32	s14, s15
 80050b6:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80050ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050be:	4b32      	ldr	r3, [pc, #200]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 80050c0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			IMU.GYR.z = -((float)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 80050c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 80050c6:	7c9b      	ldrb	r3, [r3, #18]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	b21a      	sxth	r2, r3
 80050cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 80050ce:	7c5b      	ldrb	r3, [r3, #17]
 80050d0:	b21b      	sxth	r3, r3
 80050d2:	4313      	orrs	r3, r2
 80050d4:	b21b      	sxth	r3, r3
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050de:	eeb1 7a67 	vneg.f32	s14, s15
 80050e2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80050e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050ea:	4b27      	ldr	r3, [pc, #156]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 80050ec:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			IMU.Heading = ((float)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 80050f0:	4b23      	ldr	r3, [pc, #140]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 80050f2:	7d1b      	ldrb	r3, [r3, #20]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	b21a      	sxth	r2, r3
 80050f8:	4b21      	ldr	r3, [pc, #132]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 80050fa:	7cdb      	ldrb	r3, [r3, #19]
 80050fc:	b21b      	sxth	r3, r3
 80050fe:	4313      	orrs	r3, r2
 8005100:	b21b      	sxth	r3, r3
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800510a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800510e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005112:	4b1d      	ldr	r3, [pc, #116]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 8005114:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			IMU.Pitch = ((float)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 8005118:	4b19      	ldr	r3, [pc, #100]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 800511a:	7d9b      	ldrb	r3, [r3, #22]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	b21a      	sxth	r2, r3
 8005120:	4b17      	ldr	r3, [pc, #92]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8005122:	7d5b      	ldrb	r3, [r3, #21]
 8005124:	b21b      	sxth	r3, r3
 8005126:	4313      	orrs	r3, r2
 8005128:	b21b      	sxth	r3, r3
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005132:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800513a:	4b13      	ldr	r3, [pc, #76]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 800513c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8005140:	4b0f      	ldr	r3, [pc, #60]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 8005142:	7e1b      	ldrb	r3, [r3, #24]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	b21a      	sxth	r2, r3
 8005148:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <BNO_Page0Adress+0x4ac>)
 800514a:	7ddb      	ldrb	r3, [r3, #23]
 800514c:	b21b      	sxth	r3, r3
 800514e:	4313      	orrs	r3, r2
 8005150:	b21b      	sxth	r3, r3
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800515a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800515e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005162:	4b09      	ldr	r3, [pc, #36]	@ (8005188 <BNO_Page0Adress+0x4b4>)
 8005164:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			BNO_ErrorHandler = ReadSucces;
 8005168:	4b08      	ldr	r3, [pc, #32]	@ (800518c <BNO_Page0Adress+0x4b8>)
 800516a:	220b      	movs	r2, #11
 800516c:	701a      	strb	r2, [r3, #0]
			break;
 800516e:	e002      	b.n	8005176 <BNO_Page0Adress+0x4a2>
			break;
 8005170:	bf00      	nop
 8005172:	e000      	b.n	8005176 <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8005174:	bf00      	nop
	}
}
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	24001438 	.word	0x24001438
 8005184:	42c80000 	.word	0x42c80000
 8005188:	24001540 	.word	0x24001540
 800518c:	24001539 	.word	0x24001539

08005190 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8005194:	4b09      	ldr	r3, [pc, #36]	@ (80051bc <BNO_Page1Adress+0x2c>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b07      	cmp	r3, #7
 800519a:	d108      	bne.n	80051ae <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 800519c:	4b07      	ldr	r3, [pc, #28]	@ (80051bc <BNO_Page1Adress+0x2c>)
 800519e:	785a      	ldrb	r2, [r3, #1]
 80051a0:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <BNO_Page1Adress+0x30>)
 80051a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 80051a6:	4b07      	ldr	r3, [pc, #28]	@ (80051c4 <BNO_Page1Adress+0x34>)
 80051a8:	220b      	movs	r2, #11
 80051aa:	701a      	strb	r2, [r3, #0]
			break;
 80051ac:	e000      	b.n	80051b0 <BNO_Page1Adress+0x20>

		default:
			break;
 80051ae:	bf00      	nop
	}
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	24001438 	.word	0x24001438
 80051c0:	24001540 	.word	0x24001540
 80051c4:	24001539 	.word	0x24001539

080051c8 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 80051cc:	4b0a      	ldr	r3, [pc, #40]	@ (80051f8 <BNO_EmptyingBuffer+0x30>)
 80051ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <BNO_EmptyingBuffer+0x14>
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d003      	beq.n	80051e2 <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 80051da:	e005      	b.n	80051e8 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 80051dc:	f7ff fd7a 	bl	8004cd4 <BNO_Page0Adress>
			break;
 80051e0:	e002      	b.n	80051e8 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 80051e2:	f7ff ffd5 	bl	8005190 <BNO_Page1Adress>
			break;
 80051e6:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80051e8:	22ff      	movs	r2, #255	@ 0xff
 80051ea:	2100      	movs	r1, #0
 80051ec:	4803      	ldr	r0, [pc, #12]	@ (80051fc <BNO_EmptyingBuffer+0x34>)
 80051ee:	f012 fb5a 	bl	80178a6 <memset>
}
 80051f2:	bf00      	nop
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	24001540 	.word	0x24001540
 80051fc:	24001438 	.word	0x24001438

08005200 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 8005204:	2120      	movs	r1, #32
 8005206:	203f      	movs	r0, #63	@ 0x3f
 8005208:	f7ff fcd0 	bl	8004bac <BNO_Write>
	bno055_delay(70);
 800520c:	2046      	movs	r0, #70	@ 0x46
 800520e:	f7ff fc93 	bl	8004b38 <bno055_delay>
	IMU.ID = 0x00;
 8005212:	4b04      	ldr	r3, [pc, #16]	@ (8005224 <BNO_SWReset+0x24>)
 8005214:	2200      	movs	r2, #0
 8005216:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 8005218:	4b03      	ldr	r3, [pc, #12]	@ (8005228 <BNO_SWReset+0x28>)
 800521a:	2201      	movs	r2, #1
 800521c:	701a      	strb	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	24001540 	.word	0x24001540
 8005228:	2400153c 	.word	0x2400153c

0800522c <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	4619      	mov	r1, r3
 800523a:	203d      	movs	r0, #61	@ 0x3d
 800523c:	f7ff fcb6 	bl	8004bac <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d103      	bne.n	800524e <bno055_setOperationMode+0x22>
    bno055_delay(5);
 8005246:	2005      	movs	r0, #5
 8005248:	f7ff fc76 	bl	8004b38 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 800524c:	e002      	b.n	8005254 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 800524e:	2003      	movs	r0, #3
 8005250:	f7ff fc72 	bl	8004b38 <bno055_delay>
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8005260:	2000      	movs	r0, #0
 8005262:	f7ff ffe3 	bl	800522c <bno055_setOperationMode>
}
 8005266:	bf00      	nop
 8005268:	bd80      	pop	{r7, pc}

0800526a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800526a:	b580      	push	{r7, lr}
 800526c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800526e:	200c      	movs	r0, #12
 8005270:	f7ff ffdc 	bl	800522c <bno055_setOperationMode>
}
 8005274:	bf00      	nop
 8005276:	bd80      	pop	{r7, pc}

08005278 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 800527c:	2116      	movs	r1, #22
 800527e:	2055      	movs	r0, #85	@ 0x55
 8005280:	f7ff fc6e 	bl	8004b60 <BNO_Read>
}
 8005284:	bf00      	nop
 8005286:	bd80      	pop	{r7, pc}

08005288 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 800528e:	463b      	mov	r3, r7
 8005290:	2206      	movs	r2, #6
 8005292:	4619      	mov	r1, r3
 8005294:	4814      	ldr	r0, [pc, #80]	@ (80052e8 <BNO_SetCalibrationData+0x60>)
 8005296:	f012 fba0 	bl	80179da <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 800529a:	463b      	mov	r3, r7
 800529c:	3306      	adds	r3, #6
 800529e:	2206      	movs	r2, #6
 80052a0:	4619      	mov	r1, r3
 80052a2:	4812      	ldr	r0, [pc, #72]	@ (80052ec <BNO_SetCalibrationData+0x64>)
 80052a4:	f012 fb99 	bl	80179da <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 80052a8:	463b      	mov	r3, r7
 80052aa:	330c      	adds	r3, #12
 80052ac:	2206      	movs	r2, #6
 80052ae:	4619      	mov	r1, r3
 80052b0:	480f      	ldr	r0, [pc, #60]	@ (80052f0 <BNO_SetCalibrationData+0x68>)
 80052b2:	f012 fb92 	bl	80179da <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 80052b6:	463b      	mov	r3, r7
 80052b8:	3312      	adds	r3, #18
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29a      	uxth	r2, r3
 80052be:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <BNO_SetCalibrationData+0x6c>)
 80052c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 80052c4:	463b      	mov	r3, r7
 80052c6:	3314      	adds	r3, #20
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	4b09      	ldr	r3, [pc, #36]	@ (80052f4 <BNO_SetCalibrationData+0x6c>)
 80052ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 80052d2:	463b      	mov	r3, r7
 80052d4:	461a      	mov	r2, r3
 80052d6:	2116      	movs	r1, #22
 80052d8:	2055      	movs	r0, #85	@ 0x55
 80052da:	f7ff fc89 	bl	8004bf0 <BNO_Write_MB>
}
 80052de:	bf00      	nop
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	24001596 	.word	0x24001596
 80052ec:	24001590 	.word	0x24001590
 80052f0:	2400158a 	.word	0x2400158a
 80052f4:	24001540 	.word	0x24001540

080052f8 <BNO_Init>:

void BNO_Init(void){
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 80052fc:	2201      	movs	r2, #1
 80052fe:	2104      	movs	r1, #4
 8005300:	4808      	ldr	r0, [pc, #32]	@ (8005324 <BNO_Init+0x2c>)
 8005302:	f004 fe57 	bl	8009fb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8005306:	2201      	movs	r2, #1
 8005308:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800530c:	4806      	ldr	r0, [pc, #24]	@ (8005328 <BNO_Init+0x30>)
 800530e:	f004 fe51 	bl	8009fb4 <HAL_GPIO_WritePin>

	bno055_delay(100);
 8005312:	2064      	movs	r0, #100	@ 0x64
 8005314:	f7ff fc10 	bl	8004b38 <bno055_delay>

	BNO_CurrentState = Reset;
 8005318:	4b04      	ldr	r3, [pc, #16]	@ (800532c <BNO_Init+0x34>)
 800531a:	2204      	movs	r2, #4
 800531c:	701a      	strb	r2, [r3, #0]
}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	58020c00 	.word	0x58020c00
 8005328:	58020400 	.word	0x58020400
 800532c:	2400153c 	.word	0x2400153c

08005330 <BNO_Config>:

void BNO_Config(void){
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8005334:	4b20      	ldr	r3, [pc, #128]	@ (80053b8 <BNO_Config+0x88>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b03      	cmp	r3, #3
 800533a:	d839      	bhi.n	80053b0 <BNO_Config+0x80>
 800533c:	a201      	add	r2, pc, #4	@ (adr r2, 8005344 <BNO_Config+0x14>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005355 	.word	0x08005355
 8005348:	08005365 	.word	0x08005365
 800534c:	08005371 	.word	0x08005371
 8005350:	08005393 	.word	0x08005393
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8005354:	2100      	movs	r1, #0
 8005356:	203f      	movs	r0, #63	@ 0x3f
 8005358:	f7ff fc28 	bl	8004bac <BNO_Write>
			ConfigFlag = 1;
 800535c:	4b16      	ldr	r3, [pc, #88]	@ (80053b8 <BNO_Config+0x88>)
 800535e:	2201      	movs	r2, #1
 8005360:	701a      	strb	r2, [r3, #0]
			break;
 8005362:	e026      	b.n	80053b2 <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8005364:	f7ff ff7a 	bl	800525c <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8005368:	4b13      	ldr	r3, [pc, #76]	@ (80053b8 <BNO_Config+0x88>)
 800536a:	2202      	movs	r2, #2
 800536c:	701a      	strb	r2, [r3, #0]
			break;
 800536e:	e020      	b.n	80053b2 <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8005370:	2101      	movs	r1, #1
 8005372:	203d      	movs	r0, #61	@ 0x3d
 8005374:	f7ff fbf4 	bl	8004b60 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8005378:	4b10      	ldr	r3, [pc, #64]	@ (80053bc <BNO_Config+0x8c>)
 800537a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800537e:	2b00      	cmp	r3, #0
 8005380:	d103      	bne.n	800538a <BNO_Config+0x5a>
				ConfigFlag = 3;
 8005382:	4b0d      	ldr	r3, [pc, #52]	@ (80053b8 <BNO_Config+0x88>)
 8005384:	2203      	movs	r2, #3
 8005386:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8005388:	e013      	b.n	80053b2 <BNO_Config+0x82>
			else ConfigFlag = 1;
 800538a:	4b0b      	ldr	r3, [pc, #44]	@ (80053b8 <BNO_Config+0x88>)
 800538c:	2201      	movs	r2, #1
 800538e:	701a      	strb	r2, [r3, #0]
			break;
 8005390:	e00f      	b.n	80053b2 <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8005392:	2104      	movs	r1, #4
 8005394:	2000      	movs	r0, #0
 8005396:	f7ff fbe3 	bl	8004b60 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 800539a:	4b08      	ldr	r3, [pc, #32]	@ (80053bc <BNO_Config+0x8c>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2ba0      	cmp	r3, #160	@ 0xa0
 80053a0:	d102      	bne.n	80053a8 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 80053a2:	4b07      	ldr	r3, [pc, #28]	@ (80053c0 <BNO_Config+0x90>)
 80053a4:	2202      	movs	r2, #2
 80053a6:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 80053a8:	4b03      	ldr	r3, [pc, #12]	@ (80053b8 <BNO_Config+0x88>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
			break;
 80053ae:	e000      	b.n	80053b2 <BNO_Config+0x82>
		default:
			break;
 80053b0:	bf00      	nop
	}

}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	240015a0 	.word	0x240015a0
 80053bc:	24001540 	.word	0x24001540
 80053c0:	2400153c 	.word	0x2400153c

080053c4 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 80053c8:	4b3d      	ldr	r3, [pc, #244]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b07      	cmp	r3, #7
 80053ce:	d870      	bhi.n	80054b2 <BNO_CalibrationStatus+0xee>
 80053d0:	a201      	add	r2, pc, #4	@ (adr r2, 80053d8 <BNO_CalibrationStatus+0x14>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	080053f9 	.word	0x080053f9
 80053dc:	08005409 	.word	0x08005409
 80053e0:	08005415 	.word	0x08005415
 80053e4:	0800544d 	.word	0x0800544d
 80053e8:	08005467 	.word	0x08005467
 80053ec:	08005473 	.word	0x08005473
 80053f0:	08005495 	.word	0x08005495
 80053f4:	080054a7 	.word	0x080054a7
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 80053f8:	2100      	movs	r1, #0
 80053fa:	203f      	movs	r0, #63	@ 0x3f
 80053fc:	f7ff fbd6 	bl	8004bac <BNO_Write>
			CalibrationFlag = 1;
 8005400:	4b2f      	ldr	r3, [pc, #188]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
			break;
 8005406:	e059      	b.n	80054bc <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8005408:	f7ff ff2f 	bl	800526a <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 800540c:	4b2c      	ldr	r3, [pc, #176]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 800540e:	2202      	movs	r2, #2
 8005410:	701a      	strb	r2, [r3, #0]
			break;
 8005412:	e053      	b.n	80054bc <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8005414:	2101      	movs	r1, #1
 8005416:	203d      	movs	r0, #61	@ 0x3d
 8005418:	f7ff fba2 	bl	8004b60 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 800541c:	4b29      	ldr	r3, [pc, #164]	@ (80054c4 <BNO_CalibrationStatus+0x100>)
 800541e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005422:	2b0c      	cmp	r3, #12
 8005424:	d10e      	bne.n	8005444 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8005426:	4b28      	ldr	r3, [pc, #160]	@ (80054c8 <BNO_CalibrationStatus+0x104>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d006      	beq.n	800543c <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 800542e:	4b24      	ldr	r3, [pc, #144]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8005434:	4b25      	ldr	r3, [pc, #148]	@ (80054cc <BNO_CalibrationStatus+0x108>)
 8005436:	2203      	movs	r2, #3
 8005438:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 800543a:	e03f      	b.n	80054bc <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 800543c:	4b20      	ldr	r3, [pc, #128]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 800543e:	2203      	movs	r2, #3
 8005440:	701a      	strb	r2, [r3, #0]
			break;
 8005442:	e03b      	b.n	80054bc <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8005444:	4b1e      	ldr	r3, [pc, #120]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 8005446:	2201      	movs	r2, #1
 8005448:	701a      	strb	r2, [r3, #0]
			break;
 800544a:	e037      	b.n	80054bc <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 800544c:	2101      	movs	r1, #1
 800544e:	2035      	movs	r0, #53	@ 0x35
 8005450:	f7ff fb86 	bl	8004b60 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8005454:	4b1b      	ldr	r3, [pc, #108]	@ (80054c4 <BNO_CalibrationStatus+0x100>)
 8005456:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800545a:	2bff      	cmp	r3, #255	@ 0xff
 800545c:	d12d      	bne.n	80054ba <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 800545e:	4b18      	ldr	r3, [pc, #96]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 8005460:	2204      	movs	r2, #4
 8005462:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005464:	e029      	b.n	80054ba <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8005466:	f7ff fef9 	bl	800525c <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 800546a:	4b15      	ldr	r3, [pc, #84]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 800546c:	2205      	movs	r2, #5
 800546e:	701a      	strb	r2, [r3, #0]
			break;
 8005470:	e024      	b.n	80054bc <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8005472:	2101      	movs	r1, #1
 8005474:	203d      	movs	r0, #61	@ 0x3d
 8005476:	f7ff fb73 	bl	8004b60 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 800547a:	4b12      	ldr	r3, [pc, #72]	@ (80054c4 <BNO_CalibrationStatus+0x100>)
 800547c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005480:	2b00      	cmp	r3, #0
 8005482:	d103      	bne.n	800548c <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8005484:	4b0e      	ldr	r3, [pc, #56]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 8005486:	2206      	movs	r2, #6
 8005488:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 800548a:	e017      	b.n	80054bc <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 800548c:	4b0c      	ldr	r3, [pc, #48]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 800548e:	2204      	movs	r2, #4
 8005490:	701a      	strb	r2, [r3, #0]
			break;
 8005492:	e013      	b.n	80054bc <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8005494:	f7ff fef0 	bl	8005278 <BNO_GetCalibrationData>
			Calibrated = 1;
 8005498:	4b0b      	ldr	r3, [pc, #44]	@ (80054c8 <BNO_CalibrationStatus+0x104>)
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 800549e:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	701a      	strb	r2, [r3, #0]
			break;
 80054a4:	e00a      	b.n	80054bc <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 80054a6:	f7ff feef 	bl	8005288 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 80054aa:	4b05      	ldr	r3, [pc, #20]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]
			break;
 80054b0:	e004      	b.n	80054bc <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 80054b2:	4b03      	ldr	r3, [pc, #12]	@ (80054c0 <BNO_CalibrationStatus+0xfc>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
			break;
 80054b8:	e000      	b.n	80054bc <BNO_CalibrationStatus+0xf8>
			break;
 80054ba:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 80054bc:	bf00      	nop
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	240015a1 	.word	0x240015a1
 80054c4:	24001540 	.word	0x24001540
 80054c8:	24000008 	.word	0x24000008
 80054cc:	2400153c 	.word	0x2400153c

080054d0 <BNO_GetData>:

void BNO_GetData(void){
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 80054d4:	2118      	movs	r1, #24
 80054d6:	2008      	movs	r0, #8
 80054d8:	f7ff fb42 	bl	8004b60 <BNO_Read>
}
 80054dc:	bf00      	nop
 80054de:	bd80      	pop	{r7, pc}

080054e0 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 80054ea:	4b2c      	ldr	r3, [pc, #176]	@ (800559c <BNO_Receive+0xbc>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 80054f0:	4b2b      	ldr	r3, [pc, #172]	@ (80055a0 <BNO_Receive+0xc0>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2bff      	cmp	r3, #255	@ 0xff
 80054f6:	d027      	beq.n	8005548 <BNO_Receive+0x68>
 80054f8:	2bff      	cmp	r3, #255	@ 0xff
 80054fa:	dc46      	bgt.n	800558a <BNO_Receive+0xaa>
 80054fc:	2bee      	cmp	r3, #238	@ 0xee
 80054fe:	d017      	beq.n	8005530 <BNO_Receive+0x50>
 8005500:	2bee      	cmp	r3, #238	@ 0xee
 8005502:	dc42      	bgt.n	800558a <BNO_Receive+0xaa>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <BNO_Receive+0x2e>
 8005508:	2bbb      	cmp	r3, #187	@ 0xbb
 800550a:	d00a      	beq.n	8005522 <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 800550c:	e03d      	b.n	800558a <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	2bbb      	cmp	r3, #187	@ 0xbb
 8005512:	d002      	beq.n	800551a <BNO_Receive+0x3a>
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	2bee      	cmp	r3, #238	@ 0xee
 8005518:	d139      	bne.n	800558e <BNO_Receive+0xae>
 800551a:	4a21      	ldr	r2, [pc, #132]	@ (80055a0 <BNO_Receive+0xc0>)
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	7013      	strb	r3, [r2, #0]
			break;
 8005520:	e035      	b.n	800558e <BNO_Receive+0xae>
			MsgSize = Buffer;
 8005522:	4a20      	ldr	r2, [pc, #128]	@ (80055a4 <BNO_Receive+0xc4>)
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8005528:	4b1d      	ldr	r3, [pc, #116]	@ (80055a0 <BNO_Receive+0xc0>)
 800552a:	22ff      	movs	r2, #255	@ 0xff
 800552c:	701a      	strb	r2, [r3, #0]
			break;
 800552e:	e031      	b.n	8005594 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8005530:	4a1d      	ldr	r2, [pc, #116]	@ (80055a8 <BNO_Receive+0xc8>)
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8005536:	4b1a      	ldr	r3, [pc, #104]	@ (80055a0 <BNO_Receive+0xc0>)
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 800553c:	22ff      	movs	r2, #255	@ 0xff
 800553e:	2100      	movs	r1, #0
 8005540:	481a      	ldr	r0, [pc, #104]	@ (80055ac <BNO_Receive+0xcc>)
 8005542:	f012 f9b0 	bl	80178a6 <memset>
			break;
 8005546:	e025      	b.n	8005594 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8005548:	4b19      	ldr	r3, [pc, #100]	@ (80055b0 <BNO_Receive+0xd0>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	4917      	ldr	r1, [pc, #92]	@ (80055ac <BNO_Receive+0xcc>)
 8005550:	79fa      	ldrb	r2, [r7, #7]
 8005552:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8005554:	4b16      	ldr	r3, [pc, #88]	@ (80055b0 <BNO_Receive+0xd0>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	b2da      	uxtb	r2, r3
 800555c:	4b14      	ldr	r3, [pc, #80]	@ (80055b0 <BNO_Receive+0xd0>)
 800555e:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8005560:	4b13      	ldr	r3, [pc, #76]	@ (80055b0 <BNO_Receive+0xd0>)
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	4b0f      	ldr	r3, [pc, #60]	@ (80055a4 <BNO_Receive+0xc4>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d112      	bne.n	8005592 <BNO_Receive+0xb2>
				Counter = 0;
 800556c:	4b10      	ldr	r3, [pc, #64]	@ (80055b0 <BNO_Receive+0xd0>)
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8005572:	4b0c      	ldr	r3, [pc, #48]	@ (80055a4 <BNO_Receive+0xc4>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8005578:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <BNO_Receive+0xc0>)
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 800557e:	4b0a      	ldr	r3, [pc, #40]	@ (80055a8 <BNO_Receive+0xc8>)
 8005580:	220b      	movs	r2, #11
 8005582:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8005584:	f7ff fe20 	bl	80051c8 <BNO_EmptyingBuffer>
			break;
 8005588:	e003      	b.n	8005592 <BNO_Receive+0xb2>
			break;
 800558a:	bf00      	nop
 800558c:	e002      	b.n	8005594 <BNO_Receive+0xb4>
			break;
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <BNO_Receive+0xb4>
			break;
 8005592:	bf00      	nop
	}
}
 8005594:	bf00      	nop
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	2400153a 	.word	0x2400153a
 80055a0:	24001538 	.word	0x24001538
 80055a4:	240015a2 	.word	0x240015a2
 80055a8:	24001539 	.word	0x24001539
 80055ac:	24001438 	.word	0x24001438
 80055b0:	240015a3 	.word	0x240015a3

080055b4 <BNO_FaultManager>:

void BNO_FaultManager(void){
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 80055ba:	4b13      	ldr	r3, [pc, #76]	@ (8005608 <BNO_FaultManager+0x54>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d90f      	bls.n	80055e2 <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 80055c2:	4812      	ldr	r0, [pc, #72]	@ (800560c <BNO_FaultManager+0x58>)
 80055c4:	f7fe fd7c 	bl	80040c0 <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 80055c8:	4b11      	ldr	r3, [pc, #68]	@ (8005610 <BNO_FaultManager+0x5c>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80055ce:	2201      	movs	r2, #1
 80055d0:	4910      	ldr	r1, [pc, #64]	@ (8005614 <BNO_FaultManager+0x60>)
 80055d2:	480e      	ldr	r0, [pc, #56]	@ (800560c <BNO_FaultManager+0x58>)
 80055d4:	f00a f882 	bl	800f6dc <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80055d8:	22ff      	movs	r2, #255	@ 0xff
 80055da:	2100      	movs	r1, #0
 80055dc:	480e      	ldr	r0, [pc, #56]	@ (8005618 <BNO_FaultManager+0x64>)
 80055de:	f012 f962 	bl	80178a6 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 80055e2:	4b0e      	ldr	r3, [pc, #56]	@ (800561c <BNO_FaultManager+0x68>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b06      	cmp	r3, #6
 80055e8:	d10a      	bne.n	8005600 <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 80055ea:	2300      	movs	r3, #0
 80055ec:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 80055ee:	1dfb      	adds	r3, r7, #7
 80055f0:	2201      	movs	r2, #1
 80055f2:	4619      	mov	r1, r3
 80055f4:	4805      	ldr	r0, [pc, #20]	@ (800560c <BNO_FaultManager+0x58>)
 80055f6:	f009 ff91 	bl	800f51c <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 80055fa:	4b08      	ldr	r3, [pc, #32]	@ (800561c <BNO_FaultManager+0x68>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
	}
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	2400153a 	.word	0x2400153a
 800560c:	24001170 	.word	0x24001170
 8005610:	24001538 	.word	0x24001538
 8005614:	24001537 	.word	0x24001537
 8005618:	24001438 	.word	0x24001438
 800561c:	24001539 	.word	0x24001539

08005620 <BNO_Tasks>:

void BNO_Tasks(void){
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8005624:	4b1b      	ldr	r3, [pc, #108]	@ (8005694 <BNO_Tasks+0x74>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d128      	bne.n	800567e <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 800562c:	4b1a      	ldr	r3, [pc, #104]	@ (8005698 <BNO_Tasks+0x78>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d81c      	bhi.n	800566e <BNO_Tasks+0x4e>
 8005634:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <BNO_Tasks+0x1c>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	08005651 	.word	0x08005651
 8005640:	0800565d 	.word	0x0800565d
 8005644:	08005663 	.word	0x08005663
 8005648:	08005669 	.word	0x08005669
 800564c:	08005657 	.word	0x08005657
			case Init:
				BNO_Init();
 8005650:	f7ff fe52 	bl	80052f8 <BNO_Init>
				break;
 8005654:	e00c      	b.n	8005670 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8005656:	f7ff fdd3 	bl	8005200 <BNO_SWReset>
			break;
 800565a:	e009      	b.n	8005670 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 800565c:	f7ff fe68 	bl	8005330 <BNO_Config>
				break;
 8005660:	e006      	b.n	8005670 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 8005662:	f7ff feaf 	bl	80053c4 <BNO_CalibrationStatus>
				break;
 8005666:	e003      	b.n	8005670 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8005668:	f7ff ff32 	bl	80054d0 <BNO_GetData>
				break;
 800566c:	e000      	b.n	8005670 <BNO_Tasks+0x50>

			default:
				break;
 800566e:	bf00      	nop
		}
		++BNO_ComsCounter;
 8005670:	4b0a      	ldr	r3, [pc, #40]	@ (800569c <BNO_Tasks+0x7c>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	3301      	adds	r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	4b08      	ldr	r3, [pc, #32]	@ (800569c <BNO_Tasks+0x7c>)
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	e005      	b.n	800568a <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 800567e:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <BNO_Tasks+0x74>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	3b01      	subs	r3, #1
 8005684:	b2da      	uxtb	r2, r3
 8005686:	4b03      	ldr	r3, [pc, #12]	@ (8005694 <BNO_Tasks+0x74>)
 8005688:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 800568a:	f7ff ff93 	bl	80055b4 <BNO_FaultManager>
}
 800568e:	bf00      	nop
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	2400153b 	.word	0x2400153b
 8005698:	2400153c 	.word	0x2400153c
 800569c:	2400153a 	.word	0x2400153a

080056a0 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 80056a0:	b084      	sub	sp, #16
 80056a2:	b590      	push	{r4, r7, lr}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	f107 001c 	add.w	r0, r7, #28
 80056ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 80056b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <LED_blink+0x20>
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d010      	beq.n	80056e0 <LED_blink+0x40>
 80056be:	e01f      	b.n	8005700 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 80056c0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80056c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d31f      	bcc.n	8005708 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	8c39      	ldrh	r1, [r7, #32]
 80056cc:	2201      	movs	r2, #1
 80056ce:	4618      	mov	r0, r3
 80056d0:	f004 fc70 	bl	8009fb4 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80056de:	e013      	b.n	8005708 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 80056e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80056e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d311      	bcc.n	800570c <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	8c39      	ldrh	r1, [r7, #32]
 80056ec:	2200      	movs	r2, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f004 fc60 	bl	8009fb4 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 80056fe:	e005      	b.n	800570c <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8005706:	e002      	b.n	800570e <LED_blink+0x6e>
				break;
 8005708:	bf00      	nop
 800570a:	e000      	b.n	800570e <LED_blink+0x6e>
				break;
 800570c:	bf00      	nop
		}

	LED.count++;
 800570e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005710:	3301      	adds	r3, #1
 8005712:	b29b      	uxth	r3, r3
 8005714:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	461c      	mov	r4, r3
 800571a:	f107 031c 	add.w	r3, r7, #28
 800571e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800572e:	b004      	add	sp, #16
 8005730:	4770      	bx	lr

08005732 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8005732:	b084      	sub	sp, #16
 8005734:	b590      	push	{r4, r7, lr}
 8005736:	b085      	sub	sp, #20
 8005738:	af02      	add	r7, sp, #8
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	f107 001c 	add.w	r0, r7, #28
 8005740:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8005744:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005748:	2b01      	cmp	r3, #1
 800574a:	d117      	bne.n	800577c <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 800574c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <LED_Rutine+0x28>
 8005754:	2b01      	cmp	r3, #1
 8005756:	d007      	beq.n	8005768 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8005758:	e018      	b.n	800578c <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	8c39      	ldrh	r1, [r7, #32]
 800575e:	2201      	movs	r2, #1
 8005760:	4618      	mov	r0, r3
 8005762:	f004 fc27 	bl	8009fb4 <HAL_GPIO_WritePin>
				break;
 8005766:	e011      	b.n	800578c <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8005768:	f107 001c 	add.w	r0, r7, #28
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	f107 031c 	add.w	r3, r7, #28
 8005774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005776:	f7ff ff93 	bl	80056a0 <LED_blink>
				break;
 800577a:	e007      	b.n	800578c <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	8c39      	ldrh	r1, [r7, #32]
 8005780:	2200      	movs	r2, #0
 8005782:	4618      	mov	r0, r3
 8005784:	f004 fc16 	bl	8009fb4 <HAL_GPIO_WritePin>
		LED.count = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	461c      	mov	r4, r3
 8005790:	f107 031c 	add.w	r3, r7, #28
 8005794:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005796:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80057a4:	b004      	add	sp, #16
 80057a6:	4770      	bx	lr

080057a8 <LED_Tasks>:

void LED_Tasks (void){
 80057a8:	b590      	push	{r4, r7, lr}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 80057ae:	4c24      	ldr	r4, [pc, #144]	@ (8005840 <LED_Tasks+0x98>)
 80057b0:	4638      	mov	r0, r7
 80057b2:	4b23      	ldr	r3, [pc, #140]	@ (8005840 <LED_Tasks+0x98>)
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	9200      	str	r2, [sp, #0]
 80057b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057ba:	f7ff ffba 	bl	8005732 <LED_Rutine>
 80057be:	463b      	mov	r3, r7
 80057c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 80057c6:	4c1e      	ldr	r4, [pc, #120]	@ (8005840 <LED_Tasks+0x98>)
 80057c8:	4638      	mov	r0, r7
 80057ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005840 <LED_Tasks+0x98>)
 80057cc:	69da      	ldr	r2, [r3, #28]
 80057ce:	9200      	str	r2, [sp, #0]
 80057d0:	3310      	adds	r3, #16
 80057d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057d4:	f7ff ffad 	bl	8005732 <LED_Rutine>
 80057d8:	3410      	adds	r4, #16
 80057da:	463b      	mov	r3, r7
 80057dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 80057e2:	4c17      	ldr	r4, [pc, #92]	@ (8005840 <LED_Tasks+0x98>)
 80057e4:	4638      	mov	r0, r7
 80057e6:	4b16      	ldr	r3, [pc, #88]	@ (8005840 <LED_Tasks+0x98>)
 80057e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ea:	9200      	str	r2, [sp, #0]
 80057ec:	3320      	adds	r3, #32
 80057ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057f0:	f7ff ff9f 	bl	8005732 <LED_Rutine>
 80057f4:	3420      	adds	r4, #32
 80057f6:	463b      	mov	r3, r7
 80057f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 80057fe:	4c10      	ldr	r4, [pc, #64]	@ (8005840 <LED_Tasks+0x98>)
 8005800:	4638      	mov	r0, r7
 8005802:	4b0f      	ldr	r3, [pc, #60]	@ (8005840 <LED_Tasks+0x98>)
 8005804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005806:	9200      	str	r2, [sp, #0]
 8005808:	3330      	adds	r3, #48	@ 0x30
 800580a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800580c:	f7ff ff91 	bl	8005732 <LED_Rutine>
 8005810:	3430      	adds	r4, #48	@ 0x30
 8005812:	463b      	mov	r3, r7
 8005814:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005816:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 800581a:	4c09      	ldr	r4, [pc, #36]	@ (8005840 <LED_Tasks+0x98>)
 800581c:	4638      	mov	r0, r7
 800581e:	4b08      	ldr	r3, [pc, #32]	@ (8005840 <LED_Tasks+0x98>)
 8005820:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005822:	9200      	str	r2, [sp, #0]
 8005824:	3340      	adds	r3, #64	@ 0x40
 8005826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005828:	f7ff ff83 	bl	8005732 <LED_Rutine>
 800582c:	3440      	adds	r4, #64	@ 0x40
 800582e:	463b      	mov	r3, r7
 8005830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	bd90      	pop	{r4, r7, pc}
 800583e:	bf00      	nop
 8005840:	2400000c 	.word	0x2400000c

08005844 <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart6, (uint8_t*)"+++\r\n", 5);
 8005848:	2205      	movs	r2, #5
 800584a:	4903      	ldr	r1, [pc, #12]	@ (8005858 <LR03_AT+0x14>)
 800584c:	4803      	ldr	r0, [pc, #12]	@ (800585c <LR03_AT+0x18>)
 800584e:	f009 fe65 	bl	800f51c <HAL_UART_Transmit_IT>
}
 8005852:	bf00      	nop
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	08019998 	.word	0x08019998
 800585c:	24001204 	.word	0x24001204

08005860 <LR03_Level>:

void LR03_Level(uint8_t Level){
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	71fb      	strb	r3, [r7, #7]
	static uint8_t Level_Command[] = {"AT+LEVEL7\r\n"};
	if(Level > 7) Level = 7;
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	2b07      	cmp	r3, #7
 800586e:	d901      	bls.n	8005874 <LR03_Level+0x14>
 8005870:	2307      	movs	r3, #7
 8005872:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <LR03_Level+0x1e>
 800587a:	2301      	movs	r3, #1
 800587c:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	3330      	adds	r3, #48	@ 0x30
 8005882:	b2da      	uxtb	r2, r3
 8005884:	4b05      	ldr	r3, [pc, #20]	@ (800589c <LR03_Level+0x3c>)
 8005886:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 8005888:	220b      	movs	r2, #11
 800588a:	4904      	ldr	r1, [pc, #16]	@ (800589c <LR03_Level+0x3c>)
 800588c:	4804      	ldr	r0, [pc, #16]	@ (80058a0 <LR03_Level+0x40>)
 800588e:	f009 fe45 	bl	800f51c <HAL_UART_Transmit_IT>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	2400005c 	.word	0x2400005c
 80058a0:	24001204 	.word	0x24001204

080058a4 <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 80058ae:	4b09      	ldr	r3, [pc, #36]	@ (80058d4 <LR03_Receive+0x30>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	4619      	mov	r1, r3
 80058b4:	4a08      	ldr	r2, [pc, #32]	@ (80058d8 <LR03_Receive+0x34>)
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 80058ba:	4b06      	ldr	r3, [pc, #24]	@ (80058d4 <LR03_Receive+0x30>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	3301      	adds	r3, #1
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	4b04      	ldr	r3, [pc, #16]	@ (80058d4 <LR03_Receive+0x30>)
 80058c4:	701a      	strb	r2, [r3, #0]
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	240016a5 	.word	0x240016a5
 80058d8:	240015a4 	.word	0x240015a4

080058dc <LR03_StateMachine>:

void LR03_StateMachine(void){
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0

	switch (Test_1) {
 80058e0:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <LR03_StateMachine+0x2c>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d002      	beq.n	80058ee <LR03_StateMachine+0x12>
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d003      	beq.n	80058f4 <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 80058ec:	e006      	b.n	80058fc <LR03_StateMachine+0x20>
			LR03_AT();
 80058ee:	f7ff ffa9 	bl	8005844 <LR03_AT>
			break;
 80058f2:	e003      	b.n	80058fc <LR03_StateMachine+0x20>
			LR03_Level(7);
 80058f4:	2007      	movs	r0, #7
 80058f6:	f7ff ffb3 	bl	8005860 <LR03_Level>
			break;
 80058fa:	bf00      	nop
	}
	Test_1 = 0;
 80058fc:	4b02      	ldr	r3, [pc, #8]	@ (8005908 <LR03_StateMachine+0x2c>)
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	240016a4 	.word	0x240016a4

0800590c <PWM_Assign>:
Servo_mgmt_s PWM_Output = {
	    .S = {1500, 1500, 1500, 1500, 1500,
	          1500, 1500, 1500, 1500, 1500}
	};

void PWM_Assign(void) {
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
    // Timer 2 (Canales 1, 2, 10, 9)
    TIM2->CCR1 = PWM_Output.S[0];  // Canal_1 (S[0])
 8005910:	4b2a      	ldr	r3, [pc, #168]	@ (80059bc <PWM_Assign+0xb0>)
 8005912:	881a      	ldrh	r2, [r3, #0]
 8005914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005918:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = PWM_Output.S[1];  // Canal_2 (S[1])
 800591a:	4b28      	ldr	r3, [pc, #160]	@ (80059bc <PWM_Assign+0xb0>)
 800591c:	885a      	ldrh	r2, [r3, #2]
 800591e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005922:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = PWM_Output.S[9];  // Canal_10 (S[9])
 8005924:	4b25      	ldr	r3, [pc, #148]	@ (80059bc <PWM_Assign+0xb0>)
 8005926:	8a5a      	ldrh	r2, [r3, #18]
 8005928:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800592c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = PWM_Output.S[8];  // Canal_9 (S[8])
 800592e:	4b23      	ldr	r3, [pc, #140]	@ (80059bc <PWM_Assign+0xb0>)
 8005930:	8a1a      	ldrh	r2, [r3, #16]
 8005932:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005936:	641a      	str	r2, [r3, #64]	@ 0x40

    // Timer 3 (Canales 3, 4)
    TIM3->CCR1 = PWM_Output.S[2];  // Canal_3 (S[2])
 8005938:	4b20      	ldr	r3, [pc, #128]	@ (80059bc <PWM_Assign+0xb0>)
 800593a:	889a      	ldrh	r2, [r3, #4]
 800593c:	4b20      	ldr	r3, [pc, #128]	@ (80059c0 <PWM_Assign+0xb4>)
 800593e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = PWM_Output.S[3];  // Canal_4 (S[3])
 8005940:	4b1e      	ldr	r3, [pc, #120]	@ (80059bc <PWM_Assign+0xb0>)
 8005942:	88da      	ldrh	r2, [r3, #6]
 8005944:	4b1e      	ldr	r3, [pc, #120]	@ (80059c0 <PWM_Assign+0xb4>)
 8005946:	639a      	str	r2, [r3, #56]	@ 0x38

    // Timer 4 (Canales 5-8)
    TIM4->CCR1 = PWM_Output.S[4];  // Canal_5 (S[4])
 8005948:	4b1c      	ldr	r3, [pc, #112]	@ (80059bc <PWM_Assign+0xb0>)
 800594a:	891a      	ldrh	r2, [r3, #8]
 800594c:	4b1d      	ldr	r3, [pc, #116]	@ (80059c4 <PWM_Assign+0xb8>)
 800594e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = PWM_Output.S[5];  // Canal_6 (S[5])
 8005950:	4b1a      	ldr	r3, [pc, #104]	@ (80059bc <PWM_Assign+0xb0>)
 8005952:	895a      	ldrh	r2, [r3, #10]
 8005954:	4b1b      	ldr	r3, [pc, #108]	@ (80059c4 <PWM_Assign+0xb8>)
 8005956:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = PWM_Output.S[6];  // Canal_7 (S[6])
 8005958:	4b18      	ldr	r3, [pc, #96]	@ (80059bc <PWM_Assign+0xb0>)
 800595a:	899a      	ldrh	r2, [r3, #12]
 800595c:	4b19      	ldr	r3, [pc, #100]	@ (80059c4 <PWM_Assign+0xb8>)
 800595e:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = PWM_Output.S[7];  // Canal_8 (S[7])
 8005960:	4b16      	ldr	r3, [pc, #88]	@ (80059bc <PWM_Assign+0xb0>)
 8005962:	89da      	ldrh	r2, [r3, #14]
 8005964:	4b17      	ldr	r3, [pc, #92]	@ (80059c4 <PWM_Assign+0xb8>)
 8005966:	641a      	str	r2, [r3, #64]	@ 0x40

    // Iniciar PWM (igual que antes)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005968:	2100      	movs	r1, #0
 800596a:	4817      	ldr	r0, [pc, #92]	@ (80059c8 <PWM_Assign+0xbc>)
 800596c:	f008 fd58 	bl	800e420 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005970:	2104      	movs	r1, #4
 8005972:	4815      	ldr	r0, [pc, #84]	@ (80059c8 <PWM_Assign+0xbc>)
 8005974:	f008 fd54 	bl	800e420 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005978:	2108      	movs	r1, #8
 800597a:	4813      	ldr	r0, [pc, #76]	@ (80059c8 <PWM_Assign+0xbc>)
 800597c:	f008 fd50 	bl	800e420 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005980:	210c      	movs	r1, #12
 8005982:	4811      	ldr	r0, [pc, #68]	@ (80059c8 <PWM_Assign+0xbc>)
 8005984:	f008 fd4c 	bl	800e420 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005988:	2100      	movs	r1, #0
 800598a:	4810      	ldr	r0, [pc, #64]	@ (80059cc <PWM_Assign+0xc0>)
 800598c:	f008 fd48 	bl	800e420 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005990:	2104      	movs	r1, #4
 8005992:	480e      	ldr	r0, [pc, #56]	@ (80059cc <PWM_Assign+0xc0>)
 8005994:	f008 fd44 	bl	800e420 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005998:	2100      	movs	r1, #0
 800599a:	480d      	ldr	r0, [pc, #52]	@ (80059d0 <PWM_Assign+0xc4>)
 800599c:	f008 fd40 	bl	800e420 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80059a0:	2104      	movs	r1, #4
 80059a2:	480b      	ldr	r0, [pc, #44]	@ (80059d0 <PWM_Assign+0xc4>)
 80059a4:	f008 fd3c 	bl	800e420 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80059a8:	2108      	movs	r1, #8
 80059aa:	4809      	ldr	r0, [pc, #36]	@ (80059d0 <PWM_Assign+0xc4>)
 80059ac:	f008 fd38 	bl	800e420 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80059b0:	210c      	movs	r1, #12
 80059b2:	4807      	ldr	r0, [pc, #28]	@ (80059d0 <PWM_Assign+0xc4>)
 80059b4:	f008 fd34 	bl	800e420 <HAL_TIM_PWM_Start>
}
 80059b8:	bf00      	nop
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	24000068 	.word	0x24000068
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	24000f18 	.word	0x24000f18
 80059cc:	24000f64 	.word	0x24000f64
 80059d0:	24000fb0 	.word	0x24000fb0

080059d4 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 80059d8:	2201      	movs	r2, #1
 80059da:	4903      	ldr	r1, [pc, #12]	@ (80059e8 <SBUS_init+0x14>)
 80059dc:	4803      	ldr	r0, [pc, #12]	@ (80059ec <SBUS_init+0x18>)
 80059de:	f009 fe7d 	bl	800f6dc <HAL_UART_Receive_DMA>

}
 80059e2:	bf00      	nop
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	240016c1 	.word	0x240016c1
 80059ec:	240010dc 	.word	0x240010dc

080059f0 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 80059fa:	4b20      	ldr	r3, [pc, #128]	@ (8005a7c <SBUS_Receive+0x8c>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <SBUS_Receive+0x18>
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d017      	beq.n	8005a36 <SBUS_Receive+0x46>
 8005a06:	e02f      	b.n	8005a68 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	2b0f      	cmp	r3, #15
 8005a0c:	d10f      	bne.n	8005a2e <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8005a80 <SBUS_Receive+0x90>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	4619      	mov	r1, r3
 8005a14:	4a1b      	ldr	r2, [pc, #108]	@ (8005a84 <SBUS_Receive+0x94>)
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 8005a1a:	4b18      	ldr	r3, [pc, #96]	@ (8005a7c <SBUS_Receive+0x8c>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	701a      	strb	r2, [r3, #0]
				RxCount++;
 8005a20:	4b17      	ldr	r3, [pc, #92]	@ (8005a80 <SBUS_Receive+0x90>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	3301      	adds	r3, #1
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	4b15      	ldr	r3, [pc, #84]	@ (8005a80 <SBUS_Receive+0x90>)
 8005a2a:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 8005a2c:	e021      	b.n	8005a72 <SBUS_Receive+0x82>
				RxCount = 0;
 8005a2e:	4b14      	ldr	r3, [pc, #80]	@ (8005a80 <SBUS_Receive+0x90>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]
			break;
 8005a34:	e01d      	b.n	8005a72 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005a36:	4b12      	ldr	r3, [pc, #72]	@ (8005a80 <SBUS_Receive+0x90>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4a11      	ldr	r2, [pc, #68]	@ (8005a84 <SBUS_Receive+0x94>)
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8005a42:	4b0f      	ldr	r3, [pc, #60]	@ (8005a80 <SBUS_Receive+0x90>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	3301      	adds	r3, #1
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <SBUS_Receive+0x90>)
 8005a4c:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 8005a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a80 <SBUS_Receive+0x90>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b18      	cmp	r3, #24
 8005a54:	d10c      	bne.n	8005a70 <SBUS_Receive+0x80>
				RxCount = 0;
 8005a56:	4b0a      	ldr	r3, [pc, #40]	@ (8005a80 <SBUS_Receive+0x90>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 8005a5c:	4b07      	ldr	r3, [pc, #28]	@ (8005a7c <SBUS_Receive+0x8c>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8005a62:	f000 f811 	bl	8005a88 <SBUS_getData>
			}
			break;
 8005a66:	e003      	b.n	8005a70 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8005a68:	4b04      	ldr	r3, [pc, #16]	@ (8005a7c <SBUS_Receive+0x8c>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
			break;
 8005a6e:	e000      	b.n	8005a72 <SBUS_Receive+0x82>
			break;
 8005a70:	bf00      	nop
	}
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	240016c2 	.word	0x240016c2
 8005a80:	240016c3 	.word	0x240016c3
 8005a84:	240016a8 	.word	0x240016a8

08005a88 <SBUS_getData>:


void SBUS_getData(void){
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 8005a8c:	4b95      	ldr	r3, [pc, #596]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	b21a      	sxth	r2, r3
 8005a92:	4b94      	ldr	r3, [pc, #592]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005a94:	789b      	ldrb	r3, [r3, #2]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	b21b      	sxth	r3, r3
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	b21b      	sxth	r3, r3
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	4b90      	ldr	r3, [pc, #576]	@ (8005ce8 <SBUS_getData+0x260>)
 8005aa8:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 8005aaa:	4b8e      	ldr	r3, [pc, #568]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005aac:	789b      	ldrb	r3, [r3, #2]
 8005aae:	08db      	lsrs	r3, r3, #3
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	b21a      	sxth	r2, r3
 8005ab4:	4b8b      	ldr	r3, [pc, #556]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	015b      	lsls	r3, r3, #5
 8005aba:	b21b      	sxth	r3, r3
 8005abc:	4313      	orrs	r3, r2
 8005abe:	b21b      	sxth	r3, r3
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	4b87      	ldr	r3, [pc, #540]	@ (8005ce8 <SBUS_getData+0x260>)
 8005aca:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 8005acc:	4b85      	ldr	r3, [pc, #532]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005ace:	78db      	ldrb	r3, [r3, #3]
 8005ad0:	099b      	lsrs	r3, r3, #6
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	b21a      	sxth	r2, r3
 8005ad6:	4b83      	ldr	r3, [pc, #524]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005ad8:	791b      	ldrb	r3, [r3, #4]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	b21b      	sxth	r3, r3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b21a      	sxth	r2, r3
 8005ae2:	4b80      	ldr	r3, [pc, #512]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005ae4:	795b      	ldrb	r3, [r3, #5]
 8005ae6:	029b      	lsls	r3, r3, #10
 8005ae8:	b21b      	sxth	r3, r3
 8005aea:	4313      	orrs	r3, r2
 8005aec:	b21b      	sxth	r3, r3
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	4b7c      	ldr	r3, [pc, #496]	@ (8005ce8 <SBUS_getData+0x260>)
 8005af8:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 8005afa:	4b7a      	ldr	r3, [pc, #488]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005afc:	795b      	ldrb	r3, [r3, #5]
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	b21a      	sxth	r2, r3
 8005b04:	4b77      	ldr	r3, [pc, #476]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005b06:	799b      	ldrb	r3, [r3, #6]
 8005b08:	01db      	lsls	r3, r3, #7
 8005b0a:	b21b      	sxth	r3, r3
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	b21b      	sxth	r3, r3
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	4b73      	ldr	r3, [pc, #460]	@ (8005ce8 <SBUS_getData+0x260>)
 8005b1a:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 8005b1c:	4b71      	ldr	r3, [pc, #452]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005b1e:	799b      	ldrb	r3, [r3, #6]
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	b21a      	sxth	r2, r3
 8005b26:	4b6f      	ldr	r3, [pc, #444]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005b28:	79db      	ldrb	r3, [r3, #7]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	b21b      	sxth	r3, r3
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	b21b      	sxth	r3, r3
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	4b6b      	ldr	r3, [pc, #428]	@ (8005ce8 <SBUS_getData+0x260>)
 8005b3c:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 8005b3e:	4b69      	ldr	r3, [pc, #420]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005b40:	79db      	ldrb	r3, [r3, #7]
 8005b42:	09db      	lsrs	r3, r3, #7
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	b21a      	sxth	r2, r3
 8005b48:	4b66      	ldr	r3, [pc, #408]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005b4a:	7a1b      	ldrb	r3, [r3, #8]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	b21b      	sxth	r3, r3
 8005b50:	4313      	orrs	r3, r2
 8005b52:	b21a      	sxth	r2, r3
 8005b54:	4b63      	ldr	r3, [pc, #396]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005b56:	7a5b      	ldrb	r3, [r3, #9]
 8005b58:	025b      	lsls	r3, r3, #9
 8005b5a:	b21b      	sxth	r3, r3
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	b21b      	sxth	r3, r3
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	4b5f      	ldr	r3, [pc, #380]	@ (8005ce8 <SBUS_getData+0x260>)
 8005b6a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 8005b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005b6e:	7a5b      	ldrb	r3, [r3, #9]
 8005b70:	089b      	lsrs	r3, r3, #2
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	b21a      	sxth	r2, r3
 8005b76:	4b5b      	ldr	r3, [pc, #364]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005b78:	7a9b      	ldrb	r3, [r3, #10]
 8005b7a:	019b      	lsls	r3, r3, #6
 8005b7c:	b21b      	sxth	r3, r3
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	b21b      	sxth	r3, r3
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	4b57      	ldr	r3, [pc, #348]	@ (8005ce8 <SBUS_getData+0x260>)
 8005b8c:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 8005b8e:	4b55      	ldr	r3, [pc, #340]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005b90:	7a9b      	ldrb	r3, [r3, #10]
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	b21a      	sxth	r2, r3
 8005b98:	4b52      	ldr	r3, [pc, #328]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005b9a:	7adb      	ldrb	r3, [r3, #11]
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	b21b      	sxth	r3, r3
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	b21b      	sxth	r3, r3
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	4b4e      	ldr	r3, [pc, #312]	@ (8005ce8 <SBUS_getData+0x260>)
 8005bae:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8005bb0:	4b4c      	ldr	r3, [pc, #304]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005bb2:	7b1b      	ldrb	r3, [r3, #12]
 8005bb4:	b21a      	sxth	r2, r3
 8005bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005bb8:	7b5b      	ldrb	r3, [r3, #13]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	b21b      	sxth	r3, r3
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	b21b      	sxth	r3, r3
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	4b47      	ldr	r3, [pc, #284]	@ (8005ce8 <SBUS_getData+0x260>)
 8005bcc:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 8005bce:	4b45      	ldr	r3, [pc, #276]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005bd0:	7b5b      	ldrb	r3, [r3, #13]
 8005bd2:	08db      	lsrs	r3, r3, #3
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	b21a      	sxth	r2, r3
 8005bd8:	4b42      	ldr	r3, [pc, #264]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005bda:	7b9b      	ldrb	r3, [r3, #14]
 8005bdc:	015b      	lsls	r3, r3, #5
 8005bde:	b21b      	sxth	r3, r3
 8005be0:	4313      	orrs	r3, r2
 8005be2:	b21b      	sxth	r3, r3
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	4b3e      	ldr	r3, [pc, #248]	@ (8005ce8 <SBUS_getData+0x260>)
 8005bee:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 8005bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005bf2:	7b9b      	ldrb	r3, [r3, #14]
 8005bf4:	099b      	lsrs	r3, r3, #6
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	b21a      	sxth	r2, r3
 8005bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005bfc:	7bdb      	ldrb	r3, [r3, #15]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	b21b      	sxth	r3, r3
 8005c02:	4313      	orrs	r3, r2
 8005c04:	b21a      	sxth	r2, r3
 8005c06:	4b37      	ldr	r3, [pc, #220]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005c08:	7c1b      	ldrb	r3, [r3, #16]
 8005c0a:	029b      	lsls	r3, r3, #10
 8005c0c:	b21b      	sxth	r3, r3
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	b21b      	sxth	r3, r3
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	4b33      	ldr	r3, [pc, #204]	@ (8005ce8 <SBUS_getData+0x260>)
 8005c1c:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 8005c1e:	4b31      	ldr	r3, [pc, #196]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005c20:	7c1b      	ldrb	r3, [r3, #16]
 8005c22:	085b      	lsrs	r3, r3, #1
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	b21a      	sxth	r2, r3
 8005c28:	4b2e      	ldr	r3, [pc, #184]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005c2a:	7c5b      	ldrb	r3, [r3, #17]
 8005c2c:	01db      	lsls	r3, r3, #7
 8005c2e:	b21b      	sxth	r3, r3
 8005c30:	4313      	orrs	r3, r2
 8005c32:	b21b      	sxth	r3, r3
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ce8 <SBUS_getData+0x260>)
 8005c3e:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8005c40:	4b28      	ldr	r3, [pc, #160]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005c42:	7c5b      	ldrb	r3, [r3, #17]
 8005c44:	091b      	lsrs	r3, r3, #4
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	b21a      	sxth	r2, r3
 8005c4a:	4b26      	ldr	r3, [pc, #152]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005c4c:	7c9b      	ldrb	r3, [r3, #18]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	b21b      	sxth	r3, r3
 8005c52:	4313      	orrs	r3, r2
 8005c54:	b21b      	sxth	r3, r3
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	4b22      	ldr	r3, [pc, #136]	@ (8005ce8 <SBUS_getData+0x260>)
 8005c60:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8005c62:	4b20      	ldr	r3, [pc, #128]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005c64:	7c9b      	ldrb	r3, [r3, #18]
 8005c66:	09db      	lsrs	r3, r3, #7
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	b21a      	sxth	r2, r3
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005c6e:	7cdb      	ldrb	r3, [r3, #19]
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	b21b      	sxth	r3, r3
 8005c74:	4313      	orrs	r3, r2
 8005c76:	b21a      	sxth	r2, r3
 8005c78:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005c7a:	7d1b      	ldrb	r3, [r3, #20]
 8005c7c:	025b      	lsls	r3, r3, #9
 8005c7e:	b21b      	sxth	r3, r3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	b21b      	sxth	r3, r3
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	4b16      	ldr	r3, [pc, #88]	@ (8005ce8 <SBUS_getData+0x260>)
 8005c8e:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8005c90:	4b14      	ldr	r3, [pc, #80]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005c92:	7d1b      	ldrb	r3, [r3, #20]
 8005c94:	089b      	lsrs	r3, r3, #2
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	b21a      	sxth	r2, r3
 8005c9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005c9c:	7d5b      	ldrb	r3, [r3, #21]
 8005c9e:	019b      	lsls	r3, r3, #6
 8005ca0:	b21b      	sxth	r3, r3
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	b21b      	sxth	r3, r3
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce8 <SBUS_getData+0x260>)
 8005cb0:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005cb4:	7d5b      	ldrb	r3, [r3, #21]
 8005cb6:	095b      	lsrs	r3, r3, #5
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	b21a      	sxth	r2, r3
 8005cbc:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <SBUS_getData+0x25c>)
 8005cbe:	7d9b      	ldrb	r3, [r3, #22]
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	b21b      	sxth	r3, r3
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	b21b      	sxth	r3, r3
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	4b05      	ldr	r3, [pc, #20]	@ (8005ce8 <SBUS_getData+0x260>)
 8005cd2:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 8005cd4:	4b04      	ldr	r3, [pc, #16]	@ (8005ce8 <SBUS_getData+0x260>)
 8005cd6:	885b      	ldrh	r3, [r3, #2]
 8005cd8:	ee07 3a90 	vmov	s15, r3
 8005cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce0:	e00a      	b.n	8005cf8 <SBUS_getData+0x270>
 8005ce2:	bf00      	nop
 8005ce4:	240016a8 	.word	0x240016a8
 8005ce8:	2400007c 	.word	0x2400007c
 8005cec:	43b00000 	.word	0x43b00000
 8005cf0:	44a80000 	.word	0x44a80000
 8005cf4:	447a0000 	.word	0x447a0000
 8005cf8:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 8005cec <SBUS_getData+0x264>
 8005cfc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005d00:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8005cf0 <SBUS_getData+0x268>
 8005d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d08:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8005cf4 <SBUS_getData+0x26c>
 8005d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d14:	ee17 3a90 	vmov	r3, s15
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	4bd1      	ldr	r3, [pc, #836]	@ (8006068 <SBUS_getData+0x5e0>)
 8005d22:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 8005d24:	4bd0      	ldr	r3, [pc, #832]	@ (8006068 <SBUS_getData+0x5e0>)
 8005d26:	889b      	ldrh	r3, [r3, #4]
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d30:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 800606c <SBUS_getData+0x5e4>
 8005d34:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005d38:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8006070 <SBUS_getData+0x5e8>
 8005d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d40:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8006074 <SBUS_getData+0x5ec>
 8005d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4c:	ee17 3a90 	vmov	r3, s15
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	4bc3      	ldr	r3, [pc, #780]	@ (8006068 <SBUS_getData+0x5e0>)
 8005d5a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 8005d5c:	4bc2      	ldr	r3, [pc, #776]	@ (8006068 <SBUS_getData+0x5e0>)
 8005d5e:	88db      	ldrh	r3, [r3, #6]
 8005d60:	ee07 3a90 	vmov	s15, r3
 8005d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d68:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 800606c <SBUS_getData+0x5e4>
 8005d6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005d70:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8006070 <SBUS_getData+0x5e8>
 8005d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d78:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8006074 <SBUS_getData+0x5ec>
 8005d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d84:	ee17 3a90 	vmov	r3, s15
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	4bb5      	ldr	r3, [pc, #724]	@ (8006068 <SBUS_getData+0x5e0>)
 8005d92:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8005d94:	4bb4      	ldr	r3, [pc, #720]	@ (8006068 <SBUS_getData+0x5e0>)
 8005d96:	891b      	ldrh	r3, [r3, #8]
 8005d98:	ee07 3a90 	vmov	s15, r3
 8005d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da0:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 800606c <SBUS_getData+0x5e4>
 8005da4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005da8:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8006070 <SBUS_getData+0x5e8>
 8005dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005db0:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8006074 <SBUS_getData+0x5ec>
 8005db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dbc:	ee17 3a90 	vmov	r3, s15
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	4ba7      	ldr	r3, [pc, #668]	@ (8006068 <SBUS_getData+0x5e0>)
 8005dca:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 8005dcc:	4ba6      	ldr	r3, [pc, #664]	@ (8006068 <SBUS_getData+0x5e0>)
 8005dce:	895b      	ldrh	r3, [r3, #10]
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd8:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 800606c <SBUS_getData+0x5e4>
 8005ddc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005de0:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8006070 <SBUS_getData+0x5e8>
 8005de4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005de8:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8006074 <SBUS_getData+0x5ec>
 8005dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df4:	ee17 3a90 	vmov	r3, s15
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	4b99      	ldr	r3, [pc, #612]	@ (8006068 <SBUS_getData+0x5e0>)
 8005e02:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 8005e04:	4b98      	ldr	r3, [pc, #608]	@ (8006068 <SBUS_getData+0x5e0>)
 8005e06:	899b      	ldrh	r3, [r3, #12]
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e10:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800606c <SBUS_getData+0x5e4>
 8005e14:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e18:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8006070 <SBUS_getData+0x5e8>
 8005e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e20:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8006074 <SBUS_getData+0x5ec>
 8005e24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e2c:	ee17 3a90 	vmov	r3, s15
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	4b8b      	ldr	r3, [pc, #556]	@ (8006068 <SBUS_getData+0x5e0>)
 8005e3a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 8005e3c:	4b8a      	ldr	r3, [pc, #552]	@ (8006068 <SBUS_getData+0x5e0>)
 8005e3e:	89db      	ldrh	r3, [r3, #14]
 8005e40:	ee07 3a90 	vmov	s15, r3
 8005e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e48:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800606c <SBUS_getData+0x5e4>
 8005e4c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e50:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8006070 <SBUS_getData+0x5e8>
 8005e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e58:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8006074 <SBUS_getData+0x5ec>
 8005e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e64:	ee17 3a90 	vmov	r3, s15
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	4b7d      	ldr	r3, [pc, #500]	@ (8006068 <SBUS_getData+0x5e0>)
 8005e72:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8005e74:	4b7c      	ldr	r3, [pc, #496]	@ (8006068 <SBUS_getData+0x5e0>)
 8005e76:	8a1b      	ldrh	r3, [r3, #16]
 8005e78:	ee07 3a90 	vmov	s15, r3
 8005e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e80:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800606c <SBUS_getData+0x5e4>
 8005e84:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e88:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8006070 <SBUS_getData+0x5e8>
 8005e8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e90:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8006074 <SBUS_getData+0x5ec>
 8005e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e9c:	ee17 3a90 	vmov	r3, s15
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8006068 <SBUS_getData+0x5e0>)
 8005eaa:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 8005eac:	4b6e      	ldr	r3, [pc, #440]	@ (8006068 <SBUS_getData+0x5e0>)
 8005eae:	8a5b      	ldrh	r3, [r3, #18]
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb8:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800606c <SBUS_getData+0x5e4>
 8005ebc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005ec0:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8006070 <SBUS_getData+0x5e8>
 8005ec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ec8:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8006074 <SBUS_getData+0x5ec>
 8005ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed4:	ee17 3a90 	vmov	r3, s15
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	4b61      	ldr	r3, [pc, #388]	@ (8006068 <SBUS_getData+0x5e0>)
 8005ee2:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 8005ee4:	4b60      	ldr	r3, [pc, #384]	@ (8006068 <SBUS_getData+0x5e0>)
 8005ee6:	8a9b      	ldrh	r3, [r3, #20]
 8005ee8:	ee07 3a90 	vmov	s15, r3
 8005eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800606c <SBUS_getData+0x5e4>
 8005ef4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005ef8:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8006070 <SBUS_getData+0x5e8>
 8005efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f00:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8006074 <SBUS_getData+0x5ec>
 8005f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f0c:	ee17 3a90 	vmov	r3, s15
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	4b53      	ldr	r3, [pc, #332]	@ (8006068 <SBUS_getData+0x5e0>)
 8005f1a:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 8005f1c:	4b52      	ldr	r3, [pc, #328]	@ (8006068 <SBUS_getData+0x5e0>)
 8005f1e:	8adb      	ldrh	r3, [r3, #22]
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f28:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800606c <SBUS_getData+0x5e4>
 8005f2c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005f30:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006070 <SBUS_getData+0x5e8>
 8005f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f38:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8006074 <SBUS_getData+0x5ec>
 8005f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f44:	ee17 3a90 	vmov	r3, s15
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	4b45      	ldr	r3, [pc, #276]	@ (8006068 <SBUS_getData+0x5e0>)
 8005f52:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8005f54:	4b44      	ldr	r3, [pc, #272]	@ (8006068 <SBUS_getData+0x5e0>)
 8005f56:	8b1b      	ldrh	r3, [r3, #24]
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f60:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800606c <SBUS_getData+0x5e4>
 8005f64:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005f68:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8006070 <SBUS_getData+0x5e8>
 8005f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f70:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8006074 <SBUS_getData+0x5ec>
 8005f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f7c:	ee17 3a90 	vmov	r3, s15
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	4b37      	ldr	r3, [pc, #220]	@ (8006068 <SBUS_getData+0x5e0>)
 8005f8a:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 8005f8c:	4b36      	ldr	r3, [pc, #216]	@ (8006068 <SBUS_getData+0x5e0>)
 8005f8e:	8b5b      	ldrh	r3, [r3, #26]
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f98:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800606c <SBUS_getData+0x5e4>
 8005f9c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005fa0:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8006070 <SBUS_getData+0x5e8>
 8005fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fa8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8006074 <SBUS_getData+0x5ec>
 8005fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb4:	ee17 3a90 	vmov	r3, s15
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	4b29      	ldr	r3, [pc, #164]	@ (8006068 <SBUS_getData+0x5e0>)
 8005fc2:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8005fc4:	4b28      	ldr	r3, [pc, #160]	@ (8006068 <SBUS_getData+0x5e0>)
 8005fc6:	8b9b      	ldrh	r3, [r3, #28]
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800606c <SBUS_getData+0x5e4>
 8005fd4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005fd8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8006070 <SBUS_getData+0x5e8>
 8005fdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fe0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006074 <SBUS_getData+0x5ec>
 8005fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fec:	ee17 3a90 	vmov	r3, s15
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8006068 <SBUS_getData+0x5e0>)
 8005ffa:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 8005ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8006068 <SBUS_getData+0x5e0>)
 8005ffe:	8bdb      	ldrh	r3, [r3, #30]
 8006000:	ee07 3a90 	vmov	s15, r3
 8006004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006008:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800606c <SBUS_getData+0x5e4>
 800600c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006010:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8006070 <SBUS_getData+0x5e8>
 8006014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006018:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006074 <SBUS_getData+0x5ec>
 800601c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006024:	ee17 3a90 	vmov	r3, s15
 8006028:	b29b      	uxth	r3, r3
 800602a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800602e:	b29a      	uxth	r2, r3
 8006030:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <SBUS_getData+0x5e0>)
 8006032:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8006034:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <SBUS_getData+0x5e0>)
 8006036:	8c1b      	ldrh	r3, [r3, #32]
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006040:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800606c <SBUS_getData+0x5e4>
 8006044:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006048:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006070 <SBUS_getData+0x5e8>
 800604c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006050:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8006074 <SBUS_getData+0x5ec>
 8006054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605c:	ee17 3a90 	vmov	r3, s15
 8006060:	b29b      	uxth	r3, r3
 8006062:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006066:	e007      	b.n	8006078 <SBUS_getData+0x5f0>
 8006068:	2400007c 	.word	0x2400007c
 800606c:	43b00000 	.word	0x43b00000
 8006070:	44a80000 	.word	0x44a80000
 8006074:	447a0000 	.word	0x447a0000
 8006078:	b29a      	uxth	r2, r3
 800607a:	4b2a      	ldr	r3, [pc, #168]	@ (8006124 <SBUS_getData+0x69c>)
 800607c:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 800607e:	4b2a      	ldr	r3, [pc, #168]	@ (8006128 <SBUS_getData+0x6a0>)
 8006080:	7dda      	ldrb	r2, [r3, #23]
 8006082:	4b28      	ldr	r3, [pc, #160]	@ (8006124 <SBUS_getData+0x69c>)
 8006084:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 8006086:	4b28      	ldr	r3, [pc, #160]	@ (8006128 <SBUS_getData+0x6a0>)
 8006088:	7ddb      	ldrb	r3, [r3, #23]
 800608a:	2b07      	cmp	r3, #7
 800608c:	d90a      	bls.n	80060a4 <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 800608e:	4b26      	ldr	r3, [pc, #152]	@ (8006128 <SBUS_getData+0x6a0>)
 8006090:	7ddb      	ldrb	r3, [r3, #23]
 8006092:	3b08      	subs	r3, #8
 8006094:	b2da      	uxtb	r2, r3
 8006096:	4b24      	ldr	r3, [pc, #144]	@ (8006128 <SBUS_getData+0x6a0>)
 8006098:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 800609a:	4b22      	ldr	r3, [pc, #136]	@ (8006124 <SBUS_getData+0x69c>)
 800609c:	2235      	movs	r2, #53	@ 0x35
 800609e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80060a2:	e003      	b.n	80060ac <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 80060a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006124 <SBUS_getData+0x69c>)
 80060a6:	22aa      	movs	r2, #170	@ 0xaa
 80060a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 80060ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006128 <SBUS_getData+0x6a0>)
 80060ae:	7ddb      	ldrb	r3, [r3, #23]
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d90a      	bls.n	80060ca <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 80060b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006128 <SBUS_getData+0x6a0>)
 80060b6:	7ddb      	ldrb	r3, [r3, #23]
 80060b8:	3b04      	subs	r3, #4
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006128 <SBUS_getData+0x6a0>)
 80060be:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 80060c0:	4b18      	ldr	r3, [pc, #96]	@ (8006124 <SBUS_getData+0x69c>)
 80060c2:	2210      	movs	r2, #16
 80060c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80060c8:	e003      	b.n	80060d2 <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 80060ca:	4b16      	ldr	r3, [pc, #88]	@ (8006124 <SBUS_getData+0x69c>)
 80060cc:	22aa      	movs	r2, #170	@ 0xaa
 80060ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 80060d2:	4b15      	ldr	r3, [pc, #84]	@ (8006128 <SBUS_getData+0x6a0>)
 80060d4:	7ddb      	ldrb	r3, [r3, #23]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d90a      	bls.n	80060f0 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 80060da:	4b13      	ldr	r3, [pc, #76]	@ (8006128 <SBUS_getData+0x6a0>)
 80060dc:	7ddb      	ldrb	r3, [r3, #23]
 80060de:	3b02      	subs	r3, #2
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	4b11      	ldr	r3, [pc, #68]	@ (8006128 <SBUS_getData+0x6a0>)
 80060e4:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 80060e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006124 <SBUS_getData+0x69c>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80060ee:	e003      	b.n	80060f8 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 80060f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006124 <SBUS_getData+0x69c>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 80060f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006128 <SBUS_getData+0x6a0>)
 80060fa:	7ddb      	ldrb	r3, [r3, #23]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d004      	beq.n	800610a <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 8006100:	4b08      	ldr	r3, [pc, #32]	@ (8006124 <SBUS_getData+0x69c>)
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8006108:	e003      	b.n	8006112 <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 800610a:	4b06      	ldr	r3, [pc, #24]	@ (8006124 <SBUS_getData+0x69c>)
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 8006112:	4b04      	ldr	r3, [pc, #16]	@ (8006124 <SBUS_getData+0x69c>)
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

}
 800611a:	bf00      	nop
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	2400007c 	.word	0x2400007c
 8006128:	240016a8 	.word	0x240016a8

0800612c <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8006130:	4b0f      	ldr	r3, [pc, #60]	@ (8006170 <SBUS_IntegrityVerification+0x44>)
 8006132:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006136:	2bff      	cmp	r3, #255	@ 0xff
 8006138:	d00c      	beq.n	8006154 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 800613a:	4b0d      	ldr	r3, [pc, #52]	@ (8006170 <SBUS_IntegrityVerification+0x44>)
 800613c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006140:	3301      	adds	r3, #1
 8006142:	b2da      	uxtb	r2, r3
 8006144:	4b0a      	ldr	r3, [pc, #40]	@ (8006170 <SBUS_IntegrityVerification+0x44>)
 8006146:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 800614a:	4b09      	ldr	r3, [pc, #36]	@ (8006170 <SBUS_IntegrityVerification+0x44>)
 800614c:	22aa      	movs	r2, #170	@ 0xaa
 800614e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8006152:	e007      	b.n	8006164 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8006154:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <SBUS_IntegrityVerification+0x44>)
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 800615c:	4b04      	ldr	r3, [pc, #16]	@ (8006170 <SBUS_IntegrityVerification+0x44>)
 800615e:	2235      	movs	r2, #53	@ 0x35
 8006160:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8006164:	bf00      	nop
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	2400007c 	.word	0x2400007c

08006174 <SD_blackbox_refresh>:
void SD_blackbox_init(void){

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_refresh(void){
 8006174:	b480      	push	{r7}
 8006176:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8006178:	4b58      	ldr	r3, [pc, #352]	@ (80062dc <SD_blackbox_refresh+0x168>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a58      	ldr	r2, [pc, #352]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 800617e:	6353      	str	r3, [r2, #52]	@ 0x34

	blackbox_data.Ax = IMU.ACC.x;
 8006180:	4b58      	ldr	r3, [pc, #352]	@ (80062e4 <SD_blackbox_refresh+0x170>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	4a56      	ldr	r2, [pc, #344]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006186:	6013      	str	r3, [r2, #0]
	blackbox_data.Ay = IMU.ACC.y;
 8006188:	4b56      	ldr	r3, [pc, #344]	@ (80062e4 <SD_blackbox_refresh+0x170>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4a54      	ldr	r2, [pc, #336]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 800618e:	6053      	str	r3, [r2, #4]
	blackbox_data.Az = IMU.ACC.z;
 8006190:	4b54      	ldr	r3, [pc, #336]	@ (80062e4 <SD_blackbox_refresh+0x170>)
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	4a52      	ldr	r2, [pc, #328]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006196:	6093      	str	r3, [r2, #8]

	blackbox_data.Gx = IMU.GYR.x;
 8006198:	4b52      	ldr	r3, [pc, #328]	@ (80062e4 <SD_blackbox_refresh+0x170>)
 800619a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619c:	4a50      	ldr	r2, [pc, #320]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 800619e:	60d3      	str	r3, [r2, #12]
	blackbox_data.Gy = IMU.GYR.y;
 80061a0:	4b50      	ldr	r3, [pc, #320]	@ (80062e4 <SD_blackbox_refresh+0x170>)
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	4a4e      	ldr	r2, [pc, #312]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061a6:	6113      	str	r3, [r2, #16]
	blackbox_data.Gz = IMU.GYR.z;
 80061a8:	4b4e      	ldr	r3, [pc, #312]	@ (80062e4 <SD_blackbox_refresh+0x170>)
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	4a4c      	ldr	r2, [pc, #304]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061ae:	6153      	str	r3, [r2, #20]

	blackbox_data.Gfx = 0;
 80061b0:	4b4b      	ldr	r3, [pc, #300]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	619a      	str	r2, [r3, #24]
	blackbox_data.Gfy = 0;
 80061b8:	4b49      	ldr	r3, [pc, #292]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	61da      	str	r2, [r3, #28]
	blackbox_data.Gfz = 0;
 80061c0:	4b47      	ldr	r3, [pc, #284]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	621a      	str	r2, [r3, #32]

	blackbox_data.Roll    = IMU.Roll;
 80061c8:	4b46      	ldr	r3, [pc, #280]	@ (80062e4 <SD_blackbox_refresh+0x170>)
 80061ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061cc:	4a44      	ldr	r2, [pc, #272]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061ce:	6253      	str	r3, [r2, #36]	@ 0x24
	blackbox_data.Pitch   = IMU.Pitch;
 80061d0:	4b44      	ldr	r3, [pc, #272]	@ (80062e4 <SD_blackbox_refresh+0x170>)
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	4a42      	ldr	r2, [pc, #264]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061d6:	6293      	str	r3, [r2, #40]	@ 0x28
	blackbox_data.Heading = IMU.Heading;
 80061d8:	4b42      	ldr	r3, [pc, #264]	@ (80062e4 <SD_blackbox_refresh+0x170>)
 80061da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061dc:	4a40      	ldr	r2, [pc, #256]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061de:	62d3      	str	r3, [r2, #44]	@ 0x2c

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 80061e0:	4b41      	ldr	r3, [pc, #260]	@ (80062e8 <SD_blackbox_refresh+0x174>)
 80061e2:	8a1a      	ldrh	r2, [r3, #16]
 80061e4:	4b3e      	ldr	r3, [pc, #248]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	blackbox_data.Latitude = 0;
 80061ea:	4b3d      	ldr	r3, [pc, #244]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	639a      	str	r2, [r3, #56]	@ 0x38
	blackbox_data.Longitude= 0;
 80061f0:	4b3b      	ldr	r3, [pc, #236]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	63da      	str	r2, [r3, #60]	@ 0x3c

	blackbox_data.ARSP = 0;
 80061f6:	4b3a      	ldr	r3, [pc, #232]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	blackbox_data.Pressure = BMP280.Pressure;
 80061fe:	4b3a      	ldr	r3, [pc, #232]	@ (80062e8 <SD_blackbox_refresh+0x174>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	4a37      	ldr	r2, [pc, #220]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006204:	6413      	str	r3, [r2, #64]	@ 0x40

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 8006206:	4b39      	ldr	r3, [pc, #228]	@ (80062ec <SD_blackbox_refresh+0x178>)
 8006208:	781a      	ldrb	r2, [r3, #0]
 800620a:	4b35      	ldr	r3, [pc, #212]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 800620c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Flight_Mode = 0;
 8006210:	4b33      	ldr	r3, [pc, #204]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006212:	2200      	movs	r2, #0
 8006214:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 8006218:	4b34      	ldr	r3, [pc, #208]	@ (80062ec <SD_blackbox_refresh+0x178>)
 800621a:	885a      	ldrh	r2, [r3, #2]
 800621c:	4b30      	ldr	r3, [pc, #192]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 800621e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 8006222:	4b32      	ldr	r3, [pc, #200]	@ (80062ec <SD_blackbox_refresh+0x178>)
 8006224:	889a      	ldrh	r2, [r3, #4]
 8006226:	4b2e      	ldr	r3, [pc, #184]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006228:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 800622c:	4b2f      	ldr	r3, [pc, #188]	@ (80062ec <SD_blackbox_refresh+0x178>)
 800622e:	88da      	ldrh	r2, [r3, #6]
 8006230:	4b2b      	ldr	r3, [pc, #172]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006232:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 8006236:	4b2d      	ldr	r3, [pc, #180]	@ (80062ec <SD_blackbox_refresh+0x178>)
 8006238:	891a      	ldrh	r2, [r3, #8]
 800623a:	4b29      	ldr	r3, [pc, #164]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 800623c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8006240:	4b2a      	ldr	r3, [pc, #168]	@ (80062ec <SD_blackbox_refresh+0x178>)
 8006242:	895a      	ldrh	r2, [r3, #10]
 8006244:	4b26      	ldr	r3, [pc, #152]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006246:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 800624a:	4b28      	ldr	r3, [pc, #160]	@ (80062ec <SD_blackbox_refresh+0x178>)
 800624c:	899a      	ldrh	r2, [r3, #12]
 800624e:	4b24      	ldr	r3, [pc, #144]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006250:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 8006254:	4b25      	ldr	r3, [pc, #148]	@ (80062ec <SD_blackbox_refresh+0x178>)
 8006256:	89da      	ldrh	r2, [r3, #14]
 8006258:	4b21      	ldr	r3, [pc, #132]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 800625a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 800625e:	4b23      	ldr	r3, [pc, #140]	@ (80062ec <SD_blackbox_refresh+0x178>)
 8006260:	8a1a      	ldrh	r2, [r3, #16]
 8006262:	4b1f      	ldr	r3, [pc, #124]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006264:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8006268:	4b20      	ldr	r3, [pc, #128]	@ (80062ec <SD_blackbox_refresh+0x178>)
 800626a:	8a5a      	ldrh	r2, [r3, #18]
 800626c:	4b1c      	ldr	r3, [pc, #112]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 800626e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 8006272:	4b1e      	ldr	r3, [pc, #120]	@ (80062ec <SD_blackbox_refresh+0x178>)
 8006274:	8a9a      	ldrh	r2, [r3, #20]
 8006276:	4b1a      	ldr	r3, [pc, #104]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006278:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 800627c:	4b1b      	ldr	r3, [pc, #108]	@ (80062ec <SD_blackbox_refresh+0x178>)
 800627e:	8ada      	ldrh	r2, [r3, #22]
 8006280:	4b17      	ldr	r3, [pc, #92]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006282:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 8006286:	4b19      	ldr	r3, [pc, #100]	@ (80062ec <SD_blackbox_refresh+0x178>)
 8006288:	8b1a      	ldrh	r2, [r3, #24]
 800628a:	4b15      	ldr	r3, [pc, #84]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 800628c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8006290:	4b16      	ldr	r3, [pc, #88]	@ (80062ec <SD_blackbox_refresh+0x178>)
 8006292:	8b5a      	ldrh	r2, [r3, #26]
 8006294:	4b12      	ldr	r3, [pc, #72]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 8006296:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 800629a:	4b14      	ldr	r3, [pc, #80]	@ (80062ec <SD_blackbox_refresh+0x178>)
 800629c:	8b9a      	ldrh	r2, [r3, #28]
 800629e:	4b10      	ldr	r3, [pc, #64]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80062a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 80062a4:	4b11      	ldr	r3, [pc, #68]	@ (80062ec <SD_blackbox_refresh+0x178>)
 80062a6:	8bda      	ldrh	r2, [r3, #30]
 80062a8:	4b0d      	ldr	r3, [pc, #52]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80062aa:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 80062ae:	4b0f      	ldr	r3, [pc, #60]	@ (80062ec <SD_blackbox_refresh+0x178>)
 80062b0:	8c1a      	ldrh	r2, [r3, #32]
 80062b2:	4b0b      	ldr	r3, [pc, #44]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80062b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 80062b8:	4b0c      	ldr	r3, [pc, #48]	@ (80062ec <SD_blackbox_refresh+0x178>)
 80062ba:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80062be:	4b08      	ldr	r3, [pc, #32]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80062c0:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 80062c4:	4b09      	ldr	r3, [pc, #36]	@ (80062ec <SD_blackbox_refresh+0x178>)
 80062c6:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80062ca:	4b05      	ldr	r3, [pc, #20]	@ (80062e0 <SD_blackbox_refresh+0x16c>)
 80062cc:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
//	blackbox_data.OUT6  = PWM_Output.Canal_6;
//	blackbox_data.OUT7  = PWM_Output.Canal_7;
//	blackbox_data.OUT8  = PWM_Output.Canal_8;
//	blackbox_data.OUT9  = PWM_Output.Canal_9;
//	blackbox_data.OUT10 = PWM_Output.Canal_10;
}
 80062d0:	bf00      	nop
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	24000db4 	.word	0x24000db4
 80062e0:	240028ec 	.word	0x240028ec
 80062e4:	24001540 	.word	0x24001540
 80062e8:	24001400 	.word	0x24001400
 80062ec:	2400007c 	.word	0x2400007c

080062f0 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 80062f6:	f7ff ff3d 	bl	8006174 <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 80062fa:	4b26      	ldr	r3, [pc, #152]	@ (8006394 <SD_blackbox_write+0xa4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a26      	ldr	r2, [pc, #152]	@ (8006398 <SD_blackbox_write+0xa8>)
 8006300:	6313      	str	r3, [r2, #48]	@ 0x30
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 8006302:	4b26      	ldr	r3, [pc, #152]	@ (800639c <SD_blackbox_write+0xac>)
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	4613      	mov	r3, r2
 800630a:	021b      	lsls	r3, r3, #8
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	4a24      	ldr	r2, [pc, #144]	@ (80063a0 <SD_blackbox_write+0xb0>)
 8006310:	4413      	add	r3, r2
 8006312:	2280      	movs	r2, #128	@ 0x80
 8006314:	4920      	ldr	r1, [pc, #128]	@ (8006398 <SD_blackbox_write+0xa8>)
 8006316:	4618      	mov	r0, r3
 8006318:	f011 fb5f 	bl	80179da <memcpy>

	if(WriteCount == 15){
 800631c:	4b1f      	ldr	r3, [pc, #124]	@ (800639c <SD_blackbox_write+0xac>)
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	2b0f      	cmp	r3, #15
 8006322:	d129      	bne.n	8006378 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8006324:	2300      	movs	r3, #0
 8006326:	71fb      	strb	r3, [r7, #7]
 8006328:	e00d      	b.n	8006346 <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 800632a:	79fa      	ldrb	r2, [r7, #7]
 800632c:	4613      	mov	r3, r2
 800632e:	021b      	lsls	r3, r3, #8
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	4a1b      	ldr	r2, [pc, #108]	@ (80063a0 <SD_blackbox_write+0xb0>)
 8006334:	1899      	adds	r1, r3, r2
 8006336:	4b1b      	ldr	r3, [pc, #108]	@ (80063a4 <SD_blackbox_write+0xb4>)
 8006338:	2280      	movs	r2, #128	@ 0x80
 800633a:	481b      	ldr	r0, [pc, #108]	@ (80063a8 <SD_blackbox_write+0xb8>)
 800633c:	f00d fe67 	bl	801400e <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	3301      	adds	r3, #1
 8006344:	71fb      	strb	r3, [r7, #7]
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	2b0f      	cmp	r3, #15
 800634a:	d9ee      	bls.n	800632a <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 800634c:	4816      	ldr	r0, [pc, #88]	@ (80063a8 <SD_blackbox_write+0xb8>)
 800634e:	f00e f802 	bl	8014356 <f_sync>
 8006352:	4603      	mov	r3, r0
 8006354:	461a      	mov	r2, r3
 8006356:	4b15      	ldr	r3, [pc, #84]	@ (80063ac <SD_blackbox_write+0xbc>)
 8006358:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 800635a:	4b10      	ldr	r3, [pc, #64]	@ (800639c <SD_blackbox_write+0xac>)
 800635c:	2200      	movs	r2, #0
 800635e:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8006360:	4b13      	ldr	r3, [pc, #76]	@ (80063b0 <SD_blackbox_write+0xc0>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	b2da      	uxtb	r2, r3
 8006368:	4b11      	ldr	r3, [pc, #68]	@ (80063b0 <SD_blackbox_write+0xc0>)
 800636a:	701a      	strb	r2, [r3, #0]
		++DataCount;
 800636c:	4b09      	ldr	r3, [pc, #36]	@ (8006394 <SD_blackbox_write+0xa4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	4a08      	ldr	r2, [pc, #32]	@ (8006394 <SD_blackbox_write+0xa4>)
 8006374:	6013      	str	r3, [r2, #0]
		return;
 8006376:	e00a      	b.n	800638e <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8006378:	4b08      	ldr	r3, [pc, #32]	@ (800639c <SD_blackbox_write+0xac>)
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	4b06      	ldr	r3, [pc, #24]	@ (800639c <SD_blackbox_write+0xac>)
 8006382:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8006384:	4b03      	ldr	r3, [pc, #12]	@ (8006394 <SD_blackbox_write+0xa4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	4a02      	ldr	r2, [pc, #8]	@ (8006394 <SD_blackbox_write+0xa4>)
 800638c:	6013      	str	r3, [r2, #0]
}
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	2400296c 	.word	0x2400296c
 8006398:	240028ec 	.word	0x240028ec
 800639c:	24002970 	.word	0x24002970
 80063a0:	240018fc 	.word	0x240018fc
 80063a4:	240018f8 	.word	0x240018f8
 80063a8:	240016c4 	.word	0x240016c4
 80063ac:	240018f4 	.word	0x240018f4
 80063b0:	24002972 	.word	0x24002972

080063b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80063b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80063ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80063b8:	f7fd f828 	bl	800340c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80063bc:	480c      	ldr	r0, [pc, #48]	@ (80063f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80063be:	490d      	ldr	r1, [pc, #52]	@ (80063f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80063c0:	4a0d      	ldr	r2, [pc, #52]	@ (80063f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80063c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063c4:	e002      	b.n	80063cc <LoopCopyDataInit>

080063c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80063c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80063ca:	3304      	adds	r3, #4

080063cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80063cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80063ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063d0:	d3f9      	bcc.n	80063c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063d2:	4a0a      	ldr	r2, [pc, #40]	@ (80063fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80063d4:	4c0a      	ldr	r4, [pc, #40]	@ (8006400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80063d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063d8:	e001      	b.n	80063de <LoopFillZerobss>

080063da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063dc:	3204      	adds	r2, #4

080063de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80063e0:	d3fb      	bcc.n	80063da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80063e2:	f011 fad3 	bl	801798c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063e6:	f7fc fbab 	bl	8002b40 <main>
  bx  lr
 80063ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80063ec:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80063f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80063f4:	24000290 	.word	0x24000290
  ldr r2, =_sidata
 80063f8:	0801a690 	.word	0x0801a690
  ldr r2, =_sbss
 80063fc:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 8006400:	24006834 	.word	0x24006834

08006404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006404:	e7fe      	b.n	8006404 <ADC_IRQHandler>
	...

08006408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800640e:	2003      	movs	r0, #3
 8006410:	f000 f927 	bl	8006662 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006414:	f004 fd3e 	bl	800ae94 <HAL_RCC_GetSysClockFreq>
 8006418:	4602      	mov	r2, r0
 800641a:	4b15      	ldr	r3, [pc, #84]	@ (8006470 <HAL_Init+0x68>)
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	4913      	ldr	r1, [pc, #76]	@ (8006474 <HAL_Init+0x6c>)
 8006426:	5ccb      	ldrb	r3, [r1, r3]
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	fa22 f303 	lsr.w	r3, r2, r3
 8006430:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006432:	4b0f      	ldr	r3, [pc, #60]	@ (8006470 <HAL_Init+0x68>)
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	4a0e      	ldr	r2, [pc, #56]	@ (8006474 <HAL_Init+0x6c>)
 800643c:	5cd3      	ldrb	r3, [r2, r3]
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	fa22 f303 	lsr.w	r3, r2, r3
 8006448:	4a0b      	ldr	r2, [pc, #44]	@ (8006478 <HAL_Init+0x70>)
 800644a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800644c:	4a0b      	ldr	r2, [pc, #44]	@ (800647c <HAL_Init+0x74>)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006452:	200f      	movs	r0, #15
 8006454:	f7fc fe44 	bl	80030e0 <HAL_InitTick>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e002      	b.n	8006468 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006462:	f7fc fe1f 	bl	80030a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	58024400 	.word	0x58024400
 8006474:	080199f4 	.word	0x080199f4
 8006478:	24000004 	.word	0x24000004
 800647c:	24000000 	.word	0x24000000

08006480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006484:	4b06      	ldr	r3, [pc, #24]	@ (80064a0 <HAL_IncTick+0x20>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <HAL_IncTick+0x24>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4413      	add	r3, r2
 8006490:	4a04      	ldr	r2, [pc, #16]	@ (80064a4 <HAL_IncTick+0x24>)
 8006492:	6013      	str	r3, [r2, #0]
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	240000a8 	.word	0x240000a8
 80064a4:	24002974 	.word	0x24002974

080064a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  return uwTick;
 80064ac:	4b03      	ldr	r3, [pc, #12]	@ (80064bc <HAL_GetTick+0x14>)
 80064ae:	681b      	ldr	r3, [r3, #0]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	24002974 	.word	0x24002974

080064c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064c8:	f7ff ffee 	bl	80064a8 <HAL_GetTick>
 80064cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d005      	beq.n	80064e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80064da:	4b0a      	ldr	r3, [pc, #40]	@ (8006504 <HAL_Delay+0x44>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80064e6:	bf00      	nop
 80064e8:	f7ff ffde 	bl	80064a8 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d8f7      	bhi.n	80064e8 <HAL_Delay+0x28>
  {
  }
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	240000a8 	.word	0x240000a8

08006508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006518:	4b0b      	ldr	r3, [pc, #44]	@ (8006548 <__NVIC_SetPriorityGrouping+0x40>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006524:	4013      	ands	r3, r2
 8006526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006530:	4b06      	ldr	r3, [pc, #24]	@ (800654c <__NVIC_SetPriorityGrouping+0x44>)
 8006532:	4313      	orrs	r3, r2
 8006534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006536:	4a04      	ldr	r2, [pc, #16]	@ (8006548 <__NVIC_SetPriorityGrouping+0x40>)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	60d3      	str	r3, [r2, #12]
}
 800653c:	bf00      	nop
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	e000ed00 	.word	0xe000ed00
 800654c:	05fa0000 	.word	0x05fa0000

08006550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006554:	4b04      	ldr	r3, [pc, #16]	@ (8006568 <__NVIC_GetPriorityGrouping+0x18>)
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	0a1b      	lsrs	r3, r3, #8
 800655a:	f003 0307 	and.w	r3, r3, #7
}
 800655e:	4618      	mov	r0, r3
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	e000ed00 	.word	0xe000ed00

0800656c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	4603      	mov	r3, r0
 8006574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800657a:	2b00      	cmp	r3, #0
 800657c:	db0b      	blt.n	8006596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800657e:	88fb      	ldrh	r3, [r7, #6]
 8006580:	f003 021f 	and.w	r2, r3, #31
 8006584:	4907      	ldr	r1, [pc, #28]	@ (80065a4 <__NVIC_EnableIRQ+0x38>)
 8006586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	2001      	movs	r0, #1
 800658e:	fa00 f202 	lsl.w	r2, r0, r2
 8006592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	e000e100 	.word	0xe000e100

080065a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4603      	mov	r3, r0
 80065b0:	6039      	str	r1, [r7, #0]
 80065b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80065b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	db0a      	blt.n	80065d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	490c      	ldr	r1, [pc, #48]	@ (80065f4 <__NVIC_SetPriority+0x4c>)
 80065c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065c6:	0112      	lsls	r2, r2, #4
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	440b      	add	r3, r1
 80065cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065d0:	e00a      	b.n	80065e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	4908      	ldr	r1, [pc, #32]	@ (80065f8 <__NVIC_SetPriority+0x50>)
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	3b04      	subs	r3, #4
 80065e0:	0112      	lsls	r2, r2, #4
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	440b      	add	r3, r1
 80065e6:	761a      	strb	r2, [r3, #24]
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	e000e100 	.word	0xe000e100
 80065f8:	e000ed00 	.word	0xe000ed00

080065fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b089      	sub	sp, #36	@ 0x24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f1c3 0307 	rsb	r3, r3, #7
 8006616:	2b04      	cmp	r3, #4
 8006618:	bf28      	it	cs
 800661a:	2304      	movcs	r3, #4
 800661c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	3304      	adds	r3, #4
 8006622:	2b06      	cmp	r3, #6
 8006624:	d902      	bls.n	800662c <NVIC_EncodePriority+0x30>
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3b03      	subs	r3, #3
 800662a:	e000      	b.n	800662e <NVIC_EncodePriority+0x32>
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006630:	f04f 32ff 	mov.w	r2, #4294967295
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	43da      	mvns	r2, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	401a      	ands	r2, r3
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006644:	f04f 31ff 	mov.w	r1, #4294967295
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	fa01 f303 	lsl.w	r3, r1, r3
 800664e:	43d9      	mvns	r1, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006654:	4313      	orrs	r3, r2
         );
}
 8006656:	4618      	mov	r0, r3
 8006658:	3724      	adds	r7, #36	@ 0x24
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b082      	sub	sp, #8
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff ff4c 	bl	8006508 <__NVIC_SetPriorityGrouping>
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006686:	f7ff ff63 	bl	8006550 <__NVIC_GetPriorityGrouping>
 800668a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	6978      	ldr	r0, [r7, #20]
 8006692:	f7ff ffb3 	bl	80065fc <NVIC_EncodePriority>
 8006696:	4602      	mov	r2, r0
 8006698:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800669c:	4611      	mov	r1, r2
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff ff82 	bl	80065a8 <__NVIC_SetPriority>
}
 80066a4:	bf00      	nop
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff ff56 	bl	800656c <__NVIC_EnableIRQ>
}
 80066c0:	bf00      	nop
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80066cc:	f3bf 8f5f 	dmb	sy
}
 80066d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80066d2:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <HAL_MPU_Disable+0x28>)
 80066d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d6:	4a06      	ldr	r2, [pc, #24]	@ (80066f0 <HAL_MPU_Disable+0x28>)
 80066d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066dc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80066de:	4b05      	ldr	r3, [pc, #20]	@ (80066f4 <HAL_MPU_Disable+0x2c>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	605a      	str	r2, [r3, #4]
}
 80066e4:	bf00      	nop
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	e000ed00 	.word	0xe000ed00
 80066f4:	e000ed90 	.word	0xe000ed90

080066f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006700:	4a0b      	ldr	r2, [pc, #44]	@ (8006730 <HAL_MPU_Enable+0x38>)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f043 0301 	orr.w	r3, r3, #1
 8006708:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800670a:	4b0a      	ldr	r3, [pc, #40]	@ (8006734 <HAL_MPU_Enable+0x3c>)
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	4a09      	ldr	r2, [pc, #36]	@ (8006734 <HAL_MPU_Enable+0x3c>)
 8006710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006714:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006716:	f3bf 8f4f 	dsb	sy
}
 800671a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800671c:	f3bf 8f6f 	isb	sy
}
 8006720:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	e000ed90 	.word	0xe000ed90
 8006734:	e000ed00 	.word	0xe000ed00

08006738 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	785a      	ldrb	r2, [r3, #1]
 8006744:	4b1b      	ldr	r3, [pc, #108]	@ (80067b4 <HAL_MPU_ConfigRegion+0x7c>)
 8006746:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006748:	4b1a      	ldr	r3, [pc, #104]	@ (80067b4 <HAL_MPU_ConfigRegion+0x7c>)
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	4a19      	ldr	r2, [pc, #100]	@ (80067b4 <HAL_MPU_ConfigRegion+0x7c>)
 800674e:	f023 0301 	bic.w	r3, r3, #1
 8006752:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006754:	4a17      	ldr	r2, [pc, #92]	@ (80067b4 <HAL_MPU_ConfigRegion+0x7c>)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	7b1b      	ldrb	r3, [r3, #12]
 8006760:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	7adb      	ldrb	r3, [r3, #11]
 8006766:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006768:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7a9b      	ldrb	r3, [r3, #10]
 800676e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006770:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	7b5b      	ldrb	r3, [r3, #13]
 8006776:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006778:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	7b9b      	ldrb	r3, [r3, #14]
 800677e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006780:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7bdb      	ldrb	r3, [r3, #15]
 8006786:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006788:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7a5b      	ldrb	r3, [r3, #9]
 800678e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006790:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	7a1b      	ldrb	r3, [r3, #8]
 8006796:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006798:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	7812      	ldrb	r2, [r2, #0]
 800679e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80067a0:	4a04      	ldr	r2, [pc, #16]	@ (80067b4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80067a2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80067a4:	6113      	str	r3, [r2, #16]
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	e000ed90 	.word	0xe000ed90

080067b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80067c0:	f7ff fe72 	bl	80064a8 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e37d      	b.n	8006ecc <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a66      	ldr	r2, [pc, #408]	@ (8006970 <HAL_DMA_Init+0x1b8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d04a      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a65      	ldr	r2, [pc, #404]	@ (8006974 <HAL_DMA_Init+0x1bc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d045      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a63      	ldr	r2, [pc, #396]	@ (8006978 <HAL_DMA_Init+0x1c0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d040      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a62      	ldr	r2, [pc, #392]	@ (800697c <HAL_DMA_Init+0x1c4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d03b      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a60      	ldr	r2, [pc, #384]	@ (8006980 <HAL_DMA_Init+0x1c8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d036      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a5f      	ldr	r2, [pc, #380]	@ (8006984 <HAL_DMA_Init+0x1cc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d031      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a5d      	ldr	r2, [pc, #372]	@ (8006988 <HAL_DMA_Init+0x1d0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d02c      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a5c      	ldr	r2, [pc, #368]	@ (800698c <HAL_DMA_Init+0x1d4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d027      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a5a      	ldr	r2, [pc, #360]	@ (8006990 <HAL_DMA_Init+0x1d8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d022      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a59      	ldr	r2, [pc, #356]	@ (8006994 <HAL_DMA_Init+0x1dc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d01d      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a57      	ldr	r2, [pc, #348]	@ (8006998 <HAL_DMA_Init+0x1e0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d018      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a56      	ldr	r2, [pc, #344]	@ (800699c <HAL_DMA_Init+0x1e4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d013      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a54      	ldr	r2, [pc, #336]	@ (80069a0 <HAL_DMA_Init+0x1e8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00e      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a53      	ldr	r2, [pc, #332]	@ (80069a4 <HAL_DMA_Init+0x1ec>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d009      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a51      	ldr	r2, [pc, #324]	@ (80069a8 <HAL_DMA_Init+0x1f0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_DMA_Init+0xb8>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a50      	ldr	r2, [pc, #320]	@ (80069ac <HAL_DMA_Init+0x1f4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d101      	bne.n	8006874 <HAL_DMA_Init+0xbc>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <HAL_DMA_Init+0xbe>
 8006874:	2300      	movs	r3, #0
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 813c 	beq.w	8006af4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a37      	ldr	r2, [pc, #220]	@ (8006970 <HAL_DMA_Init+0x1b8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d04a      	beq.n	800692c <HAL_DMA_Init+0x174>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a36      	ldr	r2, [pc, #216]	@ (8006974 <HAL_DMA_Init+0x1bc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d045      	beq.n	800692c <HAL_DMA_Init+0x174>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a34      	ldr	r2, [pc, #208]	@ (8006978 <HAL_DMA_Init+0x1c0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d040      	beq.n	800692c <HAL_DMA_Init+0x174>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a33      	ldr	r2, [pc, #204]	@ (800697c <HAL_DMA_Init+0x1c4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d03b      	beq.n	800692c <HAL_DMA_Init+0x174>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a31      	ldr	r2, [pc, #196]	@ (8006980 <HAL_DMA_Init+0x1c8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d036      	beq.n	800692c <HAL_DMA_Init+0x174>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a30      	ldr	r2, [pc, #192]	@ (8006984 <HAL_DMA_Init+0x1cc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d031      	beq.n	800692c <HAL_DMA_Init+0x174>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006988 <HAL_DMA_Init+0x1d0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d02c      	beq.n	800692c <HAL_DMA_Init+0x174>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a2d      	ldr	r2, [pc, #180]	@ (800698c <HAL_DMA_Init+0x1d4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d027      	beq.n	800692c <HAL_DMA_Init+0x174>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006990 <HAL_DMA_Init+0x1d8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d022      	beq.n	800692c <HAL_DMA_Init+0x174>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006994 <HAL_DMA_Init+0x1dc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d01d      	beq.n	800692c <HAL_DMA_Init+0x174>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a28      	ldr	r2, [pc, #160]	@ (8006998 <HAL_DMA_Init+0x1e0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d018      	beq.n	800692c <HAL_DMA_Init+0x174>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a27      	ldr	r2, [pc, #156]	@ (800699c <HAL_DMA_Init+0x1e4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d013      	beq.n	800692c <HAL_DMA_Init+0x174>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a25      	ldr	r2, [pc, #148]	@ (80069a0 <HAL_DMA_Init+0x1e8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00e      	beq.n	800692c <HAL_DMA_Init+0x174>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a24      	ldr	r2, [pc, #144]	@ (80069a4 <HAL_DMA_Init+0x1ec>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d009      	beq.n	800692c <HAL_DMA_Init+0x174>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a22      	ldr	r2, [pc, #136]	@ (80069a8 <HAL_DMA_Init+0x1f0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <HAL_DMA_Init+0x174>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a21      	ldr	r2, [pc, #132]	@ (80069ac <HAL_DMA_Init+0x1f4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d108      	bne.n	800693e <HAL_DMA_Init+0x186>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0201 	bic.w	r2, r2, #1
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	e007      	b.n	800694e <HAL_DMA_Init+0x196>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0201 	bic.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800694e:	e02f      	b.n	80069b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006950:	f7ff fdaa 	bl	80064a8 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b05      	cmp	r3, #5
 800695c:	d928      	bls.n	80069b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2220      	movs	r2, #32
 8006962:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2203      	movs	r2, #3
 8006968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e2ad      	b.n	8006ecc <HAL_DMA_Init+0x714>
 8006970:	40020010 	.word	0x40020010
 8006974:	40020028 	.word	0x40020028
 8006978:	40020040 	.word	0x40020040
 800697c:	40020058 	.word	0x40020058
 8006980:	40020070 	.word	0x40020070
 8006984:	40020088 	.word	0x40020088
 8006988:	400200a0 	.word	0x400200a0
 800698c:	400200b8 	.word	0x400200b8
 8006990:	40020410 	.word	0x40020410
 8006994:	40020428 	.word	0x40020428
 8006998:	40020440 	.word	0x40020440
 800699c:	40020458 	.word	0x40020458
 80069a0:	40020470 	.word	0x40020470
 80069a4:	40020488 	.word	0x40020488
 80069a8:	400204a0 	.word	0x400204a0
 80069ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1c8      	bne.n	8006950 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	4b73      	ldr	r3, [pc, #460]	@ (8006b98 <HAL_DMA_Init+0x3e0>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80069d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d107      	bne.n	8006a14 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b28      	cmp	r3, #40	@ 0x28
 8006a1a:	d903      	bls.n	8006a24 <HAL_DMA_Init+0x26c>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a22:	d91f      	bls.n	8006a64 <HAL_DMA_Init+0x2ac>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a2a:	d903      	bls.n	8006a34 <HAL_DMA_Init+0x27c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	2b42      	cmp	r3, #66	@ 0x42
 8006a32:	d917      	bls.n	8006a64 <HAL_DMA_Init+0x2ac>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2b46      	cmp	r3, #70	@ 0x46
 8006a3a:	d903      	bls.n	8006a44 <HAL_DMA_Init+0x28c>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b48      	cmp	r3, #72	@ 0x48
 8006a42:	d90f      	bls.n	8006a64 <HAL_DMA_Init+0x2ac>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b4e      	cmp	r3, #78	@ 0x4e
 8006a4a:	d903      	bls.n	8006a54 <HAL_DMA_Init+0x29c>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b52      	cmp	r3, #82	@ 0x52
 8006a52:	d907      	bls.n	8006a64 <HAL_DMA_Init+0x2ac>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b73      	cmp	r3, #115	@ 0x73
 8006a5a:	d905      	bls.n	8006a68 <HAL_DMA_Init+0x2b0>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b77      	cmp	r3, #119	@ 0x77
 8006a62:	d801      	bhi.n	8006a68 <HAL_DMA_Init+0x2b0>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <HAL_DMA_Init+0x2b2>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a74:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f023 0307 	bic.w	r3, r3, #7
 8006a8c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d117      	bne.n	8006ad0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00e      	beq.n	8006ad0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f002 fbe0 	bl	8009278 <DMA_CheckFifoParam>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d008      	beq.n	8006ad0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2240      	movs	r2, #64	@ 0x40
 8006ac2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e1fd      	b.n	8006ecc <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f002 fb1b 	bl	8009114 <DMA_CalcBaseAndBitshift>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	223f      	movs	r2, #63	@ 0x3f
 8006aec:	409a      	lsls	r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	609a      	str	r2, [r3, #8]
 8006af2:	e0fd      	b.n	8006cf0 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a28      	ldr	r2, [pc, #160]	@ (8006b9c <HAL_DMA_Init+0x3e4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d04a      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a27      	ldr	r2, [pc, #156]	@ (8006ba0 <HAL_DMA_Init+0x3e8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d045      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a25      	ldr	r2, [pc, #148]	@ (8006ba4 <HAL_DMA_Init+0x3ec>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d040      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a24      	ldr	r2, [pc, #144]	@ (8006ba8 <HAL_DMA_Init+0x3f0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d03b      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a22      	ldr	r2, [pc, #136]	@ (8006bac <HAL_DMA_Init+0x3f4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d036      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a21      	ldr	r2, [pc, #132]	@ (8006bb0 <HAL_DMA_Init+0x3f8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d031      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a1f      	ldr	r2, [pc, #124]	@ (8006bb4 <HAL_DMA_Init+0x3fc>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d02c      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006bb8 <HAL_DMA_Init+0x400>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d027      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a1c      	ldr	r2, [pc, #112]	@ (8006bbc <HAL_DMA_Init+0x404>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d022      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc0 <HAL_DMA_Init+0x408>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d01d      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a19      	ldr	r2, [pc, #100]	@ (8006bc4 <HAL_DMA_Init+0x40c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d018      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a18      	ldr	r2, [pc, #96]	@ (8006bc8 <HAL_DMA_Init+0x410>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d013      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a16      	ldr	r2, [pc, #88]	@ (8006bcc <HAL_DMA_Init+0x414>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00e      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a15      	ldr	r2, [pc, #84]	@ (8006bd0 <HAL_DMA_Init+0x418>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d009      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a13      	ldr	r2, [pc, #76]	@ (8006bd4 <HAL_DMA_Init+0x41c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d004      	beq.n	8006b94 <HAL_DMA_Init+0x3dc>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a12      	ldr	r2, [pc, #72]	@ (8006bd8 <HAL_DMA_Init+0x420>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d123      	bne.n	8006bdc <HAL_DMA_Init+0x424>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e022      	b.n	8006bde <HAL_DMA_Init+0x426>
 8006b98:	fe10803f 	.word	0xfe10803f
 8006b9c:	48022c08 	.word	0x48022c08
 8006ba0:	48022c1c 	.word	0x48022c1c
 8006ba4:	48022c30 	.word	0x48022c30
 8006ba8:	48022c44 	.word	0x48022c44
 8006bac:	48022c58 	.word	0x48022c58
 8006bb0:	48022c6c 	.word	0x48022c6c
 8006bb4:	48022c80 	.word	0x48022c80
 8006bb8:	48022c94 	.word	0x48022c94
 8006bbc:	58025408 	.word	0x58025408
 8006bc0:	5802541c 	.word	0x5802541c
 8006bc4:	58025430 	.word	0x58025430
 8006bc8:	58025444 	.word	0x58025444
 8006bcc:	58025458 	.word	0x58025458
 8006bd0:	5802546c 	.word	0x5802546c
 8006bd4:	58025480 	.word	0x58025480
 8006bd8:	58025494 	.word	0x58025494
 8006bdc:	2300      	movs	r3, #0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d07d      	beq.n	8006cde <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a7f      	ldr	r2, [pc, #508]	@ (8006de4 <HAL_DMA_Init+0x62c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d021      	beq.n	8006c30 <HAL_DMA_Init+0x478>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a7d      	ldr	r2, [pc, #500]	@ (8006de8 <HAL_DMA_Init+0x630>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01c      	beq.n	8006c30 <HAL_DMA_Init+0x478>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a7c      	ldr	r2, [pc, #496]	@ (8006dec <HAL_DMA_Init+0x634>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d017      	beq.n	8006c30 <HAL_DMA_Init+0x478>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a7a      	ldr	r2, [pc, #488]	@ (8006df0 <HAL_DMA_Init+0x638>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d012      	beq.n	8006c30 <HAL_DMA_Init+0x478>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a79      	ldr	r2, [pc, #484]	@ (8006df4 <HAL_DMA_Init+0x63c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00d      	beq.n	8006c30 <HAL_DMA_Init+0x478>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a77      	ldr	r2, [pc, #476]	@ (8006df8 <HAL_DMA_Init+0x640>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d008      	beq.n	8006c30 <HAL_DMA_Init+0x478>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a76      	ldr	r2, [pc, #472]	@ (8006dfc <HAL_DMA_Init+0x644>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d003      	beq.n	8006c30 <HAL_DMA_Init+0x478>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a74      	ldr	r2, [pc, #464]	@ (8006e00 <HAL_DMA_Init+0x648>)
 8006c2e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4b6e      	ldr	r3, [pc, #440]	@ (8006e04 <HAL_DMA_Init+0x64c>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	2b40      	cmp	r3, #64	@ 0x40
 8006c56:	d008      	beq.n	8006c6a <HAL_DMA_Init+0x4b2>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2b80      	cmp	r3, #128	@ 0x80
 8006c5e:	d102      	bne.n	8006c66 <HAL_DMA_Init+0x4ae>
 8006c60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006c64:	e002      	b.n	8006c6c <HAL_DMA_Init+0x4b4>
 8006c66:	2300      	movs	r3, #0
 8006c68:	e000      	b.n	8006c6c <HAL_DMA_Init+0x4b4>
 8006c6a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	68d2      	ldr	r2, [r2, #12]
 8006c70:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006c72:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006c7a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006c82:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006c8a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006c92:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006c9a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4b55      	ldr	r3, [pc, #340]	@ (8006e08 <HAL_DMA_Init+0x650>)
 8006cb2:	4413      	add	r3, r2
 8006cb4:	4a55      	ldr	r2, [pc, #340]	@ (8006e0c <HAL_DMA_Init+0x654>)
 8006cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cba:	091b      	lsrs	r3, r3, #4
 8006cbc:	009a      	lsls	r2, r3, #2
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f002 fa26 	bl	8009114 <DMA_CalcBaseAndBitshift>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	605a      	str	r2, [r3, #4]
 8006cdc:	e008      	b.n	8006cf0 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2240      	movs	r2, #64	@ 0x40
 8006ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0ed      	b.n	8006ecc <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a46      	ldr	r2, [pc, #280]	@ (8006e10 <HAL_DMA_Init+0x658>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d072      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a45      	ldr	r2, [pc, #276]	@ (8006e14 <HAL_DMA_Init+0x65c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d06d      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a43      	ldr	r2, [pc, #268]	@ (8006e18 <HAL_DMA_Init+0x660>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d068      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a42      	ldr	r2, [pc, #264]	@ (8006e1c <HAL_DMA_Init+0x664>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d063      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a40      	ldr	r2, [pc, #256]	@ (8006e20 <HAL_DMA_Init+0x668>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d05e      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a3f      	ldr	r2, [pc, #252]	@ (8006e24 <HAL_DMA_Init+0x66c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d059      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a3d      	ldr	r2, [pc, #244]	@ (8006e28 <HAL_DMA_Init+0x670>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d054      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a3c      	ldr	r2, [pc, #240]	@ (8006e2c <HAL_DMA_Init+0x674>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d04f      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a3a      	ldr	r2, [pc, #232]	@ (8006e30 <HAL_DMA_Init+0x678>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d04a      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a39      	ldr	r2, [pc, #228]	@ (8006e34 <HAL_DMA_Init+0x67c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d045      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a37      	ldr	r2, [pc, #220]	@ (8006e38 <HAL_DMA_Init+0x680>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d040      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a36      	ldr	r2, [pc, #216]	@ (8006e3c <HAL_DMA_Init+0x684>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d03b      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a34      	ldr	r2, [pc, #208]	@ (8006e40 <HAL_DMA_Init+0x688>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d036      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a33      	ldr	r2, [pc, #204]	@ (8006e44 <HAL_DMA_Init+0x68c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d031      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a31      	ldr	r2, [pc, #196]	@ (8006e48 <HAL_DMA_Init+0x690>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d02c      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a30      	ldr	r2, [pc, #192]	@ (8006e4c <HAL_DMA_Init+0x694>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d027      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a13      	ldr	r2, [pc, #76]	@ (8006de4 <HAL_DMA_Init+0x62c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d022      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a12      	ldr	r2, [pc, #72]	@ (8006de8 <HAL_DMA_Init+0x630>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d01d      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a10      	ldr	r2, [pc, #64]	@ (8006dec <HAL_DMA_Init+0x634>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d018      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a0f      	ldr	r2, [pc, #60]	@ (8006df0 <HAL_DMA_Init+0x638>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d013      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8006df4 <HAL_DMA_Init+0x63c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00e      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8006df8 <HAL_DMA_Init+0x640>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d009      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8006dfc <HAL_DMA_Init+0x644>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <HAL_DMA_Init+0x628>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a09      	ldr	r2, [pc, #36]	@ (8006e00 <HAL_DMA_Init+0x648>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d137      	bne.n	8006e50 <HAL_DMA_Init+0x698>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e036      	b.n	8006e52 <HAL_DMA_Init+0x69a>
 8006de4:	58025408 	.word	0x58025408
 8006de8:	5802541c 	.word	0x5802541c
 8006dec:	58025430 	.word	0x58025430
 8006df0:	58025444 	.word	0x58025444
 8006df4:	58025458 	.word	0x58025458
 8006df8:	5802546c 	.word	0x5802546c
 8006dfc:	58025480 	.word	0x58025480
 8006e00:	58025494 	.word	0x58025494
 8006e04:	fffe000f 	.word	0xfffe000f
 8006e08:	a7fdabf8 	.word	0xa7fdabf8
 8006e0c:	cccccccd 	.word	0xcccccccd
 8006e10:	40020010 	.word	0x40020010
 8006e14:	40020028 	.word	0x40020028
 8006e18:	40020040 	.word	0x40020040
 8006e1c:	40020058 	.word	0x40020058
 8006e20:	40020070 	.word	0x40020070
 8006e24:	40020088 	.word	0x40020088
 8006e28:	400200a0 	.word	0x400200a0
 8006e2c:	400200b8 	.word	0x400200b8
 8006e30:	40020410 	.word	0x40020410
 8006e34:	40020428 	.word	0x40020428
 8006e38:	40020440 	.word	0x40020440
 8006e3c:	40020458 	.word	0x40020458
 8006e40:	40020470 	.word	0x40020470
 8006e44:	40020488 	.word	0x40020488
 8006e48:	400204a0 	.word	0x400204a0
 8006e4c:	400204b8 	.word	0x400204b8
 8006e50:	2300      	movs	r3, #0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d032      	beq.n	8006ebc <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f002 fa8a 	bl	8009370 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b80      	cmp	r3, #128	@ 0x80
 8006e62:	d102      	bne.n	8006e6a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006e7e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d010      	beq.n	8006eaa <HAL_DMA_Init+0x6f2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d80c      	bhi.n	8006eaa <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f002 fb07 	bl	80094a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006ea6:	605a      	str	r2, [r3, #4]
 8006ea8:	e008      	b.n	8006ebc <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e226      	b.n	800733e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_DMA_Start_IT+0x2a>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e21f      	b.n	800733e <HAL_DMA_Start_IT+0x46a>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	f040 820a 	bne.w	8007328 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a68      	ldr	r2, [pc, #416]	@ (80070c8 <HAL_DMA_Start_IT+0x1f4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d04a      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a66      	ldr	r2, [pc, #408]	@ (80070cc <HAL_DMA_Start_IT+0x1f8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d045      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a65      	ldr	r2, [pc, #404]	@ (80070d0 <HAL_DMA_Start_IT+0x1fc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d040      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a63      	ldr	r2, [pc, #396]	@ (80070d4 <HAL_DMA_Start_IT+0x200>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d03b      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a62      	ldr	r2, [pc, #392]	@ (80070d8 <HAL_DMA_Start_IT+0x204>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d036      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a60      	ldr	r2, [pc, #384]	@ (80070dc <HAL_DMA_Start_IT+0x208>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d031      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a5f      	ldr	r2, [pc, #380]	@ (80070e0 <HAL_DMA_Start_IT+0x20c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d02c      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80070e4 <HAL_DMA_Start_IT+0x210>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d027      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a5c      	ldr	r2, [pc, #368]	@ (80070e8 <HAL_DMA_Start_IT+0x214>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d022      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a5a      	ldr	r2, [pc, #360]	@ (80070ec <HAL_DMA_Start_IT+0x218>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d01d      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a59      	ldr	r2, [pc, #356]	@ (80070f0 <HAL_DMA_Start_IT+0x21c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d018      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a57      	ldr	r2, [pc, #348]	@ (80070f4 <HAL_DMA_Start_IT+0x220>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d013      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a56      	ldr	r2, [pc, #344]	@ (80070f8 <HAL_DMA_Start_IT+0x224>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a54      	ldr	r2, [pc, #336]	@ (80070fc <HAL_DMA_Start_IT+0x228>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d009      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a53      	ldr	r2, [pc, #332]	@ (8007100 <HAL_DMA_Start_IT+0x22c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_DMA_Start_IT+0xee>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a51      	ldr	r2, [pc, #324]	@ (8007104 <HAL_DMA_Start_IT+0x230>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d108      	bne.n	8006fd4 <HAL_DMA_Start_IT+0x100>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0201 	bic.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e007      	b.n	8006fe4 <HAL_DMA_Start_IT+0x110>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0201 	bic.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f001 feae 	bl	8008d4c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a34      	ldr	r2, [pc, #208]	@ (80070c8 <HAL_DMA_Start_IT+0x1f4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d04a      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a33      	ldr	r2, [pc, #204]	@ (80070cc <HAL_DMA_Start_IT+0x1f8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d045      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a31      	ldr	r2, [pc, #196]	@ (80070d0 <HAL_DMA_Start_IT+0x1fc>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d040      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a30      	ldr	r2, [pc, #192]	@ (80070d4 <HAL_DMA_Start_IT+0x200>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d03b      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a2e      	ldr	r2, [pc, #184]	@ (80070d8 <HAL_DMA_Start_IT+0x204>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d036      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a2d      	ldr	r2, [pc, #180]	@ (80070dc <HAL_DMA_Start_IT+0x208>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d031      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a2b      	ldr	r2, [pc, #172]	@ (80070e0 <HAL_DMA_Start_IT+0x20c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d02c      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a2a      	ldr	r2, [pc, #168]	@ (80070e4 <HAL_DMA_Start_IT+0x210>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d027      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a28      	ldr	r2, [pc, #160]	@ (80070e8 <HAL_DMA_Start_IT+0x214>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d022      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a27      	ldr	r2, [pc, #156]	@ (80070ec <HAL_DMA_Start_IT+0x218>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d01d      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a25      	ldr	r2, [pc, #148]	@ (80070f0 <HAL_DMA_Start_IT+0x21c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d018      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a24      	ldr	r2, [pc, #144]	@ (80070f4 <HAL_DMA_Start_IT+0x220>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d013      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a22      	ldr	r2, [pc, #136]	@ (80070f8 <HAL_DMA_Start_IT+0x224>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00e      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a21      	ldr	r2, [pc, #132]	@ (80070fc <HAL_DMA_Start_IT+0x228>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d009      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a1f      	ldr	r2, [pc, #124]	@ (8007100 <HAL_DMA_Start_IT+0x22c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_DMA_Start_IT+0x1bc>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a1e      	ldr	r2, [pc, #120]	@ (8007104 <HAL_DMA_Start_IT+0x230>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d101      	bne.n	8007094 <HAL_DMA_Start_IT+0x1c0>
 8007090:	2301      	movs	r3, #1
 8007092:	e000      	b.n	8007096 <HAL_DMA_Start_IT+0x1c2>
 8007094:	2300      	movs	r3, #0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d036      	beq.n	8007108 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f023 021e 	bic.w	r2, r3, #30
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0216 	orr.w	r2, r2, #22
 80070ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d03e      	beq.n	8007134 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0208 	orr.w	r2, r2, #8
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	e035      	b.n	8007134 <HAL_DMA_Start_IT+0x260>
 80070c8:	40020010 	.word	0x40020010
 80070cc:	40020028 	.word	0x40020028
 80070d0:	40020040 	.word	0x40020040
 80070d4:	40020058 	.word	0x40020058
 80070d8:	40020070 	.word	0x40020070
 80070dc:	40020088 	.word	0x40020088
 80070e0:	400200a0 	.word	0x400200a0
 80070e4:	400200b8 	.word	0x400200b8
 80070e8:	40020410 	.word	0x40020410
 80070ec:	40020428 	.word	0x40020428
 80070f0:	40020440 	.word	0x40020440
 80070f4:	40020458 	.word	0x40020458
 80070f8:	40020470 	.word	0x40020470
 80070fc:	40020488 	.word	0x40020488
 8007100:	400204a0 	.word	0x400204a0
 8007104:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f023 020e 	bic.w	r2, r3, #14
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 020a 	orr.w	r2, r2, #10
 800711a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d007      	beq.n	8007134 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f042 0204 	orr.w	r2, r2, #4
 8007132:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a83      	ldr	r2, [pc, #524]	@ (8007348 <HAL_DMA_Start_IT+0x474>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d072      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a82      	ldr	r2, [pc, #520]	@ (800734c <HAL_DMA_Start_IT+0x478>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d06d      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a80      	ldr	r2, [pc, #512]	@ (8007350 <HAL_DMA_Start_IT+0x47c>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d068      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a7f      	ldr	r2, [pc, #508]	@ (8007354 <HAL_DMA_Start_IT+0x480>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d063      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a7d      	ldr	r2, [pc, #500]	@ (8007358 <HAL_DMA_Start_IT+0x484>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d05e      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a7c      	ldr	r2, [pc, #496]	@ (800735c <HAL_DMA_Start_IT+0x488>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d059      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a7a      	ldr	r2, [pc, #488]	@ (8007360 <HAL_DMA_Start_IT+0x48c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d054      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a79      	ldr	r2, [pc, #484]	@ (8007364 <HAL_DMA_Start_IT+0x490>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d04f      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a77      	ldr	r2, [pc, #476]	@ (8007368 <HAL_DMA_Start_IT+0x494>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d04a      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a76      	ldr	r2, [pc, #472]	@ (800736c <HAL_DMA_Start_IT+0x498>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d045      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a74      	ldr	r2, [pc, #464]	@ (8007370 <HAL_DMA_Start_IT+0x49c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d040      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a73      	ldr	r2, [pc, #460]	@ (8007374 <HAL_DMA_Start_IT+0x4a0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d03b      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a71      	ldr	r2, [pc, #452]	@ (8007378 <HAL_DMA_Start_IT+0x4a4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d036      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a70      	ldr	r2, [pc, #448]	@ (800737c <HAL_DMA_Start_IT+0x4a8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d031      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a6e      	ldr	r2, [pc, #440]	@ (8007380 <HAL_DMA_Start_IT+0x4ac>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d02c      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a6d      	ldr	r2, [pc, #436]	@ (8007384 <HAL_DMA_Start_IT+0x4b0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d027      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a6b      	ldr	r2, [pc, #428]	@ (8007388 <HAL_DMA_Start_IT+0x4b4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d022      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a6a      	ldr	r2, [pc, #424]	@ (800738c <HAL_DMA_Start_IT+0x4b8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d01d      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a68      	ldr	r2, [pc, #416]	@ (8007390 <HAL_DMA_Start_IT+0x4bc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d018      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a67      	ldr	r2, [pc, #412]	@ (8007394 <HAL_DMA_Start_IT+0x4c0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d013      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a65      	ldr	r2, [pc, #404]	@ (8007398 <HAL_DMA_Start_IT+0x4c4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00e      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a64      	ldr	r2, [pc, #400]	@ (800739c <HAL_DMA_Start_IT+0x4c8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d009      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a62      	ldr	r2, [pc, #392]	@ (80073a0 <HAL_DMA_Start_IT+0x4cc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <HAL_DMA_Start_IT+0x350>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a61      	ldr	r2, [pc, #388]	@ (80073a4 <HAL_DMA_Start_IT+0x4d0>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d101      	bne.n	8007228 <HAL_DMA_Start_IT+0x354>
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <HAL_DMA_Start_IT+0x356>
 8007228:	2300      	movs	r3, #0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01a      	beq.n	8007264 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d007      	beq.n	800724c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800724a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800725e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007262:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a37      	ldr	r2, [pc, #220]	@ (8007348 <HAL_DMA_Start_IT+0x474>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d04a      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a36      	ldr	r2, [pc, #216]	@ (800734c <HAL_DMA_Start_IT+0x478>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d045      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a34      	ldr	r2, [pc, #208]	@ (8007350 <HAL_DMA_Start_IT+0x47c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d040      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a33      	ldr	r2, [pc, #204]	@ (8007354 <HAL_DMA_Start_IT+0x480>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d03b      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a31      	ldr	r2, [pc, #196]	@ (8007358 <HAL_DMA_Start_IT+0x484>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d036      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a30      	ldr	r2, [pc, #192]	@ (800735c <HAL_DMA_Start_IT+0x488>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d031      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007360 <HAL_DMA_Start_IT+0x48c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d02c      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a2d      	ldr	r2, [pc, #180]	@ (8007364 <HAL_DMA_Start_IT+0x490>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d027      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007368 <HAL_DMA_Start_IT+0x494>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d022      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a2a      	ldr	r2, [pc, #168]	@ (800736c <HAL_DMA_Start_IT+0x498>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d01d      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a28      	ldr	r2, [pc, #160]	@ (8007370 <HAL_DMA_Start_IT+0x49c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d018      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a27      	ldr	r2, [pc, #156]	@ (8007374 <HAL_DMA_Start_IT+0x4a0>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d013      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a25      	ldr	r2, [pc, #148]	@ (8007378 <HAL_DMA_Start_IT+0x4a4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00e      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a24      	ldr	r2, [pc, #144]	@ (800737c <HAL_DMA_Start_IT+0x4a8>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d009      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a22      	ldr	r2, [pc, #136]	@ (8007380 <HAL_DMA_Start_IT+0x4ac>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d004      	beq.n	8007304 <HAL_DMA_Start_IT+0x430>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a21      	ldr	r2, [pc, #132]	@ (8007384 <HAL_DMA_Start_IT+0x4b0>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d108      	bne.n	8007316 <HAL_DMA_Start_IT+0x442>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f042 0201 	orr.w	r2, r2, #1
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	e012      	b.n	800733c <HAL_DMA_Start_IT+0x468>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f042 0201 	orr.w	r2, r2, #1
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	e009      	b.n	800733c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800732e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800733c:	7dfb      	ldrb	r3, [r7, #23]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40020010 	.word	0x40020010
 800734c:	40020028 	.word	0x40020028
 8007350:	40020040 	.word	0x40020040
 8007354:	40020058 	.word	0x40020058
 8007358:	40020070 	.word	0x40020070
 800735c:	40020088 	.word	0x40020088
 8007360:	400200a0 	.word	0x400200a0
 8007364:	400200b8 	.word	0x400200b8
 8007368:	40020410 	.word	0x40020410
 800736c:	40020428 	.word	0x40020428
 8007370:	40020440 	.word	0x40020440
 8007374:	40020458 	.word	0x40020458
 8007378:	40020470 	.word	0x40020470
 800737c:	40020488 	.word	0x40020488
 8007380:	400204a0 	.word	0x400204a0
 8007384:	400204b8 	.word	0x400204b8
 8007388:	58025408 	.word	0x58025408
 800738c:	5802541c 	.word	0x5802541c
 8007390:	58025430 	.word	0x58025430
 8007394:	58025444 	.word	0x58025444
 8007398:	58025458 	.word	0x58025458
 800739c:	5802546c 	.word	0x5802546c
 80073a0:	58025480 	.word	0x58025480
 80073a4:	58025494 	.word	0x58025494

080073a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80073b0:	f7ff f87a 	bl	80064a8 <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e2dc      	b.n	800797a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d008      	beq.n	80073de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2280      	movs	r2, #128	@ 0x80
 80073d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e2cd      	b.n	800797a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a76      	ldr	r2, [pc, #472]	@ (80075bc <HAL_DMA_Abort+0x214>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d04a      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a74      	ldr	r2, [pc, #464]	@ (80075c0 <HAL_DMA_Abort+0x218>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d045      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a73      	ldr	r2, [pc, #460]	@ (80075c4 <HAL_DMA_Abort+0x21c>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d040      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a71      	ldr	r2, [pc, #452]	@ (80075c8 <HAL_DMA_Abort+0x220>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d03b      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a70      	ldr	r2, [pc, #448]	@ (80075cc <HAL_DMA_Abort+0x224>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d036      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a6e      	ldr	r2, [pc, #440]	@ (80075d0 <HAL_DMA_Abort+0x228>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d031      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a6d      	ldr	r2, [pc, #436]	@ (80075d4 <HAL_DMA_Abort+0x22c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d02c      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a6b      	ldr	r2, [pc, #428]	@ (80075d8 <HAL_DMA_Abort+0x230>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d027      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a6a      	ldr	r2, [pc, #424]	@ (80075dc <HAL_DMA_Abort+0x234>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d022      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a68      	ldr	r2, [pc, #416]	@ (80075e0 <HAL_DMA_Abort+0x238>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d01d      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a67      	ldr	r2, [pc, #412]	@ (80075e4 <HAL_DMA_Abort+0x23c>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d018      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a65      	ldr	r2, [pc, #404]	@ (80075e8 <HAL_DMA_Abort+0x240>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d013      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a64      	ldr	r2, [pc, #400]	@ (80075ec <HAL_DMA_Abort+0x244>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00e      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a62      	ldr	r2, [pc, #392]	@ (80075f0 <HAL_DMA_Abort+0x248>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d009      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a61      	ldr	r2, [pc, #388]	@ (80075f4 <HAL_DMA_Abort+0x24c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d004      	beq.n	800747e <HAL_DMA_Abort+0xd6>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a5f      	ldr	r2, [pc, #380]	@ (80075f8 <HAL_DMA_Abort+0x250>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d101      	bne.n	8007482 <HAL_DMA_Abort+0xda>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <HAL_DMA_Abort+0xdc>
 8007482:	2300      	movs	r3, #0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d013      	beq.n	80074b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 021e 	bic.w	r2, r2, #30
 8007496:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	695a      	ldr	r2, [r3, #20]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	e00a      	b.n	80074c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 020e 	bic.w	r2, r2, #14
 80074be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a3c      	ldr	r2, [pc, #240]	@ (80075bc <HAL_DMA_Abort+0x214>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d072      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a3a      	ldr	r2, [pc, #232]	@ (80075c0 <HAL_DMA_Abort+0x218>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d06d      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a39      	ldr	r2, [pc, #228]	@ (80075c4 <HAL_DMA_Abort+0x21c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d068      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a37      	ldr	r2, [pc, #220]	@ (80075c8 <HAL_DMA_Abort+0x220>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d063      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a36      	ldr	r2, [pc, #216]	@ (80075cc <HAL_DMA_Abort+0x224>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d05e      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a34      	ldr	r2, [pc, #208]	@ (80075d0 <HAL_DMA_Abort+0x228>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d059      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a33      	ldr	r2, [pc, #204]	@ (80075d4 <HAL_DMA_Abort+0x22c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d054      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a31      	ldr	r2, [pc, #196]	@ (80075d8 <HAL_DMA_Abort+0x230>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d04f      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a30      	ldr	r2, [pc, #192]	@ (80075dc <HAL_DMA_Abort+0x234>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d04a      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a2e      	ldr	r2, [pc, #184]	@ (80075e0 <HAL_DMA_Abort+0x238>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d045      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a2d      	ldr	r2, [pc, #180]	@ (80075e4 <HAL_DMA_Abort+0x23c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d040      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a2b      	ldr	r2, [pc, #172]	@ (80075e8 <HAL_DMA_Abort+0x240>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d03b      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a2a      	ldr	r2, [pc, #168]	@ (80075ec <HAL_DMA_Abort+0x244>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d036      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a28      	ldr	r2, [pc, #160]	@ (80075f0 <HAL_DMA_Abort+0x248>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d031      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a27      	ldr	r2, [pc, #156]	@ (80075f4 <HAL_DMA_Abort+0x24c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d02c      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a25      	ldr	r2, [pc, #148]	@ (80075f8 <HAL_DMA_Abort+0x250>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d027      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a24      	ldr	r2, [pc, #144]	@ (80075fc <HAL_DMA_Abort+0x254>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d022      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a22      	ldr	r2, [pc, #136]	@ (8007600 <HAL_DMA_Abort+0x258>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d01d      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a21      	ldr	r2, [pc, #132]	@ (8007604 <HAL_DMA_Abort+0x25c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d018      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1f      	ldr	r2, [pc, #124]	@ (8007608 <HAL_DMA_Abort+0x260>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d013      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1e      	ldr	r2, [pc, #120]	@ (800760c <HAL_DMA_Abort+0x264>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00e      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1c      	ldr	r2, [pc, #112]	@ (8007610 <HAL_DMA_Abort+0x268>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d009      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007614 <HAL_DMA_Abort+0x26c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d004      	beq.n	80075b6 <HAL_DMA_Abort+0x20e>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a19      	ldr	r2, [pc, #100]	@ (8007618 <HAL_DMA_Abort+0x270>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d132      	bne.n	800761c <HAL_DMA_Abort+0x274>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e031      	b.n	800761e <HAL_DMA_Abort+0x276>
 80075ba:	bf00      	nop
 80075bc:	40020010 	.word	0x40020010
 80075c0:	40020028 	.word	0x40020028
 80075c4:	40020040 	.word	0x40020040
 80075c8:	40020058 	.word	0x40020058
 80075cc:	40020070 	.word	0x40020070
 80075d0:	40020088 	.word	0x40020088
 80075d4:	400200a0 	.word	0x400200a0
 80075d8:	400200b8 	.word	0x400200b8
 80075dc:	40020410 	.word	0x40020410
 80075e0:	40020428 	.word	0x40020428
 80075e4:	40020440 	.word	0x40020440
 80075e8:	40020458 	.word	0x40020458
 80075ec:	40020470 	.word	0x40020470
 80075f0:	40020488 	.word	0x40020488
 80075f4:	400204a0 	.word	0x400204a0
 80075f8:	400204b8 	.word	0x400204b8
 80075fc:	58025408 	.word	0x58025408
 8007600:	5802541c 	.word	0x5802541c
 8007604:	58025430 	.word	0x58025430
 8007608:	58025444 	.word	0x58025444
 800760c:	58025458 	.word	0x58025458
 8007610:	5802546c 	.word	0x5802546c
 8007614:	58025480 	.word	0x58025480
 8007618:	58025494 	.word	0x58025494
 800761c:	2300      	movs	r3, #0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d007      	beq.n	8007632 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800762c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007630:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a6d      	ldr	r2, [pc, #436]	@ (80077ec <HAL_DMA_Abort+0x444>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d04a      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a6b      	ldr	r2, [pc, #428]	@ (80077f0 <HAL_DMA_Abort+0x448>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d045      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a6a      	ldr	r2, [pc, #424]	@ (80077f4 <HAL_DMA_Abort+0x44c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d040      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a68      	ldr	r2, [pc, #416]	@ (80077f8 <HAL_DMA_Abort+0x450>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d03b      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a67      	ldr	r2, [pc, #412]	@ (80077fc <HAL_DMA_Abort+0x454>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d036      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a65      	ldr	r2, [pc, #404]	@ (8007800 <HAL_DMA_Abort+0x458>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d031      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a64      	ldr	r2, [pc, #400]	@ (8007804 <HAL_DMA_Abort+0x45c>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d02c      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a62      	ldr	r2, [pc, #392]	@ (8007808 <HAL_DMA_Abort+0x460>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d027      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a61      	ldr	r2, [pc, #388]	@ (800780c <HAL_DMA_Abort+0x464>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d022      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a5f      	ldr	r2, [pc, #380]	@ (8007810 <HAL_DMA_Abort+0x468>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d01d      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a5e      	ldr	r2, [pc, #376]	@ (8007814 <HAL_DMA_Abort+0x46c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d018      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a5c      	ldr	r2, [pc, #368]	@ (8007818 <HAL_DMA_Abort+0x470>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a5b      	ldr	r2, [pc, #364]	@ (800781c <HAL_DMA_Abort+0x474>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00e      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a59      	ldr	r2, [pc, #356]	@ (8007820 <HAL_DMA_Abort+0x478>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d009      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a58      	ldr	r2, [pc, #352]	@ (8007824 <HAL_DMA_Abort+0x47c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d004      	beq.n	80076d2 <HAL_DMA_Abort+0x32a>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a56      	ldr	r2, [pc, #344]	@ (8007828 <HAL_DMA_Abort+0x480>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d108      	bne.n	80076e4 <HAL_DMA_Abort+0x33c>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0201 	bic.w	r2, r2, #1
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	e007      	b.n	80076f4 <HAL_DMA_Abort+0x34c>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 0201 	bic.w	r2, r2, #1
 80076f2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80076f4:	e013      	b.n	800771e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076f6:	f7fe fed7 	bl	80064a8 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b05      	cmp	r3, #5
 8007702:	d90c      	bls.n	800771e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2203      	movs	r2, #3
 800770e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e12d      	b.n	800797a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e5      	bne.n	80076f6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a2f      	ldr	r2, [pc, #188]	@ (80077ec <HAL_DMA_Abort+0x444>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d04a      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a2d      	ldr	r2, [pc, #180]	@ (80077f0 <HAL_DMA_Abort+0x448>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d045      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a2c      	ldr	r2, [pc, #176]	@ (80077f4 <HAL_DMA_Abort+0x44c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d040      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a2a      	ldr	r2, [pc, #168]	@ (80077f8 <HAL_DMA_Abort+0x450>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d03b      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a29      	ldr	r2, [pc, #164]	@ (80077fc <HAL_DMA_Abort+0x454>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d036      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a27      	ldr	r2, [pc, #156]	@ (8007800 <HAL_DMA_Abort+0x458>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d031      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a26      	ldr	r2, [pc, #152]	@ (8007804 <HAL_DMA_Abort+0x45c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d02c      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a24      	ldr	r2, [pc, #144]	@ (8007808 <HAL_DMA_Abort+0x460>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d027      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a23      	ldr	r2, [pc, #140]	@ (800780c <HAL_DMA_Abort+0x464>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d022      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a21      	ldr	r2, [pc, #132]	@ (8007810 <HAL_DMA_Abort+0x468>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d01d      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a20      	ldr	r2, [pc, #128]	@ (8007814 <HAL_DMA_Abort+0x46c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d018      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a1e      	ldr	r2, [pc, #120]	@ (8007818 <HAL_DMA_Abort+0x470>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d013      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a1d      	ldr	r2, [pc, #116]	@ (800781c <HAL_DMA_Abort+0x474>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00e      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007820 <HAL_DMA_Abort+0x478>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d009      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007824 <HAL_DMA_Abort+0x47c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <HAL_DMA_Abort+0x422>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a18      	ldr	r2, [pc, #96]	@ (8007828 <HAL_DMA_Abort+0x480>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d101      	bne.n	80077ce <HAL_DMA_Abort+0x426>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <HAL_DMA_Abort+0x428>
 80077ce:	2300      	movs	r3, #0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d02b      	beq.n	800782c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077d8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077de:	f003 031f 	and.w	r3, r3, #31
 80077e2:	223f      	movs	r2, #63	@ 0x3f
 80077e4:	409a      	lsls	r2, r3
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	609a      	str	r2, [r3, #8]
 80077ea:	e02a      	b.n	8007842 <HAL_DMA_Abort+0x49a>
 80077ec:	40020010 	.word	0x40020010
 80077f0:	40020028 	.word	0x40020028
 80077f4:	40020040 	.word	0x40020040
 80077f8:	40020058 	.word	0x40020058
 80077fc:	40020070 	.word	0x40020070
 8007800:	40020088 	.word	0x40020088
 8007804:	400200a0 	.word	0x400200a0
 8007808:	400200b8 	.word	0x400200b8
 800780c:	40020410 	.word	0x40020410
 8007810:	40020428 	.word	0x40020428
 8007814:	40020440 	.word	0x40020440
 8007818:	40020458 	.word	0x40020458
 800781c:	40020470 	.word	0x40020470
 8007820:	40020488 	.word	0x40020488
 8007824:	400204a0 	.word	0x400204a0
 8007828:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007830:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	2201      	movs	r2, #1
 800783c:	409a      	lsls	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a4f      	ldr	r2, [pc, #316]	@ (8007984 <HAL_DMA_Abort+0x5dc>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d072      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a4d      	ldr	r2, [pc, #308]	@ (8007988 <HAL_DMA_Abort+0x5e0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d06d      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a4c      	ldr	r2, [pc, #304]	@ (800798c <HAL_DMA_Abort+0x5e4>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d068      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a4a      	ldr	r2, [pc, #296]	@ (8007990 <HAL_DMA_Abort+0x5e8>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d063      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a49      	ldr	r2, [pc, #292]	@ (8007994 <HAL_DMA_Abort+0x5ec>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d05e      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a47      	ldr	r2, [pc, #284]	@ (8007998 <HAL_DMA_Abort+0x5f0>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d059      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a46      	ldr	r2, [pc, #280]	@ (800799c <HAL_DMA_Abort+0x5f4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d054      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a44      	ldr	r2, [pc, #272]	@ (80079a0 <HAL_DMA_Abort+0x5f8>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d04f      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a43      	ldr	r2, [pc, #268]	@ (80079a4 <HAL_DMA_Abort+0x5fc>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d04a      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a41      	ldr	r2, [pc, #260]	@ (80079a8 <HAL_DMA_Abort+0x600>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d045      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a40      	ldr	r2, [pc, #256]	@ (80079ac <HAL_DMA_Abort+0x604>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d040      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a3e      	ldr	r2, [pc, #248]	@ (80079b0 <HAL_DMA_Abort+0x608>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d03b      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a3d      	ldr	r2, [pc, #244]	@ (80079b4 <HAL_DMA_Abort+0x60c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d036      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a3b      	ldr	r2, [pc, #236]	@ (80079b8 <HAL_DMA_Abort+0x610>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d031      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a3a      	ldr	r2, [pc, #232]	@ (80079bc <HAL_DMA_Abort+0x614>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d02c      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a38      	ldr	r2, [pc, #224]	@ (80079c0 <HAL_DMA_Abort+0x618>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d027      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a37      	ldr	r2, [pc, #220]	@ (80079c4 <HAL_DMA_Abort+0x61c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d022      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a35      	ldr	r2, [pc, #212]	@ (80079c8 <HAL_DMA_Abort+0x620>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d01d      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a34      	ldr	r2, [pc, #208]	@ (80079cc <HAL_DMA_Abort+0x624>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d018      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a32      	ldr	r2, [pc, #200]	@ (80079d0 <HAL_DMA_Abort+0x628>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d013      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a31      	ldr	r2, [pc, #196]	@ (80079d4 <HAL_DMA_Abort+0x62c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00e      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a2f      	ldr	r2, [pc, #188]	@ (80079d8 <HAL_DMA_Abort+0x630>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d009      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a2e      	ldr	r2, [pc, #184]	@ (80079dc <HAL_DMA_Abort+0x634>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d004      	beq.n	8007932 <HAL_DMA_Abort+0x58a>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a2c      	ldr	r2, [pc, #176]	@ (80079e0 <HAL_DMA_Abort+0x638>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d101      	bne.n	8007936 <HAL_DMA_Abort+0x58e>
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <HAL_DMA_Abort+0x590>
 8007936:	2300      	movs	r3, #0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d015      	beq.n	8007968 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007944:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00c      	beq.n	8007968 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800795c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007966:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	40020010 	.word	0x40020010
 8007988:	40020028 	.word	0x40020028
 800798c:	40020040 	.word	0x40020040
 8007990:	40020058 	.word	0x40020058
 8007994:	40020070 	.word	0x40020070
 8007998:	40020088 	.word	0x40020088
 800799c:	400200a0 	.word	0x400200a0
 80079a0:	400200b8 	.word	0x400200b8
 80079a4:	40020410 	.word	0x40020410
 80079a8:	40020428 	.word	0x40020428
 80079ac:	40020440 	.word	0x40020440
 80079b0:	40020458 	.word	0x40020458
 80079b4:	40020470 	.word	0x40020470
 80079b8:	40020488 	.word	0x40020488
 80079bc:	400204a0 	.word	0x400204a0
 80079c0:	400204b8 	.word	0x400204b8
 80079c4:	58025408 	.word	0x58025408
 80079c8:	5802541c 	.word	0x5802541c
 80079cc:	58025430 	.word	0x58025430
 80079d0:	58025444 	.word	0x58025444
 80079d4:	58025458 	.word	0x58025458
 80079d8:	5802546c 	.word	0x5802546c
 80079dc:	58025480 	.word	0x58025480
 80079e0:	58025494 	.word	0x58025494

080079e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e237      	b.n	8007e66 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d004      	beq.n	8007a0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2280      	movs	r2, #128	@ 0x80
 8007a06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e22c      	b.n	8007e66 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a5c      	ldr	r2, [pc, #368]	@ (8007b84 <HAL_DMA_Abort_IT+0x1a0>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d04a      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a5b      	ldr	r2, [pc, #364]	@ (8007b88 <HAL_DMA_Abort_IT+0x1a4>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d045      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a59      	ldr	r2, [pc, #356]	@ (8007b8c <HAL_DMA_Abort_IT+0x1a8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d040      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a58      	ldr	r2, [pc, #352]	@ (8007b90 <HAL_DMA_Abort_IT+0x1ac>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d03b      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a56      	ldr	r2, [pc, #344]	@ (8007b94 <HAL_DMA_Abort_IT+0x1b0>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d036      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a55      	ldr	r2, [pc, #340]	@ (8007b98 <HAL_DMA_Abort_IT+0x1b4>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d031      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a53      	ldr	r2, [pc, #332]	@ (8007b9c <HAL_DMA_Abort_IT+0x1b8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d02c      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a52      	ldr	r2, [pc, #328]	@ (8007ba0 <HAL_DMA_Abort_IT+0x1bc>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d027      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a50      	ldr	r2, [pc, #320]	@ (8007ba4 <HAL_DMA_Abort_IT+0x1c0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d022      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a4f      	ldr	r2, [pc, #316]	@ (8007ba8 <HAL_DMA_Abort_IT+0x1c4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d01d      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a4d      	ldr	r2, [pc, #308]	@ (8007bac <HAL_DMA_Abort_IT+0x1c8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d018      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a4c      	ldr	r2, [pc, #304]	@ (8007bb0 <HAL_DMA_Abort_IT+0x1cc>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d013      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a4a      	ldr	r2, [pc, #296]	@ (8007bb4 <HAL_DMA_Abort_IT+0x1d0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00e      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a49      	ldr	r2, [pc, #292]	@ (8007bb8 <HAL_DMA_Abort_IT+0x1d4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d009      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a47      	ldr	r2, [pc, #284]	@ (8007bbc <HAL_DMA_Abort_IT+0x1d8>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d004      	beq.n	8007aac <HAL_DMA_Abort_IT+0xc8>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a46      	ldr	r2, [pc, #280]	@ (8007bc0 <HAL_DMA_Abort_IT+0x1dc>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d101      	bne.n	8007ab0 <HAL_DMA_Abort_IT+0xcc>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <HAL_DMA_Abort_IT+0xce>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8086 	beq.w	8007bc4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2204      	movs	r2, #4
 8007abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8007b84 <HAL_DMA_Abort_IT+0x1a0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d04a      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a2e      	ldr	r2, [pc, #184]	@ (8007b88 <HAL_DMA_Abort_IT+0x1a4>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d045      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8007b8c <HAL_DMA_Abort_IT+0x1a8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d040      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8007b90 <HAL_DMA_Abort_IT+0x1ac>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d03b      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a29      	ldr	r2, [pc, #164]	@ (8007b94 <HAL_DMA_Abort_IT+0x1b0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d036      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a28      	ldr	r2, [pc, #160]	@ (8007b98 <HAL_DMA_Abort_IT+0x1b4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d031      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a26      	ldr	r2, [pc, #152]	@ (8007b9c <HAL_DMA_Abort_IT+0x1b8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d02c      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a25      	ldr	r2, [pc, #148]	@ (8007ba0 <HAL_DMA_Abort_IT+0x1bc>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d027      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a23      	ldr	r2, [pc, #140]	@ (8007ba4 <HAL_DMA_Abort_IT+0x1c0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d022      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a22      	ldr	r2, [pc, #136]	@ (8007ba8 <HAL_DMA_Abort_IT+0x1c4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d01d      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a20      	ldr	r2, [pc, #128]	@ (8007bac <HAL_DMA_Abort_IT+0x1c8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d018      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a1f      	ldr	r2, [pc, #124]	@ (8007bb0 <HAL_DMA_Abort_IT+0x1cc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d013      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb4 <HAL_DMA_Abort_IT+0x1d0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00e      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a1c      	ldr	r2, [pc, #112]	@ (8007bb8 <HAL_DMA_Abort_IT+0x1d4>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d009      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a1a      	ldr	r2, [pc, #104]	@ (8007bbc <HAL_DMA_Abort_IT+0x1d8>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d004      	beq.n	8007b60 <HAL_DMA_Abort_IT+0x17c>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a19      	ldr	r2, [pc, #100]	@ (8007bc0 <HAL_DMA_Abort_IT+0x1dc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d108      	bne.n	8007b72 <HAL_DMA_Abort_IT+0x18e>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0201 	bic.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	e178      	b.n	8007e64 <HAL_DMA_Abort_IT+0x480>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 0201 	bic.w	r2, r2, #1
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	e16f      	b.n	8007e64 <HAL_DMA_Abort_IT+0x480>
 8007b84:	40020010 	.word	0x40020010
 8007b88:	40020028 	.word	0x40020028
 8007b8c:	40020040 	.word	0x40020040
 8007b90:	40020058 	.word	0x40020058
 8007b94:	40020070 	.word	0x40020070
 8007b98:	40020088 	.word	0x40020088
 8007b9c:	400200a0 	.word	0x400200a0
 8007ba0:	400200b8 	.word	0x400200b8
 8007ba4:	40020410 	.word	0x40020410
 8007ba8:	40020428 	.word	0x40020428
 8007bac:	40020440 	.word	0x40020440
 8007bb0:	40020458 	.word	0x40020458
 8007bb4:	40020470 	.word	0x40020470
 8007bb8:	40020488 	.word	0x40020488
 8007bbc:	400204a0 	.word	0x400204a0
 8007bc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 020e 	bic.w	r2, r2, #14
 8007bd2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a6c      	ldr	r2, [pc, #432]	@ (8007d8c <HAL_DMA_Abort_IT+0x3a8>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d04a      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a6b      	ldr	r2, [pc, #428]	@ (8007d90 <HAL_DMA_Abort_IT+0x3ac>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d045      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a69      	ldr	r2, [pc, #420]	@ (8007d94 <HAL_DMA_Abort_IT+0x3b0>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d040      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a68      	ldr	r2, [pc, #416]	@ (8007d98 <HAL_DMA_Abort_IT+0x3b4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d03b      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a66      	ldr	r2, [pc, #408]	@ (8007d9c <HAL_DMA_Abort_IT+0x3b8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d036      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a65      	ldr	r2, [pc, #404]	@ (8007da0 <HAL_DMA_Abort_IT+0x3bc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d031      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a63      	ldr	r2, [pc, #396]	@ (8007da4 <HAL_DMA_Abort_IT+0x3c0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d02c      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a62      	ldr	r2, [pc, #392]	@ (8007da8 <HAL_DMA_Abort_IT+0x3c4>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d027      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a60      	ldr	r2, [pc, #384]	@ (8007dac <HAL_DMA_Abort_IT+0x3c8>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d022      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a5f      	ldr	r2, [pc, #380]	@ (8007db0 <HAL_DMA_Abort_IT+0x3cc>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d01d      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a5d      	ldr	r2, [pc, #372]	@ (8007db4 <HAL_DMA_Abort_IT+0x3d0>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d018      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a5c      	ldr	r2, [pc, #368]	@ (8007db8 <HAL_DMA_Abort_IT+0x3d4>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d013      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a5a      	ldr	r2, [pc, #360]	@ (8007dbc <HAL_DMA_Abort_IT+0x3d8>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00e      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a59      	ldr	r2, [pc, #356]	@ (8007dc0 <HAL_DMA_Abort_IT+0x3dc>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d009      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a57      	ldr	r2, [pc, #348]	@ (8007dc4 <HAL_DMA_Abort_IT+0x3e0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d004      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x290>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a56      	ldr	r2, [pc, #344]	@ (8007dc8 <HAL_DMA_Abort_IT+0x3e4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d108      	bne.n	8007c86 <HAL_DMA_Abort_IT+0x2a2>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0201 	bic.w	r2, r2, #1
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	e007      	b.n	8007c96 <HAL_DMA_Abort_IT+0x2b2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0201 	bic.w	r2, r2, #1
 8007c94:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a3c      	ldr	r2, [pc, #240]	@ (8007d8c <HAL_DMA_Abort_IT+0x3a8>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d072      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8007d90 <HAL_DMA_Abort_IT+0x3ac>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d06d      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a39      	ldr	r2, [pc, #228]	@ (8007d94 <HAL_DMA_Abort_IT+0x3b0>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d068      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a37      	ldr	r2, [pc, #220]	@ (8007d98 <HAL_DMA_Abort_IT+0x3b4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d063      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a36      	ldr	r2, [pc, #216]	@ (8007d9c <HAL_DMA_Abort_IT+0x3b8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d05e      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a34      	ldr	r2, [pc, #208]	@ (8007da0 <HAL_DMA_Abort_IT+0x3bc>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d059      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a33      	ldr	r2, [pc, #204]	@ (8007da4 <HAL_DMA_Abort_IT+0x3c0>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d054      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a31      	ldr	r2, [pc, #196]	@ (8007da8 <HAL_DMA_Abort_IT+0x3c4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d04f      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a30      	ldr	r2, [pc, #192]	@ (8007dac <HAL_DMA_Abort_IT+0x3c8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d04a      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8007db0 <HAL_DMA_Abort_IT+0x3cc>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d045      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8007db4 <HAL_DMA_Abort_IT+0x3d0>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d040      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a2b      	ldr	r2, [pc, #172]	@ (8007db8 <HAL_DMA_Abort_IT+0x3d4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d03b      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a2a      	ldr	r2, [pc, #168]	@ (8007dbc <HAL_DMA_Abort_IT+0x3d8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d036      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a28      	ldr	r2, [pc, #160]	@ (8007dc0 <HAL_DMA_Abort_IT+0x3dc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d031      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a27      	ldr	r2, [pc, #156]	@ (8007dc4 <HAL_DMA_Abort_IT+0x3e0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d02c      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a25      	ldr	r2, [pc, #148]	@ (8007dc8 <HAL_DMA_Abort_IT+0x3e4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d027      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a24      	ldr	r2, [pc, #144]	@ (8007dcc <HAL_DMA_Abort_IT+0x3e8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d022      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a22      	ldr	r2, [pc, #136]	@ (8007dd0 <HAL_DMA_Abort_IT+0x3ec>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d01d      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a21      	ldr	r2, [pc, #132]	@ (8007dd4 <HAL_DMA_Abort_IT+0x3f0>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d018      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd8 <HAL_DMA_Abort_IT+0x3f4>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d013      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1e      	ldr	r2, [pc, #120]	@ (8007ddc <HAL_DMA_Abort_IT+0x3f8>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00e      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8007de0 <HAL_DMA_Abort_IT+0x3fc>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d009      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1b      	ldr	r2, [pc, #108]	@ (8007de4 <HAL_DMA_Abort_IT+0x400>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d004      	beq.n	8007d86 <HAL_DMA_Abort_IT+0x3a2>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a19      	ldr	r2, [pc, #100]	@ (8007de8 <HAL_DMA_Abort_IT+0x404>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d132      	bne.n	8007dec <HAL_DMA_Abort_IT+0x408>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e031      	b.n	8007dee <HAL_DMA_Abort_IT+0x40a>
 8007d8a:	bf00      	nop
 8007d8c:	40020010 	.word	0x40020010
 8007d90:	40020028 	.word	0x40020028
 8007d94:	40020040 	.word	0x40020040
 8007d98:	40020058 	.word	0x40020058
 8007d9c:	40020070 	.word	0x40020070
 8007da0:	40020088 	.word	0x40020088
 8007da4:	400200a0 	.word	0x400200a0
 8007da8:	400200b8 	.word	0x400200b8
 8007dac:	40020410 	.word	0x40020410
 8007db0:	40020428 	.word	0x40020428
 8007db4:	40020440 	.word	0x40020440
 8007db8:	40020458 	.word	0x40020458
 8007dbc:	40020470 	.word	0x40020470
 8007dc0:	40020488 	.word	0x40020488
 8007dc4:	400204a0 	.word	0x400204a0
 8007dc8:	400204b8 	.word	0x400204b8
 8007dcc:	58025408 	.word	0x58025408
 8007dd0:	5802541c 	.word	0x5802541c
 8007dd4:	58025430 	.word	0x58025430
 8007dd8:	58025444 	.word	0x58025444
 8007ddc:	58025458 	.word	0x58025458
 8007de0:	5802546c 	.word	0x5802546c
 8007de4:	58025480 	.word	0x58025480
 8007de8:	58025494 	.word	0x58025494
 8007dec:	2300      	movs	r3, #0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d028      	beq.n	8007e44 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e00:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e06:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e0c:	f003 031f 	and.w	r3, r3, #31
 8007e10:	2201      	movs	r2, #1
 8007e12:	409a      	lsls	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007e20:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00c      	beq.n	8007e44 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e38:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e42:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop

08007e70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08a      	sub	sp, #40	@ 0x28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e7c:	4b67      	ldr	r3, [pc, #412]	@ (800801c <HAL_DMA_IRQHandler+0x1ac>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a67      	ldr	r2, [pc, #412]	@ (8008020 <HAL_DMA_IRQHandler+0x1b0>)
 8007e82:	fba2 2303 	umull	r2, r3, r2, r3
 8007e86:	0a9b      	lsrs	r3, r3, #10
 8007e88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8008024 <HAL_DMA_IRQHandler+0x1b4>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d04a      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8008028 <HAL_DMA_IRQHandler+0x1b8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d045      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a5c      	ldr	r2, [pc, #368]	@ (800802c <HAL_DMA_IRQHandler+0x1bc>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d040      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a5a      	ldr	r2, [pc, #360]	@ (8008030 <HAL_DMA_IRQHandler+0x1c0>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d03b      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a59      	ldr	r2, [pc, #356]	@ (8008034 <HAL_DMA_IRQHandler+0x1c4>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d036      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a57      	ldr	r2, [pc, #348]	@ (8008038 <HAL_DMA_IRQHandler+0x1c8>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d031      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a56      	ldr	r2, [pc, #344]	@ (800803c <HAL_DMA_IRQHandler+0x1cc>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d02c      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a54      	ldr	r2, [pc, #336]	@ (8008040 <HAL_DMA_IRQHandler+0x1d0>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d027      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a53      	ldr	r2, [pc, #332]	@ (8008044 <HAL_DMA_IRQHandler+0x1d4>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d022      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a51      	ldr	r2, [pc, #324]	@ (8008048 <HAL_DMA_IRQHandler+0x1d8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d01d      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a50      	ldr	r2, [pc, #320]	@ (800804c <HAL_DMA_IRQHandler+0x1dc>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d018      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a4e      	ldr	r2, [pc, #312]	@ (8008050 <HAL_DMA_IRQHandler+0x1e0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d013      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a4d      	ldr	r2, [pc, #308]	@ (8008054 <HAL_DMA_IRQHandler+0x1e4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00e      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a4b      	ldr	r2, [pc, #300]	@ (8008058 <HAL_DMA_IRQHandler+0x1e8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d009      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a4a      	ldr	r2, [pc, #296]	@ (800805c <HAL_DMA_IRQHandler+0x1ec>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d004      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xd2>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a48      	ldr	r2, [pc, #288]	@ (8008060 <HAL_DMA_IRQHandler+0x1f0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d101      	bne.n	8007f46 <HAL_DMA_IRQHandler+0xd6>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e000      	b.n	8007f48 <HAL_DMA_IRQHandler+0xd8>
 8007f46:	2300      	movs	r3, #0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 842b 	beq.w	80087a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f52:	f003 031f 	and.w	r3, r3, #31
 8007f56:	2208      	movs	r2, #8
 8007f58:	409a      	lsls	r2, r3
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 80a2 	beq.w	80080a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a2e      	ldr	r2, [pc, #184]	@ (8008024 <HAL_DMA_IRQHandler+0x1b4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d04a      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a2d      	ldr	r2, [pc, #180]	@ (8008028 <HAL_DMA_IRQHandler+0x1b8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d045      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800802c <HAL_DMA_IRQHandler+0x1bc>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d040      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a2a      	ldr	r2, [pc, #168]	@ (8008030 <HAL_DMA_IRQHandler+0x1c0>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d03b      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a28      	ldr	r2, [pc, #160]	@ (8008034 <HAL_DMA_IRQHandler+0x1c4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d036      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a27      	ldr	r2, [pc, #156]	@ (8008038 <HAL_DMA_IRQHandler+0x1c8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d031      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a25      	ldr	r2, [pc, #148]	@ (800803c <HAL_DMA_IRQHandler+0x1cc>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d02c      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a24      	ldr	r2, [pc, #144]	@ (8008040 <HAL_DMA_IRQHandler+0x1d0>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d027      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a22      	ldr	r2, [pc, #136]	@ (8008044 <HAL_DMA_IRQHandler+0x1d4>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d022      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a21      	ldr	r2, [pc, #132]	@ (8008048 <HAL_DMA_IRQHandler+0x1d8>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d01d      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800804c <HAL_DMA_IRQHandler+0x1dc>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d018      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8008050 <HAL_DMA_IRQHandler+0x1e0>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d013      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8008054 <HAL_DMA_IRQHandler+0x1e4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00e      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a1b      	ldr	r2, [pc, #108]	@ (8008058 <HAL_DMA_IRQHandler+0x1e8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d009      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a19      	ldr	r2, [pc, #100]	@ (800805c <HAL_DMA_IRQHandler+0x1ec>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d004      	beq.n	8008004 <HAL_DMA_IRQHandler+0x194>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a18      	ldr	r2, [pc, #96]	@ (8008060 <HAL_DMA_IRQHandler+0x1f0>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d12f      	bne.n	8008064 <HAL_DMA_IRQHandler+0x1f4>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	bf14      	ite	ne
 8008012:	2301      	movne	r3, #1
 8008014:	2300      	moveq	r3, #0
 8008016:	b2db      	uxtb	r3, r3
 8008018:	e02e      	b.n	8008078 <HAL_DMA_IRQHandler+0x208>
 800801a:	bf00      	nop
 800801c:	24000000 	.word	0x24000000
 8008020:	1b4e81b5 	.word	0x1b4e81b5
 8008024:	40020010 	.word	0x40020010
 8008028:	40020028 	.word	0x40020028
 800802c:	40020040 	.word	0x40020040
 8008030:	40020058 	.word	0x40020058
 8008034:	40020070 	.word	0x40020070
 8008038:	40020088 	.word	0x40020088
 800803c:	400200a0 	.word	0x400200a0
 8008040:	400200b8 	.word	0x400200b8
 8008044:	40020410 	.word	0x40020410
 8008048:	40020428 	.word	0x40020428
 800804c:	40020440 	.word	0x40020440
 8008050:	40020458 	.word	0x40020458
 8008054:	40020470 	.word	0x40020470
 8008058:	40020488 	.word	0x40020488
 800805c:	400204a0 	.word	0x400204a0
 8008060:	400204b8 	.word	0x400204b8
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0308 	and.w	r3, r3, #8
 800806e:	2b00      	cmp	r3, #0
 8008070:	bf14      	ite	ne
 8008072:	2301      	movne	r3, #1
 8008074:	2300      	moveq	r3, #0
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d015      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0204 	bic.w	r2, r2, #4
 800808a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008090:	f003 031f 	and.w	r3, r3, #31
 8008094:	2208      	movs	r2, #8
 8008096:	409a      	lsls	r2, r3
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a0:	f043 0201 	orr.w	r2, r3, #1
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080ac:	f003 031f 	and.w	r3, r3, #31
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	fa22 f303 	lsr.w	r3, r2, r3
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d06e      	beq.n	800819c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a69      	ldr	r2, [pc, #420]	@ (8008268 <HAL_DMA_IRQHandler+0x3f8>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d04a      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a67      	ldr	r2, [pc, #412]	@ (800826c <HAL_DMA_IRQHandler+0x3fc>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d045      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a66      	ldr	r2, [pc, #408]	@ (8008270 <HAL_DMA_IRQHandler+0x400>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d040      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a64      	ldr	r2, [pc, #400]	@ (8008274 <HAL_DMA_IRQHandler+0x404>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d03b      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a63      	ldr	r2, [pc, #396]	@ (8008278 <HAL_DMA_IRQHandler+0x408>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d036      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a61      	ldr	r2, [pc, #388]	@ (800827c <HAL_DMA_IRQHandler+0x40c>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d031      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a60      	ldr	r2, [pc, #384]	@ (8008280 <HAL_DMA_IRQHandler+0x410>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d02c      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a5e      	ldr	r2, [pc, #376]	@ (8008284 <HAL_DMA_IRQHandler+0x414>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d027      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a5d      	ldr	r2, [pc, #372]	@ (8008288 <HAL_DMA_IRQHandler+0x418>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d022      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a5b      	ldr	r2, [pc, #364]	@ (800828c <HAL_DMA_IRQHandler+0x41c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d01d      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a5a      	ldr	r2, [pc, #360]	@ (8008290 <HAL_DMA_IRQHandler+0x420>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d018      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a58      	ldr	r2, [pc, #352]	@ (8008294 <HAL_DMA_IRQHandler+0x424>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d013      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a57      	ldr	r2, [pc, #348]	@ (8008298 <HAL_DMA_IRQHandler+0x428>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d00e      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a55      	ldr	r2, [pc, #340]	@ (800829c <HAL_DMA_IRQHandler+0x42c>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d009      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a54      	ldr	r2, [pc, #336]	@ (80082a0 <HAL_DMA_IRQHandler+0x430>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d004      	beq.n	800815e <HAL_DMA_IRQHandler+0x2ee>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a52      	ldr	r2, [pc, #328]	@ (80082a4 <HAL_DMA_IRQHandler+0x434>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d10a      	bne.n	8008174 <HAL_DMA_IRQHandler+0x304>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008168:	2b00      	cmp	r3, #0
 800816a:	bf14      	ite	ne
 800816c:	2301      	movne	r3, #1
 800816e:	2300      	moveq	r3, #0
 8008170:	b2db      	uxtb	r3, r3
 8008172:	e003      	b.n	800817c <HAL_DMA_IRQHandler+0x30c>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2300      	movs	r3, #0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00d      	beq.n	800819c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008184:	f003 031f 	and.w	r3, r3, #31
 8008188:	2201      	movs	r2, #1
 800818a:	409a      	lsls	r2, r3
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008194:	f043 0202 	orr.w	r2, r3, #2
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081a0:	f003 031f 	and.w	r3, r3, #31
 80081a4:	2204      	movs	r2, #4
 80081a6:	409a      	lsls	r2, r3
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 808f 	beq.w	80082d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a2c      	ldr	r2, [pc, #176]	@ (8008268 <HAL_DMA_IRQHandler+0x3f8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d04a      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a2a      	ldr	r2, [pc, #168]	@ (800826c <HAL_DMA_IRQHandler+0x3fc>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d045      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a29      	ldr	r2, [pc, #164]	@ (8008270 <HAL_DMA_IRQHandler+0x400>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d040      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a27      	ldr	r2, [pc, #156]	@ (8008274 <HAL_DMA_IRQHandler+0x404>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d03b      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a26      	ldr	r2, [pc, #152]	@ (8008278 <HAL_DMA_IRQHandler+0x408>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d036      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a24      	ldr	r2, [pc, #144]	@ (800827c <HAL_DMA_IRQHandler+0x40c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d031      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a23      	ldr	r2, [pc, #140]	@ (8008280 <HAL_DMA_IRQHandler+0x410>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d02c      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a21      	ldr	r2, [pc, #132]	@ (8008284 <HAL_DMA_IRQHandler+0x414>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d027      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a20      	ldr	r2, [pc, #128]	@ (8008288 <HAL_DMA_IRQHandler+0x418>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d022      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a1e      	ldr	r2, [pc, #120]	@ (800828c <HAL_DMA_IRQHandler+0x41c>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d01d      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a1d      	ldr	r2, [pc, #116]	@ (8008290 <HAL_DMA_IRQHandler+0x420>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d018      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a1b      	ldr	r2, [pc, #108]	@ (8008294 <HAL_DMA_IRQHandler+0x424>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d013      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a1a      	ldr	r2, [pc, #104]	@ (8008298 <HAL_DMA_IRQHandler+0x428>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00e      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a18      	ldr	r2, [pc, #96]	@ (800829c <HAL_DMA_IRQHandler+0x42c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d009      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a17      	ldr	r2, [pc, #92]	@ (80082a0 <HAL_DMA_IRQHandler+0x430>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d004      	beq.n	8008252 <HAL_DMA_IRQHandler+0x3e2>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a15      	ldr	r2, [pc, #84]	@ (80082a4 <HAL_DMA_IRQHandler+0x434>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d12a      	bne.n	80082a8 <HAL_DMA_IRQHandler+0x438>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	bf14      	ite	ne
 8008260:	2301      	movne	r3, #1
 8008262:	2300      	moveq	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	e023      	b.n	80082b0 <HAL_DMA_IRQHandler+0x440>
 8008268:	40020010 	.word	0x40020010
 800826c:	40020028 	.word	0x40020028
 8008270:	40020040 	.word	0x40020040
 8008274:	40020058 	.word	0x40020058
 8008278:	40020070 	.word	0x40020070
 800827c:	40020088 	.word	0x40020088
 8008280:	400200a0 	.word	0x400200a0
 8008284:	400200b8 	.word	0x400200b8
 8008288:	40020410 	.word	0x40020410
 800828c:	40020428 	.word	0x40020428
 8008290:	40020440 	.word	0x40020440
 8008294:	40020458 	.word	0x40020458
 8008298:	40020470 	.word	0x40020470
 800829c:	40020488 	.word	0x40020488
 80082a0:	400204a0 	.word	0x400204a0
 80082a4:	400204b8 	.word	0x400204b8
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2300      	movs	r3, #0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00d      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082b8:	f003 031f 	and.w	r3, r3, #31
 80082bc:	2204      	movs	r2, #4
 80082be:	409a      	lsls	r2, r3
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c8:	f043 0204 	orr.w	r2, r3, #4
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	2210      	movs	r2, #16
 80082da:	409a      	lsls	r2, r3
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	4013      	ands	r3, r2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80a6 	beq.w	8008432 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a85      	ldr	r2, [pc, #532]	@ (8008500 <HAL_DMA_IRQHandler+0x690>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d04a      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a83      	ldr	r2, [pc, #524]	@ (8008504 <HAL_DMA_IRQHandler+0x694>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d045      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a82      	ldr	r2, [pc, #520]	@ (8008508 <HAL_DMA_IRQHandler+0x698>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d040      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a80      	ldr	r2, [pc, #512]	@ (800850c <HAL_DMA_IRQHandler+0x69c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d03b      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a7f      	ldr	r2, [pc, #508]	@ (8008510 <HAL_DMA_IRQHandler+0x6a0>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d036      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a7d      	ldr	r2, [pc, #500]	@ (8008514 <HAL_DMA_IRQHandler+0x6a4>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d031      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a7c      	ldr	r2, [pc, #496]	@ (8008518 <HAL_DMA_IRQHandler+0x6a8>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d02c      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a7a      	ldr	r2, [pc, #488]	@ (800851c <HAL_DMA_IRQHandler+0x6ac>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d027      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a79      	ldr	r2, [pc, #484]	@ (8008520 <HAL_DMA_IRQHandler+0x6b0>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d022      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a77      	ldr	r2, [pc, #476]	@ (8008524 <HAL_DMA_IRQHandler+0x6b4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d01d      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a76      	ldr	r2, [pc, #472]	@ (8008528 <HAL_DMA_IRQHandler+0x6b8>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d018      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a74      	ldr	r2, [pc, #464]	@ (800852c <HAL_DMA_IRQHandler+0x6bc>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d013      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a73      	ldr	r2, [pc, #460]	@ (8008530 <HAL_DMA_IRQHandler+0x6c0>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d00e      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a71      	ldr	r2, [pc, #452]	@ (8008534 <HAL_DMA_IRQHandler+0x6c4>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d009      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a70      	ldr	r2, [pc, #448]	@ (8008538 <HAL_DMA_IRQHandler+0x6c8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d004      	beq.n	8008386 <HAL_DMA_IRQHandler+0x516>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a6e      	ldr	r2, [pc, #440]	@ (800853c <HAL_DMA_IRQHandler+0x6cc>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d10a      	bne.n	800839c <HAL_DMA_IRQHandler+0x52c>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0308 	and.w	r3, r3, #8
 8008390:	2b00      	cmp	r3, #0
 8008392:	bf14      	ite	ne
 8008394:	2301      	movne	r3, #1
 8008396:	2300      	moveq	r3, #0
 8008398:	b2db      	uxtb	r3, r3
 800839a:	e009      	b.n	80083b0 <HAL_DMA_IRQHandler+0x540>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	bf14      	ite	ne
 80083aa:	2301      	movne	r3, #1
 80083ac:	2300      	moveq	r3, #0
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d03e      	beq.n	8008432 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083b8:	f003 031f 	and.w	r3, r3, #31
 80083bc:	2210      	movs	r2, #16
 80083be:	409a      	lsls	r2, r3
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d018      	beq.n	8008404 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d108      	bne.n	80083f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d024      	beq.n	8008432 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	4798      	blx	r3
 80083f0:	e01f      	b.n	8008432 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d01b      	beq.n	8008432 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	4798      	blx	r3
 8008402:	e016      	b.n	8008432 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800840e:	2b00      	cmp	r3, #0
 8008410:	d107      	bne.n	8008422 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0208 	bic.w	r2, r2, #8
 8008420:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008436:	f003 031f 	and.w	r3, r3, #31
 800843a:	2220      	movs	r2, #32
 800843c:	409a      	lsls	r2, r3
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	4013      	ands	r3, r2
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 8110 	beq.w	8008668 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a2c      	ldr	r2, [pc, #176]	@ (8008500 <HAL_DMA_IRQHandler+0x690>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d04a      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a2b      	ldr	r2, [pc, #172]	@ (8008504 <HAL_DMA_IRQHandler+0x694>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d045      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a29      	ldr	r2, [pc, #164]	@ (8008508 <HAL_DMA_IRQHandler+0x698>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d040      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a28      	ldr	r2, [pc, #160]	@ (800850c <HAL_DMA_IRQHandler+0x69c>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d03b      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a26      	ldr	r2, [pc, #152]	@ (8008510 <HAL_DMA_IRQHandler+0x6a0>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d036      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a25      	ldr	r2, [pc, #148]	@ (8008514 <HAL_DMA_IRQHandler+0x6a4>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d031      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a23      	ldr	r2, [pc, #140]	@ (8008518 <HAL_DMA_IRQHandler+0x6a8>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d02c      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a22      	ldr	r2, [pc, #136]	@ (800851c <HAL_DMA_IRQHandler+0x6ac>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d027      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a20      	ldr	r2, [pc, #128]	@ (8008520 <HAL_DMA_IRQHandler+0x6b0>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d022      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a1f      	ldr	r2, [pc, #124]	@ (8008524 <HAL_DMA_IRQHandler+0x6b4>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d01d      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008528 <HAL_DMA_IRQHandler+0x6b8>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d018      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a1c      	ldr	r2, [pc, #112]	@ (800852c <HAL_DMA_IRQHandler+0x6bc>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d013      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a1a      	ldr	r2, [pc, #104]	@ (8008530 <HAL_DMA_IRQHandler+0x6c0>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d00e      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a19      	ldr	r2, [pc, #100]	@ (8008534 <HAL_DMA_IRQHandler+0x6c4>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d009      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a17      	ldr	r2, [pc, #92]	@ (8008538 <HAL_DMA_IRQHandler+0x6c8>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d004      	beq.n	80084e8 <HAL_DMA_IRQHandler+0x678>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a16      	ldr	r2, [pc, #88]	@ (800853c <HAL_DMA_IRQHandler+0x6cc>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d12b      	bne.n	8008540 <HAL_DMA_IRQHandler+0x6d0>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0310 	and.w	r3, r3, #16
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bf14      	ite	ne
 80084f6:	2301      	movne	r3, #1
 80084f8:	2300      	moveq	r3, #0
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	e02a      	b.n	8008554 <HAL_DMA_IRQHandler+0x6e4>
 80084fe:	bf00      	nop
 8008500:	40020010 	.word	0x40020010
 8008504:	40020028 	.word	0x40020028
 8008508:	40020040 	.word	0x40020040
 800850c:	40020058 	.word	0x40020058
 8008510:	40020070 	.word	0x40020070
 8008514:	40020088 	.word	0x40020088
 8008518:	400200a0 	.word	0x400200a0
 800851c:	400200b8 	.word	0x400200b8
 8008520:	40020410 	.word	0x40020410
 8008524:	40020428 	.word	0x40020428
 8008528:	40020440 	.word	0x40020440
 800852c:	40020458 	.word	0x40020458
 8008530:	40020470 	.word	0x40020470
 8008534:	40020488 	.word	0x40020488
 8008538:	400204a0 	.word	0x400204a0
 800853c:	400204b8 	.word	0x400204b8
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b00      	cmp	r3, #0
 800854c:	bf14      	ite	ne
 800854e:	2301      	movne	r3, #1
 8008550:	2300      	moveq	r3, #0
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 8087 	beq.w	8008668 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800855e:	f003 031f 	and.w	r3, r3, #31
 8008562:	2220      	movs	r2, #32
 8008564:	409a      	lsls	r2, r3
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b04      	cmp	r3, #4
 8008574:	d139      	bne.n	80085ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0216 	bic.w	r2, r2, #22
 8008584:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	695a      	ldr	r2, [r3, #20]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008594:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800859a:	2b00      	cmp	r3, #0
 800859c:	d103      	bne.n	80085a6 <HAL_DMA_IRQHandler+0x736>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0208 	bic.w	r2, r2, #8
 80085b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085ba:	f003 031f 	and.w	r3, r3, #31
 80085be:	223f      	movs	r2, #63	@ 0x3f
 80085c0:	409a      	lsls	r2, r3
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 8382 	beq.w	8008ce4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	4798      	blx	r3
          }
          return;
 80085e8:	e37c      	b.n	8008ce4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d018      	beq.n	800862a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d108      	bne.n	8008618 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860a:	2b00      	cmp	r3, #0
 800860c:	d02c      	beq.n	8008668 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
 8008616:	e027      	b.n	8008668 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800861c:	2b00      	cmp	r3, #0
 800861e:	d023      	beq.n	8008668 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	4798      	blx	r3
 8008628:	e01e      	b.n	8008668 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10f      	bne.n	8008658 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0210 	bic.w	r2, r2, #16
 8008646:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 833e 	beq.w	8008cee <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 8088 	beq.w	8008790 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2204      	movs	r2, #4
 8008684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a89      	ldr	r2, [pc, #548]	@ (80088b4 <HAL_DMA_IRQHandler+0xa44>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d04a      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a88      	ldr	r2, [pc, #544]	@ (80088b8 <HAL_DMA_IRQHandler+0xa48>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d045      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a86      	ldr	r2, [pc, #536]	@ (80088bc <HAL_DMA_IRQHandler+0xa4c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d040      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a85      	ldr	r2, [pc, #532]	@ (80088c0 <HAL_DMA_IRQHandler+0xa50>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d03b      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a83      	ldr	r2, [pc, #524]	@ (80088c4 <HAL_DMA_IRQHandler+0xa54>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d036      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a82      	ldr	r2, [pc, #520]	@ (80088c8 <HAL_DMA_IRQHandler+0xa58>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d031      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a80      	ldr	r2, [pc, #512]	@ (80088cc <HAL_DMA_IRQHandler+0xa5c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d02c      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a7f      	ldr	r2, [pc, #508]	@ (80088d0 <HAL_DMA_IRQHandler+0xa60>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d027      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a7d      	ldr	r2, [pc, #500]	@ (80088d4 <HAL_DMA_IRQHandler+0xa64>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d022      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a7c      	ldr	r2, [pc, #496]	@ (80088d8 <HAL_DMA_IRQHandler+0xa68>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d01d      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a7a      	ldr	r2, [pc, #488]	@ (80088dc <HAL_DMA_IRQHandler+0xa6c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d018      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a79      	ldr	r2, [pc, #484]	@ (80088e0 <HAL_DMA_IRQHandler+0xa70>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d013      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a77      	ldr	r2, [pc, #476]	@ (80088e4 <HAL_DMA_IRQHandler+0xa74>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00e      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a76      	ldr	r2, [pc, #472]	@ (80088e8 <HAL_DMA_IRQHandler+0xa78>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d009      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a74      	ldr	r2, [pc, #464]	@ (80088ec <HAL_DMA_IRQHandler+0xa7c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d004      	beq.n	8008728 <HAL_DMA_IRQHandler+0x8b8>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a73      	ldr	r2, [pc, #460]	@ (80088f0 <HAL_DMA_IRQHandler+0xa80>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d108      	bne.n	800873a <HAL_DMA_IRQHandler+0x8ca>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0201 	bic.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	e007      	b.n	800874a <HAL_DMA_IRQHandler+0x8da>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0201 	bic.w	r2, r2, #1
 8008748:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3301      	adds	r3, #1
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008752:	429a      	cmp	r2, r3
 8008754:	d307      	bcc.n	8008766 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1f2      	bne.n	800874a <HAL_DMA_IRQHandler+0x8da>
 8008764:	e000      	b.n	8008768 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008766:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	d004      	beq.n	8008780 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2203      	movs	r2, #3
 800877a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800877e:	e003      	b.n	8008788 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 82aa 	beq.w	8008cee <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3
 80087a2:	e2a4      	b.n	8008cee <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a52      	ldr	r2, [pc, #328]	@ (80088f4 <HAL_DMA_IRQHandler+0xa84>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d04a      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a51      	ldr	r2, [pc, #324]	@ (80088f8 <HAL_DMA_IRQHandler+0xa88>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d045      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a4f      	ldr	r2, [pc, #316]	@ (80088fc <HAL_DMA_IRQHandler+0xa8c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d040      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a4e      	ldr	r2, [pc, #312]	@ (8008900 <HAL_DMA_IRQHandler+0xa90>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d03b      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a4c      	ldr	r2, [pc, #304]	@ (8008904 <HAL_DMA_IRQHandler+0xa94>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d036      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a4b      	ldr	r2, [pc, #300]	@ (8008908 <HAL_DMA_IRQHandler+0xa98>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d031      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a49      	ldr	r2, [pc, #292]	@ (800890c <HAL_DMA_IRQHandler+0xa9c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d02c      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a48      	ldr	r2, [pc, #288]	@ (8008910 <HAL_DMA_IRQHandler+0xaa0>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d027      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a46      	ldr	r2, [pc, #280]	@ (8008914 <HAL_DMA_IRQHandler+0xaa4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d022      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a45      	ldr	r2, [pc, #276]	@ (8008918 <HAL_DMA_IRQHandler+0xaa8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d01d      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a43      	ldr	r2, [pc, #268]	@ (800891c <HAL_DMA_IRQHandler+0xaac>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d018      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a42      	ldr	r2, [pc, #264]	@ (8008920 <HAL_DMA_IRQHandler+0xab0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d013      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a40      	ldr	r2, [pc, #256]	@ (8008924 <HAL_DMA_IRQHandler+0xab4>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d00e      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a3f      	ldr	r2, [pc, #252]	@ (8008928 <HAL_DMA_IRQHandler+0xab8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d009      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a3d      	ldr	r2, [pc, #244]	@ (800892c <HAL_DMA_IRQHandler+0xabc>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d004      	beq.n	8008844 <HAL_DMA_IRQHandler+0x9d4>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a3c      	ldr	r2, [pc, #240]	@ (8008930 <HAL_DMA_IRQHandler+0xac0>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d101      	bne.n	8008848 <HAL_DMA_IRQHandler+0x9d8>
 8008844:	2301      	movs	r3, #1
 8008846:	e000      	b.n	800884a <HAL_DMA_IRQHandler+0x9da>
 8008848:	2300      	movs	r3, #0
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 824f 	beq.w	8008cee <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800885c:	f003 031f 	and.w	r3, r3, #31
 8008860:	2204      	movs	r2, #4
 8008862:	409a      	lsls	r2, r3
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	4013      	ands	r3, r2
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 80dd 	beq.w	8008a28 <HAL_DMA_IRQHandler+0xbb8>
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 80d7 	beq.w	8008a28 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800887e:	f003 031f 	and.w	r3, r3, #31
 8008882:	2204      	movs	r2, #4
 8008884:	409a      	lsls	r2, r3
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d059      	beq.n	8008948 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d14a      	bne.n	8008934 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 8220 	beq.w	8008ce8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088b0:	e21a      	b.n	8008ce8 <HAL_DMA_IRQHandler+0xe78>
 80088b2:	bf00      	nop
 80088b4:	40020010 	.word	0x40020010
 80088b8:	40020028 	.word	0x40020028
 80088bc:	40020040 	.word	0x40020040
 80088c0:	40020058 	.word	0x40020058
 80088c4:	40020070 	.word	0x40020070
 80088c8:	40020088 	.word	0x40020088
 80088cc:	400200a0 	.word	0x400200a0
 80088d0:	400200b8 	.word	0x400200b8
 80088d4:	40020410 	.word	0x40020410
 80088d8:	40020428 	.word	0x40020428
 80088dc:	40020440 	.word	0x40020440
 80088e0:	40020458 	.word	0x40020458
 80088e4:	40020470 	.word	0x40020470
 80088e8:	40020488 	.word	0x40020488
 80088ec:	400204a0 	.word	0x400204a0
 80088f0:	400204b8 	.word	0x400204b8
 80088f4:	48022c08 	.word	0x48022c08
 80088f8:	48022c1c 	.word	0x48022c1c
 80088fc:	48022c30 	.word	0x48022c30
 8008900:	48022c44 	.word	0x48022c44
 8008904:	48022c58 	.word	0x48022c58
 8008908:	48022c6c 	.word	0x48022c6c
 800890c:	48022c80 	.word	0x48022c80
 8008910:	48022c94 	.word	0x48022c94
 8008914:	58025408 	.word	0x58025408
 8008918:	5802541c 	.word	0x5802541c
 800891c:	58025430 	.word	0x58025430
 8008920:	58025444 	.word	0x58025444
 8008924:	58025458 	.word	0x58025458
 8008928:	5802546c 	.word	0x5802546c
 800892c:	58025480 	.word	0x58025480
 8008930:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 81d5 	beq.w	8008ce8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008946:	e1cf      	b.n	8008ce8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d160      	bne.n	8008a14 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a7f      	ldr	r2, [pc, #508]	@ (8008b54 <HAL_DMA_IRQHandler+0xce4>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d04a      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a7d      	ldr	r2, [pc, #500]	@ (8008b58 <HAL_DMA_IRQHandler+0xce8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d045      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a7c      	ldr	r2, [pc, #496]	@ (8008b5c <HAL_DMA_IRQHandler+0xcec>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d040      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a7a      	ldr	r2, [pc, #488]	@ (8008b60 <HAL_DMA_IRQHandler+0xcf0>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d03b      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a79      	ldr	r2, [pc, #484]	@ (8008b64 <HAL_DMA_IRQHandler+0xcf4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d036      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a77      	ldr	r2, [pc, #476]	@ (8008b68 <HAL_DMA_IRQHandler+0xcf8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d031      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a76      	ldr	r2, [pc, #472]	@ (8008b6c <HAL_DMA_IRQHandler+0xcfc>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d02c      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a74      	ldr	r2, [pc, #464]	@ (8008b70 <HAL_DMA_IRQHandler+0xd00>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d027      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a73      	ldr	r2, [pc, #460]	@ (8008b74 <HAL_DMA_IRQHandler+0xd04>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d022      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a71      	ldr	r2, [pc, #452]	@ (8008b78 <HAL_DMA_IRQHandler+0xd08>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d01d      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a70      	ldr	r2, [pc, #448]	@ (8008b7c <HAL_DMA_IRQHandler+0xd0c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d018      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a6e      	ldr	r2, [pc, #440]	@ (8008b80 <HAL_DMA_IRQHandler+0xd10>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d013      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a6d      	ldr	r2, [pc, #436]	@ (8008b84 <HAL_DMA_IRQHandler+0xd14>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d00e      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a6b      	ldr	r2, [pc, #428]	@ (8008b88 <HAL_DMA_IRQHandler+0xd18>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d009      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a6a      	ldr	r2, [pc, #424]	@ (8008b8c <HAL_DMA_IRQHandler+0xd1c>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d004      	beq.n	80089f2 <HAL_DMA_IRQHandler+0xb82>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a68      	ldr	r2, [pc, #416]	@ (8008b90 <HAL_DMA_IRQHandler+0xd20>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d108      	bne.n	8008a04 <HAL_DMA_IRQHandler+0xb94>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0208 	bic.w	r2, r2, #8
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	e007      	b.n	8008a14 <HAL_DMA_IRQHandler+0xba4>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0204 	bic.w	r2, r2, #4
 8008a12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 8165 	beq.w	8008ce8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a26:	e15f      	b.n	8008ce8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a2c:	f003 031f 	and.w	r3, r3, #31
 8008a30:	2202      	movs	r2, #2
 8008a32:	409a      	lsls	r2, r3
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	4013      	ands	r3, r2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 80c5 	beq.w	8008bc8 <HAL_DMA_IRQHandler+0xd58>
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f003 0302 	and.w	r3, r3, #2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 80bf 	beq.w	8008bc8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a4e:	f003 031f 	and.w	r3, r3, #31
 8008a52:	2202      	movs	r2, #2
 8008a54:	409a      	lsls	r2, r3
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d018      	beq.n	8008a96 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 813a 	beq.w	8008cec <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a80:	e134      	b.n	8008cec <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 8130 	beq.w	8008cec <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a94:	e12a      	b.n	8008cec <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f003 0320 	and.w	r3, r3, #32
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f040 8089 	bne.w	8008bb4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8008b54 <HAL_DMA_IRQHandler+0xce4>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d04a      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a29      	ldr	r2, [pc, #164]	@ (8008b58 <HAL_DMA_IRQHandler+0xce8>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d045      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a28      	ldr	r2, [pc, #160]	@ (8008b5c <HAL_DMA_IRQHandler+0xcec>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d040      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a26      	ldr	r2, [pc, #152]	@ (8008b60 <HAL_DMA_IRQHandler+0xcf0>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d03b      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a25      	ldr	r2, [pc, #148]	@ (8008b64 <HAL_DMA_IRQHandler+0xcf4>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d036      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a23      	ldr	r2, [pc, #140]	@ (8008b68 <HAL_DMA_IRQHandler+0xcf8>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d031      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a22      	ldr	r2, [pc, #136]	@ (8008b6c <HAL_DMA_IRQHandler+0xcfc>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d02c      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a20      	ldr	r2, [pc, #128]	@ (8008b70 <HAL_DMA_IRQHandler+0xd00>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d027      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1f      	ldr	r2, [pc, #124]	@ (8008b74 <HAL_DMA_IRQHandler+0xd04>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d022      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a1d      	ldr	r2, [pc, #116]	@ (8008b78 <HAL_DMA_IRQHandler+0xd08>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d01d      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8008b7c <HAL_DMA_IRQHandler+0xd0c>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d018      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a1a      	ldr	r2, [pc, #104]	@ (8008b80 <HAL_DMA_IRQHandler+0xd10>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d013      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a19      	ldr	r2, [pc, #100]	@ (8008b84 <HAL_DMA_IRQHandler+0xd14>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d00e      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a17      	ldr	r2, [pc, #92]	@ (8008b88 <HAL_DMA_IRQHandler+0xd18>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d009      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a16      	ldr	r2, [pc, #88]	@ (8008b8c <HAL_DMA_IRQHandler+0xd1c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d004      	beq.n	8008b42 <HAL_DMA_IRQHandler+0xcd2>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a14      	ldr	r2, [pc, #80]	@ (8008b90 <HAL_DMA_IRQHandler+0xd20>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d128      	bne.n	8008b94 <HAL_DMA_IRQHandler+0xd24>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f022 0214 	bic.w	r2, r2, #20
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	e027      	b.n	8008ba4 <HAL_DMA_IRQHandler+0xd34>
 8008b54:	40020010 	.word	0x40020010
 8008b58:	40020028 	.word	0x40020028
 8008b5c:	40020040 	.word	0x40020040
 8008b60:	40020058 	.word	0x40020058
 8008b64:	40020070 	.word	0x40020070
 8008b68:	40020088 	.word	0x40020088
 8008b6c:	400200a0 	.word	0x400200a0
 8008b70:	400200b8 	.word	0x400200b8
 8008b74:	40020410 	.word	0x40020410
 8008b78:	40020428 	.word	0x40020428
 8008b7c:	40020440 	.word	0x40020440
 8008b80:	40020458 	.word	0x40020458
 8008b84:	40020470 	.word	0x40020470
 8008b88:	40020488 	.word	0x40020488
 8008b8c:	400204a0 	.word	0x400204a0
 8008b90:	400204b8 	.word	0x400204b8
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 020a 	bic.w	r2, r2, #10
 8008ba2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 8097 	beq.w	8008cec <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bc6:	e091      	b.n	8008cec <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bcc:	f003 031f 	and.w	r3, r3, #31
 8008bd0:	2208      	movs	r2, #8
 8008bd2:	409a      	lsls	r2, r3
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 8088 	beq.w	8008cee <HAL_DMA_IRQHandler+0xe7e>
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8082 	beq.w	8008cee <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a41      	ldr	r2, [pc, #260]	@ (8008cf4 <HAL_DMA_IRQHandler+0xe84>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d04a      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a3f      	ldr	r2, [pc, #252]	@ (8008cf8 <HAL_DMA_IRQHandler+0xe88>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d045      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a3e      	ldr	r2, [pc, #248]	@ (8008cfc <HAL_DMA_IRQHandler+0xe8c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d040      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a3c      	ldr	r2, [pc, #240]	@ (8008d00 <HAL_DMA_IRQHandler+0xe90>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d03b      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a3b      	ldr	r2, [pc, #236]	@ (8008d04 <HAL_DMA_IRQHandler+0xe94>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d036      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a39      	ldr	r2, [pc, #228]	@ (8008d08 <HAL_DMA_IRQHandler+0xe98>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d031      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a38      	ldr	r2, [pc, #224]	@ (8008d0c <HAL_DMA_IRQHandler+0xe9c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d02c      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a36      	ldr	r2, [pc, #216]	@ (8008d10 <HAL_DMA_IRQHandler+0xea0>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d027      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a35      	ldr	r2, [pc, #212]	@ (8008d14 <HAL_DMA_IRQHandler+0xea4>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d022      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a33      	ldr	r2, [pc, #204]	@ (8008d18 <HAL_DMA_IRQHandler+0xea8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d01d      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a32      	ldr	r2, [pc, #200]	@ (8008d1c <HAL_DMA_IRQHandler+0xeac>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d018      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a30      	ldr	r2, [pc, #192]	@ (8008d20 <HAL_DMA_IRQHandler+0xeb0>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d013      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a2f      	ldr	r2, [pc, #188]	@ (8008d24 <HAL_DMA_IRQHandler+0xeb4>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00e      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a2d      	ldr	r2, [pc, #180]	@ (8008d28 <HAL_DMA_IRQHandler+0xeb8>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d009      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8008d2c <HAL_DMA_IRQHandler+0xebc>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d004      	beq.n	8008c8a <HAL_DMA_IRQHandler+0xe1a>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a2a      	ldr	r2, [pc, #168]	@ (8008d30 <HAL_DMA_IRQHandler+0xec0>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d108      	bne.n	8008c9c <HAL_DMA_IRQHandler+0xe2c>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 021c 	bic.w	r2, r2, #28
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	e007      	b.n	8008cac <HAL_DMA_IRQHandler+0xe3c>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f022 020e 	bic.w	r2, r2, #14
 8008caa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cb0:	f003 031f 	and.w	r3, r3, #31
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	409a      	lsls	r2, r3
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d009      	beq.n	8008cee <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	4798      	blx	r3
 8008ce2:	e004      	b.n	8008cee <HAL_DMA_IRQHandler+0xe7e>
          return;
 8008ce4:	bf00      	nop
 8008ce6:	e002      	b.n	8008cee <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ce8:	bf00      	nop
 8008cea:	e000      	b.n	8008cee <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008cec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008cee:	3728      	adds	r7, #40	@ 0x28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	40020010 	.word	0x40020010
 8008cf8:	40020028 	.word	0x40020028
 8008cfc:	40020040 	.word	0x40020040
 8008d00:	40020058 	.word	0x40020058
 8008d04:	40020070 	.word	0x40020070
 8008d08:	40020088 	.word	0x40020088
 8008d0c:	400200a0 	.word	0x400200a0
 8008d10:	400200b8 	.word	0x400200b8
 8008d14:	40020410 	.word	0x40020410
 8008d18:	40020428 	.word	0x40020428
 8008d1c:	40020440 	.word	0x40020440
 8008d20:	40020458 	.word	0x40020458
 8008d24:	40020470 	.word	0x40020470
 8008d28:	40020488 	.word	0x40020488
 8008d2c:	400204a0 	.word	0x400204a0
 8008d30:	400204b8 	.word	0x400204b8

08008d34 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d5e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d64:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a7f      	ldr	r2, [pc, #508]	@ (8008f68 <DMA_SetConfig+0x21c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d072      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a7d      	ldr	r2, [pc, #500]	@ (8008f6c <DMA_SetConfig+0x220>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d06d      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8008f70 <DMA_SetConfig+0x224>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d068      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a7a      	ldr	r2, [pc, #488]	@ (8008f74 <DMA_SetConfig+0x228>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d063      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a79      	ldr	r2, [pc, #484]	@ (8008f78 <DMA_SetConfig+0x22c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d05e      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a77      	ldr	r2, [pc, #476]	@ (8008f7c <DMA_SetConfig+0x230>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d059      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a76      	ldr	r2, [pc, #472]	@ (8008f80 <DMA_SetConfig+0x234>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d054      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a74      	ldr	r2, [pc, #464]	@ (8008f84 <DMA_SetConfig+0x238>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d04f      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a73      	ldr	r2, [pc, #460]	@ (8008f88 <DMA_SetConfig+0x23c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d04a      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a71      	ldr	r2, [pc, #452]	@ (8008f8c <DMA_SetConfig+0x240>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d045      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a70      	ldr	r2, [pc, #448]	@ (8008f90 <DMA_SetConfig+0x244>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d040      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a6e      	ldr	r2, [pc, #440]	@ (8008f94 <DMA_SetConfig+0x248>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d03b      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a6d      	ldr	r2, [pc, #436]	@ (8008f98 <DMA_SetConfig+0x24c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d036      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a6b      	ldr	r2, [pc, #428]	@ (8008f9c <DMA_SetConfig+0x250>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d031      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a6a      	ldr	r2, [pc, #424]	@ (8008fa0 <DMA_SetConfig+0x254>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d02c      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a68      	ldr	r2, [pc, #416]	@ (8008fa4 <DMA_SetConfig+0x258>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d027      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a67      	ldr	r2, [pc, #412]	@ (8008fa8 <DMA_SetConfig+0x25c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d022      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a65      	ldr	r2, [pc, #404]	@ (8008fac <DMA_SetConfig+0x260>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d01d      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a64      	ldr	r2, [pc, #400]	@ (8008fb0 <DMA_SetConfig+0x264>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d018      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a62      	ldr	r2, [pc, #392]	@ (8008fb4 <DMA_SetConfig+0x268>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d013      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a61      	ldr	r2, [pc, #388]	@ (8008fb8 <DMA_SetConfig+0x26c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00e      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a5f      	ldr	r2, [pc, #380]	@ (8008fbc <DMA_SetConfig+0x270>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d009      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a5e      	ldr	r2, [pc, #376]	@ (8008fc0 <DMA_SetConfig+0x274>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d004      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a5c      	ldr	r2, [pc, #368]	@ (8008fc4 <DMA_SetConfig+0x278>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d101      	bne.n	8008e5a <DMA_SetConfig+0x10e>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <DMA_SetConfig+0x110>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00d      	beq.n	8008e7c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008e68:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d004      	beq.n	8008e7c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008e7a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a39      	ldr	r2, [pc, #228]	@ (8008f68 <DMA_SetConfig+0x21c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d04a      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a38      	ldr	r2, [pc, #224]	@ (8008f6c <DMA_SetConfig+0x220>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d045      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a36      	ldr	r2, [pc, #216]	@ (8008f70 <DMA_SetConfig+0x224>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d040      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a35      	ldr	r2, [pc, #212]	@ (8008f74 <DMA_SetConfig+0x228>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d03b      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a33      	ldr	r2, [pc, #204]	@ (8008f78 <DMA_SetConfig+0x22c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d036      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a32      	ldr	r2, [pc, #200]	@ (8008f7c <DMA_SetConfig+0x230>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d031      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a30      	ldr	r2, [pc, #192]	@ (8008f80 <DMA_SetConfig+0x234>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d02c      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8008f84 <DMA_SetConfig+0x238>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d027      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8008f88 <DMA_SetConfig+0x23c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d022      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a2c      	ldr	r2, [pc, #176]	@ (8008f8c <DMA_SetConfig+0x240>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d01d      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8008f90 <DMA_SetConfig+0x244>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d018      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a29      	ldr	r2, [pc, #164]	@ (8008f94 <DMA_SetConfig+0x248>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d013      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a27      	ldr	r2, [pc, #156]	@ (8008f98 <DMA_SetConfig+0x24c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00e      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a26      	ldr	r2, [pc, #152]	@ (8008f9c <DMA_SetConfig+0x250>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d009      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a24      	ldr	r2, [pc, #144]	@ (8008fa0 <DMA_SetConfig+0x254>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d004      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a23      	ldr	r2, [pc, #140]	@ (8008fa4 <DMA_SetConfig+0x258>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d101      	bne.n	8008f20 <DMA_SetConfig+0x1d4>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e000      	b.n	8008f22 <DMA_SetConfig+0x1d6>
 8008f20:	2300      	movs	r3, #0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d059      	beq.n	8008fda <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f2a:	f003 031f 	and.w	r3, r3, #31
 8008f2e:	223f      	movs	r2, #63	@ 0x3f
 8008f30:	409a      	lsls	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008f44:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	2b40      	cmp	r3, #64	@ 0x40
 8008f54:	d138      	bne.n	8008fc8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008f66:	e0ae      	b.n	80090c6 <DMA_SetConfig+0x37a>
 8008f68:	40020010 	.word	0x40020010
 8008f6c:	40020028 	.word	0x40020028
 8008f70:	40020040 	.word	0x40020040
 8008f74:	40020058 	.word	0x40020058
 8008f78:	40020070 	.word	0x40020070
 8008f7c:	40020088 	.word	0x40020088
 8008f80:	400200a0 	.word	0x400200a0
 8008f84:	400200b8 	.word	0x400200b8
 8008f88:	40020410 	.word	0x40020410
 8008f8c:	40020428 	.word	0x40020428
 8008f90:	40020440 	.word	0x40020440
 8008f94:	40020458 	.word	0x40020458
 8008f98:	40020470 	.word	0x40020470
 8008f9c:	40020488 	.word	0x40020488
 8008fa0:	400204a0 	.word	0x400204a0
 8008fa4:	400204b8 	.word	0x400204b8
 8008fa8:	58025408 	.word	0x58025408
 8008fac:	5802541c 	.word	0x5802541c
 8008fb0:	58025430 	.word	0x58025430
 8008fb4:	58025444 	.word	0x58025444
 8008fb8:	58025458 	.word	0x58025458
 8008fbc:	5802546c 	.word	0x5802546c
 8008fc0:	58025480 	.word	0x58025480
 8008fc4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]
}
 8008fd8:	e075      	b.n	80090c6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a3d      	ldr	r2, [pc, #244]	@ (80090d4 <DMA_SetConfig+0x388>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d04a      	beq.n	800907a <DMA_SetConfig+0x32e>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a3b      	ldr	r2, [pc, #236]	@ (80090d8 <DMA_SetConfig+0x38c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d045      	beq.n	800907a <DMA_SetConfig+0x32e>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a3a      	ldr	r2, [pc, #232]	@ (80090dc <DMA_SetConfig+0x390>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d040      	beq.n	800907a <DMA_SetConfig+0x32e>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a38      	ldr	r2, [pc, #224]	@ (80090e0 <DMA_SetConfig+0x394>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d03b      	beq.n	800907a <DMA_SetConfig+0x32e>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a37      	ldr	r2, [pc, #220]	@ (80090e4 <DMA_SetConfig+0x398>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d036      	beq.n	800907a <DMA_SetConfig+0x32e>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a35      	ldr	r2, [pc, #212]	@ (80090e8 <DMA_SetConfig+0x39c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d031      	beq.n	800907a <DMA_SetConfig+0x32e>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a34      	ldr	r2, [pc, #208]	@ (80090ec <DMA_SetConfig+0x3a0>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d02c      	beq.n	800907a <DMA_SetConfig+0x32e>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a32      	ldr	r2, [pc, #200]	@ (80090f0 <DMA_SetConfig+0x3a4>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d027      	beq.n	800907a <DMA_SetConfig+0x32e>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a31      	ldr	r2, [pc, #196]	@ (80090f4 <DMA_SetConfig+0x3a8>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d022      	beq.n	800907a <DMA_SetConfig+0x32e>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a2f      	ldr	r2, [pc, #188]	@ (80090f8 <DMA_SetConfig+0x3ac>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d01d      	beq.n	800907a <DMA_SetConfig+0x32e>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a2e      	ldr	r2, [pc, #184]	@ (80090fc <DMA_SetConfig+0x3b0>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d018      	beq.n	800907a <DMA_SetConfig+0x32e>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a2c      	ldr	r2, [pc, #176]	@ (8009100 <DMA_SetConfig+0x3b4>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d013      	beq.n	800907a <DMA_SetConfig+0x32e>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a2b      	ldr	r2, [pc, #172]	@ (8009104 <DMA_SetConfig+0x3b8>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d00e      	beq.n	800907a <DMA_SetConfig+0x32e>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a29      	ldr	r2, [pc, #164]	@ (8009108 <DMA_SetConfig+0x3bc>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d009      	beq.n	800907a <DMA_SetConfig+0x32e>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a28      	ldr	r2, [pc, #160]	@ (800910c <DMA_SetConfig+0x3c0>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d004      	beq.n	800907a <DMA_SetConfig+0x32e>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a26      	ldr	r2, [pc, #152]	@ (8009110 <DMA_SetConfig+0x3c4>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d101      	bne.n	800907e <DMA_SetConfig+0x332>
 800907a:	2301      	movs	r3, #1
 800907c:	e000      	b.n	8009080 <DMA_SetConfig+0x334>
 800907e:	2300      	movs	r3, #0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d020      	beq.n	80090c6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009088:	f003 031f 	and.w	r3, r3, #31
 800908c:	2201      	movs	r2, #1
 800908e:	409a      	lsls	r2, r3
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	2b40      	cmp	r3, #64	@ 0x40
 80090a2:	d108      	bne.n	80090b6 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	60da      	str	r2, [r3, #12]
}
 80090b4:	e007      	b.n	80090c6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	60da      	str	r2, [r3, #12]
}
 80090c6:	bf00      	nop
 80090c8:	371c      	adds	r7, #28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	48022c08 	.word	0x48022c08
 80090d8:	48022c1c 	.word	0x48022c1c
 80090dc:	48022c30 	.word	0x48022c30
 80090e0:	48022c44 	.word	0x48022c44
 80090e4:	48022c58 	.word	0x48022c58
 80090e8:	48022c6c 	.word	0x48022c6c
 80090ec:	48022c80 	.word	0x48022c80
 80090f0:	48022c94 	.word	0x48022c94
 80090f4:	58025408 	.word	0x58025408
 80090f8:	5802541c 	.word	0x5802541c
 80090fc:	58025430 	.word	0x58025430
 8009100:	58025444 	.word	0x58025444
 8009104:	58025458 	.word	0x58025458
 8009108:	5802546c 	.word	0x5802546c
 800910c:	58025480 	.word	0x58025480
 8009110:	58025494 	.word	0x58025494

08009114 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a42      	ldr	r2, [pc, #264]	@ (800922c <DMA_CalcBaseAndBitshift+0x118>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d04a      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a41      	ldr	r2, [pc, #260]	@ (8009230 <DMA_CalcBaseAndBitshift+0x11c>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d045      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a3f      	ldr	r2, [pc, #252]	@ (8009234 <DMA_CalcBaseAndBitshift+0x120>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d040      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a3e      	ldr	r2, [pc, #248]	@ (8009238 <DMA_CalcBaseAndBitshift+0x124>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d03b      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a3c      	ldr	r2, [pc, #240]	@ (800923c <DMA_CalcBaseAndBitshift+0x128>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d036      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a3b      	ldr	r2, [pc, #236]	@ (8009240 <DMA_CalcBaseAndBitshift+0x12c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d031      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a39      	ldr	r2, [pc, #228]	@ (8009244 <DMA_CalcBaseAndBitshift+0x130>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d02c      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a38      	ldr	r2, [pc, #224]	@ (8009248 <DMA_CalcBaseAndBitshift+0x134>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d027      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a36      	ldr	r2, [pc, #216]	@ (800924c <DMA_CalcBaseAndBitshift+0x138>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d022      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a35      	ldr	r2, [pc, #212]	@ (8009250 <DMA_CalcBaseAndBitshift+0x13c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d01d      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a33      	ldr	r2, [pc, #204]	@ (8009254 <DMA_CalcBaseAndBitshift+0x140>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d018      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a32      	ldr	r2, [pc, #200]	@ (8009258 <DMA_CalcBaseAndBitshift+0x144>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d013      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a30      	ldr	r2, [pc, #192]	@ (800925c <DMA_CalcBaseAndBitshift+0x148>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00e      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a2f      	ldr	r2, [pc, #188]	@ (8009260 <DMA_CalcBaseAndBitshift+0x14c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d009      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a2d      	ldr	r2, [pc, #180]	@ (8009264 <DMA_CalcBaseAndBitshift+0x150>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d004      	beq.n	80091bc <DMA_CalcBaseAndBitshift+0xa8>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a2c      	ldr	r2, [pc, #176]	@ (8009268 <DMA_CalcBaseAndBitshift+0x154>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d101      	bne.n	80091c0 <DMA_CalcBaseAndBitshift+0xac>
 80091bc:	2301      	movs	r3, #1
 80091be:	e000      	b.n	80091c2 <DMA_CalcBaseAndBitshift+0xae>
 80091c0:	2300      	movs	r3, #0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d024      	beq.n	8009210 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	3b10      	subs	r3, #16
 80091ce:	4a27      	ldr	r2, [pc, #156]	@ (800926c <DMA_CalcBaseAndBitshift+0x158>)
 80091d0:	fba2 2303 	umull	r2, r3, r2, r3
 80091d4:	091b      	lsrs	r3, r3, #4
 80091d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f003 0307 	and.w	r3, r3, #7
 80091de:	4a24      	ldr	r2, [pc, #144]	@ (8009270 <DMA_CalcBaseAndBitshift+0x15c>)
 80091e0:	5cd3      	ldrb	r3, [r2, r3]
 80091e2:	461a      	mov	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d908      	bls.n	8009200 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	4b1f      	ldr	r3, [pc, #124]	@ (8009274 <DMA_CalcBaseAndBitshift+0x160>)
 80091f6:	4013      	ands	r3, r2
 80091f8:	1d1a      	adds	r2, r3, #4
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80091fe:	e00d      	b.n	800921c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	461a      	mov	r2, r3
 8009206:	4b1b      	ldr	r3, [pc, #108]	@ (8009274 <DMA_CalcBaseAndBitshift+0x160>)
 8009208:	4013      	ands	r3, r2
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6593      	str	r3, [r2, #88]	@ 0x58
 800920e:	e005      	b.n	800921c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	40020010 	.word	0x40020010
 8009230:	40020028 	.word	0x40020028
 8009234:	40020040 	.word	0x40020040
 8009238:	40020058 	.word	0x40020058
 800923c:	40020070 	.word	0x40020070
 8009240:	40020088 	.word	0x40020088
 8009244:	400200a0 	.word	0x400200a0
 8009248:	400200b8 	.word	0x400200b8
 800924c:	40020410 	.word	0x40020410
 8009250:	40020428 	.word	0x40020428
 8009254:	40020440 	.word	0x40020440
 8009258:	40020458 	.word	0x40020458
 800925c:	40020470 	.word	0x40020470
 8009260:	40020488 	.word	0x40020488
 8009264:	400204a0 	.word	0x400204a0
 8009268:	400204b8 	.word	0x400204b8
 800926c:	aaaaaaab 	.word	0xaaaaaaab
 8009270:	08019a04 	.word	0x08019a04
 8009274:	fffffc00 	.word	0xfffffc00

08009278 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d120      	bne.n	80092ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009290:	2b03      	cmp	r3, #3
 8009292:	d858      	bhi.n	8009346 <DMA_CheckFifoParam+0xce>
 8009294:	a201      	add	r2, pc, #4	@ (adr r2, 800929c <DMA_CheckFifoParam+0x24>)
 8009296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929a:	bf00      	nop
 800929c:	080092ad 	.word	0x080092ad
 80092a0:	080092bf 	.word	0x080092bf
 80092a4:	080092ad 	.word	0x080092ad
 80092a8:	08009347 	.word	0x08009347
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d048      	beq.n	800934a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80092bc:	e045      	b.n	800934a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80092c6:	d142      	bne.n	800934e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80092cc:	e03f      	b.n	800934e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d6:	d123      	bne.n	8009320 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d838      	bhi.n	8009352 <DMA_CheckFifoParam+0xda>
 80092e0:	a201      	add	r2, pc, #4	@ (adr r2, 80092e8 <DMA_CheckFifoParam+0x70>)
 80092e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e6:	bf00      	nop
 80092e8:	080092f9 	.word	0x080092f9
 80092ec:	080092ff 	.word	0x080092ff
 80092f0:	080092f9 	.word	0x080092f9
 80092f4:	08009311 	.word	0x08009311
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	73fb      	strb	r3, [r7, #15]
        break;
 80092fc:	e030      	b.n	8009360 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009302:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d025      	beq.n	8009356 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800930e:	e022      	b.n	8009356 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009314:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009318:	d11f      	bne.n	800935a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800931e:	e01c      	b.n	800935a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009324:	2b02      	cmp	r3, #2
 8009326:	d902      	bls.n	800932e <DMA_CheckFifoParam+0xb6>
 8009328:	2b03      	cmp	r3, #3
 800932a:	d003      	beq.n	8009334 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800932c:	e018      	b.n	8009360 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	73fb      	strb	r3, [r7, #15]
        break;
 8009332:	e015      	b.n	8009360 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009338:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00e      	beq.n	800935e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	73fb      	strb	r3, [r7, #15]
    break;
 8009344:	e00b      	b.n	800935e <DMA_CheckFifoParam+0xe6>
        break;
 8009346:	bf00      	nop
 8009348:	e00a      	b.n	8009360 <DMA_CheckFifoParam+0xe8>
        break;
 800934a:	bf00      	nop
 800934c:	e008      	b.n	8009360 <DMA_CheckFifoParam+0xe8>
        break;
 800934e:	bf00      	nop
 8009350:	e006      	b.n	8009360 <DMA_CheckFifoParam+0xe8>
        break;
 8009352:	bf00      	nop
 8009354:	e004      	b.n	8009360 <DMA_CheckFifoParam+0xe8>
        break;
 8009356:	bf00      	nop
 8009358:	e002      	b.n	8009360 <DMA_CheckFifoParam+0xe8>
        break;
 800935a:	bf00      	nop
 800935c:	e000      	b.n	8009360 <DMA_CheckFifoParam+0xe8>
    break;
 800935e:	bf00      	nop
    }
  }

  return status;
 8009360:	7bfb      	ldrb	r3, [r7, #15]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop

08009370 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a38      	ldr	r2, [pc, #224]	@ (8009464 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d022      	beq.n	80093ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a36      	ldr	r2, [pc, #216]	@ (8009468 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d01d      	beq.n	80093ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a35      	ldr	r2, [pc, #212]	@ (800946c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d018      	beq.n	80093ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a33      	ldr	r2, [pc, #204]	@ (8009470 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d013      	beq.n	80093ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a32      	ldr	r2, [pc, #200]	@ (8009474 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d00e      	beq.n	80093ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a30      	ldr	r2, [pc, #192]	@ (8009478 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d009      	beq.n	80093ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a2f      	ldr	r2, [pc, #188]	@ (800947c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d004      	beq.n	80093ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a2d      	ldr	r2, [pc, #180]	@ (8009480 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d101      	bne.n	80093d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e000      	b.n	80093d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80093d2:	2300      	movs	r3, #0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01a      	beq.n	800940e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	3b08      	subs	r3, #8
 80093e0:	4a28      	ldr	r2, [pc, #160]	@ (8009484 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80093e2:	fba2 2303 	umull	r2, r3, r2, r3
 80093e6:	091b      	lsrs	r3, r3, #4
 80093e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	4b26      	ldr	r3, [pc, #152]	@ (8009488 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80093ee:	4413      	add	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	461a      	mov	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a24      	ldr	r2, [pc, #144]	@ (800948c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80093fc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f003 031f 	and.w	r3, r3, #31
 8009404:	2201      	movs	r2, #1
 8009406:	409a      	lsls	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800940c:	e024      	b.n	8009458 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	3b10      	subs	r3, #16
 8009416:	4a1e      	ldr	r2, [pc, #120]	@ (8009490 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009418:	fba2 2303 	umull	r2, r3, r2, r3
 800941c:	091b      	lsrs	r3, r3, #4
 800941e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4a1c      	ldr	r2, [pc, #112]	@ (8009494 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d806      	bhi.n	8009436 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	4a1b      	ldr	r2, [pc, #108]	@ (8009498 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d902      	bls.n	8009436 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3308      	adds	r3, #8
 8009434:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4b18      	ldr	r3, [pc, #96]	@ (800949c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	461a      	mov	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a16      	ldr	r2, [pc, #88]	@ (80094a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009448:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f003 031f 	and.w	r3, r3, #31
 8009450:	2201      	movs	r2, #1
 8009452:	409a      	lsls	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009458:	bf00      	nop
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	58025408 	.word	0x58025408
 8009468:	5802541c 	.word	0x5802541c
 800946c:	58025430 	.word	0x58025430
 8009470:	58025444 	.word	0x58025444
 8009474:	58025458 	.word	0x58025458
 8009478:	5802546c 	.word	0x5802546c
 800947c:	58025480 	.word	0x58025480
 8009480:	58025494 	.word	0x58025494
 8009484:	cccccccd 	.word	0xcccccccd
 8009488:	16009600 	.word	0x16009600
 800948c:	58025880 	.word	0x58025880
 8009490:	aaaaaaab 	.word	0xaaaaaaab
 8009494:	400204b8 	.word	0x400204b8
 8009498:	4002040f 	.word	0x4002040f
 800949c:	10008200 	.word	0x10008200
 80094a0:	40020880 	.word	0x40020880

080094a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d04a      	beq.n	8009550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b08      	cmp	r3, #8
 80094be:	d847      	bhi.n	8009550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a25      	ldr	r2, [pc, #148]	@ (800955c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d022      	beq.n	8009510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a24      	ldr	r2, [pc, #144]	@ (8009560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d01d      	beq.n	8009510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a22      	ldr	r2, [pc, #136]	@ (8009564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d018      	beq.n	8009510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a21      	ldr	r2, [pc, #132]	@ (8009568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d013      	beq.n	8009510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a1f      	ldr	r2, [pc, #124]	@ (800956c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d00e      	beq.n	8009510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d009      	beq.n	8009510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a1c      	ldr	r2, [pc, #112]	@ (8009574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d004      	beq.n	8009510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a1b      	ldr	r2, [pc, #108]	@ (8009578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d101      	bne.n	8009514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009514:	2300      	movs	r3, #0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4b17      	ldr	r3, [pc, #92]	@ (800957c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800951e:	4413      	add	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	461a      	mov	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a15      	ldr	r2, [pc, #84]	@ (8009580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800952c:	671a      	str	r2, [r3, #112]	@ 0x70
 800952e:	e009      	b.n	8009544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4b14      	ldr	r3, [pc, #80]	@ (8009584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009534:	4413      	add	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	461a      	mov	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a11      	ldr	r2, [pc, #68]	@ (8009588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009542:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3b01      	subs	r3, #1
 8009548:	2201      	movs	r2, #1
 800954a:	409a      	lsls	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009550:	bf00      	nop
 8009552:	3714      	adds	r7, #20
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	58025408 	.word	0x58025408
 8009560:	5802541c 	.word	0x5802541c
 8009564:	58025430 	.word	0x58025430
 8009568:	58025444 	.word	0x58025444
 800956c:	58025458 	.word	0x58025458
 8009570:	5802546c 	.word	0x5802546c
 8009574:	58025480 	.word	0x58025480
 8009578:	58025494 	.word	0x58025494
 800957c:	1600963f 	.word	0x1600963f
 8009580:	58025940 	.word	0x58025940
 8009584:	1000823f 	.word	0x1000823f
 8009588:	40020940 	.word	0x40020940

0800958c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b098      	sub	sp, #96	@ 0x60
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8009594:	4a84      	ldr	r2, [pc, #528]	@ (80097a8 <HAL_FDCAN_Init+0x21c>)
 8009596:	f107 030c 	add.w	r3, r7, #12
 800959a:	4611      	mov	r1, r2
 800959c:	224c      	movs	r2, #76	@ 0x4c
 800959e:	4618      	mov	r0, r3
 80095a0:	f00e fa1b 	bl	80179da <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e1c6      	b.n	800993c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a7e      	ldr	r2, [pc, #504]	@ (80097ac <HAL_FDCAN_Init+0x220>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d106      	bne.n	80095c6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80095c0:	461a      	mov	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d106      	bne.n	80095e0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7f8 fb0e 	bl	8001bfc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	699a      	ldr	r2, [r3, #24]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f022 0210 	bic.w	r2, r2, #16
 80095ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095f0:	f7fc ff5a 	bl	80064a8 <HAL_GetTick>
 80095f4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80095f6:	e014      	b.n	8009622 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80095f8:	f7fc ff56 	bl	80064a8 <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b0a      	cmp	r3, #10
 8009604:	d90d      	bls.n	8009622 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800960c:	f043 0201 	orr.w	r2, r3, #1
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2203      	movs	r2, #3
 800961a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e18c      	b.n	800993c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	f003 0308 	and.w	r3, r3, #8
 800962c:	2b08      	cmp	r3, #8
 800962e:	d0e3      	beq.n	80095f8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699a      	ldr	r2, [r3, #24]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f042 0201 	orr.w	r2, r2, #1
 800963e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009640:	f7fc ff32 	bl	80064a8 <HAL_GetTick>
 8009644:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009646:	e014      	b.n	8009672 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009648:	f7fc ff2e 	bl	80064a8 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	2b0a      	cmp	r3, #10
 8009654:	d90d      	bls.n	8009672 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800965c:	f043 0201 	orr.w	r2, r3, #1
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2203      	movs	r2, #3
 800966a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e164      	b.n	800993c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b00      	cmp	r3, #0
 800967e:	d0e3      	beq.n	8009648 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	699a      	ldr	r2, [r3, #24]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0202 	orr.w	r2, r2, #2
 800968e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	7c1b      	ldrb	r3, [r3, #16]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d108      	bne.n	80096aa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	699a      	ldr	r2, [r3, #24]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096a6:	619a      	str	r2, [r3, #24]
 80096a8:	e007      	b.n	80096ba <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	699a      	ldr	r2, [r3, #24]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	7c5b      	ldrb	r3, [r3, #17]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d108      	bne.n	80096d4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	699a      	ldr	r2, [r3, #24]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096d0:	619a      	str	r2, [r3, #24]
 80096d2:	e007      	b.n	80096e4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	699a      	ldr	r2, [r3, #24]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80096e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	7c9b      	ldrb	r3, [r3, #18]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d108      	bne.n	80096fe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	699a      	ldr	r2, [r3, #24]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80096fa:	619a      	str	r2, [r3, #24]
 80096fc:	e007      	b.n	800970e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	699a      	ldr	r2, [r3, #24]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800970c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	430a      	orrs	r2, r1
 8009722:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8009732:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	691a      	ldr	r2, [r3, #16]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0210 	bic.w	r2, r2, #16
 8009742:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d108      	bne.n	800975e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	699a      	ldr	r2, [r3, #24]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f042 0204 	orr.w	r2, r2, #4
 800975a:	619a      	str	r2, [r3, #24]
 800975c:	e030      	b.n	80097c0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d02c      	beq.n	80097c0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	2b02      	cmp	r3, #2
 800976c:	d020      	beq.n	80097b0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	699a      	ldr	r2, [r3, #24]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800977c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	691a      	ldr	r2, [r3, #16]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f042 0210 	orr.w	r2, r2, #16
 800978c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	2b03      	cmp	r3, #3
 8009794:	d114      	bne.n	80097c0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	699a      	ldr	r2, [r3, #24]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f042 0220 	orr.w	r2, r2, #32
 80097a4:	619a      	str	r2, [r3, #24]
 80097a6:	e00b      	b.n	80097c0 <HAL_FDCAN_Init+0x234>
 80097a8:	080199a0 	.word	0x080199a0
 80097ac:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699a      	ldr	r2, [r3, #24]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0220 	orr.w	r2, r2, #32
 80097be:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80097d0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80097d8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80097e8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80097ea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097f4:	d115      	bne.n	8009822 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097fa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009800:	3b01      	subs	r3, #1
 8009802:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009804:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800980a:	3b01      	subs	r3, #1
 800980c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800980e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009816:	3b01      	subs	r3, #1
 8009818:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800981e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009820:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	430a      	orrs	r2, r1
 800983c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009848:	4413      	add	r3, r2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d011      	beq.n	8009872 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009856:	f023 0107 	bic.w	r1, r3, #7
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	3360      	adds	r3, #96	@ 0x60
 8009862:	443b      	add	r3, r7
 8009864:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	430a      	orrs	r2, r1
 800986e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009876:	2b00      	cmp	r3, #0
 8009878:	d011      	beq.n	800989e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009882:	f023 0107 	bic.w	r1, r3, #7
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	3360      	adds	r3, #96	@ 0x60
 800988e:	443b      	add	r3, r7
 8009890:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d012      	beq.n	80098cc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80098ae:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	3360      	adds	r3, #96	@ 0x60
 80098ba:	443b      	add	r3, r7
 80098bc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80098c0:	011a      	lsls	r2, r3, #4
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d012      	beq.n	80098fa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80098dc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	3360      	adds	r3, #96	@ 0x60
 80098e8:	443b      	add	r3, r7
 80098ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80098ee:	021a      	lsls	r2, r3, #8
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	430a      	orrs	r2, r1
 80098f6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a11      	ldr	r2, [pc, #68]	@ (8009944 <HAL_FDCAN_Init+0x3b8>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d107      	bne.n	8009914 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	689a      	ldr	r2, [r3, #8]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f022 0203 	bic.w	r2, r2, #3
 8009912:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f80b 	bl	8009948 <FDCAN_CalcultateRamBlockAddresses>
 8009932:	4603      	mov	r3, r0
 8009934:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8009938:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800993c:	4618      	mov	r0, r3
 800993e:	3760      	adds	r7, #96	@ 0x60
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	4000a000 	.word	0x4000a000

08009948 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009954:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800995e:	4ba7      	ldr	r3, [pc, #668]	@ (8009bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009960:	4013      	ands	r3, r2
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	0091      	lsls	r1, r2, #2
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	6812      	ldr	r2, [r2, #0]
 800996a:	430b      	orrs	r3, r1
 800996c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009978:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009980:	041a      	lsls	r2, r3, #16
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	430a      	orrs	r2, r1
 8009988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	4413      	add	r3, r2
 8009994:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800999e:	4b97      	ldr	r3, [pc, #604]	@ (8009bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80099a0:	4013      	ands	r3, r2
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	0091      	lsls	r1, r2, #2
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	6812      	ldr	r2, [r2, #0]
 80099aa:	430b      	orrs	r3, r1
 80099ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099b8:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099c0:	041a      	lsls	r2, r3, #16
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	430a      	orrs	r2, r1
 80099c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099d0:	005b      	lsls	r3, r3, #1
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	4413      	add	r3, r2
 80099d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80099e0:	4b86      	ldr	r3, [pc, #536]	@ (8009bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80099e2:	4013      	ands	r3, r2
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	0091      	lsls	r1, r2, #2
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6812      	ldr	r2, [r2, #0]
 80099ec:	430b      	orrs	r3, r1
 80099ee:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80099fa:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a02:	041a      	lsls	r2, r3, #16
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009a16:	fb02 f303 	mul.w	r3, r2, r3
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009a28:	4b74      	ldr	r3, [pc, #464]	@ (8009bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	0091      	lsls	r1, r2, #2
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6812      	ldr	r2, [r2, #0]
 8009a34:	430b      	orrs	r3, r1
 8009a36:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a42:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a4a:	041a      	lsls	r2, r3, #16
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	430a      	orrs	r2, r1
 8009a52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009a5e:	fb02 f303 	mul.w	r3, r2, r3
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	4413      	add	r3, r2
 8009a66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8009a70:	4b62      	ldr	r3, [pc, #392]	@ (8009bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009a72:	4013      	ands	r3, r2
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	0091      	lsls	r1, r2, #2
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	6812      	ldr	r2, [r2, #0]
 8009a7c:	430b      	orrs	r3, r1
 8009a7e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	4413      	add	r3, r2
 8009a92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8009a9c:	4b57      	ldr	r3, [pc, #348]	@ (8009bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	0091      	lsls	r1, r2, #2
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6812      	ldr	r2, [r2, #0]
 8009aa8:	430b      	orrs	r3, r1
 8009aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ab6:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009abe:	041a      	lsls	r2, r3, #16
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009ade:	4b47      	ldr	r3, [pc, #284]	@ (8009bfc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	0091      	lsls	r1, r2, #2
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	430b      	orrs	r3, r1
 8009aec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009af8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b00:	041a      	lsls	r2, r3, #16
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009b14:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b1c:	061a      	lsls	r2, r3, #24
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	430a      	orrs	r2, r1
 8009b24:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b2c:	4b34      	ldr	r3, [pc, #208]	@ (8009c00 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8009b2e:	4413      	add	r3, r2
 8009b30:	009a      	lsls	r2, r3, #2
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	441a      	add	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	441a      	add	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8009b62:	fb01 f303 	mul.w	r3, r1, r3
 8009b66:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009b68:	441a      	add	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8009b7a:	fb01 f303 	mul.w	r3, r1, r3
 8009b7e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009b80:	441a      	add	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8009b92:	fb01 f303 	mul.w	r3, r1, r3
 8009b96:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009b98:	441a      	add	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009baa:	00db      	lsls	r3, r3, #3
 8009bac:	441a      	add	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009bc2:	fb01 f303 	mul.w	r3, r1, r3
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	441a      	add	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bda:	6879      	ldr	r1, [r7, #4]
 8009bdc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009bde:	fb01 f303 	mul.w	r3, r1, r3
 8009be2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8009be4:	441a      	add	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf2:	4a04      	ldr	r2, [pc, #16]	@ (8009c04 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d915      	bls.n	8009c24 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8009bf8:	e006      	b.n	8009c08 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8009bfa:	bf00      	nop
 8009bfc:	ffff0003 	.word	0xffff0003
 8009c00:	10002b00 	.word	0x10002b00
 8009c04:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c0e:	f043 0220 	orr.w	r2, r3, #32
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2203      	movs	r2, #3
 8009c1c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e010      	b.n	8009c46 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c28:	60fb      	str	r3, [r7, #12]
 8009c2a:	e005      	b.n	8009c38 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3304      	adds	r3, #4
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d3f3      	bcc.n	8009c2c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop

08009c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b089      	sub	sp, #36	@ 0x24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009c62:	4b89      	ldr	r3, [pc, #548]	@ (8009e88 <HAL_GPIO_Init+0x234>)
 8009c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009c66:	e194      	b.n	8009f92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	2101      	movs	r1, #1
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	fa01 f303 	lsl.w	r3, r1, r3
 8009c74:	4013      	ands	r3, r2
 8009c76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 8186 	beq.w	8009f8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	f003 0303 	and.w	r3, r3, #3
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d005      	beq.n	8009c98 <HAL_GPIO_Init+0x44>
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	f003 0303 	and.w	r3, r3, #3
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d130      	bne.n	8009cfa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	2203      	movs	r2, #3
 8009ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca8:	43db      	mvns	r3, r3
 8009caa:	69ba      	ldr	r2, [r7, #24]
 8009cac:	4013      	ands	r3, r2
 8009cae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	68da      	ldr	r2, [r3, #12]
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbc:	69ba      	ldr	r2, [r7, #24]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009cce:	2201      	movs	r2, #1
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd6:	43db      	mvns	r3, r3
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	4013      	ands	r3, r2
 8009cdc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	091b      	lsrs	r3, r3, #4
 8009ce4:	f003 0201 	and.w	r2, r3, #1
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	fa02 f303 	lsl.w	r3, r2, r3
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	69ba      	ldr	r2, [r7, #24]
 8009cf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f003 0303 	and.w	r3, r3, #3
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	d017      	beq.n	8009d36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	2203      	movs	r2, #3
 8009d12:	fa02 f303 	lsl.w	r3, r2, r3
 8009d16:	43db      	mvns	r3, r3
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	689a      	ldr	r2, [r3, #8]
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	f003 0303 	and.w	r3, r3, #3
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d123      	bne.n	8009d8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	08da      	lsrs	r2, r3, #3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	3208      	adds	r2, #8
 8009d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	f003 0307 	and.w	r3, r3, #7
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	220f      	movs	r2, #15
 8009d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5e:	43db      	mvns	r3, r3
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	4013      	ands	r3, r2
 8009d64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	691a      	ldr	r2, [r3, #16]
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	f003 0307 	and.w	r3, r3, #7
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	fa02 f303 	lsl.w	r3, r2, r3
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	08da      	lsrs	r2, r3, #3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	3208      	adds	r2, #8
 8009d84:	69b9      	ldr	r1, [r7, #24]
 8009d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	2203      	movs	r2, #3
 8009d96:	fa02 f303 	lsl.w	r3, r2, r3
 8009d9a:	43db      	mvns	r3, r3
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	4013      	ands	r3, r2
 8009da0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f003 0203 	and.w	r2, r3, #3
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	fa02 f303 	lsl.w	r3, r2, r3
 8009db2:	69ba      	ldr	r2, [r7, #24]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	69ba      	ldr	r2, [r7, #24]
 8009dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 80e0 	beq.w	8009f8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8009e8c <HAL_GPIO_Init+0x238>)
 8009dce:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8009dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8009e8c <HAL_GPIO_Init+0x238>)
 8009dd4:	f043 0302 	orr.w	r3, r3, #2
 8009dd8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8009ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8009e8c <HAL_GPIO_Init+0x238>)
 8009dde:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8009de2:	f003 0302 	and.w	r3, r3, #2
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009dea:	4a29      	ldr	r2, [pc, #164]	@ (8009e90 <HAL_GPIO_Init+0x23c>)
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	089b      	lsrs	r3, r3, #2
 8009df0:	3302      	adds	r3, #2
 8009df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	f003 0303 	and.w	r3, r3, #3
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	220f      	movs	r2, #15
 8009e02:	fa02 f303 	lsl.w	r3, r2, r3
 8009e06:	43db      	mvns	r3, r3
 8009e08:	69ba      	ldr	r2, [r7, #24]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a20      	ldr	r2, [pc, #128]	@ (8009e94 <HAL_GPIO_Init+0x240>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d052      	beq.n	8009ebc <HAL_GPIO_Init+0x268>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a1f      	ldr	r2, [pc, #124]	@ (8009e98 <HAL_GPIO_Init+0x244>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d031      	beq.n	8009e82 <HAL_GPIO_Init+0x22e>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a1e      	ldr	r2, [pc, #120]	@ (8009e9c <HAL_GPIO_Init+0x248>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d02b      	beq.n	8009e7e <HAL_GPIO_Init+0x22a>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea0 <HAL_GPIO_Init+0x24c>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d025      	beq.n	8009e7a <HAL_GPIO_Init+0x226>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a1c      	ldr	r2, [pc, #112]	@ (8009ea4 <HAL_GPIO_Init+0x250>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d01f      	beq.n	8009e76 <HAL_GPIO_Init+0x222>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a1b      	ldr	r2, [pc, #108]	@ (8009ea8 <HAL_GPIO_Init+0x254>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d019      	beq.n	8009e72 <HAL_GPIO_Init+0x21e>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a1a      	ldr	r2, [pc, #104]	@ (8009eac <HAL_GPIO_Init+0x258>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d013      	beq.n	8009e6e <HAL_GPIO_Init+0x21a>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a19      	ldr	r2, [pc, #100]	@ (8009eb0 <HAL_GPIO_Init+0x25c>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d00d      	beq.n	8009e6a <HAL_GPIO_Init+0x216>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a18      	ldr	r2, [pc, #96]	@ (8009eb4 <HAL_GPIO_Init+0x260>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d007      	beq.n	8009e66 <HAL_GPIO_Init+0x212>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a17      	ldr	r2, [pc, #92]	@ (8009eb8 <HAL_GPIO_Init+0x264>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d101      	bne.n	8009e62 <HAL_GPIO_Init+0x20e>
 8009e5e:	2309      	movs	r3, #9
 8009e60:	e02d      	b.n	8009ebe <HAL_GPIO_Init+0x26a>
 8009e62:	230a      	movs	r3, #10
 8009e64:	e02b      	b.n	8009ebe <HAL_GPIO_Init+0x26a>
 8009e66:	2308      	movs	r3, #8
 8009e68:	e029      	b.n	8009ebe <HAL_GPIO_Init+0x26a>
 8009e6a:	2307      	movs	r3, #7
 8009e6c:	e027      	b.n	8009ebe <HAL_GPIO_Init+0x26a>
 8009e6e:	2306      	movs	r3, #6
 8009e70:	e025      	b.n	8009ebe <HAL_GPIO_Init+0x26a>
 8009e72:	2305      	movs	r3, #5
 8009e74:	e023      	b.n	8009ebe <HAL_GPIO_Init+0x26a>
 8009e76:	2304      	movs	r3, #4
 8009e78:	e021      	b.n	8009ebe <HAL_GPIO_Init+0x26a>
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e01f      	b.n	8009ebe <HAL_GPIO_Init+0x26a>
 8009e7e:	2302      	movs	r3, #2
 8009e80:	e01d      	b.n	8009ebe <HAL_GPIO_Init+0x26a>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e01b      	b.n	8009ebe <HAL_GPIO_Init+0x26a>
 8009e86:	bf00      	nop
 8009e88:	58000080 	.word	0x58000080
 8009e8c:	58024400 	.word	0x58024400
 8009e90:	58000400 	.word	0x58000400
 8009e94:	58020000 	.word	0x58020000
 8009e98:	58020400 	.word	0x58020400
 8009e9c:	58020800 	.word	0x58020800
 8009ea0:	58020c00 	.word	0x58020c00
 8009ea4:	58021000 	.word	0x58021000
 8009ea8:	58021400 	.word	0x58021400
 8009eac:	58021800 	.word	0x58021800
 8009eb0:	58021c00 	.word	0x58021c00
 8009eb4:	58022000 	.word	0x58022000
 8009eb8:	58022400 	.word	0x58022400
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	69fa      	ldr	r2, [r7, #28]
 8009ec0:	f002 0203 	and.w	r2, r2, #3
 8009ec4:	0092      	lsls	r2, r2, #2
 8009ec6:	4093      	lsls	r3, r2
 8009ec8:	69ba      	ldr	r2, [r7, #24]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ece:	4938      	ldr	r1, [pc, #224]	@ (8009fb0 <HAL_GPIO_Init+0x35c>)
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	089b      	lsrs	r3, r3, #2
 8009ed4:	3302      	adds	r3, #2
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	43db      	mvns	r3, r3
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	4013      	ands	r3, r2
 8009eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009efa:	69ba      	ldr	r2, [r7, #24]
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009f02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	43db      	mvns	r3, r3
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	4013      	ands	r3, r2
 8009f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d003      	beq.n	8009f30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009f28:	69ba      	ldr	r2, [r7, #24]
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009f30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	43db      	mvns	r3, r3
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	4013      	ands	r3, r2
 8009f46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d003      	beq.n	8009f5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	69ba      	ldr	r2, [r7, #24]
 8009f60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	43db      	mvns	r3, r3
 8009f6c:	69ba      	ldr	r2, [r7, #24]
 8009f6e:	4013      	ands	r3, r2
 8009f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	fa22 f303 	lsr.w	r3, r2, r3
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f47f ae63 	bne.w	8009c68 <HAL_GPIO_Init+0x14>
  }
}
 8009fa2:	bf00      	nop
 8009fa4:	bf00      	nop
 8009fa6:	3724      	adds	r7, #36	@ 0x24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	58000400 	.word	0x58000400

08009fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	807b      	strh	r3, [r7, #2]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009fc4:	787b      	ldrb	r3, [r7, #1]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d003      	beq.n	8009fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009fca:	887a      	ldrh	r2, [r7, #2]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009fd0:	e003      	b.n	8009fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009fd2:	887b      	ldrh	r3, [r7, #2]
 8009fd4:	041a      	lsls	r2, r3, #16
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	619a      	str	r2, [r3, #24]
}
 8009fda:	bf00      	nop
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
	...

08009fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e08b      	b.n	800a112 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d106      	bne.n	800a014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7f8 f8b8 	bl	8002184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2224      	movs	r2, #36	@ 0x24
 800a018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f022 0201 	bic.w	r2, r2, #1
 800a02a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a038:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a048:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d107      	bne.n	800a062 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	689a      	ldr	r2, [r3, #8]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a05e:	609a      	str	r2, [r3, #8]
 800a060:	e006      	b.n	800a070 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689a      	ldr	r2, [r3, #8]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a06e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	2b02      	cmp	r3, #2
 800a076:	d108      	bne.n	800a08a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685a      	ldr	r2, [r3, #4]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a086:	605a      	str	r2, [r3, #4]
 800a088:	e007      	b.n	800a09a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a098:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6859      	ldr	r1, [r3, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	4b1d      	ldr	r3, [pc, #116]	@ (800a11c <HAL_I2C_Init+0x134>)
 800a0a6:	430b      	orrs	r3, r1
 800a0a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68da      	ldr	r2, [r3, #12]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a0b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	691a      	ldr	r2, [r3, #16]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	430a      	orrs	r2, r1
 800a0d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	69d9      	ldr	r1, [r3, #28]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a1a      	ldr	r2, [r3, #32]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	430a      	orrs	r2, r1
 800a0e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f042 0201 	orr.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2220      	movs	r2, #32
 800a0fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	02008000 	.word	0x02008000

0800a120 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b20      	cmp	r3, #32
 800a134:	d138      	bne.n	800a1a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d101      	bne.n	800a144 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a140:	2302      	movs	r3, #2
 800a142:	e032      	b.n	800a1aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2224      	movs	r2, #36	@ 0x24
 800a150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 0201 	bic.w	r2, r2, #1
 800a162:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a172:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6819      	ldr	r1, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	430a      	orrs	r2, r1
 800a182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f042 0201 	orr.w	r2, r2, #1
 800a192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2220      	movs	r2, #32
 800a198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	e000      	b.n	800a1aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a1a8:	2302      	movs	r3, #2
  }
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b085      	sub	sp, #20
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	d139      	bne.n	800a240 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d101      	bne.n	800a1da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	e033      	b.n	800a242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2224      	movs	r2, #36	@ 0x24
 800a1e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f022 0201 	bic.w	r2, r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a208:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	021b      	lsls	r3, r3, #8
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	4313      	orrs	r3, r2
 800a212:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f042 0201 	orr.w	r2, r2, #1
 800a22a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2220      	movs	r2, #32
 800a230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	e000      	b.n	800a242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a240:	2302      	movs	r3, #2
  }
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
	...

0800a250 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a258:	4b19      	ldr	r3, [pc, #100]	@ (800a2c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b04      	cmp	r3, #4
 800a262:	d00a      	beq.n	800a27a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a264:	4b16      	ldr	r3, [pc, #88]	@ (800a2c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f003 0307 	and.w	r3, r3, #7
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d001      	beq.n	800a276 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e01f      	b.n	800a2b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	e01d      	b.n	800a2b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a27a:	4b11      	ldr	r3, [pc, #68]	@ (800a2c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f023 0207 	bic.w	r2, r3, #7
 800a282:	490f      	ldr	r1, [pc, #60]	@ (800a2c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4313      	orrs	r3, r2
 800a288:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a28a:	f7fc f90d 	bl	80064a8 <HAL_GetTick>
 800a28e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a290:	e009      	b.n	800a2a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a292:	f7fc f909 	bl	80064a8 <HAL_GetTick>
 800a296:	4602      	mov	r2, r0
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a2a0:	d901      	bls.n	800a2a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e007      	b.n	800a2b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a2a6:	4b06      	ldr	r3, [pc, #24]	@ (800a2c0 <HAL_PWREx_ConfigSupply+0x70>)
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2b2:	d1ee      	bne.n	800a292 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	58024800 	.word	0x58024800

0800a2c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b08c      	sub	sp, #48	@ 0x30
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	f000 bc1f 	b.w	800ab16 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0301 	and.w	r3, r3, #1
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 80b3 	beq.w	800a44c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2e6:	4b95      	ldr	r3, [pc, #596]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2f0:	4b92      	ldr	r3, [pc, #584]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a2f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f8:	2b10      	cmp	r3, #16
 800a2fa:	d007      	beq.n	800a30c <HAL_RCC_OscConfig+0x48>
 800a2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fe:	2b18      	cmp	r3, #24
 800a300:	d112      	bne.n	800a328 <HAL_RCC_OscConfig+0x64>
 800a302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a304:	f003 0303 	and.w	r3, r3, #3
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d10d      	bne.n	800a328 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a30c:	4b8b      	ldr	r3, [pc, #556]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 8098 	beq.w	800a44a <HAL_RCC_OscConfig+0x186>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f040 8093 	bne.w	800a44a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e3f6      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a330:	d106      	bne.n	800a340 <HAL_RCC_OscConfig+0x7c>
 800a332:	4b82      	ldr	r3, [pc, #520]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a81      	ldr	r2, [pc, #516]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	e058      	b.n	800a3f2 <HAL_RCC_OscConfig+0x12e>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d112      	bne.n	800a36e <HAL_RCC_OscConfig+0xaa>
 800a348:	4b7c      	ldr	r3, [pc, #496]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a7b      	ldr	r2, [pc, #492]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a34e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	4b79      	ldr	r3, [pc, #484]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a78      	ldr	r2, [pc, #480]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a35a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	4b76      	ldr	r3, [pc, #472]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a75      	ldr	r2, [pc, #468]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	e041      	b.n	800a3f2 <HAL_RCC_OscConfig+0x12e>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a376:	d112      	bne.n	800a39e <HAL_RCC_OscConfig+0xda>
 800a378:	4b70      	ldr	r3, [pc, #448]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a6f      	ldr	r2, [pc, #444]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a37e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	4b6d      	ldr	r3, [pc, #436]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a6c      	ldr	r2, [pc, #432]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a38a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	4b6a      	ldr	r3, [pc, #424]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a69      	ldr	r2, [pc, #420]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a39a:	6013      	str	r3, [r2, #0]
 800a39c:	e029      	b.n	800a3f2 <HAL_RCC_OscConfig+0x12e>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a3a6:	d112      	bne.n	800a3ce <HAL_RCC_OscConfig+0x10a>
 800a3a8:	4b64      	ldr	r3, [pc, #400]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a63      	ldr	r2, [pc, #396]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a3b2:	6013      	str	r3, [r2, #0]
 800a3b4:	4b61      	ldr	r3, [pc, #388]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a60      	ldr	r2, [pc, #384]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a3be:	6013      	str	r3, [r2, #0]
 800a3c0:	4b5e      	ldr	r3, [pc, #376]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a5d      	ldr	r2, [pc, #372]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	e011      	b.n	800a3f2 <HAL_RCC_OscConfig+0x12e>
 800a3ce:	4b5b      	ldr	r3, [pc, #364]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a5a      	ldr	r2, [pc, #360]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	4b58      	ldr	r3, [pc, #352]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a57      	ldr	r2, [pc, #348]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3e4:	6013      	str	r3, [r2, #0]
 800a3e6:	4b55      	ldr	r3, [pc, #340]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a54      	ldr	r2, [pc, #336]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a3ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a3f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d013      	beq.n	800a422 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3fa:	f7fc f855 	bl	80064a8 <HAL_GetTick>
 800a3fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a400:	e008      	b.n	800a414 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a402:	f7fc f851 	bl	80064a8 <HAL_GetTick>
 800a406:	4602      	mov	r2, r0
 800a408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	2b64      	cmp	r3, #100	@ 0x64
 800a40e:	d901      	bls.n	800a414 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a410:	2303      	movs	r3, #3
 800a412:	e380      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a414:	4b49      	ldr	r3, [pc, #292]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d0f0      	beq.n	800a402 <HAL_RCC_OscConfig+0x13e>
 800a420:	e014      	b.n	800a44c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a422:	f7fc f841 	bl	80064a8 <HAL_GetTick>
 800a426:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a428:	e008      	b.n	800a43c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a42a:	f7fc f83d 	bl	80064a8 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b64      	cmp	r3, #100	@ 0x64
 800a436:	d901      	bls.n	800a43c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e36c      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a43c:	4b3f      	ldr	r3, [pc, #252]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1f0      	bne.n	800a42a <HAL_RCC_OscConfig+0x166>
 800a448:	e000      	b.n	800a44c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a44a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 808c 	beq.w	800a572 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a45a:	4b38      	ldr	r3, [pc, #224]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a462:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a464:	4b35      	ldr	r3, [pc, #212]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a468:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a46a:	6a3b      	ldr	r3, [r7, #32]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d007      	beq.n	800a480 <HAL_RCC_OscConfig+0x1bc>
 800a470:	6a3b      	ldr	r3, [r7, #32]
 800a472:	2b18      	cmp	r3, #24
 800a474:	d137      	bne.n	800a4e6 <HAL_RCC_OscConfig+0x222>
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	f003 0303 	and.w	r3, r3, #3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d132      	bne.n	800a4e6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a480:	4b2e      	ldr	r3, [pc, #184]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0304 	and.w	r3, r3, #4
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d005      	beq.n	800a498 <HAL_RCC_OscConfig+0x1d4>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e33e      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a498:	4b28      	ldr	r3, [pc, #160]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f023 0219 	bic.w	r2, r3, #25
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	4925      	ldr	r1, [pc, #148]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4aa:	f7fb fffd 	bl	80064a8 <HAL_GetTick>
 800a4ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4b0:	e008      	b.n	800a4c4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4b2:	f7fb fff9 	bl	80064a8 <HAL_GetTick>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d901      	bls.n	800a4c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e328      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d0f0      	beq.n	800a4b2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	061b      	lsls	r3, r3, #24
 800a4de:	4917      	ldr	r1, [pc, #92]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a4e4:	e045      	b.n	800a572 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d028      	beq.n	800a540 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a4ee:	4b13      	ldr	r3, [pc, #76]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f023 0219 	bic.w	r2, r3, #25
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	4910      	ldr	r1, [pc, #64]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a500:	f7fb ffd2 	bl	80064a8 <HAL_GetTick>
 800a504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a506:	e008      	b.n	800a51a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a508:	f7fb ffce 	bl	80064a8 <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b02      	cmp	r3, #2
 800a514:	d901      	bls.n	800a51a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e2fd      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a51a:	4b08      	ldr	r3, [pc, #32]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0304 	and.w	r3, r3, #4
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0f0      	beq.n	800a508 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a526:	4b05      	ldr	r3, [pc, #20]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	061b      	lsls	r3, r3, #24
 800a534:	4901      	ldr	r1, [pc, #4]	@ (800a53c <HAL_RCC_OscConfig+0x278>)
 800a536:	4313      	orrs	r3, r2
 800a538:	604b      	str	r3, [r1, #4]
 800a53a:	e01a      	b.n	800a572 <HAL_RCC_OscConfig+0x2ae>
 800a53c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a540:	4b97      	ldr	r3, [pc, #604]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a96      	ldr	r2, [pc, #600]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a546:	f023 0301 	bic.w	r3, r3, #1
 800a54a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a54c:	f7fb ffac 	bl	80064a8 <HAL_GetTick>
 800a550:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a552:	e008      	b.n	800a566 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a554:	f7fb ffa8 	bl	80064a8 <HAL_GetTick>
 800a558:	4602      	mov	r2, r0
 800a55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d901      	bls.n	800a566 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e2d7      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a566:	4b8e      	ldr	r3, [pc, #568]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 0304 	and.w	r3, r3, #4
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1f0      	bne.n	800a554 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0310 	and.w	r3, r3, #16
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d06a      	beq.n	800a654 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a57e:	4b88      	ldr	r3, [pc, #544]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a586:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a588:	4b85      	ldr	r3, [pc, #532]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a58a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a58c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	2b08      	cmp	r3, #8
 800a592:	d007      	beq.n	800a5a4 <HAL_RCC_OscConfig+0x2e0>
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	2b18      	cmp	r3, #24
 800a598:	d11b      	bne.n	800a5d2 <HAL_RCC_OscConfig+0x30e>
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f003 0303 	and.w	r3, r3, #3
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d116      	bne.n	800a5d2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5a4:	4b7e      	ldr	r3, [pc, #504]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d005      	beq.n	800a5bc <HAL_RCC_OscConfig+0x2f8>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	2b80      	cmp	r3, #128	@ 0x80
 800a5b6:	d001      	beq.n	800a5bc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e2ac      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5bc:	4b78      	ldr	r3, [pc, #480]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	061b      	lsls	r3, r3, #24
 800a5ca:	4975      	ldr	r1, [pc, #468]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5d0:	e040      	b.n	800a654 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d023      	beq.n	800a622 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a5da:	4b71      	ldr	r3, [pc, #452]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a70      	ldr	r2, [pc, #448]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a5e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5e6:	f7fb ff5f 	bl	80064a8 <HAL_GetTick>
 800a5ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a5ec:	e008      	b.n	800a600 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a5ee:	f7fb ff5b 	bl	80064a8 <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d901      	bls.n	800a600 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e28a      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a600:	4b67      	ldr	r3, [pc, #412]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d0f0      	beq.n	800a5ee <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a60c:	4b64      	ldr	r3, [pc, #400]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a1b      	ldr	r3, [r3, #32]
 800a618:	061b      	lsls	r3, r3, #24
 800a61a:	4961      	ldr	r1, [pc, #388]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a61c:	4313      	orrs	r3, r2
 800a61e:	60cb      	str	r3, [r1, #12]
 800a620:	e018      	b.n	800a654 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a622:	4b5f      	ldr	r3, [pc, #380]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a5e      	ldr	r2, [pc, #376]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a62c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a62e:	f7fb ff3b 	bl	80064a8 <HAL_GetTick>
 800a632:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a634:	e008      	b.n	800a648 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a636:	f7fb ff37 	bl	80064a8 <HAL_GetTick>
 800a63a:	4602      	mov	r2, r0
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	2b02      	cmp	r3, #2
 800a642:	d901      	bls.n	800a648 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e266      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a648:	4b55      	ldr	r3, [pc, #340]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1f0      	bne.n	800a636 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0308 	and.w	r3, r3, #8
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d036      	beq.n	800a6ce <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	695b      	ldr	r3, [r3, #20]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d019      	beq.n	800a69c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a668:	4b4d      	ldr	r3, [pc, #308]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a66a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a66c:	4a4c      	ldr	r2, [pc, #304]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a66e:	f043 0301 	orr.w	r3, r3, #1
 800a672:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a674:	f7fb ff18 	bl	80064a8 <HAL_GetTick>
 800a678:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a67a:	e008      	b.n	800a68e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a67c:	f7fb ff14 	bl	80064a8 <HAL_GetTick>
 800a680:	4602      	mov	r2, r0
 800a682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	2b02      	cmp	r3, #2
 800a688:	d901      	bls.n	800a68e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e243      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a68e:	4b44      	ldr	r3, [pc, #272]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0f0      	beq.n	800a67c <HAL_RCC_OscConfig+0x3b8>
 800a69a:	e018      	b.n	800a6ce <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a69c:	4b40      	ldr	r3, [pc, #256]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a69e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6a0:	4a3f      	ldr	r2, [pc, #252]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a6a2:	f023 0301 	bic.w	r3, r3, #1
 800a6a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6a8:	f7fb fefe 	bl	80064a8 <HAL_GetTick>
 800a6ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a6ae:	e008      	b.n	800a6c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6b0:	f7fb fefa 	bl	80064a8 <HAL_GetTick>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d901      	bls.n	800a6c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e229      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a6c2:	4b37      	ldr	r3, [pc, #220]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a6c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6c6:	f003 0302 	and.w	r3, r3, #2
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1f0      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d036      	beq.n	800a748 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d019      	beq.n	800a716 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a6e2:	4b2f      	ldr	r3, [pc, #188]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a2e      	ldr	r2, [pc, #184]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a6e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a6ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a6ee:	f7fb fedb 	bl	80064a8 <HAL_GetTick>
 800a6f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a6f4:	e008      	b.n	800a708 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a6f6:	f7fb fed7 	bl	80064a8 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	2b02      	cmp	r3, #2
 800a702:	d901      	bls.n	800a708 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e206      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a708:	4b25      	ldr	r3, [pc, #148]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0f0      	beq.n	800a6f6 <HAL_RCC_OscConfig+0x432>
 800a714:	e018      	b.n	800a748 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a716:	4b22      	ldr	r3, [pc, #136]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a21      	ldr	r2, [pc, #132]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a71c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a720:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a722:	f7fb fec1 	bl	80064a8 <HAL_GetTick>
 800a726:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a728:	e008      	b.n	800a73c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a72a:	f7fb febd 	bl	80064a8 <HAL_GetTick>
 800a72e:	4602      	mov	r2, r0
 800a730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	2b02      	cmp	r3, #2
 800a736:	d901      	bls.n	800a73c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a738:	2303      	movs	r3, #3
 800a73a:	e1ec      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a73c:	4b18      	ldr	r3, [pc, #96]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1f0      	bne.n	800a72a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 80af 	beq.w	800a8b4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a756:	4b13      	ldr	r3, [pc, #76]	@ (800a7a4 <HAL_RCC_OscConfig+0x4e0>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a12      	ldr	r2, [pc, #72]	@ (800a7a4 <HAL_RCC_OscConfig+0x4e0>)
 800a75c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a762:	f7fb fea1 	bl	80064a8 <HAL_GetTick>
 800a766:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a768:	e008      	b.n	800a77c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a76a:	f7fb fe9d 	bl	80064a8 <HAL_GetTick>
 800a76e:	4602      	mov	r2, r0
 800a770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	2b64      	cmp	r3, #100	@ 0x64
 800a776:	d901      	bls.n	800a77c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a778:	2303      	movs	r3, #3
 800a77a:	e1cc      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a77c:	4b09      	ldr	r3, [pc, #36]	@ (800a7a4 <HAL_RCC_OscConfig+0x4e0>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a784:	2b00      	cmp	r3, #0
 800a786:	d0f0      	beq.n	800a76a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d10b      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x4e4>
 800a790:	4b03      	ldr	r3, [pc, #12]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a794:	4a02      	ldr	r2, [pc, #8]	@ (800a7a0 <HAL_RCC_OscConfig+0x4dc>)
 800a796:	f043 0301 	orr.w	r3, r3, #1
 800a79a:	6713      	str	r3, [r2, #112]	@ 0x70
 800a79c:	e05b      	b.n	800a856 <HAL_RCC_OscConfig+0x592>
 800a79e:	bf00      	nop
 800a7a0:	58024400 	.word	0x58024400
 800a7a4:	58024800 	.word	0x58024800
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d112      	bne.n	800a7d6 <HAL_RCC_OscConfig+0x512>
 800a7b0:	4b9d      	ldr	r3, [pc, #628]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7b4:	4a9c      	ldr	r2, [pc, #624]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7b6:	f023 0301 	bic.w	r3, r3, #1
 800a7ba:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7bc:	4b9a      	ldr	r3, [pc, #616]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7c0:	4a99      	ldr	r2, [pc, #612]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7c6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7c8:	4b97      	ldr	r3, [pc, #604]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7cc:	4a96      	ldr	r2, [pc, #600]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7ce:	f023 0304 	bic.w	r3, r3, #4
 800a7d2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7d4:	e03f      	b.n	800a856 <HAL_RCC_OscConfig+0x592>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	2b05      	cmp	r3, #5
 800a7dc:	d112      	bne.n	800a804 <HAL_RCC_OscConfig+0x540>
 800a7de:	4b92      	ldr	r3, [pc, #584]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7e2:	4a91      	ldr	r2, [pc, #580]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7e4:	f043 0304 	orr.w	r3, r3, #4
 800a7e8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7ea:	4b8f      	ldr	r3, [pc, #572]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7ee:	4a8e      	ldr	r2, [pc, #568]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7f4:	6713      	str	r3, [r2, #112]	@ 0x70
 800a7f6:	4b8c      	ldr	r3, [pc, #560]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7fa:	4a8b      	ldr	r2, [pc, #556]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a7fc:	f043 0301 	orr.w	r3, r3, #1
 800a800:	6713      	str	r3, [r2, #112]	@ 0x70
 800a802:	e028      	b.n	800a856 <HAL_RCC_OscConfig+0x592>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	2b85      	cmp	r3, #133	@ 0x85
 800a80a:	d112      	bne.n	800a832 <HAL_RCC_OscConfig+0x56e>
 800a80c:	4b86      	ldr	r3, [pc, #536]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a80e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a810:	4a85      	ldr	r2, [pc, #532]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a812:	f043 0304 	orr.w	r3, r3, #4
 800a816:	6713      	str	r3, [r2, #112]	@ 0x70
 800a818:	4b83      	ldr	r3, [pc, #524]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a81a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a81c:	4a82      	ldr	r2, [pc, #520]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a822:	6713      	str	r3, [r2, #112]	@ 0x70
 800a824:	4b80      	ldr	r3, [pc, #512]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a828:	4a7f      	ldr	r2, [pc, #508]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a82a:	f043 0301 	orr.w	r3, r3, #1
 800a82e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a830:	e011      	b.n	800a856 <HAL_RCC_OscConfig+0x592>
 800a832:	4b7d      	ldr	r3, [pc, #500]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a836:	4a7c      	ldr	r2, [pc, #496]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a838:	f023 0301 	bic.w	r3, r3, #1
 800a83c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a83e:	4b7a      	ldr	r3, [pc, #488]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a842:	4a79      	ldr	r2, [pc, #484]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a844:	f023 0304 	bic.w	r3, r3, #4
 800a848:	6713      	str	r3, [r2, #112]	@ 0x70
 800a84a:	4b77      	ldr	r3, [pc, #476]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a84c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a84e:	4a76      	ldr	r2, [pc, #472]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a850:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a854:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d015      	beq.n	800a88a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a85e:	f7fb fe23 	bl	80064a8 <HAL_GetTick>
 800a862:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a864:	e00a      	b.n	800a87c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a866:	f7fb fe1f 	bl	80064a8 <HAL_GetTick>
 800a86a:	4602      	mov	r2, r0
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a874:	4293      	cmp	r3, r2
 800a876:	d901      	bls.n	800a87c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e14c      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a87c:	4b6a      	ldr	r3, [pc, #424]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a87e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b00      	cmp	r3, #0
 800a886:	d0ee      	beq.n	800a866 <HAL_RCC_OscConfig+0x5a2>
 800a888:	e014      	b.n	800a8b4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a88a:	f7fb fe0d 	bl	80064a8 <HAL_GetTick>
 800a88e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a890:	e00a      	b.n	800a8a8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a892:	f7fb fe09 	bl	80064a8 <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d901      	bls.n	800a8a8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e136      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8a8:	4b5f      	ldr	r3, [pc, #380]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a8aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1ee      	bne.n	800a892 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 812b 	beq.w	800ab14 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a8be:	4b5a      	ldr	r3, [pc, #360]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8c6:	2b18      	cmp	r3, #24
 800a8c8:	f000 80bb 	beq.w	800aa42 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	f040 8095 	bne.w	800aa00 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8d6:	4b54      	ldr	r3, [pc, #336]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a53      	ldr	r2, [pc, #332]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a8dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8e2:	f7fb fde1 	bl	80064a8 <HAL_GetTick>
 800a8e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8e8:	e008      	b.n	800a8fc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8ea:	f7fb fddd 	bl	80064a8 <HAL_GetTick>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d901      	bls.n	800a8fc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e10c      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8fc:	4b4a      	ldr	r3, [pc, #296]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1f0      	bne.n	800a8ea <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a908:	4b47      	ldr	r3, [pc, #284]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a90a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a90c:	4b47      	ldr	r3, [pc, #284]	@ (800aa2c <HAL_RCC_OscConfig+0x768>)
 800a90e:	4013      	ands	r3, r2
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a918:	0112      	lsls	r2, r2, #4
 800a91a:	430a      	orrs	r2, r1
 800a91c:	4942      	ldr	r1, [pc, #264]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a91e:	4313      	orrs	r3, r2
 800a920:	628b      	str	r3, [r1, #40]	@ 0x28
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a926:	3b01      	subs	r3, #1
 800a928:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a930:	3b01      	subs	r3, #1
 800a932:	025b      	lsls	r3, r3, #9
 800a934:	b29b      	uxth	r3, r3
 800a936:	431a      	orrs	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a93c:	3b01      	subs	r3, #1
 800a93e:	041b      	lsls	r3, r3, #16
 800a940:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a944:	431a      	orrs	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a94a:	3b01      	subs	r3, #1
 800a94c:	061b      	lsls	r3, r3, #24
 800a94e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a952:	4935      	ldr	r1, [pc, #212]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a954:	4313      	orrs	r3, r2
 800a956:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a958:	4b33      	ldr	r3, [pc, #204]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a95c:	4a32      	ldr	r2, [pc, #200]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a95e:	f023 0301 	bic.w	r3, r3, #1
 800a962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a964:	4b30      	ldr	r3, [pc, #192]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a968:	4b31      	ldr	r3, [pc, #196]	@ (800aa30 <HAL_RCC_OscConfig+0x76c>)
 800a96a:	4013      	ands	r3, r2
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a970:	00d2      	lsls	r2, r2, #3
 800a972:	492d      	ldr	r1, [pc, #180]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a974:	4313      	orrs	r3, r2
 800a976:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a978:	4b2b      	ldr	r3, [pc, #172]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97c:	f023 020c 	bic.w	r2, r3, #12
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a984:	4928      	ldr	r1, [pc, #160]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a986:	4313      	orrs	r3, r2
 800a988:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a98a:	4b27      	ldr	r3, [pc, #156]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a98e:	f023 0202 	bic.w	r2, r3, #2
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a996:	4924      	ldr	r1, [pc, #144]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a998:	4313      	orrs	r3, r2
 800a99a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a99c:	4b22      	ldr	r3, [pc, #136]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a0:	4a21      	ldr	r2, [pc, #132]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a9a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9a8:	4b1f      	ldr	r3, [pc, #124]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ac:	4a1e      	ldr	r2, [pc, #120]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a9ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a9b4:	4b1c      	ldr	r3, [pc, #112]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b8:	4a1b      	ldr	r2, [pc, #108]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a9ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a9be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a9c0:	4b19      	ldr	r3, [pc, #100]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c4:	4a18      	ldr	r2, [pc, #96]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a9c6:	f043 0301 	orr.w	r3, r3, #1
 800a9ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a9cc:	4b16      	ldr	r3, [pc, #88]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a15      	ldr	r2, [pc, #84]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a9d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a9d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9d8:	f7fb fd66 	bl	80064a8 <HAL_GetTick>
 800a9dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9de:	e008      	b.n	800a9f2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9e0:	f7fb fd62 	bl	80064a8 <HAL_GetTick>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d901      	bls.n	800a9f2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e091      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0f0      	beq.n	800a9e0 <HAL_RCC_OscConfig+0x71c>
 800a9fe:	e089      	b.n	800ab14 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa00:	4b09      	ldr	r3, [pc, #36]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a08      	ldr	r2, [pc, #32]	@ (800aa28 <HAL_RCC_OscConfig+0x764>)
 800aa06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa0c:	f7fb fd4c 	bl	80064a8 <HAL_GetTick>
 800aa10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa12:	e00f      	b.n	800aa34 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa14:	f7fb fd48 	bl	80064a8 <HAL_GetTick>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d908      	bls.n	800aa34 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e077      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
 800aa26:	bf00      	nop
 800aa28:	58024400 	.word	0x58024400
 800aa2c:	fffffc0c 	.word	0xfffffc0c
 800aa30:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa34:	4b3a      	ldr	r3, [pc, #232]	@ (800ab20 <HAL_RCC_OscConfig+0x85c>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1e9      	bne.n	800aa14 <HAL_RCC_OscConfig+0x750>
 800aa40:	e068      	b.n	800ab14 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aa42:	4b37      	ldr	r3, [pc, #220]	@ (800ab20 <HAL_RCC_OscConfig+0x85c>)
 800aa44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa46:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aa48:	4b35      	ldr	r3, [pc, #212]	@ (800ab20 <HAL_RCC_OscConfig+0x85c>)
 800aa4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa4c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d031      	beq.n	800aaba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	f003 0203 	and.w	r2, r3, #3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d12a      	bne.n	800aaba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	091b      	lsrs	r3, r3, #4
 800aa68:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d122      	bne.n	800aaba <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d11a      	bne.n	800aaba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	0a5b      	lsrs	r3, r3, #9
 800aa88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa90:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d111      	bne.n	800aaba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	0c1b      	lsrs	r3, r3, #16
 800aa9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d108      	bne.n	800aaba <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	0e1b      	lsrs	r3, r3, #24
 800aaac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aab4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d001      	beq.n	800aabe <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e02b      	b.n	800ab16 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800aabe:	4b18      	ldr	r3, [pc, #96]	@ (800ab20 <HAL_RCC_OscConfig+0x85c>)
 800aac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aac2:	08db      	lsrs	r3, r3, #3
 800aac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aac8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d01f      	beq.n	800ab14 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800aad4:	4b12      	ldr	r3, [pc, #72]	@ (800ab20 <HAL_RCC_OscConfig+0x85c>)
 800aad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad8:	4a11      	ldr	r2, [pc, #68]	@ (800ab20 <HAL_RCC_OscConfig+0x85c>)
 800aada:	f023 0301 	bic.w	r3, r3, #1
 800aade:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aae0:	f7fb fce2 	bl	80064a8 <HAL_GetTick>
 800aae4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800aae6:	bf00      	nop
 800aae8:	f7fb fcde 	bl	80064a8 <HAL_GetTick>
 800aaec:	4602      	mov	r2, r0
 800aaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d0f9      	beq.n	800aae8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aaf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ab20 <HAL_RCC_OscConfig+0x85c>)
 800aaf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ab24 <HAL_RCC_OscConfig+0x860>)
 800aafa:	4013      	ands	r3, r2
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ab00:	00d2      	lsls	r2, r2, #3
 800ab02:	4907      	ldr	r1, [pc, #28]	@ (800ab20 <HAL_RCC_OscConfig+0x85c>)
 800ab04:	4313      	orrs	r3, r2
 800ab06:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ab08:	4b05      	ldr	r3, [pc, #20]	@ (800ab20 <HAL_RCC_OscConfig+0x85c>)
 800ab0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab0c:	4a04      	ldr	r2, [pc, #16]	@ (800ab20 <HAL_RCC_OscConfig+0x85c>)
 800ab0e:	f043 0301 	orr.w	r3, r3, #1
 800ab12:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3730      	adds	r7, #48	@ 0x30
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	58024400 	.word	0x58024400
 800ab24:	ffff0007 	.word	0xffff0007

0800ab28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e19c      	b.n	800ae76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab3c:	4b8a      	ldr	r3, [pc, #552]	@ (800ad68 <HAL_RCC_ClockConfig+0x240>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 030f 	and.w	r3, r3, #15
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d910      	bls.n	800ab6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab4a:	4b87      	ldr	r3, [pc, #540]	@ (800ad68 <HAL_RCC_ClockConfig+0x240>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f023 020f 	bic.w	r2, r3, #15
 800ab52:	4985      	ldr	r1, [pc, #532]	@ (800ad68 <HAL_RCC_ClockConfig+0x240>)
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab5a:	4b83      	ldr	r3, [pc, #524]	@ (800ad68 <HAL_RCC_ClockConfig+0x240>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 030f 	and.w	r3, r3, #15
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d001      	beq.n	800ab6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e184      	b.n	800ae76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d010      	beq.n	800ab9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	691a      	ldr	r2, [r3, #16]
 800ab7c:	4b7b      	ldr	r3, [pc, #492]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d908      	bls.n	800ab9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab88:	4b78      	ldr	r3, [pc, #480]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	4975      	ldr	r1, [pc, #468]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0308 	and.w	r3, r3, #8
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d010      	beq.n	800abc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	695a      	ldr	r2, [r3, #20]
 800abaa:	4b70      	ldr	r3, [pc, #448]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d908      	bls.n	800abc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800abb6:	4b6d      	ldr	r3, [pc, #436]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	496a      	ldr	r1, [pc, #424]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0310 	and.w	r3, r3, #16
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d010      	beq.n	800abf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	699a      	ldr	r2, [r3, #24]
 800abd8:	4b64      	ldr	r3, [pc, #400]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800abda:	69db      	ldr	r3, [r3, #28]
 800abdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d908      	bls.n	800abf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800abe4:	4b61      	ldr	r3, [pc, #388]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	495e      	ldr	r1, [pc, #376]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0320 	and.w	r3, r3, #32
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d010      	beq.n	800ac24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	69da      	ldr	r2, [r3, #28]
 800ac06:	4b59      	ldr	r3, [pc, #356]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d908      	bls.n	800ac24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac12:	4b56      	ldr	r3, [pc, #344]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	69db      	ldr	r3, [r3, #28]
 800ac1e:	4953      	ldr	r1, [pc, #332]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ac20:	4313      	orrs	r3, r2
 800ac22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 0302 	and.w	r3, r3, #2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d010      	beq.n	800ac52 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	68da      	ldr	r2, [r3, #12]
 800ac34:	4b4d      	ldr	r3, [pc, #308]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	f003 030f 	and.w	r3, r3, #15
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d908      	bls.n	800ac52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac40:	4b4a      	ldr	r3, [pc, #296]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	f023 020f 	bic.w	r2, r3, #15
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	4947      	ldr	r1, [pc, #284]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 0301 	and.w	r3, r3, #1
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d055      	beq.n	800ad0a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ac5e:	4b43      	ldr	r3, [pc, #268]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	4940      	ldr	r1, [pc, #256]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d107      	bne.n	800ac88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac78:	4b3c      	ldr	r3, [pc, #240]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d121      	bne.n	800acc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e0f6      	b.n	800ae76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	2b03      	cmp	r3, #3
 800ac8e:	d107      	bne.n	800aca0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac90:	4b36      	ldr	r3, [pc, #216]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d115      	bne.n	800acc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e0ea      	b.n	800ae76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d107      	bne.n	800acb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aca8:	4b30      	ldr	r3, [pc, #192]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d109      	bne.n	800acc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e0de      	b.n	800ae76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800acb8:	4b2c      	ldr	r3, [pc, #176]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 0304 	and.w	r3, r3, #4
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e0d6      	b.n	800ae76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800acc8:	4b28      	ldr	r3, [pc, #160]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	f023 0207 	bic.w	r2, r3, #7
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	4925      	ldr	r1, [pc, #148]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800acd6:	4313      	orrs	r3, r2
 800acd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acda:	f7fb fbe5 	bl	80064a8 <HAL_GetTick>
 800acde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ace0:	e00a      	b.n	800acf8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ace2:	f7fb fbe1 	bl	80064a8 <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d901      	bls.n	800acf8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800acf4:	2303      	movs	r3, #3
 800acf6:	e0be      	b.n	800ae76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acf8:	4b1c      	ldr	r3, [pc, #112]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	00db      	lsls	r3, r3, #3
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d1eb      	bne.n	800ace2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d010      	beq.n	800ad38 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68da      	ldr	r2, [r3, #12]
 800ad1a:	4b14      	ldr	r3, [pc, #80]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	f003 030f 	and.w	r3, r3, #15
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d208      	bcs.n	800ad38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad26:	4b11      	ldr	r3, [pc, #68]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	f023 020f 	bic.w	r2, r3, #15
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	490e      	ldr	r1, [pc, #56]	@ (800ad6c <HAL_RCC_ClockConfig+0x244>)
 800ad34:	4313      	orrs	r3, r2
 800ad36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad38:	4b0b      	ldr	r3, [pc, #44]	@ (800ad68 <HAL_RCC_ClockConfig+0x240>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 030f 	and.w	r3, r3, #15
 800ad40:	683a      	ldr	r2, [r7, #0]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d214      	bcs.n	800ad70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad46:	4b08      	ldr	r3, [pc, #32]	@ (800ad68 <HAL_RCC_ClockConfig+0x240>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f023 020f 	bic.w	r2, r3, #15
 800ad4e:	4906      	ldr	r1, [pc, #24]	@ (800ad68 <HAL_RCC_ClockConfig+0x240>)
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad56:	4b04      	ldr	r3, [pc, #16]	@ (800ad68 <HAL_RCC_ClockConfig+0x240>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 030f 	and.w	r3, r3, #15
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d005      	beq.n	800ad70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e086      	b.n	800ae76 <HAL_RCC_ClockConfig+0x34e>
 800ad68:	52002000 	.word	0x52002000
 800ad6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 0304 	and.w	r3, r3, #4
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d010      	beq.n	800ad9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	691a      	ldr	r2, [r3, #16]
 800ad80:	4b3f      	ldr	r3, [pc, #252]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d208      	bcs.n	800ad9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ad8c:	4b3c      	ldr	r3, [pc, #240]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	4939      	ldr	r1, [pc, #228]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0308 	and.w	r3, r3, #8
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d010      	beq.n	800adcc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	695a      	ldr	r2, [r3, #20]
 800adae:	4b34      	ldr	r3, [pc, #208]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800adb0:	69db      	ldr	r3, [r3, #28]
 800adb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d208      	bcs.n	800adcc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800adba:	4b31      	ldr	r3, [pc, #196]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800adbc:	69db      	ldr	r3, [r3, #28]
 800adbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	492e      	ldr	r1, [pc, #184]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800adc8:	4313      	orrs	r3, r2
 800adca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 0310 	and.w	r3, r3, #16
 800add4:	2b00      	cmp	r3, #0
 800add6:	d010      	beq.n	800adfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	699a      	ldr	r2, [r3, #24]
 800addc:	4b28      	ldr	r3, [pc, #160]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800adde:	69db      	ldr	r3, [r3, #28]
 800ade0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d208      	bcs.n	800adfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ade8:	4b25      	ldr	r3, [pc, #148]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	4922      	ldr	r1, [pc, #136]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800adf6:	4313      	orrs	r3, r2
 800adf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0320 	and.w	r3, r3, #32
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d010      	beq.n	800ae28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	69da      	ldr	r2, [r3, #28]
 800ae0a:	4b1d      	ldr	r3, [pc, #116]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d208      	bcs.n	800ae28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae16:	4b1a      	ldr	r3, [pc, #104]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	4917      	ldr	r1, [pc, #92]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800ae24:	4313      	orrs	r3, r2
 800ae26:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800ae28:	f000 f834 	bl	800ae94 <HAL_RCC_GetSysClockFreq>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	4b14      	ldr	r3, [pc, #80]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	0a1b      	lsrs	r3, r3, #8
 800ae34:	f003 030f 	and.w	r3, r3, #15
 800ae38:	4912      	ldr	r1, [pc, #72]	@ (800ae84 <HAL_RCC_ClockConfig+0x35c>)
 800ae3a:	5ccb      	ldrb	r3, [r1, r3]
 800ae3c:	f003 031f 	and.w	r3, r3, #31
 800ae40:	fa22 f303 	lsr.w	r3, r2, r3
 800ae44:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800ae46:	4b0e      	ldr	r3, [pc, #56]	@ (800ae80 <HAL_RCC_ClockConfig+0x358>)
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	f003 030f 	and.w	r3, r3, #15
 800ae4e:	4a0d      	ldr	r2, [pc, #52]	@ (800ae84 <HAL_RCC_ClockConfig+0x35c>)
 800ae50:	5cd3      	ldrb	r3, [r2, r3]
 800ae52:	f003 031f 	and.w	r3, r3, #31
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	fa22 f303 	lsr.w	r3, r2, r3
 800ae5c:	4a0a      	ldr	r2, [pc, #40]	@ (800ae88 <HAL_RCC_ClockConfig+0x360>)
 800ae5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae60:	4a0a      	ldr	r2, [pc, #40]	@ (800ae8c <HAL_RCC_ClockConfig+0x364>)
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ae66:	4b0a      	ldr	r3, [pc, #40]	@ (800ae90 <HAL_RCC_ClockConfig+0x368>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7f8 f938 	bl	80030e0 <HAL_InitTick>
 800ae70:	4603      	mov	r3, r0
 800ae72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	58024400 	.word	0x58024400
 800ae84:	080199f4 	.word	0x080199f4
 800ae88:	24000004 	.word	0x24000004
 800ae8c:	24000000 	.word	0x24000000
 800ae90:	240000a4 	.word	0x240000a4

0800ae94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b089      	sub	sp, #36	@ 0x24
 800ae98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae9a:	4bb3      	ldr	r3, [pc, #716]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aea2:	2b18      	cmp	r3, #24
 800aea4:	f200 8155 	bhi.w	800b152 <HAL_RCC_GetSysClockFreq+0x2be>
 800aea8:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800aeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeae:	bf00      	nop
 800aeb0:	0800af15 	.word	0x0800af15
 800aeb4:	0800b153 	.word	0x0800b153
 800aeb8:	0800b153 	.word	0x0800b153
 800aebc:	0800b153 	.word	0x0800b153
 800aec0:	0800b153 	.word	0x0800b153
 800aec4:	0800b153 	.word	0x0800b153
 800aec8:	0800b153 	.word	0x0800b153
 800aecc:	0800b153 	.word	0x0800b153
 800aed0:	0800af3b 	.word	0x0800af3b
 800aed4:	0800b153 	.word	0x0800b153
 800aed8:	0800b153 	.word	0x0800b153
 800aedc:	0800b153 	.word	0x0800b153
 800aee0:	0800b153 	.word	0x0800b153
 800aee4:	0800b153 	.word	0x0800b153
 800aee8:	0800b153 	.word	0x0800b153
 800aeec:	0800b153 	.word	0x0800b153
 800aef0:	0800af41 	.word	0x0800af41
 800aef4:	0800b153 	.word	0x0800b153
 800aef8:	0800b153 	.word	0x0800b153
 800aefc:	0800b153 	.word	0x0800b153
 800af00:	0800b153 	.word	0x0800b153
 800af04:	0800b153 	.word	0x0800b153
 800af08:	0800b153 	.word	0x0800b153
 800af0c:	0800b153 	.word	0x0800b153
 800af10:	0800af47 	.word	0x0800af47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af14:	4b94      	ldr	r3, [pc, #592]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0320 	and.w	r3, r3, #32
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d009      	beq.n	800af34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af20:	4b91      	ldr	r3, [pc, #580]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	08db      	lsrs	r3, r3, #3
 800af26:	f003 0303 	and.w	r3, r3, #3
 800af2a:	4a90      	ldr	r2, [pc, #576]	@ (800b16c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af2c:	fa22 f303 	lsr.w	r3, r2, r3
 800af30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800af32:	e111      	b.n	800b158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800af34:	4b8d      	ldr	r3, [pc, #564]	@ (800b16c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af36:	61bb      	str	r3, [r7, #24]
      break;
 800af38:	e10e      	b.n	800b158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800af3a:	4b8d      	ldr	r3, [pc, #564]	@ (800b170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800af3c:	61bb      	str	r3, [r7, #24]
      break;
 800af3e:	e10b      	b.n	800b158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800af40:	4b8c      	ldr	r3, [pc, #560]	@ (800b174 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800af42:	61bb      	str	r3, [r7, #24]
      break;
 800af44:	e108      	b.n	800b158 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af46:	4b88      	ldr	r3, [pc, #544]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4a:	f003 0303 	and.w	r3, r3, #3
 800af4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800af50:	4b85      	ldr	r3, [pc, #532]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af54:	091b      	lsrs	r3, r3, #4
 800af56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800af5c:	4b82      	ldr	r3, [pc, #520]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af66:	4b80      	ldr	r3, [pc, #512]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af6a:	08db      	lsrs	r3, r3, #3
 800af6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	fb02 f303 	mul.w	r3, r2, r3
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 80e1 	beq.w	800b14c <HAL_RCC_GetSysClockFreq+0x2b8>
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	f000 8083 	beq.w	800b098 <HAL_RCC_GetSysClockFreq+0x204>
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b02      	cmp	r3, #2
 800af96:	f200 80a1 	bhi.w	800b0dc <HAL_RCC_GetSysClockFreq+0x248>
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <HAL_RCC_GetSysClockFreq+0x114>
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d056      	beq.n	800b054 <HAL_RCC_GetSysClockFreq+0x1c0>
 800afa6:	e099      	b.n	800b0dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afa8:	4b6f      	ldr	r3, [pc, #444]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0320 	and.w	r3, r3, #32
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d02d      	beq.n	800b010 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afb4:	4b6c      	ldr	r3, [pc, #432]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	08db      	lsrs	r3, r3, #3
 800afba:	f003 0303 	and.w	r3, r3, #3
 800afbe:	4a6b      	ldr	r2, [pc, #428]	@ (800b16c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800afc0:	fa22 f303 	lsr.w	r3, r2, r3
 800afc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	ee07 3a90 	vmov	s15, r3
 800afcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	ee07 3a90 	vmov	s15, r3
 800afd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afde:	4b62      	ldr	r3, [pc, #392]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe6:	ee07 3a90 	vmov	s15, r3
 800afea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afee:	ed97 6a02 	vldr	s12, [r7, #8]
 800aff2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800affa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800affe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b00a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b00e:	e087      	b.n	800b120 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	ee07 3a90 	vmov	s15, r3
 800b016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b17c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b01e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b022:	4b51      	ldr	r3, [pc, #324]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b032:	ed97 6a02 	vldr	s12, [r7, #8]
 800b036:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b03a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b03e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b04a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b04e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b052:	e065      	b.n	800b120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	ee07 3a90 	vmov	s15, r3
 800b05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b180 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b066:	4b40      	ldr	r3, [pc, #256]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b06a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b06e:	ee07 3a90 	vmov	s15, r3
 800b072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b076:	ed97 6a02 	vldr	s12, [r7, #8]
 800b07a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b07e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b08a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b096:	e043      	b.n	800b120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	ee07 3a90 	vmov	s15, r3
 800b09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b184 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b0a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0aa:	4b2f      	ldr	r3, [pc, #188]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b2:	ee07 3a90 	vmov	s15, r3
 800b0b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b0da:	e021      	b.n	800b120 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	ee07 3a90 	vmov	s15, r3
 800b0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b180 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b0ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ee:	4b1e      	ldr	r3, [pc, #120]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f6:	ee07 3a90 	vmov	s15, r3
 800b0fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800b102:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b10a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b10e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b11e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b120:	4b11      	ldr	r3, [pc, #68]	@ (800b168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b124:	0a5b      	lsrs	r3, r3, #9
 800b126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b12a:	3301      	adds	r3, #1
 800b12c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	ee07 3a90 	vmov	s15, r3
 800b134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b138:	edd7 6a07 	vldr	s13, [r7, #28]
 800b13c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b144:	ee17 3a90 	vmov	r3, s15
 800b148:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b14a:	e005      	b.n	800b158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b14c:	2300      	movs	r3, #0
 800b14e:	61bb      	str	r3, [r7, #24]
      break;
 800b150:	e002      	b.n	800b158 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b152:	4b07      	ldr	r3, [pc, #28]	@ (800b170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b154:	61bb      	str	r3, [r7, #24]
      break;
 800b156:	bf00      	nop
  }

  return sysclockfreq;
 800b158:	69bb      	ldr	r3, [r7, #24]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3724      	adds	r7, #36	@ 0x24
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	58024400 	.word	0x58024400
 800b16c:	03d09000 	.word	0x03d09000
 800b170:	003d0900 	.word	0x003d0900
 800b174:	016e3600 	.word	0x016e3600
 800b178:	46000000 	.word	0x46000000
 800b17c:	4c742400 	.word	0x4c742400
 800b180:	4a742400 	.word	0x4a742400
 800b184:	4bb71b00 	.word	0x4bb71b00

0800b188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b18e:	f7ff fe81 	bl	800ae94 <HAL_RCC_GetSysClockFreq>
 800b192:	4602      	mov	r2, r0
 800b194:	4b10      	ldr	r3, [pc, #64]	@ (800b1d8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	0a1b      	lsrs	r3, r3, #8
 800b19a:	f003 030f 	and.w	r3, r3, #15
 800b19e:	490f      	ldr	r1, [pc, #60]	@ (800b1dc <HAL_RCC_GetHCLKFreq+0x54>)
 800b1a0:	5ccb      	ldrb	r3, [r1, r3]
 800b1a2:	f003 031f 	and.w	r3, r3, #31
 800b1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b1aa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b1ae:	699b      	ldr	r3, [r3, #24]
 800b1b0:	f003 030f 	and.w	r3, r3, #15
 800b1b4:	4a09      	ldr	r2, [pc, #36]	@ (800b1dc <HAL_RCC_GetHCLKFreq+0x54>)
 800b1b6:	5cd3      	ldrb	r3, [r2, r3]
 800b1b8:	f003 031f 	and.w	r3, r3, #31
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c2:	4a07      	ldr	r2, [pc, #28]	@ (800b1e0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b1c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b1c6:	4a07      	ldr	r2, [pc, #28]	@ (800b1e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b1cc:	4b04      	ldr	r3, [pc, #16]	@ (800b1e0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	58024400 	.word	0x58024400
 800b1dc:	080199f4 	.word	0x080199f4
 800b1e0:	24000004 	.word	0x24000004
 800b1e4:	24000000 	.word	0x24000000

0800b1e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b1ec:	f7ff ffcc 	bl	800b188 <HAL_RCC_GetHCLKFreq>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	4b06      	ldr	r3, [pc, #24]	@ (800b20c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b1f4:	69db      	ldr	r3, [r3, #28]
 800b1f6:	091b      	lsrs	r3, r3, #4
 800b1f8:	f003 0307 	and.w	r3, r3, #7
 800b1fc:	4904      	ldr	r1, [pc, #16]	@ (800b210 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b1fe:	5ccb      	ldrb	r3, [r1, r3]
 800b200:	f003 031f 	and.w	r3, r3, #31
 800b204:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b208:	4618      	mov	r0, r3
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	58024400 	.word	0x58024400
 800b210:	080199f4 	.word	0x080199f4

0800b214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b218:	f7ff ffb6 	bl	800b188 <HAL_RCC_GetHCLKFreq>
 800b21c:	4602      	mov	r2, r0
 800b21e:	4b06      	ldr	r3, [pc, #24]	@ (800b238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b220:	69db      	ldr	r3, [r3, #28]
 800b222:	0a1b      	lsrs	r3, r3, #8
 800b224:	f003 0307 	and.w	r3, r3, #7
 800b228:	4904      	ldr	r1, [pc, #16]	@ (800b23c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b22a:	5ccb      	ldrb	r3, [r1, r3]
 800b22c:	f003 031f 	and.w	r3, r3, #31
 800b230:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b234:	4618      	mov	r0, r3
 800b236:	bd80      	pop	{r7, pc}
 800b238:	58024400 	.word	0x58024400
 800b23c:	080199f4 	.word	0x080199f4

0800b240 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	223f      	movs	r2, #63	@ 0x3f
 800b24e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b250:	4b1a      	ldr	r3, [pc, #104]	@ (800b2bc <HAL_RCC_GetClockConfig+0x7c>)
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	f003 0207 	and.w	r2, r3, #7
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800b25c:	4b17      	ldr	r3, [pc, #92]	@ (800b2bc <HAL_RCC_GetClockConfig+0x7c>)
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800b268:	4b14      	ldr	r3, [pc, #80]	@ (800b2bc <HAL_RCC_GetClockConfig+0x7c>)
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	f003 020f 	and.w	r2, r3, #15
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800b274:	4b11      	ldr	r3, [pc, #68]	@ (800b2bc <HAL_RCC_GetClockConfig+0x7c>)
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800b280:	4b0e      	ldr	r3, [pc, #56]	@ (800b2bc <HAL_RCC_GetClockConfig+0x7c>)
 800b282:	69db      	ldr	r3, [r3, #28]
 800b284:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800b28c:	4b0b      	ldr	r3, [pc, #44]	@ (800b2bc <HAL_RCC_GetClockConfig+0x7c>)
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800b298:	4b08      	ldr	r3, [pc, #32]	@ (800b2bc <HAL_RCC_GetClockConfig+0x7c>)
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b2a4:	4b06      	ldr	r3, [pc, #24]	@ (800b2c0 <HAL_RCC_GetClockConfig+0x80>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 020f 	and.w	r2, r3, #15
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	601a      	str	r2, [r3, #0]
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	58024400 	.word	0x58024400
 800b2c0:	52002000 	.word	0x52002000

0800b2c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b2c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2c8:	b0c8      	sub	sp, #288	@ 0x120
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b2dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b2e8:	2500      	movs	r5, #0
 800b2ea:	ea54 0305 	orrs.w	r3, r4, r5
 800b2ee:	d049      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b2f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b2fa:	d02f      	beq.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b2fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b300:	d828      	bhi.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b302:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b306:	d01a      	beq.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b308:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b30c:	d822      	bhi.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d003      	beq.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b316:	d007      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b318:	e01c      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b31a:	4ba7      	ldr	r3, [pc, #668]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b31e:	4aa6      	ldr	r2, [pc, #664]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b326:	e01a      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b32c:	3308      	adds	r3, #8
 800b32e:	2102      	movs	r1, #2
 800b330:	4618      	mov	r0, r3
 800b332:	f001 fc43 	bl	800cbbc <RCCEx_PLL2_Config>
 800b336:	4603      	mov	r3, r0
 800b338:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b33c:	e00f      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b33e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b342:	3328      	adds	r3, #40	@ 0x28
 800b344:	2102      	movs	r1, #2
 800b346:	4618      	mov	r0, r3
 800b348:	f001 fcea 	bl	800cd20 <RCCEx_PLL3_Config>
 800b34c:	4603      	mov	r3, r0
 800b34e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b352:	e004      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b35a:	e000      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b35c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b35e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10a      	bne.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b366:	4b94      	ldr	r3, [pc, #592]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b36a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b36e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b374:	4a90      	ldr	r2, [pc, #576]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b376:	430b      	orrs	r3, r1
 800b378:	6513      	str	r3, [r2, #80]	@ 0x50
 800b37a:	e003      	b.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b380:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b390:	f04f 0900 	mov.w	r9, #0
 800b394:	ea58 0309 	orrs.w	r3, r8, r9
 800b398:	d047      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b39a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b39e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3a0:	2b04      	cmp	r3, #4
 800b3a2:	d82a      	bhi.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b3a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b3ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3aa:	bf00      	nop
 800b3ac:	0800b3c1 	.word	0x0800b3c1
 800b3b0:	0800b3cf 	.word	0x0800b3cf
 800b3b4:	0800b3e5 	.word	0x0800b3e5
 800b3b8:	0800b403 	.word	0x0800b403
 800b3bc:	0800b403 	.word	0x0800b403
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3c0:	4b7d      	ldr	r3, [pc, #500]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c4:	4a7c      	ldr	r2, [pc, #496]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3cc:	e01a      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f001 fbf0 	bl	800cbbc <RCCEx_PLL2_Config>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3e2:	e00f      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3e8:	3328      	adds	r3, #40	@ 0x28
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f001 fc97 	bl	800cd20 <RCCEx_PLL3_Config>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3f8:	e004      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b400:	e000      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b402:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b404:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10a      	bne.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b40c:	4b6a      	ldr	r3, [pc, #424]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b40e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b410:	f023 0107 	bic.w	r1, r3, #7
 800b414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b41a:	4a67      	ldr	r2, [pc, #412]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b41c:	430b      	orrs	r3, r1
 800b41e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b420:	e003      	b.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b422:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b426:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b42a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b436:	f04f 0b00 	mov.w	fp, #0
 800b43a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b43e:	d054      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b446:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b44a:	d036      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b44c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b450:	d82f      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b456:	d032      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b45c:	d829      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b45e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b460:	d02f      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b462:	2bc0      	cmp	r3, #192	@ 0xc0
 800b464:	d825      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b466:	2b80      	cmp	r3, #128	@ 0x80
 800b468:	d018      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b46a:	2b80      	cmp	r3, #128	@ 0x80
 800b46c:	d821      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d002      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b472:	2b40      	cmp	r3, #64	@ 0x40
 800b474:	d007      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b476:	e01c      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b478:	4b4f      	ldr	r3, [pc, #316]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b47a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b47c:	4a4e      	ldr	r2, [pc, #312]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b47e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b484:	e01e      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b48a:	3308      	adds	r3, #8
 800b48c:	2100      	movs	r1, #0
 800b48e:	4618      	mov	r0, r3
 800b490:	f001 fb94 	bl	800cbbc <RCCEx_PLL2_Config>
 800b494:	4603      	mov	r3, r0
 800b496:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b49a:	e013      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a0:	3328      	adds	r3, #40	@ 0x28
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f001 fc3b 	bl	800cd20 <RCCEx_PLL3_Config>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b4b0:	e008      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b4b8:	e004      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b4ba:	bf00      	nop
 800b4bc:	e002      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b4be:	bf00      	nop
 800b4c0:	e000      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b4c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10a      	bne.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b4cc:	4b3a      	ldr	r3, [pc, #232]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4d0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b4d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4da:	4a37      	ldr	r2, [pc, #220]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4dc:	430b      	orrs	r3, r1
 800b4de:	6513      	str	r3, [r2, #80]	@ 0x50
 800b4e0:	e003      	b.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b4f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b500:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b504:	460b      	mov	r3, r1
 800b506:	4313      	orrs	r3, r2
 800b508:	d05c      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b50a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b50e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b510:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b514:	d03b      	beq.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b516:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b51a:	d834      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b51c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b520:	d037      	beq.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b522:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b526:	d82e      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b528:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b52c:	d033      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b52e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b532:	d828      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b538:	d01a      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b53a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b53e:	d822      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b540:	2b00      	cmp	r3, #0
 800b542:	d003      	beq.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b548:	d007      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b54a:	e01c      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b54c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b550:	4a19      	ldr	r2, [pc, #100]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b558:	e01e      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b55e:	3308      	adds	r3, #8
 800b560:	2100      	movs	r1, #0
 800b562:	4618      	mov	r0, r3
 800b564:	f001 fb2a 	bl	800cbbc <RCCEx_PLL2_Config>
 800b568:	4603      	mov	r3, r0
 800b56a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b56e:	e013      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b570:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b574:	3328      	adds	r3, #40	@ 0x28
 800b576:	2100      	movs	r1, #0
 800b578:	4618      	mov	r0, r3
 800b57a:	f001 fbd1 	bl	800cd20 <RCCEx_PLL3_Config>
 800b57e:	4603      	mov	r3, r0
 800b580:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b584:	e008      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b58c:	e004      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b58e:	bf00      	nop
 800b590:	e002      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b592:	bf00      	nop
 800b594:	e000      	b.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b596:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b598:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10d      	bne.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b5a0:	4b05      	ldr	r3, [pc, #20]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5a4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800b5a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5ae:	4a02      	ldr	r2, [pc, #8]	@ (800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5b0:	430b      	orrs	r3, r1
 800b5b2:	6513      	str	r3, [r2, #80]	@ 0x50
 800b5b4:	e006      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b5b6:	bf00      	nop
 800b5b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b5c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b5d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b5da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	d03a      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5ea:	2b30      	cmp	r3, #48	@ 0x30
 800b5ec:	d01f      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b5ee:	2b30      	cmp	r3, #48	@ 0x30
 800b5f0:	d819      	bhi.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d00c      	beq.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b5f6:	2b20      	cmp	r3, #32
 800b5f8:	d815      	bhi.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d019      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b5fe:	2b10      	cmp	r3, #16
 800b600:	d111      	bne.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b602:	4bae      	ldr	r3, [pc, #696]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b606:	4aad      	ldr	r2, [pc, #692]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b60c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b60e:	e011      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b614:	3308      	adds	r3, #8
 800b616:	2102      	movs	r1, #2
 800b618:	4618      	mov	r0, r3
 800b61a:	f001 facf 	bl	800cbbc <RCCEx_PLL2_Config>
 800b61e:	4603      	mov	r3, r0
 800b620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b624:	e006      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b626:	2301      	movs	r3, #1
 800b628:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b62c:	e002      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b62e:	bf00      	nop
 800b630:	e000      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b632:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b634:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10a      	bne.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b63c:	4b9f      	ldr	r3, [pc, #636]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b63e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b640:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b64a:	4a9c      	ldr	r2, [pc, #624]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b64c:	430b      	orrs	r3, r1
 800b64e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b650:	e003      	b.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b652:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b656:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b65a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b666:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b66a:	2300      	movs	r3, #0
 800b66c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b670:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b674:	460b      	mov	r3, r1
 800b676:	4313      	orrs	r3, r2
 800b678:	d051      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b67a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b67e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b684:	d035      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b686:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b68a:	d82e      	bhi.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b68c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b690:	d031      	beq.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b692:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b696:	d828      	bhi.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b69c:	d01a      	beq.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b69e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6a2:	d822      	bhi.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d003      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b6a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6ac:	d007      	beq.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b6ae:	e01c      	b.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6b0:	4b82      	ldr	r3, [pc, #520]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b4:	4a81      	ldr	r2, [pc, #516]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6bc:	e01c      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f001 fa78 	bl	800cbbc <RCCEx_PLL2_Config>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6d2:	e011      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6d8:	3328      	adds	r3, #40	@ 0x28
 800b6da:	2100      	movs	r1, #0
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f001 fb1f 	bl	800cd20 <RCCEx_PLL3_Config>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6e8:	e006      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b6f0:	e002      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b6f2:	bf00      	nop
 800b6f4:	e000      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b6f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d10a      	bne.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b700:	4b6e      	ldr	r3, [pc, #440]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b704:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b70c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b70e:	4a6b      	ldr	r2, [pc, #428]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b710:	430b      	orrs	r3, r1
 800b712:	6513      	str	r3, [r2, #80]	@ 0x50
 800b714:	e003      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b716:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b71a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b71e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b72a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b72e:	2300      	movs	r3, #0
 800b730:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b734:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b738:	460b      	mov	r3, r1
 800b73a:	4313      	orrs	r3, r2
 800b73c:	d053      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b73e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b742:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b748:	d033      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b74a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b74e:	d82c      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b750:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b754:	d02f      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800b756:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b75a:	d826      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b75c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b760:	d02b      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b762:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b766:	d820      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b76c:	d012      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b76e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b772:	d81a      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b774:	2b00      	cmp	r3, #0
 800b776:	d022      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800b778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b77c:	d115      	bne.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b77e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b782:	3308      	adds	r3, #8
 800b784:	2101      	movs	r1, #1
 800b786:	4618      	mov	r0, r3
 800b788:	f001 fa18 	bl	800cbbc <RCCEx_PLL2_Config>
 800b78c:	4603      	mov	r3, r0
 800b78e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b792:	e015      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b798:	3328      	adds	r3, #40	@ 0x28
 800b79a:	2101      	movs	r1, #1
 800b79c:	4618      	mov	r0, r3
 800b79e:	f001 fabf 	bl	800cd20 <RCCEx_PLL3_Config>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b7a8:	e00a      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b7b0:	e006      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b7b2:	bf00      	nop
 800b7b4:	e004      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b7b6:	bf00      	nop
 800b7b8:	e002      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b7ba:	bf00      	nop
 800b7bc:	e000      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b7be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10a      	bne.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b7c8:	4b3c      	ldr	r3, [pc, #240]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b7d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7d6:	4a39      	ldr	r2, [pc, #228]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7d8:	430b      	orrs	r3, r1
 800b7da:	6513      	str	r3, [r2, #80]	@ 0x50
 800b7dc:	e003      	b.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b7e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b7f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b7fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b800:	460b      	mov	r3, r1
 800b802:	4313      	orrs	r3, r2
 800b804:	d060      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b80a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b80e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800b812:	d039      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800b814:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800b818:	d832      	bhi.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b81a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b81e:	d035      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b820:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b824:	d82c      	bhi.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b82a:	d031      	beq.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b82c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b830:	d826      	bhi.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b832:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b836:	d02d      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b838:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b83c:	d820      	bhi.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b83e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b842:	d012      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b848:	d81a      	bhi.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d024      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b84e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b852:	d115      	bne.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b858:	3308      	adds	r3, #8
 800b85a:	2101      	movs	r1, #1
 800b85c:	4618      	mov	r0, r3
 800b85e:	f001 f9ad 	bl	800cbbc <RCCEx_PLL2_Config>
 800b862:	4603      	mov	r3, r0
 800b864:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b868:	e017      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b86a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b86e:	3328      	adds	r3, #40	@ 0x28
 800b870:	2101      	movs	r1, #1
 800b872:	4618      	mov	r0, r3
 800b874:	f001 fa54 	bl	800cd20 <RCCEx_PLL3_Config>
 800b878:	4603      	mov	r3, r0
 800b87a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b87e:	e00c      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b886:	e008      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b888:	bf00      	nop
 800b88a:	e006      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b88c:	bf00      	nop
 800b88e:	e004      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b890:	bf00      	nop
 800b892:	e002      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b894:	bf00      	nop
 800b896:	e000      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b89a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10e      	bne.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b8a2:	4b06      	ldr	r3, [pc, #24]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b8aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b8b2:	4a02      	ldr	r2, [pc, #8]	@ (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8b4:	430b      	orrs	r3, r1
 800b8b6:	6593      	str	r3, [r2, #88]	@ 0x58
 800b8b8:	e006      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b8ba:	bf00      	nop
 800b8bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b8c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b8d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b8de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	d037      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b8ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8f2:	d00e      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b8f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8f8:	d816      	bhi.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d018      	beq.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b8fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b902:	d111      	bne.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b904:	4bc4      	ldr	r3, [pc, #784]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b908:	4ac3      	ldr	r2, [pc, #780]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b90a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b90e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b910:	e00f      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b916:	3308      	adds	r3, #8
 800b918:	2101      	movs	r1, #1
 800b91a:	4618      	mov	r0, r3
 800b91c:	f001 f94e 	bl	800cbbc <RCCEx_PLL2_Config>
 800b920:	4603      	mov	r3, r0
 800b922:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b926:	e004      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b92e:	e000      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b930:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b932:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10a      	bne.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b93a:	4bb7      	ldr	r3, [pc, #732]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b93c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b93e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b946:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b948:	4ab3      	ldr	r2, [pc, #716]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b94a:	430b      	orrs	r3, r1
 800b94c:	6513      	str	r3, [r2, #80]	@ 0x50
 800b94e:	e003      	b.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b950:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b954:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b958:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b964:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b968:	2300      	movs	r3, #0
 800b96a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b96e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b972:	460b      	mov	r3, r1
 800b974:	4313      	orrs	r3, r2
 800b976:	d039      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b97c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b97e:	2b03      	cmp	r3, #3
 800b980:	d81c      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b982:	a201      	add	r2, pc, #4	@ (adr r2, 800b988 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b988:	0800b9c5 	.word	0x0800b9c5
 800b98c:	0800b999 	.word	0x0800b999
 800b990:	0800b9a7 	.word	0x0800b9a7
 800b994:	0800b9c5 	.word	0x0800b9c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b998:	4b9f      	ldr	r3, [pc, #636]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b99c:	4a9e      	ldr	r2, [pc, #632]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b99e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b9a4:	e00f      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	2102      	movs	r1, #2
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f001 f904 	bl	800cbbc <RCCEx_PLL2_Config>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b9ba:	e004      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b9c2:	e000      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b9c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10a      	bne.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b9ce:	4b92      	ldr	r3, [pc, #584]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9d2:	f023 0103 	bic.w	r1, r3, #3
 800b9d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9dc:	4a8e      	ldr	r2, [pc, #568]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9de:	430b      	orrs	r3, r1
 800b9e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b9e2:	e003      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b9ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b9f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ba02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ba06:	460b      	mov	r3, r1
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	f000 8099 	beq.w	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba0e:	4b83      	ldr	r3, [pc, #524]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a82      	ldr	r2, [pc, #520]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba1a:	f7fa fd45 	bl	80064a8 <HAL_GetTick>
 800ba1e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba22:	e00b      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba24:	f7fa fd40 	bl	80064a8 <HAL_GetTick>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	2b64      	cmp	r3, #100	@ 0x64
 800ba32:	d903      	bls.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ba34:	2303      	movs	r3, #3
 800ba36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ba3a:	e005      	b.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba3c:	4b77      	ldr	r3, [pc, #476]	@ (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d0ed      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ba48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d173      	bne.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ba50:	4b71      	ldr	r3, [pc, #452]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ba54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba5c:	4053      	eors	r3, r2
 800ba5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d015      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba66:	4b6c      	ldr	r3, [pc, #432]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba6e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba72:	4b69      	ldr	r3, [pc, #420]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba76:	4a68      	ldr	r2, [pc, #416]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba7e:	4b66      	ldr	r3, [pc, #408]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba82:	4a65      	ldr	r2, [pc, #404]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ba8a:	4a63      	ldr	r2, [pc, #396]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ba92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ba9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba9e:	d118      	bne.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baa0:	f7fa fd02 	bl	80064a8 <HAL_GetTick>
 800baa4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800baa8:	e00d      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800baaa:	f7fa fcfd 	bl	80064a8 <HAL_GetTick>
 800baae:	4602      	mov	r2, r0
 800bab0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bab4:	1ad2      	subs	r2, r2, r3
 800bab6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800baba:	429a      	cmp	r2, r3
 800babc:	d903      	bls.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800babe:	2303      	movs	r3, #3
 800bac0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800bac4:	e005      	b.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bac6:	4b54      	ldr	r3, [pc, #336]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800baca:	f003 0302 	and.w	r3, r3, #2
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0eb      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bad2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d129      	bne.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bade:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800baea:	d10e      	bne.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800baec:	4b4a      	ldr	r3, [pc, #296]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800baf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bafc:	091a      	lsrs	r2, r3, #4
 800bafe:	4b48      	ldr	r3, [pc, #288]	@ (800bc20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bb00:	4013      	ands	r3, r2
 800bb02:	4a45      	ldr	r2, [pc, #276]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb04:	430b      	orrs	r3, r1
 800bb06:	6113      	str	r3, [r2, #16]
 800bb08:	e005      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bb0a:	4b43      	ldr	r3, [pc, #268]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb0c:	691b      	ldr	r3, [r3, #16]
 800bb0e:	4a42      	ldr	r2, [pc, #264]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bb14:	6113      	str	r3, [r2, #16]
 800bb16:	4b40      	ldr	r3, [pc, #256]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bb1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bb22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb26:	4a3c      	ldr	r2, [pc, #240]	@ (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb28:	430b      	orrs	r3, r1
 800bb2a:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb2c:	e008      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800bb36:	e003      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bb40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f002 0301 	and.w	r3, r2, #1
 800bb4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bb50:	2300      	movs	r3, #0
 800bb52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bb56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	f000 8090 	beq.w	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bb62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb6a:	2b28      	cmp	r3, #40	@ 0x28
 800bb6c:	d870      	bhi.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bb6e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb74:	0800bc59 	.word	0x0800bc59
 800bb78:	0800bc51 	.word	0x0800bc51
 800bb7c:	0800bc51 	.word	0x0800bc51
 800bb80:	0800bc51 	.word	0x0800bc51
 800bb84:	0800bc51 	.word	0x0800bc51
 800bb88:	0800bc51 	.word	0x0800bc51
 800bb8c:	0800bc51 	.word	0x0800bc51
 800bb90:	0800bc51 	.word	0x0800bc51
 800bb94:	0800bc25 	.word	0x0800bc25
 800bb98:	0800bc51 	.word	0x0800bc51
 800bb9c:	0800bc51 	.word	0x0800bc51
 800bba0:	0800bc51 	.word	0x0800bc51
 800bba4:	0800bc51 	.word	0x0800bc51
 800bba8:	0800bc51 	.word	0x0800bc51
 800bbac:	0800bc51 	.word	0x0800bc51
 800bbb0:	0800bc51 	.word	0x0800bc51
 800bbb4:	0800bc3b 	.word	0x0800bc3b
 800bbb8:	0800bc51 	.word	0x0800bc51
 800bbbc:	0800bc51 	.word	0x0800bc51
 800bbc0:	0800bc51 	.word	0x0800bc51
 800bbc4:	0800bc51 	.word	0x0800bc51
 800bbc8:	0800bc51 	.word	0x0800bc51
 800bbcc:	0800bc51 	.word	0x0800bc51
 800bbd0:	0800bc51 	.word	0x0800bc51
 800bbd4:	0800bc59 	.word	0x0800bc59
 800bbd8:	0800bc51 	.word	0x0800bc51
 800bbdc:	0800bc51 	.word	0x0800bc51
 800bbe0:	0800bc51 	.word	0x0800bc51
 800bbe4:	0800bc51 	.word	0x0800bc51
 800bbe8:	0800bc51 	.word	0x0800bc51
 800bbec:	0800bc51 	.word	0x0800bc51
 800bbf0:	0800bc51 	.word	0x0800bc51
 800bbf4:	0800bc59 	.word	0x0800bc59
 800bbf8:	0800bc51 	.word	0x0800bc51
 800bbfc:	0800bc51 	.word	0x0800bc51
 800bc00:	0800bc51 	.word	0x0800bc51
 800bc04:	0800bc51 	.word	0x0800bc51
 800bc08:	0800bc51 	.word	0x0800bc51
 800bc0c:	0800bc51 	.word	0x0800bc51
 800bc10:	0800bc51 	.word	0x0800bc51
 800bc14:	0800bc59 	.word	0x0800bc59
 800bc18:	58024400 	.word	0x58024400
 800bc1c:	58024800 	.word	0x58024800
 800bc20:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc28:	3308      	adds	r3, #8
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f000 ffc5 	bl	800cbbc <RCCEx_PLL2_Config>
 800bc32:	4603      	mov	r3, r0
 800bc34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc38:	e00f      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc3e:	3328      	adds	r3, #40	@ 0x28
 800bc40:	2101      	movs	r1, #1
 800bc42:	4618      	mov	r0, r3
 800bc44:	f001 f86c 	bl	800cd20 <RCCEx_PLL3_Config>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc4e:	e004      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc56:	e000      	b.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bc58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10b      	bne.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bc62:	4bc0      	ldr	r3, [pc, #768]	@ (800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bc6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc72:	4abc      	ldr	r2, [pc, #752]	@ (800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bc74:	430b      	orrs	r3, r1
 800bc76:	6553      	str	r3, [r2, #84]	@ 0x54
 800bc78:	e003      	b.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bc82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	f002 0302 	and.w	r3, r2, #2
 800bc8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc92:	2300      	movs	r3, #0
 800bc94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bc98:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	d043      	beq.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcaa:	2b05      	cmp	r3, #5
 800bcac:	d824      	bhi.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bcae:	a201      	add	r2, pc, #4	@ (adr r2, 800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb4:	0800bd01 	.word	0x0800bd01
 800bcb8:	0800bccd 	.word	0x0800bccd
 800bcbc:	0800bce3 	.word	0x0800bce3
 800bcc0:	0800bd01 	.word	0x0800bd01
 800bcc4:	0800bd01 	.word	0x0800bd01
 800bcc8:	0800bd01 	.word	0x0800bd01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f000 ff71 	bl	800cbbc <RCCEx_PLL2_Config>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bce0:	e00f      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bce6:	3328      	adds	r3, #40	@ 0x28
 800bce8:	2101      	movs	r1, #1
 800bcea:	4618      	mov	r0, r3
 800bcec:	f001 f818 	bl	800cd20 <RCCEx_PLL3_Config>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bcf6:	e004      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bcfe:	e000      	b.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800bd00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10b      	bne.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bd0a:	4b96      	ldr	r3, [pc, #600]	@ (800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd0e:	f023 0107 	bic.w	r1, r3, #7
 800bd12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd1a:	4a92      	ldr	r2, [pc, #584]	@ (800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd1c:	430b      	orrs	r3, r1
 800bd1e:	6553      	str	r3, [r2, #84]	@ 0x54
 800bd20:	e003      	b.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	f002 0304 	and.w	r3, r2, #4
 800bd36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd40:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4313      	orrs	r3, r2
 800bd48:	d043      	beq.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bd4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bd52:	2b05      	cmp	r3, #5
 800bd54:	d824      	bhi.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800bd56:	a201      	add	r2, pc, #4	@ (adr r2, 800bd5c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800bd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5c:	0800bda9 	.word	0x0800bda9
 800bd60:	0800bd75 	.word	0x0800bd75
 800bd64:	0800bd8b 	.word	0x0800bd8b
 800bd68:	0800bda9 	.word	0x0800bda9
 800bd6c:	0800bda9 	.word	0x0800bda9
 800bd70:	0800bda9 	.word	0x0800bda9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd78:	3308      	adds	r3, #8
 800bd7a:	2101      	movs	r1, #1
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f000 ff1d 	bl	800cbbc <RCCEx_PLL2_Config>
 800bd82:	4603      	mov	r3, r0
 800bd84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd88:	e00f      	b.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd8e:	3328      	adds	r3, #40	@ 0x28
 800bd90:	2101      	movs	r1, #1
 800bd92:	4618      	mov	r0, r3
 800bd94:	f000 ffc4 	bl	800cd20 <RCCEx_PLL3_Config>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd9e:	e004      	b.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bda6:	e000      	b.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800bda8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdaa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10b      	bne.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bdb2:	4b6c      	ldr	r3, [pc, #432]	@ (800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdb6:	f023 0107 	bic.w	r1, r3, #7
 800bdba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800bdc2:	4a68      	ldr	r2, [pc, #416]	@ (800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdc4:	430b      	orrs	r3, r1
 800bdc6:	6593      	str	r3, [r2, #88]	@ 0x58
 800bdc8:	e003      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bdd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	f002 0320 	and.w	r3, r2, #32
 800bdde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bde2:	2300      	movs	r3, #0
 800bde4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bde8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bdec:	460b      	mov	r3, r1
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	d055      	beq.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bdf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bdfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bdfe:	d033      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800be00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be04:	d82c      	bhi.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800be06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be0a:	d02f      	beq.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800be0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be10:	d826      	bhi.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800be12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800be16:	d02b      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800be18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800be1c:	d820      	bhi.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800be1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be22:	d012      	beq.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800be24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be28:	d81a      	bhi.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d022      	beq.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800be2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be32:	d115      	bne.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be38:	3308      	adds	r3, #8
 800be3a:	2100      	movs	r1, #0
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 febd 	bl	800cbbc <RCCEx_PLL2_Config>
 800be42:	4603      	mov	r3, r0
 800be44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be48:	e015      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be4e:	3328      	adds	r3, #40	@ 0x28
 800be50:	2102      	movs	r1, #2
 800be52:	4618      	mov	r0, r3
 800be54:	f000 ff64 	bl	800cd20 <RCCEx_PLL3_Config>
 800be58:	4603      	mov	r3, r0
 800be5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be5e:	e00a      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800be66:	e006      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800be68:	bf00      	nop
 800be6a:	e004      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800be6c:	bf00      	nop
 800be6e:	e002      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800be70:	bf00      	nop
 800be72:	e000      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800be74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10b      	bne.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be7e:	4b39      	ldr	r3, [pc, #228]	@ (800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800be86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800be8e:	4a35      	ldr	r2, [pc, #212]	@ (800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be90:	430b      	orrs	r3, r1
 800be92:	6553      	str	r3, [r2, #84]	@ 0x54
 800be94:	e003      	b.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800be9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800beaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800beae:	2300      	movs	r3, #0
 800beb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800beb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800beb8:	460b      	mov	r3, r1
 800beba:	4313      	orrs	r3, r2
 800bebc:	d058      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bec2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bec6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800beca:	d033      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800becc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800bed0:	d82c      	bhi.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bed6:	d02f      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800bed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bedc:	d826      	bhi.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bede:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bee2:	d02b      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bee4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bee8:	d820      	bhi.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800beea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800beee:	d012      	beq.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800bef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bef4:	d81a      	bhi.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d022      	beq.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800befa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800befe:	d115      	bne.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf04:	3308      	adds	r3, #8
 800bf06:	2100      	movs	r1, #0
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 fe57 	bl	800cbbc <RCCEx_PLL2_Config>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bf14:	e015      	b.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf1a:	3328      	adds	r3, #40	@ 0x28
 800bf1c:	2102      	movs	r1, #2
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 fefe 	bl	800cd20 <RCCEx_PLL3_Config>
 800bf24:	4603      	mov	r3, r0
 800bf26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bf2a:	e00a      	b.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bf32:	e006      	b.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bf34:	bf00      	nop
 800bf36:	e004      	b.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bf38:	bf00      	nop
 800bf3a:	e002      	b.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bf3c:	bf00      	nop
 800bf3e:	e000      	b.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bf40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10e      	bne.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf4a:	4b06      	ldr	r3, [pc, #24]	@ (800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf4e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800bf52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bf5a:	4a02      	ldr	r2, [pc, #8]	@ (800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf5c:	430b      	orrs	r3, r1
 800bf5e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf60:	e006      	b.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bf62:	bf00      	nop
 800bf64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf78:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800bf7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf80:	2300      	movs	r3, #0
 800bf82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	d055      	beq.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bf90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bf98:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bf9c:	d033      	beq.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800bf9e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800bfa2:	d82c      	bhi.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800bfa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfa8:	d02f      	beq.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800bfaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfae:	d826      	bhi.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800bfb0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bfb4:	d02b      	beq.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800bfb6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bfba:	d820      	bhi.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800bfbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bfc0:	d012      	beq.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800bfc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bfc6:	d81a      	bhi.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d022      	beq.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800bfcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bfd0:	d115      	bne.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	2100      	movs	r1, #0
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 fdee 	bl	800cbbc <RCCEx_PLL2_Config>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bfe6:	e015      	b.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfec:	3328      	adds	r3, #40	@ 0x28
 800bfee:	2102      	movs	r1, #2
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 fe95 	bl	800cd20 <RCCEx_PLL3_Config>
 800bff6:	4603      	mov	r3, r0
 800bff8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bffc:	e00a      	b.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bffe:	2301      	movs	r3, #1
 800c000:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c004:	e006      	b.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c006:	bf00      	nop
 800c008:	e004      	b.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c00a:	bf00      	nop
 800c00c:	e002      	b.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c00e:	bf00      	nop
 800c010:	e000      	b.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c012:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c014:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10b      	bne.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c01c:	4ba1      	ldr	r3, [pc, #644]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c01e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c020:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c028:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c02c:	4a9d      	ldr	r2, [pc, #628]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c02e:	430b      	orrs	r3, r1
 800c030:	6593      	str	r3, [r2, #88]	@ 0x58
 800c032:	e003      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c034:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c038:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f002 0308 	and.w	r3, r2, #8
 800c048:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c04c:	2300      	movs	r3, #0
 800c04e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c052:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c056:	460b      	mov	r3, r1
 800c058:	4313      	orrs	r3, r2
 800c05a:	d01e      	beq.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c05c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c068:	d10c      	bne.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c06a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c06e:	3328      	adds	r3, #40	@ 0x28
 800c070:	2102      	movs	r1, #2
 800c072:	4618      	mov	r0, r3
 800c074:	f000 fe54 	bl	800cd20 <RCCEx_PLL3_Config>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d002      	beq.n	800c084 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c084:	4b87      	ldr	r3, [pc, #540]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c088:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c08c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c094:	4a83      	ldr	r2, [pc, #524]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c096:	430b      	orrs	r3, r1
 800c098:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c09a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f002 0310 	and.w	r3, r2, #16
 800c0a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c0b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	d01e      	beq.n	800c0f8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c0ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c0c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0c6:	d10c      	bne.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0cc:	3328      	adds	r3, #40	@ 0x28
 800c0ce:	2102      	movs	r1, #2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 fe25 	bl	800cd20 <RCCEx_PLL3_Config>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d002      	beq.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c0e2:	4b70      	ldr	r3, [pc, #448]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c0e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c0ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c0f2:	4a6c      	ldr	r2, [pc, #432]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c0f4:	430b      	orrs	r3, r1
 800c0f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c0f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c104:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c108:	2300      	movs	r3, #0
 800c10a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c10e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c112:	460b      	mov	r3, r1
 800c114:	4313      	orrs	r3, r2
 800c116:	d03e      	beq.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c11c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c120:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c124:	d022      	beq.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c12a:	d81b      	bhi.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d003      	beq.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c134:	d00b      	beq.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c136:	e015      	b.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c13c:	3308      	adds	r3, #8
 800c13e:	2100      	movs	r1, #0
 800c140:	4618      	mov	r0, r3
 800c142:	f000 fd3b 	bl	800cbbc <RCCEx_PLL2_Config>
 800c146:	4603      	mov	r3, r0
 800c148:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c14c:	e00f      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c14e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c152:	3328      	adds	r3, #40	@ 0x28
 800c154:	2102      	movs	r1, #2
 800c156:	4618      	mov	r0, r3
 800c158:	f000 fde2 	bl	800cd20 <RCCEx_PLL3_Config>
 800c15c:	4603      	mov	r3, r0
 800c15e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c162:	e004      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c164:	2301      	movs	r3, #1
 800c166:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c16a:	e000      	b.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c16c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c16e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10b      	bne.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c176:	4b4b      	ldr	r3, [pc, #300]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c17a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c17e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c182:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c186:	4a47      	ldr	r2, [pc, #284]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c188:	430b      	orrs	r3, r1
 800c18a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c18c:	e003      	b.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c18e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c192:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c196:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c1a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c1a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	d03b      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c1b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c1be:	d01f      	beq.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c1c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c1c4:	d818      	bhi.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c1c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1ca:	d003      	beq.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c1cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c1d0:	d007      	beq.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c1d2:	e011      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1d4:	4b33      	ldr	r3, [pc, #204]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d8:	4a32      	ldr	r2, [pc, #200]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c1da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c1e0:	e00f      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1e6:	3328      	adds	r3, #40	@ 0x28
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 fd98 	bl	800cd20 <RCCEx_PLL3_Config>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c1f6:	e004      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c1fe:	e000      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c200:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c202:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c206:	2b00      	cmp	r3, #0
 800c208:	d10b      	bne.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c20a:	4b26      	ldr	r3, [pc, #152]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c20c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c20e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c21a:	4a22      	ldr	r2, [pc, #136]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c21c:	430b      	orrs	r3, r1
 800c21e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c220:	e003      	b.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c222:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c226:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c22a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c236:	673b      	str	r3, [r7, #112]	@ 0x70
 800c238:	2300      	movs	r3, #0
 800c23a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c23c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c240:	460b      	mov	r3, r1
 800c242:	4313      	orrs	r3, r2
 800c244:	d034      	beq.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c24a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c254:	d007      	beq.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c256:	e011      	b.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c258:	4b12      	ldr	r3, [pc, #72]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c25c:	4a11      	ldr	r2, [pc, #68]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c25e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c264:	e00e      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c26a:	3308      	adds	r3, #8
 800c26c:	2102      	movs	r1, #2
 800c26e:	4618      	mov	r0, r3
 800c270:	f000 fca4 	bl	800cbbc <RCCEx_PLL2_Config>
 800c274:	4603      	mov	r3, r0
 800c276:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c27a:	e003      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c282:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c284:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d10d      	bne.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c28c:	4b05      	ldr	r3, [pc, #20]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c28e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c290:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c29a:	4a02      	ldr	r2, [pc, #8]	@ (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c29c:	430b      	orrs	r3, r1
 800c29e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c2a0:	e006      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c2a2:	bf00      	nop
 800c2a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c2b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c2bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c2be:	2300      	movs	r3, #0
 800c2c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c2c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	d00c      	beq.n	800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2d0:	3328      	adds	r3, #40	@ 0x28
 800c2d2:	2102      	movs	r1, #2
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f000 fd23 	bl	800cd20 <RCCEx_PLL3_Config>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c2e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c2f2:	663b      	str	r3, [r7, #96]	@ 0x60
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	667b      	str	r3, [r7, #100]	@ 0x64
 800c2f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	4313      	orrs	r3, r2
 800c300:	d038      	beq.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c30a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c30e:	d018      	beq.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c310:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c314:	d811      	bhi.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c31a:	d014      	beq.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c31c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c320:	d80b      	bhi.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c322:	2b00      	cmp	r3, #0
 800c324:	d011      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c32a:	d106      	bne.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c32c:	4bc3      	ldr	r3, [pc, #780]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c330:	4ac2      	ldr	r2, [pc, #776]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c336:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c338:	e008      	b.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c340:	e004      	b.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c342:	bf00      	nop
 800c344:	e002      	b.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c346:	bf00      	nop
 800c348:	e000      	b.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c34a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c34c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10b      	bne.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c354:	4bb9      	ldr	r3, [pc, #740]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c358:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c35c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c364:	4ab5      	ldr	r2, [pc, #724]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c366:	430b      	orrs	r3, r1
 800c368:	6553      	str	r3, [r2, #84]	@ 0x54
 800c36a:	e003      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c36c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c370:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c380:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c382:	2300      	movs	r3, #0
 800c384:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c386:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c38a:	460b      	mov	r3, r1
 800c38c:	4313      	orrs	r3, r2
 800c38e:	d009      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c390:	4baa      	ldr	r3, [pc, #680]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c394:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c39c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c39e:	4aa7      	ldr	r2, [pc, #668]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c3a0:	430b      	orrs	r3, r1
 800c3a2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c3a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ac:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c3b0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	d009      	beq.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c3c0:	4b9e      	ldr	r3, [pc, #632]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c3c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3c4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c3c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3ce:	4a9b      	ldr	r2, [pc, #620]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c3d0:	430b      	orrs	r3, r1
 800c3d2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c3d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3dc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c3e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	d009      	beq.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c3f0:	4b92      	ldr	r3, [pc, #584]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c3f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3f4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800c3f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3fe:	4a8f      	ldr	r2, [pc, #572]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c400:	430b      	orrs	r3, r1
 800c402:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c410:	643b      	str	r3, [r7, #64]	@ 0x40
 800c412:	2300      	movs	r3, #0
 800c414:	647b      	str	r3, [r7, #68]	@ 0x44
 800c416:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c41a:	460b      	mov	r3, r1
 800c41c:	4313      	orrs	r3, r2
 800c41e:	d00e      	beq.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c420:	4b86      	ldr	r3, [pc, #536]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	4a85      	ldr	r2, [pc, #532]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c426:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c42a:	6113      	str	r3, [r2, #16]
 800c42c:	4b83      	ldr	r3, [pc, #524]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c42e:	6919      	ldr	r1, [r3, #16]
 800c430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c434:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c438:	4a80      	ldr	r2, [pc, #512]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c43a:	430b      	orrs	r3, r1
 800c43c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c43e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c44a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c44c:	2300      	movs	r3, #0
 800c44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c450:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c454:	460b      	mov	r3, r1
 800c456:	4313      	orrs	r3, r2
 800c458:	d009      	beq.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c45a:	4b78      	ldr	r3, [pc, #480]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c45c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c45e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c468:	4a74      	ldr	r2, [pc, #464]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c46a:	430b      	orrs	r3, r1
 800c46c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c46e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c47a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c47c:	2300      	movs	r3, #0
 800c47e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c480:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c484:	460b      	mov	r3, r1
 800c486:	4313      	orrs	r3, r2
 800c488:	d00a      	beq.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c48a:	4b6c      	ldr	r3, [pc, #432]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c48c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c48e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c49a:	4a68      	ldr	r2, [pc, #416]	@ (800c63c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c49c:	430b      	orrs	r3, r1
 800c49e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c4a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c4ac:	f003 0301 	and.w	r3, r3, #1
 800c4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	d011      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f000 fb79 	bl	800cbbc <RCCEx_PLL2_Config>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c4d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d003      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c4e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	6239      	str	r1, [r7, #32]
 800c4ec:	f003 0302 	and.w	r3, r3, #2
 800c4f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	d011      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c500:	3308      	adds	r3, #8
 800c502:	2101      	movs	r1, #1
 800c504:	4618      	mov	r0, r3
 800c506:	f000 fb59 	bl	800cbbc <RCCEx_PLL2_Config>
 800c50a:	4603      	mov	r3, r0
 800c50c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c510:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c514:	2b00      	cmp	r3, #0
 800c516:	d003      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c518:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c51c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	2100      	movs	r1, #0
 800c52a:	61b9      	str	r1, [r7, #24]
 800c52c:	f003 0304 	and.w	r3, r3, #4
 800c530:	61fb      	str	r3, [r7, #28]
 800c532:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c536:	460b      	mov	r3, r1
 800c538:	4313      	orrs	r3, r2
 800c53a:	d011      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c53c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c540:	3308      	adds	r3, #8
 800c542:	2102      	movs	r1, #2
 800c544:	4618      	mov	r0, r3
 800c546:	f000 fb39 	bl	800cbbc <RCCEx_PLL2_Config>
 800c54a:	4603      	mov	r3, r0
 800c54c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c550:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c554:	2b00      	cmp	r3, #0
 800c556:	d003      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c558:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c55c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	2100      	movs	r1, #0
 800c56a:	6139      	str	r1, [r7, #16]
 800c56c:	f003 0308 	and.w	r3, r3, #8
 800c570:	617b      	str	r3, [r7, #20]
 800c572:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c576:	460b      	mov	r3, r1
 800c578:	4313      	orrs	r3, r2
 800c57a:	d011      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c57c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c580:	3328      	adds	r3, #40	@ 0x28
 800c582:	2100      	movs	r1, #0
 800c584:	4618      	mov	r0, r3
 800c586:	f000 fbcb 	bl	800cd20 <RCCEx_PLL3_Config>
 800c58a:	4603      	mov	r3, r0
 800c58c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800c590:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c598:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c59c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	60b9      	str	r1, [r7, #8]
 800c5ac:	f003 0310 	and.w	r3, r3, #16
 800c5b0:	60fb      	str	r3, [r7, #12]
 800c5b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	d011      	beq.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5c0:	3328      	adds	r3, #40	@ 0x28
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f000 fbab 	bl	800cd20 <RCCEx_PLL3_Config>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c5d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d003      	beq.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c5e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	6039      	str	r1, [r7, #0]
 800c5ec:	f003 0320 	and.w	r3, r3, #32
 800c5f0:	607b      	str	r3, [r7, #4]
 800c5f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c5f6:	460b      	mov	r3, r1
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	d011      	beq.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c600:	3328      	adds	r3, #40	@ 0x28
 800c602:	2102      	movs	r1, #2
 800c604:	4618      	mov	r0, r3
 800c606:	f000 fb8b 	bl	800cd20 <RCCEx_PLL3_Config>
 800c60a:	4603      	mov	r3, r0
 800c60c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c610:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c614:	2b00      	cmp	r3, #0
 800c616:	d003      	beq.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c618:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c61c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800c620:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800c624:	2b00      	cmp	r3, #0
 800c626:	d101      	bne.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c628:	2300      	movs	r3, #0
 800c62a:	e000      	b.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
}
 800c62e:	4618      	mov	r0, r3
 800c630:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800c634:	46bd      	mov	sp, r7
 800c636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c63a:	bf00      	nop
 800c63c:	58024400 	.word	0x58024400

0800c640 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c644:	f7fe fda0 	bl	800b188 <HAL_RCC_GetHCLKFreq>
 800c648:	4602      	mov	r2, r0
 800c64a:	4b06      	ldr	r3, [pc, #24]	@ (800c664 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c64c:	6a1b      	ldr	r3, [r3, #32]
 800c64e:	091b      	lsrs	r3, r3, #4
 800c650:	f003 0307 	and.w	r3, r3, #7
 800c654:	4904      	ldr	r1, [pc, #16]	@ (800c668 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c656:	5ccb      	ldrb	r3, [r1, r3]
 800c658:	f003 031f 	and.w	r3, r3, #31
 800c65c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c660:	4618      	mov	r0, r3
 800c662:	bd80      	pop	{r7, pc}
 800c664:	58024400 	.word	0x58024400
 800c668:	080199f4 	.word	0x080199f4

0800c66c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b089      	sub	sp, #36	@ 0x24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c674:	4ba1      	ldr	r3, [pc, #644]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c678:	f003 0303 	and.w	r3, r3, #3
 800c67c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c67e:	4b9f      	ldr	r3, [pc, #636]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c682:	0b1b      	lsrs	r3, r3, #12
 800c684:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c688:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c68a:	4b9c      	ldr	r3, [pc, #624]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c68e:	091b      	lsrs	r3, r3, #4
 800c690:	f003 0301 	and.w	r3, r3, #1
 800c694:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c696:	4b99      	ldr	r3, [pc, #612]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c69a:	08db      	lsrs	r3, r3, #3
 800c69c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	fb02 f303 	mul.w	r3, r2, r3
 800c6a6:	ee07 3a90 	vmov	s15, r3
 800c6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f000 8111 	beq.w	800c8dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	f000 8083 	beq.w	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	f200 80a1 	bhi.w	800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d003      	beq.n	800c6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d056      	beq.n	800c784 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c6d6:	e099      	b.n	800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6d8:	4b88      	ldr	r3, [pc, #544]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 0320 	and.w	r3, r3, #32
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d02d      	beq.n	800c740 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6e4:	4b85      	ldr	r3, [pc, #532]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	08db      	lsrs	r3, r3, #3
 800c6ea:	f003 0303 	and.w	r3, r3, #3
 800c6ee:	4a84      	ldr	r2, [pc, #528]	@ (800c900 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	ee07 3a90 	vmov	s15, r3
 800c6fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	ee07 3a90 	vmov	s15, r3
 800c706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c70e:	4b7b      	ldr	r3, [pc, #492]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c716:	ee07 3a90 	vmov	s15, r3
 800c71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c722:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c72e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c73a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c73e:	e087      	b.n	800c850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	ee07 3a90 	vmov	s15, r3
 800c746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c74a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c908 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c752:	4b6a      	ldr	r3, [pc, #424]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c75a:	ee07 3a90 	vmov	s15, r3
 800c75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c762:	ed97 6a03 	vldr	s12, [r7, #12]
 800c766:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c77e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c782:	e065      	b.n	800c850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	ee07 3a90 	vmov	s15, r3
 800c78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c78e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c90c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c796:	4b59      	ldr	r3, [pc, #356]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c79e:	ee07 3a90 	vmov	s15, r3
 800c7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7c6:	e043      	b.n	800c850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	ee07 3a90 	vmov	s15, r3
 800c7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c7d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7da:	4b48      	ldr	r3, [pc, #288]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7e2:	ee07 3a90 	vmov	s15, r3
 800c7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c80a:	e021      	b.n	800c850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	ee07 3a90 	vmov	s15, r3
 800c812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c816:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c90c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c81a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c81e:	4b37      	ldr	r3, [pc, #220]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c826:	ee07 3a90 	vmov	s15, r3
 800c82a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c82e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c832:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c83a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c83e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c84a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c84e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c850:	4b2a      	ldr	r3, [pc, #168]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c854:	0a5b      	lsrs	r3, r3, #9
 800c856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c85a:	ee07 3a90 	vmov	s15, r3
 800c85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c862:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c86a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c86e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c876:	ee17 2a90 	vmov	r2, s15
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c87e:	4b1f      	ldr	r3, [pc, #124]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c882:	0c1b      	lsrs	r3, r3, #16
 800c884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c888:	ee07 3a90 	vmov	s15, r3
 800c88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c890:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c894:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c898:	edd7 6a07 	vldr	s13, [r7, #28]
 800c89c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8a4:	ee17 2a90 	vmov	r2, s15
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c8ac:	4b13      	ldr	r3, [pc, #76]	@ (800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b0:	0e1b      	lsrs	r3, r3, #24
 800c8b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8b6:	ee07 3a90 	vmov	s15, r3
 800c8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c8c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c8c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c8ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8d2:	ee17 2a90 	vmov	r2, s15
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c8da:	e008      	b.n	800c8ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	609a      	str	r2, [r3, #8]
}
 800c8ee:	bf00      	nop
 800c8f0:	3724      	adds	r7, #36	@ 0x24
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	58024400 	.word	0x58024400
 800c900:	03d09000 	.word	0x03d09000
 800c904:	46000000 	.word	0x46000000
 800c908:	4c742400 	.word	0x4c742400
 800c90c:	4a742400 	.word	0x4a742400
 800c910:	4bb71b00 	.word	0x4bb71b00

0800c914 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c914:	b480      	push	{r7}
 800c916:	b089      	sub	sp, #36	@ 0x24
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c91c:	4ba1      	ldr	r3, [pc, #644]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c920:	f003 0303 	and.w	r3, r3, #3
 800c924:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c926:	4b9f      	ldr	r3, [pc, #636]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c92a:	0d1b      	lsrs	r3, r3, #20
 800c92c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c930:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c932:	4b9c      	ldr	r3, [pc, #624]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c936:	0a1b      	lsrs	r3, r3, #8
 800c938:	f003 0301 	and.w	r3, r3, #1
 800c93c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c93e:	4b99      	ldr	r3, [pc, #612]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c942:	08db      	lsrs	r3, r3, #3
 800c944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c948:	693a      	ldr	r2, [r7, #16]
 800c94a:	fb02 f303 	mul.w	r3, r2, r3
 800c94e:	ee07 3a90 	vmov	s15, r3
 800c952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c956:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f000 8111 	beq.w	800cb84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	2b02      	cmp	r3, #2
 800c966:	f000 8083 	beq.w	800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	f200 80a1 	bhi.w	800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d003      	beq.n	800c980 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d056      	beq.n	800ca2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c97e:	e099      	b.n	800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c980:	4b88      	ldr	r3, [pc, #544]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 0320 	and.w	r3, r3, #32
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d02d      	beq.n	800c9e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c98c:	4b85      	ldr	r3, [pc, #532]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	08db      	lsrs	r3, r3, #3
 800c992:	f003 0303 	and.w	r3, r3, #3
 800c996:	4a84      	ldr	r2, [pc, #528]	@ (800cba8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c998:	fa22 f303 	lsr.w	r3, r2, r3
 800c99c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	ee07 3a90 	vmov	s15, r3
 800c9a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9b6:	4b7b      	ldr	r3, [pc, #492]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cbac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c9e6:	e087      	b.n	800caf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	ee07 3a90 	vmov	s15, r3
 800c9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9fa:	4b6a      	ldr	r3, [pc, #424]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cbac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca2a:	e065      	b.n	800caf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	ee07 3a90 	vmov	s15, r3
 800ca32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca3e:	4b59      	ldr	r3, [pc, #356]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca46:	ee07 3a90 	vmov	s15, r3
 800ca4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cbac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca6e:	e043      	b.n	800caf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	ee07 3a90 	vmov	s15, r3
 800ca76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ca7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca82:	4b48      	ldr	r3, [pc, #288]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca8a:	ee07 3a90 	vmov	s15, r3
 800ca8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cbac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800caa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cab2:	e021      	b.n	800caf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	ee07 3a90 	vmov	s15, r3
 800caba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cabe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cac6:	4b37      	ldr	r3, [pc, #220]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cace:	ee07 3a90 	vmov	s15, r3
 800cad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cad6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cada:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cbac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800caea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800caf8:	4b2a      	ldr	r3, [pc, #168]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cafa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cafc:	0a5b      	lsrs	r3, r3, #9
 800cafe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb02:	ee07 3a90 	vmov	s15, r3
 800cb06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb12:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb1e:	ee17 2a90 	vmov	r2, s15
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cb26:	4b1f      	ldr	r3, [pc, #124]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb2a:	0c1b      	lsrs	r3, r3, #16
 800cb2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb30:	ee07 3a90 	vmov	s15, r3
 800cb34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb40:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb4c:	ee17 2a90 	vmov	r2, s15
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cb54:	4b13      	ldr	r3, [pc, #76]	@ (800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb58:	0e1b      	lsrs	r3, r3, #24
 800cb5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb5e:	ee07 3a90 	vmov	s15, r3
 800cb62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb7a:	ee17 2a90 	vmov	r2, s15
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cb82:	e008      	b.n	800cb96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	609a      	str	r2, [r3, #8]
}
 800cb96:	bf00      	nop
 800cb98:	3724      	adds	r7, #36	@ 0x24
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	58024400 	.word	0x58024400
 800cba8:	03d09000 	.word	0x03d09000
 800cbac:	46000000 	.word	0x46000000
 800cbb0:	4c742400 	.word	0x4c742400
 800cbb4:	4a742400 	.word	0x4a742400
 800cbb8:	4bb71b00 	.word	0x4bb71b00

0800cbbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cbca:	4b53      	ldr	r3, [pc, #332]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cbcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbce:	f003 0303 	and.w	r3, r3, #3
 800cbd2:	2b03      	cmp	r3, #3
 800cbd4:	d101      	bne.n	800cbda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e099      	b.n	800cd0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cbda:	4b4f      	ldr	r3, [pc, #316]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a4e      	ldr	r2, [pc, #312]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cbe0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cbe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbe6:	f7f9 fc5f 	bl	80064a8 <HAL_GetTick>
 800cbea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cbec:	e008      	b.n	800cc00 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cbee:	f7f9 fc5b 	bl	80064a8 <HAL_GetTick>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	1ad3      	subs	r3, r2, r3
 800cbf8:	2b02      	cmp	r3, #2
 800cbfa:	d901      	bls.n	800cc00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cbfc:	2303      	movs	r3, #3
 800cbfe:	e086      	b.n	800cd0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc00:	4b45      	ldr	r3, [pc, #276]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d1f0      	bne.n	800cbee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cc0c:	4b42      	ldr	r3, [pc, #264]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc10:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	031b      	lsls	r3, r3, #12
 800cc1a:	493f      	ldr	r1, [pc, #252]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	628b      	str	r3, [r1, #40]	@ 0x28
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	025b      	lsls	r3, r3, #9
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	431a      	orrs	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	041b      	lsls	r3, r3, #16
 800cc3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cc42:	431a      	orrs	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	691b      	ldr	r3, [r3, #16]
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	061b      	lsls	r3, r3, #24
 800cc4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cc50:	4931      	ldr	r1, [pc, #196]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc52:	4313      	orrs	r3, r2
 800cc54:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cc56:	4b30      	ldr	r3, [pc, #192]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	695b      	ldr	r3, [r3, #20]
 800cc62:	492d      	ldr	r1, [pc, #180]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc64:	4313      	orrs	r3, r2
 800cc66:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cc68:	4b2b      	ldr	r3, [pc, #172]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc6c:	f023 0220 	bic.w	r2, r3, #32
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	4928      	ldr	r1, [pc, #160]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc76:	4313      	orrs	r3, r2
 800cc78:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cc7a:	4b27      	ldr	r3, [pc, #156]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7e:	4a26      	ldr	r2, [pc, #152]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc80:	f023 0310 	bic.w	r3, r3, #16
 800cc84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cc86:	4b24      	ldr	r3, [pc, #144]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc8a:	4b24      	ldr	r3, [pc, #144]	@ (800cd1c <RCCEx_PLL2_Config+0x160>)
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	69d2      	ldr	r2, [r2, #28]
 800cc92:	00d2      	lsls	r2, r2, #3
 800cc94:	4920      	ldr	r1, [pc, #128]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc96:	4313      	orrs	r3, r2
 800cc98:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cc9a:	4b1f      	ldr	r3, [pc, #124]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cc9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc9e:	4a1e      	ldr	r2, [pc, #120]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cca0:	f043 0310 	orr.w	r3, r3, #16
 800cca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d106      	bne.n	800ccba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ccac:	4b1a      	ldr	r3, [pc, #104]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800ccae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccb0:	4a19      	ldr	r2, [pc, #100]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800ccb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ccb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ccb8:	e00f      	b.n	800ccda <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d106      	bne.n	800ccce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ccc0:	4b15      	ldr	r3, [pc, #84]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800ccc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccc4:	4a14      	ldr	r2, [pc, #80]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800ccc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ccca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cccc:	e005      	b.n	800ccda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ccce:	4b12      	ldr	r3, [pc, #72]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800ccd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd2:	4a11      	ldr	r2, [pc, #68]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800ccd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ccd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ccda:	4b0f      	ldr	r3, [pc, #60]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a0e      	ldr	r2, [pc, #56]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cce0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cce6:	f7f9 fbdf 	bl	80064a8 <HAL_GetTick>
 800ccea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ccec:	e008      	b.n	800cd00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ccee:	f7f9 fbdb 	bl	80064a8 <HAL_GetTick>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d901      	bls.n	800cd00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	e006      	b.n	800cd0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd00:	4b05      	ldr	r3, [pc, #20]	@ (800cd18 <RCCEx_PLL2_Config+0x15c>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d0f0      	beq.n	800ccee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	58024400 	.word	0x58024400
 800cd1c:	ffff0007 	.word	0xffff0007

0800cd20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd2e:	4b53      	ldr	r3, [pc, #332]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cd30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd32:	f003 0303 	and.w	r3, r3, #3
 800cd36:	2b03      	cmp	r3, #3
 800cd38:	d101      	bne.n	800cd3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e099      	b.n	800ce72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cd3e:	4b4f      	ldr	r3, [pc, #316]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a4e      	ldr	r2, [pc, #312]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cd44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cd48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd4a:	f7f9 fbad 	bl	80064a8 <HAL_GetTick>
 800cd4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cd50:	e008      	b.n	800cd64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cd52:	f7f9 fba9 	bl	80064a8 <HAL_GetTick>
 800cd56:	4602      	mov	r2, r0
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	2b02      	cmp	r3, #2
 800cd5e:	d901      	bls.n	800cd64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd60:	2303      	movs	r3, #3
 800cd62:	e086      	b.n	800ce72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cd64:	4b45      	ldr	r3, [pc, #276]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1f0      	bne.n	800cd52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cd70:	4b42      	ldr	r3, [pc, #264]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cd72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd74:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	051b      	lsls	r3, r3, #20
 800cd7e:	493f      	ldr	r1, [pc, #252]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cd80:	4313      	orrs	r3, r2
 800cd82:	628b      	str	r3, [r1, #40]	@ 0x28
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	3b01      	subs	r3, #1
 800cd94:	025b      	lsls	r3, r3, #9
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	431a      	orrs	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	041b      	lsls	r3, r3, #16
 800cda2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cda6:	431a      	orrs	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	3b01      	subs	r3, #1
 800cdae:	061b      	lsls	r3, r3, #24
 800cdb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cdb4:	4931      	ldr	r1, [pc, #196]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cdba:	4b30      	ldr	r3, [pc, #192]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cdbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	695b      	ldr	r3, [r3, #20]
 800cdc6:	492d      	ldr	r1, [pc, #180]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cdcc:	4b2b      	ldr	r3, [pc, #172]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cdce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	4928      	ldr	r1, [pc, #160]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cdda:	4313      	orrs	r3, r2
 800cddc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cdde:	4b27      	ldr	r3, [pc, #156]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cde0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cde2:	4a26      	ldr	r2, [pc, #152]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cde4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cde8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cdea:	4b24      	ldr	r3, [pc, #144]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cdec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cdee:	4b24      	ldr	r3, [pc, #144]	@ (800ce80 <RCCEx_PLL3_Config+0x160>)
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	69d2      	ldr	r2, [r2, #28]
 800cdf6:	00d2      	lsls	r2, r2, #3
 800cdf8:	4920      	ldr	r1, [pc, #128]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cdfe:	4b1f      	ldr	r3, [pc, #124]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800ce00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce02:	4a1e      	ldr	r2, [pc, #120]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800ce04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d106      	bne.n	800ce1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ce10:	4b1a      	ldr	r3, [pc, #104]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800ce12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce14:	4a19      	ldr	r2, [pc, #100]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800ce16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ce1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ce1c:	e00f      	b.n	800ce3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d106      	bne.n	800ce32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ce24:	4b15      	ldr	r3, [pc, #84]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800ce26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce28:	4a14      	ldr	r2, [pc, #80]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800ce2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ce2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ce30:	e005      	b.n	800ce3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ce32:	4b12      	ldr	r3, [pc, #72]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800ce34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce36:	4a11      	ldr	r2, [pc, #68]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800ce38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ce3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ce3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a0e      	ldr	r2, [pc, #56]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800ce44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ce48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce4a:	f7f9 fb2d 	bl	80064a8 <HAL_GetTick>
 800ce4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ce50:	e008      	b.n	800ce64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ce52:	f7f9 fb29 	bl	80064a8 <HAL_GetTick>
 800ce56:	4602      	mov	r2, r0
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d901      	bls.n	800ce64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce60:	2303      	movs	r3, #3
 800ce62:	e006      	b.n	800ce72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ce64:	4b05      	ldr	r3, [pc, #20]	@ (800ce7c <RCCEx_PLL3_Config+0x15c>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d0f0      	beq.n	800ce52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ce70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	58024400 	.word	0x58024400
 800ce80:	ffff0007 	.word	0xffff0007

0800ce84 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d101      	bne.n	800ce96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	e10f      	b.n	800d0b6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a87      	ldr	r2, [pc, #540]	@ (800d0c0 <HAL_SPI_Init+0x23c>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d00f      	beq.n	800cec6 <HAL_SPI_Init+0x42>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a86      	ldr	r2, [pc, #536]	@ (800d0c4 <HAL_SPI_Init+0x240>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d00a      	beq.n	800cec6 <HAL_SPI_Init+0x42>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a84      	ldr	r2, [pc, #528]	@ (800d0c8 <HAL_SPI_Init+0x244>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d005      	beq.n	800cec6 <HAL_SPI_Init+0x42>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	2b0f      	cmp	r3, #15
 800cec0:	d901      	bls.n	800cec6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e0f7      	b.n	800d0b6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f001 f968 	bl	800e19c <SPI_GetPacketSize>
 800cecc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a7b      	ldr	r2, [pc, #492]	@ (800d0c0 <HAL_SPI_Init+0x23c>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d00c      	beq.n	800cef2 <HAL_SPI_Init+0x6e>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a79      	ldr	r2, [pc, #484]	@ (800d0c4 <HAL_SPI_Init+0x240>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d007      	beq.n	800cef2 <HAL_SPI_Init+0x6e>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a78      	ldr	r2, [pc, #480]	@ (800d0c8 <HAL_SPI_Init+0x244>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d002      	beq.n	800cef2 <HAL_SPI_Init+0x6e>
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2b08      	cmp	r3, #8
 800cef0:	d811      	bhi.n	800cf16 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cef6:	4a72      	ldr	r2, [pc, #456]	@ (800d0c0 <HAL_SPI_Init+0x23c>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d009      	beq.n	800cf10 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a70      	ldr	r2, [pc, #448]	@ (800d0c4 <HAL_SPI_Init+0x240>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d004      	beq.n	800cf10 <HAL_SPI_Init+0x8c>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a6f      	ldr	r2, [pc, #444]	@ (800d0c8 <HAL_SPI_Init+0x244>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d104      	bne.n	800cf1a <HAL_SPI_Init+0x96>
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2b10      	cmp	r3, #16
 800cf14:	d901      	bls.n	800cf1a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	e0cd      	b.n	800d0b6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d106      	bne.n	800cf34 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7f6 f800 	bl	8002f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2202      	movs	r2, #2
 800cf38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f022 0201 	bic.w	r2, r2, #1
 800cf4a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800cf56:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	699b      	ldr	r3, [r3, #24]
 800cf5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cf60:	d119      	bne.n	800cf96 <HAL_SPI_Init+0x112>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cf6a:	d103      	bne.n	800cf74 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d008      	beq.n	800cf86 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10c      	bne.n	800cf96 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf84:	d107      	bne.n	800cf96 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cf94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d00f      	beq.n	800cfc2 <HAL_SPI_Init+0x13e>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	2b06      	cmp	r3, #6
 800cfa8:	d90b      	bls.n	800cfc2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	430a      	orrs	r2, r1
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	e007      	b.n	800cfd2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cfd0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	69da      	ldr	r2, [r3, #28]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfda:	431a      	orrs	r2, r3
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	431a      	orrs	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfe4:	ea42 0103 	orr.w	r1, r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	68da      	ldr	r2, [r3, #12]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	430a      	orrs	r2, r1
 800cff2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cffc:	431a      	orrs	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d002:	431a      	orrs	r2, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	699b      	ldr	r3, [r3, #24]
 800d008:	431a      	orrs	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	691b      	ldr	r3, [r3, #16]
 800d00e:	431a      	orrs	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	695b      	ldr	r3, [r3, #20]
 800d014:	431a      	orrs	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6a1b      	ldr	r3, [r3, #32]
 800d01a:	431a      	orrs	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	431a      	orrs	r2, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d026:	431a      	orrs	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	431a      	orrs	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d032:	ea42 0103 	orr.w	r1, r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	430a      	orrs	r2, r1
 800d040:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d113      	bne.n	800d072 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d05c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d070:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f022 0201 	bic.w	r2, r2, #1
 800d080:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00a      	beq.n	800d0a4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	430a      	orrs	r2, r1
 800d0a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	40013000 	.word	0x40013000
 800d0c4:	40003800 	.word	0x40003800
 800d0c8:	40003c00 	.word	0x40003c00

0800d0cc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b088      	sub	sp, #32
 800d0d0:	af02      	add	r7, sp, #8
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	603b      	str	r3, [r7, #0]
 800d0d8:	4613      	mov	r3, r2
 800d0da:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	3320      	adds	r3, #32
 800d0e2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0e4:	f7f9 f9e0 	bl	80064a8 <HAL_GetTick>
 800d0e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d001      	beq.n	800d0fa <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800d0f6:	2302      	movs	r3, #2
 800d0f8:	e1d1      	b.n	800d49e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <HAL_SPI_Transmit+0x3a>
 800d100:	88fb      	ldrh	r3, [r7, #6]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d101      	bne.n	800d10a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800d106:	2301      	movs	r3, #1
 800d108:	e1c9      	b.n	800d49e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d110:	2b01      	cmp	r3, #1
 800d112:	d101      	bne.n	800d118 <HAL_SPI_Transmit+0x4c>
 800d114:	2302      	movs	r3, #2
 800d116:	e1c2      	b.n	800d49e <HAL_SPI_Transmit+0x3d2>
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2203      	movs	r2, #3
 800d124:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	88fa      	ldrh	r2, [r7, #6]
 800d13a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	88fa      	ldrh	r2, [r7, #6]
 800d142:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2200      	movs	r2, #0
 800d14a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2200      	movs	r2, #0
 800d158:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2200      	movs	r2, #0
 800d160:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	689b      	ldr	r3, [r3, #8]
 800d16c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d170:	d108      	bne.n	800d184 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d180:	601a      	str	r2, [r3, #0]
 800d182:	e009      	b.n	800d198 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d196:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	685a      	ldr	r2, [r3, #4]
 800d19e:	4b96      	ldr	r3, [pc, #600]	@ (800d3f8 <HAL_SPI_Transmit+0x32c>)
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	88f9      	ldrh	r1, [r7, #6]
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	6812      	ldr	r2, [r2, #0]
 800d1a8:	430b      	orrs	r3, r1
 800d1aa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f042 0201 	orr.w	r2, r2, #1
 800d1ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d1c4:	d107      	bne.n	800d1d6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d1d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	68db      	ldr	r3, [r3, #12]
 800d1da:	2b0f      	cmp	r3, #15
 800d1dc:	d947      	bls.n	800d26e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d1de:	e03f      	b.n	800d260 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	695b      	ldr	r3, [r3, #20]
 800d1e6:	f003 0302 	and.w	r3, r3, #2
 800d1ea:	2b02      	cmp	r3, #2
 800d1ec:	d114      	bne.n	800d218 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6812      	ldr	r2, [r2, #0]
 800d1f8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1fe:	1d1a      	adds	r2, r3, #4
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	3b01      	subs	r3, #1
 800d20e:	b29a      	uxth	r2, r3
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d216:	e023      	b.n	800d260 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d218:	f7f9 f946 	bl	80064a8 <HAL_GetTick>
 800d21c:	4602      	mov	r2, r0
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	683a      	ldr	r2, [r7, #0]
 800d224:	429a      	cmp	r2, r3
 800d226:	d803      	bhi.n	800d230 <HAL_SPI_Transmit+0x164>
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d22e:	d102      	bne.n	800d236 <HAL_SPI_Transmit+0x16a>
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d114      	bne.n	800d260 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f000 fee2 	bl	800e000 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d242:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2200      	movs	r2, #0
 800d258:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d25c:	2303      	movs	r3, #3
 800d25e:	e11e      	b.n	800d49e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d266:	b29b      	uxth	r3, r3
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1b9      	bne.n	800d1e0 <HAL_SPI_Transmit+0x114>
 800d26c:	e0f1      	b.n	800d452 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	2b07      	cmp	r3, #7
 800d274:	f240 80e6 	bls.w	800d444 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d278:	e05d      	b.n	800d336 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	695b      	ldr	r3, [r3, #20]
 800d280:	f003 0302 	and.w	r3, r3, #2
 800d284:	2b02      	cmp	r3, #2
 800d286:	d132      	bne.n	800d2ee <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d28e:	b29b      	uxth	r3, r3
 800d290:	2b01      	cmp	r3, #1
 800d292:	d918      	bls.n	800d2c6 <HAL_SPI_Transmit+0x1fa>
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d014      	beq.n	800d2c6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	6812      	ldr	r2, [r2, #0]
 800d2a6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2ac:	1d1a      	adds	r2, r3, #4
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	3b02      	subs	r3, #2
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d2c4:	e037      	b.n	800d336 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2ca:	881a      	ldrh	r2, [r3, #0]
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2d4:	1c9a      	adds	r2, r3, #2
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d2ec:	e023      	b.n	800d336 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2ee:	f7f9 f8db 	bl	80064a8 <HAL_GetTick>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	1ad3      	subs	r3, r2, r3
 800d2f8:	683a      	ldr	r2, [r7, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d803      	bhi.n	800d306 <HAL_SPI_Transmit+0x23a>
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d304:	d102      	bne.n	800d30c <HAL_SPI_Transmit+0x240>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d114      	bne.n	800d336 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f000 fe77 	bl	800e000 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d318:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2201      	movs	r2, #1
 800d326:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d332:	2303      	movs	r3, #3
 800d334:	e0b3      	b.n	800d49e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d19b      	bne.n	800d27a <HAL_SPI_Transmit+0x1ae>
 800d342:	e086      	b.n	800d452 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	f003 0302 	and.w	r3, r3, #2
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d154      	bne.n	800d3fc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d358:	b29b      	uxth	r3, r3
 800d35a:	2b03      	cmp	r3, #3
 800d35c:	d918      	bls.n	800d390 <HAL_SPI_Transmit+0x2c4>
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d362:	2b40      	cmp	r3, #64	@ 0x40
 800d364:	d914      	bls.n	800d390 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6812      	ldr	r2, [r2, #0]
 800d370:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d376:	1d1a      	adds	r2, r3, #4
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d382:	b29b      	uxth	r3, r3
 800d384:	3b04      	subs	r3, #4
 800d386:	b29a      	uxth	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d38e:	e059      	b.n	800d444 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d396:	b29b      	uxth	r3, r3
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d917      	bls.n	800d3cc <HAL_SPI_Transmit+0x300>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d013      	beq.n	800d3cc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3a8:	881a      	ldrh	r2, [r3, #0]
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3b2:	1c9a      	adds	r2, r3, #2
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	3b02      	subs	r3, #2
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d3ca:	e03b      	b.n	800d444 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	3320      	adds	r3, #32
 800d3d6:	7812      	ldrb	r2, [r2, #0]
 800d3d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3de:	1c5a      	adds	r2, r3, #1
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d3f6:	e025      	b.n	800d444 <HAL_SPI_Transmit+0x378>
 800d3f8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d3fc:	f7f9 f854 	bl	80064a8 <HAL_GetTick>
 800d400:	4602      	mov	r2, r0
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	683a      	ldr	r2, [r7, #0]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d803      	bhi.n	800d414 <HAL_SPI_Transmit+0x348>
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d412:	d102      	bne.n	800d41a <HAL_SPI_Transmit+0x34e>
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d114      	bne.n	800d444 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f000 fdf0 	bl	800e000 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d426:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d440:	2303      	movs	r3, #3
 800d442:	e02c      	b.n	800d49e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f47f af79 	bne.w	800d344 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	2200      	movs	r2, #0
 800d45a:	2108      	movs	r1, #8
 800d45c:	68f8      	ldr	r0, [r7, #12]
 800d45e:	f000 fe6f 	bl	800e140 <SPI_WaitOnFlagUntilTimeout>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d007      	beq.n	800d478 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d46e:	f043 0220 	orr.w	r2, r3, #32
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f000 fdc1 	bl	800e000 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2201      	movs	r2, #1
 800d482:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d494:	2b00      	cmp	r3, #0
 800d496:	d001      	beq.n	800d49c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800d498:	2301      	movs	r3, #1
 800d49a:	e000      	b.n	800d49e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800d49c:	2300      	movs	r3, #0
  }
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3718      	adds	r7, #24
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop

0800d4a8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b088      	sub	sp, #32
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	603b      	str	r3, [r7, #0]
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4bc:	095b      	lsrs	r3, r3, #5
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3330      	adds	r3, #48	@ 0x30
 800d4ca:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d4cc:	f7f8 ffec 	bl	80064a8 <HAL_GetTick>
 800d4d0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d001      	beq.n	800d4e2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800d4de:	2302      	movs	r3, #2
 800d4e0:	e250      	b.n	800d984 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <HAL_SPI_Receive+0x46>
 800d4e8:	88fb      	ldrh	r3, [r7, #6]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d101      	bne.n	800d4f2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e248      	b.n	800d984 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d101      	bne.n	800d500 <HAL_SPI_Receive+0x58>
 800d4fc:	2302      	movs	r3, #2
 800d4fe:	e241      	b.n	800d984 <HAL_SPI_Receive+0x4dc>
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2201      	movs	r2, #1
 800d504:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2204      	movs	r2, #4
 800d50c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2200      	movs	r2, #0
 800d514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	68ba      	ldr	r2, [r7, #8]
 800d51c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	88fa      	ldrh	r2, [r7, #6]
 800d522:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	88fa      	ldrh	r2, [r7, #6]
 800d52a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2200      	movs	r2, #0
 800d532:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2200      	movs	r2, #0
 800d538:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2200      	movs	r2, #0
 800d540:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2200      	movs	r2, #0
 800d54e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d558:	d108      	bne.n	800d56c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	e009      	b.n	800d580 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800d57e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	685a      	ldr	r2, [r3, #4]
 800d586:	4b95      	ldr	r3, [pc, #596]	@ (800d7dc <HAL_SPI_Receive+0x334>)
 800d588:	4013      	ands	r3, r2
 800d58a:	88f9      	ldrh	r1, [r7, #6]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	6812      	ldr	r2, [r2, #0]
 800d590:	430b      	orrs	r3, r1
 800d592:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f042 0201 	orr.w	r2, r2, #1
 800d5a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d5ac:	d107      	bne.n	800d5be <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d5bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	2b0f      	cmp	r3, #15
 800d5c4:	d96c      	bls.n	800d6a0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d5c6:	e064      	b.n	800d692 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	695b      	ldr	r3, [r3, #20]
 800d5ce:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	695b      	ldr	r3, [r3, #20]
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d114      	bne.n	800d608 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d5e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d5e8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d5ee:	1d1a      	adds	r2, r3, #4
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d606:	e044      	b.n	800d692 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d60e:	b29b      	uxth	r3, r3
 800d610:	8bfa      	ldrh	r2, [r7, #30]
 800d612:	429a      	cmp	r2, r3
 800d614:	d919      	bls.n	800d64a <HAL_SPI_Receive+0x1a2>
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d014      	beq.n	800d64a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d628:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d62a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d630:	1d1a      	adds	r2, r3, #4
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	3b01      	subs	r3, #1
 800d640:	b29a      	uxth	r2, r3
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d648:	e023      	b.n	800d692 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d64a:	f7f8 ff2d 	bl	80064a8 <HAL_GetTick>
 800d64e:	4602      	mov	r2, r0
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	683a      	ldr	r2, [r7, #0]
 800d656:	429a      	cmp	r2, r3
 800d658:	d803      	bhi.n	800d662 <HAL_SPI_Receive+0x1ba>
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d660:	d102      	bne.n	800d668 <HAL_SPI_Receive+0x1c0>
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d114      	bne.n	800d692 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f000 fcc9 	bl	800e000 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d674:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2201      	movs	r2, #1
 800d682:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d68e:	2303      	movs	r3, #3
 800d690:	e178      	b.n	800d984 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d698:	b29b      	uxth	r3, r3
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d194      	bne.n	800d5c8 <HAL_SPI_Receive+0x120>
 800d69e:	e15e      	b.n	800d95e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	2b07      	cmp	r3, #7
 800d6a6:	f240 8153 	bls.w	800d950 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d6aa:	e08f      	b.n	800d7cc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	695b      	ldr	r3, [r3, #20]
 800d6b2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	f003 0301 	and.w	r3, r3, #1
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d114      	bne.n	800d6ec <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6c6:	69ba      	ldr	r2, [r7, #24]
 800d6c8:	8812      	ldrh	r2, [r2, #0]
 800d6ca:	b292      	uxth	r2, r2
 800d6cc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6d2:	1c9a      	adds	r2, r3, #2
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d6ea:	e06f      	b.n	800d7cc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	8bfa      	ldrh	r2, [r7, #30]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d924      	bls.n	800d744 <HAL_SPI_Receive+0x29c>
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d700:	2b00      	cmp	r3, #0
 800d702:	d01f      	beq.n	800d744 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d708:	69ba      	ldr	r2, [r7, #24]
 800d70a:	8812      	ldrh	r2, [r2, #0]
 800d70c:	b292      	uxth	r2, r2
 800d70e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d714:	1c9a      	adds	r2, r3, #2
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d71e:	69ba      	ldr	r2, [r7, #24]
 800d720:	8812      	ldrh	r2, [r2, #0]
 800d722:	b292      	uxth	r2, r2
 800d724:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d72a:	1c9a      	adds	r2, r3, #2
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d736:	b29b      	uxth	r3, r3
 800d738:	3b02      	subs	r3, #2
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d742:	e043      	b.n	800d7cc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d119      	bne.n	800d784 <HAL_SPI_Receive+0x2dc>
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d756:	2b00      	cmp	r3, #0
 800d758:	d014      	beq.n	800d784 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d75e:	69ba      	ldr	r2, [r7, #24]
 800d760:	8812      	ldrh	r2, [r2, #0]
 800d762:	b292      	uxth	r2, r2
 800d764:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d76a:	1c9a      	adds	r2, r3, #2
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d776:	b29b      	uxth	r3, r3
 800d778:	3b01      	subs	r3, #1
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d782:	e023      	b.n	800d7cc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d784:	f7f8 fe90 	bl	80064a8 <HAL_GetTick>
 800d788:	4602      	mov	r2, r0
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	1ad3      	subs	r3, r2, r3
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	429a      	cmp	r2, r3
 800d792:	d803      	bhi.n	800d79c <HAL_SPI_Receive+0x2f4>
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79a:	d102      	bne.n	800d7a2 <HAL_SPI_Receive+0x2fa>
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d114      	bne.n	800d7cc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d7a2:	68f8      	ldr	r0, [r7, #12]
 800d7a4:	f000 fc2c 	bl	800e000 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d7ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	e0db      	b.n	800d984 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f47f af69 	bne.w	800d6ac <HAL_SPI_Receive+0x204>
 800d7da:	e0c0      	b.n	800d95e <HAL_SPI_Receive+0x4b6>
 800d7dc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	695b      	ldr	r3, [r3, #20]
 800d7e6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	695b      	ldr	r3, [r3, #20]
 800d7ee:	f003 0301 	and.w	r3, r3, #1
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d117      	bne.n	800d826 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d802:	7812      	ldrb	r2, [r2, #0]
 800d804:	b2d2      	uxtb	r2, r2
 800d806:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d80c:	1c5a      	adds	r2, r3, #1
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d818:	b29b      	uxth	r3, r3
 800d81a:	3b01      	subs	r3, #1
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d824:	e094      	b.n	800d950 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	8bfa      	ldrh	r2, [r7, #30]
 800d830:	429a      	cmp	r2, r3
 800d832:	d946      	bls.n	800d8c2 <HAL_SPI_Receive+0x41a>
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d041      	beq.n	800d8c2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d84a:	7812      	ldrb	r2, [r2, #0]
 800d84c:	b2d2      	uxtb	r2, r2
 800d84e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d854:	1c5a      	adds	r2, r3, #1
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d866:	7812      	ldrb	r2, [r2, #0]
 800d868:	b2d2      	uxtb	r2, r2
 800d86a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d870:	1c5a      	adds	r2, r3, #1
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d882:	7812      	ldrb	r2, [r2, #0]
 800d884:	b2d2      	uxtb	r2, r2
 800d886:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d88c:	1c5a      	adds	r2, r3, #1
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d89e:	7812      	ldrb	r2, [r2, #0]
 800d8a0:	b2d2      	uxtb	r2, r2
 800d8a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8a8:	1c5a      	adds	r2, r3, #1
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	3b04      	subs	r3, #4
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d8c0:	e046      	b.n	800d950 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	2b03      	cmp	r3, #3
 800d8cc:	d81c      	bhi.n	800d908 <HAL_SPI_Receive+0x460>
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d017      	beq.n	800d908 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8e4:	7812      	ldrb	r2, [r2, #0]
 800d8e6:	b2d2      	uxtb	r2, r2
 800d8e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8ee:	1c5a      	adds	r2, r3, #1
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d906:	e023      	b.n	800d950 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d908:	f7f8 fdce 	bl	80064a8 <HAL_GetTick>
 800d90c:	4602      	mov	r2, r0
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	429a      	cmp	r2, r3
 800d916:	d803      	bhi.n	800d920 <HAL_SPI_Receive+0x478>
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d91e:	d102      	bne.n	800d926 <HAL_SPI_Receive+0x47e>
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d114      	bne.n	800d950 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f000 fb6a 	bl	800e000 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d932:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2200      	movs	r2, #0
 800d948:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d94c:	2303      	movs	r3, #3
 800d94e:	e019      	b.n	800d984 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d956:	b29b      	uxth	r3, r3
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f47f af41 	bne.w	800d7e0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f000 fb4e 	bl	800e000 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2201      	movs	r2, #1
 800d968:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2200      	movs	r2, #0
 800d970:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d001      	beq.n	800d982 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800d97e:	2301      	movs	r3, #1
 800d980:	e000      	b.n	800d984 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800d982:	2300      	movs	r3, #0
  }
}
 800d984:	4618      	mov	r0, r3
 800d986:	3720      	adds	r7, #32
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b08e      	sub	sp, #56	@ 0x38
 800d990:	af02      	add	r7, sp, #8
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	3320      	adds	r3, #32
 800d9a0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3330      	adds	r3, #48	@ 0x30
 800d9a8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9ae:	095b      	lsrs	r3, r3, #5
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d9b6:	f7f8 fd77 	bl	80064a8 <HAL_GetTick>
 800d9ba:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800d9bc:	887b      	ldrh	r3, [r7, #2]
 800d9be:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800d9c0:	887b      	ldrh	r3, [r7, #2]
 800d9c2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d001      	beq.n	800d9d4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800d9d0:	2302      	movs	r3, #2
 800d9d2:	e310      	b.n	800dff6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d005      	beq.n	800d9e6 <HAL_SPI_TransmitReceive+0x5a>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d002      	beq.n	800d9e6 <HAL_SPI_TransmitReceive+0x5a>
 800d9e0:	887b      	ldrh	r3, [r7, #2]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d101      	bne.n	800d9ea <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	e305      	b.n	800dff6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d101      	bne.n	800d9f8 <HAL_SPI_TransmitReceive+0x6c>
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	e2fe      	b.n	800dff6 <HAL_SPI_TransmitReceive+0x66a>
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2205      	movs	r2, #5
 800da04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	887a      	ldrh	r2, [r7, #2]
 800da1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	887a      	ldrh	r2, [r7, #2]
 800da22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	68ba      	ldr	r2, [r7, #8]
 800da2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	887a      	ldrh	r2, [r7, #2]
 800da30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	887a      	ldrh	r2, [r7, #2]
 800da38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2200      	movs	r2, #0
 800da40:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2200      	movs	r2, #0
 800da46:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68da      	ldr	r2, [r3, #12]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800da56:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a70      	ldr	r2, [pc, #448]	@ (800dc20 <HAL_SPI_TransmitReceive+0x294>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d009      	beq.n	800da76 <HAL_SPI_TransmitReceive+0xea>
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a6f      	ldr	r2, [pc, #444]	@ (800dc24 <HAL_SPI_TransmitReceive+0x298>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d004      	beq.n	800da76 <HAL_SPI_TransmitReceive+0xea>
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a6d      	ldr	r2, [pc, #436]	@ (800dc28 <HAL_SPI_TransmitReceive+0x29c>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d102      	bne.n	800da7c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800da76:	2310      	movs	r3, #16
 800da78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da7a:	e001      	b.n	800da80 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800da7c:	2308      	movs	r3, #8
 800da7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	685a      	ldr	r2, [r3, #4]
 800da86:	4b69      	ldr	r3, [pc, #420]	@ (800dc2c <HAL_SPI_TransmitReceive+0x2a0>)
 800da88:	4013      	ands	r3, r2
 800da8a:	8879      	ldrh	r1, [r7, #2]
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	6812      	ldr	r2, [r2, #0]
 800da90:	430b      	orrs	r3, r1
 800da92:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f042 0201 	orr.w	r2, r2, #1
 800daa2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800daac:	d107      	bne.n	800dabe <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dabc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	2b0f      	cmp	r3, #15
 800dac4:	f240 80a2 	bls.w	800dc0c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800dac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daca:	089b      	lsrs	r3, r3, #2
 800dacc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dace:	e094      	b.n	800dbfa <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	f003 0302 	and.w	r3, r3, #2
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d120      	bne.n	800db20 <HAL_SPI_TransmitReceive+0x194>
 800dade:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d01d      	beq.n	800db20 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800dae4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800dae6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800dae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daea:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800daec:	429a      	cmp	r2, r3
 800daee:	d217      	bcs.n	800db20 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	6812      	ldr	r2, [r2, #0]
 800dafa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db00:	1d1a      	adds	r2, r3, #4
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	3b01      	subs	r3, #1
 800db10:	b29a      	uxth	r2, r3
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800db1e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800db28:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d065      	beq.n	800dbfa <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	695b      	ldr	r3, [r3, #20]
 800db34:	f003 0301 	and.w	r3, r3, #1
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d118      	bne.n	800db6e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800db46:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db4c:	1d1a      	adds	r2, r3, #4
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db58:	b29b      	uxth	r3, r3
 800db5a:	3b01      	subs	r3, #1
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800db6c:	e045      	b.n	800dbfa <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800db6e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800db70:	8bfb      	ldrh	r3, [r7, #30]
 800db72:	429a      	cmp	r2, r3
 800db74:	d21d      	bcs.n	800dbb2 <HAL_SPI_TransmitReceive+0x226>
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d018      	beq.n	800dbb2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800db8a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db90:	1d1a      	adds	r2, r3, #4
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	3b01      	subs	r3, #1
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dbae:	853b      	strh	r3, [r7, #40]	@ 0x28
 800dbb0:	e023      	b.n	800dbfa <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbb2:	f7f8 fc79 	bl	80064a8 <HAL_GetTick>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	69bb      	ldr	r3, [r7, #24]
 800dbba:	1ad3      	subs	r3, r2, r3
 800dbbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d803      	bhi.n	800dbca <HAL_SPI_TransmitReceive+0x23e>
 800dbc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc8:	d102      	bne.n	800dbd0 <HAL_SPI_TransmitReceive+0x244>
 800dbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d114      	bne.n	800dbfa <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f000 fa15 	bl	800e000 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dbdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800dbf6:	2303      	movs	r3, #3
 800dbf8:	e1fd      	b.n	800dff6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dbfa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f47f af67 	bne.w	800dad0 <HAL_SPI_TransmitReceive+0x144>
 800dc02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f47f af63 	bne.w	800dad0 <HAL_SPI_TransmitReceive+0x144>
 800dc0a:	e1ce      	b.n	800dfaa <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	2b07      	cmp	r3, #7
 800dc12:	f240 81c2 	bls.w	800df9a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800dc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc18:	085b      	lsrs	r3, r3, #1
 800dc1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dc1c:	e0c9      	b.n	800ddb2 <HAL_SPI_TransmitReceive+0x426>
 800dc1e:	bf00      	nop
 800dc20:	40013000 	.word	0x40013000
 800dc24:	40003800 	.word	0x40003800
 800dc28:	40003c00 	.word	0x40003c00
 800dc2c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	695b      	ldr	r3, [r3, #20]
 800dc36:	f003 0302 	and.w	r3, r3, #2
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	d11f      	bne.n	800dc7e <HAL_SPI_TransmitReceive+0x2f2>
 800dc3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d01c      	beq.n	800dc7e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800dc44:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800dc46:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800dc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc4a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d216      	bcs.n	800dc7e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc54:	881a      	ldrh	r2, [r3, #0]
 800dc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc58:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc5e:	1c9a      	adds	r2, r3, #2
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dc7c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	695b      	ldr	r3, [r3, #20]
 800dc84:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800dc86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f000 8092 	beq.w	800ddb2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	695b      	ldr	r3, [r3, #20]
 800dc94:	f003 0301 	and.w	r3, r3, #1
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d118      	bne.n	800dcce <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dca0:	6a3a      	ldr	r2, [r7, #32]
 800dca2:	8812      	ldrh	r2, [r2, #0]
 800dca4:	b292      	uxth	r2, r2
 800dca6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dcac:	1c9a      	adds	r2, r3, #2
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	b29a      	uxth	r2, r3
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dcca:	853b      	strh	r3, [r7, #40]	@ 0x28
 800dccc:	e071      	b.n	800ddb2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dcce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800dcd0:	8bfb      	ldrh	r3, [r7, #30]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d228      	bcs.n	800dd28 <HAL_SPI_TransmitReceive+0x39c>
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d023      	beq.n	800dd28 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dce4:	6a3a      	ldr	r2, [r7, #32]
 800dce6:	8812      	ldrh	r2, [r2, #0]
 800dce8:	b292      	uxth	r2, r2
 800dcea:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dcf0:	1c9a      	adds	r2, r3, #2
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dcfa:	6a3a      	ldr	r2, [r7, #32]
 800dcfc:	8812      	ldrh	r2, [r2, #0]
 800dcfe:	b292      	uxth	r2, r2
 800dd00:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd06:	1c9a      	adds	r2, r3, #2
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	3b02      	subs	r3, #2
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dd24:	853b      	strh	r3, [r7, #40]	@ 0x28
 800dd26:	e044      	b.n	800ddb2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800dd28:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d11d      	bne.n	800dd6a <HAL_SPI_TransmitReceive+0x3de>
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d018      	beq.n	800dd6a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd3c:	6a3a      	ldr	r2, [r7, #32]
 800dd3e:	8812      	ldrh	r2, [r2, #0]
 800dd40:	b292      	uxth	r2, r2
 800dd42:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd48:	1c9a      	adds	r2, r3, #2
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	3b01      	subs	r3, #1
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800dd66:	853b      	strh	r3, [r7, #40]	@ 0x28
 800dd68:	e023      	b.n	800ddb2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd6a:	f7f8 fb9d 	bl	80064a8 <HAL_GetTick>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d803      	bhi.n	800dd82 <HAL_SPI_TransmitReceive+0x3f6>
 800dd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd80:	d102      	bne.n	800dd88 <HAL_SPI_TransmitReceive+0x3fc>
 800dd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d114      	bne.n	800ddb2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f000 f939 	bl	800e000 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2201      	movs	r2, #1
 800dda2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ddae:	2303      	movs	r3, #3
 800ddb0:	e121      	b.n	800dff6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ddb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f47f af3b 	bne.w	800dc30 <HAL_SPI_TransmitReceive+0x2a4>
 800ddba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f47f af37 	bne.w	800dc30 <HAL_SPI_TransmitReceive+0x2a4>
 800ddc2:	e0f2      	b.n	800dfaa <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	f003 0302 	and.w	r3, r3, #2
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d121      	bne.n	800de16 <HAL_SPI_TransmitReceive+0x48a>
 800ddd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d01e      	beq.n	800de16 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800ddd8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ddda:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800dddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddde:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d218      	bcs.n	800de16 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3320      	adds	r3, #32
 800ddee:	7812      	ldrb	r2, [r2, #0]
 800ddf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddf6:	1c5a      	adds	r2, r3, #1
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de02:	b29b      	uxth	r3, r3
 800de04:	3b01      	subs	r3, #1
 800de06:	b29a      	uxth	r2, r3
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800de14:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800de1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800de20:	2b00      	cmp	r3, #0
 800de22:	f000 80ba 	beq.w	800df9a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	695b      	ldr	r3, [r3, #20]
 800de2c:	f003 0301 	and.w	r3, r3, #1
 800de30:	2b01      	cmp	r3, #1
 800de32:	d11b      	bne.n	800de6c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de40:	7812      	ldrb	r2, [r2, #0]
 800de42:	b2d2      	uxtb	r2, r2
 800de44:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de4a:	1c5a      	adds	r2, r3, #1
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800de56:	b29b      	uxth	r3, r3
 800de58:	3b01      	subs	r3, #1
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800de68:	853b      	strh	r3, [r7, #40]	@ 0x28
 800de6a:	e096      	b.n	800df9a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800de6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800de6e:	8bfb      	ldrh	r3, [r7, #30]
 800de70:	429a      	cmp	r2, r3
 800de72:	d24a      	bcs.n	800df0a <HAL_SPI_TransmitReceive+0x57e>
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d045      	beq.n	800df0a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de8a:	7812      	ldrb	r2, [r2, #0]
 800de8c:	b2d2      	uxtb	r2, r2
 800de8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de94:	1c5a      	adds	r2, r3, #1
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dea6:	7812      	ldrb	r2, [r2, #0]
 800dea8:	b2d2      	uxtb	r2, r2
 800deaa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800deb0:	1c5a      	adds	r2, r3, #1
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dec2:	7812      	ldrb	r2, [r2, #0]
 800dec4:	b2d2      	uxtb	r2, r2
 800dec6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800decc:	1c5a      	adds	r2, r3, #1
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dede:	7812      	ldrb	r2, [r2, #0]
 800dee0:	b2d2      	uxtb	r2, r2
 800dee2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dee8:	1c5a      	adds	r2, r3, #1
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800def4:	b29b      	uxth	r3, r3
 800def6:	3b04      	subs	r3, #4
 800def8:	b29a      	uxth	r2, r3
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800df06:	853b      	strh	r3, [r7, #40]	@ 0x28
 800df08:	e047      	b.n	800df9a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800df0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800df0c:	2b03      	cmp	r3, #3
 800df0e:	d820      	bhi.n	800df52 <HAL_SPI_TransmitReceive+0x5c6>
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800df16:	2b00      	cmp	r3, #0
 800df18:	d01b      	beq.n	800df52 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df26:	7812      	ldrb	r2, [r2, #0]
 800df28:	b2d2      	uxtb	r2, r2
 800df2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800df30:	1c5a      	adds	r2, r3, #1
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	3b01      	subs	r3, #1
 800df40:	b29a      	uxth	r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800df4e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800df50:	e023      	b.n	800df9a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df52:	f7f8 faa9 	bl	80064a8 <HAL_GetTick>
 800df56:	4602      	mov	r2, r0
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	1ad3      	subs	r3, r2, r3
 800df5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df5e:	429a      	cmp	r2, r3
 800df60:	d803      	bhi.n	800df6a <HAL_SPI_TransmitReceive+0x5de>
 800df62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df68:	d102      	bne.n	800df70 <HAL_SPI_TransmitReceive+0x5e4>
 800df6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d114      	bne.n	800df9a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f000 f845 	bl	800e000 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800df7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2201      	movs	r2, #1
 800df8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2200      	movs	r2, #0
 800df92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800df96:	2303      	movs	r3, #3
 800df98:	e02d      	b.n	800dff6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800df9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	f47f af11 	bne.w	800ddc4 <HAL_SPI_TransmitReceive+0x438>
 800dfa2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f47f af0d 	bne.w	800ddc4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	2108      	movs	r1, #8
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f000 f8c3 	bl	800e140 <SPI_WaitOnFlagUntilTimeout>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d007      	beq.n	800dfd0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dfc6:	f043 0220 	orr.w	r2, r3, #32
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f000 f815 	bl	800e000 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d001      	beq.n	800dff4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800dff0:	2301      	movs	r3, #1
 800dff2:	e000      	b.n	800dff6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800dff4:	2300      	movs	r3, #0
  }
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3730      	adds	r7, #48	@ 0x30
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop

0800e000 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e000:	b480      	push	{r7}
 800e002:	b085      	sub	sp, #20
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	695b      	ldr	r3, [r3, #20]
 800e00e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	699a      	ldr	r2, [r3, #24]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f042 0208 	orr.w	r2, r2, #8
 800e01e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	699a      	ldr	r2, [r3, #24]
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f042 0210 	orr.w	r2, r2, #16
 800e02e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f022 0201 	bic.w	r2, r2, #1
 800e03e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	6919      	ldr	r1, [r3, #16]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	4b3c      	ldr	r3, [pc, #240]	@ (800e13c <SPI_CloseTransfer+0x13c>)
 800e04c:	400b      	ands	r3, r1
 800e04e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	689a      	ldr	r2, [r3, #8]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e05e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b04      	cmp	r3, #4
 800e06a:	d014      	beq.n	800e096 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f003 0320 	and.w	r3, r3, #32
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00f      	beq.n	800e096 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e07c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	699a      	ldr	r2, [r3, #24]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f042 0220 	orr.w	r2, r2, #32
 800e094:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	2b03      	cmp	r3, #3
 800e0a0:	d014      	beq.n	800e0cc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00f      	beq.n	800e0cc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e0b2:	f043 0204 	orr.w	r2, r3, #4
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	699a      	ldr	r2, [r3, #24]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e0ca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00f      	beq.n	800e0f6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e0dc:	f043 0201 	orr.w	r2, r3, #1
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	699a      	ldr	r2, [r3, #24]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e0f4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d00f      	beq.n	800e120 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e106:	f043 0208 	orr.w	r2, r3, #8
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	699a      	ldr	r2, [r3, #24]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e11e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2200      	movs	r2, #0
 800e124:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e130:	bf00      	nop
 800e132:	3714      	adds	r7, #20
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr
 800e13c:	fffffc90 	.word	0xfffffc90

0800e140 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	603b      	str	r3, [r7, #0]
 800e14c:	4613      	mov	r3, r2
 800e14e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e150:	e010      	b.n	800e174 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e152:	f7f8 f9a9 	bl	80064a8 <HAL_GetTick>
 800e156:	4602      	mov	r2, r0
 800e158:	69bb      	ldr	r3, [r7, #24]
 800e15a:	1ad3      	subs	r3, r2, r3
 800e15c:	683a      	ldr	r2, [r7, #0]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d803      	bhi.n	800e16a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e168:	d102      	bne.n	800e170 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d101      	bne.n	800e174 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e170:	2303      	movs	r3, #3
 800e172:	e00f      	b.n	800e194 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	695a      	ldr	r2, [r3, #20]
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	4013      	ands	r3, r2
 800e17e:	68ba      	ldr	r2, [r7, #8]
 800e180:	429a      	cmp	r2, r3
 800e182:	bf0c      	ite	eq
 800e184:	2301      	moveq	r3, #1
 800e186:	2300      	movne	r3, #0
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	461a      	mov	r2, r3
 800e18c:	79fb      	ldrb	r3, [r7, #7]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d0df      	beq.n	800e152 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b085      	sub	sp, #20
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1a8:	095b      	lsrs	r3, r3, #5
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	3307      	adds	r3, #7
 800e1ba:	08db      	lsrs	r3, r3, #3
 800e1bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	fb02 f303 	mul.w	r3, r2, r3
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr

0800e1d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b082      	sub	sp, #8
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d101      	bne.n	800e1e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	e049      	b.n	800e278 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d106      	bne.n	800e1fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7f5 fb4f 	bl	800389c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2202      	movs	r2, #2
 800e202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	3304      	adds	r3, #4
 800e20e:	4619      	mov	r1, r3
 800e210:	4610      	mov	r0, r2
 800e212:	f000 fc57 	bl	800eac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2201      	movs	r2, #1
 800e21a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2201      	movs	r2, #1
 800e232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2201      	movs	r2, #1
 800e23a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2201      	movs	r2, #1
 800e24a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2201      	movs	r2, #1
 800e252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2201      	movs	r2, #1
 800e262:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2201      	movs	r2, #1
 800e26a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2201      	movs	r2, #1
 800e272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e276:	2300      	movs	r3, #0
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	2b01      	cmp	r3, #1
 800e292:	d001      	beq.n	800e298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e294:	2301      	movs	r3, #1
 800e296:	e054      	b.n	800e342 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2202      	movs	r2, #2
 800e29c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	68da      	ldr	r2, [r3, #12]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f042 0201 	orr.w	r2, r2, #1
 800e2ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a26      	ldr	r2, [pc, #152]	@ (800e350 <HAL_TIM_Base_Start_IT+0xd0>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d022      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2c2:	d01d      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a22      	ldr	r2, [pc, #136]	@ (800e354 <HAL_TIM_Base_Start_IT+0xd4>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d018      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4a21      	ldr	r2, [pc, #132]	@ (800e358 <HAL_TIM_Base_Start_IT+0xd8>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d013      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a1f      	ldr	r2, [pc, #124]	@ (800e35c <HAL_TIM_Base_Start_IT+0xdc>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d00e      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a1e      	ldr	r2, [pc, #120]	@ (800e360 <HAL_TIM_Base_Start_IT+0xe0>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d009      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a1c      	ldr	r2, [pc, #112]	@ (800e364 <HAL_TIM_Base_Start_IT+0xe4>)
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d004      	beq.n	800e300 <HAL_TIM_Base_Start_IT+0x80>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4a1b      	ldr	r2, [pc, #108]	@ (800e368 <HAL_TIM_Base_Start_IT+0xe8>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d115      	bne.n	800e32c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	689a      	ldr	r2, [r3, #8]
 800e306:	4b19      	ldr	r3, [pc, #100]	@ (800e36c <HAL_TIM_Base_Start_IT+0xec>)
 800e308:	4013      	ands	r3, r2
 800e30a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2b06      	cmp	r3, #6
 800e310:	d015      	beq.n	800e33e <HAL_TIM_Base_Start_IT+0xbe>
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e318:	d011      	beq.n	800e33e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f042 0201 	orr.w	r2, r2, #1
 800e328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e32a:	e008      	b.n	800e33e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f042 0201 	orr.w	r2, r2, #1
 800e33a:	601a      	str	r2, [r3, #0]
 800e33c:	e000      	b.n	800e340 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e33e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3714      	adds	r7, #20
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	40010000 	.word	0x40010000
 800e354:	40000400 	.word	0x40000400
 800e358:	40000800 	.word	0x40000800
 800e35c:	40000c00 	.word	0x40000c00
 800e360:	40010400 	.word	0x40010400
 800e364:	40001800 	.word	0x40001800
 800e368:	40014000 	.word	0x40014000
 800e36c:	00010007 	.word	0x00010007

0800e370 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d101      	bne.n	800e382 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e37e:	2301      	movs	r3, #1
 800e380:	e049      	b.n	800e416 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d106      	bne.n	800e39c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f7f5 fa32 	bl	8003800 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2202      	movs	r2, #2
 800e3a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	3304      	adds	r3, #4
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	4610      	mov	r0, r2
 800e3b0:	f000 fb88 	bl	800eac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2201      	movs	r2, #1
 800e400:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2201      	movs	r2, #1
 800e408:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2201      	movs	r2, #1
 800e410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3708      	adds	r7, #8
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
	...

0800e420 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d109      	bne.n	800e444 <HAL_TIM_PWM_Start+0x24>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e436:	b2db      	uxtb	r3, r3
 800e438:	2b01      	cmp	r3, #1
 800e43a:	bf14      	ite	ne
 800e43c:	2301      	movne	r3, #1
 800e43e:	2300      	moveq	r3, #0
 800e440:	b2db      	uxtb	r3, r3
 800e442:	e03c      	b.n	800e4be <HAL_TIM_PWM_Start+0x9e>
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	2b04      	cmp	r3, #4
 800e448:	d109      	bne.n	800e45e <HAL_TIM_PWM_Start+0x3e>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e450:	b2db      	uxtb	r3, r3
 800e452:	2b01      	cmp	r3, #1
 800e454:	bf14      	ite	ne
 800e456:	2301      	movne	r3, #1
 800e458:	2300      	moveq	r3, #0
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	e02f      	b.n	800e4be <HAL_TIM_PWM_Start+0x9e>
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	2b08      	cmp	r3, #8
 800e462:	d109      	bne.n	800e478 <HAL_TIM_PWM_Start+0x58>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	bf14      	ite	ne
 800e470:	2301      	movne	r3, #1
 800e472:	2300      	moveq	r3, #0
 800e474:	b2db      	uxtb	r3, r3
 800e476:	e022      	b.n	800e4be <HAL_TIM_PWM_Start+0x9e>
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	2b0c      	cmp	r3, #12
 800e47c:	d109      	bne.n	800e492 <HAL_TIM_PWM_Start+0x72>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e484:	b2db      	uxtb	r3, r3
 800e486:	2b01      	cmp	r3, #1
 800e488:	bf14      	ite	ne
 800e48a:	2301      	movne	r3, #1
 800e48c:	2300      	moveq	r3, #0
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	e015      	b.n	800e4be <HAL_TIM_PWM_Start+0x9e>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	2b10      	cmp	r3, #16
 800e496:	d109      	bne.n	800e4ac <HAL_TIM_PWM_Start+0x8c>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	bf14      	ite	ne
 800e4a4:	2301      	movne	r3, #1
 800e4a6:	2300      	moveq	r3, #0
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	e008      	b.n	800e4be <HAL_TIM_PWM_Start+0x9e>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	bf14      	ite	ne
 800e4b8:	2301      	movne	r3, #1
 800e4ba:	2300      	moveq	r3, #0
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d001      	beq.n	800e4c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e0a1      	b.n	800e60a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d104      	bne.n	800e4d6 <HAL_TIM_PWM_Start+0xb6>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2202      	movs	r2, #2
 800e4d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e4d4:	e023      	b.n	800e51e <HAL_TIM_PWM_Start+0xfe>
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	2b04      	cmp	r3, #4
 800e4da:	d104      	bne.n	800e4e6 <HAL_TIM_PWM_Start+0xc6>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2202      	movs	r2, #2
 800e4e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e4e4:	e01b      	b.n	800e51e <HAL_TIM_PWM_Start+0xfe>
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	2b08      	cmp	r3, #8
 800e4ea:	d104      	bne.n	800e4f6 <HAL_TIM_PWM_Start+0xd6>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2202      	movs	r2, #2
 800e4f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e4f4:	e013      	b.n	800e51e <HAL_TIM_PWM_Start+0xfe>
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	2b0c      	cmp	r3, #12
 800e4fa:	d104      	bne.n	800e506 <HAL_TIM_PWM_Start+0xe6>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2202      	movs	r2, #2
 800e500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e504:	e00b      	b.n	800e51e <HAL_TIM_PWM_Start+0xfe>
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	2b10      	cmp	r3, #16
 800e50a:	d104      	bne.n	800e516 <HAL_TIM_PWM_Start+0xf6>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2202      	movs	r2, #2
 800e510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e514:	e003      	b.n	800e51e <HAL_TIM_PWM_Start+0xfe>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2202      	movs	r2, #2
 800e51a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	2201      	movs	r2, #1
 800e524:	6839      	ldr	r1, [r7, #0]
 800e526:	4618      	mov	r0, r3
 800e528:	f000 fe48 	bl	800f1bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a38      	ldr	r2, [pc, #224]	@ (800e614 <HAL_TIM_PWM_Start+0x1f4>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d013      	beq.n	800e55e <HAL_TIM_PWM_Start+0x13e>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	4a37      	ldr	r2, [pc, #220]	@ (800e618 <HAL_TIM_PWM_Start+0x1f8>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d00e      	beq.n	800e55e <HAL_TIM_PWM_Start+0x13e>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a35      	ldr	r2, [pc, #212]	@ (800e61c <HAL_TIM_PWM_Start+0x1fc>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d009      	beq.n	800e55e <HAL_TIM_PWM_Start+0x13e>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a34      	ldr	r2, [pc, #208]	@ (800e620 <HAL_TIM_PWM_Start+0x200>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d004      	beq.n	800e55e <HAL_TIM_PWM_Start+0x13e>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	4a32      	ldr	r2, [pc, #200]	@ (800e624 <HAL_TIM_PWM_Start+0x204>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d101      	bne.n	800e562 <HAL_TIM_PWM_Start+0x142>
 800e55e:	2301      	movs	r3, #1
 800e560:	e000      	b.n	800e564 <HAL_TIM_PWM_Start+0x144>
 800e562:	2300      	movs	r3, #0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d007      	beq.n	800e578 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e576:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a25      	ldr	r2, [pc, #148]	@ (800e614 <HAL_TIM_PWM_Start+0x1f4>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d022      	beq.n	800e5c8 <HAL_TIM_PWM_Start+0x1a8>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e58a:	d01d      	beq.n	800e5c8 <HAL_TIM_PWM_Start+0x1a8>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a25      	ldr	r2, [pc, #148]	@ (800e628 <HAL_TIM_PWM_Start+0x208>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d018      	beq.n	800e5c8 <HAL_TIM_PWM_Start+0x1a8>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4a24      	ldr	r2, [pc, #144]	@ (800e62c <HAL_TIM_PWM_Start+0x20c>)
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d013      	beq.n	800e5c8 <HAL_TIM_PWM_Start+0x1a8>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4a22      	ldr	r2, [pc, #136]	@ (800e630 <HAL_TIM_PWM_Start+0x210>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d00e      	beq.n	800e5c8 <HAL_TIM_PWM_Start+0x1a8>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	4a1a      	ldr	r2, [pc, #104]	@ (800e618 <HAL_TIM_PWM_Start+0x1f8>)
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d009      	beq.n	800e5c8 <HAL_TIM_PWM_Start+0x1a8>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a1e      	ldr	r2, [pc, #120]	@ (800e634 <HAL_TIM_PWM_Start+0x214>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d004      	beq.n	800e5c8 <HAL_TIM_PWM_Start+0x1a8>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	4a16      	ldr	r2, [pc, #88]	@ (800e61c <HAL_TIM_PWM_Start+0x1fc>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d115      	bne.n	800e5f4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	689a      	ldr	r2, [r3, #8]
 800e5ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e638 <HAL_TIM_PWM_Start+0x218>)
 800e5d0:	4013      	ands	r3, r2
 800e5d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2b06      	cmp	r3, #6
 800e5d8:	d015      	beq.n	800e606 <HAL_TIM_PWM_Start+0x1e6>
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5e0:	d011      	beq.n	800e606 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f042 0201 	orr.w	r2, r2, #1
 800e5f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5f2:	e008      	b.n	800e606 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f042 0201 	orr.w	r2, r2, #1
 800e602:	601a      	str	r2, [r3, #0]
 800e604:	e000      	b.n	800e608 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e606:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	40010000 	.word	0x40010000
 800e618:	40010400 	.word	0x40010400
 800e61c:	40014000 	.word	0x40014000
 800e620:	40014400 	.word	0x40014400
 800e624:	40014800 	.word	0x40014800
 800e628:	40000400 	.word	0x40000400
 800e62c:	40000800 	.word	0x40000800
 800e630:	40000c00 	.word	0x40000c00
 800e634:	40001800 	.word	0x40001800
 800e638:	00010007 	.word	0x00010007

0800e63c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	f003 0302 	and.w	r3, r3, #2
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d020      	beq.n	800e6a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f003 0302 	and.w	r3, r3, #2
 800e664:	2b00      	cmp	r3, #0
 800e666:	d01b      	beq.n	800e6a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f06f 0202 	mvn.w	r2, #2
 800e670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2201      	movs	r2, #1
 800e676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	699b      	ldr	r3, [r3, #24]
 800e67e:	f003 0303 	and.w	r3, r3, #3
 800e682:	2b00      	cmp	r3, #0
 800e684:	d003      	beq.n	800e68e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 f9fe 	bl	800ea88 <HAL_TIM_IC_CaptureCallback>
 800e68c:	e005      	b.n	800e69a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 f9f0 	bl	800ea74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f000 fa01 	bl	800ea9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	f003 0304 	and.w	r3, r3, #4
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d020      	beq.n	800e6ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f003 0304 	and.w	r3, r3, #4
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d01b      	beq.n	800e6ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f06f 0204 	mvn.w	r2, #4
 800e6bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2202      	movs	r2, #2
 800e6c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d003      	beq.n	800e6da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 f9d8 	bl	800ea88 <HAL_TIM_IC_CaptureCallback>
 800e6d8:	e005      	b.n	800e6e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 f9ca 	bl	800ea74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 f9db 	bl	800ea9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	f003 0308 	and.w	r3, r3, #8
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d020      	beq.n	800e738 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f003 0308 	and.w	r3, r3, #8
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d01b      	beq.n	800e738 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f06f 0208 	mvn.w	r2, #8
 800e708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2204      	movs	r2, #4
 800e70e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	69db      	ldr	r3, [r3, #28]
 800e716:	f003 0303 	and.w	r3, r3, #3
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d003      	beq.n	800e726 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 f9b2 	bl	800ea88 <HAL_TIM_IC_CaptureCallback>
 800e724:	e005      	b.n	800e732 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 f9a4 	bl	800ea74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 f9b5 	bl	800ea9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2200      	movs	r2, #0
 800e736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	f003 0310 	and.w	r3, r3, #16
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d020      	beq.n	800e784 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f003 0310 	and.w	r3, r3, #16
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d01b      	beq.n	800e784 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f06f 0210 	mvn.w	r2, #16
 800e754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2208      	movs	r2, #8
 800e75a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	69db      	ldr	r3, [r3, #28]
 800e762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e766:	2b00      	cmp	r3, #0
 800e768:	d003      	beq.n	800e772 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 f98c 	bl	800ea88 <HAL_TIM_IC_CaptureCallback>
 800e770:	e005      	b.n	800e77e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 f97e 	bl	800ea74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 f98f 	bl	800ea9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	f003 0301 	and.w	r3, r3, #1
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00c      	beq.n	800e7a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f003 0301 	and.w	r3, r3, #1
 800e794:	2b00      	cmp	r3, #0
 800e796:	d007      	beq.n	800e7a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f06f 0201 	mvn.w	r2, #1
 800e7a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f7f4 fb02 	bl	8002dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d104      	bne.n	800e7bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d00c      	beq.n	800e7d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d007      	beq.n	800e7d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e7ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 fdb1 	bl	800f338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d00c      	beq.n	800e7fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d007      	beq.n	800e7fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e7f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 fda9 	bl	800f34c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e800:	2b00      	cmp	r3, #0
 800e802:	d00c      	beq.n	800e81e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d007      	beq.n	800e81e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 f949 	bl	800eab0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	f003 0320 	and.w	r3, r3, #32
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00c      	beq.n	800e842 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f003 0320 	and.w	r3, r3, #32
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d007      	beq.n	800e842 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f06f 0220 	mvn.w	r2, #32
 800e83a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 fd71 	bl	800f324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e842:	bf00      	nop
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
	...

0800e84c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b086      	sub	sp, #24
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e858:	2300      	movs	r3, #0
 800e85a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e862:	2b01      	cmp	r3, #1
 800e864:	d101      	bne.n	800e86a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e866:	2302      	movs	r3, #2
 800e868:	e0ff      	b.n	800ea6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2201      	movs	r2, #1
 800e86e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2b14      	cmp	r3, #20
 800e876:	f200 80f0 	bhi.w	800ea5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e87a:	a201      	add	r2, pc, #4	@ (adr r2, 800e880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e880:	0800e8d5 	.word	0x0800e8d5
 800e884:	0800ea5b 	.word	0x0800ea5b
 800e888:	0800ea5b 	.word	0x0800ea5b
 800e88c:	0800ea5b 	.word	0x0800ea5b
 800e890:	0800e915 	.word	0x0800e915
 800e894:	0800ea5b 	.word	0x0800ea5b
 800e898:	0800ea5b 	.word	0x0800ea5b
 800e89c:	0800ea5b 	.word	0x0800ea5b
 800e8a0:	0800e957 	.word	0x0800e957
 800e8a4:	0800ea5b 	.word	0x0800ea5b
 800e8a8:	0800ea5b 	.word	0x0800ea5b
 800e8ac:	0800ea5b 	.word	0x0800ea5b
 800e8b0:	0800e997 	.word	0x0800e997
 800e8b4:	0800ea5b 	.word	0x0800ea5b
 800e8b8:	0800ea5b 	.word	0x0800ea5b
 800e8bc:	0800ea5b 	.word	0x0800ea5b
 800e8c0:	0800e9d9 	.word	0x0800e9d9
 800e8c4:	0800ea5b 	.word	0x0800ea5b
 800e8c8:	0800ea5b 	.word	0x0800ea5b
 800e8cc:	0800ea5b 	.word	0x0800ea5b
 800e8d0:	0800ea19 	.word	0x0800ea19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	68b9      	ldr	r1, [r7, #8]
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f000 f998 	bl	800ec10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	699a      	ldr	r2, [r3, #24]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f042 0208 	orr.w	r2, r2, #8
 800e8ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	699a      	ldr	r2, [r3, #24]
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f022 0204 	bic.w	r2, r2, #4
 800e8fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	6999      	ldr	r1, [r3, #24]
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	691a      	ldr	r2, [r3, #16]
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	430a      	orrs	r2, r1
 800e910:	619a      	str	r2, [r3, #24]
      break;
 800e912:	e0a5      	b.n	800ea60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	68b9      	ldr	r1, [r7, #8]
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 fa08 	bl	800ed30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	699a      	ldr	r2, [r3, #24]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e92e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	699a      	ldr	r2, [r3, #24]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e93e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	6999      	ldr	r1, [r3, #24]
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	691b      	ldr	r3, [r3, #16]
 800e94a:	021a      	lsls	r2, r3, #8
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	430a      	orrs	r2, r1
 800e952:	619a      	str	r2, [r3, #24]
      break;
 800e954:	e084      	b.n	800ea60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	68b9      	ldr	r1, [r7, #8]
 800e95c:	4618      	mov	r0, r3
 800e95e:	f000 fa71 	bl	800ee44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	69da      	ldr	r2, [r3, #28]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f042 0208 	orr.w	r2, r2, #8
 800e970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	69da      	ldr	r2, [r3, #28]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f022 0204 	bic.w	r2, r2, #4
 800e980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	69d9      	ldr	r1, [r3, #28]
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	691a      	ldr	r2, [r3, #16]
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	430a      	orrs	r2, r1
 800e992:	61da      	str	r2, [r3, #28]
      break;
 800e994:	e064      	b.n	800ea60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	68b9      	ldr	r1, [r7, #8]
 800e99c:	4618      	mov	r0, r3
 800e99e:	f000 fad9 	bl	800ef54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	69da      	ldr	r2, [r3, #28]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e9b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	69da      	ldr	r2, [r3, #28]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e9c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	69d9      	ldr	r1, [r3, #28]
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	691b      	ldr	r3, [r3, #16]
 800e9cc:	021a      	lsls	r2, r3, #8
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	430a      	orrs	r2, r1
 800e9d4:	61da      	str	r2, [r3, #28]
      break;
 800e9d6:	e043      	b.n	800ea60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	68b9      	ldr	r1, [r7, #8]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f000 fb22 	bl	800f028 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f042 0208 	orr.w	r2, r2, #8
 800e9f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f022 0204 	bic.w	r2, r2, #4
 800ea02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	691a      	ldr	r2, [r3, #16]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	430a      	orrs	r2, r1
 800ea14:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ea16:	e023      	b.n	800ea60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	68b9      	ldr	r1, [r7, #8]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f000 fb66 	bl	800f0f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	691b      	ldr	r3, [r3, #16]
 800ea4e:	021a      	lsls	r2, r3, #8
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	430a      	orrs	r2, r1
 800ea56:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ea58:	e002      	b.n	800ea60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ea5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2200      	movs	r2, #0
 800ea64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ea68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3718      	adds	r7, #24
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop

0800ea74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ea7c:	bf00      	nop
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eaa4:	bf00      	nop
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eab8:	bf00      	nop
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	4a46      	ldr	r2, [pc, #280]	@ (800ebf0 <TIM_Base_SetConfig+0x12c>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d013      	beq.n	800eb04 <TIM_Base_SetConfig+0x40>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eae2:	d00f      	beq.n	800eb04 <TIM_Base_SetConfig+0x40>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	4a43      	ldr	r2, [pc, #268]	@ (800ebf4 <TIM_Base_SetConfig+0x130>)
 800eae8:	4293      	cmp	r3, r2
 800eaea:	d00b      	beq.n	800eb04 <TIM_Base_SetConfig+0x40>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	4a42      	ldr	r2, [pc, #264]	@ (800ebf8 <TIM_Base_SetConfig+0x134>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d007      	beq.n	800eb04 <TIM_Base_SetConfig+0x40>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	4a41      	ldr	r2, [pc, #260]	@ (800ebfc <TIM_Base_SetConfig+0x138>)
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d003      	beq.n	800eb04 <TIM_Base_SetConfig+0x40>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	4a40      	ldr	r2, [pc, #256]	@ (800ec00 <TIM_Base_SetConfig+0x13c>)
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d108      	bne.n	800eb16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	4313      	orrs	r3, r2
 800eb14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4a35      	ldr	r2, [pc, #212]	@ (800ebf0 <TIM_Base_SetConfig+0x12c>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d01f      	beq.n	800eb5e <TIM_Base_SetConfig+0x9a>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb24:	d01b      	beq.n	800eb5e <TIM_Base_SetConfig+0x9a>
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4a32      	ldr	r2, [pc, #200]	@ (800ebf4 <TIM_Base_SetConfig+0x130>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d017      	beq.n	800eb5e <TIM_Base_SetConfig+0x9a>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	4a31      	ldr	r2, [pc, #196]	@ (800ebf8 <TIM_Base_SetConfig+0x134>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d013      	beq.n	800eb5e <TIM_Base_SetConfig+0x9a>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	4a30      	ldr	r2, [pc, #192]	@ (800ebfc <TIM_Base_SetConfig+0x138>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d00f      	beq.n	800eb5e <TIM_Base_SetConfig+0x9a>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	4a2f      	ldr	r2, [pc, #188]	@ (800ec00 <TIM_Base_SetConfig+0x13c>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d00b      	beq.n	800eb5e <TIM_Base_SetConfig+0x9a>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4a2e      	ldr	r2, [pc, #184]	@ (800ec04 <TIM_Base_SetConfig+0x140>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d007      	beq.n	800eb5e <TIM_Base_SetConfig+0x9a>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a2d      	ldr	r2, [pc, #180]	@ (800ec08 <TIM_Base_SetConfig+0x144>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d003      	beq.n	800eb5e <TIM_Base_SetConfig+0x9a>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4a2c      	ldr	r2, [pc, #176]	@ (800ec0c <TIM_Base_SetConfig+0x148>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d108      	bne.n	800eb70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	68fa      	ldr	r2, [r7, #12]
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	695b      	ldr	r3, [r3, #20]
 800eb7a:	4313      	orrs	r3, r2
 800eb7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	68fa      	ldr	r2, [r7, #12]
 800eb82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	689a      	ldr	r2, [r3, #8]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4a16      	ldr	r2, [pc, #88]	@ (800ebf0 <TIM_Base_SetConfig+0x12c>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d00f      	beq.n	800ebbc <TIM_Base_SetConfig+0xf8>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	4a18      	ldr	r2, [pc, #96]	@ (800ec00 <TIM_Base_SetConfig+0x13c>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d00b      	beq.n	800ebbc <TIM_Base_SetConfig+0xf8>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	4a17      	ldr	r2, [pc, #92]	@ (800ec04 <TIM_Base_SetConfig+0x140>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d007      	beq.n	800ebbc <TIM_Base_SetConfig+0xf8>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	4a16      	ldr	r2, [pc, #88]	@ (800ec08 <TIM_Base_SetConfig+0x144>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d003      	beq.n	800ebbc <TIM_Base_SetConfig+0xf8>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	4a15      	ldr	r2, [pc, #84]	@ (800ec0c <TIM_Base_SetConfig+0x148>)
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d103      	bne.n	800ebc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	691a      	ldr	r2, [r3, #16]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	691b      	ldr	r3, [r3, #16]
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d105      	bne.n	800ebe2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	691b      	ldr	r3, [r3, #16]
 800ebda:	f023 0201 	bic.w	r2, r3, #1
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	611a      	str	r2, [r3, #16]
  }
}
 800ebe2:	bf00      	nop
 800ebe4:	3714      	adds	r7, #20
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	40010000 	.word	0x40010000
 800ebf4:	40000400 	.word	0x40000400
 800ebf8:	40000800 	.word	0x40000800
 800ebfc:	40000c00 	.word	0x40000c00
 800ec00:	40010400 	.word	0x40010400
 800ec04:	40014000 	.word	0x40014000
 800ec08:	40014400 	.word	0x40014400
 800ec0c:	40014800 	.word	0x40014800

0800ec10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b087      	sub	sp, #28
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a1b      	ldr	r3, [r3, #32]
 800ec1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6a1b      	ldr	r3, [r3, #32]
 800ec24:	f023 0201 	bic.w	r2, r3, #1
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	699b      	ldr	r3, [r3, #24]
 800ec36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ec38:	68fa      	ldr	r2, [r7, #12]
 800ec3a:	4b37      	ldr	r3, [pc, #220]	@ (800ed18 <TIM_OC1_SetConfig+0x108>)
 800ec3c:	4013      	ands	r3, r2
 800ec3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f023 0303 	bic.w	r3, r3, #3
 800ec46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	68fa      	ldr	r2, [r7, #12]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	f023 0302 	bic.w	r3, r3, #2
 800ec58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	697a      	ldr	r2, [r7, #20]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	4a2d      	ldr	r2, [pc, #180]	@ (800ed1c <TIM_OC1_SetConfig+0x10c>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d00f      	beq.n	800ec8c <TIM_OC1_SetConfig+0x7c>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	4a2c      	ldr	r2, [pc, #176]	@ (800ed20 <TIM_OC1_SetConfig+0x110>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d00b      	beq.n	800ec8c <TIM_OC1_SetConfig+0x7c>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	4a2b      	ldr	r2, [pc, #172]	@ (800ed24 <TIM_OC1_SetConfig+0x114>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d007      	beq.n	800ec8c <TIM_OC1_SetConfig+0x7c>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	4a2a      	ldr	r2, [pc, #168]	@ (800ed28 <TIM_OC1_SetConfig+0x118>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d003      	beq.n	800ec8c <TIM_OC1_SetConfig+0x7c>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	4a29      	ldr	r2, [pc, #164]	@ (800ed2c <TIM_OC1_SetConfig+0x11c>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d10c      	bne.n	800eca6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	f023 0308 	bic.w	r3, r3, #8
 800ec92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	697a      	ldr	r2, [r7, #20]
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	f023 0304 	bic.w	r3, r3, #4
 800eca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	4a1c      	ldr	r2, [pc, #112]	@ (800ed1c <TIM_OC1_SetConfig+0x10c>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d00f      	beq.n	800ecce <TIM_OC1_SetConfig+0xbe>
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4a1b      	ldr	r2, [pc, #108]	@ (800ed20 <TIM_OC1_SetConfig+0x110>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d00b      	beq.n	800ecce <TIM_OC1_SetConfig+0xbe>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4a1a      	ldr	r2, [pc, #104]	@ (800ed24 <TIM_OC1_SetConfig+0x114>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d007      	beq.n	800ecce <TIM_OC1_SetConfig+0xbe>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	4a19      	ldr	r2, [pc, #100]	@ (800ed28 <TIM_OC1_SetConfig+0x118>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d003      	beq.n	800ecce <TIM_OC1_SetConfig+0xbe>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	4a18      	ldr	r2, [pc, #96]	@ (800ed2c <TIM_OC1_SetConfig+0x11c>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d111      	bne.n	800ecf2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ecd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ecdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	695b      	ldr	r3, [r3, #20]
 800ece2:	693a      	ldr	r2, [r7, #16]
 800ece4:	4313      	orrs	r3, r2
 800ece6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	699b      	ldr	r3, [r3, #24]
 800ecec:	693a      	ldr	r2, [r7, #16]
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	693a      	ldr	r2, [r7, #16]
 800ecf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	68fa      	ldr	r2, [r7, #12]
 800ecfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	685a      	ldr	r2, [r3, #4]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	697a      	ldr	r2, [r7, #20]
 800ed0a:	621a      	str	r2, [r3, #32]
}
 800ed0c:	bf00      	nop
 800ed0e:	371c      	adds	r7, #28
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr
 800ed18:	fffeff8f 	.word	0xfffeff8f
 800ed1c:	40010000 	.word	0x40010000
 800ed20:	40010400 	.word	0x40010400
 800ed24:	40014000 	.word	0x40014000
 800ed28:	40014400 	.word	0x40014400
 800ed2c:	40014800 	.word	0x40014800

0800ed30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b087      	sub	sp, #28
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6a1b      	ldr	r3, [r3, #32]
 800ed3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6a1b      	ldr	r3, [r3, #32]
 800ed44:	f023 0210 	bic.w	r2, r3, #16
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	699b      	ldr	r3, [r3, #24]
 800ed56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	4b34      	ldr	r3, [pc, #208]	@ (800ee2c <TIM_OC2_SetConfig+0xfc>)
 800ed5c:	4013      	ands	r3, r2
 800ed5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	021b      	lsls	r3, r3, #8
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	4313      	orrs	r3, r2
 800ed72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	f023 0320 	bic.w	r3, r3, #32
 800ed7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	011b      	lsls	r3, r3, #4
 800ed82:	697a      	ldr	r2, [r7, #20]
 800ed84:	4313      	orrs	r3, r2
 800ed86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4a29      	ldr	r2, [pc, #164]	@ (800ee30 <TIM_OC2_SetConfig+0x100>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d003      	beq.n	800ed98 <TIM_OC2_SetConfig+0x68>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4a28      	ldr	r2, [pc, #160]	@ (800ee34 <TIM_OC2_SetConfig+0x104>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d10d      	bne.n	800edb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	011b      	lsls	r3, r3, #4
 800eda6:	697a      	ldr	r2, [r7, #20]
 800eda8:	4313      	orrs	r3, r2
 800edaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800edb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4a1e      	ldr	r2, [pc, #120]	@ (800ee30 <TIM_OC2_SetConfig+0x100>)
 800edb8:	4293      	cmp	r3, r2
 800edba:	d00f      	beq.n	800eddc <TIM_OC2_SetConfig+0xac>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	4a1d      	ldr	r2, [pc, #116]	@ (800ee34 <TIM_OC2_SetConfig+0x104>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d00b      	beq.n	800eddc <TIM_OC2_SetConfig+0xac>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4a1c      	ldr	r2, [pc, #112]	@ (800ee38 <TIM_OC2_SetConfig+0x108>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d007      	beq.n	800eddc <TIM_OC2_SetConfig+0xac>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4a1b      	ldr	r2, [pc, #108]	@ (800ee3c <TIM_OC2_SetConfig+0x10c>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d003      	beq.n	800eddc <TIM_OC2_SetConfig+0xac>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4a1a      	ldr	r2, [pc, #104]	@ (800ee40 <TIM_OC2_SetConfig+0x110>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d113      	bne.n	800ee04 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ede2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800edea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	695b      	ldr	r3, [r3, #20]
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	693a      	ldr	r2, [r7, #16]
 800edf4:	4313      	orrs	r3, r2
 800edf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	693a      	ldr	r2, [r7, #16]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	693a      	ldr	r2, [r7, #16]
 800ee08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	685a      	ldr	r2, [r3, #4]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	697a      	ldr	r2, [r7, #20]
 800ee1c:	621a      	str	r2, [r3, #32]
}
 800ee1e:	bf00      	nop
 800ee20:	371c      	adds	r7, #28
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	feff8fff 	.word	0xfeff8fff
 800ee30:	40010000 	.word	0x40010000
 800ee34:	40010400 	.word	0x40010400
 800ee38:	40014000 	.word	0x40014000
 800ee3c:	40014400 	.word	0x40014400
 800ee40:	40014800 	.word	0x40014800

0800ee44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b087      	sub	sp, #28
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6a1b      	ldr	r3, [r3, #32]
 800ee52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6a1b      	ldr	r3, [r3, #32]
 800ee58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	69db      	ldr	r3, [r3, #28]
 800ee6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	4b33      	ldr	r3, [pc, #204]	@ (800ef3c <TIM_OC3_SetConfig+0xf8>)
 800ee70:	4013      	ands	r3, r2
 800ee72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f023 0303 	bic.w	r3, r3, #3
 800ee7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	68fa      	ldr	r2, [r7, #12]
 800ee82:	4313      	orrs	r3, r2
 800ee84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ee8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	021b      	lsls	r3, r3, #8
 800ee94:	697a      	ldr	r2, [r7, #20]
 800ee96:	4313      	orrs	r3, r2
 800ee98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4a28      	ldr	r2, [pc, #160]	@ (800ef40 <TIM_OC3_SetConfig+0xfc>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d003      	beq.n	800eeaa <TIM_OC3_SetConfig+0x66>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4a27      	ldr	r2, [pc, #156]	@ (800ef44 <TIM_OC3_SetConfig+0x100>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d10d      	bne.n	800eec6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eeb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	021b      	lsls	r3, r3, #8
 800eeb8:	697a      	ldr	r2, [r7, #20]
 800eeba:	4313      	orrs	r3, r2
 800eebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	4a1d      	ldr	r2, [pc, #116]	@ (800ef40 <TIM_OC3_SetConfig+0xfc>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d00f      	beq.n	800eeee <TIM_OC3_SetConfig+0xaa>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	4a1c      	ldr	r2, [pc, #112]	@ (800ef44 <TIM_OC3_SetConfig+0x100>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d00b      	beq.n	800eeee <TIM_OC3_SetConfig+0xaa>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	4a1b      	ldr	r2, [pc, #108]	@ (800ef48 <TIM_OC3_SetConfig+0x104>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d007      	beq.n	800eeee <TIM_OC3_SetConfig+0xaa>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	4a1a      	ldr	r2, [pc, #104]	@ (800ef4c <TIM_OC3_SetConfig+0x108>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d003      	beq.n	800eeee <TIM_OC3_SetConfig+0xaa>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4a19      	ldr	r2, [pc, #100]	@ (800ef50 <TIM_OC3_SetConfig+0x10c>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d113      	bne.n	800ef16 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eefc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	695b      	ldr	r3, [r3, #20]
 800ef02:	011b      	lsls	r3, r3, #4
 800ef04:	693a      	ldr	r2, [r7, #16]
 800ef06:	4313      	orrs	r3, r2
 800ef08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	699b      	ldr	r3, [r3, #24]
 800ef0e:	011b      	lsls	r3, r3, #4
 800ef10:	693a      	ldr	r2, [r7, #16]
 800ef12:	4313      	orrs	r3, r2
 800ef14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	685a      	ldr	r2, [r3, #4]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	697a      	ldr	r2, [r7, #20]
 800ef2e:	621a      	str	r2, [r3, #32]
}
 800ef30:	bf00      	nop
 800ef32:	371c      	adds	r7, #28
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr
 800ef3c:	fffeff8f 	.word	0xfffeff8f
 800ef40:	40010000 	.word	0x40010000
 800ef44:	40010400 	.word	0x40010400
 800ef48:	40014000 	.word	0x40014000
 800ef4c:	40014400 	.word	0x40014400
 800ef50:	40014800 	.word	0x40014800

0800ef54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b087      	sub	sp, #28
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6a1b      	ldr	r3, [r3, #32]
 800ef62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6a1b      	ldr	r3, [r3, #32]
 800ef68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	69db      	ldr	r3, [r3, #28]
 800ef7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	4b24      	ldr	r3, [pc, #144]	@ (800f010 <TIM_OC4_SetConfig+0xbc>)
 800ef80:	4013      	ands	r3, r2
 800ef82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	021b      	lsls	r3, r3, #8
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	4313      	orrs	r3, r2
 800ef96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ef9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	689b      	ldr	r3, [r3, #8]
 800efa4:	031b      	lsls	r3, r3, #12
 800efa6:	693a      	ldr	r2, [r7, #16]
 800efa8:	4313      	orrs	r3, r2
 800efaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4a19      	ldr	r2, [pc, #100]	@ (800f014 <TIM_OC4_SetConfig+0xc0>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d00f      	beq.n	800efd4 <TIM_OC4_SetConfig+0x80>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	4a18      	ldr	r2, [pc, #96]	@ (800f018 <TIM_OC4_SetConfig+0xc4>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d00b      	beq.n	800efd4 <TIM_OC4_SetConfig+0x80>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a17      	ldr	r2, [pc, #92]	@ (800f01c <TIM_OC4_SetConfig+0xc8>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d007      	beq.n	800efd4 <TIM_OC4_SetConfig+0x80>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4a16      	ldr	r2, [pc, #88]	@ (800f020 <TIM_OC4_SetConfig+0xcc>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d003      	beq.n	800efd4 <TIM_OC4_SetConfig+0x80>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4a15      	ldr	r2, [pc, #84]	@ (800f024 <TIM_OC4_SetConfig+0xd0>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d109      	bne.n	800efe8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800efda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	695b      	ldr	r3, [r3, #20]
 800efe0:	019b      	lsls	r3, r3, #6
 800efe2:	697a      	ldr	r2, [r7, #20]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	697a      	ldr	r2, [r7, #20]
 800efec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	685a      	ldr	r2, [r3, #4]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	693a      	ldr	r2, [r7, #16]
 800f000:	621a      	str	r2, [r3, #32]
}
 800f002:	bf00      	nop
 800f004:	371c      	adds	r7, #28
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	feff8fff 	.word	0xfeff8fff
 800f014:	40010000 	.word	0x40010000
 800f018:	40010400 	.word	0x40010400
 800f01c:	40014000 	.word	0x40014000
 800f020:	40014400 	.word	0x40014400
 800f024:	40014800 	.word	0x40014800

0800f028 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f028:	b480      	push	{r7}
 800f02a:	b087      	sub	sp, #28
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6a1b      	ldr	r3, [r3, #32]
 800f036:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6a1b      	ldr	r3, [r3, #32]
 800f03c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f050:	68fa      	ldr	r2, [r7, #12]
 800f052:	4b21      	ldr	r3, [pc, #132]	@ (800f0d8 <TIM_OC5_SetConfig+0xb0>)
 800f054:	4013      	ands	r3, r2
 800f056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	4313      	orrs	r3, r2
 800f060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f068:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	689b      	ldr	r3, [r3, #8]
 800f06e:	041b      	lsls	r3, r3, #16
 800f070:	693a      	ldr	r2, [r7, #16]
 800f072:	4313      	orrs	r3, r2
 800f074:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	4a18      	ldr	r2, [pc, #96]	@ (800f0dc <TIM_OC5_SetConfig+0xb4>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d00f      	beq.n	800f09e <TIM_OC5_SetConfig+0x76>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4a17      	ldr	r2, [pc, #92]	@ (800f0e0 <TIM_OC5_SetConfig+0xb8>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d00b      	beq.n	800f09e <TIM_OC5_SetConfig+0x76>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4a16      	ldr	r2, [pc, #88]	@ (800f0e4 <TIM_OC5_SetConfig+0xbc>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d007      	beq.n	800f09e <TIM_OC5_SetConfig+0x76>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4a15      	ldr	r2, [pc, #84]	@ (800f0e8 <TIM_OC5_SetConfig+0xc0>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d003      	beq.n	800f09e <TIM_OC5_SetConfig+0x76>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a14      	ldr	r2, [pc, #80]	@ (800f0ec <TIM_OC5_SetConfig+0xc4>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d109      	bne.n	800f0b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f0a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	021b      	lsls	r3, r3, #8
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	697a      	ldr	r2, [r7, #20]
 800f0b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	68fa      	ldr	r2, [r7, #12]
 800f0bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	685a      	ldr	r2, [r3, #4]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	693a      	ldr	r2, [r7, #16]
 800f0ca:	621a      	str	r2, [r3, #32]
}
 800f0cc:	bf00      	nop
 800f0ce:	371c      	adds	r7, #28
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	fffeff8f 	.word	0xfffeff8f
 800f0dc:	40010000 	.word	0x40010000
 800f0e0:	40010400 	.word	0x40010400
 800f0e4:	40014000 	.word	0x40014000
 800f0e8:	40014400 	.word	0x40014400
 800f0ec:	40014800 	.word	0x40014800

0800f0f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b087      	sub	sp, #28
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6a1b      	ldr	r3, [r3, #32]
 800f0fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6a1b      	ldr	r3, [r3, #32]
 800f104:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f118:	68fa      	ldr	r2, [r7, #12]
 800f11a:	4b22      	ldr	r3, [pc, #136]	@ (800f1a4 <TIM_OC6_SetConfig+0xb4>)
 800f11c:	4013      	ands	r3, r2
 800f11e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	021b      	lsls	r3, r3, #8
 800f126:	68fa      	ldr	r2, [r7, #12]
 800f128:	4313      	orrs	r3, r2
 800f12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	051b      	lsls	r3, r3, #20
 800f13a:	693a      	ldr	r2, [r7, #16]
 800f13c:	4313      	orrs	r3, r2
 800f13e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	4a19      	ldr	r2, [pc, #100]	@ (800f1a8 <TIM_OC6_SetConfig+0xb8>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d00f      	beq.n	800f168 <TIM_OC6_SetConfig+0x78>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4a18      	ldr	r2, [pc, #96]	@ (800f1ac <TIM_OC6_SetConfig+0xbc>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d00b      	beq.n	800f168 <TIM_OC6_SetConfig+0x78>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	4a17      	ldr	r2, [pc, #92]	@ (800f1b0 <TIM_OC6_SetConfig+0xc0>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d007      	beq.n	800f168 <TIM_OC6_SetConfig+0x78>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4a16      	ldr	r2, [pc, #88]	@ (800f1b4 <TIM_OC6_SetConfig+0xc4>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d003      	beq.n	800f168 <TIM_OC6_SetConfig+0x78>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4a15      	ldr	r2, [pc, #84]	@ (800f1b8 <TIM_OC6_SetConfig+0xc8>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d109      	bne.n	800f17c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f16e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	695b      	ldr	r3, [r3, #20]
 800f174:	029b      	lsls	r3, r3, #10
 800f176:	697a      	ldr	r2, [r7, #20]
 800f178:	4313      	orrs	r3, r2
 800f17a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	685a      	ldr	r2, [r3, #4]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	693a      	ldr	r2, [r7, #16]
 800f194:	621a      	str	r2, [r3, #32]
}
 800f196:	bf00      	nop
 800f198:	371c      	adds	r7, #28
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	feff8fff 	.word	0xfeff8fff
 800f1a8:	40010000 	.word	0x40010000
 800f1ac:	40010400 	.word	0x40010400
 800f1b0:	40014000 	.word	0x40014000
 800f1b4:	40014400 	.word	0x40014400
 800f1b8:	40014800 	.word	0x40014800

0800f1bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b087      	sub	sp, #28
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	f003 031f 	and.w	r3, r3, #31
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f1d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6a1a      	ldr	r2, [r3, #32]
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	43db      	mvns	r3, r3
 800f1de:	401a      	ands	r2, r3
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6a1a      	ldr	r2, [r3, #32]
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	f003 031f 	and.w	r3, r3, #31
 800f1ee:	6879      	ldr	r1, [r7, #4]
 800f1f0:	fa01 f303 	lsl.w	r3, r1, r3
 800f1f4:	431a      	orrs	r2, r3
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	621a      	str	r2, [r3, #32]
}
 800f1fa:	bf00      	nop
 800f1fc:	371c      	adds	r7, #28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr
	...

0800f208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f208:	b480      	push	{r7}
 800f20a:	b085      	sub	sp, #20
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d101      	bne.n	800f220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f21c:	2302      	movs	r3, #2
 800f21e:	e06d      	b.n	800f2fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2201      	movs	r2, #1
 800f224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2202      	movs	r2, #2
 800f22c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	689b      	ldr	r3, [r3, #8]
 800f23e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a30      	ldr	r2, [pc, #192]	@ (800f308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d004      	beq.n	800f254 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4a2f      	ldr	r2, [pc, #188]	@ (800f30c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d108      	bne.n	800f266 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f25a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	4313      	orrs	r3, r2
 800f264:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f26c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	68fa      	ldr	r2, [r7, #12]
 800f274:	4313      	orrs	r3, r2
 800f276:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a20      	ldr	r2, [pc, #128]	@ (800f308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d022      	beq.n	800f2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f292:	d01d      	beq.n	800f2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4a1d      	ldr	r2, [pc, #116]	@ (800f310 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d018      	beq.n	800f2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	4a1c      	ldr	r2, [pc, #112]	@ (800f314 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d013      	beq.n	800f2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4a1a      	ldr	r2, [pc, #104]	@ (800f318 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d00e      	beq.n	800f2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4a15      	ldr	r2, [pc, #84]	@ (800f30c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d009      	beq.n	800f2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4a16      	ldr	r2, [pc, #88]	@ (800f31c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d004      	beq.n	800f2d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4a15      	ldr	r2, [pc, #84]	@ (800f320 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d10c      	bne.n	800f2ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f2d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	68ba      	ldr	r2, [r7, #8]
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	68ba      	ldr	r2, [r7, #8]
 800f2e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f2fa:	2300      	movs	r3, #0
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr
 800f308:	40010000 	.word	0x40010000
 800f30c:	40010400 	.word	0x40010400
 800f310:	40000400 	.word	0x40000400
 800f314:	40000800 	.word	0x40000800
 800f318:	40000c00 	.word	0x40000c00
 800f31c:	40001800 	.word	0x40001800
 800f320:	40014000 	.word	0x40014000

0800f324 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f32c:	bf00      	nop
 800f32e:	370c      	adds	r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr

0800f338 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f340:	bf00      	nop
 800f342:	370c      	adds	r7, #12
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f354:	bf00      	nop
 800f356:	370c      	adds	r7, #12
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr

0800f360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d101      	bne.n	800f372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f36e:	2301      	movs	r3, #1
 800f370:	e042      	b.n	800f3f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d106      	bne.n	800f38a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7f4 fc89 	bl	8003c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2224      	movs	r2, #36	@ 0x24
 800f38e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f022 0201 	bic.w	r2, r2, #1
 800f3a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d002      	beq.n	800f3b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f001 fe0e 	bl	8010fcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 ff9f 	bl	80102f4 <UART_SetConfig>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d101      	bne.n	800f3c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	e01b      	b.n	800f3f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	685a      	ldr	r2, [r3, #4]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f3ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	689a      	ldr	r2, [r3, #8]
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f3de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f042 0201 	orr.w	r2, r2, #1
 800f3ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f001 fe8d 	bl	8011110 <UART_CheckIdleState>
 800f3f6:	4603      	mov	r3, r0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b08a      	sub	sp, #40	@ 0x28
 800f404:	af02      	add	r7, sp, #8
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	603b      	str	r3, [r7, #0]
 800f40c:	4613      	mov	r3, r2
 800f40e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f416:	2b20      	cmp	r3, #32
 800f418:	d17b      	bne.n	800f512 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d002      	beq.n	800f426 <HAL_UART_Transmit+0x26>
 800f420:	88fb      	ldrh	r3, [r7, #6]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d101      	bne.n	800f42a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f426:	2301      	movs	r3, #1
 800f428:	e074      	b.n	800f514 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2200      	movs	r2, #0
 800f42e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2221      	movs	r2, #33	@ 0x21
 800f436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f43a:	f7f7 f835 	bl	80064a8 <HAL_GetTick>
 800f43e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	88fa      	ldrh	r2, [r7, #6]
 800f444:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	88fa      	ldrh	r2, [r7, #6]
 800f44c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f458:	d108      	bne.n	800f46c <HAL_UART_Transmit+0x6c>
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	691b      	ldr	r3, [r3, #16]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d104      	bne.n	800f46c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f462:	2300      	movs	r3, #0
 800f464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	61bb      	str	r3, [r7, #24]
 800f46a:	e003      	b.n	800f474 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f470:	2300      	movs	r3, #0
 800f472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f474:	e030      	b.n	800f4d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	9300      	str	r3, [sp, #0]
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	2200      	movs	r2, #0
 800f47e:	2180      	movs	r1, #128	@ 0x80
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f001 feef 	bl	8011264 <UART_WaitOnFlagUntilTimeout>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d005      	beq.n	800f498 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2220      	movs	r2, #32
 800f490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f494:	2303      	movs	r3, #3
 800f496:	e03d      	b.n	800f514 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d10b      	bne.n	800f4b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f49e:	69bb      	ldr	r3, [r7, #24]
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f4ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	3302      	adds	r3, #2
 800f4b2:	61bb      	str	r3, [r7, #24]
 800f4b4:	e007      	b.n	800f4c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f4b6:	69fb      	ldr	r3, [r7, #28]
 800f4b8:	781a      	ldrb	r2, [r3, #0]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f4c0:	69fb      	ldr	r3, [r7, #28]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	3b01      	subs	r3, #1
 800f4d0:	b29a      	uxth	r2, r3
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1c8      	bne.n	800f476 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	2140      	movs	r1, #64	@ 0x40
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	f001 feb8 	bl	8011264 <UART_WaitOnFlagUntilTimeout>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d005      	beq.n	800f506 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2220      	movs	r2, #32
 800f4fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f502:	2303      	movs	r3, #3
 800f504:	e006      	b.n	800f514 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2220      	movs	r2, #32
 800f50a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f50e:	2300      	movs	r3, #0
 800f510:	e000      	b.n	800f514 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f512:	2302      	movs	r3, #2
  }
}
 800f514:	4618      	mov	r0, r3
 800f516:	3720      	adds	r7, #32
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b091      	sub	sp, #68	@ 0x44
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	4613      	mov	r3, r2
 800f528:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f530:	2b20      	cmp	r3, #32
 800f532:	d178      	bne.n	800f626 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d002      	beq.n	800f540 <HAL_UART_Transmit_IT+0x24>
 800f53a:	88fb      	ldrh	r3, [r7, #6]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d101      	bne.n	800f544 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800f540:	2301      	movs	r3, #1
 800f542:	e071      	b.n	800f628 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	68ba      	ldr	r2, [r7, #8]
 800f548:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	88fa      	ldrh	r2, [r7, #6]
 800f54e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	88fa      	ldrh	r2, [r7, #6]
 800f556:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2200      	movs	r2, #0
 800f55e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2200      	movs	r2, #0
 800f564:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2221      	movs	r2, #33	@ 0x21
 800f56c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f578:	d12a      	bne.n	800f5d0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	689b      	ldr	r3, [r3, #8]
 800f57e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f582:	d107      	bne.n	800f594 <HAL_UART_Transmit_IT+0x78>
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d103      	bne.n	800f594 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	4a29      	ldr	r2, [pc, #164]	@ (800f634 <HAL_UART_Transmit_IT+0x118>)
 800f590:	679a      	str	r2, [r3, #120]	@ 0x78
 800f592:	e002      	b.n	800f59a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	4a28      	ldr	r2, [pc, #160]	@ (800f638 <HAL_UART_Transmit_IT+0x11c>)
 800f598:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	3308      	adds	r3, #8
 800f5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5a4:	e853 3f00 	ldrex	r3, [r3]
 800f5a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f5b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3308      	adds	r3, #8
 800f5b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5ba:	637a      	str	r2, [r7, #52]	@ 0x34
 800f5bc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f5c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5c2:	e841 2300 	strex	r3, r2, [r1]
 800f5c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d1e5      	bne.n	800f59a <HAL_UART_Transmit_IT+0x7e>
 800f5ce:	e028      	b.n	800f622 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	689b      	ldr	r3, [r3, #8]
 800f5d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f5d8:	d107      	bne.n	800f5ea <HAL_UART_Transmit_IT+0xce>
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	691b      	ldr	r3, [r3, #16]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d103      	bne.n	800f5ea <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	4a15      	ldr	r2, [pc, #84]	@ (800f63c <HAL_UART_Transmit_IT+0x120>)
 800f5e6:	679a      	str	r2, [r3, #120]	@ 0x78
 800f5e8:	e002      	b.n	800f5f0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	4a14      	ldr	r2, [pc, #80]	@ (800f640 <HAL_UART_Transmit_IT+0x124>)
 800f5ee:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	e853 3f00 	ldrex	r3, [r3]
 800f5fc:	613b      	str	r3, [r7, #16]
   return(result);
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	461a      	mov	r2, r3
 800f60c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f60e:	623b      	str	r3, [r7, #32]
 800f610:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f612:	69f9      	ldr	r1, [r7, #28]
 800f614:	6a3a      	ldr	r2, [r7, #32]
 800f616:	e841 2300 	strex	r3, r2, [r1]
 800f61a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d1e6      	bne.n	800f5f0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800f622:	2300      	movs	r3, #0
 800f624:	e000      	b.n	800f628 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800f626:	2302      	movs	r3, #2
  }
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3744      	adds	r7, #68	@ 0x44
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr
 800f634:	08011d99 	.word	0x08011d99
 800f638:	08011cb9 	.word	0x08011cb9
 800f63c:	08011bf7 	.word	0x08011bf7
 800f640:	08011b3f 	.word	0x08011b3f

0800f644 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b08a      	sub	sp, #40	@ 0x28
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	4613      	mov	r3, r2
 800f650:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f658:	2b20      	cmp	r3, #32
 800f65a:	d137      	bne.n	800f6cc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d002      	beq.n	800f668 <HAL_UART_Receive_IT+0x24>
 800f662:	88fb      	ldrh	r3, [r7, #6]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d101      	bne.n	800f66c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f668:	2301      	movs	r3, #1
 800f66a:	e030      	b.n	800f6ce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2200      	movs	r2, #0
 800f670:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a18      	ldr	r2, [pc, #96]	@ (800f6d8 <HAL_UART_Receive_IT+0x94>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d01f      	beq.n	800f6bc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f686:	2b00      	cmp	r3, #0
 800f688:	d018      	beq.n	800f6bc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	e853 3f00 	ldrex	r3, [r3]
 800f696:	613b      	str	r3, [r7, #16]
   return(result);
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f69e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a8:	623b      	str	r3, [r7, #32]
 800f6aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ac:	69f9      	ldr	r1, [r7, #28]
 800f6ae:	6a3a      	ldr	r2, [r7, #32]
 800f6b0:	e841 2300 	strex	r3, r2, [r1]
 800f6b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d1e6      	bne.n	800f68a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f6bc:	88fb      	ldrh	r3, [r7, #6]
 800f6be:	461a      	mov	r2, r3
 800f6c0:	68b9      	ldr	r1, [r7, #8]
 800f6c2:	68f8      	ldr	r0, [r7, #12]
 800f6c4:	f001 fe3c 	bl	8011340 <UART_Start_Receive_IT>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	e000      	b.n	800f6ce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f6cc:	2302      	movs	r3, #2
  }
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3728      	adds	r7, #40	@ 0x28
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	58000c00 	.word	0x58000c00

0800f6dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b08a      	sub	sp, #40	@ 0x28
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f6f0:	2b20      	cmp	r3, #32
 800f6f2:	d137      	bne.n	800f764 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d002      	beq.n	800f700 <HAL_UART_Receive_DMA+0x24>
 800f6fa:	88fb      	ldrh	r3, [r7, #6]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d101      	bne.n	800f704 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f700:	2301      	movs	r3, #1
 800f702:	e030      	b.n	800f766 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2200      	movs	r2, #0
 800f708:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4a18      	ldr	r2, [pc, #96]	@ (800f770 <HAL_UART_Receive_DMA+0x94>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d01f      	beq.n	800f754 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d018      	beq.n	800f754 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	e853 3f00 	ldrex	r3, [r3]
 800f72e:	613b      	str	r3, [r7, #16]
   return(result);
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f736:	627b      	str	r3, [r7, #36]	@ 0x24
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	461a      	mov	r2, r3
 800f73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f740:	623b      	str	r3, [r7, #32]
 800f742:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f744:	69f9      	ldr	r1, [r7, #28]
 800f746:	6a3a      	ldr	r2, [r7, #32]
 800f748:	e841 2300 	strex	r3, r2, [r1]
 800f74c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1e6      	bne.n	800f722 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f754:	88fb      	ldrh	r3, [r7, #6]
 800f756:	461a      	mov	r2, r3
 800f758:	68b9      	ldr	r1, [r7, #8]
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f001 ff12 	bl	8011584 <UART_Start_Receive_DMA>
 800f760:	4603      	mov	r3, r0
 800f762:	e000      	b.n	800f766 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f764:	2302      	movs	r3, #2
  }
}
 800f766:	4618      	mov	r0, r3
 800f768:	3728      	adds	r7, #40	@ 0x28
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	58000c00 	.word	0x58000c00

0800f774 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b090      	sub	sp, #64	@ 0x40
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f78a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f796:	2b80      	cmp	r3, #128	@ 0x80
 800f798:	d139      	bne.n	800f80e <HAL_UART_DMAStop+0x9a>
 800f79a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f79c:	2b21      	cmp	r3, #33	@ 0x21
 800f79e:	d136      	bne.n	800f80e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	3308      	adds	r3, #8
 800f7a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a8:	6a3b      	ldr	r3, [r7, #32]
 800f7aa:	e853 3f00 	ldrex	r3, [r3]
 800f7ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	3308      	adds	r3, #8
 800f7be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f7c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f7c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7c8:	e841 2300 	strex	r3, r2, [r1]
 800f7cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d1e5      	bne.n	800f7a0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d015      	beq.n	800f808 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7f7 fde1 	bl	80073a8 <HAL_DMA_Abort>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00d      	beq.n	800f808 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7f9 fa9f 	bl	8008d34 <HAL_DMA_GetError>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	2b20      	cmp	r3, #32
 800f7fa:	d105      	bne.n	800f808 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2210      	movs	r2, #16
 800f800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f804:	2303      	movs	r3, #3
 800f806:	e047      	b.n	800f898 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f001 ff61 	bl	80116d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f818:	2b40      	cmp	r3, #64	@ 0x40
 800f81a:	d13c      	bne.n	800f896 <HAL_UART_DMAStop+0x122>
 800f81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81e:	2b22      	cmp	r3, #34	@ 0x22
 800f820:	d139      	bne.n	800f896 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	3308      	adds	r3, #8
 800f828:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	e853 3f00 	ldrex	r3, [r3]
 800f830:	60bb      	str	r3, [r7, #8]
   return(result);
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f838:	633b      	str	r3, [r7, #48]	@ 0x30
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	3308      	adds	r3, #8
 800f840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f842:	61ba      	str	r2, [r7, #24]
 800f844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f846:	6979      	ldr	r1, [r7, #20]
 800f848:	69ba      	ldr	r2, [r7, #24]
 800f84a:	e841 2300 	strex	r3, r2, [r1]
 800f84e:	613b      	str	r3, [r7, #16]
   return(result);
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d1e5      	bne.n	800f822 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d017      	beq.n	800f890 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f866:	4618      	mov	r0, r3
 800f868:	f7f7 fd9e 	bl	80073a8 <HAL_DMA_Abort>
 800f86c:	4603      	mov	r3, r0
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00e      	beq.n	800f890 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f878:	4618      	mov	r0, r3
 800f87a:	f7f9 fa5b 	bl	8008d34 <HAL_DMA_GetError>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b20      	cmp	r3, #32
 800f882:	d105      	bne.n	800f890 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2210      	movs	r2, #16
 800f888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f88c:	2303      	movs	r3, #3
 800f88e:	e003      	b.n	800f898 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f001 ff5f 	bl	8011754 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f896:	2300      	movs	r3, #0
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3740      	adds	r7, #64	@ 0x40
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b0a2      	sub	sp, #136	@ 0x88
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f8b6:	e853 3f00 	ldrex	r3, [r3]
 800f8ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f8bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f8be:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800f8c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f8d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f8d2:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f8d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f8d8:	e841 2300 	strex	r3, r2, [r1]
 800f8dc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f8de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d1e4      	bne.n	800f8ae <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	3308      	adds	r3, #8
 800f8ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8ee:	e853 3f00 	ldrex	r3, [r3]
 800f8f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f8f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8f6:	4b85      	ldr	r3, [pc, #532]	@ (800fb0c <HAL_UART_Abort_IT+0x26c>)
 800f8f8:	4013      	ands	r3, r2
 800f8fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	3308      	adds	r3, #8
 800f902:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f904:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f906:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f908:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f90a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f90c:	e841 2300 	strex	r3, r2, [r1]
 800f910:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f914:	2b00      	cmp	r3, #0
 800f916:	d1e5      	bne.n	800f8e4 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d118      	bne.n	800f952 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f928:	e853 3f00 	ldrex	r3, [r3]
 800f92c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f930:	f023 0310 	bic.w	r3, r3, #16
 800f934:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	461a      	mov	r2, r3
 800f93c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f93e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f940:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f942:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f946:	e841 2300 	strex	r3, r2, [r1]
 800f94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d1e6      	bne.n	800f920 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00f      	beq.n	800f97a <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f964:	2b80      	cmp	r3, #128	@ 0x80
 800f966:	d104      	bne.n	800f972 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f96c:	4a68      	ldr	r2, [pc, #416]	@ (800fb10 <HAL_UART_Abort_IT+0x270>)
 800f96e:	651a      	str	r2, [r3, #80]	@ 0x50
 800f970:	e003      	b.n	800f97a <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f976:	2200      	movs	r2, #0
 800f978:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f980:	2b00      	cmp	r3, #0
 800f982:	d011      	beq.n	800f9a8 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	689b      	ldr	r3, [r3, #8]
 800f98a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f98e:	2b40      	cmp	r3, #64	@ 0x40
 800f990:	d105      	bne.n	800f99e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f998:	4a5e      	ldr	r2, [pc, #376]	@ (800fb14 <HAL_UART_Abort_IT+0x274>)
 800f99a:	651a      	str	r2, [r3, #80]	@ 0x50
 800f99c:	e004      	b.n	800f9a8 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9b2:	2b80      	cmp	r3, #128	@ 0x80
 800f9b4:	d12d      	bne.n	800fa12 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	3308      	adds	r3, #8
 800f9bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c0:	e853 3f00 	ldrex	r3, [r3]
 800f9c4:	623b      	str	r3, [r7, #32]
   return(result);
 800f9c6:	6a3b      	ldr	r3, [r7, #32]
 800f9c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f9cc:	677b      	str	r3, [r7, #116]	@ 0x74
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	3308      	adds	r3, #8
 800f9d4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f9d6:	633a      	str	r2, [r7, #48]	@ 0x30
 800f9d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f9dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9de:	e841 2300 	strex	r3, r2, [r1]
 800f9e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d1e5      	bne.n	800f9b6 <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00f      	beq.n	800fa12 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7f7 fff4 	bl	80079e4 <HAL_DMA_Abort_IT>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d004      	beq.n	800fa0c <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa06:	2200      	movs	r2, #0
 800fa08:	651a      	str	r2, [r3, #80]	@ 0x50
 800fa0a:	e002      	b.n	800fa12 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	689b      	ldr	r3, [r3, #8]
 800fa18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa1c:	2b40      	cmp	r3, #64	@ 0x40
 800fa1e:	d133      	bne.n	800fa88 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	3308      	adds	r3, #8
 800fa26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	e853 3f00 	ldrex	r3, [r3]
 800fa2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa36:	673b      	str	r3, [r7, #112]	@ 0x70
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	3308      	adds	r3, #8
 800fa3e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fa40:	61fa      	str	r2, [r7, #28]
 800fa42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa44:	69b9      	ldr	r1, [r7, #24]
 800fa46:	69fa      	ldr	r2, [r7, #28]
 800fa48:	e841 2300 	strex	r3, r2, [r1]
 800fa4c:	617b      	str	r3, [r7, #20]
   return(result);
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d1e5      	bne.n	800fa20 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d014      	beq.n	800fa88 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7f7 ffbd 	bl	80079e4 <HAL_DMA_Abort_IT>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d008      	beq.n	800fa82 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa76:	2200      	movs	r2, #0
 800fa78:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fa80:	e002      	b.n	800fa88 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800fa82:	2300      	movs	r3, #0
 800fa84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800fa88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d138      	bne.n	800fb02 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2200      	movs	r2, #0
 800fa94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2200      	movs	r2, #0
 800faa4:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2200      	movs	r2, #0
 800faaa:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2200      	movs	r2, #0
 800fab0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	220f      	movs	r2, #15
 800faba:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fac4:	d107      	bne.n	800fad6 <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	699a      	ldr	r2, [r3, #24]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f042 0210 	orr.w	r2, r2, #16
 800fad4:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	699a      	ldr	r2, [r3, #24]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f042 0208 	orr.w	r2, r2, #8
 800fae4:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2220      	movs	r2, #32
 800faea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2220      	movs	r2, #32
 800faf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f000 fbe3 	bl	80102c8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3788      	adds	r7, #136	@ 0x88
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	ef7ffffe 	.word	0xef7ffffe
 800fb10:	08011a33 	.word	0x08011a33
 800fb14:	08011abf 	.word	0x08011abf

0800fb18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b0ba      	sub	sp, #232	@ 0xe8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	69db      	ldr	r3, [r3, #28]
 800fb26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	689b      	ldr	r3, [r3, #8]
 800fb3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fb3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fb42:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fb46:	4013      	ands	r3, r2
 800fb48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fb4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d11b      	bne.n	800fb8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fb54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb58:	f003 0320 	and.w	r3, r3, #32
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d015      	beq.n	800fb8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fb60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb64:	f003 0320 	and.w	r3, r3, #32
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d105      	bne.n	800fb78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fb6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d009      	beq.n	800fb8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	f000 8377 	beq.w	8010270 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	4798      	blx	r3
      }
      return;
 800fb8a:	e371      	b.n	8010270 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fb8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	f000 8123 	beq.w	800fddc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fb96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fb9a:	4b8d      	ldr	r3, [pc, #564]	@ (800fdd0 <HAL_UART_IRQHandler+0x2b8>)
 800fb9c:	4013      	ands	r3, r2
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d106      	bne.n	800fbb0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fba2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fba6:	4b8b      	ldr	r3, [pc, #556]	@ (800fdd4 <HAL_UART_IRQHandler+0x2bc>)
 800fba8:	4013      	ands	r3, r2
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	f000 8116 	beq.w	800fddc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fbb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbb4:	f003 0301 	and.w	r3, r3, #1
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d011      	beq.n	800fbe0 <HAL_UART_IRQHandler+0xc8>
 800fbbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d00b      	beq.n	800fbe0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbd6:	f043 0201 	orr.w	r2, r3, #1
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fbe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbe4:	f003 0302 	and.w	r3, r3, #2
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d011      	beq.n	800fc10 <HAL_UART_IRQHandler+0xf8>
 800fbec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fbf0:	f003 0301 	and.w	r3, r3, #1
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00b      	beq.n	800fc10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	2202      	movs	r2, #2
 800fbfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc06:	f043 0204 	orr.w	r2, r3, #4
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fc10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc14:	f003 0304 	and.w	r3, r3, #4
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d011      	beq.n	800fc40 <HAL_UART_IRQHandler+0x128>
 800fc1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc20:	f003 0301 	and.w	r3, r3, #1
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d00b      	beq.n	800fc40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2204      	movs	r2, #4
 800fc2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc36:	f043 0202 	orr.w	r2, r3, #2
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fc40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc44:	f003 0308 	and.w	r3, r3, #8
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d017      	beq.n	800fc7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fc4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc50:	f003 0320 	and.w	r3, r3, #32
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d105      	bne.n	800fc64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fc58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fc5c:	4b5c      	ldr	r3, [pc, #368]	@ (800fdd0 <HAL_UART_IRQHandler+0x2b8>)
 800fc5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d00b      	beq.n	800fc7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2208      	movs	r2, #8
 800fc6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc72:	f043 0208 	orr.w	r2, r3, #8
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fc7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d012      	beq.n	800fcae <HAL_UART_IRQHandler+0x196>
 800fc88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d00c      	beq.n	800fcae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fc9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fca4:	f043 0220 	orr.w	r2, r3, #32
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	f000 82dd 	beq.w	8010274 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fcba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcbe:	f003 0320 	and.w	r3, r3, #32
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d013      	beq.n	800fcee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fcc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fcca:	f003 0320 	and.w	r3, r3, #32
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d105      	bne.n	800fcde <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fcd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d007      	beq.n	800fcee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d003      	beq.n	800fcee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcf4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	689b      	ldr	r3, [r3, #8]
 800fcfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd02:	2b40      	cmp	r3, #64	@ 0x40
 800fd04:	d005      	beq.n	800fd12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fd06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fd0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d054      	beq.n	800fdbc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f001 fd1e 	bl	8011754 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd22:	2b40      	cmp	r3, #64	@ 0x40
 800fd24:	d146      	bne.n	800fdb4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	3308      	adds	r3, #8
 800fd2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fd34:	e853 3f00 	ldrex	r3, [r3]
 800fd38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fd3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fd40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	3308      	adds	r3, #8
 800fd4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fd52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fd56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fd5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fd62:	e841 2300 	strex	r3, r2, [r1]
 800fd66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fd6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d1d9      	bne.n	800fd26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d017      	beq.n	800fdac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd82:	4a15      	ldr	r2, [pc, #84]	@ (800fdd8 <HAL_UART_IRQHandler+0x2c0>)
 800fd84:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7f7 fe29 	bl	80079e4 <HAL_DMA_Abort_IT>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d019      	beq.n	800fdcc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fda6:	4610      	mov	r0, r2
 800fda8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdaa:	e00f      	b.n	800fdcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 fa81 	bl	80102b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdb2:	e00b      	b.n	800fdcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f000 fa7d 	bl	80102b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdba:	e007      	b.n	800fdcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 fa79 	bl	80102b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fdca:	e253      	b.n	8010274 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdcc:	bf00      	nop
    return;
 800fdce:	e251      	b.n	8010274 <HAL_UART_IRQHandler+0x75c>
 800fdd0:	10000001 	.word	0x10000001
 800fdd4:	04000120 	.word	0x04000120
 800fdd8:	08011a07 	.word	0x08011a07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	f040 81e7 	bne.w	80101b4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fde6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdea:	f003 0310 	and.w	r3, r3, #16
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f000 81e0 	beq.w	80101b4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fdf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdf8:	f003 0310 	and.w	r3, r3, #16
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 81d9 	beq.w	80101b4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2210      	movs	r2, #16
 800fe08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	689b      	ldr	r3, [r3, #8]
 800fe10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe14:	2b40      	cmp	r3, #64	@ 0x40
 800fe16:	f040 8151 	bne.w	80100bc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	4a96      	ldr	r2, [pc, #600]	@ (801007c <HAL_UART_IRQHandler+0x564>)
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d068      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4a93      	ldr	r2, [pc, #588]	@ (8010080 <HAL_UART_IRQHandler+0x568>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d061      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	4a91      	ldr	r2, [pc, #580]	@ (8010084 <HAL_UART_IRQHandler+0x56c>)
 800fe40:	4293      	cmp	r3, r2
 800fe42:	d05a      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4a8e      	ldr	r2, [pc, #568]	@ (8010088 <HAL_UART_IRQHandler+0x570>)
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d053      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4a8c      	ldr	r2, [pc, #560]	@ (801008c <HAL_UART_IRQHandler+0x574>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d04c      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4a89      	ldr	r2, [pc, #548]	@ (8010090 <HAL_UART_IRQHandler+0x578>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d045      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	4a87      	ldr	r2, [pc, #540]	@ (8010094 <HAL_UART_IRQHandler+0x57c>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d03e      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4a84      	ldr	r2, [pc, #528]	@ (8010098 <HAL_UART_IRQHandler+0x580>)
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d037      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4a82      	ldr	r2, [pc, #520]	@ (801009c <HAL_UART_IRQHandler+0x584>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d030      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a7f      	ldr	r2, [pc, #508]	@ (80100a0 <HAL_UART_IRQHandler+0x588>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d029      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	4a7d      	ldr	r2, [pc, #500]	@ (80100a4 <HAL_UART_IRQHandler+0x58c>)
 800feb0:	4293      	cmp	r3, r2
 800feb2:	d022      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4a7a      	ldr	r2, [pc, #488]	@ (80100a8 <HAL_UART_IRQHandler+0x590>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d01b      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a78      	ldr	r2, [pc, #480]	@ (80100ac <HAL_UART_IRQHandler+0x594>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d014      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a75      	ldr	r2, [pc, #468]	@ (80100b0 <HAL_UART_IRQHandler+0x598>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d00d      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a73      	ldr	r2, [pc, #460]	@ (80100b4 <HAL_UART_IRQHandler+0x59c>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d006      	beq.n	800fefa <HAL_UART_IRQHandler+0x3e2>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	4a70      	ldr	r2, [pc, #448]	@ (80100b8 <HAL_UART_IRQHandler+0x5a0>)
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d106      	bne.n	800ff08 <HAL_UART_IRQHandler+0x3f0>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	e005      	b.n	800ff14 <HAL_UART_IRQHandler+0x3fc>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ff18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f000 81ab 	beq.w	8010278 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ff28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	f080 81a3 	bcs.w	8010278 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ff38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff42:	69db      	ldr	r3, [r3, #28]
 800ff44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff48:	f000 8087 	beq.w	801005a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ff58:	e853 3f00 	ldrex	r3, [r3]
 800ff5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ff60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ff64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ff68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	461a      	mov	r2, r3
 800ff72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ff76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ff7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ff82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ff86:	e841 2300 	strex	r3, r2, [r1]
 800ff8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ff8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d1da      	bne.n	800ff4c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	3308      	adds	r3, #8
 800ff9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ffa0:	e853 3f00 	ldrex	r3, [r3]
 800ffa4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ffa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ffa8:	f023 0301 	bic.w	r3, r3, #1
 800ffac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	3308      	adds	r3, #8
 800ffb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ffba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ffbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ffc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ffc6:	e841 2300 	strex	r3, r2, [r1]
 800ffca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ffcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d1e1      	bne.n	800ff96 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	3308      	adds	r3, #8
 800ffd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ffdc:	e853 3f00 	ldrex	r3, [r3]
 800ffe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ffe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ffe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ffe8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	3308      	adds	r3, #8
 800fff2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fff6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fff8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fffa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fffc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fffe:	e841 2300 	strex	r3, r2, [r1]
 8010002:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010006:	2b00      	cmp	r3, #0
 8010008:	d1e3      	bne.n	800ffd2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2220      	movs	r2, #32
 801000e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2200      	movs	r2, #0
 8010016:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801001e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010020:	e853 3f00 	ldrex	r3, [r3]
 8010024:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010028:	f023 0310 	bic.w	r3, r3, #16
 801002c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	461a      	mov	r2, r3
 8010036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801003a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801003c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801003e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010040:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010042:	e841 2300 	strex	r3, r2, [r1]
 8010046:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801004a:	2b00      	cmp	r3, #0
 801004c:	d1e4      	bne.n	8010018 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010054:	4618      	mov	r0, r3
 8010056:	f7f7 f9a7 	bl	80073a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2202      	movs	r2, #2
 801005e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801006c:	b29b      	uxth	r3, r3
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	b29b      	uxth	r3, r3
 8010072:	4619      	mov	r1, r3
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 f931 	bl	80102dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801007a:	e0fd      	b.n	8010278 <HAL_UART_IRQHandler+0x760>
 801007c:	40020010 	.word	0x40020010
 8010080:	40020028 	.word	0x40020028
 8010084:	40020040 	.word	0x40020040
 8010088:	40020058 	.word	0x40020058
 801008c:	40020070 	.word	0x40020070
 8010090:	40020088 	.word	0x40020088
 8010094:	400200a0 	.word	0x400200a0
 8010098:	400200b8 	.word	0x400200b8
 801009c:	40020410 	.word	0x40020410
 80100a0:	40020428 	.word	0x40020428
 80100a4:	40020440 	.word	0x40020440
 80100a8:	40020458 	.word	0x40020458
 80100ac:	40020470 	.word	0x40020470
 80100b0:	40020488 	.word	0x40020488
 80100b4:	400204a0 	.word	0x400204a0
 80100b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	1ad3      	subs	r3, r2, r3
 80100cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	2b00      	cmp	r3, #0
 80100da:	f000 80cf 	beq.w	801027c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80100de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	f000 80ca 	beq.w	801027c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100f0:	e853 3f00 	ldrex	r3, [r3]
 80100f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80100f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80100fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	461a      	mov	r2, r3
 8010106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801010a:	647b      	str	r3, [r7, #68]	@ 0x44
 801010c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801010e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010110:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010112:	e841 2300 	strex	r3, r2, [r1]
 8010116:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801011a:	2b00      	cmp	r3, #0
 801011c:	d1e4      	bne.n	80100e8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	3308      	adds	r3, #8
 8010124:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010128:	e853 3f00 	ldrex	r3, [r3]
 801012c:	623b      	str	r3, [r7, #32]
   return(result);
 801012e:	6a3a      	ldr	r2, [r7, #32]
 8010130:	4b55      	ldr	r3, [pc, #340]	@ (8010288 <HAL_UART_IRQHandler+0x770>)
 8010132:	4013      	ands	r3, r2
 8010134:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	3308      	adds	r3, #8
 801013e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010142:	633a      	str	r2, [r7, #48]	@ 0x30
 8010144:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010146:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801014a:	e841 2300 	strex	r3, r2, [r1]
 801014e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1e3      	bne.n	801011e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2220      	movs	r2, #32
 801015a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2200      	movs	r2, #0
 8010168:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	e853 3f00 	ldrex	r3, [r3]
 8010176:	60fb      	str	r3, [r7, #12]
   return(result);
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f023 0310 	bic.w	r3, r3, #16
 801017e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	461a      	mov	r2, r3
 8010188:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801018c:	61fb      	str	r3, [r7, #28]
 801018e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010190:	69b9      	ldr	r1, [r7, #24]
 8010192:	69fa      	ldr	r2, [r7, #28]
 8010194:	e841 2300 	strex	r3, r2, [r1]
 8010198:	617b      	str	r3, [r7, #20]
   return(result);
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d1e4      	bne.n	801016a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2202      	movs	r2, #2
 80101a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80101a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80101aa:	4619      	mov	r1, r3
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 f895 	bl	80102dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80101b2:	e063      	b.n	801027c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80101b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d00e      	beq.n	80101de <HAL_UART_IRQHandler+0x6c6>
 80101c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d008      	beq.n	80101de <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80101d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f002 fb9a 	bl	8012910 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80101dc:	e051      	b.n	8010282 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80101de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d014      	beq.n	8010214 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80101ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d105      	bne.n	8010202 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80101f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d008      	beq.n	8010214 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010206:	2b00      	cmp	r3, #0
 8010208:	d03a      	beq.n	8010280 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	4798      	blx	r3
    }
    return;
 8010212:	e035      	b.n	8010280 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801021c:	2b00      	cmp	r3, #0
 801021e:	d009      	beq.n	8010234 <HAL_UART_IRQHandler+0x71c>
 8010220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010228:	2b00      	cmp	r3, #0
 801022a:	d003      	beq.n	8010234 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f001 fe28 	bl	8011e82 <UART_EndTransmit_IT>
    return;
 8010232:	e026      	b.n	8010282 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010238:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801023c:	2b00      	cmp	r3, #0
 801023e:	d009      	beq.n	8010254 <HAL_UART_IRQHandler+0x73c>
 8010240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010244:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010248:	2b00      	cmp	r3, #0
 801024a:	d003      	beq.n	8010254 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f002 fb73 	bl	8012938 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010252:	e016      	b.n	8010282 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801025c:	2b00      	cmp	r3, #0
 801025e:	d010      	beq.n	8010282 <HAL_UART_IRQHandler+0x76a>
 8010260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010264:	2b00      	cmp	r3, #0
 8010266:	da0c      	bge.n	8010282 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f002 fb5b 	bl	8012924 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801026e:	e008      	b.n	8010282 <HAL_UART_IRQHandler+0x76a>
      return;
 8010270:	bf00      	nop
 8010272:	e006      	b.n	8010282 <HAL_UART_IRQHandler+0x76a>
    return;
 8010274:	bf00      	nop
 8010276:	e004      	b.n	8010282 <HAL_UART_IRQHandler+0x76a>
      return;
 8010278:	bf00      	nop
 801027a:	e002      	b.n	8010282 <HAL_UART_IRQHandler+0x76a>
      return;
 801027c:	bf00      	nop
 801027e:	e000      	b.n	8010282 <HAL_UART_IRQHandler+0x76a>
    return;
 8010280:	bf00      	nop
  }
}
 8010282:	37e8      	adds	r7, #232	@ 0xe8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	effffffe 	.word	0xeffffffe

0801028c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010294:	bf00      	nop
 8010296:	370c      	adds	r7, #12
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80102a8:	bf00      	nop
 80102aa:	370c      	adds	r7, #12
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80102bc:	bf00      	nop
 80102be:	370c      	adds	r7, #12
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr

080102c8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80102c8:	b480      	push	{r7}
 80102ca:	b083      	sub	sp, #12
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80102d0:	bf00      	nop
 80102d2:	370c      	adds	r7, #12
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr

080102dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80102dc:	b480      	push	{r7}
 80102de:	b083      	sub	sp, #12
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	460b      	mov	r3, r1
 80102e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80102e8:	bf00      	nop
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80102f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80102f8:	b092      	sub	sp, #72	@ 0x48
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80102fe:	2300      	movs	r3, #0
 8010300:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	689a      	ldr	r2, [r3, #8]
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	691b      	ldr	r3, [r3, #16]
 801030c:	431a      	orrs	r2, r3
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	695b      	ldr	r3, [r3, #20]
 8010312:	431a      	orrs	r2, r3
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	69db      	ldr	r3, [r3, #28]
 8010318:	4313      	orrs	r3, r2
 801031a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	4bbe      	ldr	r3, [pc, #760]	@ (801061c <UART_SetConfig+0x328>)
 8010324:	4013      	ands	r3, r2
 8010326:	697a      	ldr	r2, [r7, #20]
 8010328:	6812      	ldr	r2, [r2, #0]
 801032a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801032c:	430b      	orrs	r3, r1
 801032e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	68da      	ldr	r2, [r3, #12]
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	430a      	orrs	r2, r1
 8010344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	699b      	ldr	r3, [r3, #24]
 801034a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	4ab3      	ldr	r2, [pc, #716]	@ (8010620 <UART_SetConfig+0x32c>)
 8010352:	4293      	cmp	r3, r2
 8010354:	d004      	beq.n	8010360 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	6a1b      	ldr	r3, [r3, #32]
 801035a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801035c:	4313      	orrs	r3, r2
 801035e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	689a      	ldr	r2, [r3, #8]
 8010366:	4baf      	ldr	r3, [pc, #700]	@ (8010624 <UART_SetConfig+0x330>)
 8010368:	4013      	ands	r3, r2
 801036a:	697a      	ldr	r2, [r7, #20]
 801036c:	6812      	ldr	r2, [r2, #0]
 801036e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010370:	430b      	orrs	r3, r1
 8010372:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801037a:	f023 010f 	bic.w	r1, r3, #15
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	430a      	orrs	r2, r1
 8010388:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	4aa6      	ldr	r2, [pc, #664]	@ (8010628 <UART_SetConfig+0x334>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d177      	bne.n	8010484 <UART_SetConfig+0x190>
 8010394:	4ba5      	ldr	r3, [pc, #660]	@ (801062c <UART_SetConfig+0x338>)
 8010396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010398:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801039c:	2b28      	cmp	r3, #40	@ 0x28
 801039e:	d86d      	bhi.n	801047c <UART_SetConfig+0x188>
 80103a0:	a201      	add	r2, pc, #4	@ (adr r2, 80103a8 <UART_SetConfig+0xb4>)
 80103a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103a6:	bf00      	nop
 80103a8:	0801044d 	.word	0x0801044d
 80103ac:	0801047d 	.word	0x0801047d
 80103b0:	0801047d 	.word	0x0801047d
 80103b4:	0801047d 	.word	0x0801047d
 80103b8:	0801047d 	.word	0x0801047d
 80103bc:	0801047d 	.word	0x0801047d
 80103c0:	0801047d 	.word	0x0801047d
 80103c4:	0801047d 	.word	0x0801047d
 80103c8:	08010455 	.word	0x08010455
 80103cc:	0801047d 	.word	0x0801047d
 80103d0:	0801047d 	.word	0x0801047d
 80103d4:	0801047d 	.word	0x0801047d
 80103d8:	0801047d 	.word	0x0801047d
 80103dc:	0801047d 	.word	0x0801047d
 80103e0:	0801047d 	.word	0x0801047d
 80103e4:	0801047d 	.word	0x0801047d
 80103e8:	0801045d 	.word	0x0801045d
 80103ec:	0801047d 	.word	0x0801047d
 80103f0:	0801047d 	.word	0x0801047d
 80103f4:	0801047d 	.word	0x0801047d
 80103f8:	0801047d 	.word	0x0801047d
 80103fc:	0801047d 	.word	0x0801047d
 8010400:	0801047d 	.word	0x0801047d
 8010404:	0801047d 	.word	0x0801047d
 8010408:	08010465 	.word	0x08010465
 801040c:	0801047d 	.word	0x0801047d
 8010410:	0801047d 	.word	0x0801047d
 8010414:	0801047d 	.word	0x0801047d
 8010418:	0801047d 	.word	0x0801047d
 801041c:	0801047d 	.word	0x0801047d
 8010420:	0801047d 	.word	0x0801047d
 8010424:	0801047d 	.word	0x0801047d
 8010428:	0801046d 	.word	0x0801046d
 801042c:	0801047d 	.word	0x0801047d
 8010430:	0801047d 	.word	0x0801047d
 8010434:	0801047d 	.word	0x0801047d
 8010438:	0801047d 	.word	0x0801047d
 801043c:	0801047d 	.word	0x0801047d
 8010440:	0801047d 	.word	0x0801047d
 8010444:	0801047d 	.word	0x0801047d
 8010448:	08010475 	.word	0x08010475
 801044c:	2301      	movs	r3, #1
 801044e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010452:	e326      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010454:	2304      	movs	r3, #4
 8010456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801045a:	e322      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801045c:	2308      	movs	r3, #8
 801045e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010462:	e31e      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010464:	2310      	movs	r3, #16
 8010466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801046a:	e31a      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801046c:	2320      	movs	r3, #32
 801046e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010472:	e316      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010474:	2340      	movs	r3, #64	@ 0x40
 8010476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801047a:	e312      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801047c:	2380      	movs	r3, #128	@ 0x80
 801047e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010482:	e30e      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4a69      	ldr	r2, [pc, #420]	@ (8010630 <UART_SetConfig+0x33c>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d130      	bne.n	80104f0 <UART_SetConfig+0x1fc>
 801048e:	4b67      	ldr	r3, [pc, #412]	@ (801062c <UART_SetConfig+0x338>)
 8010490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010492:	f003 0307 	and.w	r3, r3, #7
 8010496:	2b05      	cmp	r3, #5
 8010498:	d826      	bhi.n	80104e8 <UART_SetConfig+0x1f4>
 801049a:	a201      	add	r2, pc, #4	@ (adr r2, 80104a0 <UART_SetConfig+0x1ac>)
 801049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104a0:	080104b9 	.word	0x080104b9
 80104a4:	080104c1 	.word	0x080104c1
 80104a8:	080104c9 	.word	0x080104c9
 80104ac:	080104d1 	.word	0x080104d1
 80104b0:	080104d9 	.word	0x080104d9
 80104b4:	080104e1 	.word	0x080104e1
 80104b8:	2300      	movs	r3, #0
 80104ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104be:	e2f0      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80104c0:	2304      	movs	r3, #4
 80104c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104c6:	e2ec      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80104c8:	2308      	movs	r3, #8
 80104ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104ce:	e2e8      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80104d0:	2310      	movs	r3, #16
 80104d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104d6:	e2e4      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80104d8:	2320      	movs	r3, #32
 80104da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104de:	e2e0      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80104e0:	2340      	movs	r3, #64	@ 0x40
 80104e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104e6:	e2dc      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80104e8:	2380      	movs	r3, #128	@ 0x80
 80104ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104ee:	e2d8      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	4a4f      	ldr	r2, [pc, #316]	@ (8010634 <UART_SetConfig+0x340>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d130      	bne.n	801055c <UART_SetConfig+0x268>
 80104fa:	4b4c      	ldr	r3, [pc, #304]	@ (801062c <UART_SetConfig+0x338>)
 80104fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104fe:	f003 0307 	and.w	r3, r3, #7
 8010502:	2b05      	cmp	r3, #5
 8010504:	d826      	bhi.n	8010554 <UART_SetConfig+0x260>
 8010506:	a201      	add	r2, pc, #4	@ (adr r2, 801050c <UART_SetConfig+0x218>)
 8010508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801050c:	08010525 	.word	0x08010525
 8010510:	0801052d 	.word	0x0801052d
 8010514:	08010535 	.word	0x08010535
 8010518:	0801053d 	.word	0x0801053d
 801051c:	08010545 	.word	0x08010545
 8010520:	0801054d 	.word	0x0801054d
 8010524:	2300      	movs	r3, #0
 8010526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801052a:	e2ba      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801052c:	2304      	movs	r3, #4
 801052e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010532:	e2b6      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010534:	2308      	movs	r3, #8
 8010536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801053a:	e2b2      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801053c:	2310      	movs	r3, #16
 801053e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010542:	e2ae      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010544:	2320      	movs	r3, #32
 8010546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801054a:	e2aa      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801054c:	2340      	movs	r3, #64	@ 0x40
 801054e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010552:	e2a6      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010554:	2380      	movs	r3, #128	@ 0x80
 8010556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801055a:	e2a2      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4a35      	ldr	r2, [pc, #212]	@ (8010638 <UART_SetConfig+0x344>)
 8010562:	4293      	cmp	r3, r2
 8010564:	d130      	bne.n	80105c8 <UART_SetConfig+0x2d4>
 8010566:	4b31      	ldr	r3, [pc, #196]	@ (801062c <UART_SetConfig+0x338>)
 8010568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801056a:	f003 0307 	and.w	r3, r3, #7
 801056e:	2b05      	cmp	r3, #5
 8010570:	d826      	bhi.n	80105c0 <UART_SetConfig+0x2cc>
 8010572:	a201      	add	r2, pc, #4	@ (adr r2, 8010578 <UART_SetConfig+0x284>)
 8010574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010578:	08010591 	.word	0x08010591
 801057c:	08010599 	.word	0x08010599
 8010580:	080105a1 	.word	0x080105a1
 8010584:	080105a9 	.word	0x080105a9
 8010588:	080105b1 	.word	0x080105b1
 801058c:	080105b9 	.word	0x080105b9
 8010590:	2300      	movs	r3, #0
 8010592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010596:	e284      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010598:	2304      	movs	r3, #4
 801059a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801059e:	e280      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80105a0:	2308      	movs	r3, #8
 80105a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105a6:	e27c      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80105a8:	2310      	movs	r3, #16
 80105aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105ae:	e278      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80105b0:	2320      	movs	r3, #32
 80105b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105b6:	e274      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80105b8:	2340      	movs	r3, #64	@ 0x40
 80105ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105be:	e270      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80105c0:	2380      	movs	r3, #128	@ 0x80
 80105c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105c6:	e26c      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4a1b      	ldr	r2, [pc, #108]	@ (801063c <UART_SetConfig+0x348>)
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d142      	bne.n	8010658 <UART_SetConfig+0x364>
 80105d2:	4b16      	ldr	r3, [pc, #88]	@ (801062c <UART_SetConfig+0x338>)
 80105d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105d6:	f003 0307 	and.w	r3, r3, #7
 80105da:	2b05      	cmp	r3, #5
 80105dc:	d838      	bhi.n	8010650 <UART_SetConfig+0x35c>
 80105de:	a201      	add	r2, pc, #4	@ (adr r2, 80105e4 <UART_SetConfig+0x2f0>)
 80105e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105e4:	080105fd 	.word	0x080105fd
 80105e8:	08010605 	.word	0x08010605
 80105ec:	0801060d 	.word	0x0801060d
 80105f0:	08010615 	.word	0x08010615
 80105f4:	08010641 	.word	0x08010641
 80105f8:	08010649 	.word	0x08010649
 80105fc:	2300      	movs	r3, #0
 80105fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010602:	e24e      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010604:	2304      	movs	r3, #4
 8010606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801060a:	e24a      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801060c:	2308      	movs	r3, #8
 801060e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010612:	e246      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010614:	2310      	movs	r3, #16
 8010616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801061a:	e242      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801061c:	cfff69f3 	.word	0xcfff69f3
 8010620:	58000c00 	.word	0x58000c00
 8010624:	11fff4ff 	.word	0x11fff4ff
 8010628:	40011000 	.word	0x40011000
 801062c:	58024400 	.word	0x58024400
 8010630:	40004400 	.word	0x40004400
 8010634:	40004800 	.word	0x40004800
 8010638:	40004c00 	.word	0x40004c00
 801063c:	40005000 	.word	0x40005000
 8010640:	2320      	movs	r3, #32
 8010642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010646:	e22c      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010648:	2340      	movs	r3, #64	@ 0x40
 801064a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801064e:	e228      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010650:	2380      	movs	r3, #128	@ 0x80
 8010652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010656:	e224      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	4ab1      	ldr	r2, [pc, #708]	@ (8010924 <UART_SetConfig+0x630>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d176      	bne.n	8010750 <UART_SetConfig+0x45c>
 8010662:	4bb1      	ldr	r3, [pc, #708]	@ (8010928 <UART_SetConfig+0x634>)
 8010664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010666:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801066a:	2b28      	cmp	r3, #40	@ 0x28
 801066c:	d86c      	bhi.n	8010748 <UART_SetConfig+0x454>
 801066e:	a201      	add	r2, pc, #4	@ (adr r2, 8010674 <UART_SetConfig+0x380>)
 8010670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010674:	08010719 	.word	0x08010719
 8010678:	08010749 	.word	0x08010749
 801067c:	08010749 	.word	0x08010749
 8010680:	08010749 	.word	0x08010749
 8010684:	08010749 	.word	0x08010749
 8010688:	08010749 	.word	0x08010749
 801068c:	08010749 	.word	0x08010749
 8010690:	08010749 	.word	0x08010749
 8010694:	08010721 	.word	0x08010721
 8010698:	08010749 	.word	0x08010749
 801069c:	08010749 	.word	0x08010749
 80106a0:	08010749 	.word	0x08010749
 80106a4:	08010749 	.word	0x08010749
 80106a8:	08010749 	.word	0x08010749
 80106ac:	08010749 	.word	0x08010749
 80106b0:	08010749 	.word	0x08010749
 80106b4:	08010729 	.word	0x08010729
 80106b8:	08010749 	.word	0x08010749
 80106bc:	08010749 	.word	0x08010749
 80106c0:	08010749 	.word	0x08010749
 80106c4:	08010749 	.word	0x08010749
 80106c8:	08010749 	.word	0x08010749
 80106cc:	08010749 	.word	0x08010749
 80106d0:	08010749 	.word	0x08010749
 80106d4:	08010731 	.word	0x08010731
 80106d8:	08010749 	.word	0x08010749
 80106dc:	08010749 	.word	0x08010749
 80106e0:	08010749 	.word	0x08010749
 80106e4:	08010749 	.word	0x08010749
 80106e8:	08010749 	.word	0x08010749
 80106ec:	08010749 	.word	0x08010749
 80106f0:	08010749 	.word	0x08010749
 80106f4:	08010739 	.word	0x08010739
 80106f8:	08010749 	.word	0x08010749
 80106fc:	08010749 	.word	0x08010749
 8010700:	08010749 	.word	0x08010749
 8010704:	08010749 	.word	0x08010749
 8010708:	08010749 	.word	0x08010749
 801070c:	08010749 	.word	0x08010749
 8010710:	08010749 	.word	0x08010749
 8010714:	08010741 	.word	0x08010741
 8010718:	2301      	movs	r3, #1
 801071a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801071e:	e1c0      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010720:	2304      	movs	r3, #4
 8010722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010726:	e1bc      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010728:	2308      	movs	r3, #8
 801072a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801072e:	e1b8      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010730:	2310      	movs	r3, #16
 8010732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010736:	e1b4      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010738:	2320      	movs	r3, #32
 801073a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801073e:	e1b0      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010740:	2340      	movs	r3, #64	@ 0x40
 8010742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010746:	e1ac      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010748:	2380      	movs	r3, #128	@ 0x80
 801074a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801074e:	e1a8      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4a75      	ldr	r2, [pc, #468]	@ (801092c <UART_SetConfig+0x638>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d130      	bne.n	80107bc <UART_SetConfig+0x4c8>
 801075a:	4b73      	ldr	r3, [pc, #460]	@ (8010928 <UART_SetConfig+0x634>)
 801075c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801075e:	f003 0307 	and.w	r3, r3, #7
 8010762:	2b05      	cmp	r3, #5
 8010764:	d826      	bhi.n	80107b4 <UART_SetConfig+0x4c0>
 8010766:	a201      	add	r2, pc, #4	@ (adr r2, 801076c <UART_SetConfig+0x478>)
 8010768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801076c:	08010785 	.word	0x08010785
 8010770:	0801078d 	.word	0x0801078d
 8010774:	08010795 	.word	0x08010795
 8010778:	0801079d 	.word	0x0801079d
 801077c:	080107a5 	.word	0x080107a5
 8010780:	080107ad 	.word	0x080107ad
 8010784:	2300      	movs	r3, #0
 8010786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801078a:	e18a      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801078c:	2304      	movs	r3, #4
 801078e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010792:	e186      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010794:	2308      	movs	r3, #8
 8010796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801079a:	e182      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801079c:	2310      	movs	r3, #16
 801079e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107a2:	e17e      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80107a4:	2320      	movs	r3, #32
 80107a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107aa:	e17a      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80107ac:	2340      	movs	r3, #64	@ 0x40
 80107ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107b2:	e176      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80107b4:	2380      	movs	r3, #128	@ 0x80
 80107b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ba:	e172      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4a5b      	ldr	r2, [pc, #364]	@ (8010930 <UART_SetConfig+0x63c>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d130      	bne.n	8010828 <UART_SetConfig+0x534>
 80107c6:	4b58      	ldr	r3, [pc, #352]	@ (8010928 <UART_SetConfig+0x634>)
 80107c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107ca:	f003 0307 	and.w	r3, r3, #7
 80107ce:	2b05      	cmp	r3, #5
 80107d0:	d826      	bhi.n	8010820 <UART_SetConfig+0x52c>
 80107d2:	a201      	add	r2, pc, #4	@ (adr r2, 80107d8 <UART_SetConfig+0x4e4>)
 80107d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d8:	080107f1 	.word	0x080107f1
 80107dc:	080107f9 	.word	0x080107f9
 80107e0:	08010801 	.word	0x08010801
 80107e4:	08010809 	.word	0x08010809
 80107e8:	08010811 	.word	0x08010811
 80107ec:	08010819 	.word	0x08010819
 80107f0:	2300      	movs	r3, #0
 80107f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107f6:	e154      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80107f8:	2304      	movs	r3, #4
 80107fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107fe:	e150      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010800:	2308      	movs	r3, #8
 8010802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010806:	e14c      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010808:	2310      	movs	r3, #16
 801080a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801080e:	e148      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010810:	2320      	movs	r3, #32
 8010812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010816:	e144      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010818:	2340      	movs	r3, #64	@ 0x40
 801081a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801081e:	e140      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010820:	2380      	movs	r3, #128	@ 0x80
 8010822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010826:	e13c      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4a41      	ldr	r2, [pc, #260]	@ (8010934 <UART_SetConfig+0x640>)
 801082e:	4293      	cmp	r3, r2
 8010830:	f040 8082 	bne.w	8010938 <UART_SetConfig+0x644>
 8010834:	4b3c      	ldr	r3, [pc, #240]	@ (8010928 <UART_SetConfig+0x634>)
 8010836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010838:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801083c:	2b28      	cmp	r3, #40	@ 0x28
 801083e:	d86d      	bhi.n	801091c <UART_SetConfig+0x628>
 8010840:	a201      	add	r2, pc, #4	@ (adr r2, 8010848 <UART_SetConfig+0x554>)
 8010842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010846:	bf00      	nop
 8010848:	080108ed 	.word	0x080108ed
 801084c:	0801091d 	.word	0x0801091d
 8010850:	0801091d 	.word	0x0801091d
 8010854:	0801091d 	.word	0x0801091d
 8010858:	0801091d 	.word	0x0801091d
 801085c:	0801091d 	.word	0x0801091d
 8010860:	0801091d 	.word	0x0801091d
 8010864:	0801091d 	.word	0x0801091d
 8010868:	080108f5 	.word	0x080108f5
 801086c:	0801091d 	.word	0x0801091d
 8010870:	0801091d 	.word	0x0801091d
 8010874:	0801091d 	.word	0x0801091d
 8010878:	0801091d 	.word	0x0801091d
 801087c:	0801091d 	.word	0x0801091d
 8010880:	0801091d 	.word	0x0801091d
 8010884:	0801091d 	.word	0x0801091d
 8010888:	080108fd 	.word	0x080108fd
 801088c:	0801091d 	.word	0x0801091d
 8010890:	0801091d 	.word	0x0801091d
 8010894:	0801091d 	.word	0x0801091d
 8010898:	0801091d 	.word	0x0801091d
 801089c:	0801091d 	.word	0x0801091d
 80108a0:	0801091d 	.word	0x0801091d
 80108a4:	0801091d 	.word	0x0801091d
 80108a8:	08010905 	.word	0x08010905
 80108ac:	0801091d 	.word	0x0801091d
 80108b0:	0801091d 	.word	0x0801091d
 80108b4:	0801091d 	.word	0x0801091d
 80108b8:	0801091d 	.word	0x0801091d
 80108bc:	0801091d 	.word	0x0801091d
 80108c0:	0801091d 	.word	0x0801091d
 80108c4:	0801091d 	.word	0x0801091d
 80108c8:	0801090d 	.word	0x0801090d
 80108cc:	0801091d 	.word	0x0801091d
 80108d0:	0801091d 	.word	0x0801091d
 80108d4:	0801091d 	.word	0x0801091d
 80108d8:	0801091d 	.word	0x0801091d
 80108dc:	0801091d 	.word	0x0801091d
 80108e0:	0801091d 	.word	0x0801091d
 80108e4:	0801091d 	.word	0x0801091d
 80108e8:	08010915 	.word	0x08010915
 80108ec:	2301      	movs	r3, #1
 80108ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108f2:	e0d6      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80108f4:	2304      	movs	r3, #4
 80108f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108fa:	e0d2      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 80108fc:	2308      	movs	r3, #8
 80108fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010902:	e0ce      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010904:	2310      	movs	r3, #16
 8010906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801090a:	e0ca      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801090c:	2320      	movs	r3, #32
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010912:	e0c6      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010914:	2340      	movs	r3, #64	@ 0x40
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801091a:	e0c2      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 801091c:	2380      	movs	r3, #128	@ 0x80
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010922:	e0be      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010924:	40011400 	.word	0x40011400
 8010928:	58024400 	.word	0x58024400
 801092c:	40007800 	.word	0x40007800
 8010930:	40007c00 	.word	0x40007c00
 8010934:	40011800 	.word	0x40011800
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	4aad      	ldr	r2, [pc, #692]	@ (8010bf4 <UART_SetConfig+0x900>)
 801093e:	4293      	cmp	r3, r2
 8010940:	d176      	bne.n	8010a30 <UART_SetConfig+0x73c>
 8010942:	4bad      	ldr	r3, [pc, #692]	@ (8010bf8 <UART_SetConfig+0x904>)
 8010944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801094a:	2b28      	cmp	r3, #40	@ 0x28
 801094c:	d86c      	bhi.n	8010a28 <UART_SetConfig+0x734>
 801094e:	a201      	add	r2, pc, #4	@ (adr r2, 8010954 <UART_SetConfig+0x660>)
 8010950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010954:	080109f9 	.word	0x080109f9
 8010958:	08010a29 	.word	0x08010a29
 801095c:	08010a29 	.word	0x08010a29
 8010960:	08010a29 	.word	0x08010a29
 8010964:	08010a29 	.word	0x08010a29
 8010968:	08010a29 	.word	0x08010a29
 801096c:	08010a29 	.word	0x08010a29
 8010970:	08010a29 	.word	0x08010a29
 8010974:	08010a01 	.word	0x08010a01
 8010978:	08010a29 	.word	0x08010a29
 801097c:	08010a29 	.word	0x08010a29
 8010980:	08010a29 	.word	0x08010a29
 8010984:	08010a29 	.word	0x08010a29
 8010988:	08010a29 	.word	0x08010a29
 801098c:	08010a29 	.word	0x08010a29
 8010990:	08010a29 	.word	0x08010a29
 8010994:	08010a09 	.word	0x08010a09
 8010998:	08010a29 	.word	0x08010a29
 801099c:	08010a29 	.word	0x08010a29
 80109a0:	08010a29 	.word	0x08010a29
 80109a4:	08010a29 	.word	0x08010a29
 80109a8:	08010a29 	.word	0x08010a29
 80109ac:	08010a29 	.word	0x08010a29
 80109b0:	08010a29 	.word	0x08010a29
 80109b4:	08010a11 	.word	0x08010a11
 80109b8:	08010a29 	.word	0x08010a29
 80109bc:	08010a29 	.word	0x08010a29
 80109c0:	08010a29 	.word	0x08010a29
 80109c4:	08010a29 	.word	0x08010a29
 80109c8:	08010a29 	.word	0x08010a29
 80109cc:	08010a29 	.word	0x08010a29
 80109d0:	08010a29 	.word	0x08010a29
 80109d4:	08010a19 	.word	0x08010a19
 80109d8:	08010a29 	.word	0x08010a29
 80109dc:	08010a29 	.word	0x08010a29
 80109e0:	08010a29 	.word	0x08010a29
 80109e4:	08010a29 	.word	0x08010a29
 80109e8:	08010a29 	.word	0x08010a29
 80109ec:	08010a29 	.word	0x08010a29
 80109f0:	08010a29 	.word	0x08010a29
 80109f4:	08010a21 	.word	0x08010a21
 80109f8:	2301      	movs	r3, #1
 80109fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109fe:	e050      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a00:	2304      	movs	r3, #4
 8010a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a06:	e04c      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a08:	2308      	movs	r3, #8
 8010a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a0e:	e048      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a10:	2310      	movs	r3, #16
 8010a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a16:	e044      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a18:	2320      	movs	r3, #32
 8010a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a1e:	e040      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a20:	2340      	movs	r3, #64	@ 0x40
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a26:	e03c      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a28:	2380      	movs	r3, #128	@ 0x80
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a2e:	e038      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4a71      	ldr	r2, [pc, #452]	@ (8010bfc <UART_SetConfig+0x908>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d130      	bne.n	8010a9c <UART_SetConfig+0x7a8>
 8010a3a:	4b6f      	ldr	r3, [pc, #444]	@ (8010bf8 <UART_SetConfig+0x904>)
 8010a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a3e:	f003 0307 	and.w	r3, r3, #7
 8010a42:	2b05      	cmp	r3, #5
 8010a44:	d826      	bhi.n	8010a94 <UART_SetConfig+0x7a0>
 8010a46:	a201      	add	r2, pc, #4	@ (adr r2, 8010a4c <UART_SetConfig+0x758>)
 8010a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a4c:	08010a65 	.word	0x08010a65
 8010a50:	08010a6d 	.word	0x08010a6d
 8010a54:	08010a75 	.word	0x08010a75
 8010a58:	08010a7d 	.word	0x08010a7d
 8010a5c:	08010a85 	.word	0x08010a85
 8010a60:	08010a8d 	.word	0x08010a8d
 8010a64:	2302      	movs	r3, #2
 8010a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a6a:	e01a      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a6c:	2304      	movs	r3, #4
 8010a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a72:	e016      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a74:	2308      	movs	r3, #8
 8010a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a7a:	e012      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a7c:	2310      	movs	r3, #16
 8010a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a82:	e00e      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a84:	2320      	movs	r3, #32
 8010a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a8a:	e00a      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a8c:	2340      	movs	r3, #64	@ 0x40
 8010a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a92:	e006      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a94:	2380      	movs	r3, #128	@ 0x80
 8010a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a9a:	e002      	b.n	8010aa2 <UART_SetConfig+0x7ae>
 8010a9c:	2380      	movs	r3, #128	@ 0x80
 8010a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4a55      	ldr	r2, [pc, #340]	@ (8010bfc <UART_SetConfig+0x908>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	f040 80f8 	bne.w	8010c9e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010aae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010ab2:	2b20      	cmp	r3, #32
 8010ab4:	dc46      	bgt.n	8010b44 <UART_SetConfig+0x850>
 8010ab6:	2b02      	cmp	r3, #2
 8010ab8:	db75      	blt.n	8010ba6 <UART_SetConfig+0x8b2>
 8010aba:	3b02      	subs	r3, #2
 8010abc:	2b1e      	cmp	r3, #30
 8010abe:	d872      	bhi.n	8010ba6 <UART_SetConfig+0x8b2>
 8010ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8010ac8 <UART_SetConfig+0x7d4>)
 8010ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac6:	bf00      	nop
 8010ac8:	08010b4b 	.word	0x08010b4b
 8010acc:	08010ba7 	.word	0x08010ba7
 8010ad0:	08010b53 	.word	0x08010b53
 8010ad4:	08010ba7 	.word	0x08010ba7
 8010ad8:	08010ba7 	.word	0x08010ba7
 8010adc:	08010ba7 	.word	0x08010ba7
 8010ae0:	08010b63 	.word	0x08010b63
 8010ae4:	08010ba7 	.word	0x08010ba7
 8010ae8:	08010ba7 	.word	0x08010ba7
 8010aec:	08010ba7 	.word	0x08010ba7
 8010af0:	08010ba7 	.word	0x08010ba7
 8010af4:	08010ba7 	.word	0x08010ba7
 8010af8:	08010ba7 	.word	0x08010ba7
 8010afc:	08010ba7 	.word	0x08010ba7
 8010b00:	08010b73 	.word	0x08010b73
 8010b04:	08010ba7 	.word	0x08010ba7
 8010b08:	08010ba7 	.word	0x08010ba7
 8010b0c:	08010ba7 	.word	0x08010ba7
 8010b10:	08010ba7 	.word	0x08010ba7
 8010b14:	08010ba7 	.word	0x08010ba7
 8010b18:	08010ba7 	.word	0x08010ba7
 8010b1c:	08010ba7 	.word	0x08010ba7
 8010b20:	08010ba7 	.word	0x08010ba7
 8010b24:	08010ba7 	.word	0x08010ba7
 8010b28:	08010ba7 	.word	0x08010ba7
 8010b2c:	08010ba7 	.word	0x08010ba7
 8010b30:	08010ba7 	.word	0x08010ba7
 8010b34:	08010ba7 	.word	0x08010ba7
 8010b38:	08010ba7 	.word	0x08010ba7
 8010b3c:	08010ba7 	.word	0x08010ba7
 8010b40:	08010b99 	.word	0x08010b99
 8010b44:	2b40      	cmp	r3, #64	@ 0x40
 8010b46:	d02a      	beq.n	8010b9e <UART_SetConfig+0x8aa>
 8010b48:	e02d      	b.n	8010ba6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010b4a:	f7fb fd79 	bl	800c640 <HAL_RCCEx_GetD3PCLK1Freq>
 8010b4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010b50:	e02f      	b.n	8010bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7fb fd88 	bl	800c66c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b60:	e027      	b.n	8010bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b62:	f107 0318 	add.w	r3, r7, #24
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fb fed4 	bl	800c914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b70:	e01f      	b.n	8010bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b72:	4b21      	ldr	r3, [pc, #132]	@ (8010bf8 <UART_SetConfig+0x904>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	f003 0320 	and.w	r3, r3, #32
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d009      	beq.n	8010b92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8010bf8 <UART_SetConfig+0x904>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	08db      	lsrs	r3, r3, #3
 8010b84:	f003 0303 	and.w	r3, r3, #3
 8010b88:	4a1d      	ldr	r2, [pc, #116]	@ (8010c00 <UART_SetConfig+0x90c>)
 8010b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8010b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010b90:	e00f      	b.n	8010bb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010b92:	4b1b      	ldr	r3, [pc, #108]	@ (8010c00 <UART_SetConfig+0x90c>)
 8010b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b96:	e00c      	b.n	8010bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010b98:	4b1a      	ldr	r3, [pc, #104]	@ (8010c04 <UART_SetConfig+0x910>)
 8010b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b9c:	e009      	b.n	8010bb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ba4:	e005      	b.n	8010bb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010baa:	2301      	movs	r3, #1
 8010bac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010bb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	f000 81ee 	beq.w	8010f96 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bbe:	4a12      	ldr	r2, [pc, #72]	@ (8010c08 <UART_SetConfig+0x914>)
 8010bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8010bcc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	685a      	ldr	r2, [r3, #4]
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	005b      	lsls	r3, r3, #1
 8010bd6:	4413      	add	r3, r2
 8010bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d305      	bcc.n	8010bea <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d910      	bls.n	8010c0c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010bea:	2301      	movs	r3, #1
 8010bec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010bf0:	e1d1      	b.n	8010f96 <UART_SetConfig+0xca2>
 8010bf2:	bf00      	nop
 8010bf4:	40011c00 	.word	0x40011c00
 8010bf8:	58024400 	.word	0x58024400
 8010bfc:	58000c00 	.word	0x58000c00
 8010c00:	03d09000 	.word	0x03d09000
 8010c04:	003d0900 	.word	0x003d0900
 8010c08:	08019a0c 	.word	0x08019a0c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c0e:	2200      	movs	r2, #0
 8010c10:	60bb      	str	r3, [r7, #8]
 8010c12:	60fa      	str	r2, [r7, #12]
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c18:	4ac0      	ldr	r2, [pc, #768]	@ (8010f1c <UART_SetConfig+0xc28>)
 8010c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	2200      	movs	r2, #0
 8010c22:	603b      	str	r3, [r7, #0]
 8010c24:	607a      	str	r2, [r7, #4]
 8010c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010c2e:	f7ef fdcb 	bl	80007c8 <__aeabi_uldivmod>
 8010c32:	4602      	mov	r2, r0
 8010c34:	460b      	mov	r3, r1
 8010c36:	4610      	mov	r0, r2
 8010c38:	4619      	mov	r1, r3
 8010c3a:	f04f 0200 	mov.w	r2, #0
 8010c3e:	f04f 0300 	mov.w	r3, #0
 8010c42:	020b      	lsls	r3, r1, #8
 8010c44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010c48:	0202      	lsls	r2, r0, #8
 8010c4a:	6979      	ldr	r1, [r7, #20]
 8010c4c:	6849      	ldr	r1, [r1, #4]
 8010c4e:	0849      	lsrs	r1, r1, #1
 8010c50:	2000      	movs	r0, #0
 8010c52:	460c      	mov	r4, r1
 8010c54:	4605      	mov	r5, r0
 8010c56:	eb12 0804 	adds.w	r8, r2, r4
 8010c5a:	eb43 0905 	adc.w	r9, r3, r5
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	469a      	mov	sl, r3
 8010c66:	4693      	mov	fp, r2
 8010c68:	4652      	mov	r2, sl
 8010c6a:	465b      	mov	r3, fp
 8010c6c:	4640      	mov	r0, r8
 8010c6e:	4649      	mov	r1, r9
 8010c70:	f7ef fdaa 	bl	80007c8 <__aeabi_uldivmod>
 8010c74:	4602      	mov	r2, r0
 8010c76:	460b      	mov	r3, r1
 8010c78:	4613      	mov	r3, r2
 8010c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010c82:	d308      	bcc.n	8010c96 <UART_SetConfig+0x9a2>
 8010c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010c8a:	d204      	bcs.n	8010c96 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c92:	60da      	str	r2, [r3, #12]
 8010c94:	e17f      	b.n	8010f96 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010c96:	2301      	movs	r3, #1
 8010c98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010c9c:	e17b      	b.n	8010f96 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	69db      	ldr	r3, [r3, #28]
 8010ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010ca6:	f040 80bd 	bne.w	8010e24 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010caa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010cae:	2b20      	cmp	r3, #32
 8010cb0:	dc48      	bgt.n	8010d44 <UART_SetConfig+0xa50>
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	db7b      	blt.n	8010dae <UART_SetConfig+0xaba>
 8010cb6:	2b20      	cmp	r3, #32
 8010cb8:	d879      	bhi.n	8010dae <UART_SetConfig+0xaba>
 8010cba:	a201      	add	r2, pc, #4	@ (adr r2, 8010cc0 <UART_SetConfig+0x9cc>)
 8010cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc0:	08010d4b 	.word	0x08010d4b
 8010cc4:	08010d53 	.word	0x08010d53
 8010cc8:	08010daf 	.word	0x08010daf
 8010ccc:	08010daf 	.word	0x08010daf
 8010cd0:	08010d5b 	.word	0x08010d5b
 8010cd4:	08010daf 	.word	0x08010daf
 8010cd8:	08010daf 	.word	0x08010daf
 8010cdc:	08010daf 	.word	0x08010daf
 8010ce0:	08010d6b 	.word	0x08010d6b
 8010ce4:	08010daf 	.word	0x08010daf
 8010ce8:	08010daf 	.word	0x08010daf
 8010cec:	08010daf 	.word	0x08010daf
 8010cf0:	08010daf 	.word	0x08010daf
 8010cf4:	08010daf 	.word	0x08010daf
 8010cf8:	08010daf 	.word	0x08010daf
 8010cfc:	08010daf 	.word	0x08010daf
 8010d00:	08010d7b 	.word	0x08010d7b
 8010d04:	08010daf 	.word	0x08010daf
 8010d08:	08010daf 	.word	0x08010daf
 8010d0c:	08010daf 	.word	0x08010daf
 8010d10:	08010daf 	.word	0x08010daf
 8010d14:	08010daf 	.word	0x08010daf
 8010d18:	08010daf 	.word	0x08010daf
 8010d1c:	08010daf 	.word	0x08010daf
 8010d20:	08010daf 	.word	0x08010daf
 8010d24:	08010daf 	.word	0x08010daf
 8010d28:	08010daf 	.word	0x08010daf
 8010d2c:	08010daf 	.word	0x08010daf
 8010d30:	08010daf 	.word	0x08010daf
 8010d34:	08010daf 	.word	0x08010daf
 8010d38:	08010daf 	.word	0x08010daf
 8010d3c:	08010daf 	.word	0x08010daf
 8010d40:	08010da1 	.word	0x08010da1
 8010d44:	2b40      	cmp	r3, #64	@ 0x40
 8010d46:	d02e      	beq.n	8010da6 <UART_SetConfig+0xab2>
 8010d48:	e031      	b.n	8010dae <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d4a:	f7fa fa4d 	bl	800b1e8 <HAL_RCC_GetPCLK1Freq>
 8010d4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010d50:	e033      	b.n	8010dba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d52:	f7fa fa5f 	bl	800b214 <HAL_RCC_GetPCLK2Freq>
 8010d56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010d58:	e02f      	b.n	8010dba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fb fc84 	bl	800c66c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d68:	e027      	b.n	8010dba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d6a:	f107 0318 	add.w	r3, r7, #24
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fb fdd0 	bl	800c914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d78:	e01f      	b.n	8010dba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d7a:	4b69      	ldr	r3, [pc, #420]	@ (8010f20 <UART_SetConfig+0xc2c>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f003 0320 	and.w	r3, r3, #32
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d009      	beq.n	8010d9a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d86:	4b66      	ldr	r3, [pc, #408]	@ (8010f20 <UART_SetConfig+0xc2c>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	08db      	lsrs	r3, r3, #3
 8010d8c:	f003 0303 	and.w	r3, r3, #3
 8010d90:	4a64      	ldr	r2, [pc, #400]	@ (8010f24 <UART_SetConfig+0xc30>)
 8010d92:	fa22 f303 	lsr.w	r3, r2, r3
 8010d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d98:	e00f      	b.n	8010dba <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010d9a:	4b62      	ldr	r3, [pc, #392]	@ (8010f24 <UART_SetConfig+0xc30>)
 8010d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d9e:	e00c      	b.n	8010dba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010da0:	4b61      	ldr	r3, [pc, #388]	@ (8010f28 <UART_SetConfig+0xc34>)
 8010da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010da4:	e009      	b.n	8010dba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010dac:	e005      	b.n	8010dba <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010dae:	2300      	movs	r3, #0
 8010db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010db2:	2301      	movs	r3, #1
 8010db4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010db8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	f000 80ea 	beq.w	8010f96 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dc6:	4a55      	ldr	r2, [pc, #340]	@ (8010f1c <UART_SetConfig+0xc28>)
 8010dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dcc:	461a      	mov	r2, r3
 8010dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010dd4:	005a      	lsls	r2, r3, #1
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	085b      	lsrs	r3, r3, #1
 8010ddc:	441a      	add	r2, r3
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010de6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dea:	2b0f      	cmp	r3, #15
 8010dec:	d916      	bls.n	8010e1c <UART_SetConfig+0xb28>
 8010dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010df4:	d212      	bcs.n	8010e1c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	f023 030f 	bic.w	r3, r3, #15
 8010dfe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e02:	085b      	lsrs	r3, r3, #1
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	f003 0307 	and.w	r3, r3, #7
 8010e0a:	b29a      	uxth	r2, r3
 8010e0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010e18:	60da      	str	r2, [r3, #12]
 8010e1a:	e0bc      	b.n	8010f96 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010e22:	e0b8      	b.n	8010f96 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010e28:	2b20      	cmp	r3, #32
 8010e2a:	dc4b      	bgt.n	8010ec4 <UART_SetConfig+0xbd0>
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	f2c0 8087 	blt.w	8010f40 <UART_SetConfig+0xc4c>
 8010e32:	2b20      	cmp	r3, #32
 8010e34:	f200 8084 	bhi.w	8010f40 <UART_SetConfig+0xc4c>
 8010e38:	a201      	add	r2, pc, #4	@ (adr r2, 8010e40 <UART_SetConfig+0xb4c>)
 8010e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e3e:	bf00      	nop
 8010e40:	08010ecb 	.word	0x08010ecb
 8010e44:	08010ed3 	.word	0x08010ed3
 8010e48:	08010f41 	.word	0x08010f41
 8010e4c:	08010f41 	.word	0x08010f41
 8010e50:	08010edb 	.word	0x08010edb
 8010e54:	08010f41 	.word	0x08010f41
 8010e58:	08010f41 	.word	0x08010f41
 8010e5c:	08010f41 	.word	0x08010f41
 8010e60:	08010eeb 	.word	0x08010eeb
 8010e64:	08010f41 	.word	0x08010f41
 8010e68:	08010f41 	.word	0x08010f41
 8010e6c:	08010f41 	.word	0x08010f41
 8010e70:	08010f41 	.word	0x08010f41
 8010e74:	08010f41 	.word	0x08010f41
 8010e78:	08010f41 	.word	0x08010f41
 8010e7c:	08010f41 	.word	0x08010f41
 8010e80:	08010efb 	.word	0x08010efb
 8010e84:	08010f41 	.word	0x08010f41
 8010e88:	08010f41 	.word	0x08010f41
 8010e8c:	08010f41 	.word	0x08010f41
 8010e90:	08010f41 	.word	0x08010f41
 8010e94:	08010f41 	.word	0x08010f41
 8010e98:	08010f41 	.word	0x08010f41
 8010e9c:	08010f41 	.word	0x08010f41
 8010ea0:	08010f41 	.word	0x08010f41
 8010ea4:	08010f41 	.word	0x08010f41
 8010ea8:	08010f41 	.word	0x08010f41
 8010eac:	08010f41 	.word	0x08010f41
 8010eb0:	08010f41 	.word	0x08010f41
 8010eb4:	08010f41 	.word	0x08010f41
 8010eb8:	08010f41 	.word	0x08010f41
 8010ebc:	08010f41 	.word	0x08010f41
 8010ec0:	08010f33 	.word	0x08010f33
 8010ec4:	2b40      	cmp	r3, #64	@ 0x40
 8010ec6:	d037      	beq.n	8010f38 <UART_SetConfig+0xc44>
 8010ec8:	e03a      	b.n	8010f40 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010eca:	f7fa f98d 	bl	800b1e8 <HAL_RCC_GetPCLK1Freq>
 8010ece:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010ed0:	e03c      	b.n	8010f4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ed2:	f7fa f99f 	bl	800b214 <HAL_RCC_GetPCLK2Freq>
 8010ed6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010ed8:	e038      	b.n	8010f4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7fb fbc4 	bl	800c66c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ee8:	e030      	b.n	8010f4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010eea:	f107 0318 	add.w	r3, r7, #24
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fb fd10 	bl	800c914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ef8:	e028      	b.n	8010f4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010efa:	4b09      	ldr	r3, [pc, #36]	@ (8010f20 <UART_SetConfig+0xc2c>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f003 0320 	and.w	r3, r3, #32
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d012      	beq.n	8010f2c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f06:	4b06      	ldr	r3, [pc, #24]	@ (8010f20 <UART_SetConfig+0xc2c>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	08db      	lsrs	r3, r3, #3
 8010f0c:	f003 0303 	and.w	r3, r3, #3
 8010f10:	4a04      	ldr	r2, [pc, #16]	@ (8010f24 <UART_SetConfig+0xc30>)
 8010f12:	fa22 f303 	lsr.w	r3, r2, r3
 8010f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f18:	e018      	b.n	8010f4c <UART_SetConfig+0xc58>
 8010f1a:	bf00      	nop
 8010f1c:	08019a0c 	.word	0x08019a0c
 8010f20:	58024400 	.word	0x58024400
 8010f24:	03d09000 	.word	0x03d09000
 8010f28:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010f2c:	4b24      	ldr	r3, [pc, #144]	@ (8010fc0 <UART_SetConfig+0xccc>)
 8010f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f30:	e00c      	b.n	8010f4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f32:	4b24      	ldr	r3, [pc, #144]	@ (8010fc4 <UART_SetConfig+0xcd0>)
 8010f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f36:	e009      	b.n	8010f4c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f3e:	e005      	b.n	8010f4c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010f40:	2300      	movs	r3, #0
 8010f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010f44:	2301      	movs	r3, #1
 8010f46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010f4a:	bf00      	nop
    }

    if (pclk != 0U)
 8010f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d021      	beq.n	8010f96 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f56:	4a1c      	ldr	r2, [pc, #112]	@ (8010fc8 <UART_SetConfig+0xcd4>)
 8010f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f60:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	685b      	ldr	r3, [r3, #4]
 8010f68:	085b      	lsrs	r3, r3, #1
 8010f6a:	441a      	add	r2, r3
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	685b      	ldr	r3, [r3, #4]
 8010f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f74:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f78:	2b0f      	cmp	r3, #15
 8010f7a:	d909      	bls.n	8010f90 <UART_SetConfig+0xc9c>
 8010f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f82:	d205      	bcs.n	8010f90 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f86:	b29a      	uxth	r2, r3
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	60da      	str	r2, [r3, #12]
 8010f8e:	e002      	b.n	8010f96 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010f90:	2301      	movs	r3, #1
 8010f92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	2201      	movs	r2, #1
 8010f9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010fb2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3748      	adds	r7, #72	@ 0x48
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010fc0:	03d09000 	.word	0x03d09000
 8010fc4:	003d0900 	.word	0x003d0900
 8010fc8:	08019a0c 	.word	0x08019a0c

08010fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b083      	sub	sp, #12
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fd8:	f003 0308 	and.w	r3, r3, #8
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00a      	beq.n	8010ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	430a      	orrs	r2, r1
 8010ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ffa:	f003 0301 	and.w	r3, r3, #1
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d00a      	beq.n	8011018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	430a      	orrs	r2, r1
 8011016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801101c:	f003 0302 	and.w	r3, r3, #2
 8011020:	2b00      	cmp	r3, #0
 8011022:	d00a      	beq.n	801103a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	430a      	orrs	r2, r1
 8011038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801103e:	f003 0304 	and.w	r3, r3, #4
 8011042:	2b00      	cmp	r3, #0
 8011044:	d00a      	beq.n	801105c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	685b      	ldr	r3, [r3, #4]
 801104c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	430a      	orrs	r2, r1
 801105a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011060:	f003 0310 	and.w	r3, r3, #16
 8011064:	2b00      	cmp	r3, #0
 8011066:	d00a      	beq.n	801107e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	689b      	ldr	r3, [r3, #8]
 801106e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	430a      	orrs	r2, r1
 801107c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011082:	f003 0320 	and.w	r3, r3, #32
 8011086:	2b00      	cmp	r3, #0
 8011088:	d00a      	beq.n	80110a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	689b      	ldr	r3, [r3, #8]
 8011090:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	430a      	orrs	r2, r1
 801109e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d01a      	beq.n	80110e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	430a      	orrs	r2, r1
 80110c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80110ca:	d10a      	bne.n	80110e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	430a      	orrs	r2, r1
 80110e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d00a      	beq.n	8011104 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	430a      	orrs	r2, r1
 8011102:	605a      	str	r2, [r3, #4]
  }
}
 8011104:	bf00      	nop
 8011106:	370c      	adds	r7, #12
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr

08011110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b098      	sub	sp, #96	@ 0x60
 8011114:	af02      	add	r7, sp, #8
 8011116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2200      	movs	r2, #0
 801111c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011120:	f7f5 f9c2 	bl	80064a8 <HAL_GetTick>
 8011124:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f003 0308 	and.w	r3, r3, #8
 8011130:	2b08      	cmp	r3, #8
 8011132:	d12f      	bne.n	8011194 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011134:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011138:	9300      	str	r3, [sp, #0]
 801113a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801113c:	2200      	movs	r2, #0
 801113e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f000 f88e 	bl	8011264 <UART_WaitOnFlagUntilTimeout>
 8011148:	4603      	mov	r3, r0
 801114a:	2b00      	cmp	r3, #0
 801114c:	d022      	beq.n	8011194 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011156:	e853 3f00 	ldrex	r3, [r3]
 801115a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801115c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801115e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011162:	653b      	str	r3, [r7, #80]	@ 0x50
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	461a      	mov	r2, r3
 801116a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801116c:	647b      	str	r3, [r7, #68]	@ 0x44
 801116e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011170:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011174:	e841 2300 	strex	r3, r2, [r1]
 8011178:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801117a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801117c:	2b00      	cmp	r3, #0
 801117e:	d1e6      	bne.n	801114e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2220      	movs	r2, #32
 8011184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2200      	movs	r2, #0
 801118c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011190:	2303      	movs	r3, #3
 8011192:	e063      	b.n	801125c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f003 0304 	and.w	r3, r3, #4
 801119e:	2b04      	cmp	r3, #4
 80111a0:	d149      	bne.n	8011236 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80111a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80111a6:	9300      	str	r3, [sp, #0]
 80111a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111aa:	2200      	movs	r2, #0
 80111ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f000 f857 	bl	8011264 <UART_WaitOnFlagUntilTimeout>
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d03c      	beq.n	8011236 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c4:	e853 3f00 	ldrex	r3, [r3]
 80111c8:	623b      	str	r3, [r7, #32]
   return(result);
 80111ca:	6a3b      	ldr	r3, [r7, #32]
 80111cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80111d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	461a      	mov	r2, r3
 80111d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111da:	633b      	str	r3, [r7, #48]	@ 0x30
 80111dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80111e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111e2:	e841 2300 	strex	r3, r2, [r1]
 80111e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80111e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d1e6      	bne.n	80111bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	3308      	adds	r3, #8
 80111f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	e853 3f00 	ldrex	r3, [r3]
 80111fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	f023 0301 	bic.w	r3, r3, #1
 8011204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	3308      	adds	r3, #8
 801120c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801120e:	61fa      	str	r2, [r7, #28]
 8011210:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011212:	69b9      	ldr	r1, [r7, #24]
 8011214:	69fa      	ldr	r2, [r7, #28]
 8011216:	e841 2300 	strex	r3, r2, [r1]
 801121a:	617b      	str	r3, [r7, #20]
   return(result);
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d1e5      	bne.n	80111ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2220      	movs	r2, #32
 8011226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2200      	movs	r2, #0
 801122e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011232:	2303      	movs	r3, #3
 8011234:	e012      	b.n	801125c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2220      	movs	r2, #32
 801123a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2220      	movs	r2, #32
 8011242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2200      	movs	r2, #0
 801124a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2200      	movs	r2, #0
 8011250:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2200      	movs	r2, #0
 8011256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801125a:	2300      	movs	r3, #0
}
 801125c:	4618      	mov	r0, r3
 801125e:	3758      	adds	r7, #88	@ 0x58
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	603b      	str	r3, [r7, #0]
 8011270:	4613      	mov	r3, r2
 8011272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011274:	e04f      	b.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011276:	69bb      	ldr	r3, [r7, #24]
 8011278:	f1b3 3fff 	cmp.w	r3, #4294967295
 801127c:	d04b      	beq.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801127e:	f7f5 f913 	bl	80064a8 <HAL_GetTick>
 8011282:	4602      	mov	r2, r0
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	1ad3      	subs	r3, r2, r3
 8011288:	69ba      	ldr	r2, [r7, #24]
 801128a:	429a      	cmp	r2, r3
 801128c:	d302      	bcc.n	8011294 <UART_WaitOnFlagUntilTimeout+0x30>
 801128e:	69bb      	ldr	r3, [r7, #24]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d101      	bne.n	8011298 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011294:	2303      	movs	r3, #3
 8011296:	e04e      	b.n	8011336 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	f003 0304 	and.w	r3, r3, #4
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d037      	beq.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	2b80      	cmp	r3, #128	@ 0x80
 80112aa:	d034      	beq.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	2b40      	cmp	r3, #64	@ 0x40
 80112b0:	d031      	beq.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	69db      	ldr	r3, [r3, #28]
 80112b8:	f003 0308 	and.w	r3, r3, #8
 80112bc:	2b08      	cmp	r3, #8
 80112be:	d110      	bne.n	80112e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	2208      	movs	r2, #8
 80112c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112c8:	68f8      	ldr	r0, [r7, #12]
 80112ca:	f000 fa43 	bl	8011754 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2208      	movs	r2, #8
 80112d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2200      	movs	r2, #0
 80112da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80112de:	2301      	movs	r3, #1
 80112e0:	e029      	b.n	8011336 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	69db      	ldr	r3, [r3, #28]
 80112e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80112ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80112f0:	d111      	bne.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80112fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112fc:	68f8      	ldr	r0, [r7, #12]
 80112fe:	f000 fa29 	bl	8011754 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2220      	movs	r2, #32
 8011306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2200      	movs	r2, #0
 801130e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011312:	2303      	movs	r3, #3
 8011314:	e00f      	b.n	8011336 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	69da      	ldr	r2, [r3, #28]
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	4013      	ands	r3, r2
 8011320:	68ba      	ldr	r2, [r7, #8]
 8011322:	429a      	cmp	r2, r3
 8011324:	bf0c      	ite	eq
 8011326:	2301      	moveq	r3, #1
 8011328:	2300      	movne	r3, #0
 801132a:	b2db      	uxtb	r3, r3
 801132c:	461a      	mov	r2, r3
 801132e:	79fb      	ldrb	r3, [r7, #7]
 8011330:	429a      	cmp	r2, r3
 8011332:	d0a0      	beq.n	8011276 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011334:	2300      	movs	r3, #0
}
 8011336:	4618      	mov	r0, r3
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
	...

08011340 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011340:	b480      	push	{r7}
 8011342:	b0a3      	sub	sp, #140	@ 0x8c
 8011344:	af00      	add	r7, sp, #0
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	4613      	mov	r3, r2
 801134c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	88fa      	ldrh	r2, [r7, #6]
 8011358:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	88fa      	ldrh	r2, [r7, #6]
 8011360:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2200      	movs	r2, #0
 8011368:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	689b      	ldr	r3, [r3, #8]
 801136e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011372:	d10e      	bne.n	8011392 <UART_Start_Receive_IT+0x52>
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	691b      	ldr	r3, [r3, #16]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d105      	bne.n	8011388 <UART_Start_Receive_IT+0x48>
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8011382:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011386:	e02d      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	22ff      	movs	r2, #255	@ 0xff
 801138c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011390:	e028      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	689b      	ldr	r3, [r3, #8]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d10d      	bne.n	80113b6 <UART_Start_Receive_IT+0x76>
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	691b      	ldr	r3, [r3, #16]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d104      	bne.n	80113ac <UART_Start_Receive_IT+0x6c>
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	22ff      	movs	r2, #255	@ 0xff
 80113a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80113aa:	e01b      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	227f      	movs	r2, #127	@ 0x7f
 80113b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80113b4:	e016      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80113be:	d10d      	bne.n	80113dc <UART_Start_Receive_IT+0x9c>
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	691b      	ldr	r3, [r3, #16]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d104      	bne.n	80113d2 <UART_Start_Receive_IT+0x92>
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	227f      	movs	r2, #127	@ 0x7f
 80113cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80113d0:	e008      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	223f      	movs	r2, #63	@ 0x3f
 80113d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80113da:	e003      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2200      	movs	r2, #0
 80113e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	2200      	movs	r2, #0
 80113e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2222      	movs	r2, #34	@ 0x22
 80113f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	3308      	adds	r3, #8
 80113fa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80113fe:	e853 3f00 	ldrex	r3, [r3]
 8011402:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8011404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011406:	f043 0301 	orr.w	r3, r3, #1
 801140a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	3308      	adds	r3, #8
 8011414:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011418:	673a      	str	r2, [r7, #112]	@ 0x70
 801141a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801141c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801141e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011420:	e841 2300 	strex	r3, r2, [r1]
 8011424:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8011426:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011428:	2b00      	cmp	r3, #0
 801142a:	d1e3      	bne.n	80113f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011434:	d14f      	bne.n	80114d6 <UART_Start_Receive_IT+0x196>
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801143c:	88fa      	ldrh	r2, [r7, #6]
 801143e:	429a      	cmp	r2, r3
 8011440:	d349      	bcc.n	80114d6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801144a:	d107      	bne.n	801145c <UART_Start_Receive_IT+0x11c>
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	691b      	ldr	r3, [r3, #16]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d103      	bne.n	801145c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	4a47      	ldr	r2, [pc, #284]	@ (8011574 <UART_Start_Receive_IT+0x234>)
 8011458:	675a      	str	r2, [r3, #116]	@ 0x74
 801145a:	e002      	b.n	8011462 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	4a46      	ldr	r2, [pc, #280]	@ (8011578 <UART_Start_Receive_IT+0x238>)
 8011460:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	691b      	ldr	r3, [r3, #16]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d01a      	beq.n	80114a0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011472:	e853 3f00 	ldrex	r3, [r3]
 8011476:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801147a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801147e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	461a      	mov	r2, r3
 8011488:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801148c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801148e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011490:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011492:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011494:	e841 2300 	strex	r3, r2, [r1]
 8011498:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801149a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801149c:	2b00      	cmp	r3, #0
 801149e:	d1e4      	bne.n	801146a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	3308      	adds	r3, #8
 80114a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114aa:	e853 3f00 	ldrex	r3, [r3]
 80114ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80114b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80114b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	3308      	adds	r3, #8
 80114be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80114c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80114c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80114c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80114c8:	e841 2300 	strex	r3, r2, [r1]
 80114cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80114ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d1e5      	bne.n	80114a0 <UART_Start_Receive_IT+0x160>
 80114d4:	e046      	b.n	8011564 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	689b      	ldr	r3, [r3, #8]
 80114da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80114de:	d107      	bne.n	80114f0 <UART_Start_Receive_IT+0x1b0>
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	691b      	ldr	r3, [r3, #16]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d103      	bne.n	80114f0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	4a24      	ldr	r2, [pc, #144]	@ (801157c <UART_Start_Receive_IT+0x23c>)
 80114ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80114ee:	e002      	b.n	80114f6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	4a23      	ldr	r2, [pc, #140]	@ (8011580 <UART_Start_Receive_IT+0x240>)
 80114f4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	691b      	ldr	r3, [r3, #16]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d019      	beq.n	8011532 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011506:	e853 3f00 	ldrex	r3, [r3]
 801150a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801150e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8011512:	677b      	str	r3, [r7, #116]	@ 0x74
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	461a      	mov	r2, r3
 801151a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801151c:	637b      	str	r3, [r7, #52]	@ 0x34
 801151e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011520:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011522:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011524:	e841 2300 	strex	r3, r2, [r1]
 8011528:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801152a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152c:	2b00      	cmp	r3, #0
 801152e:	d1e6      	bne.n	80114fe <UART_Start_Receive_IT+0x1be>
 8011530:	e018      	b.n	8011564 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	e853 3f00 	ldrex	r3, [r3]
 801153e:	613b      	str	r3, [r7, #16]
   return(result);
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	f043 0320 	orr.w	r3, r3, #32
 8011546:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	461a      	mov	r2, r3
 801154e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011550:	623b      	str	r3, [r7, #32]
 8011552:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011554:	69f9      	ldr	r1, [r7, #28]
 8011556:	6a3a      	ldr	r2, [r7, #32]
 8011558:	e841 2300 	strex	r3, r2, [r1]
 801155c:	61bb      	str	r3, [r7, #24]
   return(result);
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d1e6      	bne.n	8011532 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011564:	2300      	movs	r3, #0
}
 8011566:	4618      	mov	r0, r3
 8011568:	378c      	adds	r7, #140	@ 0x8c
 801156a:	46bd      	mov	sp, r7
 801156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011570:	4770      	bx	lr
 8011572:	bf00      	nop
 8011574:	080125a9 	.word	0x080125a9
 8011578:	08012249 	.word	0x08012249
 801157c:	08012091 	.word	0x08012091
 8011580:	08011ed9 	.word	0x08011ed9

08011584 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b096      	sub	sp, #88	@ 0x58
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	4613      	mov	r3, r2
 8011590:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	68ba      	ldr	r2, [r7, #8]
 8011596:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	88fa      	ldrh	r2, [r7, #6]
 801159c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2200      	movs	r2, #0
 80115a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2222      	movs	r2, #34	@ 0x22
 80115ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d02d      	beq.n	8011616 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115c0:	4a40      	ldr	r2, [pc, #256]	@ (80116c4 <UART_Start_Receive_DMA+0x140>)
 80115c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115ca:	4a3f      	ldr	r2, [pc, #252]	@ (80116c8 <UART_Start_Receive_DMA+0x144>)
 80115cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115d4:	4a3d      	ldr	r2, [pc, #244]	@ (80116cc <UART_Start_Receive_DMA+0x148>)
 80115d6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80115de:	2200      	movs	r2, #0
 80115e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	3324      	adds	r3, #36	@ 0x24
 80115ee:	4619      	mov	r1, r3
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115f4:	461a      	mov	r2, r3
 80115f6:	88fb      	ldrh	r3, [r7, #6]
 80115f8:	f7f5 fc6c 	bl	8006ed4 <HAL_DMA_Start_IT>
 80115fc:	4603      	mov	r3, r0
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d009      	beq.n	8011616 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2210      	movs	r2, #16
 8011606:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2220      	movs	r2, #32
 801160e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011612:	2301      	movs	r3, #1
 8011614:	e051      	b.n	80116ba <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	691b      	ldr	r3, [r3, #16]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d018      	beq.n	8011650 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011626:	e853 3f00 	ldrex	r3, [r3]
 801162a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801162c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801162e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011632:	657b      	str	r3, [r7, #84]	@ 0x54
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	461a      	mov	r2, r3
 801163a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801163c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801163e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011640:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011644:	e841 2300 	strex	r3, r2, [r1]
 8011648:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801164a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801164c:	2b00      	cmp	r3, #0
 801164e:	d1e6      	bne.n	801161e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	3308      	adds	r3, #8
 8011656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801165a:	e853 3f00 	ldrex	r3, [r3]
 801165e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011662:	f043 0301 	orr.w	r3, r3, #1
 8011666:	653b      	str	r3, [r7, #80]	@ 0x50
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	3308      	adds	r3, #8
 801166e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011670:	637a      	str	r2, [r7, #52]	@ 0x34
 8011672:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011674:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011676:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011678:	e841 2300 	strex	r3, r2, [r1]
 801167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801167e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1e5      	bne.n	8011650 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	3308      	adds	r3, #8
 801168a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	e853 3f00 	ldrex	r3, [r3]
 8011692:	613b      	str	r3, [r7, #16]
   return(result);
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801169a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	3308      	adds	r3, #8
 80116a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80116a4:	623a      	str	r2, [r7, #32]
 80116a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116a8:	69f9      	ldr	r1, [r7, #28]
 80116aa:	6a3a      	ldr	r2, [r7, #32]
 80116ac:	e841 2300 	strex	r3, r2, [r1]
 80116b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80116b2:	69bb      	ldr	r3, [r7, #24]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d1e5      	bne.n	8011684 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3758      	adds	r7, #88	@ 0x58
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	08011821 	.word	0x08011821
 80116c8:	08011949 	.word	0x08011949
 80116cc:	08011987 	.word	0x08011987

080116d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b08f      	sub	sp, #60	@ 0x3c
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116de:	6a3b      	ldr	r3, [r7, #32]
 80116e0:	e853 3f00 	ldrex	r3, [r3]
 80116e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80116e6:	69fb      	ldr	r3, [r7, #28]
 80116e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80116ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	461a      	mov	r2, r3
 80116f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80116f8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80116fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80116fe:	e841 2300 	strex	r3, r2, [r1]
 8011702:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011706:	2b00      	cmp	r3, #0
 8011708:	d1e6      	bne.n	80116d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	3308      	adds	r3, #8
 8011710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	e853 3f00 	ldrex	r3, [r3]
 8011718:	60bb      	str	r3, [r7, #8]
   return(result);
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011720:	633b      	str	r3, [r7, #48]	@ 0x30
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	3308      	adds	r3, #8
 8011728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801172a:	61ba      	str	r2, [r7, #24]
 801172c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801172e:	6979      	ldr	r1, [r7, #20]
 8011730:	69ba      	ldr	r2, [r7, #24]
 8011732:	e841 2300 	strex	r3, r2, [r1]
 8011736:	613b      	str	r3, [r7, #16]
   return(result);
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d1e5      	bne.n	801170a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2220      	movs	r2, #32
 8011742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011746:	bf00      	nop
 8011748:	373c      	adds	r7, #60	@ 0x3c
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr
	...

08011754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011754:	b480      	push	{r7}
 8011756:	b095      	sub	sp, #84	@ 0x54
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011764:	e853 3f00 	ldrex	r3, [r3]
 8011768:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801176a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801176c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	461a      	mov	r2, r3
 8011778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801177a:	643b      	str	r3, [r7, #64]	@ 0x40
 801177c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801177e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011780:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011782:	e841 2300 	strex	r3, r2, [r1]
 8011786:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801178a:	2b00      	cmp	r3, #0
 801178c:	d1e6      	bne.n	801175c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	3308      	adds	r3, #8
 8011794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011796:	6a3b      	ldr	r3, [r7, #32]
 8011798:	e853 3f00 	ldrex	r3, [r3]
 801179c:	61fb      	str	r3, [r7, #28]
   return(result);
 801179e:	69fa      	ldr	r2, [r7, #28]
 80117a0:	4b1e      	ldr	r3, [pc, #120]	@ (801181c <UART_EndRxTransfer+0xc8>)
 80117a2:	4013      	ands	r3, r2
 80117a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	3308      	adds	r3, #8
 80117ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80117ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80117b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80117b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117b6:	e841 2300 	strex	r3, r2, [r1]
 80117ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80117bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d1e5      	bne.n	801178e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117c6:	2b01      	cmp	r3, #1
 80117c8:	d118      	bne.n	80117fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	e853 3f00 	ldrex	r3, [r3]
 80117d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	f023 0310 	bic.w	r3, r3, #16
 80117de:	647b      	str	r3, [r7, #68]	@ 0x44
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	461a      	mov	r2, r3
 80117e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117e8:	61bb      	str	r3, [r7, #24]
 80117ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ec:	6979      	ldr	r1, [r7, #20]
 80117ee:	69ba      	ldr	r2, [r7, #24]
 80117f0:	e841 2300 	strex	r3, r2, [r1]
 80117f4:	613b      	str	r3, [r7, #16]
   return(result);
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d1e6      	bne.n	80117ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2220      	movs	r2, #32
 8011800:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2200      	movs	r2, #0
 801180e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011810:	bf00      	nop
 8011812:	3754      	adds	r7, #84	@ 0x54
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr
 801181c:	effffffe 	.word	0xeffffffe

08011820 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b09c      	sub	sp, #112	@ 0x70
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801182c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	69db      	ldr	r3, [r3, #28]
 8011832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011836:	d071      	beq.n	801191c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8011838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801183a:	2200      	movs	r2, #0
 801183c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011848:	e853 3f00 	ldrex	r3, [r3]
 801184c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801184e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	461a      	mov	r2, r3
 801185c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801185e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011860:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011862:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011866:	e841 2300 	strex	r3, r2, [r1]
 801186a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801186c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801186e:	2b00      	cmp	r3, #0
 8011870:	d1e6      	bne.n	8011840 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	3308      	adds	r3, #8
 8011878:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801187a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801187c:	e853 3f00 	ldrex	r3, [r3]
 8011880:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011884:	f023 0301 	bic.w	r3, r3, #1
 8011888:	667b      	str	r3, [r7, #100]	@ 0x64
 801188a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	3308      	adds	r3, #8
 8011890:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011892:	647a      	str	r2, [r7, #68]	@ 0x44
 8011894:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011896:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801189a:	e841 2300 	strex	r3, r2, [r1]
 801189e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80118a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d1e5      	bne.n	8011872 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80118a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	3308      	adds	r3, #8
 80118ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b0:	e853 3f00 	ldrex	r3, [r3]
 80118b4:	623b      	str	r3, [r7, #32]
   return(result);
 80118b6:	6a3b      	ldr	r3, [r7, #32]
 80118b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80118bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80118be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	3308      	adds	r3, #8
 80118c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80118c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80118c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80118cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118ce:	e841 2300 	strex	r3, r2, [r1]
 80118d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80118d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d1e5      	bne.n	80118a6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80118da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80118dc:	2220      	movs	r2, #32
 80118de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80118e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d118      	bne.n	801191c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	e853 3f00 	ldrex	r3, [r3]
 80118f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	f023 0310 	bic.w	r3, r3, #16
 80118fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	461a      	mov	r2, r3
 8011906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011908:	61fb      	str	r3, [r7, #28]
 801190a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801190c:	69b9      	ldr	r1, [r7, #24]
 801190e:	69fa      	ldr	r2, [r7, #28]
 8011910:	e841 2300 	strex	r3, r2, [r1]
 8011914:	617b      	str	r3, [r7, #20]
   return(result);
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d1e6      	bne.n	80118ea <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801191c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801191e:	2200      	movs	r2, #0
 8011920:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011926:	2b01      	cmp	r3, #1
 8011928:	d107      	bne.n	801193a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801192a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801192c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011930:	4619      	mov	r1, r3
 8011932:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011934:	f7fe fcd2 	bl	80102dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011938:	e002      	b.n	8011940 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801193a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801193c:	f7f1 f9c0 	bl	8002cc0 <HAL_UART_RxCpltCallback>
}
 8011940:	bf00      	nop
 8011942:	3770      	adds	r7, #112	@ 0x70
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}

08011948 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b084      	sub	sp, #16
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011954:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	2201      	movs	r2, #1
 801195a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011960:	2b01      	cmp	r3, #1
 8011962:	d109      	bne.n	8011978 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801196a:	085b      	lsrs	r3, r3, #1
 801196c:	b29b      	uxth	r3, r3
 801196e:	4619      	mov	r1, r3
 8011970:	68f8      	ldr	r0, [r7, #12]
 8011972:	f7fe fcb3 	bl	80102dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011976:	e002      	b.n	801197e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011978:	68f8      	ldr	r0, [r7, #12]
 801197a:	f7fe fc91 	bl	80102a0 <HAL_UART_RxHalfCpltCallback>
}
 801197e:	bf00      	nop
 8011980:	3710      	adds	r7, #16
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}

08011986 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011986:	b580      	push	{r7, lr}
 8011988:	b086      	sub	sp, #24
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011992:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801199a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80119a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	689b      	ldr	r3, [r3, #8]
 80119aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80119ae:	2b80      	cmp	r3, #128	@ 0x80
 80119b0:	d109      	bne.n	80119c6 <UART_DMAError+0x40>
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	2b21      	cmp	r3, #33	@ 0x21
 80119b6:	d106      	bne.n	80119c6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2200      	movs	r2, #0
 80119bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80119c0:	6978      	ldr	r0, [r7, #20]
 80119c2:	f7ff fe85 	bl	80116d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	689b      	ldr	r3, [r3, #8]
 80119cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119d0:	2b40      	cmp	r3, #64	@ 0x40
 80119d2:	d109      	bne.n	80119e8 <UART_DMAError+0x62>
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2b22      	cmp	r3, #34	@ 0x22
 80119d8:	d106      	bne.n	80119e8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	2200      	movs	r2, #0
 80119de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80119e2:	6978      	ldr	r0, [r7, #20]
 80119e4:	f7ff feb6 	bl	8011754 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80119ee:	f043 0210 	orr.w	r2, r3, #16
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80119f8:	6978      	ldr	r0, [r7, #20]
 80119fa:	f7fe fc5b 	bl	80102b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80119fe:	bf00      	nop
 8011a00:	3718      	adds	r7, #24
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}

08011a06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011a06:	b580      	push	{r7, lr}
 8011a08:	b084      	sub	sp, #16
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	2200      	movs	r2, #0
 8011a18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a24:	68f8      	ldr	r0, [r7, #12]
 8011a26:	f7fe fc45 	bl	80102b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a2a:	bf00      	nop
 8011a2c:	3710      	adds	r7, #16
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}

08011a32 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011a32:	b580      	push	{r7, lr}
 8011a34:	b084      	sub	sp, #16
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a3e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011a44:	2200      	movs	r2, #0
 8011a46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d005      	beq.n	8011a5e <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d12b      	bne.n	8011ab6 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	2200      	movs	r2, #0
 8011a62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2200      	movs	r2, #0
 8011a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	220f      	movs	r2, #15
 8011a7c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011a86:	d107      	bne.n	8011a98 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	699a      	ldr	r2, [r3, #24]
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f042 0210 	orr.w	r2, r2, #16
 8011a96:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	2220      	movs	r2, #32
 8011a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	2220      	movs	r2, #32
 8011aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011aae:	68f8      	ldr	r0, [r7, #12]
 8011ab0:	f7fe fc0a 	bl	80102c8 <HAL_UART_AbortCpltCallback>
 8011ab4:	e000      	b.n	8011ab8 <UART_DMATxAbortCallback+0x86>
      return;
 8011ab6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ab8:	3710      	adds	r7, #16
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}

08011abe <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011abe:	b580      	push	{r7, lr}
 8011ac0:	b084      	sub	sp, #16
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011aca:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d004      	beq.n	8011ae8 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d126      	bne.n	8011b36 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2200      	movs	r2, #0
 8011aec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	2200      	movs	r2, #0
 8011af4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	2200      	movs	r2, #0
 8011afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	220f      	movs	r2, #15
 8011b06:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	699a      	ldr	r2, [r3, #24]
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f042 0208 	orr.w	r2, r2, #8
 8011b16:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	2220      	movs	r2, #32
 8011b1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	2220      	movs	r2, #32
 8011b24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011b2e:	68f8      	ldr	r0, [r7, #12]
 8011b30:	f7fe fbca 	bl	80102c8 <HAL_UART_AbortCpltCallback>
 8011b34:	e000      	b.n	8011b38 <UART_DMARxAbortCallback+0x7a>
      return;
 8011b36:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b38:	3710      	adds	r7, #16
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}

08011b3e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011b3e:	b480      	push	{r7}
 8011b40:	b08f      	sub	sp, #60	@ 0x3c
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011b4c:	2b21      	cmp	r3, #33	@ 0x21
 8011b4e:	d14c      	bne.n	8011bea <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d132      	bne.n	8011bc2 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b62:	6a3b      	ldr	r3, [r7, #32]
 8011b64:	e853 3f00 	ldrex	r3, [r3]
 8011b68:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b6a:	69fb      	ldr	r3, [r7, #28]
 8011b6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	461a      	mov	r2, r3
 8011b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b7c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b82:	e841 2300 	strex	r3, r2, [r1]
 8011b86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d1e6      	bne.n	8011b5c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	e853 3f00 	ldrex	r3, [r3]
 8011b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ba2:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bac:	61bb      	str	r3, [r7, #24]
 8011bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bb0:	6979      	ldr	r1, [r7, #20]
 8011bb2:	69ba      	ldr	r2, [r7, #24]
 8011bb4:	e841 2300 	strex	r3, r2, [r1]
 8011bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d1e6      	bne.n	8011b8e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8011bc0:	e013      	b.n	8011bea <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011bc6:	781a      	ldrb	r2, [r3, #0]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011bd2:	1c5a      	adds	r2, r3, #1
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	3b01      	subs	r3, #1
 8011be2:	b29a      	uxth	r2, r3
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8011bea:	bf00      	nop
 8011bec:	373c      	adds	r7, #60	@ 0x3c
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf4:	4770      	bx	lr

08011bf6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011bf6:	b480      	push	{r7}
 8011bf8:	b091      	sub	sp, #68	@ 0x44
 8011bfa:	af00      	add	r7, sp, #0
 8011bfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011c04:	2b21      	cmp	r3, #33	@ 0x21
 8011c06:	d151      	bne.n	8011cac <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d132      	bne.n	8011c7a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c1c:	e853 3f00 	ldrex	r3, [r3]
 8011c20:	623b      	str	r3, [r7, #32]
   return(result);
 8011c22:	6a3b      	ldr	r3, [r7, #32]
 8011c24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011c28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	461a      	mov	r2, r3
 8011c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c32:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c3a:	e841 2300 	strex	r3, r2, [r1]
 8011c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d1e6      	bne.n	8011c14 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	e853 3f00 	ldrex	r3, [r3]
 8011c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	461a      	mov	r2, r3
 8011c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c64:	61fb      	str	r3, [r7, #28]
 8011c66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c68:	69b9      	ldr	r1, [r7, #24]
 8011c6a:	69fa      	ldr	r2, [r7, #28]
 8011c6c:	e841 2300 	strex	r3, r2, [r1]
 8011c70:	617b      	str	r3, [r7, #20]
   return(result);
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d1e6      	bne.n	8011c46 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8011c78:	e018      	b.n	8011cac <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8011c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c82:	881b      	ldrh	r3, [r3, #0]
 8011c84:	461a      	mov	r2, r3
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011c8e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c94:	1c9a      	adds	r2, r3, #2
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011ca0:	b29b      	uxth	r3, r3
 8011ca2:	3b01      	subs	r3, #1
 8011ca4:	b29a      	uxth	r2, r3
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8011cac:	bf00      	nop
 8011cae:	3744      	adds	r7, #68	@ 0x44
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr

08011cb8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b091      	sub	sp, #68	@ 0x44
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011cc6:	2b21      	cmp	r3, #33	@ 0x21
 8011cc8:	d160      	bne.n	8011d8c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011cd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011cd2:	e057      	b.n	8011d84 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d133      	bne.n	8011d48 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	3308      	adds	r3, #8
 8011ce6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cea:	e853 3f00 	ldrex	r3, [r3]
 8011cee:	623b      	str	r3, [r7, #32]
   return(result);
 8011cf0:	6a3b      	ldr	r3, [r7, #32]
 8011cf2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	3308      	adds	r3, #8
 8011cfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011d00:	633a      	str	r2, [r7, #48]	@ 0x30
 8011d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d08:	e841 2300 	strex	r3, r2, [r1]
 8011d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d1e5      	bne.n	8011ce0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	e853 3f00 	ldrex	r3, [r3]
 8011d20:	60fb      	str	r3, [r7, #12]
   return(result);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	461a      	mov	r2, r3
 8011d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d32:	61fb      	str	r3, [r7, #28]
 8011d34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d36:	69b9      	ldr	r1, [r7, #24]
 8011d38:	69fa      	ldr	r2, [r7, #28]
 8011d3a:	e841 2300 	strex	r3, r2, [r1]
 8011d3e:	617b      	str	r3, [r7, #20]
   return(result);
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d1e6      	bne.n	8011d14 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8011d46:	e021      	b.n	8011d8c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	69db      	ldr	r3, [r3, #28]
 8011d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d013      	beq.n	8011d7e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d5a:	781a      	ldrb	r2, [r3, #0]
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d66:	1c5a      	adds	r2, r3, #1
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	3b01      	subs	r3, #1
 8011d76:	b29a      	uxth	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8011d7e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011d80:	3b01      	subs	r3, #1
 8011d82:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011d84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d1a4      	bne.n	8011cd4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8011d8a:	e7ff      	b.n	8011d8c <UART_TxISR_8BIT_FIFOEN+0xd4>
 8011d8c:	bf00      	nop
 8011d8e:	3744      	adds	r7, #68	@ 0x44
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b091      	sub	sp, #68	@ 0x44
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011da6:	2b21      	cmp	r3, #33	@ 0x21
 8011da8:	d165      	bne.n	8011e76 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011db0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011db2:	e05c      	b.n	8011e6e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011dba:	b29b      	uxth	r3, r3
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d133      	bne.n	8011e28 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	3308      	adds	r3, #8
 8011dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dc8:	6a3b      	ldr	r3, [r7, #32]
 8011dca:	e853 3f00 	ldrex	r3, [r3]
 8011dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	3308      	adds	r3, #8
 8011dde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011de0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011de8:	e841 2300 	strex	r3, r2, [r1]
 8011dec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d1e5      	bne.n	8011dc0 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	e853 3f00 	ldrex	r3, [r3]
 8011e00:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	461a      	mov	r2, r3
 8011e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e12:	61bb      	str	r3, [r7, #24]
 8011e14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e16:	6979      	ldr	r1, [r7, #20]
 8011e18:	69ba      	ldr	r2, [r7, #24]
 8011e1a:	e841 2300 	strex	r3, r2, [r1]
 8011e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d1e6      	bne.n	8011df4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8011e26:	e026      	b.n	8011e76 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	69db      	ldr	r3, [r3, #28]
 8011e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d018      	beq.n	8011e68 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8011e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e3e:	881b      	ldrh	r3, [r3, #0]
 8011e40:	461a      	mov	r2, r3
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011e4a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e50:	1c9a      	adds	r2, r3, #2
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	3b01      	subs	r3, #1
 8011e60:	b29a      	uxth	r2, r3
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8011e68:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011e6a:	3b01      	subs	r3, #1
 8011e6c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011e6e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d19f      	bne.n	8011db4 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8011e74:	e7ff      	b.n	8011e76 <UART_TxISR_16BIT_FIFOEN+0xde>
 8011e76:	bf00      	nop
 8011e78:	3744      	adds	r7, #68	@ 0x44
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e80:	4770      	bx	lr

08011e82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011e82:	b580      	push	{r7, lr}
 8011e84:	b088      	sub	sp, #32
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	e853 3f00 	ldrex	r3, [r3]
 8011e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011e9e:	61fb      	str	r3, [r7, #28]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	69fb      	ldr	r3, [r7, #28]
 8011ea8:	61bb      	str	r3, [r7, #24]
 8011eaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eac:	6979      	ldr	r1, [r7, #20]
 8011eae:	69ba      	ldr	r2, [r7, #24]
 8011eb0:	e841 2300 	strex	r3, r2, [r1]
 8011eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d1e6      	bne.n	8011e8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2220      	movs	r2, #32
 8011ec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f7fe f9de 	bl	801028c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ed0:	bf00      	nop
 8011ed2:	3720      	adds	r7, #32
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b09c      	sub	sp, #112	@ 0x70
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011ee6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011ef0:	2b22      	cmp	r3, #34	@ 0x22
 8011ef2:	f040 80be 	bne.w	8012072 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011efc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011f00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011f04:	b2d9      	uxtb	r1, r3
 8011f06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011f0a:	b2da      	uxtb	r2, r3
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f10:	400a      	ands	r2, r1
 8011f12:	b2d2      	uxtb	r2, r2
 8011f14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011f1a:	1c5a      	adds	r2, r3, #1
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	3b01      	subs	r3, #1
 8011f2a:	b29a      	uxth	r2, r3
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f040 80a1 	bne.w	8012082 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f48:	e853 3f00 	ldrex	r3, [r3]
 8011f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	461a      	mov	r2, r3
 8011f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011f60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011f64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011f66:	e841 2300 	strex	r3, r2, [r1]
 8011f6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011f6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d1e6      	bne.n	8011f40 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	3308      	adds	r3, #8
 8011f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f7c:	e853 3f00 	ldrex	r3, [r3]
 8011f80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f84:	f023 0301 	bic.w	r3, r3, #1
 8011f88:	667b      	str	r3, [r7, #100]	@ 0x64
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	3308      	adds	r3, #8
 8011f90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011f92:	647a      	str	r2, [r7, #68]	@ 0x44
 8011f94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011f98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011f9a:	e841 2300 	strex	r3, r2, [r1]
 8011f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d1e5      	bne.n	8011f72 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2220      	movs	r2, #32
 8011faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	4a33      	ldr	r2, [pc, #204]	@ (801208c <UART_RxISR_8BIT+0x1b4>)
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	d01f      	beq.n	8012004 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	685b      	ldr	r3, [r3, #4]
 8011fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d018      	beq.n	8012004 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fda:	e853 3f00 	ldrex	r3, [r3]
 8011fde:	623b      	str	r3, [r7, #32]
   return(result);
 8011fe0:	6a3b      	ldr	r3, [r7, #32]
 8011fe2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011fe6:	663b      	str	r3, [r7, #96]	@ 0x60
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	461a      	mov	r2, r3
 8011fee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ff2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ff8:	e841 2300 	strex	r3, r2, [r1]
 8011ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012000:	2b00      	cmp	r3, #0
 8012002:	d1e6      	bne.n	8011fd2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012008:	2b01      	cmp	r3, #1
 801200a:	d12e      	bne.n	801206a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2200      	movs	r2, #0
 8012010:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	e853 3f00 	ldrex	r3, [r3]
 801201e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	f023 0310 	bic.w	r3, r3, #16
 8012026:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	461a      	mov	r2, r3
 801202e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012030:	61fb      	str	r3, [r7, #28]
 8012032:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012034:	69b9      	ldr	r1, [r7, #24]
 8012036:	69fa      	ldr	r2, [r7, #28]
 8012038:	e841 2300 	strex	r3, r2, [r1]
 801203c:	617b      	str	r3, [r7, #20]
   return(result);
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d1e6      	bne.n	8012012 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	69db      	ldr	r3, [r3, #28]
 801204a:	f003 0310 	and.w	r3, r3, #16
 801204e:	2b10      	cmp	r3, #16
 8012050:	d103      	bne.n	801205a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	2210      	movs	r2, #16
 8012058:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012060:	4619      	mov	r1, r3
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f7fe f93a 	bl	80102dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012068:	e00b      	b.n	8012082 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f7f0 fe28 	bl	8002cc0 <HAL_UART_RxCpltCallback>
}
 8012070:	e007      	b.n	8012082 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	699a      	ldr	r2, [r3, #24]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f042 0208 	orr.w	r2, r2, #8
 8012080:	619a      	str	r2, [r3, #24]
}
 8012082:	bf00      	nop
 8012084:	3770      	adds	r7, #112	@ 0x70
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
 801208a:	bf00      	nop
 801208c:	58000c00 	.word	0x58000c00

08012090 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b09c      	sub	sp, #112	@ 0x70
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801209e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80120a8:	2b22      	cmp	r3, #34	@ 0x22
 80120aa:	f040 80be 	bne.w	801222a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80120be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80120c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80120c6:	4013      	ands	r3, r2
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80120cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120d2:	1c9a      	adds	r2, r3, #2
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80120de:	b29b      	uxth	r3, r3
 80120e0:	3b01      	subs	r3, #1
 80120e2:	b29a      	uxth	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	f040 80a1 	bne.w	801223a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012100:	e853 3f00 	ldrex	r3, [r3]
 8012104:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8012106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801210c:	667b      	str	r3, [r7, #100]	@ 0x64
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	461a      	mov	r2, r3
 8012114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012116:	657b      	str	r3, [r7, #84]	@ 0x54
 8012118:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801211a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801211c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801211e:	e841 2300 	strex	r3, r2, [r1]
 8012122:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012126:	2b00      	cmp	r3, #0
 8012128:	d1e6      	bne.n	80120f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	3308      	adds	r3, #8
 8012130:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012134:	e853 3f00 	ldrex	r3, [r3]
 8012138:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801213a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801213c:	f023 0301 	bic.w	r3, r3, #1
 8012140:	663b      	str	r3, [r7, #96]	@ 0x60
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	3308      	adds	r3, #8
 8012148:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801214a:	643a      	str	r2, [r7, #64]	@ 0x40
 801214c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801214e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012150:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012152:	e841 2300 	strex	r3, r2, [r1]
 8012156:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801215a:	2b00      	cmp	r3, #0
 801215c:	d1e5      	bne.n	801212a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2220      	movs	r2, #32
 8012162:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2200      	movs	r2, #0
 801216a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2200      	movs	r2, #0
 8012170:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	4a33      	ldr	r2, [pc, #204]	@ (8012244 <UART_RxISR_16BIT+0x1b4>)
 8012178:	4293      	cmp	r3, r2
 801217a:	d01f      	beq.n	80121bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	685b      	ldr	r3, [r3, #4]
 8012182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012186:	2b00      	cmp	r3, #0
 8012188:	d018      	beq.n	80121bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012190:	6a3b      	ldr	r3, [r7, #32]
 8012192:	e853 3f00 	ldrex	r3, [r3]
 8012196:	61fb      	str	r3, [r7, #28]
   return(result);
 8012198:	69fb      	ldr	r3, [r7, #28]
 801219a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801219e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	461a      	mov	r2, r3
 80121a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80121aa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80121ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121b0:	e841 2300 	strex	r3, r2, [r1]
 80121b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80121b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d1e6      	bne.n	801218a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121c0:	2b01      	cmp	r3, #1
 80121c2:	d12e      	bne.n	8012222 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	e853 3f00 	ldrex	r3, [r3]
 80121d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	f023 0310 	bic.w	r3, r3, #16
 80121de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	461a      	mov	r2, r3
 80121e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80121e8:	61bb      	str	r3, [r7, #24]
 80121ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ec:	6979      	ldr	r1, [r7, #20]
 80121ee:	69ba      	ldr	r2, [r7, #24]
 80121f0:	e841 2300 	strex	r3, r2, [r1]
 80121f4:	613b      	str	r3, [r7, #16]
   return(result);
 80121f6:	693b      	ldr	r3, [r7, #16]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d1e6      	bne.n	80121ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	69db      	ldr	r3, [r3, #28]
 8012202:	f003 0310 	and.w	r3, r3, #16
 8012206:	2b10      	cmp	r3, #16
 8012208:	d103      	bne.n	8012212 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	2210      	movs	r2, #16
 8012210:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012218:	4619      	mov	r1, r3
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f7fe f85e 	bl	80102dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012220:	e00b      	b.n	801223a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f7f0 fd4c 	bl	8002cc0 <HAL_UART_RxCpltCallback>
}
 8012228:	e007      	b.n	801223a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	699a      	ldr	r2, [r3, #24]
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f042 0208 	orr.w	r2, r2, #8
 8012238:	619a      	str	r2, [r3, #24]
}
 801223a:	bf00      	nop
 801223c:	3770      	adds	r7, #112	@ 0x70
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}
 8012242:	bf00      	nop
 8012244:	58000c00 	.word	0x58000c00

08012248 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b0ac      	sub	sp, #176	@ 0xb0
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012256:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	69db      	ldr	r3, [r3, #28]
 8012260:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	689b      	ldr	r3, [r3, #8]
 8012274:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801227e:	2b22      	cmp	r3, #34	@ 0x22
 8012280:	f040 8180 	bne.w	8012584 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801228a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801228e:	e123      	b.n	80124d8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012296:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801229a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801229e:	b2d9      	uxtb	r1, r3
 80122a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80122a4:	b2da      	uxtb	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122aa:	400a      	ands	r2, r1
 80122ac:	b2d2      	uxtb	r2, r2
 80122ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122b4:	1c5a      	adds	r2, r3, #1
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	3b01      	subs	r3, #1
 80122c4:	b29a      	uxth	r2, r3
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	69db      	ldr	r3, [r3, #28]
 80122d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80122d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122da:	f003 0307 	and.w	r3, r3, #7
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d053      	beq.n	801238a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80122e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122e6:	f003 0301 	and.w	r3, r3, #1
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d011      	beq.n	8012312 <UART_RxISR_8BIT_FIFOEN+0xca>
 80122ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80122f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d00b      	beq.n	8012312 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	2201      	movs	r2, #1
 8012300:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012308:	f043 0201 	orr.w	r2, r3, #1
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012316:	f003 0302 	and.w	r3, r3, #2
 801231a:	2b00      	cmp	r3, #0
 801231c:	d011      	beq.n	8012342 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801231e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012322:	f003 0301 	and.w	r3, r3, #1
 8012326:	2b00      	cmp	r3, #0
 8012328:	d00b      	beq.n	8012342 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2202      	movs	r2, #2
 8012330:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012338:	f043 0204 	orr.w	r2, r3, #4
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012346:	f003 0304 	and.w	r3, r3, #4
 801234a:	2b00      	cmp	r3, #0
 801234c:	d011      	beq.n	8012372 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801234e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012352:	f003 0301 	and.w	r3, r3, #1
 8012356:	2b00      	cmp	r3, #0
 8012358:	d00b      	beq.n	8012372 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2204      	movs	r2, #4
 8012360:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012368:	f043 0202 	orr.w	r2, r3, #2
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012378:	2b00      	cmp	r3, #0
 801237a:	d006      	beq.n	801238a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f7fd ff99 	bl	80102b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2200      	movs	r2, #0
 8012386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012390:	b29b      	uxth	r3, r3
 8012392:	2b00      	cmp	r3, #0
 8012394:	f040 80a0 	bne.w	80124d8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801239e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80123a0:	e853 3f00 	ldrex	r3, [r3]
 80123a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80123a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80123a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80123ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	461a      	mov	r2, r3
 80123b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80123ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80123bc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123be:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80123c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80123c2:	e841 2300 	strex	r3, r2, [r1]
 80123c6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80123c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d1e4      	bne.n	8012398 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	3308      	adds	r3, #8
 80123d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123d8:	e853 3f00 	ldrex	r3, [r3]
 80123dc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80123de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80123e0:	4b6e      	ldr	r3, [pc, #440]	@ (801259c <UART_RxISR_8BIT_FIFOEN+0x354>)
 80123e2:	4013      	ands	r3, r2
 80123e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	3308      	adds	r3, #8
 80123ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80123f2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80123f4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123f6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80123f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80123fa:	e841 2300 	strex	r3, r2, [r1]
 80123fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8012400:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012402:	2b00      	cmp	r3, #0
 8012404:	d1e3      	bne.n	80123ce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2220      	movs	r2, #32
 801240a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2200      	movs	r2, #0
 8012412:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	4a60      	ldr	r2, [pc, #384]	@ (80125a0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012420:	4293      	cmp	r3, r2
 8012422:	d021      	beq.n	8012468 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801242e:	2b00      	cmp	r3, #0
 8012430:	d01a      	beq.n	8012468 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801243a:	e853 3f00 	ldrex	r3, [r3]
 801243e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8012440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012442:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	461a      	mov	r2, r3
 8012450:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012454:	657b      	str	r3, [r7, #84]	@ 0x54
 8012456:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012458:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801245a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801245c:	e841 2300 	strex	r3, r2, [r1]
 8012460:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012464:	2b00      	cmp	r3, #0
 8012466:	d1e4      	bne.n	8012432 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801246c:	2b01      	cmp	r3, #1
 801246e:	d130      	bne.n	80124d2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801247c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801247e:	e853 3f00 	ldrex	r3, [r3]
 8012482:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012486:	f023 0310 	bic.w	r3, r3, #16
 801248a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	461a      	mov	r2, r3
 8012494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012498:	643b      	str	r3, [r7, #64]	@ 0x40
 801249a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801249c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801249e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80124a0:	e841 2300 	strex	r3, r2, [r1]
 80124a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80124a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d1e4      	bne.n	8012476 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	69db      	ldr	r3, [r3, #28]
 80124b2:	f003 0310 	and.w	r3, r3, #16
 80124b6:	2b10      	cmp	r3, #16
 80124b8:	d103      	bne.n	80124c2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	2210      	movs	r2, #16
 80124c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80124c8:	4619      	mov	r1, r3
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f7fd ff06 	bl	80102dc <HAL_UARTEx_RxEventCallback>
 80124d0:	e002      	b.n	80124d8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f7f0 fbf4 	bl	8002cc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80124d8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d006      	beq.n	80124ee <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80124e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124e4:	f003 0320 	and.w	r3, r3, #32
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	f47f aed1 	bne.w	8012290 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80124f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80124f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d049      	beq.n	8012594 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012506:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801250a:	429a      	cmp	r2, r3
 801250c:	d242      	bcs.n	8012594 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	3308      	adds	r3, #8
 8012514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012516:	6a3b      	ldr	r3, [r7, #32]
 8012518:	e853 3f00 	ldrex	r3, [r3]
 801251c:	61fb      	str	r3, [r7, #28]
   return(result);
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012524:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	3308      	adds	r3, #8
 801252e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012532:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012534:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012536:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801253a:	e841 2300 	strex	r3, r2, [r1]
 801253e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012542:	2b00      	cmp	r3, #0
 8012544:	d1e3      	bne.n	801250e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	4a16      	ldr	r2, [pc, #88]	@ (80125a4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801254a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	e853 3f00 	ldrex	r3, [r3]
 8012558:	60bb      	str	r3, [r7, #8]
   return(result);
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	f043 0320 	orr.w	r3, r3, #32
 8012560:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	461a      	mov	r2, r3
 801256a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801256e:	61bb      	str	r3, [r7, #24]
 8012570:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012572:	6979      	ldr	r1, [r7, #20]
 8012574:	69ba      	ldr	r2, [r7, #24]
 8012576:	e841 2300 	strex	r3, r2, [r1]
 801257a:	613b      	str	r3, [r7, #16]
   return(result);
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d1e4      	bne.n	801254c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012582:	e007      	b.n	8012594 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	699a      	ldr	r2, [r3, #24]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f042 0208 	orr.w	r2, r2, #8
 8012592:	619a      	str	r2, [r3, #24]
}
 8012594:	bf00      	nop
 8012596:	37b0      	adds	r7, #176	@ 0xb0
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}
 801259c:	effffffe 	.word	0xeffffffe
 80125a0:	58000c00 	.word	0x58000c00
 80125a4:	08011ed9 	.word	0x08011ed9

080125a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b0ae      	sub	sp, #184	@ 0xb8
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80125b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	69db      	ldr	r3, [r3, #28]
 80125c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	689b      	ldr	r3, [r3, #8]
 80125d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80125de:	2b22      	cmp	r3, #34	@ 0x22
 80125e0:	f040 8184 	bne.w	80128ec <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80125ea:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80125ee:	e127      	b.n	8012840 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012602:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8012606:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801260a:	4013      	ands	r3, r2
 801260c:	b29a      	uxth	r2, r3
 801260e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012612:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012618:	1c9a      	adds	r2, r3, #2
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012624:	b29b      	uxth	r3, r3
 8012626:	3b01      	subs	r3, #1
 8012628:	b29a      	uxth	r2, r3
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	69db      	ldr	r3, [r3, #28]
 8012636:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801263a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801263e:	f003 0307 	and.w	r3, r3, #7
 8012642:	2b00      	cmp	r3, #0
 8012644:	d053      	beq.n	80126ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012646:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801264a:	f003 0301 	and.w	r3, r3, #1
 801264e:	2b00      	cmp	r3, #0
 8012650:	d011      	beq.n	8012676 <UART_RxISR_16BIT_FIFOEN+0xce>
 8012652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801265a:	2b00      	cmp	r3, #0
 801265c:	d00b      	beq.n	8012676 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	2201      	movs	r2, #1
 8012664:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801266c:	f043 0201 	orr.w	r2, r3, #1
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012676:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801267a:	f003 0302 	and.w	r3, r3, #2
 801267e:	2b00      	cmp	r3, #0
 8012680:	d011      	beq.n	80126a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012686:	f003 0301 	and.w	r3, r3, #1
 801268a:	2b00      	cmp	r3, #0
 801268c:	d00b      	beq.n	80126a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	2202      	movs	r2, #2
 8012694:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801269c:	f043 0204 	orr.w	r2, r3, #4
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80126a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80126aa:	f003 0304 	and.w	r3, r3, #4
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d011      	beq.n	80126d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80126b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80126b6:	f003 0301 	and.w	r3, r3, #1
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d00b      	beq.n	80126d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2204      	movs	r2, #4
 80126c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126cc:	f043 0202 	orr.w	r2, r3, #2
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d006      	beq.n	80126ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f7fd fde7 	bl	80102b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2200      	movs	r2, #0
 80126ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80126f4:	b29b      	uxth	r3, r3
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	f040 80a2 	bne.w	8012840 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012704:	e853 3f00 	ldrex	r3, [r3]
 8012708:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801270a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801270c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	461a      	mov	r2, r3
 801271a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801271e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012722:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012724:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012726:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801272a:	e841 2300 	strex	r3, r2, [r1]
 801272e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012732:	2b00      	cmp	r3, #0
 8012734:	d1e2      	bne.n	80126fc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	3308      	adds	r3, #8
 801273c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801273e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012740:	e853 3f00 	ldrex	r3, [r3]
 8012744:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012746:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012748:	4b6e      	ldr	r3, [pc, #440]	@ (8012904 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801274a:	4013      	ands	r3, r2
 801274c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	3308      	adds	r3, #8
 8012756:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801275a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801275c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801275e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012760:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012762:	e841 2300 	strex	r3, r2, [r1]
 8012766:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801276a:	2b00      	cmp	r3, #0
 801276c:	d1e3      	bne.n	8012736 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2220      	movs	r2, #32
 8012772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2200      	movs	r2, #0
 801277a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2200      	movs	r2, #0
 8012780:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	4a60      	ldr	r2, [pc, #384]	@ (8012908 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012788:	4293      	cmp	r3, r2
 801278a:	d021      	beq.n	80127d0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	685b      	ldr	r3, [r3, #4]
 8012792:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012796:	2b00      	cmp	r3, #0
 8012798:	d01a      	beq.n	80127d0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127a2:	e853 3f00 	ldrex	r3, [r3]
 80127a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80127a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80127ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	461a      	mov	r2, r3
 80127b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80127bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80127be:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80127c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80127c4:	e841 2300 	strex	r3, r2, [r1]
 80127c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80127ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d1e4      	bne.n	801279a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127d4:	2b01      	cmp	r3, #1
 80127d6:	d130      	bne.n	801283a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2200      	movs	r2, #0
 80127dc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127e6:	e853 3f00 	ldrex	r3, [r3]
 80127ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80127ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127ee:	f023 0310 	bic.w	r3, r3, #16
 80127f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	461a      	mov	r2, r3
 80127fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012800:	647b      	str	r3, [r7, #68]	@ 0x44
 8012802:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012808:	e841 2300 	strex	r3, r2, [r1]
 801280c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801280e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012810:	2b00      	cmp	r3, #0
 8012812:	d1e4      	bne.n	80127de <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	69db      	ldr	r3, [r3, #28]
 801281a:	f003 0310 	and.w	r3, r3, #16
 801281e:	2b10      	cmp	r3, #16
 8012820:	d103      	bne.n	801282a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2210      	movs	r2, #16
 8012828:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012830:	4619      	mov	r1, r3
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f7fd fd52 	bl	80102dc <HAL_UARTEx_RxEventCallback>
 8012838:	e002      	b.n	8012840 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f7f0 fa40 	bl	8002cc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012840:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8012844:	2b00      	cmp	r3, #0
 8012846:	d006      	beq.n	8012856 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801284c:	f003 0320 	and.w	r3, r3, #32
 8012850:	2b00      	cmp	r3, #0
 8012852:	f47f aecd 	bne.w	80125f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801285c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012860:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012864:	2b00      	cmp	r3, #0
 8012866:	d049      	beq.n	80128fc <UART_RxISR_16BIT_FIFOEN+0x354>
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801286e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8012872:	429a      	cmp	r2, r3
 8012874:	d242      	bcs.n	80128fc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	3308      	adds	r3, #8
 801287c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012880:	e853 3f00 	ldrex	r3, [r3]
 8012884:	623b      	str	r3, [r7, #32]
   return(result);
 8012886:	6a3b      	ldr	r3, [r7, #32]
 8012888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801288c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	3308      	adds	r3, #8
 8012896:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801289a:	633a      	str	r2, [r7, #48]	@ 0x30
 801289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801289e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80128a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80128a2:	e841 2300 	strex	r3, r2, [r1]
 80128a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80128a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d1e3      	bne.n	8012876 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4a16      	ldr	r2, [pc, #88]	@ (801290c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80128b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	e853 3f00 	ldrex	r3, [r3]
 80128c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	f043 0320 	orr.w	r3, r3, #32
 80128c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	461a      	mov	r2, r3
 80128d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80128d6:	61fb      	str	r3, [r7, #28]
 80128d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128da:	69b9      	ldr	r1, [r7, #24]
 80128dc:	69fa      	ldr	r2, [r7, #28]
 80128de:	e841 2300 	strex	r3, r2, [r1]
 80128e2:	617b      	str	r3, [r7, #20]
   return(result);
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d1e4      	bne.n	80128b4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80128ea:	e007      	b.n	80128fc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	699a      	ldr	r2, [r3, #24]
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	f042 0208 	orr.w	r2, r2, #8
 80128fa:	619a      	str	r2, [r3, #24]
}
 80128fc:	bf00      	nop
 80128fe:	37b8      	adds	r7, #184	@ 0xb8
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	effffffe 	.word	0xeffffffe
 8012908:	58000c00 	.word	0x58000c00
 801290c:	08012091 	.word	0x08012091

08012910 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012910:	b480      	push	{r7}
 8012912:	b083      	sub	sp, #12
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012918:	bf00      	nop
 801291a:	370c      	adds	r7, #12
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801292c:	bf00      	nop
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012936:	4770      	bx	lr

08012938 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012940:	bf00      	nop
 8012942:	370c      	adds	r7, #12
 8012944:	46bd      	mov	sp, r7
 8012946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294a:	4770      	bx	lr

0801294c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801294c:	b480      	push	{r7}
 801294e:	b085      	sub	sp, #20
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801295a:	2b01      	cmp	r3, #1
 801295c:	d101      	bne.n	8012962 <HAL_UARTEx_DisableFifoMode+0x16>
 801295e:	2302      	movs	r3, #2
 8012960:	e027      	b.n	80129b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2201      	movs	r2, #1
 8012966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2224      	movs	r2, #36	@ 0x24
 801296e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	681a      	ldr	r2, [r3, #0]
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	f022 0201 	bic.w	r2, r2, #1
 8012988:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012990:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2200      	movs	r2, #0
 8012996:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	68fa      	ldr	r2, [r7, #12]
 801299e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2220      	movs	r2, #32
 80129a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2200      	movs	r2, #0
 80129ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80129b0:	2300      	movs	r3, #0
}
 80129b2:	4618      	mov	r0, r3
 80129b4:	3714      	adds	r7, #20
 80129b6:	46bd      	mov	sp, r7
 80129b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129bc:	4770      	bx	lr

080129be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80129be:	b580      	push	{r7, lr}
 80129c0:	b084      	sub	sp, #16
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
 80129c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80129ce:	2b01      	cmp	r3, #1
 80129d0:	d101      	bne.n	80129d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80129d2:	2302      	movs	r3, #2
 80129d4:	e02d      	b.n	8012a32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2201      	movs	r2, #1
 80129da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2224      	movs	r2, #36	@ 0x24
 80129e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f022 0201 	bic.w	r2, r2, #1
 80129fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	689b      	ldr	r3, [r3, #8]
 8012a04:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	683a      	ldr	r2, [r7, #0]
 8012a0e:	430a      	orrs	r2, r1
 8012a10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f000 f850 	bl	8012ab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	68fa      	ldr	r2, [r7, #12]
 8012a1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2220      	movs	r2, #32
 8012a24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012a30:	2300      	movs	r3, #0
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3710      	adds	r7, #16
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}

08012a3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012a3a:	b580      	push	{r7, lr}
 8012a3c:	b084      	sub	sp, #16
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
 8012a42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012a4a:	2b01      	cmp	r3, #1
 8012a4c:	d101      	bne.n	8012a52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012a4e:	2302      	movs	r3, #2
 8012a50:	e02d      	b.n	8012aae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2201      	movs	r2, #1
 8012a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2224      	movs	r2, #36	@ 0x24
 8012a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	681a      	ldr	r2, [r3, #0]
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	f022 0201 	bic.w	r2, r2, #1
 8012a78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	689b      	ldr	r3, [r3, #8]
 8012a80:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	683a      	ldr	r2, [r7, #0]
 8012a8a:	430a      	orrs	r2, r1
 8012a8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f000 f812 	bl	8012ab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	68fa      	ldr	r2, [r7, #12]
 8012a9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2220      	movs	r2, #32
 8012aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012aac:	2300      	movs	r3, #0
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3710      	adds	r7, #16
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
	...

08012ab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012ab8:	b480      	push	{r7}
 8012aba:	b085      	sub	sp, #20
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d108      	bne.n	8012ada <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2201      	movs	r2, #1
 8012acc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012ad8:	e031      	b.n	8012b3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012ada:	2310      	movs	r3, #16
 8012adc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012ade:	2310      	movs	r3, #16
 8012ae0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	689b      	ldr	r3, [r3, #8]
 8012ae8:	0e5b      	lsrs	r3, r3, #25
 8012aea:	b2db      	uxtb	r3, r3
 8012aec:	f003 0307 	and.w	r3, r3, #7
 8012af0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	689b      	ldr	r3, [r3, #8]
 8012af8:	0f5b      	lsrs	r3, r3, #29
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	f003 0307 	and.w	r3, r3, #7
 8012b00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012b02:	7bbb      	ldrb	r3, [r7, #14]
 8012b04:	7b3a      	ldrb	r2, [r7, #12]
 8012b06:	4911      	ldr	r1, [pc, #68]	@ (8012b4c <UARTEx_SetNbDataToProcess+0x94>)
 8012b08:	5c8a      	ldrb	r2, [r1, r2]
 8012b0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012b0e:	7b3a      	ldrb	r2, [r7, #12]
 8012b10:	490f      	ldr	r1, [pc, #60]	@ (8012b50 <UARTEx_SetNbDataToProcess+0x98>)
 8012b12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012b14:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b18:	b29a      	uxth	r2, r3
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012b20:	7bfb      	ldrb	r3, [r7, #15]
 8012b22:	7b7a      	ldrb	r2, [r7, #13]
 8012b24:	4909      	ldr	r1, [pc, #36]	@ (8012b4c <UARTEx_SetNbDataToProcess+0x94>)
 8012b26:	5c8a      	ldrb	r2, [r1, r2]
 8012b28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012b2c:	7b7a      	ldrb	r2, [r7, #13]
 8012b2e:	4908      	ldr	r1, [pc, #32]	@ (8012b50 <UARTEx_SetNbDataToProcess+0x98>)
 8012b30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012b32:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b36:	b29a      	uxth	r2, r3
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012b3e:	bf00      	nop
 8012b40:	3714      	adds	r7, #20
 8012b42:	46bd      	mov	sp, r7
 8012b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b48:	4770      	bx	lr
 8012b4a:	bf00      	nop
 8012b4c:	08019a24 	.word	0x08019a24
 8012b50:	08019a2c 	.word	0x08019a2c

08012b54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012b58:	4904      	ldr	r1, [pc, #16]	@ (8012b6c <MX_FATFS_Init+0x18>)
 8012b5a:	4805      	ldr	r0, [pc, #20]	@ (8012b70 <MX_FATFS_Init+0x1c>)
 8012b5c:	f001 fcd0 	bl	8014500 <FATFS_LinkDriver>
 8012b60:	4603      	mov	r3, r0
 8012b62:	461a      	mov	r2, r3
 8012b64:	4b03      	ldr	r3, [pc, #12]	@ (8012b74 <MX_FATFS_Init+0x20>)
 8012b66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012b68:	bf00      	nop
 8012b6a:	bd80      	pop	{r7, pc}
 8012b6c:	2400297c 	.word	0x2400297c
 8012b70:	240000ac 	.word	0x240000ac
 8012b74:	24002978 	.word	0x24002978

08012b78 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012b78:	b480      	push	{r7}
 8012b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012b7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	46bd      	mov	sp, r7
 8012b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b86:	4770      	bx	lr

08012b88 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	4603      	mov	r3, r0
 8012b90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8012b92:	79fb      	ldrb	r3, [r7, #7]
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 f9fd 	bl	8012f94 <SD_disk_initialize>
 8012b9a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3708      	adds	r7, #8
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	4603      	mov	r3, r0
 8012bac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8012bae:	79fb      	ldrb	r3, [r7, #7]
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f000 fad5 	bl	8013160 <SD_disk_status>
 8012bb6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3708      	adds	r7, #8
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}

08012bc0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60b9      	str	r1, [r7, #8]
 8012bc8:	607a      	str	r2, [r7, #4]
 8012bca:	603b      	str	r3, [r7, #0]
 8012bcc:	4603      	mov	r3, r0
 8012bce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8012bd0:	7bf8      	ldrb	r0, [r7, #15]
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	68b9      	ldr	r1, [r7, #8]
 8012bd8:	f000 fad8 	bl	801318c <SD_disk_read>
 8012bdc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3710      	adds	r7, #16
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}

08012be6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8012be6:	b580      	push	{r7, lr}
 8012be8:	b084      	sub	sp, #16
 8012bea:	af00      	add	r7, sp, #0
 8012bec:	60b9      	str	r1, [r7, #8]
 8012bee:	607a      	str	r2, [r7, #4]
 8012bf0:	603b      	str	r3, [r7, #0]
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8012bf6:	7bf8      	ldrb	r0, [r7, #15]
 8012bf8:	683b      	ldr	r3, [r7, #0]
 8012bfa:	687a      	ldr	r2, [r7, #4]
 8012bfc:	68b9      	ldr	r1, [r7, #8]
 8012bfe:	f000 fb2f 	bl	8013260 <SD_disk_write>
 8012c02:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3710      	adds	r7, #16
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}

08012c0c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	4603      	mov	r3, r0
 8012c14:	603a      	str	r2, [r7, #0]
 8012c16:	71fb      	strb	r3, [r7, #7]
 8012c18:	460b      	mov	r3, r1
 8012c1a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8012c1c:	79b9      	ldrb	r1, [r7, #6]
 8012c1e:	79fb      	ldrb	r3, [r7, #7]
 8012c20:	683a      	ldr	r2, [r7, #0]
 8012c22:	4618      	mov	r0, r3
 8012c24:	f000 fba0 	bl	8013368 <SD_disk_ioctl>
 8012c28:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	3708      	adds	r7, #8
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd80      	pop	{r7, pc}
	...

08012c34 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8012c38:	2200      	movs	r2, #0
 8012c3a:	2110      	movs	r1, #16
 8012c3c:	4802      	ldr	r0, [pc, #8]	@ (8012c48 <SELECT+0x14>)
 8012c3e:	f7f7 f9b9 	bl	8009fb4 <HAL_GPIO_WritePin>
}
 8012c42:	bf00      	nop
 8012c44:	bd80      	pop	{r7, pc}
 8012c46:	bf00      	nop
 8012c48:	58020000 	.word	0x58020000

08012c4c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8012c50:	2201      	movs	r2, #1
 8012c52:	2110      	movs	r1, #16
 8012c54:	4802      	ldr	r0, [pc, #8]	@ (8012c60 <DESELECT+0x14>)
 8012c56:	f7f7 f9ad 	bl	8009fb4 <HAL_GPIO_WritePin>
}
 8012c5a:	bf00      	nop
 8012c5c:	bd80      	pop	{r7, pc}
 8012c5e:	bf00      	nop
 8012c60:	58020000 	.word	0x58020000

08012c64 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8012c6e:	bf00      	nop
 8012c70:	4b08      	ldr	r3, [pc, #32]	@ (8012c94 <SPI_TxByte+0x30>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	695b      	ldr	r3, [r3, #20]
 8012c76:	f003 0302 	and.w	r3, r3, #2
 8012c7a:	2b02      	cmp	r3, #2
 8012c7c:	d1f8      	bne.n	8012c70 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8012c7e:	1df9      	adds	r1, r7, #7
 8012c80:	2364      	movs	r3, #100	@ 0x64
 8012c82:	2201      	movs	r2, #1
 8012c84:	4803      	ldr	r0, [pc, #12]	@ (8012c94 <SPI_TxByte+0x30>)
 8012c86:	f7fa fa21 	bl	800d0cc <HAL_SPI_Transmit>
}
 8012c8a:	bf00      	nop
 8012c8c:	3708      	adds	r7, #8
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}
 8012c92:	bf00      	nop
 8012c94:	24000db8 	.word	0x24000db8

08012c98 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8012ca4:	bf00      	nop
 8012ca6:	4b08      	ldr	r3, [pc, #32]	@ (8012cc8 <SPI_TxBuffer+0x30>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	695b      	ldr	r3, [r3, #20]
 8012cac:	f003 0302 	and.w	r3, r3, #2
 8012cb0:	2b02      	cmp	r3, #2
 8012cb2:	d1f8      	bne.n	8012ca6 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8012cb4:	887a      	ldrh	r2, [r7, #2]
 8012cb6:	2364      	movs	r3, #100	@ 0x64
 8012cb8:	6879      	ldr	r1, [r7, #4]
 8012cba:	4803      	ldr	r0, [pc, #12]	@ (8012cc8 <SPI_TxBuffer+0x30>)
 8012cbc:	f7fa fa06 	bl	800d0cc <HAL_SPI_Transmit>
}
 8012cc0:	bf00      	nop
 8012cc2:	3708      	adds	r7, #8
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	24000db8 	.word	0x24000db8

08012ccc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b084      	sub	sp, #16
 8012cd0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8012cd2:	23ff      	movs	r3, #255	@ 0xff
 8012cd4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8012cd6:	bf00      	nop
 8012cd8:	4b09      	ldr	r3, [pc, #36]	@ (8012d00 <SPI_RxByte+0x34>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	695b      	ldr	r3, [r3, #20]
 8012cde:	f003 0302 	and.w	r3, r3, #2
 8012ce2:	2b02      	cmp	r3, #2
 8012ce4:	d1f8      	bne.n	8012cd8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8012ce6:	1dba      	adds	r2, r7, #6
 8012ce8:	1df9      	adds	r1, r7, #7
 8012cea:	2364      	movs	r3, #100	@ 0x64
 8012cec:	9300      	str	r3, [sp, #0]
 8012cee:	2301      	movs	r3, #1
 8012cf0:	4803      	ldr	r0, [pc, #12]	@ (8012d00 <SPI_RxByte+0x34>)
 8012cf2:	f7fa fe4b 	bl	800d98c <HAL_SPI_TransmitReceive>
  return data;
 8012cf6:	79bb      	ldrb	r3, [r7, #6]
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3708      	adds	r7, #8
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}
 8012d00:	24000db8 	.word	0x24000db8

08012d04 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b082      	sub	sp, #8
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8012d0c:	f7ff ffde 	bl	8012ccc <SPI_RxByte>
 8012d10:	4603      	mov	r3, r0
 8012d12:	461a      	mov	r2, r3
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	701a      	strb	r2, [r3, #0]
}
 8012d18:	bf00      	nop
 8012d1a:	3708      	adds	r7, #8
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8012d26:	4b0a      	ldr	r3, [pc, #40]	@ (8012d50 <SD_ReadyWait+0x30>)
 8012d28:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8012d2c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8012d2e:	f7ff ffcd 	bl	8012ccc <SPI_RxByte>
 8012d32:	4603      	mov	r3, r0
 8012d34:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8012d36:	79fb      	ldrb	r3, [r7, #7]
 8012d38:	2bff      	cmp	r3, #255	@ 0xff
 8012d3a:	d003      	beq.n	8012d44 <SD_ReadyWait+0x24>
 8012d3c:	4b04      	ldr	r3, [pc, #16]	@ (8012d50 <SD_ReadyWait+0x30>)
 8012d3e:	881b      	ldrh	r3, [r3, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d1f4      	bne.n	8012d2e <SD_ReadyWait+0xe>
  return res;
 8012d44:	79fb      	ldrb	r3, [r7, #7]
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3708      	adds	r7, #8
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	bf00      	nop
 8012d50:	24002982 	.word	0x24002982

08012d54 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8012d5a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8012d5e:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8012d60:	f7ff ff74 	bl	8012c4c <DESELECT>
  for(int i = 0; i < 10; i++)
 8012d64:	2300      	movs	r3, #0
 8012d66:	60bb      	str	r3, [r7, #8]
 8012d68:	e005      	b.n	8012d76 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8012d6a:	20ff      	movs	r0, #255	@ 0xff
 8012d6c:	f7ff ff7a 	bl	8012c64 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	3301      	adds	r3, #1
 8012d74:	60bb      	str	r3, [r7, #8]
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	2b09      	cmp	r3, #9
 8012d7a:	ddf6      	ble.n	8012d6a <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8012d7c:	f7ff ff5a 	bl	8012c34 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8012d80:	2340      	movs	r3, #64	@ 0x40
 8012d82:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8012d84:	2300      	movs	r3, #0
 8012d86:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8012d90:	2300      	movs	r3, #0
 8012d92:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8012d94:	2395      	movs	r3, #149	@ 0x95
 8012d96:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8012d98:	463b      	mov	r3, r7
 8012d9a:	2106      	movs	r1, #6
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7ff ff7b 	bl	8012c98 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8012da2:	e002      	b.n	8012daa <SD_PowerOn+0x56>
  {
    cnt--;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	3b01      	subs	r3, #1
 8012da8:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8012daa:	f7ff ff8f 	bl	8012ccc <SPI_RxByte>
 8012dae:	4603      	mov	r3, r0
 8012db0:	2b01      	cmp	r3, #1
 8012db2:	d002      	beq.n	8012dba <SD_PowerOn+0x66>
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d1f4      	bne.n	8012da4 <SD_PowerOn+0x50>
  }
  DESELECT();
 8012dba:	f7ff ff47 	bl	8012c4c <DESELECT>
  SPI_TxByte(0XFF);
 8012dbe:	20ff      	movs	r0, #255	@ 0xff
 8012dc0:	f7ff ff50 	bl	8012c64 <SPI_TxByte>
  PowerFlag = 1;
 8012dc4:	4b03      	ldr	r3, [pc, #12]	@ (8012dd4 <SD_PowerOn+0x80>)
 8012dc6:	2201      	movs	r2, #1
 8012dc8:	701a      	strb	r2, [r3, #0]
}
 8012dca:	bf00      	nop
 8012dcc:	3710      	adds	r7, #16
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}
 8012dd2:	bf00      	nop
 8012dd4:	24002985 	.word	0x24002985

08012dd8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8012dd8:	b480      	push	{r7}
 8012dda:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8012ddc:	4b03      	ldr	r3, [pc, #12]	@ (8012dec <SD_PowerOff+0x14>)
 8012dde:	2200      	movs	r2, #0
 8012de0:	701a      	strb	r2, [r3, #0]
}
 8012de2:	bf00      	nop
 8012de4:	46bd      	mov	sp, r7
 8012de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dea:	4770      	bx	lr
 8012dec:	24002985 	.word	0x24002985

08012df0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8012df0:	b480      	push	{r7}
 8012df2:	af00      	add	r7, sp, #0
  return PowerFlag;
 8012df4:	4b03      	ldr	r3, [pc, #12]	@ (8012e04 <SD_CheckPower+0x14>)
 8012df6:	781b      	ldrb	r3, [r3, #0]
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e00:	4770      	bx	lr
 8012e02:	bf00      	nop
 8012e04:	24002985 	.word	0x24002985

08012e08 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b084      	sub	sp, #16
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8012e12:	4b13      	ldr	r3, [pc, #76]	@ (8012e60 <SD_RxDataBlock+0x58>)
 8012e14:	22c8      	movs	r2, #200	@ 0xc8
 8012e16:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8012e18:	f7ff ff58 	bl	8012ccc <SPI_RxByte>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8012e20:	7bfb      	ldrb	r3, [r7, #15]
 8012e22:	2bff      	cmp	r3, #255	@ 0xff
 8012e24:	d103      	bne.n	8012e2e <SD_RxDataBlock+0x26>
 8012e26:	4b0e      	ldr	r3, [pc, #56]	@ (8012e60 <SD_RxDataBlock+0x58>)
 8012e28:	881b      	ldrh	r3, [r3, #0]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d1f4      	bne.n	8012e18 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
 8012e30:	2bfe      	cmp	r3, #254	@ 0xfe
 8012e32:	d001      	beq.n	8012e38 <SD_RxDataBlock+0x30>
 8012e34:	2300      	movs	r3, #0
 8012e36:	e00f      	b.n	8012e58 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	1c5a      	adds	r2, r3, #1
 8012e3c:	607a      	str	r2, [r7, #4]
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7ff ff60 	bl	8012d04 <SPI_RxBytePtr>
  } while(len--);
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	1e5a      	subs	r2, r3, #1
 8012e48:	603a      	str	r2, [r7, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d1f4      	bne.n	8012e38 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8012e4e:	f7ff ff3d 	bl	8012ccc <SPI_RxByte>
  SPI_RxByte();
 8012e52:	f7ff ff3b 	bl	8012ccc <SPI_RxByte>
  return TRUE;
 8012e56:	2301      	movs	r3, #1
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3710      	adds	r7, #16
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	24002980 	.word	0x24002980

08012e64 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b084      	sub	sp, #16
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8012e70:	2300      	movs	r3, #0
 8012e72:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8012e74:	f7ff ff54 	bl	8012d20 <SD_ReadyWait>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	2bff      	cmp	r3, #255	@ 0xff
 8012e7c:	d001      	beq.n	8012e82 <SD_TxDataBlock+0x1e>
 8012e7e:	2300      	movs	r3, #0
 8012e80:	e02f      	b.n	8012ee2 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8012e82:	78fb      	ldrb	r3, [r7, #3]
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7ff feed 	bl	8012c64 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8012e8a:	78fb      	ldrb	r3, [r7, #3]
 8012e8c:	2bfd      	cmp	r3, #253	@ 0xfd
 8012e8e:	d020      	beq.n	8012ed2 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8012e90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7ff feff 	bl	8012c98 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8012e9a:	f7ff ff17 	bl	8012ccc <SPI_RxByte>
    SPI_RxByte();
 8012e9e:	f7ff ff15 	bl	8012ccc <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8012ea2:	e00b      	b.n	8012ebc <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8012ea4:	f7ff ff12 	bl	8012ccc <SPI_RxByte>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8012eac:	7bfb      	ldrb	r3, [r7, #15]
 8012eae:	f003 031f 	and.w	r3, r3, #31
 8012eb2:	2b05      	cmp	r3, #5
 8012eb4:	d006      	beq.n	8012ec4 <SD_TxDataBlock+0x60>
      i++;
 8012eb6:	7bbb      	ldrb	r3, [r7, #14]
 8012eb8:	3301      	adds	r3, #1
 8012eba:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8012ebc:	7bbb      	ldrb	r3, [r7, #14]
 8012ebe:	2b40      	cmp	r3, #64	@ 0x40
 8012ec0:	d9f0      	bls.n	8012ea4 <SD_TxDataBlock+0x40>
 8012ec2:	e000      	b.n	8012ec6 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8012ec4:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8012ec6:	bf00      	nop
 8012ec8:	f7ff ff00 	bl	8012ccc <SPI_RxByte>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d0fa      	beq.n	8012ec8 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8012ed2:	7bfb      	ldrb	r3, [r7, #15]
 8012ed4:	f003 031f 	and.w	r3, r3, #31
 8012ed8:	2b05      	cmp	r3, #5
 8012eda:	d101      	bne.n	8012ee0 <SD_TxDataBlock+0x7c>
 8012edc:	2301      	movs	r3, #1
 8012ede:	e000      	b.n	8012ee2 <SD_TxDataBlock+0x7e>

  return FALSE;
 8012ee0:	2300      	movs	r3, #0
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3710      	adds	r7, #16
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}

08012eea <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8012eea:	b580      	push	{r7, lr}
 8012eec:	b084      	sub	sp, #16
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	6039      	str	r1, [r7, #0]
 8012ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8012ef6:	f7ff ff13 	bl	8012d20 <SD_ReadyWait>
 8012efa:	4603      	mov	r3, r0
 8012efc:	2bff      	cmp	r3, #255	@ 0xff
 8012efe:	d001      	beq.n	8012f04 <SD_SendCmd+0x1a>
 8012f00:	23ff      	movs	r3, #255	@ 0xff
 8012f02:	e042      	b.n	8012f8a <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8012f04:	79fb      	ldrb	r3, [r7, #7]
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7ff feac 	bl	8012c64 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	0e1b      	lsrs	r3, r3, #24
 8012f10:	b2db      	uxtb	r3, r3
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7ff fea6 	bl	8012c64 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	0c1b      	lsrs	r3, r3, #16
 8012f1c:	b2db      	uxtb	r3, r3
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7ff fea0 	bl	8012c64 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8012f24:	683b      	ldr	r3, [r7, #0]
 8012f26:	0a1b      	lsrs	r3, r3, #8
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7ff fe9a 	bl	8012c64 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	b2db      	uxtb	r3, r3
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7ff fe95 	bl	8012c64 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8012f3a:	79fb      	ldrb	r3, [r7, #7]
 8012f3c:	2b40      	cmp	r3, #64	@ 0x40
 8012f3e:	d102      	bne.n	8012f46 <SD_SendCmd+0x5c>
 8012f40:	2395      	movs	r3, #149	@ 0x95
 8012f42:	73fb      	strb	r3, [r7, #15]
 8012f44:	e007      	b.n	8012f56 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8012f46:	79fb      	ldrb	r3, [r7, #7]
 8012f48:	2b48      	cmp	r3, #72	@ 0x48
 8012f4a:	d102      	bne.n	8012f52 <SD_SendCmd+0x68>
 8012f4c:	2387      	movs	r3, #135	@ 0x87
 8012f4e:	73fb      	strb	r3, [r7, #15]
 8012f50:	e001      	b.n	8012f56 <SD_SendCmd+0x6c>
  else crc = 1;
 8012f52:	2301      	movs	r3, #1
 8012f54:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8012f56:	7bfb      	ldrb	r3, [r7, #15]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7ff fe83 	bl	8012c64 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8012f5e:	79fb      	ldrb	r3, [r7, #7]
 8012f60:	2b4c      	cmp	r3, #76	@ 0x4c
 8012f62:	d101      	bne.n	8012f68 <SD_SendCmd+0x7e>
 8012f64:	f7ff feb2 	bl	8012ccc <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8012f68:	230a      	movs	r3, #10
 8012f6a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8012f6c:	f7ff feae 	bl	8012ccc <SPI_RxByte>
 8012f70:	4603      	mov	r3, r0
 8012f72:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8012f74:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	da05      	bge.n	8012f88 <SD_SendCmd+0x9e>
 8012f7c:	7bbb      	ldrb	r3, [r7, #14]
 8012f7e:	3b01      	subs	r3, #1
 8012f80:	73bb      	strb	r3, [r7, #14]
 8012f82:	7bbb      	ldrb	r3, [r7, #14]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d1f1      	bne.n	8012f6c <SD_SendCmd+0x82>

  return res;
 8012f88:	7b7b      	ldrb	r3, [r7, #13]
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3710      	adds	r7, #16
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
	...

08012f94 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8012f94:	b590      	push	{r4, r7, lr}
 8012f96:	b085      	sub	sp, #20
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8012f9e:	79fb      	ldrb	r3, [r7, #7]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d001      	beq.n	8012fa8 <SD_disk_initialize+0x14>
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	e0d1      	b.n	801314c <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8012fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8013154 <SD_disk_initialize+0x1c0>)
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	b2db      	uxtb	r3, r3
 8012fae:	f003 0302 	and.w	r3, r3, #2
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d003      	beq.n	8012fbe <SD_disk_initialize+0x2a>
 8012fb6:	4b67      	ldr	r3, [pc, #412]	@ (8013154 <SD_disk_initialize+0x1c0>)
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	b2db      	uxtb	r3, r3
 8012fbc:	e0c6      	b.n	801314c <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8012fbe:	f7ff fec9 	bl	8012d54 <SD_PowerOn>
  /* slave select */
  SELECT();
 8012fc2:	f7ff fe37 	bl	8012c34 <SELECT>
  /* check disk type */
  type = 0;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8012fca:	2100      	movs	r1, #0
 8012fcc:	2040      	movs	r0, #64	@ 0x40
 8012fce:	f7ff ff8c 	bl	8012eea <SD_SendCmd>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b01      	cmp	r3, #1
 8012fd6:	f040 80a1 	bne.w	801311c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8012fda:	4b5f      	ldr	r3, [pc, #380]	@ (8013158 <SD_disk_initialize+0x1c4>)
 8012fdc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012fe0:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8012fe2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8012fe6:	2048      	movs	r0, #72	@ 0x48
 8012fe8:	f7ff ff7f 	bl	8012eea <SD_SendCmd>
 8012fec:	4603      	mov	r3, r0
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	d155      	bne.n	801309e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	73fb      	strb	r3, [r7, #15]
 8012ff6:	e00c      	b.n	8013012 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8012ff8:	7bfc      	ldrb	r4, [r7, #15]
 8012ffa:	f7ff fe67 	bl	8012ccc <SPI_RxByte>
 8012ffe:	4603      	mov	r3, r0
 8013000:	461a      	mov	r2, r3
 8013002:	f104 0310 	add.w	r3, r4, #16
 8013006:	443b      	add	r3, r7
 8013008:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 801300c:	7bfb      	ldrb	r3, [r7, #15]
 801300e:	3301      	adds	r3, #1
 8013010:	73fb      	strb	r3, [r7, #15]
 8013012:	7bfb      	ldrb	r3, [r7, #15]
 8013014:	2b03      	cmp	r3, #3
 8013016:	d9ef      	bls.n	8012ff8 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8013018:	7abb      	ldrb	r3, [r7, #10]
 801301a:	2b01      	cmp	r3, #1
 801301c:	d17e      	bne.n	801311c <SD_disk_initialize+0x188>
 801301e:	7afb      	ldrb	r3, [r7, #11]
 8013020:	2baa      	cmp	r3, #170	@ 0xaa
 8013022:	d17b      	bne.n	801311c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8013024:	2100      	movs	r1, #0
 8013026:	2077      	movs	r0, #119	@ 0x77
 8013028:	f7ff ff5f 	bl	8012eea <SD_SendCmd>
 801302c:	4603      	mov	r3, r0
 801302e:	2b01      	cmp	r3, #1
 8013030:	d807      	bhi.n	8013042 <SD_disk_initialize+0xae>
 8013032:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8013036:	2069      	movs	r0, #105	@ 0x69
 8013038:	f7ff ff57 	bl	8012eea <SD_SendCmd>
 801303c:	4603      	mov	r3, r0
 801303e:	2b00      	cmp	r3, #0
 8013040:	d004      	beq.n	801304c <SD_disk_initialize+0xb8>
        } while (Timer1);
 8013042:	4b45      	ldr	r3, [pc, #276]	@ (8013158 <SD_disk_initialize+0x1c4>)
 8013044:	881b      	ldrh	r3, [r3, #0]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d1ec      	bne.n	8013024 <SD_disk_initialize+0x90>
 801304a:	e000      	b.n	801304e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 801304c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 801304e:	4b42      	ldr	r3, [pc, #264]	@ (8013158 <SD_disk_initialize+0x1c4>)
 8013050:	881b      	ldrh	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d062      	beq.n	801311c <SD_disk_initialize+0x188>
 8013056:	2100      	movs	r1, #0
 8013058:	207a      	movs	r0, #122	@ 0x7a
 801305a:	f7ff ff46 	bl	8012eea <SD_SendCmd>
 801305e:	4603      	mov	r3, r0
 8013060:	2b00      	cmp	r3, #0
 8013062:	d15b      	bne.n	801311c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8013064:	2300      	movs	r3, #0
 8013066:	73fb      	strb	r3, [r7, #15]
 8013068:	e00c      	b.n	8013084 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 801306a:	7bfc      	ldrb	r4, [r7, #15]
 801306c:	f7ff fe2e 	bl	8012ccc <SPI_RxByte>
 8013070:	4603      	mov	r3, r0
 8013072:	461a      	mov	r2, r3
 8013074:	f104 0310 	add.w	r3, r4, #16
 8013078:	443b      	add	r3, r7
 801307a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 801307e:	7bfb      	ldrb	r3, [r7, #15]
 8013080:	3301      	adds	r3, #1
 8013082:	73fb      	strb	r3, [r7, #15]
 8013084:	7bfb      	ldrb	r3, [r7, #15]
 8013086:	2b03      	cmp	r3, #3
 8013088:	d9ef      	bls.n	801306a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 801308a:	7a3b      	ldrb	r3, [r7, #8]
 801308c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013090:	2b00      	cmp	r3, #0
 8013092:	d001      	beq.n	8013098 <SD_disk_initialize+0x104>
 8013094:	230c      	movs	r3, #12
 8013096:	e000      	b.n	801309a <SD_disk_initialize+0x106>
 8013098:	2304      	movs	r3, #4
 801309a:	73bb      	strb	r3, [r7, #14]
 801309c:	e03e      	b.n	801311c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 801309e:	2100      	movs	r1, #0
 80130a0:	2077      	movs	r0, #119	@ 0x77
 80130a2:	f7ff ff22 	bl	8012eea <SD_SendCmd>
 80130a6:	4603      	mov	r3, r0
 80130a8:	2b01      	cmp	r3, #1
 80130aa:	d808      	bhi.n	80130be <SD_disk_initialize+0x12a>
 80130ac:	2100      	movs	r1, #0
 80130ae:	2069      	movs	r0, #105	@ 0x69
 80130b0:	f7ff ff1b 	bl	8012eea <SD_SendCmd>
 80130b4:	4603      	mov	r3, r0
 80130b6:	2b01      	cmp	r3, #1
 80130b8:	d801      	bhi.n	80130be <SD_disk_initialize+0x12a>
 80130ba:	2302      	movs	r3, #2
 80130bc:	e000      	b.n	80130c0 <SD_disk_initialize+0x12c>
 80130be:	2301      	movs	r3, #1
 80130c0:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 80130c2:	7bbb      	ldrb	r3, [r7, #14]
 80130c4:	2b02      	cmp	r3, #2
 80130c6:	d10e      	bne.n	80130e6 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80130c8:	2100      	movs	r1, #0
 80130ca:	2077      	movs	r0, #119	@ 0x77
 80130cc:	f7ff ff0d 	bl	8012eea <SD_SendCmd>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b01      	cmp	r3, #1
 80130d4:	d80e      	bhi.n	80130f4 <SD_disk_initialize+0x160>
 80130d6:	2100      	movs	r1, #0
 80130d8:	2069      	movs	r0, #105	@ 0x69
 80130da:	f7ff ff06 	bl	8012eea <SD_SendCmd>
 80130de:	4603      	mov	r3, r0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d107      	bne.n	80130f4 <SD_disk_initialize+0x160>
 80130e4:	e00c      	b.n	8013100 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80130e6:	2100      	movs	r1, #0
 80130e8:	2041      	movs	r0, #65	@ 0x41
 80130ea:	f7ff fefe 	bl	8012eea <SD_SendCmd>
 80130ee:	4603      	mov	r3, r0
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d004      	beq.n	80130fe <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80130f4:	4b18      	ldr	r3, [pc, #96]	@ (8013158 <SD_disk_initialize+0x1c4>)
 80130f6:	881b      	ldrh	r3, [r3, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d1e2      	bne.n	80130c2 <SD_disk_initialize+0x12e>
 80130fc:	e000      	b.n	8013100 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80130fe:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8013100:	4b15      	ldr	r3, [pc, #84]	@ (8013158 <SD_disk_initialize+0x1c4>)
 8013102:	881b      	ldrh	r3, [r3, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d007      	beq.n	8013118 <SD_disk_initialize+0x184>
 8013108:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801310c:	2050      	movs	r0, #80	@ 0x50
 801310e:	f7ff feec 	bl	8012eea <SD_SendCmd>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d001      	beq.n	801311c <SD_disk_initialize+0x188>
 8013118:	2300      	movs	r3, #0
 801311a:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 801311c:	4a0f      	ldr	r2, [pc, #60]	@ (801315c <SD_disk_initialize+0x1c8>)
 801311e:	7bbb      	ldrb	r3, [r7, #14]
 8013120:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8013122:	f7ff fd93 	bl	8012c4c <DESELECT>
  SPI_RxByte();
 8013126:	f7ff fdd1 	bl	8012ccc <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 801312a:	7bbb      	ldrb	r3, [r7, #14]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d008      	beq.n	8013142 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8013130:	4b08      	ldr	r3, [pc, #32]	@ (8013154 <SD_disk_initialize+0x1c0>)
 8013132:	781b      	ldrb	r3, [r3, #0]
 8013134:	b2db      	uxtb	r3, r3
 8013136:	f023 0301 	bic.w	r3, r3, #1
 801313a:	b2da      	uxtb	r2, r3
 801313c:	4b05      	ldr	r3, [pc, #20]	@ (8013154 <SD_disk_initialize+0x1c0>)
 801313e:	701a      	strb	r2, [r3, #0]
 8013140:	e001      	b.n	8013146 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8013142:	f7ff fe49 	bl	8012dd8 <SD_PowerOff>
  }
  return Stat;
 8013146:	4b03      	ldr	r3, [pc, #12]	@ (8013154 <SD_disk_initialize+0x1c0>)
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	b2db      	uxtb	r3, r3
}
 801314c:	4618      	mov	r0, r3
 801314e:	3714      	adds	r7, #20
 8013150:	46bd      	mov	sp, r7
 8013152:	bd90      	pop	{r4, r7, pc}
 8013154:	240000c0 	.word	0x240000c0
 8013158:	24002980 	.word	0x24002980
 801315c:	24002984 	.word	0x24002984

08013160 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8013160:	b480      	push	{r7}
 8013162:	b083      	sub	sp, #12
 8013164:	af00      	add	r7, sp, #0
 8013166:	4603      	mov	r3, r0
 8013168:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 801316a:	79fb      	ldrb	r3, [r7, #7]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d001      	beq.n	8013174 <SD_disk_status+0x14>
 8013170:	2301      	movs	r3, #1
 8013172:	e002      	b.n	801317a <SD_disk_status+0x1a>
  return Stat;
 8013174:	4b04      	ldr	r3, [pc, #16]	@ (8013188 <SD_disk_status+0x28>)
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	b2db      	uxtb	r3, r3
}
 801317a:	4618      	mov	r0, r3
 801317c:	370c      	adds	r7, #12
 801317e:	46bd      	mov	sp, r7
 8013180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013184:	4770      	bx	lr
 8013186:	bf00      	nop
 8013188:	240000c0 	.word	0x240000c0

0801318c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b084      	sub	sp, #16
 8013190:	af00      	add	r7, sp, #0
 8013192:	60b9      	str	r1, [r7, #8]
 8013194:	607a      	str	r2, [r7, #4]
 8013196:	603b      	str	r3, [r7, #0]
 8013198:	4603      	mov	r3, r0
 801319a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 801319c:	7bfb      	ldrb	r3, [r7, #15]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d102      	bne.n	80131a8 <SD_disk_read+0x1c>
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d101      	bne.n	80131ac <SD_disk_read+0x20>
 80131a8:	2304      	movs	r3, #4
 80131aa:	e051      	b.n	8013250 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80131ac:	4b2a      	ldr	r3, [pc, #168]	@ (8013258 <SD_disk_read+0xcc>)
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	f003 0301 	and.w	r3, r3, #1
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d001      	beq.n	80131be <SD_disk_read+0x32>
 80131ba:	2303      	movs	r3, #3
 80131bc:	e048      	b.n	8013250 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80131be:	4b27      	ldr	r3, [pc, #156]	@ (801325c <SD_disk_read+0xd0>)
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	f003 0304 	and.w	r3, r3, #4
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d102      	bne.n	80131d0 <SD_disk_read+0x44>
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	025b      	lsls	r3, r3, #9
 80131ce:	607b      	str	r3, [r7, #4]

  SELECT();
 80131d0:	f7ff fd30 	bl	8012c34 <SELECT>

  if (count == 1)
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	2b01      	cmp	r3, #1
 80131d8:	d111      	bne.n	80131fe <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80131da:	6879      	ldr	r1, [r7, #4]
 80131dc:	2051      	movs	r0, #81	@ 0x51
 80131de:	f7ff fe84 	bl	8012eea <SD_SendCmd>
 80131e2:	4603      	mov	r3, r0
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d129      	bne.n	801323c <SD_disk_read+0xb0>
 80131e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80131ec:	68b8      	ldr	r0, [r7, #8]
 80131ee:	f7ff fe0b 	bl	8012e08 <SD_RxDataBlock>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d021      	beq.n	801323c <SD_disk_read+0xb0>
 80131f8:	2300      	movs	r3, #0
 80131fa:	603b      	str	r3, [r7, #0]
 80131fc:	e01e      	b.n	801323c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80131fe:	6879      	ldr	r1, [r7, #4]
 8013200:	2052      	movs	r0, #82	@ 0x52
 8013202:	f7ff fe72 	bl	8012eea <SD_SendCmd>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d117      	bne.n	801323c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 801320c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013210:	68b8      	ldr	r0, [r7, #8]
 8013212:	f7ff fdf9 	bl	8012e08 <SD_RxDataBlock>
 8013216:	4603      	mov	r3, r0
 8013218:	2b00      	cmp	r3, #0
 801321a:	d00a      	beq.n	8013232 <SD_disk_read+0xa6>
        buff += 512;
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8013222:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	3b01      	subs	r3, #1
 8013228:	603b      	str	r3, [r7, #0]
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d1ed      	bne.n	801320c <SD_disk_read+0x80>
 8013230:	e000      	b.n	8013234 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8013232:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8013234:	2100      	movs	r1, #0
 8013236:	204c      	movs	r0, #76	@ 0x4c
 8013238:	f7ff fe57 	bl	8012eea <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 801323c:	f7ff fd06 	bl	8012c4c <DESELECT>
  SPI_RxByte();
 8013240:	f7ff fd44 	bl	8012ccc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	bf14      	ite	ne
 801324a:	2301      	movne	r3, #1
 801324c:	2300      	moveq	r3, #0
 801324e:	b2db      	uxtb	r3, r3
}
 8013250:	4618      	mov	r0, r3
 8013252:	3710      	adds	r7, #16
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}
 8013258:	240000c0 	.word	0x240000c0
 801325c:	24002984 	.word	0x24002984

08013260 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
 8013266:	60b9      	str	r1, [r7, #8]
 8013268:	607a      	str	r2, [r7, #4]
 801326a:	603b      	str	r3, [r7, #0]
 801326c:	4603      	mov	r3, r0
 801326e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8013270:	7bfb      	ldrb	r3, [r7, #15]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d102      	bne.n	801327c <SD_disk_write+0x1c>
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d101      	bne.n	8013280 <SD_disk_write+0x20>
 801327c:	2304      	movs	r3, #4
 801327e:	e06b      	b.n	8013358 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013280:	4b37      	ldr	r3, [pc, #220]	@ (8013360 <SD_disk_write+0x100>)
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	b2db      	uxtb	r3, r3
 8013286:	f003 0301 	and.w	r3, r3, #1
 801328a:	2b00      	cmp	r3, #0
 801328c:	d001      	beq.n	8013292 <SD_disk_write+0x32>
 801328e:	2303      	movs	r3, #3
 8013290:	e062      	b.n	8013358 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8013292:	4b33      	ldr	r3, [pc, #204]	@ (8013360 <SD_disk_write+0x100>)
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	b2db      	uxtb	r3, r3
 8013298:	f003 0304 	and.w	r3, r3, #4
 801329c:	2b00      	cmp	r3, #0
 801329e:	d001      	beq.n	80132a4 <SD_disk_write+0x44>
 80132a0:	2302      	movs	r3, #2
 80132a2:	e059      	b.n	8013358 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80132a4:	4b2f      	ldr	r3, [pc, #188]	@ (8013364 <SD_disk_write+0x104>)
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	f003 0304 	and.w	r3, r3, #4
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d102      	bne.n	80132b6 <SD_disk_write+0x56>
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	025b      	lsls	r3, r3, #9
 80132b4:	607b      	str	r3, [r7, #4]

  SELECT();
 80132b6:	f7ff fcbd 	bl	8012c34 <SELECT>

  if (count == 1)
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	2b01      	cmp	r3, #1
 80132be:	d110      	bne.n	80132e2 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80132c0:	6879      	ldr	r1, [r7, #4]
 80132c2:	2058      	movs	r0, #88	@ 0x58
 80132c4:	f7ff fe11 	bl	8012eea <SD_SendCmd>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d13a      	bne.n	8013344 <SD_disk_write+0xe4>
 80132ce:	21fe      	movs	r1, #254	@ 0xfe
 80132d0:	68b8      	ldr	r0, [r7, #8]
 80132d2:	f7ff fdc7 	bl	8012e64 <SD_TxDataBlock>
 80132d6:	4603      	mov	r3, r0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d033      	beq.n	8013344 <SD_disk_write+0xe4>
      count = 0;
 80132dc:	2300      	movs	r3, #0
 80132de:	603b      	str	r3, [r7, #0]
 80132e0:	e030      	b.n	8013344 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80132e2:	4b20      	ldr	r3, [pc, #128]	@ (8013364 <SD_disk_write+0x104>)
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	f003 0302 	and.w	r3, r3, #2
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d007      	beq.n	80132fe <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80132ee:	2100      	movs	r1, #0
 80132f0:	2077      	movs	r0, #119	@ 0x77
 80132f2:	f7ff fdfa 	bl	8012eea <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80132f6:	6839      	ldr	r1, [r7, #0]
 80132f8:	2057      	movs	r0, #87	@ 0x57
 80132fa:	f7ff fdf6 	bl	8012eea <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80132fe:	6879      	ldr	r1, [r7, #4]
 8013300:	2059      	movs	r0, #89	@ 0x59
 8013302:	f7ff fdf2 	bl	8012eea <SD_SendCmd>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d11b      	bne.n	8013344 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 801330c:	21fc      	movs	r1, #252	@ 0xfc
 801330e:	68b8      	ldr	r0, [r7, #8]
 8013310:	f7ff fda8 	bl	8012e64 <SD_TxDataBlock>
 8013314:	4603      	mov	r3, r0
 8013316:	2b00      	cmp	r3, #0
 8013318:	d00a      	beq.n	8013330 <SD_disk_write+0xd0>
        buff += 512;
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8013320:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	3b01      	subs	r3, #1
 8013326:	603b      	str	r3, [r7, #0]
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d1ee      	bne.n	801330c <SD_disk_write+0xac>
 801332e:	e000      	b.n	8013332 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8013330:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8013332:	21fd      	movs	r1, #253	@ 0xfd
 8013334:	2000      	movs	r0, #0
 8013336:	f7ff fd95 	bl	8012e64 <SD_TxDataBlock>
 801333a:	4603      	mov	r3, r0
 801333c:	2b00      	cmp	r3, #0
 801333e:	d101      	bne.n	8013344 <SD_disk_write+0xe4>
      {
        count = 1;
 8013340:	2301      	movs	r3, #1
 8013342:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8013344:	f7ff fc82 	bl	8012c4c <DESELECT>
  SPI_RxByte();
 8013348:	f7ff fcc0 	bl	8012ccc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	2b00      	cmp	r3, #0
 8013350:	bf14      	ite	ne
 8013352:	2301      	movne	r3, #1
 8013354:	2300      	moveq	r3, #0
 8013356:	b2db      	uxtb	r3, r3
}
 8013358:	4618      	mov	r0, r3
 801335a:	3710      	adds	r7, #16
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	240000c0 	.word	0x240000c0
 8013364:	24002984 	.word	0x24002984

08013368 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8013368:	b590      	push	{r4, r7, lr}
 801336a:	b08b      	sub	sp, #44	@ 0x2c
 801336c:	af00      	add	r7, sp, #0
 801336e:	4603      	mov	r3, r0
 8013370:	603a      	str	r2, [r7, #0]
 8013372:	71fb      	strb	r3, [r7, #7]
 8013374:	460b      	mov	r3, r1
 8013376:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 801337c:	79fb      	ldrb	r3, [r7, #7]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d001      	beq.n	8013386 <SD_disk_ioctl+0x1e>
 8013382:	2304      	movs	r3, #4
 8013384:	e113      	b.n	80135ae <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8013386:	2301      	movs	r3, #1
 8013388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 801338c:	79bb      	ldrb	r3, [r7, #6]
 801338e:	2b05      	cmp	r3, #5
 8013390:	d124      	bne.n	80133dc <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8013392:	6a3b      	ldr	r3, [r7, #32]
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	2b02      	cmp	r3, #2
 8013398:	d012      	beq.n	80133c0 <SD_disk_ioctl+0x58>
 801339a:	2b02      	cmp	r3, #2
 801339c:	dc1a      	bgt.n	80133d4 <SD_disk_ioctl+0x6c>
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d002      	beq.n	80133a8 <SD_disk_ioctl+0x40>
 80133a2:	2b01      	cmp	r3, #1
 80133a4:	d006      	beq.n	80133b4 <SD_disk_ioctl+0x4c>
 80133a6:	e015      	b.n	80133d4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80133a8:	f7ff fd16 	bl	8012dd8 <SD_PowerOff>
      res = RES_OK;
 80133ac:	2300      	movs	r3, #0
 80133ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80133b2:	e0fa      	b.n	80135aa <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 80133b4:	f7ff fcce 	bl	8012d54 <SD_PowerOn>
      res = RES_OK;
 80133b8:	2300      	movs	r3, #0
 80133ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80133be:	e0f4      	b.n	80135aa <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80133c0:	6a3b      	ldr	r3, [r7, #32]
 80133c2:	1c5c      	adds	r4, r3, #1
 80133c4:	f7ff fd14 	bl	8012df0 <SD_CheckPower>
 80133c8:	4603      	mov	r3, r0
 80133ca:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80133cc:	2300      	movs	r3, #0
 80133ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80133d2:	e0ea      	b.n	80135aa <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80133d4:	2304      	movs	r3, #4
 80133d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80133da:	e0e6      	b.n	80135aa <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80133dc:	4b76      	ldr	r3, [pc, #472]	@ (80135b8 <SD_disk_ioctl+0x250>)
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	b2db      	uxtb	r3, r3
 80133e2:	f003 0301 	and.w	r3, r3, #1
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d001      	beq.n	80133ee <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 80133ea:	2303      	movs	r3, #3
 80133ec:	e0df      	b.n	80135ae <SD_disk_ioctl+0x246>
    }
    SELECT();
 80133ee:	f7ff fc21 	bl	8012c34 <SELECT>
    switch (ctrl)
 80133f2:	79bb      	ldrb	r3, [r7, #6]
 80133f4:	2b0d      	cmp	r3, #13
 80133f6:	f200 80c9 	bhi.w	801358c <SD_disk_ioctl+0x224>
 80133fa:	a201      	add	r2, pc, #4	@ (adr r2, 8013400 <SD_disk_ioctl+0x98>)
 80133fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013400:	080134f7 	.word	0x080134f7
 8013404:	08013439 	.word	0x08013439
 8013408:	080134e7 	.word	0x080134e7
 801340c:	0801358d 	.word	0x0801358d
 8013410:	0801358d 	.word	0x0801358d
 8013414:	0801358d 	.word	0x0801358d
 8013418:	0801358d 	.word	0x0801358d
 801341c:	0801358d 	.word	0x0801358d
 8013420:	0801358d 	.word	0x0801358d
 8013424:	0801358d 	.word	0x0801358d
 8013428:	0801358d 	.word	0x0801358d
 801342c:	08013509 	.word	0x08013509
 8013430:	0801352d 	.word	0x0801352d
 8013434:	08013551 	.word	0x08013551
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8013438:	2100      	movs	r1, #0
 801343a:	2049      	movs	r0, #73	@ 0x49
 801343c:	f7ff fd55 	bl	8012eea <SD_SendCmd>
 8013440:	4603      	mov	r3, r0
 8013442:	2b00      	cmp	r3, #0
 8013444:	f040 80a6 	bne.w	8013594 <SD_disk_ioctl+0x22c>
 8013448:	f107 030c 	add.w	r3, r7, #12
 801344c:	2110      	movs	r1, #16
 801344e:	4618      	mov	r0, r3
 8013450:	f7ff fcda 	bl	8012e08 <SD_RxDataBlock>
 8013454:	4603      	mov	r3, r0
 8013456:	2b00      	cmp	r3, #0
 8013458:	f000 809c 	beq.w	8013594 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 801345c:	7b3b      	ldrb	r3, [r7, #12]
 801345e:	099b      	lsrs	r3, r3, #6
 8013460:	b2db      	uxtb	r3, r3
 8013462:	2b01      	cmp	r3, #1
 8013464:	d10d      	bne.n	8013482 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8013466:	7d7b      	ldrb	r3, [r7, #21]
 8013468:	461a      	mov	r2, r3
 801346a:	7d3b      	ldrb	r3, [r7, #20]
 801346c:	021b      	lsls	r3, r3, #8
 801346e:	b29b      	uxth	r3, r3
 8013470:	4413      	add	r3, r2
 8013472:	b29b      	uxth	r3, r3
 8013474:	3301      	adds	r3, #1
 8013476:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8013478:	8bfb      	ldrh	r3, [r7, #30]
 801347a:	029a      	lsls	r2, r3, #10
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	601a      	str	r2, [r3, #0]
 8013480:	e02d      	b.n	80134de <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8013482:	7c7b      	ldrb	r3, [r7, #17]
 8013484:	f003 030f 	and.w	r3, r3, #15
 8013488:	b2da      	uxtb	r2, r3
 801348a:	7dbb      	ldrb	r3, [r7, #22]
 801348c:	09db      	lsrs	r3, r3, #7
 801348e:	b2db      	uxtb	r3, r3
 8013490:	4413      	add	r3, r2
 8013492:	b2da      	uxtb	r2, r3
 8013494:	7d7b      	ldrb	r3, [r7, #21]
 8013496:	005b      	lsls	r3, r3, #1
 8013498:	b2db      	uxtb	r3, r3
 801349a:	f003 0306 	and.w	r3, r3, #6
 801349e:	b2db      	uxtb	r3, r3
 80134a0:	4413      	add	r3, r2
 80134a2:	b2db      	uxtb	r3, r3
 80134a4:	3302      	adds	r3, #2
 80134a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80134aa:	7d3b      	ldrb	r3, [r7, #20]
 80134ac:	099b      	lsrs	r3, r3, #6
 80134ae:	b2db      	uxtb	r3, r3
 80134b0:	461a      	mov	r2, r3
 80134b2:	7cfb      	ldrb	r3, [r7, #19]
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	b29b      	uxth	r3, r3
 80134b8:	4413      	add	r3, r2
 80134ba:	b29a      	uxth	r2, r3
 80134bc:	7cbb      	ldrb	r3, [r7, #18]
 80134be:	029b      	lsls	r3, r3, #10
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	4413      	add	r3, r2
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	3301      	adds	r3, #1
 80134ce:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80134d0:	8bfa      	ldrh	r2, [r7, #30]
 80134d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80134d6:	3b09      	subs	r3, #9
 80134d8:	409a      	lsls	r2, r3
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80134de:	2300      	movs	r3, #0
 80134e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80134e4:	e056      	b.n	8013594 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80134ec:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80134ee:	2300      	movs	r3, #0
 80134f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80134f4:	e055      	b.n	80135a2 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80134f6:	f7ff fc13 	bl	8012d20 <SD_ReadyWait>
 80134fa:	4603      	mov	r3, r0
 80134fc:	2bff      	cmp	r3, #255	@ 0xff
 80134fe:	d14b      	bne.n	8013598 <SD_disk_ioctl+0x230>
 8013500:	2300      	movs	r3, #0
 8013502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8013506:	e047      	b.n	8013598 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8013508:	2100      	movs	r1, #0
 801350a:	2049      	movs	r0, #73	@ 0x49
 801350c:	f7ff fced 	bl	8012eea <SD_SendCmd>
 8013510:	4603      	mov	r3, r0
 8013512:	2b00      	cmp	r3, #0
 8013514:	d142      	bne.n	801359c <SD_disk_ioctl+0x234>
 8013516:	2110      	movs	r1, #16
 8013518:	6a38      	ldr	r0, [r7, #32]
 801351a:	f7ff fc75 	bl	8012e08 <SD_RxDataBlock>
 801351e:	4603      	mov	r3, r0
 8013520:	2b00      	cmp	r3, #0
 8013522:	d03b      	beq.n	801359c <SD_disk_ioctl+0x234>
 8013524:	2300      	movs	r3, #0
 8013526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801352a:	e037      	b.n	801359c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 801352c:	2100      	movs	r1, #0
 801352e:	204a      	movs	r0, #74	@ 0x4a
 8013530:	f7ff fcdb 	bl	8012eea <SD_SendCmd>
 8013534:	4603      	mov	r3, r0
 8013536:	2b00      	cmp	r3, #0
 8013538:	d132      	bne.n	80135a0 <SD_disk_ioctl+0x238>
 801353a:	2110      	movs	r1, #16
 801353c:	6a38      	ldr	r0, [r7, #32]
 801353e:	f7ff fc63 	bl	8012e08 <SD_RxDataBlock>
 8013542:	4603      	mov	r3, r0
 8013544:	2b00      	cmp	r3, #0
 8013546:	d02b      	beq.n	80135a0 <SD_disk_ioctl+0x238>
 8013548:	2300      	movs	r3, #0
 801354a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 801354e:	e027      	b.n	80135a0 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8013550:	2100      	movs	r1, #0
 8013552:	207a      	movs	r0, #122	@ 0x7a
 8013554:	f7ff fcc9 	bl	8012eea <SD_SendCmd>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	d116      	bne.n	801358c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 801355e:	2300      	movs	r3, #0
 8013560:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013564:	e00b      	b.n	801357e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8013566:	6a3c      	ldr	r4, [r7, #32]
 8013568:	1c63      	adds	r3, r4, #1
 801356a:	623b      	str	r3, [r7, #32]
 801356c:	f7ff fbae 	bl	8012ccc <SPI_RxByte>
 8013570:	4603      	mov	r3, r0
 8013572:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8013574:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013578:	3301      	adds	r3, #1
 801357a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801357e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013582:	2b03      	cmp	r3, #3
 8013584:	d9ef      	bls.n	8013566 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8013586:	2300      	movs	r3, #0
 8013588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 801358c:	2304      	movs	r3, #4
 801358e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013592:	e006      	b.n	80135a2 <SD_disk_ioctl+0x23a>
      break;
 8013594:	bf00      	nop
 8013596:	e004      	b.n	80135a2 <SD_disk_ioctl+0x23a>
      break;
 8013598:	bf00      	nop
 801359a:	e002      	b.n	80135a2 <SD_disk_ioctl+0x23a>
      break;
 801359c:	bf00      	nop
 801359e:	e000      	b.n	80135a2 <SD_disk_ioctl+0x23a>
      break;
 80135a0:	bf00      	nop
    }
    DESELECT();
 80135a2:	f7ff fb53 	bl	8012c4c <DESELECT>
    SPI_RxByte();
 80135a6:	f7ff fb91 	bl	8012ccc <SPI_RxByte>
  }
  return res;
 80135aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	372c      	adds	r7, #44	@ 0x2c
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd90      	pop	{r4, r7, pc}
 80135b6:	bf00      	nop
 80135b8:	240000c0 	.word	0x240000c0

080135bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	4603      	mov	r3, r0
 80135c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80135c6:	79fb      	ldrb	r3, [r7, #7]
 80135c8:	4a08      	ldr	r2, [pc, #32]	@ (80135ec <disk_status+0x30>)
 80135ca:	009b      	lsls	r3, r3, #2
 80135cc:	4413      	add	r3, r2
 80135ce:	685b      	ldr	r3, [r3, #4]
 80135d0:	685b      	ldr	r3, [r3, #4]
 80135d2:	79fa      	ldrb	r2, [r7, #7]
 80135d4:	4905      	ldr	r1, [pc, #20]	@ (80135ec <disk_status+0x30>)
 80135d6:	440a      	add	r2, r1
 80135d8:	7a12      	ldrb	r2, [r2, #8]
 80135da:	4610      	mov	r0, r2
 80135dc:	4798      	blx	r3
 80135de:	4603      	mov	r3, r0
 80135e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80135e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80135e4:	4618      	mov	r0, r3
 80135e6:	3710      	adds	r7, #16
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}
 80135ec:	24002988 	.word	0x24002988

080135f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80135f0:	b590      	push	{r4, r7, lr}
 80135f2:	b087      	sub	sp, #28
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	60b9      	str	r1, [r7, #8]
 80135f8:	607a      	str	r2, [r7, #4]
 80135fa:	603b      	str	r3, [r7, #0]
 80135fc:	4603      	mov	r3, r0
 80135fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013600:	7bfb      	ldrb	r3, [r7, #15]
 8013602:	4a0a      	ldr	r2, [pc, #40]	@ (801362c <disk_read+0x3c>)
 8013604:	009b      	lsls	r3, r3, #2
 8013606:	4413      	add	r3, r2
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	689c      	ldr	r4, [r3, #8]
 801360c:	7bfb      	ldrb	r3, [r7, #15]
 801360e:	4a07      	ldr	r2, [pc, #28]	@ (801362c <disk_read+0x3c>)
 8013610:	4413      	add	r3, r2
 8013612:	7a18      	ldrb	r0, [r3, #8]
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	687a      	ldr	r2, [r7, #4]
 8013618:	68b9      	ldr	r1, [r7, #8]
 801361a:	47a0      	blx	r4
 801361c:	4603      	mov	r3, r0
 801361e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013620:	7dfb      	ldrb	r3, [r7, #23]
}
 8013622:	4618      	mov	r0, r3
 8013624:	371c      	adds	r7, #28
 8013626:	46bd      	mov	sp, r7
 8013628:	bd90      	pop	{r4, r7, pc}
 801362a:	bf00      	nop
 801362c:	24002988 	.word	0x24002988

08013630 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013630:	b590      	push	{r4, r7, lr}
 8013632:	b087      	sub	sp, #28
 8013634:	af00      	add	r7, sp, #0
 8013636:	60b9      	str	r1, [r7, #8]
 8013638:	607a      	str	r2, [r7, #4]
 801363a:	603b      	str	r3, [r7, #0]
 801363c:	4603      	mov	r3, r0
 801363e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013640:	7bfb      	ldrb	r3, [r7, #15]
 8013642:	4a0a      	ldr	r2, [pc, #40]	@ (801366c <disk_write+0x3c>)
 8013644:	009b      	lsls	r3, r3, #2
 8013646:	4413      	add	r3, r2
 8013648:	685b      	ldr	r3, [r3, #4]
 801364a:	68dc      	ldr	r4, [r3, #12]
 801364c:	7bfb      	ldrb	r3, [r7, #15]
 801364e:	4a07      	ldr	r2, [pc, #28]	@ (801366c <disk_write+0x3c>)
 8013650:	4413      	add	r3, r2
 8013652:	7a18      	ldrb	r0, [r3, #8]
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	68b9      	ldr	r1, [r7, #8]
 801365a:	47a0      	blx	r4
 801365c:	4603      	mov	r3, r0
 801365e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013660:	7dfb      	ldrb	r3, [r7, #23]
}
 8013662:	4618      	mov	r0, r3
 8013664:	371c      	adds	r7, #28
 8013666:	46bd      	mov	sp, r7
 8013668:	bd90      	pop	{r4, r7, pc}
 801366a:	bf00      	nop
 801366c:	24002988 	.word	0x24002988

08013670 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	4603      	mov	r3, r0
 8013678:	603a      	str	r2, [r7, #0]
 801367a:	71fb      	strb	r3, [r7, #7]
 801367c:	460b      	mov	r3, r1
 801367e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013680:	79fb      	ldrb	r3, [r7, #7]
 8013682:	4a09      	ldr	r2, [pc, #36]	@ (80136a8 <disk_ioctl+0x38>)
 8013684:	009b      	lsls	r3, r3, #2
 8013686:	4413      	add	r3, r2
 8013688:	685b      	ldr	r3, [r3, #4]
 801368a:	691b      	ldr	r3, [r3, #16]
 801368c:	79fa      	ldrb	r2, [r7, #7]
 801368e:	4906      	ldr	r1, [pc, #24]	@ (80136a8 <disk_ioctl+0x38>)
 8013690:	440a      	add	r2, r1
 8013692:	7a10      	ldrb	r0, [r2, #8]
 8013694:	79b9      	ldrb	r1, [r7, #6]
 8013696:	683a      	ldr	r2, [r7, #0]
 8013698:	4798      	blx	r3
 801369a:	4603      	mov	r3, r0
 801369c:	73fb      	strb	r3, [r7, #15]
  return res;
 801369e:	7bfb      	ldrb	r3, [r7, #15]
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3710      	adds	r7, #16
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	24002988 	.word	0x24002988

080136ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80136ac:	b480      	push	{r7}
 80136ae:	b085      	sub	sp, #20
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	3301      	adds	r3, #1
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80136bc:	89fb      	ldrh	r3, [r7, #14]
 80136be:	021b      	lsls	r3, r3, #8
 80136c0:	b21a      	sxth	r2, r3
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	781b      	ldrb	r3, [r3, #0]
 80136c6:	b21b      	sxth	r3, r3
 80136c8:	4313      	orrs	r3, r2
 80136ca:	b21b      	sxth	r3, r3
 80136cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80136ce:	89fb      	ldrh	r3, [r7, #14]
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3714      	adds	r7, #20
 80136d4:	46bd      	mov	sp, r7
 80136d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136da:	4770      	bx	lr

080136dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80136dc:	b480      	push	{r7}
 80136de:	b085      	sub	sp, #20
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	3303      	adds	r3, #3
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	021b      	lsls	r3, r3, #8
 80136f0:	687a      	ldr	r2, [r7, #4]
 80136f2:	3202      	adds	r2, #2
 80136f4:	7812      	ldrb	r2, [r2, #0]
 80136f6:	4313      	orrs	r3, r2
 80136f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	021b      	lsls	r3, r3, #8
 80136fe:	687a      	ldr	r2, [r7, #4]
 8013700:	3201      	adds	r2, #1
 8013702:	7812      	ldrb	r2, [r2, #0]
 8013704:	4313      	orrs	r3, r2
 8013706:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	021b      	lsls	r3, r3, #8
 801370c:	687a      	ldr	r2, [r7, #4]
 801370e:	7812      	ldrb	r2, [r2, #0]
 8013710:	4313      	orrs	r3, r2
 8013712:	60fb      	str	r3, [r7, #12]
	return rv;
 8013714:	68fb      	ldr	r3, [r7, #12]
}
 8013716:	4618      	mov	r0, r3
 8013718:	3714      	adds	r7, #20
 801371a:	46bd      	mov	sp, r7
 801371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013720:	4770      	bx	lr

08013722 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013722:	b480      	push	{r7}
 8013724:	b083      	sub	sp, #12
 8013726:	af00      	add	r7, sp, #0
 8013728:	6078      	str	r0, [r7, #4]
 801372a:	460b      	mov	r3, r1
 801372c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	1c5a      	adds	r2, r3, #1
 8013732:	607a      	str	r2, [r7, #4]
 8013734:	887a      	ldrh	r2, [r7, #2]
 8013736:	b2d2      	uxtb	r2, r2
 8013738:	701a      	strb	r2, [r3, #0]
 801373a:	887b      	ldrh	r3, [r7, #2]
 801373c:	0a1b      	lsrs	r3, r3, #8
 801373e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	1c5a      	adds	r2, r3, #1
 8013744:	607a      	str	r2, [r7, #4]
 8013746:	887a      	ldrh	r2, [r7, #2]
 8013748:	b2d2      	uxtb	r2, r2
 801374a:	701a      	strb	r2, [r3, #0]
}
 801374c:	bf00      	nop
 801374e:	370c      	adds	r7, #12
 8013750:	46bd      	mov	sp, r7
 8013752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013756:	4770      	bx	lr

08013758 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	1c5a      	adds	r2, r3, #1
 8013766:	607a      	str	r2, [r7, #4]
 8013768:	683a      	ldr	r2, [r7, #0]
 801376a:	b2d2      	uxtb	r2, r2
 801376c:	701a      	strb	r2, [r3, #0]
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	0a1b      	lsrs	r3, r3, #8
 8013772:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	1c5a      	adds	r2, r3, #1
 8013778:	607a      	str	r2, [r7, #4]
 801377a:	683a      	ldr	r2, [r7, #0]
 801377c:	b2d2      	uxtb	r2, r2
 801377e:	701a      	strb	r2, [r3, #0]
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	0a1b      	lsrs	r3, r3, #8
 8013784:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	1c5a      	adds	r2, r3, #1
 801378a:	607a      	str	r2, [r7, #4]
 801378c:	683a      	ldr	r2, [r7, #0]
 801378e:	b2d2      	uxtb	r2, r2
 8013790:	701a      	strb	r2, [r3, #0]
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	0a1b      	lsrs	r3, r3, #8
 8013796:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	1c5a      	adds	r2, r3, #1
 801379c:	607a      	str	r2, [r7, #4]
 801379e:	683a      	ldr	r2, [r7, #0]
 80137a0:	b2d2      	uxtb	r2, r2
 80137a2:	701a      	strb	r2, [r3, #0]
}
 80137a4:	bf00      	nop
 80137a6:	370c      	adds	r7, #12
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr

080137b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80137b0:	b480      	push	{r7}
 80137b2:	b087      	sub	sp, #28
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	60f8      	str	r0, [r7, #12]
 80137b8:	60b9      	str	r1, [r7, #8]
 80137ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d00d      	beq.n	80137e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80137ca:	693a      	ldr	r2, [r7, #16]
 80137cc:	1c53      	adds	r3, r2, #1
 80137ce:	613b      	str	r3, [r7, #16]
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	1c59      	adds	r1, r3, #1
 80137d4:	6179      	str	r1, [r7, #20]
 80137d6:	7812      	ldrb	r2, [r2, #0]
 80137d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	3b01      	subs	r3, #1
 80137de:	607b      	str	r3, [r7, #4]
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d1f1      	bne.n	80137ca <mem_cpy+0x1a>
	}
}
 80137e6:	bf00      	nop
 80137e8:	371c      	adds	r7, #28
 80137ea:	46bd      	mov	sp, r7
 80137ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f0:	4770      	bx	lr

080137f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80137f2:	b480      	push	{r7}
 80137f4:	b087      	sub	sp, #28
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	60f8      	str	r0, [r7, #12]
 80137fa:	60b9      	str	r1, [r7, #8]
 80137fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013802:	697b      	ldr	r3, [r7, #20]
 8013804:	1c5a      	adds	r2, r3, #1
 8013806:	617a      	str	r2, [r7, #20]
 8013808:	68ba      	ldr	r2, [r7, #8]
 801380a:	b2d2      	uxtb	r2, r2
 801380c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	3b01      	subs	r3, #1
 8013812:	607b      	str	r3, [r7, #4]
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d1f3      	bne.n	8013802 <mem_set+0x10>
}
 801381a:	bf00      	nop
 801381c:	bf00      	nop
 801381e:	371c      	adds	r7, #28
 8013820:	46bd      	mov	sp, r7
 8013822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013826:	4770      	bx	lr

08013828 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d009      	beq.n	801384a <lock_fs+0x22>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	691b      	ldr	r3, [r3, #16]
 801383a:	4618      	mov	r0, r3
 801383c:	f000 fe6f 	bl	801451e <ff_req_grant>
 8013840:	4603      	mov	r3, r0
 8013842:	2b00      	cmp	r3, #0
 8013844:	d001      	beq.n	801384a <lock_fs+0x22>
 8013846:	2301      	movs	r3, #1
 8013848:	e000      	b.n	801384c <lock_fs+0x24>
 801384a:	2300      	movs	r3, #0
}
 801384c:	4618      	mov	r0, r3
 801384e:	3708      	adds	r7, #8
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}

08013854 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
 801385c:	460b      	mov	r3, r1
 801385e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d00d      	beq.n	8013882 <unlock_fs+0x2e>
 8013866:	78fb      	ldrb	r3, [r7, #3]
 8013868:	2b0c      	cmp	r3, #12
 801386a:	d00a      	beq.n	8013882 <unlock_fs+0x2e>
 801386c:	78fb      	ldrb	r3, [r7, #3]
 801386e:	2b0b      	cmp	r3, #11
 8013870:	d007      	beq.n	8013882 <unlock_fs+0x2e>
 8013872:	78fb      	ldrb	r3, [r7, #3]
 8013874:	2b0f      	cmp	r3, #15
 8013876:	d004      	beq.n	8013882 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	691b      	ldr	r3, [r3, #16]
 801387c:	4618      	mov	r0, r3
 801387e:	f000 fe63 	bl	8014548 <ff_rel_grant>
	}
}
 8013882:	bf00      	nop
 8013884:	3708      	adds	r7, #8
 8013886:	46bd      	mov	sp, r7
 8013888:	bd80      	pop	{r7, pc}

0801388a <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801388a:	b580      	push	{r7, lr}
 801388c:	b086      	sub	sp, #24
 801388e:	af00      	add	r7, sp, #0
 8013890:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013892:	2300      	movs	r3, #0
 8013894:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	78db      	ldrb	r3, [r3, #3]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d034      	beq.n	8013908 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80138a2:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	7858      	ldrb	r0, [r3, #1]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80138ae:	2301      	movs	r3, #1
 80138b0:	697a      	ldr	r2, [r7, #20]
 80138b2:	f7ff febd 	bl	8013630 <disk_write>
 80138b6:	4603      	mov	r3, r0
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d002      	beq.n	80138c2 <sync_window+0x38>
			res = FR_DISK_ERR;
 80138bc:	2301      	movs	r3, #1
 80138be:	73fb      	strb	r3, [r7, #15]
 80138c0:	e022      	b.n	8013908 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2200      	movs	r2, #0
 80138c6:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80138cc:	697a      	ldr	r2, [r7, #20]
 80138ce:	1ad2      	subs	r2, r2, r3
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6a1b      	ldr	r3, [r3, #32]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d217      	bcs.n	8013908 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	789b      	ldrb	r3, [r3, #2]
 80138dc:	613b      	str	r3, [r7, #16]
 80138de:	e010      	b.n	8013902 <sync_window+0x78>
					wsect += fs->fsize;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	6a1b      	ldr	r3, [r3, #32]
 80138e4:	697a      	ldr	r2, [r7, #20]
 80138e6:	4413      	add	r3, r2
 80138e8:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	7858      	ldrb	r0, [r3, #1]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80138f4:	2301      	movs	r3, #1
 80138f6:	697a      	ldr	r2, [r7, #20]
 80138f8:	f7ff fe9a 	bl	8013630 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	3b01      	subs	r3, #1
 8013900:	613b      	str	r3, [r7, #16]
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	2b01      	cmp	r3, #1
 8013906:	d8eb      	bhi.n	80138e0 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013908:	7bfb      	ldrb	r3, [r7, #15]
}
 801390a:	4618      	mov	r0, r3
 801390c:	3718      	adds	r7, #24
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}

08013912 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013912:	b580      	push	{r7, lr}
 8013914:	b084      	sub	sp, #16
 8013916:	af00      	add	r7, sp, #0
 8013918:	6078      	str	r0, [r7, #4]
 801391a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801391c:	2300      	movs	r3, #0
 801391e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013924:	683a      	ldr	r2, [r7, #0]
 8013926:	429a      	cmp	r2, r3
 8013928:	d01b      	beq.n	8013962 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff ffad 	bl	801388a <sync_window>
 8013930:	4603      	mov	r3, r0
 8013932:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013934:	7bfb      	ldrb	r3, [r7, #15]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d113      	bne.n	8013962 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	7858      	ldrb	r0, [r3, #1]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013944:	2301      	movs	r3, #1
 8013946:	683a      	ldr	r2, [r7, #0]
 8013948:	f7ff fe52 	bl	80135f0 <disk_read>
 801394c:	4603      	mov	r3, r0
 801394e:	2b00      	cmp	r3, #0
 8013950:	d004      	beq.n	801395c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013952:	f04f 33ff 	mov.w	r3, #4294967295
 8013956:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013958:	2301      	movs	r3, #1
 801395a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	683a      	ldr	r2, [r7, #0]
 8013960:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8013962:	7bfb      	ldrb	r3, [r7, #15]
}
 8013964:	4618      	mov	r0, r3
 8013966:	3710      	adds	r7, #16
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}

0801396c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b084      	sub	sp, #16
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f7ff ff88 	bl	801388a <sync_window>
 801397a:	4603      	mov	r3, r0
 801397c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801397e:	7bfb      	ldrb	r3, [r7, #15]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d158      	bne.n	8013a36 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	2b03      	cmp	r3, #3
 801398a:	d148      	bne.n	8013a1e <sync_fs+0xb2>
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	791b      	ldrb	r3, [r3, #4]
 8013990:	2b01      	cmp	r3, #1
 8013992:	d144      	bne.n	8013a1e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	3338      	adds	r3, #56	@ 0x38
 8013998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801399c:	2100      	movs	r1, #0
 801399e:	4618      	mov	r0, r3
 80139a0:	f7ff ff27 	bl	80137f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	3338      	adds	r3, #56	@ 0x38
 80139a8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80139ac:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7ff feb6 	bl	8013722 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	3338      	adds	r3, #56	@ 0x38
 80139ba:	4921      	ldr	r1, [pc, #132]	@ (8013a40 <sync_fs+0xd4>)
 80139bc:	4618      	mov	r0, r3
 80139be:	f7ff fecb 	bl	8013758 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	3338      	adds	r3, #56	@ 0x38
 80139c6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80139ca:	491e      	ldr	r1, [pc, #120]	@ (8013a44 <sync_fs+0xd8>)
 80139cc:	4618      	mov	r0, r3
 80139ce:	f7ff fec3 	bl	8013758 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	3338      	adds	r3, #56	@ 0x38
 80139d6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	699b      	ldr	r3, [r3, #24]
 80139de:	4619      	mov	r1, r3
 80139e0:	4610      	mov	r0, r2
 80139e2:	f7ff feb9 	bl	8013758 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	3338      	adds	r3, #56	@ 0x38
 80139ea:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	695b      	ldr	r3, [r3, #20]
 80139f2:	4619      	mov	r1, r3
 80139f4:	4610      	mov	r0, r2
 80139f6:	f7ff feaf 	bl	8013758 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139fe:	1c5a      	adds	r2, r3, #1
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	7858      	ldrb	r0, [r3, #1]
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013a12:	2301      	movs	r3, #1
 8013a14:	f7ff fe0c 	bl	8013630 <disk_write>
			fs->fsi_flag = 0;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	785b      	ldrb	r3, [r3, #1]
 8013a22:	2200      	movs	r2, #0
 8013a24:	2100      	movs	r1, #0
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7ff fe22 	bl	8013670 <disk_ioctl>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d001      	beq.n	8013a36 <sync_fs+0xca>
 8013a32:	2301      	movs	r3, #1
 8013a34:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3710      	adds	r7, #16
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	41615252 	.word	0x41615252
 8013a44:	61417272 	.word	0x61417272

08013a48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b083      	sub	sp, #12
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	3b02      	subs	r3, #2
 8013a56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	69db      	ldr	r3, [r3, #28]
 8013a5c:	3b02      	subs	r3, #2
 8013a5e:	683a      	ldr	r2, [r7, #0]
 8013a60:	429a      	cmp	r2, r3
 8013a62:	d301      	bcc.n	8013a68 <clust2sect+0x20>
 8013a64:	2300      	movs	r3, #0
 8013a66:	e008      	b.n	8013a7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	895b      	ldrh	r3, [r3, #10]
 8013a6c:	461a      	mov	r2, r3
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	fb03 f202 	mul.w	r2, r3, r2
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a78:	4413      	add	r3, r2
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	370c      	adds	r7, #12
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a84:	4770      	bx	lr

08013a86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013a86:	b580      	push	{r7, lr}
 8013a88:	b086      	sub	sp, #24
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
 8013a8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d904      	bls.n	8013aa6 <get_fat+0x20>
 8013a9c:	693b      	ldr	r3, [r7, #16]
 8013a9e:	69db      	ldr	r3, [r3, #28]
 8013aa0:	683a      	ldr	r2, [r7, #0]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d302      	bcc.n	8013aac <get_fat+0x26>
		val = 1;	/* Internal error */
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	617b      	str	r3, [r7, #20]
 8013aaa:	e08e      	b.n	8013bca <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013aac:	f04f 33ff 	mov.w	r3, #4294967295
 8013ab0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	781b      	ldrb	r3, [r3, #0]
 8013ab6:	2b03      	cmp	r3, #3
 8013ab8:	d061      	beq.n	8013b7e <get_fat+0xf8>
 8013aba:	2b03      	cmp	r3, #3
 8013abc:	dc7b      	bgt.n	8013bb6 <get_fat+0x130>
 8013abe:	2b01      	cmp	r3, #1
 8013ac0:	d002      	beq.n	8013ac8 <get_fat+0x42>
 8013ac2:	2b02      	cmp	r3, #2
 8013ac4:	d041      	beq.n	8013b4a <get_fat+0xc4>
 8013ac6:	e076      	b.n	8013bb6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	60fb      	str	r3, [r7, #12]
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	085b      	lsrs	r3, r3, #1
 8013ad0:	68fa      	ldr	r2, [r7, #12]
 8013ad2:	4413      	add	r3, r2
 8013ad4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	0a5b      	lsrs	r3, r3, #9
 8013ade:	4413      	add	r3, r2
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	6938      	ldr	r0, [r7, #16]
 8013ae4:	f7ff ff15 	bl	8013912 <move_window>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d166      	bne.n	8013bbc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	1c5a      	adds	r2, r3, #1
 8013af2:	60fa      	str	r2, [r7, #12]
 8013af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013af8:	693a      	ldr	r2, [r7, #16]
 8013afa:	4413      	add	r3, r2
 8013afc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013b00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	0a5b      	lsrs	r3, r3, #9
 8013b0a:	4413      	add	r3, r2
 8013b0c:	4619      	mov	r1, r3
 8013b0e:	6938      	ldr	r0, [r7, #16]
 8013b10:	f7ff feff 	bl	8013912 <move_window>
 8013b14:	4603      	mov	r3, r0
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d152      	bne.n	8013bc0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b20:	693a      	ldr	r2, [r7, #16]
 8013b22:	4413      	add	r3, r2
 8013b24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013b28:	021b      	lsls	r3, r3, #8
 8013b2a:	68ba      	ldr	r2, [r7, #8]
 8013b2c:	4313      	orrs	r3, r2
 8013b2e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	f003 0301 	and.w	r3, r3, #1
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d002      	beq.n	8013b40 <get_fat+0xba>
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	091b      	lsrs	r3, r3, #4
 8013b3e:	e002      	b.n	8013b46 <get_fat+0xc0>
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013b46:	617b      	str	r3, [r7, #20]
			break;
 8013b48:	e03f      	b.n	8013bca <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	0a1b      	lsrs	r3, r3, #8
 8013b52:	4413      	add	r3, r2
 8013b54:	4619      	mov	r1, r3
 8013b56:	6938      	ldr	r0, [r7, #16]
 8013b58:	f7ff fedb 	bl	8013912 <move_window>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d130      	bne.n	8013bc4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013b62:	693b      	ldr	r3, [r7, #16]
 8013b64:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	005b      	lsls	r3, r3, #1
 8013b6c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8013b70:	4413      	add	r3, r2
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7ff fd9a 	bl	80136ac <ld_word>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	617b      	str	r3, [r7, #20]
			break;
 8013b7c:	e025      	b.n	8013bca <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	09db      	lsrs	r3, r3, #7
 8013b86:	4413      	add	r3, r2
 8013b88:	4619      	mov	r1, r3
 8013b8a:	6938      	ldr	r0, [r7, #16]
 8013b8c:	f7ff fec1 	bl	8013912 <move_window>
 8013b90:	4603      	mov	r3, r0
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d118      	bne.n	8013bc8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	009b      	lsls	r3, r3, #2
 8013ba0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013ba4:	4413      	add	r3, r2
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7ff fd98 	bl	80136dc <ld_dword>
 8013bac:	4603      	mov	r3, r0
 8013bae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013bb2:	617b      	str	r3, [r7, #20]
			break;
 8013bb4:	e009      	b.n	8013bca <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	617b      	str	r3, [r7, #20]
 8013bba:	e006      	b.n	8013bca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013bbc:	bf00      	nop
 8013bbe:	e004      	b.n	8013bca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013bc0:	bf00      	nop
 8013bc2:	e002      	b.n	8013bca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013bc4:	bf00      	nop
 8013bc6:	e000      	b.n	8013bca <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013bc8:	bf00      	nop
		}
	}

	return val;
 8013bca:	697b      	ldr	r3, [r7, #20]
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3718      	adds	r7, #24
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}

08013bd4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013bd4:	b590      	push	{r4, r7, lr}
 8013bd6:	b089      	sub	sp, #36	@ 0x24
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	60f8      	str	r0, [r7, #12]
 8013bdc:	60b9      	str	r1, [r7, #8]
 8013bde:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013be0:	2302      	movs	r3, #2
 8013be2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	f240 80d9 	bls.w	8013d9e <put_fat+0x1ca>
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	69db      	ldr	r3, [r3, #28]
 8013bf0:	68ba      	ldr	r2, [r7, #8]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	f080 80d3 	bcs.w	8013d9e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	2b03      	cmp	r3, #3
 8013bfe:	f000 8096 	beq.w	8013d2e <put_fat+0x15a>
 8013c02:	2b03      	cmp	r3, #3
 8013c04:	f300 80cb 	bgt.w	8013d9e <put_fat+0x1ca>
 8013c08:	2b01      	cmp	r3, #1
 8013c0a:	d002      	beq.n	8013c12 <put_fat+0x3e>
 8013c0c:	2b02      	cmp	r3, #2
 8013c0e:	d06e      	beq.n	8013cee <put_fat+0x11a>
 8013c10:	e0c5      	b.n	8013d9e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	61bb      	str	r3, [r7, #24]
 8013c16:	69bb      	ldr	r3, [r7, #24]
 8013c18:	085b      	lsrs	r3, r3, #1
 8013c1a:	69ba      	ldr	r2, [r7, #24]
 8013c1c:	4413      	add	r3, r2
 8013c1e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013c24:	69bb      	ldr	r3, [r7, #24]
 8013c26:	0a5b      	lsrs	r3, r3, #9
 8013c28:	4413      	add	r3, r2
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f7ff fe70 	bl	8013912 <move_window>
 8013c32:	4603      	mov	r3, r0
 8013c34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013c36:	7ffb      	ldrb	r3, [r7, #31]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	f040 80a9 	bne.w	8013d90 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013c44:	69bb      	ldr	r3, [r7, #24]
 8013c46:	1c59      	adds	r1, r3, #1
 8013c48:	61b9      	str	r1, [r7, #24]
 8013c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c4e:	4413      	add	r3, r2
 8013c50:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013c52:	68bb      	ldr	r3, [r7, #8]
 8013c54:	f003 0301 	and.w	r3, r3, #1
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d00d      	beq.n	8013c78 <put_fat+0xa4>
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	781b      	ldrb	r3, [r3, #0]
 8013c60:	b25b      	sxtb	r3, r3
 8013c62:	f003 030f 	and.w	r3, r3, #15
 8013c66:	b25a      	sxtb	r2, r3
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	b2db      	uxtb	r3, r3
 8013c6c:	011b      	lsls	r3, r3, #4
 8013c6e:	b25b      	sxtb	r3, r3
 8013c70:	4313      	orrs	r3, r2
 8013c72:	b25b      	sxtb	r3, r3
 8013c74:	b2db      	uxtb	r3, r3
 8013c76:	e001      	b.n	8013c7c <put_fat+0xa8>
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	697a      	ldr	r2, [r7, #20]
 8013c7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	2201      	movs	r2, #1
 8013c84:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013c8a:	69bb      	ldr	r3, [r7, #24]
 8013c8c:	0a5b      	lsrs	r3, r3, #9
 8013c8e:	4413      	add	r3, r2
 8013c90:	4619      	mov	r1, r3
 8013c92:	68f8      	ldr	r0, [r7, #12]
 8013c94:	f7ff fe3d 	bl	8013912 <move_window>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013c9c:	7ffb      	ldrb	r3, [r7, #31]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d178      	bne.n	8013d94 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013ca8:	69bb      	ldr	r3, [r7, #24]
 8013caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cae:	4413      	add	r3, r2
 8013cb0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	f003 0301 	and.w	r3, r3, #1
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d003      	beq.n	8013cc4 <put_fat+0xf0>
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	091b      	lsrs	r3, r3, #4
 8013cc0:	b2db      	uxtb	r3, r3
 8013cc2:	e00e      	b.n	8013ce2 <put_fat+0x10e>
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	781b      	ldrb	r3, [r3, #0]
 8013cc8:	b25b      	sxtb	r3, r3
 8013cca:	f023 030f 	bic.w	r3, r3, #15
 8013cce:	b25a      	sxtb	r2, r3
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	0a1b      	lsrs	r3, r3, #8
 8013cd4:	b25b      	sxtb	r3, r3
 8013cd6:	f003 030f 	and.w	r3, r3, #15
 8013cda:	b25b      	sxtb	r3, r3
 8013cdc:	4313      	orrs	r3, r2
 8013cde:	b25b      	sxtb	r3, r3
 8013ce0:	b2db      	uxtb	r3, r3
 8013ce2:	697a      	ldr	r2, [r7, #20]
 8013ce4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	2201      	movs	r2, #1
 8013cea:	70da      	strb	r2, [r3, #3]
			break;
 8013cec:	e057      	b.n	8013d9e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	0a1b      	lsrs	r3, r3, #8
 8013cf6:	4413      	add	r3, r2
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	68f8      	ldr	r0, [r7, #12]
 8013cfc:	f7ff fe09 	bl	8013912 <move_window>
 8013d00:	4603      	mov	r3, r0
 8013d02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013d04:	7ffb      	ldrb	r3, [r7, #31]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d146      	bne.n	8013d98 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	005b      	lsls	r3, r3, #1
 8013d14:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8013d18:	4413      	add	r3, r2
 8013d1a:	687a      	ldr	r2, [r7, #4]
 8013d1c:	b292      	uxth	r2, r2
 8013d1e:	4611      	mov	r1, r2
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7ff fcfe 	bl	8013722 <st_word>
			fs->wflag = 1;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	2201      	movs	r2, #1
 8013d2a:	70da      	strb	r2, [r3, #3]
			break;
 8013d2c:	e037      	b.n	8013d9e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	09db      	lsrs	r3, r3, #7
 8013d36:	4413      	add	r3, r2
 8013d38:	4619      	mov	r1, r3
 8013d3a:	68f8      	ldr	r0, [r7, #12]
 8013d3c:	f7ff fde9 	bl	8013912 <move_window>
 8013d40:	4603      	mov	r3, r0
 8013d42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013d44:	7ffb      	ldrb	r3, [r7, #31]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d128      	bne.n	8013d9c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	009b      	lsls	r3, r3, #2
 8013d5a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013d5e:	4413      	add	r3, r2
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7ff fcbb 	bl	80136dc <ld_dword>
 8013d66:	4603      	mov	r3, r0
 8013d68:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8013d6c:	4323      	orrs	r3, r4
 8013d6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	009b      	lsls	r3, r3, #2
 8013d7a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013d7e:	4413      	add	r3, r2
 8013d80:	6879      	ldr	r1, [r7, #4]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7ff fce8 	bl	8013758 <st_dword>
			fs->wflag = 1;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2201      	movs	r2, #1
 8013d8c:	70da      	strb	r2, [r3, #3]
			break;
 8013d8e:	e006      	b.n	8013d9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013d90:	bf00      	nop
 8013d92:	e004      	b.n	8013d9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013d94:	bf00      	nop
 8013d96:	e002      	b.n	8013d9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013d98:	bf00      	nop
 8013d9a:	e000      	b.n	8013d9e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013d9c:	bf00      	nop
		}
	}
	return res;
 8013d9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3724      	adds	r7, #36	@ 0x24
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd90      	pop	{r4, r7, pc}

08013da8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b088      	sub	sp, #32
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d10d      	bne.n	8013dda <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013dbe:	693b      	ldr	r3, [r7, #16]
 8013dc0:	695b      	ldr	r3, [r3, #20]
 8013dc2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013dc4:	69bb      	ldr	r3, [r7, #24]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d004      	beq.n	8013dd4 <create_chain+0x2c>
 8013dca:	693b      	ldr	r3, [r7, #16]
 8013dcc:	69db      	ldr	r3, [r3, #28]
 8013dce:	69ba      	ldr	r2, [r7, #24]
 8013dd0:	429a      	cmp	r2, r3
 8013dd2:	d31b      	bcc.n	8013e0c <create_chain+0x64>
 8013dd4:	2301      	movs	r3, #1
 8013dd6:	61bb      	str	r3, [r7, #24]
 8013dd8:	e018      	b.n	8013e0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013dda:	6839      	ldr	r1, [r7, #0]
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f7ff fe52 	bl	8013a86 <get_fat>
 8013de2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	2b01      	cmp	r3, #1
 8013de8:	d801      	bhi.n	8013dee <create_chain+0x46>
 8013dea:	2301      	movs	r3, #1
 8013dec:	e070      	b.n	8013ed0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013df4:	d101      	bne.n	8013dfa <create_chain+0x52>
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	e06a      	b.n	8013ed0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013dfa:	693b      	ldr	r3, [r7, #16]
 8013dfc:	69db      	ldr	r3, [r3, #28]
 8013dfe:	68fa      	ldr	r2, [r7, #12]
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d201      	bcs.n	8013e08 <create_chain+0x60>
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	e063      	b.n	8013ed0 <create_chain+0x128>
		scl = clst;
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013e0c:	69bb      	ldr	r3, [r7, #24]
 8013e0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013e10:	69fb      	ldr	r3, [r7, #28]
 8013e12:	3301      	adds	r3, #1
 8013e14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	69db      	ldr	r3, [r3, #28]
 8013e1a:	69fa      	ldr	r2, [r7, #28]
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d307      	bcc.n	8013e30 <create_chain+0x88>
				ncl = 2;
 8013e20:	2302      	movs	r3, #2
 8013e22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013e24:	69fa      	ldr	r2, [r7, #28]
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	d901      	bls.n	8013e30 <create_chain+0x88>
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	e04f      	b.n	8013ed0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013e30:	69f9      	ldr	r1, [r7, #28]
 8013e32:	6878      	ldr	r0, [r7, #4]
 8013e34:	f7ff fe27 	bl	8013a86 <get_fat>
 8013e38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d00e      	beq.n	8013e5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2b01      	cmp	r3, #1
 8013e44:	d003      	beq.n	8013e4e <create_chain+0xa6>
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e4c:	d101      	bne.n	8013e52 <create_chain+0xaa>
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	e03e      	b.n	8013ed0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013e52:	69fa      	ldr	r2, [r7, #28]
 8013e54:	69bb      	ldr	r3, [r7, #24]
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d1da      	bne.n	8013e10 <create_chain+0x68>
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	e038      	b.n	8013ed0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013e5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013e60:	f04f 32ff 	mov.w	r2, #4294967295
 8013e64:	69f9      	ldr	r1, [r7, #28]
 8013e66:	6938      	ldr	r0, [r7, #16]
 8013e68:	f7ff feb4 	bl	8013bd4 <put_fat>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013e70:	7dfb      	ldrb	r3, [r7, #23]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d109      	bne.n	8013e8a <create_chain+0xe2>
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d006      	beq.n	8013e8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013e7c:	69fa      	ldr	r2, [r7, #28]
 8013e7e:	6839      	ldr	r1, [r7, #0]
 8013e80:	6938      	ldr	r0, [r7, #16]
 8013e82:	f7ff fea7 	bl	8013bd4 <put_fat>
 8013e86:	4603      	mov	r3, r0
 8013e88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013e8a:	7dfb      	ldrb	r3, [r7, #23]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d116      	bne.n	8013ebe <create_chain+0x116>
		fs->last_clst = ncl;
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	69fa      	ldr	r2, [r7, #28]
 8013e94:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	699a      	ldr	r2, [r3, #24]
 8013e9a:	693b      	ldr	r3, [r7, #16]
 8013e9c:	69db      	ldr	r3, [r3, #28]
 8013e9e:	3b02      	subs	r3, #2
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d804      	bhi.n	8013eae <create_chain+0x106>
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	699b      	ldr	r3, [r3, #24]
 8013ea8:	1e5a      	subs	r2, r3, #1
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	791b      	ldrb	r3, [r3, #4]
 8013eb2:	f043 0301 	orr.w	r3, r3, #1
 8013eb6:	b2da      	uxtb	r2, r3
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	711a      	strb	r2, [r3, #4]
 8013ebc:	e007      	b.n	8013ece <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013ebe:	7dfb      	ldrb	r3, [r7, #23]
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d102      	bne.n	8013eca <create_chain+0x122>
 8013ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ec8:	e000      	b.n	8013ecc <create_chain+0x124>
 8013eca:	2301      	movs	r3, #1
 8013ecc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013ece:	69fb      	ldr	r3, [r7, #28]
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3720      	adds	r7, #32
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013ed8:	b480      	push	{r7}
 8013eda:	b087      	sub	sp, #28
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013eec:	3304      	adds	r3, #4
 8013eee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	0a5b      	lsrs	r3, r3, #9
 8013ef4:	68fa      	ldr	r2, [r7, #12]
 8013ef6:	8952      	ldrh	r2, [r2, #10]
 8013ef8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013efc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	1d1a      	adds	r2, r3, #4
 8013f02:	613a      	str	r2, [r7, #16]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d101      	bne.n	8013f12 <clmt_clust+0x3a>
 8013f0e:	2300      	movs	r3, #0
 8013f10:	e010      	b.n	8013f34 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013f12:	697a      	ldr	r2, [r7, #20]
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d307      	bcc.n	8013f2a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013f1a:	697a      	ldr	r2, [r7, #20]
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	1ad3      	subs	r3, r2, r3
 8013f20:	617b      	str	r3, [r7, #20]
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	3304      	adds	r3, #4
 8013f26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013f28:	e7e9      	b.n	8013efe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013f2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	681a      	ldr	r2, [r3, #0]
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	4413      	add	r3, r2
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	371c      	adds	r7, #28
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3e:	4770      	bx	lr

08013f40 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b084      	sub	sp, #16
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	331a      	adds	r3, #26
 8013f50:	687a      	ldr	r2, [r7, #4]
 8013f52:	b292      	uxth	r2, r2
 8013f54:	4611      	mov	r1, r2
 8013f56:	4618      	mov	r0, r3
 8013f58:	f7ff fbe3 	bl	8013722 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	2b03      	cmp	r3, #3
 8013f62:	d109      	bne.n	8013f78 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	f103 0214 	add.w	r2, r3, #20
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	0c1b      	lsrs	r3, r3, #16
 8013f6e:	b29b      	uxth	r3, r3
 8013f70:	4619      	mov	r1, r3
 8013f72:	4610      	mov	r0, r2
 8013f74:	f7ff fbd5 	bl	8013722 <st_word>
	}
}
 8013f78:	bf00      	nop
 8013f7a:	3710      	adds	r7, #16
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}

08013f80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b084      	sub	sp, #16
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013f8a:	2309      	movs	r3, #9
 8013f8c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d02e      	beq.n	8013ff2 <validate+0x72>
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d02a      	beq.n	8013ff2 <validate+0x72>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	781b      	ldrb	r3, [r3, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d025      	beq.n	8013ff2 <validate+0x72>
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	889a      	ldrh	r2, [r3, #4]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	88db      	ldrh	r3, [r3, #6]
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d11e      	bne.n	8013ff2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7ff fc35 	bl	8013828 <lock_fs>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d014      	beq.n	8013fee <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	785b      	ldrb	r3, [r3, #1]
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7ff faf6 	bl	80135bc <disk_status>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	f003 0301 	and.w	r3, r3, #1
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d102      	bne.n	8013fe0 <validate+0x60>
				res = FR_OK;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	73fb      	strb	r3, [r7, #15]
 8013fde:	e008      	b.n	8013ff2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	2100      	movs	r1, #0
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7ff fc34 	bl	8013854 <unlock_fs>
 8013fec:	e001      	b.n	8013ff2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8013fee:	230f      	movs	r3, #15
 8013ff0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013ff2:	7bfb      	ldrb	r3, [r7, #15]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d102      	bne.n	8013ffe <validate+0x7e>
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	e000      	b.n	8014000 <validate+0x80>
 8013ffe:	2300      	movs	r3, #0
 8014000:	683a      	ldr	r2, [r7, #0]
 8014002:	6013      	str	r3, [r2, #0]
	return res;
 8014004:	7bfb      	ldrb	r3, [r7, #15]
}
 8014006:	4618      	mov	r0, r3
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}

0801400e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801400e:	b580      	push	{r7, lr}
 8014010:	b08c      	sub	sp, #48	@ 0x30
 8014012:	af00      	add	r7, sp, #0
 8014014:	60f8      	str	r0, [r7, #12]
 8014016:	60b9      	str	r1, [r7, #8]
 8014018:	607a      	str	r2, [r7, #4]
 801401a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	2200      	movs	r2, #0
 8014024:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	f107 0210 	add.w	r2, r7, #16
 801402c:	4611      	mov	r1, r2
 801402e:	4618      	mov	r0, r3
 8014030:	f7ff ffa6 	bl	8013f80 <validate>
 8014034:	4603      	mov	r3, r0
 8014036:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801403a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801403e:	2b00      	cmp	r3, #0
 8014040:	d107      	bne.n	8014052 <f_write+0x44>
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	7d5b      	ldrb	r3, [r3, #21]
 8014046:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801404a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801404e:	2b00      	cmp	r3, #0
 8014050:	d009      	beq.n	8014066 <f_write+0x58>
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8014058:	4611      	mov	r1, r2
 801405a:	4618      	mov	r0, r3
 801405c:	f7ff fbfa 	bl	8013854 <unlock_fs>
 8014060:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014064:	e173      	b.n	801434e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	7d1b      	ldrb	r3, [r3, #20]
 801406a:	f003 0302 	and.w	r3, r3, #2
 801406e:	2b00      	cmp	r3, #0
 8014070:	d106      	bne.n	8014080 <f_write+0x72>
 8014072:	693b      	ldr	r3, [r7, #16]
 8014074:	2107      	movs	r1, #7
 8014076:	4618      	mov	r0, r3
 8014078:	f7ff fbec 	bl	8013854 <unlock_fs>
 801407c:	2307      	movs	r3, #7
 801407e:	e166      	b.n	801434e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	699a      	ldr	r2, [r3, #24]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	441a      	add	r2, r3
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	699b      	ldr	r3, [r3, #24]
 801408c:	429a      	cmp	r2, r3
 801408e:	f080 814b 	bcs.w	8014328 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	699b      	ldr	r3, [r3, #24]
 8014096:	43db      	mvns	r3, r3
 8014098:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801409a:	e145      	b.n	8014328 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	699b      	ldr	r3, [r3, #24]
 80140a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	f040 8101 	bne.w	80142ac <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	699b      	ldr	r3, [r3, #24]
 80140ae:	0a5b      	lsrs	r3, r3, #9
 80140b0:	693a      	ldr	r2, [r7, #16]
 80140b2:	8952      	ldrh	r2, [r2, #10]
 80140b4:	3a01      	subs	r2, #1
 80140b6:	4013      	ands	r3, r2
 80140b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80140ba:	69bb      	ldr	r3, [r7, #24]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d14d      	bne.n	801415c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	699b      	ldr	r3, [r3, #24]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d10c      	bne.n	80140e2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	689b      	ldr	r3, [r3, #8]
 80140cc:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80140ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d11a      	bne.n	801410a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	2100      	movs	r1, #0
 80140d8:	4618      	mov	r0, r3
 80140da:	f7ff fe65 	bl	8013da8 <create_chain>
 80140de:	62b8      	str	r0, [r7, #40]	@ 0x28
 80140e0:	e013      	b.n	801410a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d007      	beq.n	80140fa <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	699b      	ldr	r3, [r3, #24]
 80140ee:	4619      	mov	r1, r3
 80140f0:	68f8      	ldr	r0, [r7, #12]
 80140f2:	f7ff fef1 	bl	8013ed8 <clmt_clust>
 80140f6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80140f8:	e007      	b.n	801410a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80140fa:	68fa      	ldr	r2, [r7, #12]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	69db      	ldr	r3, [r3, #28]
 8014100:	4619      	mov	r1, r3
 8014102:	4610      	mov	r0, r2
 8014104:	f7ff fe50 	bl	8013da8 <create_chain>
 8014108:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801410a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801410c:	2b00      	cmp	r3, #0
 801410e:	f000 8110 	beq.w	8014332 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014114:	2b01      	cmp	r3, #1
 8014116:	d109      	bne.n	801412c <f_write+0x11e>
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	2202      	movs	r2, #2
 801411c:	755a      	strb	r2, [r3, #21]
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	2102      	movs	r1, #2
 8014122:	4618      	mov	r0, r3
 8014124:	f7ff fb96 	bl	8013854 <unlock_fs>
 8014128:	2302      	movs	r3, #2
 801412a:	e110      	b.n	801434e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014132:	d109      	bne.n	8014148 <f_write+0x13a>
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	2201      	movs	r2, #1
 8014138:	755a      	strb	r2, [r3, #21]
 801413a:	693b      	ldr	r3, [r7, #16]
 801413c:	2101      	movs	r1, #1
 801413e:	4618      	mov	r0, r3
 8014140:	f7ff fb88 	bl	8013854 <unlock_fs>
 8014144:	2301      	movs	r3, #1
 8014146:	e102      	b.n	801434e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801414c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	689b      	ldr	r3, [r3, #8]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d102      	bne.n	801415c <f_write+0x14e>
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801415a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	7d1b      	ldrb	r3, [r3, #20]
 8014160:	b25b      	sxtb	r3, r3
 8014162:	2b00      	cmp	r3, #0
 8014164:	da1d      	bge.n	80141a2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	7858      	ldrb	r0, [r3, #1]
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	6a1a      	ldr	r2, [r3, #32]
 8014174:	2301      	movs	r3, #1
 8014176:	f7ff fa5b 	bl	8013630 <disk_write>
 801417a:	4603      	mov	r3, r0
 801417c:	2b00      	cmp	r3, #0
 801417e:	d009      	beq.n	8014194 <f_write+0x186>
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	2201      	movs	r2, #1
 8014184:	755a      	strb	r2, [r3, #21]
 8014186:	693b      	ldr	r3, [r7, #16]
 8014188:	2101      	movs	r1, #1
 801418a:	4618      	mov	r0, r3
 801418c:	f7ff fb62 	bl	8013854 <unlock_fs>
 8014190:	2301      	movs	r3, #1
 8014192:	e0dc      	b.n	801434e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	7d1b      	ldrb	r3, [r3, #20]
 8014198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801419c:	b2da      	uxtb	r2, r3
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80141a2:	693a      	ldr	r2, [r7, #16]
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	69db      	ldr	r3, [r3, #28]
 80141a8:	4619      	mov	r1, r3
 80141aa:	4610      	mov	r0, r2
 80141ac:	f7ff fc4c 	bl	8013a48 <clust2sect>
 80141b0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80141b2:	697b      	ldr	r3, [r7, #20]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d109      	bne.n	80141cc <f_write+0x1be>
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	2202      	movs	r2, #2
 80141bc:	755a      	strb	r2, [r3, #21]
 80141be:	693b      	ldr	r3, [r7, #16]
 80141c0:	2102      	movs	r1, #2
 80141c2:	4618      	mov	r0, r3
 80141c4:	f7ff fb46 	bl	8013854 <unlock_fs>
 80141c8:	2302      	movs	r3, #2
 80141ca:	e0c0      	b.n	801434e <f_write+0x340>
			sect += csect;
 80141cc:	697a      	ldr	r2, [r7, #20]
 80141ce:	69bb      	ldr	r3, [r7, #24]
 80141d0:	4413      	add	r3, r2
 80141d2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	0a5b      	lsrs	r3, r3, #9
 80141d8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80141da:	6a3b      	ldr	r3, [r7, #32]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d041      	beq.n	8014264 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80141e0:	69ba      	ldr	r2, [r7, #24]
 80141e2:	6a3b      	ldr	r3, [r7, #32]
 80141e4:	4413      	add	r3, r2
 80141e6:	693a      	ldr	r2, [r7, #16]
 80141e8:	8952      	ldrh	r2, [r2, #10]
 80141ea:	4293      	cmp	r3, r2
 80141ec:	d905      	bls.n	80141fa <f_write+0x1ec>
					cc = fs->csize - csect;
 80141ee:	693b      	ldr	r3, [r7, #16]
 80141f0:	895b      	ldrh	r3, [r3, #10]
 80141f2:	461a      	mov	r2, r3
 80141f4:	69bb      	ldr	r3, [r7, #24]
 80141f6:	1ad3      	subs	r3, r2, r3
 80141f8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	7858      	ldrb	r0, [r3, #1]
 80141fe:	6a3b      	ldr	r3, [r7, #32]
 8014200:	697a      	ldr	r2, [r7, #20]
 8014202:	69f9      	ldr	r1, [r7, #28]
 8014204:	f7ff fa14 	bl	8013630 <disk_write>
 8014208:	4603      	mov	r3, r0
 801420a:	2b00      	cmp	r3, #0
 801420c:	d009      	beq.n	8014222 <f_write+0x214>
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	2201      	movs	r2, #1
 8014212:	755a      	strb	r2, [r3, #21]
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	2101      	movs	r1, #1
 8014218:	4618      	mov	r0, r3
 801421a:	f7ff fb1b 	bl	8013854 <unlock_fs>
 801421e:	2301      	movs	r3, #1
 8014220:	e095      	b.n	801434e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	6a1a      	ldr	r2, [r3, #32]
 8014226:	697b      	ldr	r3, [r7, #20]
 8014228:	1ad3      	subs	r3, r2, r3
 801422a:	6a3a      	ldr	r2, [r7, #32]
 801422c:	429a      	cmp	r2, r3
 801422e:	d915      	bls.n	801425c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	6a1a      	ldr	r2, [r3, #32]
 801423a:	697b      	ldr	r3, [r7, #20]
 801423c:	1ad3      	subs	r3, r2, r3
 801423e:	025b      	lsls	r3, r3, #9
 8014240:	69fa      	ldr	r2, [r7, #28]
 8014242:	4413      	add	r3, r2
 8014244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014248:	4619      	mov	r1, r3
 801424a:	f7ff fab1 	bl	80137b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	7d1b      	ldrb	r3, [r3, #20]
 8014252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014256:	b2da      	uxtb	r2, r3
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801425c:	6a3b      	ldr	r3, [r7, #32]
 801425e:	025b      	lsls	r3, r3, #9
 8014260:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014262:	e044      	b.n	80142ee <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	6a1b      	ldr	r3, [r3, #32]
 8014268:	697a      	ldr	r2, [r7, #20]
 801426a:	429a      	cmp	r2, r3
 801426c:	d01b      	beq.n	80142a6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	699a      	ldr	r2, [r3, #24]
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014276:	429a      	cmp	r2, r3
 8014278:	d215      	bcs.n	80142a6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	7858      	ldrb	r0, [r3, #1]
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014284:	2301      	movs	r3, #1
 8014286:	697a      	ldr	r2, [r7, #20]
 8014288:	f7ff f9b2 	bl	80135f0 <disk_read>
 801428c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801428e:	2b00      	cmp	r3, #0
 8014290:	d009      	beq.n	80142a6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	2201      	movs	r2, #1
 8014296:	755a      	strb	r2, [r3, #21]
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	2101      	movs	r1, #1
 801429c:	4618      	mov	r0, r3
 801429e:	f7ff fad9 	bl	8013854 <unlock_fs>
 80142a2:	2301      	movs	r3, #1
 80142a4:	e053      	b.n	801434e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	697a      	ldr	r2, [r7, #20]
 80142aa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	699b      	ldr	r3, [r3, #24]
 80142b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142b4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80142b8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80142ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	429a      	cmp	r2, r3
 80142c0:	d901      	bls.n	80142c6 <f_write+0x2b8>
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	699b      	ldr	r3, [r3, #24]
 80142d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142d4:	4413      	add	r3, r2
 80142d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142d8:	69f9      	ldr	r1, [r7, #28]
 80142da:	4618      	mov	r0, r3
 80142dc:	f7ff fa68 	bl	80137b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	7d1b      	ldrb	r3, [r3, #20]
 80142e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80142e8:	b2da      	uxtb	r2, r3
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80142ee:	69fa      	ldr	r2, [r7, #28]
 80142f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142f2:	4413      	add	r3, r2
 80142f4:	61fb      	str	r3, [r7, #28]
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	699a      	ldr	r2, [r3, #24]
 80142fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142fc:	441a      	add	r2, r3
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	619a      	str	r2, [r3, #24]
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	68da      	ldr	r2, [r3, #12]
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	699b      	ldr	r3, [r3, #24]
 801430a:	429a      	cmp	r2, r3
 801430c:	bf38      	it	cc
 801430e:	461a      	movcc	r2, r3
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	60da      	str	r2, [r3, #12]
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	681a      	ldr	r2, [r3, #0]
 8014318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801431a:	441a      	add	r2, r3
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	601a      	str	r2, [r3, #0]
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014324:	1ad3      	subs	r3, r2, r3
 8014326:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	2b00      	cmp	r3, #0
 801432c:	f47f aeb6 	bne.w	801409c <f_write+0x8e>
 8014330:	e000      	b.n	8014334 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014332:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	7d1b      	ldrb	r3, [r3, #20]
 8014338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801433c:	b2da      	uxtb	r2, r3
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	2100      	movs	r1, #0
 8014346:	4618      	mov	r0, r3
 8014348:	f7ff fa84 	bl	8013854 <unlock_fs>
 801434c:	2300      	movs	r3, #0
}
 801434e:	4618      	mov	r0, r3
 8014350:	3730      	adds	r7, #48	@ 0x30
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}

08014356 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014356:	b580      	push	{r7, lr}
 8014358:	b086      	sub	sp, #24
 801435a:	af00      	add	r7, sp, #0
 801435c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	f107 0208 	add.w	r2, r7, #8
 8014364:	4611      	mov	r1, r2
 8014366:	4618      	mov	r0, r3
 8014368:	f7ff fe0a 	bl	8013f80 <validate>
 801436c:	4603      	mov	r3, r0
 801436e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014370:	7dfb      	ldrb	r3, [r7, #23]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d16d      	bne.n	8014452 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	7d1b      	ldrb	r3, [r3, #20]
 801437a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801437e:	2b00      	cmp	r3, #0
 8014380:	d067      	beq.n	8014452 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	7d1b      	ldrb	r3, [r3, #20]
 8014386:	b25b      	sxtb	r3, r3
 8014388:	2b00      	cmp	r3, #0
 801438a:	da1a      	bge.n	80143c2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	7858      	ldrb	r0, [r3, #1]
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	6a1a      	ldr	r2, [r3, #32]
 801439a:	2301      	movs	r3, #1
 801439c:	f7ff f948 	bl	8013630 <disk_write>
 80143a0:	4603      	mov	r3, r0
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d006      	beq.n	80143b4 <f_sync+0x5e>
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	2101      	movs	r1, #1
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7ff fa52 	bl	8013854 <unlock_fs>
 80143b0:	2301      	movs	r3, #1
 80143b2:	e055      	b.n	8014460 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	7d1b      	ldrb	r3, [r3, #20]
 80143b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80143bc:	b2da      	uxtb	r2, r3
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80143c2:	f7fe fbd9 	bl	8012b78 <get_fattime>
 80143c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80143c8:	68ba      	ldr	r2, [r7, #8]
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143ce:	4619      	mov	r1, r3
 80143d0:	4610      	mov	r0, r2
 80143d2:	f7ff fa9e 	bl	8013912 <move_window>
 80143d6:	4603      	mov	r3, r0
 80143d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80143da:	7dfb      	ldrb	r3, [r7, #23]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d138      	bne.n	8014452 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	330b      	adds	r3, #11
 80143ea:	781a      	ldrb	r2, [r3, #0]
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	330b      	adds	r3, #11
 80143f0:	f042 0220 	orr.w	r2, r2, #32
 80143f4:	b2d2      	uxtb	r2, r2
 80143f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	6818      	ldr	r0, [r3, #0]
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	689b      	ldr	r3, [r3, #8]
 8014400:	461a      	mov	r2, r3
 8014402:	68f9      	ldr	r1, [r7, #12]
 8014404:	f7ff fd9c 	bl	8013f40 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	f103 021c 	add.w	r2, r3, #28
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	68db      	ldr	r3, [r3, #12]
 8014412:	4619      	mov	r1, r3
 8014414:	4610      	mov	r0, r2
 8014416:	f7ff f99f 	bl	8013758 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	3316      	adds	r3, #22
 801441e:	6939      	ldr	r1, [r7, #16]
 8014420:	4618      	mov	r0, r3
 8014422:	f7ff f999 	bl	8013758 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	3312      	adds	r3, #18
 801442a:	2100      	movs	r1, #0
 801442c:	4618      	mov	r0, r3
 801442e:	f7ff f978 	bl	8013722 <st_word>
					fs->wflag = 1;
 8014432:	68bb      	ldr	r3, [r7, #8]
 8014434:	2201      	movs	r2, #1
 8014436:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014438:	68bb      	ldr	r3, [r7, #8]
 801443a:	4618      	mov	r0, r3
 801443c:	f7ff fa96 	bl	801396c <sync_fs>
 8014440:	4603      	mov	r3, r0
 8014442:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	7d1b      	ldrb	r3, [r3, #20]
 8014448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801444c:	b2da      	uxtb	r2, r3
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014452:	68bb      	ldr	r3, [r7, #8]
 8014454:	7dfa      	ldrb	r2, [r7, #23]
 8014456:	4611      	mov	r1, r2
 8014458:	4618      	mov	r0, r3
 801445a:	f7ff f9fb 	bl	8013854 <unlock_fs>
 801445e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014460:	4618      	mov	r0, r3
 8014462:	3718      	adds	r7, #24
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014468:	b480      	push	{r7}
 801446a:	b087      	sub	sp, #28
 801446c:	af00      	add	r7, sp, #0
 801446e:	60f8      	str	r0, [r7, #12]
 8014470:	60b9      	str	r1, [r7, #8]
 8014472:	4613      	mov	r3, r2
 8014474:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014476:	2301      	movs	r3, #1
 8014478:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801447a:	2300      	movs	r3, #0
 801447c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801447e:	4b1f      	ldr	r3, [pc, #124]	@ (80144fc <FATFS_LinkDriverEx+0x94>)
 8014480:	7a5b      	ldrb	r3, [r3, #9]
 8014482:	b2db      	uxtb	r3, r3
 8014484:	2b00      	cmp	r3, #0
 8014486:	d131      	bne.n	80144ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014488:	4b1c      	ldr	r3, [pc, #112]	@ (80144fc <FATFS_LinkDriverEx+0x94>)
 801448a:	7a5b      	ldrb	r3, [r3, #9]
 801448c:	b2db      	uxtb	r3, r3
 801448e:	461a      	mov	r2, r3
 8014490:	4b1a      	ldr	r3, [pc, #104]	@ (80144fc <FATFS_LinkDriverEx+0x94>)
 8014492:	2100      	movs	r1, #0
 8014494:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014496:	4b19      	ldr	r3, [pc, #100]	@ (80144fc <FATFS_LinkDriverEx+0x94>)
 8014498:	7a5b      	ldrb	r3, [r3, #9]
 801449a:	b2db      	uxtb	r3, r3
 801449c:	4a17      	ldr	r2, [pc, #92]	@ (80144fc <FATFS_LinkDriverEx+0x94>)
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	4413      	add	r3, r2
 80144a2:	68fa      	ldr	r2, [r7, #12]
 80144a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80144a6:	4b15      	ldr	r3, [pc, #84]	@ (80144fc <FATFS_LinkDriverEx+0x94>)
 80144a8:	7a5b      	ldrb	r3, [r3, #9]
 80144aa:	b2db      	uxtb	r3, r3
 80144ac:	461a      	mov	r2, r3
 80144ae:	4b13      	ldr	r3, [pc, #76]	@ (80144fc <FATFS_LinkDriverEx+0x94>)
 80144b0:	4413      	add	r3, r2
 80144b2:	79fa      	ldrb	r2, [r7, #7]
 80144b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80144b6:	4b11      	ldr	r3, [pc, #68]	@ (80144fc <FATFS_LinkDriverEx+0x94>)
 80144b8:	7a5b      	ldrb	r3, [r3, #9]
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	1c5a      	adds	r2, r3, #1
 80144be:	b2d1      	uxtb	r1, r2
 80144c0:	4a0e      	ldr	r2, [pc, #56]	@ (80144fc <FATFS_LinkDriverEx+0x94>)
 80144c2:	7251      	strb	r1, [r2, #9]
 80144c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80144c6:	7dbb      	ldrb	r3, [r7, #22]
 80144c8:	3330      	adds	r3, #48	@ 0x30
 80144ca:	b2da      	uxtb	r2, r3
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	3301      	adds	r3, #1
 80144d4:	223a      	movs	r2, #58	@ 0x3a
 80144d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	3302      	adds	r3, #2
 80144dc:	222f      	movs	r2, #47	@ 0x2f
 80144de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	3303      	adds	r3, #3
 80144e4:	2200      	movs	r2, #0
 80144e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80144e8:	2300      	movs	r3, #0
 80144ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80144ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	371c      	adds	r7, #28
 80144f2:	46bd      	mov	sp, r7
 80144f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f8:	4770      	bx	lr
 80144fa:	bf00      	nop
 80144fc:	24002988 	.word	0x24002988

08014500 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801450a:	2200      	movs	r2, #0
 801450c:	6839      	ldr	r1, [r7, #0]
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f7ff ffaa 	bl	8014468 <FATFS_LinkDriverEx>
 8014514:	4603      	mov	r3, r0
}
 8014516:	4618      	mov	r0, r3
 8014518:	3708      	adds	r7, #8
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}

0801451e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801451e:	b580      	push	{r7, lr}
 8014520:	b084      	sub	sp, #16
 8014522:	af00      	add	r7, sp, #0
 8014524:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014526:	2300      	movs	r3, #0
 8014528:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801452a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f000 f8a6 	bl	8014680 <osSemaphoreWait>
 8014534:	4603      	mov	r3, r0
 8014536:	2b00      	cmp	r3, #0
 8014538:	d101      	bne.n	801453e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801453a:	2301      	movs	r3, #1
 801453c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801453e:	68fb      	ldr	r3, [r7, #12]
}
 8014540:	4618      	mov	r0, r3
 8014542:	3710      	adds	r7, #16
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}

08014548 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f000 f8e3 	bl	801471c <osSemaphoreRelease>
#endif
}
 8014556:	bf00      	nop
 8014558:	3708      	adds	r7, #8
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}

0801455e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801455e:	b480      	push	{r7}
 8014560:	b085      	sub	sp, #20
 8014562:	af00      	add	r7, sp, #0
 8014564:	4603      	mov	r3, r0
 8014566:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014568:	2300      	movs	r3, #0
 801456a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801456c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014570:	2b84      	cmp	r3, #132	@ 0x84
 8014572:	d005      	beq.n	8014580 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014574:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	4413      	add	r3, r2
 801457c:	3303      	adds	r3, #3
 801457e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014580:	68fb      	ldr	r3, [r7, #12]
}
 8014582:	4618      	mov	r0, r3
 8014584:	3714      	adds	r7, #20
 8014586:	46bd      	mov	sp, r7
 8014588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458c:	4770      	bx	lr

0801458e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801458e:	b480      	push	{r7}
 8014590:	b083      	sub	sp, #12
 8014592:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014594:	f3ef 8305 	mrs	r3, IPSR
 8014598:	607b      	str	r3, [r7, #4]
  return(result);
 801459a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801459c:	2b00      	cmp	r3, #0
 801459e:	bf14      	ite	ne
 80145a0:	2301      	movne	r3, #1
 80145a2:	2300      	moveq	r3, #0
 80145a4:	b2db      	uxtb	r3, r3
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	370c      	adds	r7, #12
 80145aa:	46bd      	mov	sp, r7
 80145ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b0:	4770      	bx	lr

080145b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80145b2:	b580      	push	{r7, lr}
 80145b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80145b6:	f000 ffb5 	bl	8015524 <vTaskStartScheduler>
  
  return osOK;
 80145ba:	2300      	movs	r3, #0
}
 80145bc:	4618      	mov	r0, r3
 80145be:	bd80      	pop	{r7, pc}

080145c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80145c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145c2:	b089      	sub	sp, #36	@ 0x24
 80145c4:	af04      	add	r7, sp, #16
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	695b      	ldr	r3, [r3, #20]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d020      	beq.n	8014614 <osThreadCreate+0x54>
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	699b      	ldr	r3, [r3, #24]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d01c      	beq.n	8014614 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	685c      	ldr	r4, [r3, #4]
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	691e      	ldr	r6, [r3, #16]
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7ff ffb6 	bl	801455e <makeFreeRtosPriority>
 80145f2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	695b      	ldr	r3, [r3, #20]
 80145f8:	687a      	ldr	r2, [r7, #4]
 80145fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80145fc:	9202      	str	r2, [sp, #8]
 80145fe:	9301      	str	r3, [sp, #4]
 8014600:	9100      	str	r1, [sp, #0]
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	4632      	mov	r2, r6
 8014606:	4629      	mov	r1, r5
 8014608:	4620      	mov	r0, r4
 801460a:	f000 fdbd 	bl	8015188 <xTaskCreateStatic>
 801460e:	4603      	mov	r3, r0
 8014610:	60fb      	str	r3, [r7, #12]
 8014612:	e01c      	b.n	801464e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	685c      	ldr	r4, [r3, #4]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014620:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014628:	4618      	mov	r0, r3
 801462a:	f7ff ff98 	bl	801455e <makeFreeRtosPriority>
 801462e:	4602      	mov	r2, r0
 8014630:	f107 030c 	add.w	r3, r7, #12
 8014634:	9301      	str	r3, [sp, #4]
 8014636:	9200      	str	r2, [sp, #0]
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	4632      	mov	r2, r6
 801463c:	4629      	mov	r1, r5
 801463e:	4620      	mov	r0, r4
 8014640:	f000 fe02 	bl	8015248 <xTaskCreate>
 8014644:	4603      	mov	r3, r0
 8014646:	2b01      	cmp	r3, #1
 8014648:	d001      	beq.n	801464e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801464a:	2300      	movs	r3, #0
 801464c:	e000      	b.n	8014650 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801464e:	68fb      	ldr	r3, [r7, #12]
}
 8014650:	4618      	mov	r0, r3
 8014652:	3714      	adds	r7, #20
 8014654:	46bd      	mov	sp, r7
 8014656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014658 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b084      	sub	sp, #16
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d001      	beq.n	801466e <osDelay+0x16>
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	e000      	b.n	8014670 <osDelay+0x18>
 801466e:	2301      	movs	r3, #1
 8014670:	4618      	mov	r0, r3
 8014672:	f000 ff21 	bl	80154b8 <vTaskDelay>
  
  return osOK;
 8014676:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014678:	4618      	mov	r0, r3
 801467a:	3710      	adds	r7, #16
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}

08014680 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801468a:	2300      	movs	r3, #0
 801468c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d101      	bne.n	8014698 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8014694:	2380      	movs	r3, #128	@ 0x80
 8014696:	e03a      	b.n	801470e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8014698:	2300      	movs	r3, #0
 801469a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146a2:	d103      	bne.n	80146ac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80146a4:	f04f 33ff 	mov.w	r3, #4294967295
 80146a8:	60fb      	str	r3, [r7, #12]
 80146aa:	e009      	b.n	80146c0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d006      	beq.n	80146c0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d101      	bne.n	80146c0 <osSemaphoreWait+0x40>
      ticks = 1;
 80146bc:	2301      	movs	r3, #1
 80146be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80146c0:	f7ff ff65 	bl	801458e <inHandlerMode>
 80146c4:	4603      	mov	r3, r0
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d017      	beq.n	80146fa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80146ca:	f107 0308 	add.w	r3, r7, #8
 80146ce:	461a      	mov	r2, r3
 80146d0:	2100      	movs	r1, #0
 80146d2:	6878      	ldr	r0, [r7, #4]
 80146d4:	f000 fbae 	bl	8014e34 <xQueueReceiveFromISR>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b01      	cmp	r3, #1
 80146dc:	d001      	beq.n	80146e2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80146de:	23ff      	movs	r3, #255	@ 0xff
 80146e0:	e015      	b.n	801470e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80146e2:	68bb      	ldr	r3, [r7, #8]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d011      	beq.n	801470c <osSemaphoreWait+0x8c>
 80146e8:	4b0b      	ldr	r3, [pc, #44]	@ (8014718 <osSemaphoreWait+0x98>)
 80146ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146ee:	601a      	str	r2, [r3, #0]
 80146f0:	f3bf 8f4f 	dsb	sy
 80146f4:	f3bf 8f6f 	isb	sy
 80146f8:	e008      	b.n	801470c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80146fa:	68f9      	ldr	r1, [r7, #12]
 80146fc:	6878      	ldr	r0, [r7, #4]
 80146fe:	f000 fa89 	bl	8014c14 <xQueueSemaphoreTake>
 8014702:	4603      	mov	r3, r0
 8014704:	2b01      	cmp	r3, #1
 8014706:	d001      	beq.n	801470c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014708:	23ff      	movs	r3, #255	@ 0xff
 801470a:	e000      	b.n	801470e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 801470c:	2300      	movs	r3, #0
}
 801470e:	4618      	mov	r0, r3
 8014710:	3710      	adds	r7, #16
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	e000ed04 	.word	0xe000ed04

0801471c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b084      	sub	sp, #16
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014724:	2300      	movs	r3, #0
 8014726:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014728:	2300      	movs	r3, #0
 801472a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801472c:	f7ff ff2f 	bl	801458e <inHandlerMode>
 8014730:	4603      	mov	r3, r0
 8014732:	2b00      	cmp	r3, #0
 8014734:	d016      	beq.n	8014764 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014736:	f107 0308 	add.w	r3, r7, #8
 801473a:	4619      	mov	r1, r3
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 f9d9 	bl	8014af4 <xQueueGiveFromISR>
 8014742:	4603      	mov	r3, r0
 8014744:	2b01      	cmp	r3, #1
 8014746:	d001      	beq.n	801474c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014748:	23ff      	movs	r3, #255	@ 0xff
 801474a:	e017      	b.n	801477c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d013      	beq.n	801477a <osSemaphoreRelease+0x5e>
 8014752:	4b0c      	ldr	r3, [pc, #48]	@ (8014784 <osSemaphoreRelease+0x68>)
 8014754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014758:	601a      	str	r2, [r3, #0]
 801475a:	f3bf 8f4f 	dsb	sy
 801475e:	f3bf 8f6f 	isb	sy
 8014762:	e00a      	b.n	801477a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014764:	2300      	movs	r3, #0
 8014766:	2200      	movs	r2, #0
 8014768:	2100      	movs	r1, #0
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f000 f8c0 	bl	80148f0 <xQueueGenericSend>
 8014770:	4603      	mov	r3, r0
 8014772:	2b01      	cmp	r3, #1
 8014774:	d001      	beq.n	801477a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014776:	23ff      	movs	r3, #255	@ 0xff
 8014778:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801477a:	68fb      	ldr	r3, [r7, #12]
}
 801477c:	4618      	mov	r0, r3
 801477e:	3710      	adds	r7, #16
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}
 8014784:	e000ed04 	.word	0xe000ed04

08014788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014788:	b480      	push	{r7}
 801478a:	b083      	sub	sp, #12
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f103 0208 	add.w	r2, r3, #8
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f04f 32ff 	mov.w	r2, #4294967295
 80147a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f103 0208 	add.w	r2, r3, #8
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f103 0208 	add.w	r2, r3, #8
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2200      	movs	r2, #0
 80147ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80147bc:	bf00      	nop
 80147be:	370c      	adds	r7, #12
 80147c0:	46bd      	mov	sp, r7
 80147c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c6:	4770      	bx	lr

080147c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80147c8:	b480      	push	{r7}
 80147ca:	b083      	sub	sp, #12
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2200      	movs	r2, #0
 80147d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80147d6:	bf00      	nop
 80147d8:	370c      	adds	r7, #12
 80147da:	46bd      	mov	sp, r7
 80147dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e0:	4770      	bx	lr

080147e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80147e2:	b480      	push	{r7}
 80147e4:	b085      	sub	sp, #20
 80147e6:	af00      	add	r7, sp, #0
 80147e8:	6078      	str	r0, [r7, #4]
 80147ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	685b      	ldr	r3, [r3, #4]
 80147f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	68fa      	ldr	r2, [r7, #12]
 80147f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	689a      	ldr	r2, [r3, #8]
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	689b      	ldr	r3, [r3, #8]
 8014804:	683a      	ldr	r2, [r7, #0]
 8014806:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	683a      	ldr	r2, [r7, #0]
 801480c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	687a      	ldr	r2, [r7, #4]
 8014812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	1c5a      	adds	r2, r3, #1
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	601a      	str	r2, [r3, #0]
}
 801481e:	bf00      	nop
 8014820:	3714      	adds	r7, #20
 8014822:	46bd      	mov	sp, r7
 8014824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014828:	4770      	bx	lr

0801482a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801482a:	b480      	push	{r7}
 801482c:	b085      	sub	sp, #20
 801482e:	af00      	add	r7, sp, #0
 8014830:	6078      	str	r0, [r7, #4]
 8014832:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014840:	d103      	bne.n	801484a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	691b      	ldr	r3, [r3, #16]
 8014846:	60fb      	str	r3, [r7, #12]
 8014848:	e00c      	b.n	8014864 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	3308      	adds	r3, #8
 801484e:	60fb      	str	r3, [r7, #12]
 8014850:	e002      	b.n	8014858 <vListInsert+0x2e>
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	60fb      	str	r3, [r7, #12]
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	685b      	ldr	r3, [r3, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	68ba      	ldr	r2, [r7, #8]
 8014860:	429a      	cmp	r2, r3
 8014862:	d2f6      	bcs.n	8014852 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	685a      	ldr	r2, [r3, #4]
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	685b      	ldr	r3, [r3, #4]
 8014870:	683a      	ldr	r2, [r7, #0]
 8014872:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	68fa      	ldr	r2, [r7, #12]
 8014878:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	683a      	ldr	r2, [r7, #0]
 801487e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	687a      	ldr	r2, [r7, #4]
 8014884:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	1c5a      	adds	r2, r3, #1
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	601a      	str	r2, [r3, #0]
}
 8014890:	bf00      	nop
 8014892:	3714      	adds	r7, #20
 8014894:	46bd      	mov	sp, r7
 8014896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489a:	4770      	bx	lr

0801489c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801489c:	b480      	push	{r7}
 801489e:	b085      	sub	sp, #20
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	691b      	ldr	r3, [r3, #16]
 80148a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	685b      	ldr	r3, [r3, #4]
 80148ae:	687a      	ldr	r2, [r7, #4]
 80148b0:	6892      	ldr	r2, [r2, #8]
 80148b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	689b      	ldr	r3, [r3, #8]
 80148b8:	687a      	ldr	r2, [r7, #4]
 80148ba:	6852      	ldr	r2, [r2, #4]
 80148bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	685b      	ldr	r3, [r3, #4]
 80148c2:	687a      	ldr	r2, [r7, #4]
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d103      	bne.n	80148d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	689a      	ldr	r2, [r3, #8]
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2200      	movs	r2, #0
 80148d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	1e5a      	subs	r2, r3, #1
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	681b      	ldr	r3, [r3, #0]
}
 80148e4:	4618      	mov	r0, r3
 80148e6:	3714      	adds	r7, #20
 80148e8:	46bd      	mov	sp, r7
 80148ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ee:	4770      	bx	lr

080148f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b08e      	sub	sp, #56	@ 0x38
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	60f8      	str	r0, [r7, #12]
 80148f8:	60b9      	str	r1, [r7, #8]
 80148fa:	607a      	str	r2, [r7, #4]
 80148fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80148fe:	2300      	movs	r3, #0
 8014900:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014908:	2b00      	cmp	r3, #0
 801490a:	d10b      	bne.n	8014924 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801490c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014910:	f383 8811 	msr	BASEPRI, r3
 8014914:	f3bf 8f6f 	isb	sy
 8014918:	f3bf 8f4f 	dsb	sy
 801491c:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801491e:	bf00      	nop
 8014920:	bf00      	nop
 8014922:	e7fd      	b.n	8014920 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d103      	bne.n	8014932 <xQueueGenericSend+0x42>
 801492a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801492e:	2b00      	cmp	r3, #0
 8014930:	d101      	bne.n	8014936 <xQueueGenericSend+0x46>
 8014932:	2301      	movs	r3, #1
 8014934:	e000      	b.n	8014938 <xQueueGenericSend+0x48>
 8014936:	2300      	movs	r3, #0
 8014938:	2b00      	cmp	r3, #0
 801493a:	d10b      	bne.n	8014954 <xQueueGenericSend+0x64>
	__asm volatile
 801493c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014940:	f383 8811 	msr	BASEPRI, r3
 8014944:	f3bf 8f6f 	isb	sy
 8014948:	f3bf 8f4f 	dsb	sy
 801494c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801494e:	bf00      	nop
 8014950:	bf00      	nop
 8014952:	e7fd      	b.n	8014950 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	2b02      	cmp	r3, #2
 8014958:	d103      	bne.n	8014962 <xQueueGenericSend+0x72>
 801495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801495c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801495e:	2b01      	cmp	r3, #1
 8014960:	d101      	bne.n	8014966 <xQueueGenericSend+0x76>
 8014962:	2301      	movs	r3, #1
 8014964:	e000      	b.n	8014968 <xQueueGenericSend+0x78>
 8014966:	2300      	movs	r3, #0
 8014968:	2b00      	cmp	r3, #0
 801496a:	d10b      	bne.n	8014984 <xQueueGenericSend+0x94>
	__asm volatile
 801496c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014970:	f383 8811 	msr	BASEPRI, r3
 8014974:	f3bf 8f6f 	isb	sy
 8014978:	f3bf 8f4f 	dsb	sy
 801497c:	623b      	str	r3, [r7, #32]
}
 801497e:	bf00      	nop
 8014980:	bf00      	nop
 8014982:	e7fd      	b.n	8014980 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014984:	f001 f9d8 	bl	8015d38 <xTaskGetSchedulerState>
 8014988:	4603      	mov	r3, r0
 801498a:	2b00      	cmp	r3, #0
 801498c:	d102      	bne.n	8014994 <xQueueGenericSend+0xa4>
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d101      	bne.n	8014998 <xQueueGenericSend+0xa8>
 8014994:	2301      	movs	r3, #1
 8014996:	e000      	b.n	801499a <xQueueGenericSend+0xaa>
 8014998:	2300      	movs	r3, #0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d10b      	bne.n	80149b6 <xQueueGenericSend+0xc6>
	__asm volatile
 801499e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149a2:	f383 8811 	msr	BASEPRI, r3
 80149a6:	f3bf 8f6f 	isb	sy
 80149aa:	f3bf 8f4f 	dsb	sy
 80149ae:	61fb      	str	r3, [r7, #28]
}
 80149b0:	bf00      	nop
 80149b2:	bf00      	nop
 80149b4:	e7fd      	b.n	80149b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80149b6:	f001 fd17 	bl	80163e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80149ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80149be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d302      	bcc.n	80149cc <xQueueGenericSend+0xdc>
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	2b02      	cmp	r3, #2
 80149ca:	d129      	bne.n	8014a20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80149cc:	683a      	ldr	r2, [r7, #0]
 80149ce:	68b9      	ldr	r1, [r7, #8]
 80149d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80149d2:	f000 fac9 	bl	8014f68 <prvCopyDataToQueue>
 80149d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80149d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d010      	beq.n	8014a02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80149e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149e2:	3324      	adds	r3, #36	@ 0x24
 80149e4:	4618      	mov	r0, r3
 80149e6:	f000 ffe7 	bl	80159b8 <xTaskRemoveFromEventList>
 80149ea:	4603      	mov	r3, r0
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d013      	beq.n	8014a18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80149f0:	4b3f      	ldr	r3, [pc, #252]	@ (8014af0 <xQueueGenericSend+0x200>)
 80149f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80149f6:	601a      	str	r2, [r3, #0]
 80149f8:	f3bf 8f4f 	dsb	sy
 80149fc:	f3bf 8f6f 	isb	sy
 8014a00:	e00a      	b.n	8014a18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d007      	beq.n	8014a18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014a08:	4b39      	ldr	r3, [pc, #228]	@ (8014af0 <xQueueGenericSend+0x200>)
 8014a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014a0e:	601a      	str	r2, [r3, #0]
 8014a10:	f3bf 8f4f 	dsb	sy
 8014a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014a18:	f001 fd18 	bl	801644c <vPortExitCritical>
				return pdPASS;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	e063      	b.n	8014ae8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d103      	bne.n	8014a2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014a26:	f001 fd11 	bl	801644c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	e05c      	b.n	8014ae8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d106      	bne.n	8014a42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014a34:	f107 0314 	add.w	r3, r7, #20
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f001 f821 	bl	8015a80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014a3e:	2301      	movs	r3, #1
 8014a40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014a42:	f001 fd03 	bl	801644c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014a46:	f000 fdcf 	bl	80155e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014a4a:	f001 fccd 	bl	80163e8 <vPortEnterCritical>
 8014a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014a54:	b25b      	sxtb	r3, r3
 8014a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a5a:	d103      	bne.n	8014a64 <xQueueGenericSend+0x174>
 8014a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a5e:	2200      	movs	r2, #0
 8014a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014a6a:	b25b      	sxtb	r3, r3
 8014a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a70:	d103      	bne.n	8014a7a <xQueueGenericSend+0x18a>
 8014a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a74:	2200      	movs	r2, #0
 8014a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014a7a:	f001 fce7 	bl	801644c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014a7e:	1d3a      	adds	r2, r7, #4
 8014a80:	f107 0314 	add.w	r3, r7, #20
 8014a84:	4611      	mov	r1, r2
 8014a86:	4618      	mov	r0, r3
 8014a88:	f001 f810 	bl	8015aac <xTaskCheckForTimeOut>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d124      	bne.n	8014adc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014a92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a94:	f000 fb60 	bl	8015158 <prvIsQueueFull>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d018      	beq.n	8014ad0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aa0:	3310      	adds	r3, #16
 8014aa2:	687a      	ldr	r2, [r7, #4]
 8014aa4:	4611      	mov	r1, r2
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f000 ff60 	bl	801596c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014aae:	f000 faeb 	bl	8015088 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014ab2:	f000 fda7 	bl	8015604 <xTaskResumeAll>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	f47f af7c 	bne.w	80149b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014abe:	4b0c      	ldr	r3, [pc, #48]	@ (8014af0 <xQueueGenericSend+0x200>)
 8014ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ac4:	601a      	str	r2, [r3, #0]
 8014ac6:	f3bf 8f4f 	dsb	sy
 8014aca:	f3bf 8f6f 	isb	sy
 8014ace:	e772      	b.n	80149b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ad2:	f000 fad9 	bl	8015088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014ad6:	f000 fd95 	bl	8015604 <xTaskResumeAll>
 8014ada:	e76c      	b.n	80149b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014adc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ade:	f000 fad3 	bl	8015088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014ae2:	f000 fd8f 	bl	8015604 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014ae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	3738      	adds	r7, #56	@ 0x38
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}
 8014af0:	e000ed04 	.word	0xe000ed04

08014af4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b08e      	sub	sp, #56	@ 0x38
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d10b      	bne.n	8014b20 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8014b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b0c:	f383 8811 	msr	BASEPRI, r3
 8014b10:	f3bf 8f6f 	isb	sy
 8014b14:	f3bf 8f4f 	dsb	sy
 8014b18:	623b      	str	r3, [r7, #32]
}
 8014b1a:	bf00      	nop
 8014b1c:	bf00      	nop
 8014b1e:	e7fd      	b.n	8014b1c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d00b      	beq.n	8014b40 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8014b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b2c:	f383 8811 	msr	BASEPRI, r3
 8014b30:	f3bf 8f6f 	isb	sy
 8014b34:	f3bf 8f4f 	dsb	sy
 8014b38:	61fb      	str	r3, [r7, #28]
}
 8014b3a:	bf00      	nop
 8014b3c:	bf00      	nop
 8014b3e:	e7fd      	b.n	8014b3c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d103      	bne.n	8014b50 <xQueueGiveFromISR+0x5c>
 8014b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b4a:	689b      	ldr	r3, [r3, #8]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d101      	bne.n	8014b54 <xQueueGiveFromISR+0x60>
 8014b50:	2301      	movs	r3, #1
 8014b52:	e000      	b.n	8014b56 <xQueueGiveFromISR+0x62>
 8014b54:	2300      	movs	r3, #0
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d10b      	bne.n	8014b72 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8014b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b5e:	f383 8811 	msr	BASEPRI, r3
 8014b62:	f3bf 8f6f 	isb	sy
 8014b66:	f3bf 8f4f 	dsb	sy
 8014b6a:	61bb      	str	r3, [r7, #24]
}
 8014b6c:	bf00      	nop
 8014b6e:	bf00      	nop
 8014b70:	e7fd      	b.n	8014b6e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014b72:	f001 fd19 	bl	80165a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014b76:	f3ef 8211 	mrs	r2, BASEPRI
 8014b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b7e:	f383 8811 	msr	BASEPRI, r3
 8014b82:	f3bf 8f6f 	isb	sy
 8014b86:	f3bf 8f4f 	dsb	sy
 8014b8a:	617a      	str	r2, [r7, #20]
 8014b8c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014b8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014b96:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014b9e:	429a      	cmp	r2, r3
 8014ba0:	d22b      	bcs.n	8014bfa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bae:	1c5a      	adds	r2, r3, #1
 8014bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bb2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014bb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bbc:	d112      	bne.n	8014be4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d016      	beq.n	8014bf4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc8:	3324      	adds	r3, #36	@ 0x24
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f000 fef4 	bl	80159b8 <xTaskRemoveFromEventList>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d00e      	beq.n	8014bf4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d00b      	beq.n	8014bf4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	2201      	movs	r2, #1
 8014be0:	601a      	str	r2, [r3, #0]
 8014be2:	e007      	b.n	8014bf4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014be4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014be8:	3301      	adds	r3, #1
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	b25a      	sxtb	r2, r3
 8014bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8014bf8:	e001      	b.n	8014bfe <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8014bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c00:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014c08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3738      	adds	r7, #56	@ 0x38
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}

08014c14 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b08e      	sub	sp, #56	@ 0x38
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014c26:	2300      	movs	r3, #0
 8014c28:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d10b      	bne.n	8014c48 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8014c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c34:	f383 8811 	msr	BASEPRI, r3
 8014c38:	f3bf 8f6f 	isb	sy
 8014c3c:	f3bf 8f4f 	dsb	sy
 8014c40:	623b      	str	r3, [r7, #32]
}
 8014c42:	bf00      	nop
 8014c44:	bf00      	nop
 8014c46:	e7fd      	b.n	8014c44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d00b      	beq.n	8014c68 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8014c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c54:	f383 8811 	msr	BASEPRI, r3
 8014c58:	f3bf 8f6f 	isb	sy
 8014c5c:	f3bf 8f4f 	dsb	sy
 8014c60:	61fb      	str	r3, [r7, #28]
}
 8014c62:	bf00      	nop
 8014c64:	bf00      	nop
 8014c66:	e7fd      	b.n	8014c64 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014c68:	f001 f866 	bl	8015d38 <xTaskGetSchedulerState>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d102      	bne.n	8014c78 <xQueueSemaphoreTake+0x64>
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d101      	bne.n	8014c7c <xQueueSemaphoreTake+0x68>
 8014c78:	2301      	movs	r3, #1
 8014c7a:	e000      	b.n	8014c7e <xQueueSemaphoreTake+0x6a>
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d10b      	bne.n	8014c9a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8014c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c86:	f383 8811 	msr	BASEPRI, r3
 8014c8a:	f3bf 8f6f 	isb	sy
 8014c8e:	f3bf 8f4f 	dsb	sy
 8014c92:	61bb      	str	r3, [r7, #24]
}
 8014c94:	bf00      	nop
 8014c96:	bf00      	nop
 8014c98:	e7fd      	b.n	8014c96 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014c9a:	f001 fba5 	bl	80163e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d024      	beq.n	8014cf4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cac:	1e5a      	subs	r2, r3, #1
 8014cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cb0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d104      	bne.n	8014cc4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014cba:	f001 f9e9 	bl	8016090 <pvTaskIncrementMutexHeldCount>
 8014cbe:	4602      	mov	r2, r0
 8014cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cc2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cc6:	691b      	ldr	r3, [r3, #16]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d00f      	beq.n	8014cec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cce:	3310      	adds	r3, #16
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f000 fe71 	bl	80159b8 <xTaskRemoveFromEventList>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d007      	beq.n	8014cec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014cdc:	4b54      	ldr	r3, [pc, #336]	@ (8014e30 <xQueueSemaphoreTake+0x21c>)
 8014cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ce2:	601a      	str	r2, [r3, #0]
 8014ce4:	f3bf 8f4f 	dsb	sy
 8014ce8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014cec:	f001 fbae 	bl	801644c <vPortExitCritical>
				return pdPASS;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	e098      	b.n	8014e26 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014cf4:	683b      	ldr	r3, [r7, #0]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d112      	bne.n	8014d20 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d00b      	beq.n	8014d18 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8014d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d04:	f383 8811 	msr	BASEPRI, r3
 8014d08:	f3bf 8f6f 	isb	sy
 8014d0c:	f3bf 8f4f 	dsb	sy
 8014d10:	617b      	str	r3, [r7, #20]
}
 8014d12:	bf00      	nop
 8014d14:	bf00      	nop
 8014d16:	e7fd      	b.n	8014d14 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014d18:	f001 fb98 	bl	801644c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	e082      	b.n	8014e26 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d106      	bne.n	8014d34 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014d26:	f107 030c 	add.w	r3, r7, #12
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f000 fea8 	bl	8015a80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014d30:	2301      	movs	r3, #1
 8014d32:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014d34:	f001 fb8a 	bl	801644c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014d38:	f000 fc56 	bl	80155e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014d3c:	f001 fb54 	bl	80163e8 <vPortEnterCritical>
 8014d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014d46:	b25b      	sxtb	r3, r3
 8014d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d4c:	d103      	bne.n	8014d56 <xQueueSemaphoreTake+0x142>
 8014d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d50:	2200      	movs	r2, #0
 8014d52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014d5c:	b25b      	sxtb	r3, r3
 8014d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d62:	d103      	bne.n	8014d6c <xQueueSemaphoreTake+0x158>
 8014d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d66:	2200      	movs	r2, #0
 8014d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014d6c:	f001 fb6e 	bl	801644c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014d70:	463a      	mov	r2, r7
 8014d72:	f107 030c 	add.w	r3, r7, #12
 8014d76:	4611      	mov	r1, r2
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f000 fe97 	bl	8015aac <xTaskCheckForTimeOut>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d132      	bne.n	8014dea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014d84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014d86:	f000 f9d1 	bl	801512c <prvIsQueueEmpty>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d026      	beq.n	8014dde <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d109      	bne.n	8014dac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014d98:	f001 fb26 	bl	80163e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d9e:	689b      	ldr	r3, [r3, #8]
 8014da0:	4618      	mov	r0, r3
 8014da2:	f000 ffe7 	bl	8015d74 <xTaskPriorityInherit>
 8014da6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8014da8:	f001 fb50 	bl	801644c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dae:	3324      	adds	r3, #36	@ 0x24
 8014db0:	683a      	ldr	r2, [r7, #0]
 8014db2:	4611      	mov	r1, r2
 8014db4:	4618      	mov	r0, r3
 8014db6:	f000 fdd9 	bl	801596c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014dba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014dbc:	f000 f964 	bl	8015088 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014dc0:	f000 fc20 	bl	8015604 <xTaskResumeAll>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	f47f af67 	bne.w	8014c9a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014dcc:	4b18      	ldr	r3, [pc, #96]	@ (8014e30 <xQueueSemaphoreTake+0x21c>)
 8014dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014dd2:	601a      	str	r2, [r3, #0]
 8014dd4:	f3bf 8f4f 	dsb	sy
 8014dd8:	f3bf 8f6f 	isb	sy
 8014ddc:	e75d      	b.n	8014c9a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014dde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014de0:	f000 f952 	bl	8015088 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014de4:	f000 fc0e 	bl	8015604 <xTaskResumeAll>
 8014de8:	e757      	b.n	8014c9a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014dea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014dec:	f000 f94c 	bl	8015088 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014df0:	f000 fc08 	bl	8015604 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014df4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014df6:	f000 f999 	bl	801512c <prvIsQueueEmpty>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	f43f af4c 	beq.w	8014c9a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d00d      	beq.n	8014e24 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014e08:	f001 faee 	bl	80163e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014e0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014e0e:	f000 f893 	bl	8014f38 <prvGetDisinheritPriorityAfterTimeout>
 8014e12:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e16:	689b      	ldr	r3, [r3, #8]
 8014e18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f001 f8a8 	bl	8015f70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014e20:	f001 fb14 	bl	801644c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014e24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3738      	adds	r7, #56	@ 0x38
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}
 8014e2e:	bf00      	nop
 8014e30:	e000ed04 	.word	0xe000ed04

08014e34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b08e      	sub	sp, #56	@ 0x38
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	60f8      	str	r0, [r7, #12]
 8014e3c:	60b9      	str	r1, [r7, #8]
 8014e3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d10b      	bne.n	8014e62 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8014e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e4e:	f383 8811 	msr	BASEPRI, r3
 8014e52:	f3bf 8f6f 	isb	sy
 8014e56:	f3bf 8f4f 	dsb	sy
 8014e5a:	623b      	str	r3, [r7, #32]
}
 8014e5c:	bf00      	nop
 8014e5e:	bf00      	nop
 8014e60:	e7fd      	b.n	8014e5e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d103      	bne.n	8014e70 <xQueueReceiveFromISR+0x3c>
 8014e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d101      	bne.n	8014e74 <xQueueReceiveFromISR+0x40>
 8014e70:	2301      	movs	r3, #1
 8014e72:	e000      	b.n	8014e76 <xQueueReceiveFromISR+0x42>
 8014e74:	2300      	movs	r3, #0
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d10b      	bne.n	8014e92 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8014e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e7e:	f383 8811 	msr	BASEPRI, r3
 8014e82:	f3bf 8f6f 	isb	sy
 8014e86:	f3bf 8f4f 	dsb	sy
 8014e8a:	61fb      	str	r3, [r7, #28]
}
 8014e8c:	bf00      	nop
 8014e8e:	bf00      	nop
 8014e90:	e7fd      	b.n	8014e8e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014e92:	f001 fb89 	bl	80165a8 <vPortValidateInterruptPriority>
	__asm volatile
 8014e96:	f3ef 8211 	mrs	r2, BASEPRI
 8014e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e9e:	f383 8811 	msr	BASEPRI, r3
 8014ea2:	f3bf 8f6f 	isb	sy
 8014ea6:	f3bf 8f4f 	dsb	sy
 8014eaa:	61ba      	str	r2, [r7, #24]
 8014eac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014eae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014eb6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d02f      	beq.n	8014f1e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014ec8:	68b9      	ldr	r1, [r7, #8]
 8014eca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014ecc:	f000 f8b6 	bl	801503c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ed2:	1e5a      	subs	r2, r3, #1
 8014ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ed6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ee0:	d112      	bne.n	8014f08 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ee4:	691b      	ldr	r3, [r3, #16]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d016      	beq.n	8014f18 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014eec:	3310      	adds	r3, #16
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f000 fd62 	bl	80159b8 <xTaskRemoveFromEventList>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d00e      	beq.n	8014f18 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d00b      	beq.n	8014f18 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2201      	movs	r2, #1
 8014f04:	601a      	str	r2, [r3, #0]
 8014f06:	e007      	b.n	8014f18 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	b2db      	uxtb	r3, r3
 8014f10:	b25a      	sxtb	r2, r3
 8014f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8014f18:	2301      	movs	r3, #1
 8014f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8014f1c:	e001      	b.n	8014f22 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8014f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014f26:	693b      	ldr	r3, [r7, #16]
 8014f28:	f383 8811 	msr	BASEPRI, r3
}
 8014f2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3738      	adds	r7, #56	@ 0x38
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}

08014f38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014f38:	b480      	push	{r7}
 8014f3a:	b085      	sub	sp, #20
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d006      	beq.n	8014f56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	f1c3 0307 	rsb	r3, r3, #7
 8014f52:	60fb      	str	r3, [r7, #12]
 8014f54:	e001      	b.n	8014f5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014f56:	2300      	movs	r3, #0
 8014f58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
	}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3714      	adds	r7, #20
 8014f60:	46bd      	mov	sp, r7
 8014f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f66:	4770      	bx	lr

08014f68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b086      	sub	sp, #24
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	60b9      	str	r1, [r7, #8]
 8014f72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014f74:	2300      	movs	r3, #0
 8014f76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d10d      	bne.n	8014fa2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d14d      	bne.n	801502a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	689b      	ldr	r3, [r3, #8]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f000 ff64 	bl	8015e60 <xTaskPriorityDisinherit>
 8014f98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	609a      	str	r2, [r3, #8]
 8014fa0:	e043      	b.n	801502a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d119      	bne.n	8014fdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	6858      	ldr	r0, [r3, #4]
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fb0:	461a      	mov	r2, r3
 8014fb2:	68b9      	ldr	r1, [r7, #8]
 8014fb4:	f002 fd11 	bl	80179da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	685a      	ldr	r2, [r3, #4]
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fc0:	441a      	add	r2, r3
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	685a      	ldr	r2, [r3, #4]
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	689b      	ldr	r3, [r3, #8]
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	d32b      	bcc.n	801502a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	681a      	ldr	r2, [r3, #0]
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	605a      	str	r2, [r3, #4]
 8014fda:	e026      	b.n	801502a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	68d8      	ldr	r0, [r3, #12]
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fe4:	461a      	mov	r2, r3
 8014fe6:	68b9      	ldr	r1, [r7, #8]
 8014fe8:	f002 fcf7 	bl	80179da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	68da      	ldr	r2, [r3, #12]
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014ff4:	425b      	negs	r3, r3
 8014ff6:	441a      	add	r2, r3
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	68da      	ldr	r2, [r3, #12]
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	429a      	cmp	r2, r3
 8015006:	d207      	bcs.n	8015018 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	689a      	ldr	r2, [r3, #8]
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015010:	425b      	negs	r3, r3
 8015012:	441a      	add	r2, r3
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2b02      	cmp	r3, #2
 801501c:	d105      	bne.n	801502a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d002      	beq.n	801502a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015024:	693b      	ldr	r3, [r7, #16]
 8015026:	3b01      	subs	r3, #1
 8015028:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	1c5a      	adds	r2, r3, #1
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015032:	697b      	ldr	r3, [r7, #20]
}
 8015034:	4618      	mov	r0, r3
 8015036:	3718      	adds	r7, #24
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}

0801503c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b082      	sub	sp, #8
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
 8015044:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801504a:	2b00      	cmp	r3, #0
 801504c:	d018      	beq.n	8015080 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	68da      	ldr	r2, [r3, #12]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015056:	441a      	add	r2, r3
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	68da      	ldr	r2, [r3, #12]
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	689b      	ldr	r3, [r3, #8]
 8015064:	429a      	cmp	r2, r3
 8015066:	d303      	bcc.n	8015070 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681a      	ldr	r2, [r3, #0]
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	68d9      	ldr	r1, [r3, #12]
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015078:	461a      	mov	r2, r3
 801507a:	6838      	ldr	r0, [r7, #0]
 801507c:	f002 fcad 	bl	80179da <memcpy>
	}
}
 8015080:	bf00      	nop
 8015082:	3708      	adds	r7, #8
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}

08015088 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b084      	sub	sp, #16
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015090:	f001 f9aa 	bl	80163e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801509a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801509c:	e011      	b.n	80150c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d012      	beq.n	80150cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	3324      	adds	r3, #36	@ 0x24
 80150aa:	4618      	mov	r0, r3
 80150ac:	f000 fc84 	bl	80159b8 <xTaskRemoveFromEventList>
 80150b0:	4603      	mov	r3, r0
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d001      	beq.n	80150ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80150b6:	f000 fd5d 	bl	8015b74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80150ba:	7bfb      	ldrb	r3, [r7, #15]
 80150bc:	3b01      	subs	r3, #1
 80150be:	b2db      	uxtb	r3, r3
 80150c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80150c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	dce9      	bgt.n	801509e <prvUnlockQueue+0x16>
 80150ca:	e000      	b.n	80150ce <prvUnlockQueue+0x46>
					break;
 80150cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	22ff      	movs	r2, #255	@ 0xff
 80150d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80150d6:	f001 f9b9 	bl	801644c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80150da:	f001 f985 	bl	80163e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80150e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80150e6:	e011      	b.n	801510c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	691b      	ldr	r3, [r3, #16]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d012      	beq.n	8015116 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	3310      	adds	r3, #16
 80150f4:	4618      	mov	r0, r3
 80150f6:	f000 fc5f 	bl	80159b8 <xTaskRemoveFromEventList>
 80150fa:	4603      	mov	r3, r0
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d001      	beq.n	8015104 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015100:	f000 fd38 	bl	8015b74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015104:	7bbb      	ldrb	r3, [r7, #14]
 8015106:	3b01      	subs	r3, #1
 8015108:	b2db      	uxtb	r3, r3
 801510a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801510c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015110:	2b00      	cmp	r3, #0
 8015112:	dce9      	bgt.n	80150e8 <prvUnlockQueue+0x60>
 8015114:	e000      	b.n	8015118 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015116:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	22ff      	movs	r2, #255	@ 0xff
 801511c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015120:	f001 f994 	bl	801644c <vPortExitCritical>
}
 8015124:	bf00      	nop
 8015126:	3710      	adds	r7, #16
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}

0801512c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b084      	sub	sp, #16
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015134:	f001 f958 	bl	80163e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801513c:	2b00      	cmp	r3, #0
 801513e:	d102      	bne.n	8015146 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015140:	2301      	movs	r3, #1
 8015142:	60fb      	str	r3, [r7, #12]
 8015144:	e001      	b.n	801514a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015146:	2300      	movs	r3, #0
 8015148:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801514a:	f001 f97f 	bl	801644c <vPortExitCritical>

	return xReturn;
 801514e:	68fb      	ldr	r3, [r7, #12]
}
 8015150:	4618      	mov	r0, r3
 8015152:	3710      	adds	r7, #16
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}

08015158 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b084      	sub	sp, #16
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015160:	f001 f942 	bl	80163e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801516c:	429a      	cmp	r2, r3
 801516e:	d102      	bne.n	8015176 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015170:	2301      	movs	r3, #1
 8015172:	60fb      	str	r3, [r7, #12]
 8015174:	e001      	b.n	801517a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015176:	2300      	movs	r3, #0
 8015178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801517a:	f001 f967 	bl	801644c <vPortExitCritical>

	return xReturn;
 801517e:	68fb      	ldr	r3, [r7, #12]
}
 8015180:	4618      	mov	r0, r3
 8015182:	3710      	adds	r7, #16
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}

08015188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015188:	b580      	push	{r7, lr}
 801518a:	b08e      	sub	sp, #56	@ 0x38
 801518c:	af04      	add	r7, sp, #16
 801518e:	60f8      	str	r0, [r7, #12]
 8015190:	60b9      	str	r1, [r7, #8]
 8015192:	607a      	str	r2, [r7, #4]
 8015194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015198:	2b00      	cmp	r3, #0
 801519a:	d10b      	bne.n	80151b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 801519c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151a0:	f383 8811 	msr	BASEPRI, r3
 80151a4:	f3bf 8f6f 	isb	sy
 80151a8:	f3bf 8f4f 	dsb	sy
 80151ac:	623b      	str	r3, [r7, #32]
}
 80151ae:	bf00      	nop
 80151b0:	bf00      	nop
 80151b2:	e7fd      	b.n	80151b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80151b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d10b      	bne.n	80151d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80151ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151be:	f383 8811 	msr	BASEPRI, r3
 80151c2:	f3bf 8f6f 	isb	sy
 80151c6:	f3bf 8f4f 	dsb	sy
 80151ca:	61fb      	str	r3, [r7, #28]
}
 80151cc:	bf00      	nop
 80151ce:	bf00      	nop
 80151d0:	e7fd      	b.n	80151ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80151d2:	2354      	movs	r3, #84	@ 0x54
 80151d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	2b54      	cmp	r3, #84	@ 0x54
 80151da:	d00b      	beq.n	80151f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80151dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151e0:	f383 8811 	msr	BASEPRI, r3
 80151e4:	f3bf 8f6f 	isb	sy
 80151e8:	f3bf 8f4f 	dsb	sy
 80151ec:	61bb      	str	r3, [r7, #24]
}
 80151ee:	bf00      	nop
 80151f0:	bf00      	nop
 80151f2:	e7fd      	b.n	80151f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80151f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80151f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d01e      	beq.n	801523a <xTaskCreateStatic+0xb2>
 80151fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d01b      	beq.n	801523a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015204:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801520a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801520e:	2202      	movs	r2, #2
 8015210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015214:	2300      	movs	r3, #0
 8015216:	9303      	str	r3, [sp, #12]
 8015218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801521a:	9302      	str	r3, [sp, #8]
 801521c:	f107 0314 	add.w	r3, r7, #20
 8015220:	9301      	str	r3, [sp, #4]
 8015222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015224:	9300      	str	r3, [sp, #0]
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	687a      	ldr	r2, [r7, #4]
 801522a:	68b9      	ldr	r1, [r7, #8]
 801522c:	68f8      	ldr	r0, [r7, #12]
 801522e:	f000 f850 	bl	80152d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015234:	f000 f8d6 	bl	80153e4 <prvAddNewTaskToReadyList>
 8015238:	e001      	b.n	801523e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801523a:	2300      	movs	r3, #0
 801523c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801523e:	697b      	ldr	r3, [r7, #20]
	}
 8015240:	4618      	mov	r0, r3
 8015242:	3728      	adds	r7, #40	@ 0x28
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}

08015248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015248:	b580      	push	{r7, lr}
 801524a:	b08c      	sub	sp, #48	@ 0x30
 801524c:	af04      	add	r7, sp, #16
 801524e:	60f8      	str	r0, [r7, #12]
 8015250:	60b9      	str	r1, [r7, #8]
 8015252:	603b      	str	r3, [r7, #0]
 8015254:	4613      	mov	r3, r2
 8015256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015258:	88fb      	ldrh	r3, [r7, #6]
 801525a:	009b      	lsls	r3, r3, #2
 801525c:	4618      	mov	r0, r3
 801525e:	f001 f9e5 	bl	801662c <pvPortMalloc>
 8015262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015264:	697b      	ldr	r3, [r7, #20]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d00e      	beq.n	8015288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801526a:	2054      	movs	r0, #84	@ 0x54
 801526c:	f001 f9de 	bl	801662c <pvPortMalloc>
 8015270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015272:	69fb      	ldr	r3, [r7, #28]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d003      	beq.n	8015280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015278:	69fb      	ldr	r3, [r7, #28]
 801527a:	697a      	ldr	r2, [r7, #20]
 801527c:	631a      	str	r2, [r3, #48]	@ 0x30
 801527e:	e005      	b.n	801528c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015280:	6978      	ldr	r0, [r7, #20]
 8015282:	f001 faa1 	bl	80167c8 <vPortFree>
 8015286:	e001      	b.n	801528c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015288:	2300      	movs	r3, #0
 801528a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801528c:	69fb      	ldr	r3, [r7, #28]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d017      	beq.n	80152c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015292:	69fb      	ldr	r3, [r7, #28]
 8015294:	2200      	movs	r2, #0
 8015296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801529a:	88fa      	ldrh	r2, [r7, #6]
 801529c:	2300      	movs	r3, #0
 801529e:	9303      	str	r3, [sp, #12]
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	9302      	str	r3, [sp, #8]
 80152a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152a6:	9301      	str	r3, [sp, #4]
 80152a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152aa:	9300      	str	r3, [sp, #0]
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	68b9      	ldr	r1, [r7, #8]
 80152b0:	68f8      	ldr	r0, [r7, #12]
 80152b2:	f000 f80e 	bl	80152d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80152b6:	69f8      	ldr	r0, [r7, #28]
 80152b8:	f000 f894 	bl	80153e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80152bc:	2301      	movs	r3, #1
 80152be:	61bb      	str	r3, [r7, #24]
 80152c0:	e002      	b.n	80152c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80152c2:	f04f 33ff 	mov.w	r3, #4294967295
 80152c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80152c8:	69bb      	ldr	r3, [r7, #24]
	}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3720      	adds	r7, #32
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}

080152d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80152d2:	b580      	push	{r7, lr}
 80152d4:	b088      	sub	sp, #32
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	60f8      	str	r0, [r7, #12]
 80152da:	60b9      	str	r1, [r7, #8]
 80152dc:	607a      	str	r2, [r7, #4]
 80152de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80152e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80152e4:	6879      	ldr	r1, [r7, #4]
 80152e6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80152ea:	440b      	add	r3, r1
 80152ec:	009b      	lsls	r3, r3, #2
 80152ee:	4413      	add	r3, r2
 80152f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80152f2:	69bb      	ldr	r3, [r7, #24]
 80152f4:	f023 0307 	bic.w	r3, r3, #7
 80152f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80152fa:	69bb      	ldr	r3, [r7, #24]
 80152fc:	f003 0307 	and.w	r3, r3, #7
 8015300:	2b00      	cmp	r3, #0
 8015302:	d00b      	beq.n	801531c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8015304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015308:	f383 8811 	msr	BASEPRI, r3
 801530c:	f3bf 8f6f 	isb	sy
 8015310:	f3bf 8f4f 	dsb	sy
 8015314:	617b      	str	r3, [r7, #20]
}
 8015316:	bf00      	nop
 8015318:	bf00      	nop
 801531a:	e7fd      	b.n	8015318 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801531c:	68bb      	ldr	r3, [r7, #8]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d01f      	beq.n	8015362 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015322:	2300      	movs	r3, #0
 8015324:	61fb      	str	r3, [r7, #28]
 8015326:	e012      	b.n	801534e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015328:	68ba      	ldr	r2, [r7, #8]
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	4413      	add	r3, r2
 801532e:	7819      	ldrb	r1, [r3, #0]
 8015330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	4413      	add	r3, r2
 8015336:	3334      	adds	r3, #52	@ 0x34
 8015338:	460a      	mov	r2, r1
 801533a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801533c:	68ba      	ldr	r2, [r7, #8]
 801533e:	69fb      	ldr	r3, [r7, #28]
 8015340:	4413      	add	r3, r2
 8015342:	781b      	ldrb	r3, [r3, #0]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d006      	beq.n	8015356 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015348:	69fb      	ldr	r3, [r7, #28]
 801534a:	3301      	adds	r3, #1
 801534c:	61fb      	str	r3, [r7, #28]
 801534e:	69fb      	ldr	r3, [r7, #28]
 8015350:	2b0f      	cmp	r3, #15
 8015352:	d9e9      	bls.n	8015328 <prvInitialiseNewTask+0x56>
 8015354:	e000      	b.n	8015358 <prvInitialiseNewTask+0x86>
			{
				break;
 8015356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801535a:	2200      	movs	r2, #0
 801535c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015360:	e003      	b.n	801536a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015364:	2200      	movs	r2, #0
 8015366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801536a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801536c:	2b06      	cmp	r3, #6
 801536e:	d901      	bls.n	8015374 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015370:	2306      	movs	r3, #6
 8015372:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015378:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801537a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801537c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801537e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015382:	2200      	movs	r2, #0
 8015384:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015388:	3304      	adds	r3, #4
 801538a:	4618      	mov	r0, r3
 801538c:	f7ff fa1c 	bl	80147c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015392:	3318      	adds	r3, #24
 8015394:	4618      	mov	r0, r3
 8015396:	f7ff fa17 	bl	80147c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801539a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801539c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801539e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80153a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153a2:	f1c3 0207 	rsb	r2, r3, #7
 80153a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80153aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80153ae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80153b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b2:	2200      	movs	r2, #0
 80153b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80153b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b8:	2200      	movs	r2, #0
 80153ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80153be:	683a      	ldr	r2, [r7, #0]
 80153c0:	68f9      	ldr	r1, [r7, #12]
 80153c2:	69b8      	ldr	r0, [r7, #24]
 80153c4:	f000 fede 	bl	8016184 <pxPortInitialiseStack>
 80153c8:	4602      	mov	r2, r0
 80153ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80153ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d002      	beq.n	80153da <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80153d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80153d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80153da:	bf00      	nop
 80153dc:	3720      	adds	r7, #32
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}
	...

080153e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80153ec:	f000 fffc 	bl	80163e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80153f0:	4b2a      	ldr	r3, [pc, #168]	@ (801549c <prvAddNewTaskToReadyList+0xb8>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	3301      	adds	r3, #1
 80153f6:	4a29      	ldr	r2, [pc, #164]	@ (801549c <prvAddNewTaskToReadyList+0xb8>)
 80153f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80153fa:	4b29      	ldr	r3, [pc, #164]	@ (80154a0 <prvAddNewTaskToReadyList+0xbc>)
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d109      	bne.n	8015416 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015402:	4a27      	ldr	r2, [pc, #156]	@ (80154a0 <prvAddNewTaskToReadyList+0xbc>)
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015408:	4b24      	ldr	r3, [pc, #144]	@ (801549c <prvAddNewTaskToReadyList+0xb8>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	2b01      	cmp	r3, #1
 801540e:	d110      	bne.n	8015432 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015410:	f000 fbd4 	bl	8015bbc <prvInitialiseTaskLists>
 8015414:	e00d      	b.n	8015432 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015416:	4b23      	ldr	r3, [pc, #140]	@ (80154a4 <prvAddNewTaskToReadyList+0xc0>)
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d109      	bne.n	8015432 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801541e:	4b20      	ldr	r3, [pc, #128]	@ (80154a0 <prvAddNewTaskToReadyList+0xbc>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015428:	429a      	cmp	r2, r3
 801542a:	d802      	bhi.n	8015432 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801542c:	4a1c      	ldr	r2, [pc, #112]	@ (80154a0 <prvAddNewTaskToReadyList+0xbc>)
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015432:	4b1d      	ldr	r3, [pc, #116]	@ (80154a8 <prvAddNewTaskToReadyList+0xc4>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	3301      	adds	r3, #1
 8015438:	4a1b      	ldr	r2, [pc, #108]	@ (80154a8 <prvAddNewTaskToReadyList+0xc4>)
 801543a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015440:	2201      	movs	r2, #1
 8015442:	409a      	lsls	r2, r3
 8015444:	4b19      	ldr	r3, [pc, #100]	@ (80154ac <prvAddNewTaskToReadyList+0xc8>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	4313      	orrs	r3, r2
 801544a:	4a18      	ldr	r2, [pc, #96]	@ (80154ac <prvAddNewTaskToReadyList+0xc8>)
 801544c:	6013      	str	r3, [r2, #0]
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015452:	4613      	mov	r3, r2
 8015454:	009b      	lsls	r3, r3, #2
 8015456:	4413      	add	r3, r2
 8015458:	009b      	lsls	r3, r3, #2
 801545a:	4a15      	ldr	r2, [pc, #84]	@ (80154b0 <prvAddNewTaskToReadyList+0xcc>)
 801545c:	441a      	add	r2, r3
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	3304      	adds	r3, #4
 8015462:	4619      	mov	r1, r3
 8015464:	4610      	mov	r0, r2
 8015466:	f7ff f9bc 	bl	80147e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801546a:	f000 ffef 	bl	801644c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801546e:	4b0d      	ldr	r3, [pc, #52]	@ (80154a4 <prvAddNewTaskToReadyList+0xc0>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d00e      	beq.n	8015494 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015476:	4b0a      	ldr	r3, [pc, #40]	@ (80154a0 <prvAddNewTaskToReadyList+0xbc>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015480:	429a      	cmp	r2, r3
 8015482:	d207      	bcs.n	8015494 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015484:	4b0b      	ldr	r3, [pc, #44]	@ (80154b4 <prvAddNewTaskToReadyList+0xd0>)
 8015486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801548a:	601a      	str	r2, [r3, #0]
 801548c:	f3bf 8f4f 	dsb	sy
 8015490:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015494:	bf00      	nop
 8015496:	3708      	adds	r7, #8
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}
 801549c:	24002a94 	.word	0x24002a94
 80154a0:	24002994 	.word	0x24002994
 80154a4:	24002aa0 	.word	0x24002aa0
 80154a8:	24002ab0 	.word	0x24002ab0
 80154ac:	24002a9c 	.word	0x24002a9c
 80154b0:	24002998 	.word	0x24002998
 80154b4:	e000ed04 	.word	0xe000ed04

080154b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b084      	sub	sp, #16
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80154c0:	2300      	movs	r3, #0
 80154c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d018      	beq.n	80154fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80154ca:	4b14      	ldr	r3, [pc, #80]	@ (801551c <vTaskDelay+0x64>)
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d00b      	beq.n	80154ea <vTaskDelay+0x32>
	__asm volatile
 80154d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154d6:	f383 8811 	msr	BASEPRI, r3
 80154da:	f3bf 8f6f 	isb	sy
 80154de:	f3bf 8f4f 	dsb	sy
 80154e2:	60bb      	str	r3, [r7, #8]
}
 80154e4:	bf00      	nop
 80154e6:	bf00      	nop
 80154e8:	e7fd      	b.n	80154e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80154ea:	f000 f87d 	bl	80155e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80154ee:	2100      	movs	r1, #0
 80154f0:	6878      	ldr	r0, [r7, #4]
 80154f2:	f000 fde1 	bl	80160b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80154f6:	f000 f885 	bl	8015604 <xTaskResumeAll>
 80154fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d107      	bne.n	8015512 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8015502:	4b07      	ldr	r3, [pc, #28]	@ (8015520 <vTaskDelay+0x68>)
 8015504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015508:	601a      	str	r2, [r3, #0]
 801550a:	f3bf 8f4f 	dsb	sy
 801550e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015512:	bf00      	nop
 8015514:	3710      	adds	r7, #16
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}
 801551a:	bf00      	nop
 801551c:	24002abc 	.word	0x24002abc
 8015520:	e000ed04 	.word	0xe000ed04

08015524 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b08a      	sub	sp, #40	@ 0x28
 8015528:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801552a:	2300      	movs	r3, #0
 801552c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801552e:	2300      	movs	r3, #0
 8015530:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015532:	463a      	mov	r2, r7
 8015534:	1d39      	adds	r1, r7, #4
 8015536:	f107 0308 	add.w	r3, r7, #8
 801553a:	4618      	mov	r0, r3
 801553c:	f7ec fc98 	bl	8001e70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015540:	6839      	ldr	r1, [r7, #0]
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	68ba      	ldr	r2, [r7, #8]
 8015546:	9202      	str	r2, [sp, #8]
 8015548:	9301      	str	r3, [sp, #4]
 801554a:	2300      	movs	r3, #0
 801554c:	9300      	str	r3, [sp, #0]
 801554e:	2300      	movs	r3, #0
 8015550:	460a      	mov	r2, r1
 8015552:	491f      	ldr	r1, [pc, #124]	@ (80155d0 <vTaskStartScheduler+0xac>)
 8015554:	481f      	ldr	r0, [pc, #124]	@ (80155d4 <vTaskStartScheduler+0xb0>)
 8015556:	f7ff fe17 	bl	8015188 <xTaskCreateStatic>
 801555a:	4603      	mov	r3, r0
 801555c:	4a1e      	ldr	r2, [pc, #120]	@ (80155d8 <vTaskStartScheduler+0xb4>)
 801555e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015560:	4b1d      	ldr	r3, [pc, #116]	@ (80155d8 <vTaskStartScheduler+0xb4>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d002      	beq.n	801556e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015568:	2301      	movs	r3, #1
 801556a:	617b      	str	r3, [r7, #20]
 801556c:	e001      	b.n	8015572 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801556e:	2300      	movs	r3, #0
 8015570:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	2b01      	cmp	r3, #1
 8015576:	d116      	bne.n	80155a6 <vTaskStartScheduler+0x82>
	__asm volatile
 8015578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801557c:	f383 8811 	msr	BASEPRI, r3
 8015580:	f3bf 8f6f 	isb	sy
 8015584:	f3bf 8f4f 	dsb	sy
 8015588:	613b      	str	r3, [r7, #16]
}
 801558a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801558c:	4b13      	ldr	r3, [pc, #76]	@ (80155dc <vTaskStartScheduler+0xb8>)
 801558e:	f04f 32ff 	mov.w	r2, #4294967295
 8015592:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015594:	4b12      	ldr	r3, [pc, #72]	@ (80155e0 <vTaskStartScheduler+0xbc>)
 8015596:	2201      	movs	r2, #1
 8015598:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801559a:	4b12      	ldr	r3, [pc, #72]	@ (80155e4 <vTaskStartScheduler+0xc0>)
 801559c:	2200      	movs	r2, #0
 801559e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80155a0:	f000 fe7e 	bl	80162a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80155a4:	e00f      	b.n	80155c6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155ac:	d10b      	bne.n	80155c6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80155ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155b2:	f383 8811 	msr	BASEPRI, r3
 80155b6:	f3bf 8f6f 	isb	sy
 80155ba:	f3bf 8f4f 	dsb	sy
 80155be:	60fb      	str	r3, [r7, #12]
}
 80155c0:	bf00      	nop
 80155c2:	bf00      	nop
 80155c4:	e7fd      	b.n	80155c2 <vTaskStartScheduler+0x9e>
}
 80155c6:	bf00      	nop
 80155c8:	3718      	adds	r7, #24
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}
 80155ce:	bf00      	nop
 80155d0:	080199ec 	.word	0x080199ec
 80155d4:	08015b8d 	.word	0x08015b8d
 80155d8:	24002ab8 	.word	0x24002ab8
 80155dc:	24002ab4 	.word	0x24002ab4
 80155e0:	24002aa0 	.word	0x24002aa0
 80155e4:	24002a98 	.word	0x24002a98

080155e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80155e8:	b480      	push	{r7}
 80155ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80155ec:	4b04      	ldr	r3, [pc, #16]	@ (8015600 <vTaskSuspendAll+0x18>)
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	3301      	adds	r3, #1
 80155f2:	4a03      	ldr	r2, [pc, #12]	@ (8015600 <vTaskSuspendAll+0x18>)
 80155f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80155f6:	bf00      	nop
 80155f8:	46bd      	mov	sp, r7
 80155fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fe:	4770      	bx	lr
 8015600:	24002abc 	.word	0x24002abc

08015604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b084      	sub	sp, #16
 8015608:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801560a:	2300      	movs	r3, #0
 801560c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801560e:	2300      	movs	r3, #0
 8015610:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015612:	4b42      	ldr	r3, [pc, #264]	@ (801571c <xTaskResumeAll+0x118>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d10b      	bne.n	8015632 <xTaskResumeAll+0x2e>
	__asm volatile
 801561a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801561e:	f383 8811 	msr	BASEPRI, r3
 8015622:	f3bf 8f6f 	isb	sy
 8015626:	f3bf 8f4f 	dsb	sy
 801562a:	603b      	str	r3, [r7, #0]
}
 801562c:	bf00      	nop
 801562e:	bf00      	nop
 8015630:	e7fd      	b.n	801562e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015632:	f000 fed9 	bl	80163e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015636:	4b39      	ldr	r3, [pc, #228]	@ (801571c <xTaskResumeAll+0x118>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	3b01      	subs	r3, #1
 801563c:	4a37      	ldr	r2, [pc, #220]	@ (801571c <xTaskResumeAll+0x118>)
 801563e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015640:	4b36      	ldr	r3, [pc, #216]	@ (801571c <xTaskResumeAll+0x118>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d161      	bne.n	801570c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015648:	4b35      	ldr	r3, [pc, #212]	@ (8015720 <xTaskResumeAll+0x11c>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d05d      	beq.n	801570c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015650:	e02e      	b.n	80156b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015652:	4b34      	ldr	r3, [pc, #208]	@ (8015724 <xTaskResumeAll+0x120>)
 8015654:	68db      	ldr	r3, [r3, #12]
 8015656:	68db      	ldr	r3, [r3, #12]
 8015658:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	3318      	adds	r3, #24
 801565e:	4618      	mov	r0, r3
 8015660:	f7ff f91c 	bl	801489c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	3304      	adds	r3, #4
 8015668:	4618      	mov	r0, r3
 801566a:	f7ff f917 	bl	801489c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015672:	2201      	movs	r2, #1
 8015674:	409a      	lsls	r2, r3
 8015676:	4b2c      	ldr	r3, [pc, #176]	@ (8015728 <xTaskResumeAll+0x124>)
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	4313      	orrs	r3, r2
 801567c:	4a2a      	ldr	r2, [pc, #168]	@ (8015728 <xTaskResumeAll+0x124>)
 801567e:	6013      	str	r3, [r2, #0]
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015684:	4613      	mov	r3, r2
 8015686:	009b      	lsls	r3, r3, #2
 8015688:	4413      	add	r3, r2
 801568a:	009b      	lsls	r3, r3, #2
 801568c:	4a27      	ldr	r2, [pc, #156]	@ (801572c <xTaskResumeAll+0x128>)
 801568e:	441a      	add	r2, r3
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	3304      	adds	r3, #4
 8015694:	4619      	mov	r1, r3
 8015696:	4610      	mov	r0, r2
 8015698:	f7ff f8a3 	bl	80147e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80156a0:	4b23      	ldr	r3, [pc, #140]	@ (8015730 <xTaskResumeAll+0x12c>)
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d302      	bcc.n	80156b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80156aa:	4b22      	ldr	r3, [pc, #136]	@ (8015734 <xTaskResumeAll+0x130>)
 80156ac:	2201      	movs	r2, #1
 80156ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80156b0:	4b1c      	ldr	r3, [pc, #112]	@ (8015724 <xTaskResumeAll+0x120>)
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d1cc      	bne.n	8015652 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d001      	beq.n	80156c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80156be:	f000 fb1b 	bl	8015cf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80156c2:	4b1d      	ldr	r3, [pc, #116]	@ (8015738 <xTaskResumeAll+0x134>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d010      	beq.n	80156f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80156ce:	f000 f837 	bl	8015740 <xTaskIncrementTick>
 80156d2:	4603      	mov	r3, r0
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d002      	beq.n	80156de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80156d8:	4b16      	ldr	r3, [pc, #88]	@ (8015734 <xTaskResumeAll+0x130>)
 80156da:	2201      	movs	r2, #1
 80156dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	3b01      	subs	r3, #1
 80156e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d1f1      	bne.n	80156ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80156ea:	4b13      	ldr	r3, [pc, #76]	@ (8015738 <xTaskResumeAll+0x134>)
 80156ec:	2200      	movs	r2, #0
 80156ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80156f0:	4b10      	ldr	r3, [pc, #64]	@ (8015734 <xTaskResumeAll+0x130>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d009      	beq.n	801570c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80156f8:	2301      	movs	r3, #1
 80156fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80156fc:	4b0f      	ldr	r3, [pc, #60]	@ (801573c <xTaskResumeAll+0x138>)
 80156fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015702:	601a      	str	r2, [r3, #0]
 8015704:	f3bf 8f4f 	dsb	sy
 8015708:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801570c:	f000 fe9e 	bl	801644c <vPortExitCritical>

	return xAlreadyYielded;
 8015710:	68bb      	ldr	r3, [r7, #8]
}
 8015712:	4618      	mov	r0, r3
 8015714:	3710      	adds	r7, #16
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}
 801571a:	bf00      	nop
 801571c:	24002abc 	.word	0x24002abc
 8015720:	24002a94 	.word	0x24002a94
 8015724:	24002a54 	.word	0x24002a54
 8015728:	24002a9c 	.word	0x24002a9c
 801572c:	24002998 	.word	0x24002998
 8015730:	24002994 	.word	0x24002994
 8015734:	24002aa8 	.word	0x24002aa8
 8015738:	24002aa4 	.word	0x24002aa4
 801573c:	e000ed04 	.word	0xe000ed04

08015740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b086      	sub	sp, #24
 8015744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015746:	2300      	movs	r3, #0
 8015748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801574a:	4b4f      	ldr	r3, [pc, #316]	@ (8015888 <xTaskIncrementTick+0x148>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	f040 808f 	bne.w	8015872 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015754:	4b4d      	ldr	r3, [pc, #308]	@ (801588c <xTaskIncrementTick+0x14c>)
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	3301      	adds	r3, #1
 801575a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801575c:	4a4b      	ldr	r2, [pc, #300]	@ (801588c <xTaskIncrementTick+0x14c>)
 801575e:	693b      	ldr	r3, [r7, #16]
 8015760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d121      	bne.n	80157ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015768:	4b49      	ldr	r3, [pc, #292]	@ (8015890 <xTaskIncrementTick+0x150>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d00b      	beq.n	801578a <xTaskIncrementTick+0x4a>
	__asm volatile
 8015772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015776:	f383 8811 	msr	BASEPRI, r3
 801577a:	f3bf 8f6f 	isb	sy
 801577e:	f3bf 8f4f 	dsb	sy
 8015782:	603b      	str	r3, [r7, #0]
}
 8015784:	bf00      	nop
 8015786:	bf00      	nop
 8015788:	e7fd      	b.n	8015786 <xTaskIncrementTick+0x46>
 801578a:	4b41      	ldr	r3, [pc, #260]	@ (8015890 <xTaskIncrementTick+0x150>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	60fb      	str	r3, [r7, #12]
 8015790:	4b40      	ldr	r3, [pc, #256]	@ (8015894 <xTaskIncrementTick+0x154>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	4a3e      	ldr	r2, [pc, #248]	@ (8015890 <xTaskIncrementTick+0x150>)
 8015796:	6013      	str	r3, [r2, #0]
 8015798:	4a3e      	ldr	r2, [pc, #248]	@ (8015894 <xTaskIncrementTick+0x154>)
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	6013      	str	r3, [r2, #0]
 801579e:	4b3e      	ldr	r3, [pc, #248]	@ (8015898 <xTaskIncrementTick+0x158>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	3301      	adds	r3, #1
 80157a4:	4a3c      	ldr	r2, [pc, #240]	@ (8015898 <xTaskIncrementTick+0x158>)
 80157a6:	6013      	str	r3, [r2, #0]
 80157a8:	f000 faa6 	bl	8015cf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80157ac:	4b3b      	ldr	r3, [pc, #236]	@ (801589c <xTaskIncrementTick+0x15c>)
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	693a      	ldr	r2, [r7, #16]
 80157b2:	429a      	cmp	r2, r3
 80157b4:	d348      	bcc.n	8015848 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80157b6:	4b36      	ldr	r3, [pc, #216]	@ (8015890 <xTaskIncrementTick+0x150>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d104      	bne.n	80157ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157c0:	4b36      	ldr	r3, [pc, #216]	@ (801589c <xTaskIncrementTick+0x15c>)
 80157c2:	f04f 32ff 	mov.w	r2, #4294967295
 80157c6:	601a      	str	r2, [r3, #0]
					break;
 80157c8:	e03e      	b.n	8015848 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80157ca:	4b31      	ldr	r3, [pc, #196]	@ (8015890 <xTaskIncrementTick+0x150>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	68db      	ldr	r3, [r3, #12]
 80157d0:	68db      	ldr	r3, [r3, #12]
 80157d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80157d4:	68bb      	ldr	r3, [r7, #8]
 80157d6:	685b      	ldr	r3, [r3, #4]
 80157d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80157da:	693a      	ldr	r2, [r7, #16]
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	429a      	cmp	r2, r3
 80157e0:	d203      	bcs.n	80157ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80157e2:	4a2e      	ldr	r2, [pc, #184]	@ (801589c <xTaskIncrementTick+0x15c>)
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80157e8:	e02e      	b.n	8015848 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	3304      	adds	r3, #4
 80157ee:	4618      	mov	r0, r3
 80157f0:	f7ff f854 	bl	801489c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80157f4:	68bb      	ldr	r3, [r7, #8]
 80157f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d004      	beq.n	8015806 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	3318      	adds	r3, #24
 8015800:	4618      	mov	r0, r3
 8015802:	f7ff f84b 	bl	801489c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801580a:	2201      	movs	r2, #1
 801580c:	409a      	lsls	r2, r3
 801580e:	4b24      	ldr	r3, [pc, #144]	@ (80158a0 <xTaskIncrementTick+0x160>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	4313      	orrs	r3, r2
 8015814:	4a22      	ldr	r2, [pc, #136]	@ (80158a0 <xTaskIncrementTick+0x160>)
 8015816:	6013      	str	r3, [r2, #0]
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801581c:	4613      	mov	r3, r2
 801581e:	009b      	lsls	r3, r3, #2
 8015820:	4413      	add	r3, r2
 8015822:	009b      	lsls	r3, r3, #2
 8015824:	4a1f      	ldr	r2, [pc, #124]	@ (80158a4 <xTaskIncrementTick+0x164>)
 8015826:	441a      	add	r2, r3
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	3304      	adds	r3, #4
 801582c:	4619      	mov	r1, r3
 801582e:	4610      	mov	r0, r2
 8015830:	f7fe ffd7 	bl	80147e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015838:	4b1b      	ldr	r3, [pc, #108]	@ (80158a8 <xTaskIncrementTick+0x168>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801583e:	429a      	cmp	r2, r3
 8015840:	d3b9      	bcc.n	80157b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015842:	2301      	movs	r3, #1
 8015844:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015846:	e7b6      	b.n	80157b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015848:	4b17      	ldr	r3, [pc, #92]	@ (80158a8 <xTaskIncrementTick+0x168>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801584e:	4915      	ldr	r1, [pc, #84]	@ (80158a4 <xTaskIncrementTick+0x164>)
 8015850:	4613      	mov	r3, r2
 8015852:	009b      	lsls	r3, r3, #2
 8015854:	4413      	add	r3, r2
 8015856:	009b      	lsls	r3, r3, #2
 8015858:	440b      	add	r3, r1
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	2b01      	cmp	r3, #1
 801585e:	d901      	bls.n	8015864 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015860:	2301      	movs	r3, #1
 8015862:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015864:	4b11      	ldr	r3, [pc, #68]	@ (80158ac <xTaskIncrementTick+0x16c>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d007      	beq.n	801587c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801586c:	2301      	movs	r3, #1
 801586e:	617b      	str	r3, [r7, #20]
 8015870:	e004      	b.n	801587c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015872:	4b0f      	ldr	r3, [pc, #60]	@ (80158b0 <xTaskIncrementTick+0x170>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	3301      	adds	r3, #1
 8015878:	4a0d      	ldr	r2, [pc, #52]	@ (80158b0 <xTaskIncrementTick+0x170>)
 801587a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801587c:	697b      	ldr	r3, [r7, #20]
}
 801587e:	4618      	mov	r0, r3
 8015880:	3718      	adds	r7, #24
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}
 8015886:	bf00      	nop
 8015888:	24002abc 	.word	0x24002abc
 801588c:	24002a98 	.word	0x24002a98
 8015890:	24002a4c 	.word	0x24002a4c
 8015894:	24002a50 	.word	0x24002a50
 8015898:	24002aac 	.word	0x24002aac
 801589c:	24002ab4 	.word	0x24002ab4
 80158a0:	24002a9c 	.word	0x24002a9c
 80158a4:	24002998 	.word	0x24002998
 80158a8:	24002994 	.word	0x24002994
 80158ac:	24002aa8 	.word	0x24002aa8
 80158b0:	24002aa4 	.word	0x24002aa4

080158b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80158b4:	b480      	push	{r7}
 80158b6:	b087      	sub	sp, #28
 80158b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80158ba:	4b27      	ldr	r3, [pc, #156]	@ (8015958 <vTaskSwitchContext+0xa4>)
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d003      	beq.n	80158ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80158c2:	4b26      	ldr	r3, [pc, #152]	@ (801595c <vTaskSwitchContext+0xa8>)
 80158c4:	2201      	movs	r2, #1
 80158c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80158c8:	e040      	b.n	801594c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80158ca:	4b24      	ldr	r3, [pc, #144]	@ (801595c <vTaskSwitchContext+0xa8>)
 80158cc:	2200      	movs	r2, #0
 80158ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158d0:	4b23      	ldr	r3, [pc, #140]	@ (8015960 <vTaskSwitchContext+0xac>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	fab3 f383 	clz	r3, r3
 80158dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80158de:	7afb      	ldrb	r3, [r7, #11]
 80158e0:	f1c3 031f 	rsb	r3, r3, #31
 80158e4:	617b      	str	r3, [r7, #20]
 80158e6:	491f      	ldr	r1, [pc, #124]	@ (8015964 <vTaskSwitchContext+0xb0>)
 80158e8:	697a      	ldr	r2, [r7, #20]
 80158ea:	4613      	mov	r3, r2
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	4413      	add	r3, r2
 80158f0:	009b      	lsls	r3, r3, #2
 80158f2:	440b      	add	r3, r1
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d10b      	bne.n	8015912 <vTaskSwitchContext+0x5e>
	__asm volatile
 80158fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158fe:	f383 8811 	msr	BASEPRI, r3
 8015902:	f3bf 8f6f 	isb	sy
 8015906:	f3bf 8f4f 	dsb	sy
 801590a:	607b      	str	r3, [r7, #4]
}
 801590c:	bf00      	nop
 801590e:	bf00      	nop
 8015910:	e7fd      	b.n	801590e <vTaskSwitchContext+0x5a>
 8015912:	697a      	ldr	r2, [r7, #20]
 8015914:	4613      	mov	r3, r2
 8015916:	009b      	lsls	r3, r3, #2
 8015918:	4413      	add	r3, r2
 801591a:	009b      	lsls	r3, r3, #2
 801591c:	4a11      	ldr	r2, [pc, #68]	@ (8015964 <vTaskSwitchContext+0xb0>)
 801591e:	4413      	add	r3, r2
 8015920:	613b      	str	r3, [r7, #16]
 8015922:	693b      	ldr	r3, [r7, #16]
 8015924:	685b      	ldr	r3, [r3, #4]
 8015926:	685a      	ldr	r2, [r3, #4]
 8015928:	693b      	ldr	r3, [r7, #16]
 801592a:	605a      	str	r2, [r3, #4]
 801592c:	693b      	ldr	r3, [r7, #16]
 801592e:	685a      	ldr	r2, [r3, #4]
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	3308      	adds	r3, #8
 8015934:	429a      	cmp	r2, r3
 8015936:	d104      	bne.n	8015942 <vTaskSwitchContext+0x8e>
 8015938:	693b      	ldr	r3, [r7, #16]
 801593a:	685b      	ldr	r3, [r3, #4]
 801593c:	685a      	ldr	r2, [r3, #4]
 801593e:	693b      	ldr	r3, [r7, #16]
 8015940:	605a      	str	r2, [r3, #4]
 8015942:	693b      	ldr	r3, [r7, #16]
 8015944:	685b      	ldr	r3, [r3, #4]
 8015946:	68db      	ldr	r3, [r3, #12]
 8015948:	4a07      	ldr	r2, [pc, #28]	@ (8015968 <vTaskSwitchContext+0xb4>)
 801594a:	6013      	str	r3, [r2, #0]
}
 801594c:	bf00      	nop
 801594e:	371c      	adds	r7, #28
 8015950:	46bd      	mov	sp, r7
 8015952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015956:	4770      	bx	lr
 8015958:	24002abc 	.word	0x24002abc
 801595c:	24002aa8 	.word	0x24002aa8
 8015960:	24002a9c 	.word	0x24002a9c
 8015964:	24002998 	.word	0x24002998
 8015968:	24002994 	.word	0x24002994

0801596c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b084      	sub	sp, #16
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d10b      	bne.n	8015994 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801597c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015980:	f383 8811 	msr	BASEPRI, r3
 8015984:	f3bf 8f6f 	isb	sy
 8015988:	f3bf 8f4f 	dsb	sy
 801598c:	60fb      	str	r3, [r7, #12]
}
 801598e:	bf00      	nop
 8015990:	bf00      	nop
 8015992:	e7fd      	b.n	8015990 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015994:	4b07      	ldr	r3, [pc, #28]	@ (80159b4 <vTaskPlaceOnEventList+0x48>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	3318      	adds	r3, #24
 801599a:	4619      	mov	r1, r3
 801599c:	6878      	ldr	r0, [r7, #4]
 801599e:	f7fe ff44 	bl	801482a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80159a2:	2101      	movs	r1, #1
 80159a4:	6838      	ldr	r0, [r7, #0]
 80159a6:	f000 fb87 	bl	80160b8 <prvAddCurrentTaskToDelayedList>
}
 80159aa:	bf00      	nop
 80159ac:	3710      	adds	r7, #16
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}
 80159b2:	bf00      	nop
 80159b4:	24002994 	.word	0x24002994

080159b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b086      	sub	sp, #24
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	68db      	ldr	r3, [r3, #12]
 80159c4:	68db      	ldr	r3, [r3, #12]
 80159c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80159c8:	693b      	ldr	r3, [r7, #16]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d10b      	bne.n	80159e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80159ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159d2:	f383 8811 	msr	BASEPRI, r3
 80159d6:	f3bf 8f6f 	isb	sy
 80159da:	f3bf 8f4f 	dsb	sy
 80159de:	60fb      	str	r3, [r7, #12]
}
 80159e0:	bf00      	nop
 80159e2:	bf00      	nop
 80159e4:	e7fd      	b.n	80159e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80159e6:	693b      	ldr	r3, [r7, #16]
 80159e8:	3318      	adds	r3, #24
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7fe ff56 	bl	801489c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80159f0:	4b1d      	ldr	r3, [pc, #116]	@ (8015a68 <xTaskRemoveFromEventList+0xb0>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d11c      	bne.n	8015a32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	3304      	adds	r3, #4
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7fe ff4d 	bl	801489c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015a02:	693b      	ldr	r3, [r7, #16]
 8015a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a06:	2201      	movs	r2, #1
 8015a08:	409a      	lsls	r2, r3
 8015a0a:	4b18      	ldr	r3, [pc, #96]	@ (8015a6c <xTaskRemoveFromEventList+0xb4>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	4313      	orrs	r3, r2
 8015a10:	4a16      	ldr	r2, [pc, #88]	@ (8015a6c <xTaskRemoveFromEventList+0xb4>)
 8015a12:	6013      	str	r3, [r2, #0]
 8015a14:	693b      	ldr	r3, [r7, #16]
 8015a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a18:	4613      	mov	r3, r2
 8015a1a:	009b      	lsls	r3, r3, #2
 8015a1c:	4413      	add	r3, r2
 8015a1e:	009b      	lsls	r3, r3, #2
 8015a20:	4a13      	ldr	r2, [pc, #76]	@ (8015a70 <xTaskRemoveFromEventList+0xb8>)
 8015a22:	441a      	add	r2, r3
 8015a24:	693b      	ldr	r3, [r7, #16]
 8015a26:	3304      	adds	r3, #4
 8015a28:	4619      	mov	r1, r3
 8015a2a:	4610      	mov	r0, r2
 8015a2c:	f7fe fed9 	bl	80147e2 <vListInsertEnd>
 8015a30:	e005      	b.n	8015a3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015a32:	693b      	ldr	r3, [r7, #16]
 8015a34:	3318      	adds	r3, #24
 8015a36:	4619      	mov	r1, r3
 8015a38:	480e      	ldr	r0, [pc, #56]	@ (8015a74 <xTaskRemoveFromEventList+0xbc>)
 8015a3a:	f7fe fed2 	bl	80147e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a42:	4b0d      	ldr	r3, [pc, #52]	@ (8015a78 <xTaskRemoveFromEventList+0xc0>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d905      	bls.n	8015a58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015a50:	4b0a      	ldr	r3, [pc, #40]	@ (8015a7c <xTaskRemoveFromEventList+0xc4>)
 8015a52:	2201      	movs	r2, #1
 8015a54:	601a      	str	r2, [r3, #0]
 8015a56:	e001      	b.n	8015a5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015a5c:	697b      	ldr	r3, [r7, #20]
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3718      	adds	r7, #24
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	24002abc 	.word	0x24002abc
 8015a6c:	24002a9c 	.word	0x24002a9c
 8015a70:	24002998 	.word	0x24002998
 8015a74:	24002a54 	.word	0x24002a54
 8015a78:	24002994 	.word	0x24002994
 8015a7c:	24002aa8 	.word	0x24002aa8

08015a80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015a80:	b480      	push	{r7}
 8015a82:	b083      	sub	sp, #12
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015a88:	4b06      	ldr	r3, [pc, #24]	@ (8015aa4 <vTaskInternalSetTimeOutState+0x24>)
 8015a8a:	681a      	ldr	r2, [r3, #0]
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015a90:	4b05      	ldr	r3, [pc, #20]	@ (8015aa8 <vTaskInternalSetTimeOutState+0x28>)
 8015a92:	681a      	ldr	r2, [r3, #0]
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	605a      	str	r2, [r3, #4]
}
 8015a98:	bf00      	nop
 8015a9a:	370c      	adds	r7, #12
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa2:	4770      	bx	lr
 8015aa4:	24002aac 	.word	0x24002aac
 8015aa8:	24002a98 	.word	0x24002a98

08015aac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b088      	sub	sp, #32
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
 8015ab4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d10b      	bne.n	8015ad4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8015abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ac0:	f383 8811 	msr	BASEPRI, r3
 8015ac4:	f3bf 8f6f 	isb	sy
 8015ac8:	f3bf 8f4f 	dsb	sy
 8015acc:	613b      	str	r3, [r7, #16]
}
 8015ace:	bf00      	nop
 8015ad0:	bf00      	nop
 8015ad2:	e7fd      	b.n	8015ad0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d10b      	bne.n	8015af2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8015ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ade:	f383 8811 	msr	BASEPRI, r3
 8015ae2:	f3bf 8f6f 	isb	sy
 8015ae6:	f3bf 8f4f 	dsb	sy
 8015aea:	60fb      	str	r3, [r7, #12]
}
 8015aec:	bf00      	nop
 8015aee:	bf00      	nop
 8015af0:	e7fd      	b.n	8015aee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8015af2:	f000 fc79 	bl	80163e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015af6:	4b1d      	ldr	r3, [pc, #116]	@ (8015b6c <xTaskCheckForTimeOut+0xc0>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	685b      	ldr	r3, [r3, #4]
 8015b00:	69ba      	ldr	r2, [r7, #24]
 8015b02:	1ad3      	subs	r3, r2, r3
 8015b04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b0e:	d102      	bne.n	8015b16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015b10:	2300      	movs	r3, #0
 8015b12:	61fb      	str	r3, [r7, #28]
 8015b14:	e023      	b.n	8015b5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	681a      	ldr	r2, [r3, #0]
 8015b1a:	4b15      	ldr	r3, [pc, #84]	@ (8015b70 <xTaskCheckForTimeOut+0xc4>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	d007      	beq.n	8015b32 <xTaskCheckForTimeOut+0x86>
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	685b      	ldr	r3, [r3, #4]
 8015b26:	69ba      	ldr	r2, [r7, #24]
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d302      	bcc.n	8015b32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015b2c:	2301      	movs	r3, #1
 8015b2e:	61fb      	str	r3, [r7, #28]
 8015b30:	e015      	b.n	8015b5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	697a      	ldr	r2, [r7, #20]
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	d20b      	bcs.n	8015b54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015b3c:	683b      	ldr	r3, [r7, #0]
 8015b3e:	681a      	ldr	r2, [r3, #0]
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	1ad2      	subs	r2, r2, r3
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f7ff ff99 	bl	8015a80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	61fb      	str	r3, [r7, #28]
 8015b52:	e004      	b.n	8015b5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015b54:	683b      	ldr	r3, [r7, #0]
 8015b56:	2200      	movs	r2, #0
 8015b58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015b5e:	f000 fc75 	bl	801644c <vPortExitCritical>

	return xReturn;
 8015b62:	69fb      	ldr	r3, [r7, #28]
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	3720      	adds	r7, #32
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}
 8015b6c:	24002a98 	.word	0x24002a98
 8015b70:	24002aac 	.word	0x24002aac

08015b74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015b74:	b480      	push	{r7}
 8015b76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015b78:	4b03      	ldr	r3, [pc, #12]	@ (8015b88 <vTaskMissedYield+0x14>)
 8015b7a:	2201      	movs	r2, #1
 8015b7c:	601a      	str	r2, [r3, #0]
}
 8015b7e:	bf00      	nop
 8015b80:	46bd      	mov	sp, r7
 8015b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b86:	4770      	bx	lr
 8015b88:	24002aa8 	.word	0x24002aa8

08015b8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b082      	sub	sp, #8
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015b94:	f000 f852 	bl	8015c3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015b98:	4b06      	ldr	r3, [pc, #24]	@ (8015bb4 <prvIdleTask+0x28>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	2b01      	cmp	r3, #1
 8015b9e:	d9f9      	bls.n	8015b94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015ba0:	4b05      	ldr	r3, [pc, #20]	@ (8015bb8 <prvIdleTask+0x2c>)
 8015ba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ba6:	601a      	str	r2, [r3, #0]
 8015ba8:	f3bf 8f4f 	dsb	sy
 8015bac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015bb0:	e7f0      	b.n	8015b94 <prvIdleTask+0x8>
 8015bb2:	bf00      	nop
 8015bb4:	24002998 	.word	0x24002998
 8015bb8:	e000ed04 	.word	0xe000ed04

08015bbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	607b      	str	r3, [r7, #4]
 8015bc6:	e00c      	b.n	8015be2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015bc8:	687a      	ldr	r2, [r7, #4]
 8015bca:	4613      	mov	r3, r2
 8015bcc:	009b      	lsls	r3, r3, #2
 8015bce:	4413      	add	r3, r2
 8015bd0:	009b      	lsls	r3, r3, #2
 8015bd2:	4a12      	ldr	r2, [pc, #72]	@ (8015c1c <prvInitialiseTaskLists+0x60>)
 8015bd4:	4413      	add	r3, r2
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f7fe fdd6 	bl	8014788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	3301      	adds	r3, #1
 8015be0:	607b      	str	r3, [r7, #4]
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2b06      	cmp	r3, #6
 8015be6:	d9ef      	bls.n	8015bc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015be8:	480d      	ldr	r0, [pc, #52]	@ (8015c20 <prvInitialiseTaskLists+0x64>)
 8015bea:	f7fe fdcd 	bl	8014788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015bee:	480d      	ldr	r0, [pc, #52]	@ (8015c24 <prvInitialiseTaskLists+0x68>)
 8015bf0:	f7fe fdca 	bl	8014788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015bf4:	480c      	ldr	r0, [pc, #48]	@ (8015c28 <prvInitialiseTaskLists+0x6c>)
 8015bf6:	f7fe fdc7 	bl	8014788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015bfa:	480c      	ldr	r0, [pc, #48]	@ (8015c2c <prvInitialiseTaskLists+0x70>)
 8015bfc:	f7fe fdc4 	bl	8014788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015c00:	480b      	ldr	r0, [pc, #44]	@ (8015c30 <prvInitialiseTaskLists+0x74>)
 8015c02:	f7fe fdc1 	bl	8014788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015c06:	4b0b      	ldr	r3, [pc, #44]	@ (8015c34 <prvInitialiseTaskLists+0x78>)
 8015c08:	4a05      	ldr	r2, [pc, #20]	@ (8015c20 <prvInitialiseTaskLists+0x64>)
 8015c0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8015c38 <prvInitialiseTaskLists+0x7c>)
 8015c0e:	4a05      	ldr	r2, [pc, #20]	@ (8015c24 <prvInitialiseTaskLists+0x68>)
 8015c10:	601a      	str	r2, [r3, #0]
}
 8015c12:	bf00      	nop
 8015c14:	3708      	adds	r7, #8
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd80      	pop	{r7, pc}
 8015c1a:	bf00      	nop
 8015c1c:	24002998 	.word	0x24002998
 8015c20:	24002a24 	.word	0x24002a24
 8015c24:	24002a38 	.word	0x24002a38
 8015c28:	24002a54 	.word	0x24002a54
 8015c2c:	24002a68 	.word	0x24002a68
 8015c30:	24002a80 	.word	0x24002a80
 8015c34:	24002a4c 	.word	0x24002a4c
 8015c38:	24002a50 	.word	0x24002a50

08015c3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b082      	sub	sp, #8
 8015c40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015c42:	e019      	b.n	8015c78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015c44:	f000 fbd0 	bl	80163e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c48:	4b10      	ldr	r3, [pc, #64]	@ (8015c8c <prvCheckTasksWaitingTermination+0x50>)
 8015c4a:	68db      	ldr	r3, [r3, #12]
 8015c4c:	68db      	ldr	r3, [r3, #12]
 8015c4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	3304      	adds	r3, #4
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7fe fe21 	bl	801489c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8015c90 <prvCheckTasksWaitingTermination+0x54>)
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	3b01      	subs	r3, #1
 8015c60:	4a0b      	ldr	r2, [pc, #44]	@ (8015c90 <prvCheckTasksWaitingTermination+0x54>)
 8015c62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015c64:	4b0b      	ldr	r3, [pc, #44]	@ (8015c94 <prvCheckTasksWaitingTermination+0x58>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	3b01      	subs	r3, #1
 8015c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8015c94 <prvCheckTasksWaitingTermination+0x58>)
 8015c6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015c6e:	f000 fbed 	bl	801644c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f000 f810 	bl	8015c98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015c78:	4b06      	ldr	r3, [pc, #24]	@ (8015c94 <prvCheckTasksWaitingTermination+0x58>)
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d1e1      	bne.n	8015c44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015c80:	bf00      	nop
 8015c82:	bf00      	nop
 8015c84:	3708      	adds	r7, #8
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}
 8015c8a:	bf00      	nop
 8015c8c:	24002a68 	.word	0x24002a68
 8015c90:	24002a94 	.word	0x24002a94
 8015c94:	24002a7c 	.word	0x24002a7c

08015c98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b084      	sub	sp, #16
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d108      	bne.n	8015cbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f000 fd8a 	bl	80167c8 <vPortFree>
				vPortFree( pxTCB );
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f000 fd87 	bl	80167c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015cba:	e019      	b.n	8015cf0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8015cc2:	2b01      	cmp	r3, #1
 8015cc4:	d103      	bne.n	8015cce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f000 fd7e 	bl	80167c8 <vPortFree>
	}
 8015ccc:	e010      	b.n	8015cf0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8015cd4:	2b02      	cmp	r3, #2
 8015cd6:	d00b      	beq.n	8015cf0 <prvDeleteTCB+0x58>
	__asm volatile
 8015cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cdc:	f383 8811 	msr	BASEPRI, r3
 8015ce0:	f3bf 8f6f 	isb	sy
 8015ce4:	f3bf 8f4f 	dsb	sy
 8015ce8:	60fb      	str	r3, [r7, #12]
}
 8015cea:	bf00      	nop
 8015cec:	bf00      	nop
 8015cee:	e7fd      	b.n	8015cec <prvDeleteTCB+0x54>
	}
 8015cf0:	bf00      	nop
 8015cf2:	3710      	adds	r7, #16
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015cf8:	b480      	push	{r7}
 8015cfa:	b083      	sub	sp, #12
 8015cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8015d30 <prvResetNextTaskUnblockTime+0x38>)
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d104      	bne.n	8015d12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015d08:	4b0a      	ldr	r3, [pc, #40]	@ (8015d34 <prvResetNextTaskUnblockTime+0x3c>)
 8015d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8015d0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015d10:	e008      	b.n	8015d24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d12:	4b07      	ldr	r3, [pc, #28]	@ (8015d30 <prvResetNextTaskUnblockTime+0x38>)
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	68db      	ldr	r3, [r3, #12]
 8015d18:	68db      	ldr	r3, [r3, #12]
 8015d1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	685b      	ldr	r3, [r3, #4]
 8015d20:	4a04      	ldr	r2, [pc, #16]	@ (8015d34 <prvResetNextTaskUnblockTime+0x3c>)
 8015d22:	6013      	str	r3, [r2, #0]
}
 8015d24:	bf00      	nop
 8015d26:	370c      	adds	r7, #12
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2e:	4770      	bx	lr
 8015d30:	24002a4c 	.word	0x24002a4c
 8015d34:	24002ab4 	.word	0x24002ab4

08015d38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015d38:	b480      	push	{r7}
 8015d3a:	b083      	sub	sp, #12
 8015d3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8015d6c <xTaskGetSchedulerState+0x34>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d102      	bne.n	8015d4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015d46:	2301      	movs	r3, #1
 8015d48:	607b      	str	r3, [r7, #4]
 8015d4a:	e008      	b.n	8015d5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015d4c:	4b08      	ldr	r3, [pc, #32]	@ (8015d70 <xTaskGetSchedulerState+0x38>)
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d102      	bne.n	8015d5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015d54:	2302      	movs	r3, #2
 8015d56:	607b      	str	r3, [r7, #4]
 8015d58:	e001      	b.n	8015d5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015d5e:	687b      	ldr	r3, [r7, #4]
	}
 8015d60:	4618      	mov	r0, r3
 8015d62:	370c      	adds	r7, #12
 8015d64:	46bd      	mov	sp, r7
 8015d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6a:	4770      	bx	lr
 8015d6c:	24002aa0 	.word	0x24002aa0
 8015d70:	24002abc 	.word	0x24002abc

08015d74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b084      	sub	sp, #16
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015d80:	2300      	movs	r3, #0
 8015d82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d05e      	beq.n	8015e48 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015d8a:	68bb      	ldr	r3, [r7, #8]
 8015d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d8e:	4b31      	ldr	r3, [pc, #196]	@ (8015e54 <xTaskPriorityInherit+0xe0>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d24e      	bcs.n	8015e36 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	699b      	ldr	r3, [r3, #24]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	db06      	blt.n	8015dae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015da0:	4b2c      	ldr	r3, [pc, #176]	@ (8015e54 <xTaskPriorityInherit+0xe0>)
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015da6:	f1c3 0207 	rsb	r2, r3, #7
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015dae:	68bb      	ldr	r3, [r7, #8]
 8015db0:	6959      	ldr	r1, [r3, #20]
 8015db2:	68bb      	ldr	r3, [r7, #8]
 8015db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015db6:	4613      	mov	r3, r2
 8015db8:	009b      	lsls	r3, r3, #2
 8015dba:	4413      	add	r3, r2
 8015dbc:	009b      	lsls	r3, r3, #2
 8015dbe:	4a26      	ldr	r2, [pc, #152]	@ (8015e58 <xTaskPriorityInherit+0xe4>)
 8015dc0:	4413      	add	r3, r2
 8015dc2:	4299      	cmp	r1, r3
 8015dc4:	d12f      	bne.n	8015e26 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015dc6:	68bb      	ldr	r3, [r7, #8]
 8015dc8:	3304      	adds	r3, #4
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f7fe fd66 	bl	801489c <uxListRemove>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d10a      	bne.n	8015dec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8015dd6:	68bb      	ldr	r3, [r7, #8]
 8015dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015dda:	2201      	movs	r2, #1
 8015ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8015de0:	43da      	mvns	r2, r3
 8015de2:	4b1e      	ldr	r3, [pc, #120]	@ (8015e5c <xTaskPriorityInherit+0xe8>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	4013      	ands	r3, r2
 8015de8:	4a1c      	ldr	r2, [pc, #112]	@ (8015e5c <xTaskPriorityInherit+0xe8>)
 8015dea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015dec:	4b19      	ldr	r3, [pc, #100]	@ (8015e54 <xTaskPriorityInherit+0xe0>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015df2:	68bb      	ldr	r3, [r7, #8]
 8015df4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015df6:	68bb      	ldr	r3, [r7, #8]
 8015df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015dfa:	2201      	movs	r2, #1
 8015dfc:	409a      	lsls	r2, r3
 8015dfe:	4b17      	ldr	r3, [pc, #92]	@ (8015e5c <xTaskPriorityInherit+0xe8>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	4313      	orrs	r3, r2
 8015e04:	4a15      	ldr	r2, [pc, #84]	@ (8015e5c <xTaskPriorityInherit+0xe8>)
 8015e06:	6013      	str	r3, [r2, #0]
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e0c:	4613      	mov	r3, r2
 8015e0e:	009b      	lsls	r3, r3, #2
 8015e10:	4413      	add	r3, r2
 8015e12:	009b      	lsls	r3, r3, #2
 8015e14:	4a10      	ldr	r2, [pc, #64]	@ (8015e58 <xTaskPriorityInherit+0xe4>)
 8015e16:	441a      	add	r2, r3
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	3304      	adds	r3, #4
 8015e1c:	4619      	mov	r1, r3
 8015e1e:	4610      	mov	r0, r2
 8015e20:	f7fe fcdf 	bl	80147e2 <vListInsertEnd>
 8015e24:	e004      	b.n	8015e30 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015e26:	4b0b      	ldr	r3, [pc, #44]	@ (8015e54 <xTaskPriorityInherit+0xe0>)
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e2c:	68bb      	ldr	r3, [r7, #8]
 8015e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015e30:	2301      	movs	r3, #1
 8015e32:	60fb      	str	r3, [r7, #12]
 8015e34:	e008      	b.n	8015e48 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015e3a:	4b06      	ldr	r3, [pc, #24]	@ (8015e54 <xTaskPriorityInherit+0xe0>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e40:	429a      	cmp	r2, r3
 8015e42:	d201      	bcs.n	8015e48 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015e44:	2301      	movs	r3, #1
 8015e46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015e48:	68fb      	ldr	r3, [r7, #12]
	}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3710      	adds	r7, #16
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}
 8015e52:	bf00      	nop
 8015e54:	24002994 	.word	0x24002994
 8015e58:	24002998 	.word	0x24002998
 8015e5c:	24002a9c 	.word	0x24002a9c

08015e60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b086      	sub	sp, #24
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d070      	beq.n	8015f58 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015e76:	4b3b      	ldr	r3, [pc, #236]	@ (8015f64 <xTaskPriorityDisinherit+0x104>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	693a      	ldr	r2, [r7, #16]
 8015e7c:	429a      	cmp	r2, r3
 8015e7e:	d00b      	beq.n	8015e98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8015e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e84:	f383 8811 	msr	BASEPRI, r3
 8015e88:	f3bf 8f6f 	isb	sy
 8015e8c:	f3bf 8f4f 	dsb	sy
 8015e90:	60fb      	str	r3, [r7, #12]
}
 8015e92:	bf00      	nop
 8015e94:	bf00      	nop
 8015e96:	e7fd      	b.n	8015e94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d10b      	bne.n	8015eb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8015ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ea4:	f383 8811 	msr	BASEPRI, r3
 8015ea8:	f3bf 8f6f 	isb	sy
 8015eac:	f3bf 8f4f 	dsb	sy
 8015eb0:	60bb      	str	r3, [r7, #8]
}
 8015eb2:	bf00      	nop
 8015eb4:	bf00      	nop
 8015eb6:	e7fd      	b.n	8015eb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8015eb8:	693b      	ldr	r3, [r7, #16]
 8015eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015ebc:	1e5a      	subs	r2, r3, #1
 8015ebe:	693b      	ldr	r3, [r7, #16]
 8015ec0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015ec2:	693b      	ldr	r3, [r7, #16]
 8015ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015eca:	429a      	cmp	r2, r3
 8015ecc:	d044      	beq.n	8015f58 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015ece:	693b      	ldr	r3, [r7, #16]
 8015ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d140      	bne.n	8015f58 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ed6:	693b      	ldr	r3, [r7, #16]
 8015ed8:	3304      	adds	r3, #4
 8015eda:	4618      	mov	r0, r3
 8015edc:	f7fe fcde 	bl	801489c <uxListRemove>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d115      	bne.n	8015f12 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015ee6:	693b      	ldr	r3, [r7, #16]
 8015ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015eea:	491f      	ldr	r1, [pc, #124]	@ (8015f68 <xTaskPriorityDisinherit+0x108>)
 8015eec:	4613      	mov	r3, r2
 8015eee:	009b      	lsls	r3, r3, #2
 8015ef0:	4413      	add	r3, r2
 8015ef2:	009b      	lsls	r3, r3, #2
 8015ef4:	440b      	add	r3, r1
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d10a      	bne.n	8015f12 <xTaskPriorityDisinherit+0xb2>
 8015efc:	693b      	ldr	r3, [r7, #16]
 8015efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f00:	2201      	movs	r2, #1
 8015f02:	fa02 f303 	lsl.w	r3, r2, r3
 8015f06:	43da      	mvns	r2, r3
 8015f08:	4b18      	ldr	r3, [pc, #96]	@ (8015f6c <xTaskPriorityDisinherit+0x10c>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	4013      	ands	r3, r2
 8015f0e:	4a17      	ldr	r2, [pc, #92]	@ (8015f6c <xTaskPriorityDisinherit+0x10c>)
 8015f10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015f16:	693b      	ldr	r3, [r7, #16]
 8015f18:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f1a:	693b      	ldr	r3, [r7, #16]
 8015f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f1e:	f1c3 0207 	rsb	r2, r3, #7
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f2a:	2201      	movs	r2, #1
 8015f2c:	409a      	lsls	r2, r3
 8015f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8015f6c <xTaskPriorityDisinherit+0x10c>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	4313      	orrs	r3, r2
 8015f34:	4a0d      	ldr	r2, [pc, #52]	@ (8015f6c <xTaskPriorityDisinherit+0x10c>)
 8015f36:	6013      	str	r3, [r2, #0]
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f3c:	4613      	mov	r3, r2
 8015f3e:	009b      	lsls	r3, r3, #2
 8015f40:	4413      	add	r3, r2
 8015f42:	009b      	lsls	r3, r3, #2
 8015f44:	4a08      	ldr	r2, [pc, #32]	@ (8015f68 <xTaskPriorityDisinherit+0x108>)
 8015f46:	441a      	add	r2, r3
 8015f48:	693b      	ldr	r3, [r7, #16]
 8015f4a:	3304      	adds	r3, #4
 8015f4c:	4619      	mov	r1, r3
 8015f4e:	4610      	mov	r0, r2
 8015f50:	f7fe fc47 	bl	80147e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015f54:	2301      	movs	r3, #1
 8015f56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015f58:	697b      	ldr	r3, [r7, #20]
	}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3718      	adds	r7, #24
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}
 8015f62:	bf00      	nop
 8015f64:	24002994 	.word	0x24002994
 8015f68:	24002998 	.word	0x24002998
 8015f6c:	24002a9c 	.word	0x24002a9c

08015f70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b088      	sub	sp, #32
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
 8015f78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015f7e:	2301      	movs	r3, #1
 8015f80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d079      	beq.n	801607c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015f88:	69bb      	ldr	r3, [r7, #24]
 8015f8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d10b      	bne.n	8015fa8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f94:	f383 8811 	msr	BASEPRI, r3
 8015f98:	f3bf 8f6f 	isb	sy
 8015f9c:	f3bf 8f4f 	dsb	sy
 8015fa0:	60fb      	str	r3, [r7, #12]
}
 8015fa2:	bf00      	nop
 8015fa4:	bf00      	nop
 8015fa6:	e7fd      	b.n	8015fa4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015fa8:	69bb      	ldr	r3, [r7, #24]
 8015faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015fac:	683a      	ldr	r2, [r7, #0]
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	d902      	bls.n	8015fb8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	61fb      	str	r3, [r7, #28]
 8015fb6:	e002      	b.n	8015fbe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015fb8:	69bb      	ldr	r3, [r7, #24]
 8015fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015fbc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015fbe:	69bb      	ldr	r3, [r7, #24]
 8015fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fc2:	69fa      	ldr	r2, [r7, #28]
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d059      	beq.n	801607c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015fc8:	69bb      	ldr	r3, [r7, #24]
 8015fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015fcc:	697a      	ldr	r2, [r7, #20]
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d154      	bne.n	801607c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8016084 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	69ba      	ldr	r2, [r7, #24]
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	d10b      	bne.n	8015ff4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8015fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fe0:	f383 8811 	msr	BASEPRI, r3
 8015fe4:	f3bf 8f6f 	isb	sy
 8015fe8:	f3bf 8f4f 	dsb	sy
 8015fec:	60bb      	str	r3, [r7, #8]
}
 8015fee:	bf00      	nop
 8015ff0:	bf00      	nop
 8015ff2:	e7fd      	b.n	8015ff0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015ff4:	69bb      	ldr	r3, [r7, #24]
 8015ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ff8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015ffa:	69bb      	ldr	r3, [r7, #24]
 8015ffc:	69fa      	ldr	r2, [r7, #28]
 8015ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016000:	69bb      	ldr	r3, [r7, #24]
 8016002:	699b      	ldr	r3, [r3, #24]
 8016004:	2b00      	cmp	r3, #0
 8016006:	db04      	blt.n	8016012 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016008:	69fb      	ldr	r3, [r7, #28]
 801600a:	f1c3 0207 	rsb	r2, r3, #7
 801600e:	69bb      	ldr	r3, [r7, #24]
 8016010:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016012:	69bb      	ldr	r3, [r7, #24]
 8016014:	6959      	ldr	r1, [r3, #20]
 8016016:	693a      	ldr	r2, [r7, #16]
 8016018:	4613      	mov	r3, r2
 801601a:	009b      	lsls	r3, r3, #2
 801601c:	4413      	add	r3, r2
 801601e:	009b      	lsls	r3, r3, #2
 8016020:	4a19      	ldr	r2, [pc, #100]	@ (8016088 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8016022:	4413      	add	r3, r2
 8016024:	4299      	cmp	r1, r3
 8016026:	d129      	bne.n	801607c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016028:	69bb      	ldr	r3, [r7, #24]
 801602a:	3304      	adds	r3, #4
 801602c:	4618      	mov	r0, r3
 801602e:	f7fe fc35 	bl	801489c <uxListRemove>
 8016032:	4603      	mov	r3, r0
 8016034:	2b00      	cmp	r3, #0
 8016036:	d10a      	bne.n	801604e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8016038:	69bb      	ldr	r3, [r7, #24]
 801603a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801603c:	2201      	movs	r2, #1
 801603e:	fa02 f303 	lsl.w	r3, r2, r3
 8016042:	43da      	mvns	r2, r3
 8016044:	4b11      	ldr	r3, [pc, #68]	@ (801608c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	4013      	ands	r3, r2
 801604a:	4a10      	ldr	r2, [pc, #64]	@ (801608c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801604c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801604e:	69bb      	ldr	r3, [r7, #24]
 8016050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016052:	2201      	movs	r2, #1
 8016054:	409a      	lsls	r2, r3
 8016056:	4b0d      	ldr	r3, [pc, #52]	@ (801608c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	4313      	orrs	r3, r2
 801605c:	4a0b      	ldr	r2, [pc, #44]	@ (801608c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801605e:	6013      	str	r3, [r2, #0]
 8016060:	69bb      	ldr	r3, [r7, #24]
 8016062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016064:	4613      	mov	r3, r2
 8016066:	009b      	lsls	r3, r3, #2
 8016068:	4413      	add	r3, r2
 801606a:	009b      	lsls	r3, r3, #2
 801606c:	4a06      	ldr	r2, [pc, #24]	@ (8016088 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801606e:	441a      	add	r2, r3
 8016070:	69bb      	ldr	r3, [r7, #24]
 8016072:	3304      	adds	r3, #4
 8016074:	4619      	mov	r1, r3
 8016076:	4610      	mov	r0, r2
 8016078:	f7fe fbb3 	bl	80147e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801607c:	bf00      	nop
 801607e:	3720      	adds	r7, #32
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}
 8016084:	24002994 	.word	0x24002994
 8016088:	24002998 	.word	0x24002998
 801608c:	24002a9c 	.word	0x24002a9c

08016090 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016090:	b480      	push	{r7}
 8016092:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016094:	4b07      	ldr	r3, [pc, #28]	@ (80160b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d004      	beq.n	80160a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801609c:	4b05      	ldr	r3, [pc, #20]	@ (80160b4 <pvTaskIncrementMutexHeldCount+0x24>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80160a2:	3201      	adds	r2, #1
 80160a4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80160a6:	4b03      	ldr	r3, [pc, #12]	@ (80160b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80160a8:	681b      	ldr	r3, [r3, #0]
	}
 80160aa:	4618      	mov	r0, r3
 80160ac:	46bd      	mov	sp, r7
 80160ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b2:	4770      	bx	lr
 80160b4:	24002994 	.word	0x24002994

080160b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b084      	sub	sp, #16
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80160c2:	4b29      	ldr	r3, [pc, #164]	@ (8016168 <prvAddCurrentTaskToDelayedList+0xb0>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80160c8:	4b28      	ldr	r3, [pc, #160]	@ (801616c <prvAddCurrentTaskToDelayedList+0xb4>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	3304      	adds	r3, #4
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7fe fbe4 	bl	801489c <uxListRemove>
 80160d4:	4603      	mov	r3, r0
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d10b      	bne.n	80160f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80160da:	4b24      	ldr	r3, [pc, #144]	@ (801616c <prvAddCurrentTaskToDelayedList+0xb4>)
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160e0:	2201      	movs	r2, #1
 80160e2:	fa02 f303 	lsl.w	r3, r2, r3
 80160e6:	43da      	mvns	r2, r3
 80160e8:	4b21      	ldr	r3, [pc, #132]	@ (8016170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	4013      	ands	r3, r2
 80160ee:	4a20      	ldr	r2, [pc, #128]	@ (8016170 <prvAddCurrentTaskToDelayedList+0xb8>)
 80160f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160f8:	d10a      	bne.n	8016110 <prvAddCurrentTaskToDelayedList+0x58>
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d007      	beq.n	8016110 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016100:	4b1a      	ldr	r3, [pc, #104]	@ (801616c <prvAddCurrentTaskToDelayedList+0xb4>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	3304      	adds	r3, #4
 8016106:	4619      	mov	r1, r3
 8016108:	481a      	ldr	r0, [pc, #104]	@ (8016174 <prvAddCurrentTaskToDelayedList+0xbc>)
 801610a:	f7fe fb6a 	bl	80147e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801610e:	e026      	b.n	801615e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016110:	68fa      	ldr	r2, [r7, #12]
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	4413      	add	r3, r2
 8016116:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016118:	4b14      	ldr	r3, [pc, #80]	@ (801616c <prvAddCurrentTaskToDelayedList+0xb4>)
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	68ba      	ldr	r2, [r7, #8]
 801611e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016120:	68ba      	ldr	r2, [r7, #8]
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	429a      	cmp	r2, r3
 8016126:	d209      	bcs.n	801613c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016128:	4b13      	ldr	r3, [pc, #76]	@ (8016178 <prvAddCurrentTaskToDelayedList+0xc0>)
 801612a:	681a      	ldr	r2, [r3, #0]
 801612c:	4b0f      	ldr	r3, [pc, #60]	@ (801616c <prvAddCurrentTaskToDelayedList+0xb4>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	3304      	adds	r3, #4
 8016132:	4619      	mov	r1, r3
 8016134:	4610      	mov	r0, r2
 8016136:	f7fe fb78 	bl	801482a <vListInsert>
}
 801613a:	e010      	b.n	801615e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801613c:	4b0f      	ldr	r3, [pc, #60]	@ (801617c <prvAddCurrentTaskToDelayedList+0xc4>)
 801613e:	681a      	ldr	r2, [r3, #0]
 8016140:	4b0a      	ldr	r3, [pc, #40]	@ (801616c <prvAddCurrentTaskToDelayedList+0xb4>)
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	3304      	adds	r3, #4
 8016146:	4619      	mov	r1, r3
 8016148:	4610      	mov	r0, r2
 801614a:	f7fe fb6e 	bl	801482a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801614e:	4b0c      	ldr	r3, [pc, #48]	@ (8016180 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	68ba      	ldr	r2, [r7, #8]
 8016154:	429a      	cmp	r2, r3
 8016156:	d202      	bcs.n	801615e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016158:	4a09      	ldr	r2, [pc, #36]	@ (8016180 <prvAddCurrentTaskToDelayedList+0xc8>)
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	6013      	str	r3, [r2, #0]
}
 801615e:	bf00      	nop
 8016160:	3710      	adds	r7, #16
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}
 8016166:	bf00      	nop
 8016168:	24002a98 	.word	0x24002a98
 801616c:	24002994 	.word	0x24002994
 8016170:	24002a9c 	.word	0x24002a9c
 8016174:	24002a80 	.word	0x24002a80
 8016178:	24002a50 	.word	0x24002a50
 801617c:	24002a4c 	.word	0x24002a4c
 8016180:	24002ab4 	.word	0x24002ab4

08016184 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016184:	b480      	push	{r7}
 8016186:	b085      	sub	sp, #20
 8016188:	af00      	add	r7, sp, #0
 801618a:	60f8      	str	r0, [r7, #12]
 801618c:	60b9      	str	r1, [r7, #8]
 801618e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	3b04      	subs	r3, #4
 8016194:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801619c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	3b04      	subs	r3, #4
 80161a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80161a4:	68bb      	ldr	r3, [r7, #8]
 80161a6:	f023 0201 	bic.w	r2, r3, #1
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	3b04      	subs	r3, #4
 80161b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80161b4:	4a0c      	ldr	r2, [pc, #48]	@ (80161e8 <pxPortInitialiseStack+0x64>)
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	3b14      	subs	r3, #20
 80161be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80161c0:	687a      	ldr	r2, [r7, #4]
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	3b04      	subs	r3, #4
 80161ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	f06f 0202 	mvn.w	r2, #2
 80161d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	3b20      	subs	r3, #32
 80161d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80161da:	68fb      	ldr	r3, [r7, #12]
}
 80161dc:	4618      	mov	r0, r3
 80161de:	3714      	adds	r7, #20
 80161e0:	46bd      	mov	sp, r7
 80161e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e6:	4770      	bx	lr
 80161e8:	080161ed 	.word	0x080161ed

080161ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80161ec:	b480      	push	{r7}
 80161ee:	b085      	sub	sp, #20
 80161f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80161f2:	2300      	movs	r3, #0
 80161f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80161f6:	4b13      	ldr	r3, [pc, #76]	@ (8016244 <prvTaskExitError+0x58>)
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161fe:	d00b      	beq.n	8016218 <prvTaskExitError+0x2c>
	__asm volatile
 8016200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016204:	f383 8811 	msr	BASEPRI, r3
 8016208:	f3bf 8f6f 	isb	sy
 801620c:	f3bf 8f4f 	dsb	sy
 8016210:	60fb      	str	r3, [r7, #12]
}
 8016212:	bf00      	nop
 8016214:	bf00      	nop
 8016216:	e7fd      	b.n	8016214 <prvTaskExitError+0x28>
	__asm volatile
 8016218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801621c:	f383 8811 	msr	BASEPRI, r3
 8016220:	f3bf 8f6f 	isb	sy
 8016224:	f3bf 8f4f 	dsb	sy
 8016228:	60bb      	str	r3, [r7, #8]
}
 801622a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801622c:	bf00      	nop
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d0fc      	beq.n	801622e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016234:	bf00      	nop
 8016236:	bf00      	nop
 8016238:	3714      	adds	r7, #20
 801623a:	46bd      	mov	sp, r7
 801623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016240:	4770      	bx	lr
 8016242:	bf00      	nop
 8016244:	240000c4 	.word	0x240000c4
	...

08016250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016250:	4b07      	ldr	r3, [pc, #28]	@ (8016270 <pxCurrentTCBConst2>)
 8016252:	6819      	ldr	r1, [r3, #0]
 8016254:	6808      	ldr	r0, [r1, #0]
 8016256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801625a:	f380 8809 	msr	PSP, r0
 801625e:	f3bf 8f6f 	isb	sy
 8016262:	f04f 0000 	mov.w	r0, #0
 8016266:	f380 8811 	msr	BASEPRI, r0
 801626a:	4770      	bx	lr
 801626c:	f3af 8000 	nop.w

08016270 <pxCurrentTCBConst2>:
 8016270:	24002994 	.word	0x24002994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016274:	bf00      	nop
 8016276:	bf00      	nop

08016278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016278:	4808      	ldr	r0, [pc, #32]	@ (801629c <prvPortStartFirstTask+0x24>)
 801627a:	6800      	ldr	r0, [r0, #0]
 801627c:	6800      	ldr	r0, [r0, #0]
 801627e:	f380 8808 	msr	MSP, r0
 8016282:	f04f 0000 	mov.w	r0, #0
 8016286:	f380 8814 	msr	CONTROL, r0
 801628a:	b662      	cpsie	i
 801628c:	b661      	cpsie	f
 801628e:	f3bf 8f4f 	dsb	sy
 8016292:	f3bf 8f6f 	isb	sy
 8016296:	df00      	svc	0
 8016298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801629a:	bf00      	nop
 801629c:	e000ed08 	.word	0xe000ed08

080162a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b086      	sub	sp, #24
 80162a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80162a6:	4b47      	ldr	r3, [pc, #284]	@ (80163c4 <xPortStartScheduler+0x124>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	4a47      	ldr	r2, [pc, #284]	@ (80163c8 <xPortStartScheduler+0x128>)
 80162ac:	4293      	cmp	r3, r2
 80162ae:	d10b      	bne.n	80162c8 <xPortStartScheduler+0x28>
	__asm volatile
 80162b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162b4:	f383 8811 	msr	BASEPRI, r3
 80162b8:	f3bf 8f6f 	isb	sy
 80162bc:	f3bf 8f4f 	dsb	sy
 80162c0:	613b      	str	r3, [r7, #16]
}
 80162c2:	bf00      	nop
 80162c4:	bf00      	nop
 80162c6:	e7fd      	b.n	80162c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80162c8:	4b3e      	ldr	r3, [pc, #248]	@ (80163c4 <xPortStartScheduler+0x124>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	4a3f      	ldr	r2, [pc, #252]	@ (80163cc <xPortStartScheduler+0x12c>)
 80162ce:	4293      	cmp	r3, r2
 80162d0:	d10b      	bne.n	80162ea <xPortStartScheduler+0x4a>
	__asm volatile
 80162d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162d6:	f383 8811 	msr	BASEPRI, r3
 80162da:	f3bf 8f6f 	isb	sy
 80162de:	f3bf 8f4f 	dsb	sy
 80162e2:	60fb      	str	r3, [r7, #12]
}
 80162e4:	bf00      	nop
 80162e6:	bf00      	nop
 80162e8:	e7fd      	b.n	80162e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80162ea:	4b39      	ldr	r3, [pc, #228]	@ (80163d0 <xPortStartScheduler+0x130>)
 80162ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	781b      	ldrb	r3, [r3, #0]
 80162f2:	b2db      	uxtb	r3, r3
 80162f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80162f6:	697b      	ldr	r3, [r7, #20]
 80162f8:	22ff      	movs	r2, #255	@ 0xff
 80162fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80162fc:	697b      	ldr	r3, [r7, #20]
 80162fe:	781b      	ldrb	r3, [r3, #0]
 8016300:	b2db      	uxtb	r3, r3
 8016302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016304:	78fb      	ldrb	r3, [r7, #3]
 8016306:	b2db      	uxtb	r3, r3
 8016308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801630c:	b2da      	uxtb	r2, r3
 801630e:	4b31      	ldr	r3, [pc, #196]	@ (80163d4 <xPortStartScheduler+0x134>)
 8016310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016312:	4b31      	ldr	r3, [pc, #196]	@ (80163d8 <xPortStartScheduler+0x138>)
 8016314:	2207      	movs	r2, #7
 8016316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016318:	e009      	b.n	801632e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801631a:	4b2f      	ldr	r3, [pc, #188]	@ (80163d8 <xPortStartScheduler+0x138>)
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	3b01      	subs	r3, #1
 8016320:	4a2d      	ldr	r2, [pc, #180]	@ (80163d8 <xPortStartScheduler+0x138>)
 8016322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016324:	78fb      	ldrb	r3, [r7, #3]
 8016326:	b2db      	uxtb	r3, r3
 8016328:	005b      	lsls	r3, r3, #1
 801632a:	b2db      	uxtb	r3, r3
 801632c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801632e:	78fb      	ldrb	r3, [r7, #3]
 8016330:	b2db      	uxtb	r3, r3
 8016332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016336:	2b80      	cmp	r3, #128	@ 0x80
 8016338:	d0ef      	beq.n	801631a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801633a:	4b27      	ldr	r3, [pc, #156]	@ (80163d8 <xPortStartScheduler+0x138>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	f1c3 0307 	rsb	r3, r3, #7
 8016342:	2b04      	cmp	r3, #4
 8016344:	d00b      	beq.n	801635e <xPortStartScheduler+0xbe>
	__asm volatile
 8016346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801634a:	f383 8811 	msr	BASEPRI, r3
 801634e:	f3bf 8f6f 	isb	sy
 8016352:	f3bf 8f4f 	dsb	sy
 8016356:	60bb      	str	r3, [r7, #8]
}
 8016358:	bf00      	nop
 801635a:	bf00      	nop
 801635c:	e7fd      	b.n	801635a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801635e:	4b1e      	ldr	r3, [pc, #120]	@ (80163d8 <xPortStartScheduler+0x138>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	021b      	lsls	r3, r3, #8
 8016364:	4a1c      	ldr	r2, [pc, #112]	@ (80163d8 <xPortStartScheduler+0x138>)
 8016366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016368:	4b1b      	ldr	r3, [pc, #108]	@ (80163d8 <xPortStartScheduler+0x138>)
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016370:	4a19      	ldr	r2, [pc, #100]	@ (80163d8 <xPortStartScheduler+0x138>)
 8016372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	b2da      	uxtb	r2, r3
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801637c:	4b17      	ldr	r3, [pc, #92]	@ (80163dc <xPortStartScheduler+0x13c>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	4a16      	ldr	r2, [pc, #88]	@ (80163dc <xPortStartScheduler+0x13c>)
 8016382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016388:	4b14      	ldr	r3, [pc, #80]	@ (80163dc <xPortStartScheduler+0x13c>)
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	4a13      	ldr	r2, [pc, #76]	@ (80163dc <xPortStartScheduler+0x13c>)
 801638e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016394:	f000 f8da 	bl	801654c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016398:	4b11      	ldr	r3, [pc, #68]	@ (80163e0 <xPortStartScheduler+0x140>)
 801639a:	2200      	movs	r2, #0
 801639c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801639e:	f000 f8f9 	bl	8016594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80163a2:	4b10      	ldr	r3, [pc, #64]	@ (80163e4 <xPortStartScheduler+0x144>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	4a0f      	ldr	r2, [pc, #60]	@ (80163e4 <xPortStartScheduler+0x144>)
 80163a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80163ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80163ae:	f7ff ff63 	bl	8016278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80163b2:	f7ff fa7f 	bl	80158b4 <vTaskSwitchContext>
	prvTaskExitError();
 80163b6:	f7ff ff19 	bl	80161ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80163ba:	2300      	movs	r3, #0
}
 80163bc:	4618      	mov	r0, r3
 80163be:	3718      	adds	r7, #24
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}
 80163c4:	e000ed00 	.word	0xe000ed00
 80163c8:	410fc271 	.word	0x410fc271
 80163cc:	410fc270 	.word	0x410fc270
 80163d0:	e000e400 	.word	0xe000e400
 80163d4:	24002ac0 	.word	0x24002ac0
 80163d8:	24002ac4 	.word	0x24002ac4
 80163dc:	e000ed20 	.word	0xe000ed20
 80163e0:	240000c4 	.word	0x240000c4
 80163e4:	e000ef34 	.word	0xe000ef34

080163e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80163e8:	b480      	push	{r7}
 80163ea:	b083      	sub	sp, #12
 80163ec:	af00      	add	r7, sp, #0
	__asm volatile
 80163ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163f2:	f383 8811 	msr	BASEPRI, r3
 80163f6:	f3bf 8f6f 	isb	sy
 80163fa:	f3bf 8f4f 	dsb	sy
 80163fe:	607b      	str	r3, [r7, #4]
}
 8016400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016402:	4b10      	ldr	r3, [pc, #64]	@ (8016444 <vPortEnterCritical+0x5c>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	3301      	adds	r3, #1
 8016408:	4a0e      	ldr	r2, [pc, #56]	@ (8016444 <vPortEnterCritical+0x5c>)
 801640a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801640c:	4b0d      	ldr	r3, [pc, #52]	@ (8016444 <vPortEnterCritical+0x5c>)
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	2b01      	cmp	r3, #1
 8016412:	d110      	bne.n	8016436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016414:	4b0c      	ldr	r3, [pc, #48]	@ (8016448 <vPortEnterCritical+0x60>)
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	b2db      	uxtb	r3, r3
 801641a:	2b00      	cmp	r3, #0
 801641c:	d00b      	beq.n	8016436 <vPortEnterCritical+0x4e>
	__asm volatile
 801641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016422:	f383 8811 	msr	BASEPRI, r3
 8016426:	f3bf 8f6f 	isb	sy
 801642a:	f3bf 8f4f 	dsb	sy
 801642e:	603b      	str	r3, [r7, #0]
}
 8016430:	bf00      	nop
 8016432:	bf00      	nop
 8016434:	e7fd      	b.n	8016432 <vPortEnterCritical+0x4a>
	}
}
 8016436:	bf00      	nop
 8016438:	370c      	adds	r7, #12
 801643a:	46bd      	mov	sp, r7
 801643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016440:	4770      	bx	lr
 8016442:	bf00      	nop
 8016444:	240000c4 	.word	0x240000c4
 8016448:	e000ed04 	.word	0xe000ed04

0801644c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801644c:	b480      	push	{r7}
 801644e:	b083      	sub	sp, #12
 8016450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016452:	4b12      	ldr	r3, [pc, #72]	@ (801649c <vPortExitCritical+0x50>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d10b      	bne.n	8016472 <vPortExitCritical+0x26>
	__asm volatile
 801645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801645e:	f383 8811 	msr	BASEPRI, r3
 8016462:	f3bf 8f6f 	isb	sy
 8016466:	f3bf 8f4f 	dsb	sy
 801646a:	607b      	str	r3, [r7, #4]
}
 801646c:	bf00      	nop
 801646e:	bf00      	nop
 8016470:	e7fd      	b.n	801646e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016472:	4b0a      	ldr	r3, [pc, #40]	@ (801649c <vPortExitCritical+0x50>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	3b01      	subs	r3, #1
 8016478:	4a08      	ldr	r2, [pc, #32]	@ (801649c <vPortExitCritical+0x50>)
 801647a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801647c:	4b07      	ldr	r3, [pc, #28]	@ (801649c <vPortExitCritical+0x50>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d105      	bne.n	8016490 <vPortExitCritical+0x44>
 8016484:	2300      	movs	r3, #0
 8016486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	f383 8811 	msr	BASEPRI, r3
}
 801648e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016490:	bf00      	nop
 8016492:	370c      	adds	r7, #12
 8016494:	46bd      	mov	sp, r7
 8016496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649a:	4770      	bx	lr
 801649c:	240000c4 	.word	0x240000c4

080164a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80164a0:	f3ef 8009 	mrs	r0, PSP
 80164a4:	f3bf 8f6f 	isb	sy
 80164a8:	4b15      	ldr	r3, [pc, #84]	@ (8016500 <pxCurrentTCBConst>)
 80164aa:	681a      	ldr	r2, [r3, #0]
 80164ac:	f01e 0f10 	tst.w	lr, #16
 80164b0:	bf08      	it	eq
 80164b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80164b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ba:	6010      	str	r0, [r2, #0]
 80164bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80164c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80164c4:	f380 8811 	msr	BASEPRI, r0
 80164c8:	f3bf 8f4f 	dsb	sy
 80164cc:	f3bf 8f6f 	isb	sy
 80164d0:	f7ff f9f0 	bl	80158b4 <vTaskSwitchContext>
 80164d4:	f04f 0000 	mov.w	r0, #0
 80164d8:	f380 8811 	msr	BASEPRI, r0
 80164dc:	bc09      	pop	{r0, r3}
 80164de:	6819      	ldr	r1, [r3, #0]
 80164e0:	6808      	ldr	r0, [r1, #0]
 80164e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e6:	f01e 0f10 	tst.w	lr, #16
 80164ea:	bf08      	it	eq
 80164ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80164f0:	f380 8809 	msr	PSP, r0
 80164f4:	f3bf 8f6f 	isb	sy
 80164f8:	4770      	bx	lr
 80164fa:	bf00      	nop
 80164fc:	f3af 8000 	nop.w

08016500 <pxCurrentTCBConst>:
 8016500:	24002994 	.word	0x24002994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016504:	bf00      	nop
 8016506:	bf00      	nop

08016508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
	__asm volatile
 801650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016512:	f383 8811 	msr	BASEPRI, r3
 8016516:	f3bf 8f6f 	isb	sy
 801651a:	f3bf 8f4f 	dsb	sy
 801651e:	607b      	str	r3, [r7, #4]
}
 8016520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016522:	f7ff f90d 	bl	8015740 <xTaskIncrementTick>
 8016526:	4603      	mov	r3, r0
 8016528:	2b00      	cmp	r3, #0
 801652a:	d003      	beq.n	8016534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801652c:	4b06      	ldr	r3, [pc, #24]	@ (8016548 <SysTick_Handler+0x40>)
 801652e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016532:	601a      	str	r2, [r3, #0]
 8016534:	2300      	movs	r3, #0
 8016536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016538:	683b      	ldr	r3, [r7, #0]
 801653a:	f383 8811 	msr	BASEPRI, r3
}
 801653e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016540:	bf00      	nop
 8016542:	3708      	adds	r7, #8
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}
 8016548:	e000ed04 	.word	0xe000ed04

0801654c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801654c:	b480      	push	{r7}
 801654e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016550:	4b0b      	ldr	r3, [pc, #44]	@ (8016580 <vPortSetupTimerInterrupt+0x34>)
 8016552:	2200      	movs	r2, #0
 8016554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016556:	4b0b      	ldr	r3, [pc, #44]	@ (8016584 <vPortSetupTimerInterrupt+0x38>)
 8016558:	2200      	movs	r2, #0
 801655a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801655c:	4b0a      	ldr	r3, [pc, #40]	@ (8016588 <vPortSetupTimerInterrupt+0x3c>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	4a0a      	ldr	r2, [pc, #40]	@ (801658c <vPortSetupTimerInterrupt+0x40>)
 8016562:	fba2 2303 	umull	r2, r3, r2, r3
 8016566:	099b      	lsrs	r3, r3, #6
 8016568:	4a09      	ldr	r2, [pc, #36]	@ (8016590 <vPortSetupTimerInterrupt+0x44>)
 801656a:	3b01      	subs	r3, #1
 801656c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801656e:	4b04      	ldr	r3, [pc, #16]	@ (8016580 <vPortSetupTimerInterrupt+0x34>)
 8016570:	2207      	movs	r2, #7
 8016572:	601a      	str	r2, [r3, #0]
}
 8016574:	bf00      	nop
 8016576:	46bd      	mov	sp, r7
 8016578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657c:	4770      	bx	lr
 801657e:	bf00      	nop
 8016580:	e000e010 	.word	0xe000e010
 8016584:	e000e018 	.word	0xe000e018
 8016588:	24000000 	.word	0x24000000
 801658c:	10624dd3 	.word	0x10624dd3
 8016590:	e000e014 	.word	0xe000e014

08016594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80165a4 <vPortEnableVFP+0x10>
 8016598:	6801      	ldr	r1, [r0, #0]
 801659a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801659e:	6001      	str	r1, [r0, #0]
 80165a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80165a2:	bf00      	nop
 80165a4:	e000ed88 	.word	0xe000ed88

080165a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80165a8:	b480      	push	{r7}
 80165aa:	b085      	sub	sp, #20
 80165ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80165ae:	f3ef 8305 	mrs	r3, IPSR
 80165b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	2b0f      	cmp	r3, #15
 80165b8:	d915      	bls.n	80165e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80165ba:	4a18      	ldr	r2, [pc, #96]	@ (801661c <vPortValidateInterruptPriority+0x74>)
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	4413      	add	r3, r2
 80165c0:	781b      	ldrb	r3, [r3, #0]
 80165c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80165c4:	4b16      	ldr	r3, [pc, #88]	@ (8016620 <vPortValidateInterruptPriority+0x78>)
 80165c6:	781b      	ldrb	r3, [r3, #0]
 80165c8:	7afa      	ldrb	r2, [r7, #11]
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d20b      	bcs.n	80165e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80165ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165d2:	f383 8811 	msr	BASEPRI, r3
 80165d6:	f3bf 8f6f 	isb	sy
 80165da:	f3bf 8f4f 	dsb	sy
 80165de:	607b      	str	r3, [r7, #4]
}
 80165e0:	bf00      	nop
 80165e2:	bf00      	nop
 80165e4:	e7fd      	b.n	80165e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80165e6:	4b0f      	ldr	r3, [pc, #60]	@ (8016624 <vPortValidateInterruptPriority+0x7c>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80165ee:	4b0e      	ldr	r3, [pc, #56]	@ (8016628 <vPortValidateInterruptPriority+0x80>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	429a      	cmp	r2, r3
 80165f4:	d90b      	bls.n	801660e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80165f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165fa:	f383 8811 	msr	BASEPRI, r3
 80165fe:	f3bf 8f6f 	isb	sy
 8016602:	f3bf 8f4f 	dsb	sy
 8016606:	603b      	str	r3, [r7, #0]
}
 8016608:	bf00      	nop
 801660a:	bf00      	nop
 801660c:	e7fd      	b.n	801660a <vPortValidateInterruptPriority+0x62>
	}
 801660e:	bf00      	nop
 8016610:	3714      	adds	r7, #20
 8016612:	46bd      	mov	sp, r7
 8016614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016618:	4770      	bx	lr
 801661a:	bf00      	nop
 801661c:	e000e3f0 	.word	0xe000e3f0
 8016620:	24002ac0 	.word	0x24002ac0
 8016624:	e000ed0c 	.word	0xe000ed0c
 8016628:	24002ac4 	.word	0x24002ac4

0801662c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801662c:	b580      	push	{r7, lr}
 801662e:	b08a      	sub	sp, #40	@ 0x28
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016634:	2300      	movs	r3, #0
 8016636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016638:	f7fe ffd6 	bl	80155e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801663c:	4b5c      	ldr	r3, [pc, #368]	@ (80167b0 <pvPortMalloc+0x184>)
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d101      	bne.n	8016648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016644:	f000 f924 	bl	8016890 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016648:	4b5a      	ldr	r3, [pc, #360]	@ (80167b4 <pvPortMalloc+0x188>)
 801664a:	681a      	ldr	r2, [r3, #0]
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	4013      	ands	r3, r2
 8016650:	2b00      	cmp	r3, #0
 8016652:	f040 8095 	bne.w	8016780 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d01e      	beq.n	801669a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801665c:	2208      	movs	r2, #8
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	4413      	add	r3, r2
 8016662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f003 0307 	and.w	r3, r3, #7
 801666a:	2b00      	cmp	r3, #0
 801666c:	d015      	beq.n	801669a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	f023 0307 	bic.w	r3, r3, #7
 8016674:	3308      	adds	r3, #8
 8016676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f003 0307 	and.w	r3, r3, #7
 801667e:	2b00      	cmp	r3, #0
 8016680:	d00b      	beq.n	801669a <pvPortMalloc+0x6e>
	__asm volatile
 8016682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016686:	f383 8811 	msr	BASEPRI, r3
 801668a:	f3bf 8f6f 	isb	sy
 801668e:	f3bf 8f4f 	dsb	sy
 8016692:	617b      	str	r3, [r7, #20]
}
 8016694:	bf00      	nop
 8016696:	bf00      	nop
 8016698:	e7fd      	b.n	8016696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d06f      	beq.n	8016780 <pvPortMalloc+0x154>
 80166a0:	4b45      	ldr	r3, [pc, #276]	@ (80167b8 <pvPortMalloc+0x18c>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	687a      	ldr	r2, [r7, #4]
 80166a6:	429a      	cmp	r2, r3
 80166a8:	d86a      	bhi.n	8016780 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80166aa:	4b44      	ldr	r3, [pc, #272]	@ (80167bc <pvPortMalloc+0x190>)
 80166ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80166ae:	4b43      	ldr	r3, [pc, #268]	@ (80167bc <pvPortMalloc+0x190>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80166b4:	e004      	b.n	80166c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80166b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80166ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80166c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	687a      	ldr	r2, [r7, #4]
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d903      	bls.n	80166d2 <pvPortMalloc+0xa6>
 80166ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d1f1      	bne.n	80166b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80166d2:	4b37      	ldr	r3, [pc, #220]	@ (80167b0 <pvPortMalloc+0x184>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166d8:	429a      	cmp	r2, r3
 80166da:	d051      	beq.n	8016780 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80166dc:	6a3b      	ldr	r3, [r7, #32]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	2208      	movs	r2, #8
 80166e2:	4413      	add	r3, r2
 80166e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80166e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166e8:	681a      	ldr	r2, [r3, #0]
 80166ea:	6a3b      	ldr	r3, [r7, #32]
 80166ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80166ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166f0:	685a      	ldr	r2, [r3, #4]
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	1ad2      	subs	r2, r2, r3
 80166f6:	2308      	movs	r3, #8
 80166f8:	005b      	lsls	r3, r3, #1
 80166fa:	429a      	cmp	r2, r3
 80166fc:	d920      	bls.n	8016740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80166fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	4413      	add	r3, r2
 8016704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016706:	69bb      	ldr	r3, [r7, #24]
 8016708:	f003 0307 	and.w	r3, r3, #7
 801670c:	2b00      	cmp	r3, #0
 801670e:	d00b      	beq.n	8016728 <pvPortMalloc+0xfc>
	__asm volatile
 8016710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016714:	f383 8811 	msr	BASEPRI, r3
 8016718:	f3bf 8f6f 	isb	sy
 801671c:	f3bf 8f4f 	dsb	sy
 8016720:	613b      	str	r3, [r7, #16]
}
 8016722:	bf00      	nop
 8016724:	bf00      	nop
 8016726:	e7fd      	b.n	8016724 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801672a:	685a      	ldr	r2, [r3, #4]
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	1ad2      	subs	r2, r2, r3
 8016730:	69bb      	ldr	r3, [r7, #24]
 8016732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801673a:	69b8      	ldr	r0, [r7, #24]
 801673c:	f000 f90a 	bl	8016954 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016740:	4b1d      	ldr	r3, [pc, #116]	@ (80167b8 <pvPortMalloc+0x18c>)
 8016742:	681a      	ldr	r2, [r3, #0]
 8016744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016746:	685b      	ldr	r3, [r3, #4]
 8016748:	1ad3      	subs	r3, r2, r3
 801674a:	4a1b      	ldr	r2, [pc, #108]	@ (80167b8 <pvPortMalloc+0x18c>)
 801674c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801674e:	4b1a      	ldr	r3, [pc, #104]	@ (80167b8 <pvPortMalloc+0x18c>)
 8016750:	681a      	ldr	r2, [r3, #0]
 8016752:	4b1b      	ldr	r3, [pc, #108]	@ (80167c0 <pvPortMalloc+0x194>)
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	429a      	cmp	r2, r3
 8016758:	d203      	bcs.n	8016762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801675a:	4b17      	ldr	r3, [pc, #92]	@ (80167b8 <pvPortMalloc+0x18c>)
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	4a18      	ldr	r2, [pc, #96]	@ (80167c0 <pvPortMalloc+0x194>)
 8016760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016764:	685a      	ldr	r2, [r3, #4]
 8016766:	4b13      	ldr	r3, [pc, #76]	@ (80167b4 <pvPortMalloc+0x188>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	431a      	orrs	r2, r3
 801676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801676e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016772:	2200      	movs	r2, #0
 8016774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016776:	4b13      	ldr	r3, [pc, #76]	@ (80167c4 <pvPortMalloc+0x198>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	3301      	adds	r3, #1
 801677c:	4a11      	ldr	r2, [pc, #68]	@ (80167c4 <pvPortMalloc+0x198>)
 801677e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016780:	f7fe ff40 	bl	8015604 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016784:	69fb      	ldr	r3, [r7, #28]
 8016786:	f003 0307 	and.w	r3, r3, #7
 801678a:	2b00      	cmp	r3, #0
 801678c:	d00b      	beq.n	80167a6 <pvPortMalloc+0x17a>
	__asm volatile
 801678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016792:	f383 8811 	msr	BASEPRI, r3
 8016796:	f3bf 8f6f 	isb	sy
 801679a:	f3bf 8f4f 	dsb	sy
 801679e:	60fb      	str	r3, [r7, #12]
}
 80167a0:	bf00      	nop
 80167a2:	bf00      	nop
 80167a4:	e7fd      	b.n	80167a2 <pvPortMalloc+0x176>
	return pvReturn;
 80167a6:	69fb      	ldr	r3, [r7, #28]
}
 80167a8:	4618      	mov	r0, r3
 80167aa:	3728      	adds	r7, #40	@ 0x28
 80167ac:	46bd      	mov	sp, r7
 80167ae:	bd80      	pop	{r7, pc}
 80167b0:	240066d0 	.word	0x240066d0
 80167b4:	240066e4 	.word	0x240066e4
 80167b8:	240066d4 	.word	0x240066d4
 80167bc:	240066c8 	.word	0x240066c8
 80167c0:	240066d8 	.word	0x240066d8
 80167c4:	240066dc 	.word	0x240066dc

080167c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b086      	sub	sp, #24
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d04f      	beq.n	801687a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80167da:	2308      	movs	r3, #8
 80167dc:	425b      	negs	r3, r3
 80167de:	697a      	ldr	r2, [r7, #20]
 80167e0:	4413      	add	r3, r2
 80167e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80167e8:	693b      	ldr	r3, [r7, #16]
 80167ea:	685a      	ldr	r2, [r3, #4]
 80167ec:	4b25      	ldr	r3, [pc, #148]	@ (8016884 <vPortFree+0xbc>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	4013      	ands	r3, r2
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d10b      	bne.n	801680e <vPortFree+0x46>
	__asm volatile
 80167f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167fa:	f383 8811 	msr	BASEPRI, r3
 80167fe:	f3bf 8f6f 	isb	sy
 8016802:	f3bf 8f4f 	dsb	sy
 8016806:	60fb      	str	r3, [r7, #12]
}
 8016808:	bf00      	nop
 801680a:	bf00      	nop
 801680c:	e7fd      	b.n	801680a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801680e:	693b      	ldr	r3, [r7, #16]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d00b      	beq.n	801682e <vPortFree+0x66>
	__asm volatile
 8016816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801681a:	f383 8811 	msr	BASEPRI, r3
 801681e:	f3bf 8f6f 	isb	sy
 8016822:	f3bf 8f4f 	dsb	sy
 8016826:	60bb      	str	r3, [r7, #8]
}
 8016828:	bf00      	nop
 801682a:	bf00      	nop
 801682c:	e7fd      	b.n	801682a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801682e:	693b      	ldr	r3, [r7, #16]
 8016830:	685a      	ldr	r2, [r3, #4]
 8016832:	4b14      	ldr	r3, [pc, #80]	@ (8016884 <vPortFree+0xbc>)
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	4013      	ands	r3, r2
 8016838:	2b00      	cmp	r3, #0
 801683a:	d01e      	beq.n	801687a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d11a      	bne.n	801687a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016844:	693b      	ldr	r3, [r7, #16]
 8016846:	685a      	ldr	r2, [r3, #4]
 8016848:	4b0e      	ldr	r3, [pc, #56]	@ (8016884 <vPortFree+0xbc>)
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	43db      	mvns	r3, r3
 801684e:	401a      	ands	r2, r3
 8016850:	693b      	ldr	r3, [r7, #16]
 8016852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016854:	f7fe fec8 	bl	80155e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	685a      	ldr	r2, [r3, #4]
 801685c:	4b0a      	ldr	r3, [pc, #40]	@ (8016888 <vPortFree+0xc0>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	4413      	add	r3, r2
 8016862:	4a09      	ldr	r2, [pc, #36]	@ (8016888 <vPortFree+0xc0>)
 8016864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016866:	6938      	ldr	r0, [r7, #16]
 8016868:	f000 f874 	bl	8016954 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801686c:	4b07      	ldr	r3, [pc, #28]	@ (801688c <vPortFree+0xc4>)
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	3301      	adds	r3, #1
 8016872:	4a06      	ldr	r2, [pc, #24]	@ (801688c <vPortFree+0xc4>)
 8016874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016876:	f7fe fec5 	bl	8015604 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801687a:	bf00      	nop
 801687c:	3718      	adds	r7, #24
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}
 8016882:	bf00      	nop
 8016884:	240066e4 	.word	0x240066e4
 8016888:	240066d4 	.word	0x240066d4
 801688c:	240066e0 	.word	0x240066e0

08016890 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016890:	b480      	push	{r7}
 8016892:	b085      	sub	sp, #20
 8016894:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016896:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801689a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801689c:	4b27      	ldr	r3, [pc, #156]	@ (801693c <prvHeapInit+0xac>)
 801689e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	f003 0307 	and.w	r3, r3, #7
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d00c      	beq.n	80168c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	3307      	adds	r3, #7
 80168ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	f023 0307 	bic.w	r3, r3, #7
 80168b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80168b8:	68ba      	ldr	r2, [r7, #8]
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	1ad3      	subs	r3, r2, r3
 80168be:	4a1f      	ldr	r2, [pc, #124]	@ (801693c <prvHeapInit+0xac>)
 80168c0:	4413      	add	r3, r2
 80168c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80168c8:	4a1d      	ldr	r2, [pc, #116]	@ (8016940 <prvHeapInit+0xb0>)
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80168ce:	4b1c      	ldr	r3, [pc, #112]	@ (8016940 <prvHeapInit+0xb0>)
 80168d0:	2200      	movs	r2, #0
 80168d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	68ba      	ldr	r2, [r7, #8]
 80168d8:	4413      	add	r3, r2
 80168da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80168dc:	2208      	movs	r2, #8
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	1a9b      	subs	r3, r3, r2
 80168e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f023 0307 	bic.w	r3, r3, #7
 80168ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	4a15      	ldr	r2, [pc, #84]	@ (8016944 <prvHeapInit+0xb4>)
 80168f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80168f2:	4b14      	ldr	r3, [pc, #80]	@ (8016944 <prvHeapInit+0xb4>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	2200      	movs	r2, #0
 80168f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80168fa:	4b12      	ldr	r3, [pc, #72]	@ (8016944 <prvHeapInit+0xb4>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	2200      	movs	r2, #0
 8016900:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	68fa      	ldr	r2, [r7, #12]
 801690a:	1ad2      	subs	r2, r2, r3
 801690c:	683b      	ldr	r3, [r7, #0]
 801690e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016910:	4b0c      	ldr	r3, [pc, #48]	@ (8016944 <prvHeapInit+0xb4>)
 8016912:	681a      	ldr	r2, [r3, #0]
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	685b      	ldr	r3, [r3, #4]
 801691c:	4a0a      	ldr	r2, [pc, #40]	@ (8016948 <prvHeapInit+0xb8>)
 801691e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016920:	683b      	ldr	r3, [r7, #0]
 8016922:	685b      	ldr	r3, [r3, #4]
 8016924:	4a09      	ldr	r2, [pc, #36]	@ (801694c <prvHeapInit+0xbc>)
 8016926:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016928:	4b09      	ldr	r3, [pc, #36]	@ (8016950 <prvHeapInit+0xc0>)
 801692a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801692e:	601a      	str	r2, [r3, #0]
}
 8016930:	bf00      	nop
 8016932:	3714      	adds	r7, #20
 8016934:	46bd      	mov	sp, r7
 8016936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693a:	4770      	bx	lr
 801693c:	24002ac8 	.word	0x24002ac8
 8016940:	240066c8 	.word	0x240066c8
 8016944:	240066d0 	.word	0x240066d0
 8016948:	240066d8 	.word	0x240066d8
 801694c:	240066d4 	.word	0x240066d4
 8016950:	240066e4 	.word	0x240066e4

08016954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016954:	b480      	push	{r7}
 8016956:	b085      	sub	sp, #20
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801695c:	4b28      	ldr	r3, [pc, #160]	@ (8016a00 <prvInsertBlockIntoFreeList+0xac>)
 801695e:	60fb      	str	r3, [r7, #12]
 8016960:	e002      	b.n	8016968 <prvInsertBlockIntoFreeList+0x14>
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	60fb      	str	r3, [r7, #12]
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	687a      	ldr	r2, [r7, #4]
 801696e:	429a      	cmp	r2, r3
 8016970:	d8f7      	bhi.n	8016962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	685b      	ldr	r3, [r3, #4]
 801697a:	68ba      	ldr	r2, [r7, #8]
 801697c:	4413      	add	r3, r2
 801697e:	687a      	ldr	r2, [r7, #4]
 8016980:	429a      	cmp	r2, r3
 8016982:	d108      	bne.n	8016996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	685a      	ldr	r2, [r3, #4]
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	685b      	ldr	r3, [r3, #4]
 801698c:	441a      	add	r2, r3
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	685b      	ldr	r3, [r3, #4]
 801699e:	68ba      	ldr	r2, [r7, #8]
 80169a0:	441a      	add	r2, r3
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d118      	bne.n	80169dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	681a      	ldr	r2, [r3, #0]
 80169ae:	4b15      	ldr	r3, [pc, #84]	@ (8016a04 <prvInsertBlockIntoFreeList+0xb0>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	429a      	cmp	r2, r3
 80169b4:	d00d      	beq.n	80169d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	685a      	ldr	r2, [r3, #4]
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	685b      	ldr	r3, [r3, #4]
 80169c0:	441a      	add	r2, r3
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	681a      	ldr	r2, [r3, #0]
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	601a      	str	r2, [r3, #0]
 80169d0:	e008      	b.n	80169e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80169d2:	4b0c      	ldr	r3, [pc, #48]	@ (8016a04 <prvInsertBlockIntoFreeList+0xb0>)
 80169d4:	681a      	ldr	r2, [r3, #0]
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	601a      	str	r2, [r3, #0]
 80169da:	e003      	b.n	80169e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	681a      	ldr	r2, [r3, #0]
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80169e4:	68fa      	ldr	r2, [r7, #12]
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	429a      	cmp	r2, r3
 80169ea:	d002      	beq.n	80169f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	687a      	ldr	r2, [r7, #4]
 80169f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80169f2:	bf00      	nop
 80169f4:	3714      	adds	r7, #20
 80169f6:	46bd      	mov	sp, r7
 80169f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fc:	4770      	bx	lr
 80169fe:	bf00      	nop
 8016a00:	240066c8 	.word	0x240066c8
 8016a04:	240066d0 	.word	0x240066d0

08016a08 <atof>:
 8016a08:	2100      	movs	r1, #0
 8016a0a:	f000 bdb7 	b.w	801757c <strtod>

08016a0e <atoi>:
 8016a0e:	220a      	movs	r2, #10
 8016a10:	2100      	movs	r1, #0
 8016a12:	f000 be39 	b.w	8017688 <strtol>

08016a16 <sulp>:
 8016a16:	b570      	push	{r4, r5, r6, lr}
 8016a18:	4604      	mov	r4, r0
 8016a1a:	460d      	mov	r5, r1
 8016a1c:	4616      	mov	r6, r2
 8016a1e:	ec45 4b10 	vmov	d0, r4, r5
 8016a22:	f001 ffa9 	bl	8018978 <__ulp>
 8016a26:	b17e      	cbz	r6, 8016a48 <sulp+0x32>
 8016a28:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016a2c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	dd09      	ble.n	8016a48 <sulp+0x32>
 8016a34:	051b      	lsls	r3, r3, #20
 8016a36:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8016a3a:	2000      	movs	r0, #0
 8016a3c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8016a40:	ec41 0b17 	vmov	d7, r0, r1
 8016a44:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016a48:	bd70      	pop	{r4, r5, r6, pc}
 8016a4a:	0000      	movs	r0, r0
 8016a4c:	0000      	movs	r0, r0
	...

08016a50 <_strtod_l>:
 8016a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a54:	ed2d 8b0a 	vpush	{d8-d12}
 8016a58:	b097      	sub	sp, #92	@ 0x5c
 8016a5a:	4688      	mov	r8, r1
 8016a5c:	920e      	str	r2, [sp, #56]	@ 0x38
 8016a5e:	2200      	movs	r2, #0
 8016a60:	9212      	str	r2, [sp, #72]	@ 0x48
 8016a62:	9005      	str	r0, [sp, #20]
 8016a64:	f04f 0a00 	mov.w	sl, #0
 8016a68:	f04f 0b00 	mov.w	fp, #0
 8016a6c:	460a      	mov	r2, r1
 8016a6e:	9211      	str	r2, [sp, #68]	@ 0x44
 8016a70:	7811      	ldrb	r1, [r2, #0]
 8016a72:	292b      	cmp	r1, #43	@ 0x2b
 8016a74:	d04c      	beq.n	8016b10 <_strtod_l+0xc0>
 8016a76:	d839      	bhi.n	8016aec <_strtod_l+0x9c>
 8016a78:	290d      	cmp	r1, #13
 8016a7a:	d833      	bhi.n	8016ae4 <_strtod_l+0x94>
 8016a7c:	2908      	cmp	r1, #8
 8016a7e:	d833      	bhi.n	8016ae8 <_strtod_l+0x98>
 8016a80:	2900      	cmp	r1, #0
 8016a82:	d03c      	beq.n	8016afe <_strtod_l+0xae>
 8016a84:	2200      	movs	r2, #0
 8016a86:	9208      	str	r2, [sp, #32]
 8016a88:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016a8a:	782a      	ldrb	r2, [r5, #0]
 8016a8c:	2a30      	cmp	r2, #48	@ 0x30
 8016a8e:	f040 80b5 	bne.w	8016bfc <_strtod_l+0x1ac>
 8016a92:	786a      	ldrb	r2, [r5, #1]
 8016a94:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016a98:	2a58      	cmp	r2, #88	@ 0x58
 8016a9a:	d170      	bne.n	8016b7e <_strtod_l+0x12e>
 8016a9c:	9302      	str	r3, [sp, #8]
 8016a9e:	9b08      	ldr	r3, [sp, #32]
 8016aa0:	9301      	str	r3, [sp, #4]
 8016aa2:	ab12      	add	r3, sp, #72	@ 0x48
 8016aa4:	9300      	str	r3, [sp, #0]
 8016aa6:	4a8b      	ldr	r2, [pc, #556]	@ (8016cd4 <_strtod_l+0x284>)
 8016aa8:	9805      	ldr	r0, [sp, #20]
 8016aaa:	ab13      	add	r3, sp, #76	@ 0x4c
 8016aac:	a911      	add	r1, sp, #68	@ 0x44
 8016aae:	f001 f85d 	bl	8017b6c <__gethex>
 8016ab2:	f010 060f 	ands.w	r6, r0, #15
 8016ab6:	4604      	mov	r4, r0
 8016ab8:	d005      	beq.n	8016ac6 <_strtod_l+0x76>
 8016aba:	2e06      	cmp	r6, #6
 8016abc:	d12a      	bne.n	8016b14 <_strtod_l+0xc4>
 8016abe:	3501      	adds	r5, #1
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	9511      	str	r5, [sp, #68]	@ 0x44
 8016ac4:	9308      	str	r3, [sp, #32]
 8016ac6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	f040 852f 	bne.w	801752c <_strtod_l+0xadc>
 8016ace:	9b08      	ldr	r3, [sp, #32]
 8016ad0:	ec4b ab10 	vmov	d0, sl, fp
 8016ad4:	b1cb      	cbz	r3, 8016b0a <_strtod_l+0xba>
 8016ad6:	eeb1 0b40 	vneg.f64	d0, d0
 8016ada:	b017      	add	sp, #92	@ 0x5c
 8016adc:	ecbd 8b0a 	vpop	{d8-d12}
 8016ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ae4:	2920      	cmp	r1, #32
 8016ae6:	d1cd      	bne.n	8016a84 <_strtod_l+0x34>
 8016ae8:	3201      	adds	r2, #1
 8016aea:	e7c0      	b.n	8016a6e <_strtod_l+0x1e>
 8016aec:	292d      	cmp	r1, #45	@ 0x2d
 8016aee:	d1c9      	bne.n	8016a84 <_strtod_l+0x34>
 8016af0:	2101      	movs	r1, #1
 8016af2:	9108      	str	r1, [sp, #32]
 8016af4:	1c51      	adds	r1, r2, #1
 8016af6:	9111      	str	r1, [sp, #68]	@ 0x44
 8016af8:	7852      	ldrb	r2, [r2, #1]
 8016afa:	2a00      	cmp	r2, #0
 8016afc:	d1c4      	bne.n	8016a88 <_strtod_l+0x38>
 8016afe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016b00:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	f040 850f 	bne.w	8017528 <_strtod_l+0xad8>
 8016b0a:	ec4b ab10 	vmov	d0, sl, fp
 8016b0e:	e7e4      	b.n	8016ada <_strtod_l+0x8a>
 8016b10:	2100      	movs	r1, #0
 8016b12:	e7ee      	b.n	8016af2 <_strtod_l+0xa2>
 8016b14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016b16:	b13a      	cbz	r2, 8016b28 <_strtod_l+0xd8>
 8016b18:	2135      	movs	r1, #53	@ 0x35
 8016b1a:	a814      	add	r0, sp, #80	@ 0x50
 8016b1c:	f002 f823 	bl	8018b66 <__copybits>
 8016b20:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016b22:	9805      	ldr	r0, [sp, #20]
 8016b24:	f001 fbf4 	bl	8018310 <_Bfree>
 8016b28:	1e73      	subs	r3, r6, #1
 8016b2a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016b2c:	2b04      	cmp	r3, #4
 8016b2e:	d806      	bhi.n	8016b3e <_strtod_l+0xee>
 8016b30:	e8df f003 	tbb	[pc, r3]
 8016b34:	201d0314 	.word	0x201d0314
 8016b38:	14          	.byte	0x14
 8016b39:	00          	.byte	0x00
 8016b3a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8016b3e:	05e3      	lsls	r3, r4, #23
 8016b40:	bf48      	it	mi
 8016b42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016b46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016b4a:	0d1b      	lsrs	r3, r3, #20
 8016b4c:	051b      	lsls	r3, r3, #20
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d1b9      	bne.n	8016ac6 <_strtod_l+0x76>
 8016b52:	f000 ff15 	bl	8017980 <__errno>
 8016b56:	2322      	movs	r3, #34	@ 0x22
 8016b58:	6003      	str	r3, [r0, #0]
 8016b5a:	e7b4      	b.n	8016ac6 <_strtod_l+0x76>
 8016b5c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016b60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016b64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016b68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016b6c:	e7e7      	b.n	8016b3e <_strtod_l+0xee>
 8016b6e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8016cdc <_strtod_l+0x28c>
 8016b72:	e7e4      	b.n	8016b3e <_strtod_l+0xee>
 8016b74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016b78:	f04f 3aff 	mov.w	sl, #4294967295
 8016b7c:	e7df      	b.n	8016b3e <_strtod_l+0xee>
 8016b7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016b80:	1c5a      	adds	r2, r3, #1
 8016b82:	9211      	str	r2, [sp, #68]	@ 0x44
 8016b84:	785b      	ldrb	r3, [r3, #1]
 8016b86:	2b30      	cmp	r3, #48	@ 0x30
 8016b88:	d0f9      	beq.n	8016b7e <_strtod_l+0x12e>
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d09b      	beq.n	8016ac6 <_strtod_l+0x76>
 8016b8e:	2301      	movs	r3, #1
 8016b90:	2600      	movs	r6, #0
 8016b92:	9307      	str	r3, [sp, #28]
 8016b94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8016b98:	46b1      	mov	r9, r6
 8016b9a:	4635      	mov	r5, r6
 8016b9c:	220a      	movs	r2, #10
 8016b9e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016ba0:	7804      	ldrb	r4, [r0, #0]
 8016ba2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016ba6:	b2d9      	uxtb	r1, r3
 8016ba8:	2909      	cmp	r1, #9
 8016baa:	d929      	bls.n	8016c00 <_strtod_l+0x1b0>
 8016bac:	494a      	ldr	r1, [pc, #296]	@ (8016cd8 <_strtod_l+0x288>)
 8016bae:	2201      	movs	r2, #1
 8016bb0:	f000 fe8e 	bl	80178d0 <strncmp>
 8016bb4:	b378      	cbz	r0, 8016c16 <_strtod_l+0x1c6>
 8016bb6:	2000      	movs	r0, #0
 8016bb8:	4622      	mov	r2, r4
 8016bba:	462b      	mov	r3, r5
 8016bbc:	4607      	mov	r7, r0
 8016bbe:	9006      	str	r0, [sp, #24]
 8016bc0:	2a65      	cmp	r2, #101	@ 0x65
 8016bc2:	d001      	beq.n	8016bc8 <_strtod_l+0x178>
 8016bc4:	2a45      	cmp	r2, #69	@ 0x45
 8016bc6:	d117      	bne.n	8016bf8 <_strtod_l+0x1a8>
 8016bc8:	b91b      	cbnz	r3, 8016bd2 <_strtod_l+0x182>
 8016bca:	9b07      	ldr	r3, [sp, #28]
 8016bcc:	4303      	orrs	r3, r0
 8016bce:	d096      	beq.n	8016afe <_strtod_l+0xae>
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8016bd6:	f108 0201 	add.w	r2, r8, #1
 8016bda:	9211      	str	r2, [sp, #68]	@ 0x44
 8016bdc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016be0:	2a2b      	cmp	r2, #43	@ 0x2b
 8016be2:	d06b      	beq.n	8016cbc <_strtod_l+0x26c>
 8016be4:	2a2d      	cmp	r2, #45	@ 0x2d
 8016be6:	d071      	beq.n	8016ccc <_strtod_l+0x27c>
 8016be8:	f04f 0e00 	mov.w	lr, #0
 8016bec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016bf0:	2c09      	cmp	r4, #9
 8016bf2:	d979      	bls.n	8016ce8 <_strtod_l+0x298>
 8016bf4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8016bf8:	2400      	movs	r4, #0
 8016bfa:	e094      	b.n	8016d26 <_strtod_l+0x2d6>
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	e7c7      	b.n	8016b90 <_strtod_l+0x140>
 8016c00:	2d08      	cmp	r5, #8
 8016c02:	f100 0001 	add.w	r0, r0, #1
 8016c06:	bfd4      	ite	le
 8016c08:	fb02 3909 	mlale	r9, r2, r9, r3
 8016c0c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8016c10:	3501      	adds	r5, #1
 8016c12:	9011      	str	r0, [sp, #68]	@ 0x44
 8016c14:	e7c3      	b.n	8016b9e <_strtod_l+0x14e>
 8016c16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016c18:	1c5a      	adds	r2, r3, #1
 8016c1a:	9211      	str	r2, [sp, #68]	@ 0x44
 8016c1c:	785a      	ldrb	r2, [r3, #1]
 8016c1e:	b375      	cbz	r5, 8016c7e <_strtod_l+0x22e>
 8016c20:	4607      	mov	r7, r0
 8016c22:	462b      	mov	r3, r5
 8016c24:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016c28:	2909      	cmp	r1, #9
 8016c2a:	d913      	bls.n	8016c54 <_strtod_l+0x204>
 8016c2c:	2101      	movs	r1, #1
 8016c2e:	9106      	str	r1, [sp, #24]
 8016c30:	e7c6      	b.n	8016bc0 <_strtod_l+0x170>
 8016c32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016c34:	1c5a      	adds	r2, r3, #1
 8016c36:	9211      	str	r2, [sp, #68]	@ 0x44
 8016c38:	785a      	ldrb	r2, [r3, #1]
 8016c3a:	3001      	adds	r0, #1
 8016c3c:	2a30      	cmp	r2, #48	@ 0x30
 8016c3e:	d0f8      	beq.n	8016c32 <_strtod_l+0x1e2>
 8016c40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016c44:	2b08      	cmp	r3, #8
 8016c46:	f200 8476 	bhi.w	8017536 <_strtod_l+0xae6>
 8016c4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016c4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8016c4e:	4607      	mov	r7, r0
 8016c50:	2000      	movs	r0, #0
 8016c52:	4603      	mov	r3, r0
 8016c54:	3a30      	subs	r2, #48	@ 0x30
 8016c56:	f100 0101 	add.w	r1, r0, #1
 8016c5a:	d023      	beq.n	8016ca4 <_strtod_l+0x254>
 8016c5c:	440f      	add	r7, r1
 8016c5e:	eb00 0c03 	add.w	ip, r0, r3
 8016c62:	4619      	mov	r1, r3
 8016c64:	240a      	movs	r4, #10
 8016c66:	4561      	cmp	r1, ip
 8016c68:	d10b      	bne.n	8016c82 <_strtod_l+0x232>
 8016c6a:	1c5c      	adds	r4, r3, #1
 8016c6c:	4403      	add	r3, r0
 8016c6e:	2b08      	cmp	r3, #8
 8016c70:	4404      	add	r4, r0
 8016c72:	dc11      	bgt.n	8016c98 <_strtod_l+0x248>
 8016c74:	230a      	movs	r3, #10
 8016c76:	fb03 2909 	mla	r9, r3, r9, r2
 8016c7a:	2100      	movs	r1, #0
 8016c7c:	e013      	b.n	8016ca6 <_strtod_l+0x256>
 8016c7e:	4628      	mov	r0, r5
 8016c80:	e7dc      	b.n	8016c3c <_strtod_l+0x1ec>
 8016c82:	2908      	cmp	r1, #8
 8016c84:	f101 0101 	add.w	r1, r1, #1
 8016c88:	dc02      	bgt.n	8016c90 <_strtod_l+0x240>
 8016c8a:	fb04 f909 	mul.w	r9, r4, r9
 8016c8e:	e7ea      	b.n	8016c66 <_strtod_l+0x216>
 8016c90:	2910      	cmp	r1, #16
 8016c92:	bfd8      	it	le
 8016c94:	4366      	mulle	r6, r4
 8016c96:	e7e6      	b.n	8016c66 <_strtod_l+0x216>
 8016c98:	2b0f      	cmp	r3, #15
 8016c9a:	dcee      	bgt.n	8016c7a <_strtod_l+0x22a>
 8016c9c:	230a      	movs	r3, #10
 8016c9e:	fb03 2606 	mla	r6, r3, r6, r2
 8016ca2:	e7ea      	b.n	8016c7a <_strtod_l+0x22a>
 8016ca4:	461c      	mov	r4, r3
 8016ca6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016ca8:	1c5a      	adds	r2, r3, #1
 8016caa:	9211      	str	r2, [sp, #68]	@ 0x44
 8016cac:	785a      	ldrb	r2, [r3, #1]
 8016cae:	4608      	mov	r0, r1
 8016cb0:	4623      	mov	r3, r4
 8016cb2:	e7b7      	b.n	8016c24 <_strtod_l+0x1d4>
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	2700      	movs	r7, #0
 8016cb8:	9306      	str	r3, [sp, #24]
 8016cba:	e786      	b.n	8016bca <_strtod_l+0x17a>
 8016cbc:	f04f 0e00 	mov.w	lr, #0
 8016cc0:	f108 0202 	add.w	r2, r8, #2
 8016cc4:	9211      	str	r2, [sp, #68]	@ 0x44
 8016cc6:	f898 2002 	ldrb.w	r2, [r8, #2]
 8016cca:	e78f      	b.n	8016bec <_strtod_l+0x19c>
 8016ccc:	f04f 0e01 	mov.w	lr, #1
 8016cd0:	e7f6      	b.n	8016cc0 <_strtod_l+0x270>
 8016cd2:	bf00      	nop
 8016cd4:	08019a58 	.word	0x08019a58
 8016cd8:	08019a34 	.word	0x08019a34
 8016cdc:	7ff00000 	.word	0x7ff00000
 8016ce0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016ce2:	1c54      	adds	r4, r2, #1
 8016ce4:	9411      	str	r4, [sp, #68]	@ 0x44
 8016ce6:	7852      	ldrb	r2, [r2, #1]
 8016ce8:	2a30      	cmp	r2, #48	@ 0x30
 8016cea:	d0f9      	beq.n	8016ce0 <_strtod_l+0x290>
 8016cec:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8016cf0:	2c08      	cmp	r4, #8
 8016cf2:	d881      	bhi.n	8016bf8 <_strtod_l+0x1a8>
 8016cf4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8016cf8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016cfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8016cfc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016cfe:	1c51      	adds	r1, r2, #1
 8016d00:	9111      	str	r1, [sp, #68]	@ 0x44
 8016d02:	7852      	ldrb	r2, [r2, #1]
 8016d04:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8016d08:	2c09      	cmp	r4, #9
 8016d0a:	d938      	bls.n	8016d7e <_strtod_l+0x32e>
 8016d0c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016d0e:	1b0c      	subs	r4, r1, r4
 8016d10:	2c08      	cmp	r4, #8
 8016d12:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8016d16:	dc02      	bgt.n	8016d1e <_strtod_l+0x2ce>
 8016d18:	4564      	cmp	r4, ip
 8016d1a:	bfa8      	it	ge
 8016d1c:	4664      	movge	r4, ip
 8016d1e:	f1be 0f00 	cmp.w	lr, #0
 8016d22:	d000      	beq.n	8016d26 <_strtod_l+0x2d6>
 8016d24:	4264      	negs	r4, r4
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d14e      	bne.n	8016dc8 <_strtod_l+0x378>
 8016d2a:	9b07      	ldr	r3, [sp, #28]
 8016d2c:	4318      	orrs	r0, r3
 8016d2e:	f47f aeca 	bne.w	8016ac6 <_strtod_l+0x76>
 8016d32:	9b06      	ldr	r3, [sp, #24]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	f47f aee2 	bne.w	8016afe <_strtod_l+0xae>
 8016d3a:	2a69      	cmp	r2, #105	@ 0x69
 8016d3c:	d027      	beq.n	8016d8e <_strtod_l+0x33e>
 8016d3e:	dc24      	bgt.n	8016d8a <_strtod_l+0x33a>
 8016d40:	2a49      	cmp	r2, #73	@ 0x49
 8016d42:	d024      	beq.n	8016d8e <_strtod_l+0x33e>
 8016d44:	2a4e      	cmp	r2, #78	@ 0x4e
 8016d46:	f47f aeda 	bne.w	8016afe <_strtod_l+0xae>
 8016d4a:	4997      	ldr	r1, [pc, #604]	@ (8016fa8 <_strtod_l+0x558>)
 8016d4c:	a811      	add	r0, sp, #68	@ 0x44
 8016d4e:	f001 f92f 	bl	8017fb0 <__match>
 8016d52:	2800      	cmp	r0, #0
 8016d54:	f43f aed3 	beq.w	8016afe <_strtod_l+0xae>
 8016d58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016d5a:	781b      	ldrb	r3, [r3, #0]
 8016d5c:	2b28      	cmp	r3, #40	@ 0x28
 8016d5e:	d12d      	bne.n	8016dbc <_strtod_l+0x36c>
 8016d60:	4992      	ldr	r1, [pc, #584]	@ (8016fac <_strtod_l+0x55c>)
 8016d62:	aa14      	add	r2, sp, #80	@ 0x50
 8016d64:	a811      	add	r0, sp, #68	@ 0x44
 8016d66:	f001 f937 	bl	8017fd8 <__hexnan>
 8016d6a:	2805      	cmp	r0, #5
 8016d6c:	d126      	bne.n	8016dbc <_strtod_l+0x36c>
 8016d6e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d70:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8016d74:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016d78:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016d7c:	e6a3      	b.n	8016ac6 <_strtod_l+0x76>
 8016d7e:	240a      	movs	r4, #10
 8016d80:	fb04 2c0c 	mla	ip, r4, ip, r2
 8016d84:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016d88:	e7b8      	b.n	8016cfc <_strtod_l+0x2ac>
 8016d8a:	2a6e      	cmp	r2, #110	@ 0x6e
 8016d8c:	e7db      	b.n	8016d46 <_strtod_l+0x2f6>
 8016d8e:	4988      	ldr	r1, [pc, #544]	@ (8016fb0 <_strtod_l+0x560>)
 8016d90:	a811      	add	r0, sp, #68	@ 0x44
 8016d92:	f001 f90d 	bl	8017fb0 <__match>
 8016d96:	2800      	cmp	r0, #0
 8016d98:	f43f aeb1 	beq.w	8016afe <_strtod_l+0xae>
 8016d9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016d9e:	4985      	ldr	r1, [pc, #532]	@ (8016fb4 <_strtod_l+0x564>)
 8016da0:	3b01      	subs	r3, #1
 8016da2:	a811      	add	r0, sp, #68	@ 0x44
 8016da4:	9311      	str	r3, [sp, #68]	@ 0x44
 8016da6:	f001 f903 	bl	8017fb0 <__match>
 8016daa:	b910      	cbnz	r0, 8016db2 <_strtod_l+0x362>
 8016dac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016dae:	3301      	adds	r3, #1
 8016db0:	9311      	str	r3, [sp, #68]	@ 0x44
 8016db2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8016fc8 <_strtod_l+0x578>
 8016db6:	f04f 0a00 	mov.w	sl, #0
 8016dba:	e684      	b.n	8016ac6 <_strtod_l+0x76>
 8016dbc:	487e      	ldr	r0, [pc, #504]	@ (8016fb8 <_strtod_l+0x568>)
 8016dbe:	f000 fe1b 	bl	80179f8 <nan>
 8016dc2:	ec5b ab10 	vmov	sl, fp, d0
 8016dc6:	e67e      	b.n	8016ac6 <_strtod_l+0x76>
 8016dc8:	ee07 9a90 	vmov	s15, r9
 8016dcc:	1be2      	subs	r2, r4, r7
 8016dce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016dd2:	2d00      	cmp	r5, #0
 8016dd4:	bf08      	it	eq
 8016dd6:	461d      	moveq	r5, r3
 8016dd8:	2b10      	cmp	r3, #16
 8016dda:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ddc:	461a      	mov	r2, r3
 8016dde:	bfa8      	it	ge
 8016de0:	2210      	movge	r2, #16
 8016de2:	2b09      	cmp	r3, #9
 8016de4:	ec5b ab17 	vmov	sl, fp, d7
 8016de8:	dc15      	bgt.n	8016e16 <_strtod_l+0x3c6>
 8016dea:	1be1      	subs	r1, r4, r7
 8016dec:	2900      	cmp	r1, #0
 8016dee:	f43f ae6a 	beq.w	8016ac6 <_strtod_l+0x76>
 8016df2:	eba4 0107 	sub.w	r1, r4, r7
 8016df6:	dd72      	ble.n	8016ede <_strtod_l+0x48e>
 8016df8:	2916      	cmp	r1, #22
 8016dfa:	dc59      	bgt.n	8016eb0 <_strtod_l+0x460>
 8016dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8016fbc <_strtod_l+0x56c>)
 8016dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016e04:	ed93 7b00 	vldr	d7, [r3]
 8016e08:	ec4b ab16 	vmov	d6, sl, fp
 8016e0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016e10:	ec5b ab17 	vmov	sl, fp, d7
 8016e14:	e657      	b.n	8016ac6 <_strtod_l+0x76>
 8016e16:	4969      	ldr	r1, [pc, #420]	@ (8016fbc <_strtod_l+0x56c>)
 8016e18:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016e1c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8016e20:	ee06 6a90 	vmov	s13, r6
 8016e24:	2b0f      	cmp	r3, #15
 8016e26:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8016e2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016e2e:	ec5b ab16 	vmov	sl, fp, d6
 8016e32:	ddda      	ble.n	8016dea <_strtod_l+0x39a>
 8016e34:	1a9a      	subs	r2, r3, r2
 8016e36:	1be1      	subs	r1, r4, r7
 8016e38:	440a      	add	r2, r1
 8016e3a:	2a00      	cmp	r2, #0
 8016e3c:	f340 8094 	ble.w	8016f68 <_strtod_l+0x518>
 8016e40:	f012 000f 	ands.w	r0, r2, #15
 8016e44:	d00a      	beq.n	8016e5c <_strtod_l+0x40c>
 8016e46:	495d      	ldr	r1, [pc, #372]	@ (8016fbc <_strtod_l+0x56c>)
 8016e48:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016e4c:	ed91 7b00 	vldr	d7, [r1]
 8016e50:	ec4b ab16 	vmov	d6, sl, fp
 8016e54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016e58:	ec5b ab17 	vmov	sl, fp, d7
 8016e5c:	f032 020f 	bics.w	r2, r2, #15
 8016e60:	d073      	beq.n	8016f4a <_strtod_l+0x4fa>
 8016e62:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8016e66:	dd47      	ble.n	8016ef8 <_strtod_l+0x4a8>
 8016e68:	2400      	movs	r4, #0
 8016e6a:	4625      	mov	r5, r4
 8016e6c:	9407      	str	r4, [sp, #28]
 8016e6e:	4626      	mov	r6, r4
 8016e70:	9a05      	ldr	r2, [sp, #20]
 8016e72:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016fc8 <_strtod_l+0x578>
 8016e76:	2322      	movs	r3, #34	@ 0x22
 8016e78:	6013      	str	r3, [r2, #0]
 8016e7a:	f04f 0a00 	mov.w	sl, #0
 8016e7e:	9b07      	ldr	r3, [sp, #28]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	f43f ae20 	beq.w	8016ac6 <_strtod_l+0x76>
 8016e86:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016e88:	9805      	ldr	r0, [sp, #20]
 8016e8a:	f001 fa41 	bl	8018310 <_Bfree>
 8016e8e:	9805      	ldr	r0, [sp, #20]
 8016e90:	4631      	mov	r1, r6
 8016e92:	f001 fa3d 	bl	8018310 <_Bfree>
 8016e96:	9805      	ldr	r0, [sp, #20]
 8016e98:	4629      	mov	r1, r5
 8016e9a:	f001 fa39 	bl	8018310 <_Bfree>
 8016e9e:	9907      	ldr	r1, [sp, #28]
 8016ea0:	9805      	ldr	r0, [sp, #20]
 8016ea2:	f001 fa35 	bl	8018310 <_Bfree>
 8016ea6:	9805      	ldr	r0, [sp, #20]
 8016ea8:	4621      	mov	r1, r4
 8016eaa:	f001 fa31 	bl	8018310 <_Bfree>
 8016eae:	e60a      	b.n	8016ac6 <_strtod_l+0x76>
 8016eb0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8016eb4:	1be0      	subs	r0, r4, r7
 8016eb6:	4281      	cmp	r1, r0
 8016eb8:	dbbc      	blt.n	8016e34 <_strtod_l+0x3e4>
 8016eba:	4a40      	ldr	r2, [pc, #256]	@ (8016fbc <_strtod_l+0x56c>)
 8016ebc:	f1c3 030f 	rsb	r3, r3, #15
 8016ec0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016ec4:	ed91 7b00 	vldr	d7, [r1]
 8016ec8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016eca:	ec4b ab16 	vmov	d6, sl, fp
 8016ece:	1acb      	subs	r3, r1, r3
 8016ed0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016ed4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ed8:	ed92 6b00 	vldr	d6, [r2]
 8016edc:	e796      	b.n	8016e0c <_strtod_l+0x3bc>
 8016ede:	3116      	adds	r1, #22
 8016ee0:	dba8      	blt.n	8016e34 <_strtod_l+0x3e4>
 8016ee2:	4b36      	ldr	r3, [pc, #216]	@ (8016fbc <_strtod_l+0x56c>)
 8016ee4:	1b3c      	subs	r4, r7, r4
 8016ee6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8016eea:	ed94 7b00 	vldr	d7, [r4]
 8016eee:	ec4b ab16 	vmov	d6, sl, fp
 8016ef2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016ef6:	e78b      	b.n	8016e10 <_strtod_l+0x3c0>
 8016ef8:	2000      	movs	r0, #0
 8016efa:	ec4b ab17 	vmov	d7, sl, fp
 8016efe:	4e30      	ldr	r6, [pc, #192]	@ (8016fc0 <_strtod_l+0x570>)
 8016f00:	1112      	asrs	r2, r2, #4
 8016f02:	4601      	mov	r1, r0
 8016f04:	2a01      	cmp	r2, #1
 8016f06:	dc23      	bgt.n	8016f50 <_strtod_l+0x500>
 8016f08:	b108      	cbz	r0, 8016f0e <_strtod_l+0x4be>
 8016f0a:	ec5b ab17 	vmov	sl, fp, d7
 8016f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8016fc0 <_strtod_l+0x570>)
 8016f10:	482c      	ldr	r0, [pc, #176]	@ (8016fc4 <_strtod_l+0x574>)
 8016f12:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016f16:	ed92 7b00 	vldr	d7, [r2]
 8016f1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016f1e:	ec4b ab16 	vmov	d6, sl, fp
 8016f22:	4a29      	ldr	r2, [pc, #164]	@ (8016fc8 <_strtod_l+0x578>)
 8016f24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f28:	ee17 1a90 	vmov	r1, s15
 8016f2c:	400a      	ands	r2, r1
 8016f2e:	4282      	cmp	r2, r0
 8016f30:	ec5b ab17 	vmov	sl, fp, d7
 8016f34:	d898      	bhi.n	8016e68 <_strtod_l+0x418>
 8016f36:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8016f3a:	4282      	cmp	r2, r0
 8016f3c:	bf86      	itte	hi
 8016f3e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8016fcc <_strtod_l+0x57c>
 8016f42:	f04f 3aff 	movhi.w	sl, #4294967295
 8016f46:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	9206      	str	r2, [sp, #24]
 8016f4e:	e076      	b.n	801703e <_strtod_l+0x5ee>
 8016f50:	f012 0f01 	tst.w	r2, #1
 8016f54:	d004      	beq.n	8016f60 <_strtod_l+0x510>
 8016f56:	ed96 6b00 	vldr	d6, [r6]
 8016f5a:	2001      	movs	r0, #1
 8016f5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f60:	3101      	adds	r1, #1
 8016f62:	1052      	asrs	r2, r2, #1
 8016f64:	3608      	adds	r6, #8
 8016f66:	e7cd      	b.n	8016f04 <_strtod_l+0x4b4>
 8016f68:	d0ef      	beq.n	8016f4a <_strtod_l+0x4fa>
 8016f6a:	4252      	negs	r2, r2
 8016f6c:	f012 000f 	ands.w	r0, r2, #15
 8016f70:	d00a      	beq.n	8016f88 <_strtod_l+0x538>
 8016f72:	4912      	ldr	r1, [pc, #72]	@ (8016fbc <_strtod_l+0x56c>)
 8016f74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016f78:	ed91 7b00 	vldr	d7, [r1]
 8016f7c:	ec4b ab16 	vmov	d6, sl, fp
 8016f80:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016f84:	ec5b ab17 	vmov	sl, fp, d7
 8016f88:	1112      	asrs	r2, r2, #4
 8016f8a:	d0de      	beq.n	8016f4a <_strtod_l+0x4fa>
 8016f8c:	2a1f      	cmp	r2, #31
 8016f8e:	dd1f      	ble.n	8016fd0 <_strtod_l+0x580>
 8016f90:	2400      	movs	r4, #0
 8016f92:	4625      	mov	r5, r4
 8016f94:	9407      	str	r4, [sp, #28]
 8016f96:	4626      	mov	r6, r4
 8016f98:	9a05      	ldr	r2, [sp, #20]
 8016f9a:	2322      	movs	r3, #34	@ 0x22
 8016f9c:	f04f 0a00 	mov.w	sl, #0
 8016fa0:	f04f 0b00 	mov.w	fp, #0
 8016fa4:	6013      	str	r3, [r2, #0]
 8016fa6:	e76a      	b.n	8016e7e <_strtod_l+0x42e>
 8016fa8:	08019a3f 	.word	0x08019a3f
 8016fac:	08019a44 	.word	0x08019a44
 8016fb0:	08019a36 	.word	0x08019a36
 8016fb4:	08019a39 	.word	0x08019a39
 8016fb8:	08019dbb 	.word	0x08019dbb
 8016fbc:	08019cb8 	.word	0x08019cb8
 8016fc0:	08019c90 	.word	0x08019c90
 8016fc4:	7ca00000 	.word	0x7ca00000
 8016fc8:	7ff00000 	.word	0x7ff00000
 8016fcc:	7fefffff 	.word	0x7fefffff
 8016fd0:	f012 0110 	ands.w	r1, r2, #16
 8016fd4:	bf18      	it	ne
 8016fd6:	216a      	movne	r1, #106	@ 0x6a
 8016fd8:	9106      	str	r1, [sp, #24]
 8016fda:	ec4b ab17 	vmov	d7, sl, fp
 8016fde:	49b0      	ldr	r1, [pc, #704]	@ (80172a0 <_strtod_l+0x850>)
 8016fe0:	2000      	movs	r0, #0
 8016fe2:	07d6      	lsls	r6, r2, #31
 8016fe4:	d504      	bpl.n	8016ff0 <_strtod_l+0x5a0>
 8016fe6:	ed91 6b00 	vldr	d6, [r1]
 8016fea:	2001      	movs	r0, #1
 8016fec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016ff0:	1052      	asrs	r2, r2, #1
 8016ff2:	f101 0108 	add.w	r1, r1, #8
 8016ff6:	d1f4      	bne.n	8016fe2 <_strtod_l+0x592>
 8016ff8:	b108      	cbz	r0, 8016ffe <_strtod_l+0x5ae>
 8016ffa:	ec5b ab17 	vmov	sl, fp, d7
 8016ffe:	9a06      	ldr	r2, [sp, #24]
 8017000:	b1b2      	cbz	r2, 8017030 <_strtod_l+0x5e0>
 8017002:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8017006:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 801700a:	2a00      	cmp	r2, #0
 801700c:	4658      	mov	r0, fp
 801700e:	dd0f      	ble.n	8017030 <_strtod_l+0x5e0>
 8017010:	2a1f      	cmp	r2, #31
 8017012:	dd55      	ble.n	80170c0 <_strtod_l+0x670>
 8017014:	2a34      	cmp	r2, #52	@ 0x34
 8017016:	bfde      	ittt	le
 8017018:	f04f 32ff 	movle.w	r2, #4294967295
 801701c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8017020:	408a      	lslle	r2, r1
 8017022:	f04f 0a00 	mov.w	sl, #0
 8017026:	bfcc      	ite	gt
 8017028:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801702c:	ea02 0b00 	andle.w	fp, r2, r0
 8017030:	ec4b ab17 	vmov	d7, sl, fp
 8017034:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801703c:	d0a8      	beq.n	8016f90 <_strtod_l+0x540>
 801703e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017040:	9805      	ldr	r0, [sp, #20]
 8017042:	f8cd 9000 	str.w	r9, [sp]
 8017046:	462a      	mov	r2, r5
 8017048:	f001 f9ca 	bl	80183e0 <__s2b>
 801704c:	9007      	str	r0, [sp, #28]
 801704e:	2800      	cmp	r0, #0
 8017050:	f43f af0a 	beq.w	8016e68 <_strtod_l+0x418>
 8017054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017056:	1b3f      	subs	r7, r7, r4
 8017058:	2b00      	cmp	r3, #0
 801705a:	bfb4      	ite	lt
 801705c:	463b      	movlt	r3, r7
 801705e:	2300      	movge	r3, #0
 8017060:	930a      	str	r3, [sp, #40]	@ 0x28
 8017062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017064:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8017290 <_strtod_l+0x840>
 8017068:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801706c:	2400      	movs	r4, #0
 801706e:	930d      	str	r3, [sp, #52]	@ 0x34
 8017070:	4625      	mov	r5, r4
 8017072:	9b07      	ldr	r3, [sp, #28]
 8017074:	9805      	ldr	r0, [sp, #20]
 8017076:	6859      	ldr	r1, [r3, #4]
 8017078:	f001 f90a 	bl	8018290 <_Balloc>
 801707c:	4606      	mov	r6, r0
 801707e:	2800      	cmp	r0, #0
 8017080:	f43f aef6 	beq.w	8016e70 <_strtod_l+0x420>
 8017084:	9b07      	ldr	r3, [sp, #28]
 8017086:	691a      	ldr	r2, [r3, #16]
 8017088:	ec4b ab19 	vmov	d9, sl, fp
 801708c:	3202      	adds	r2, #2
 801708e:	f103 010c 	add.w	r1, r3, #12
 8017092:	0092      	lsls	r2, r2, #2
 8017094:	300c      	adds	r0, #12
 8017096:	f000 fca0 	bl	80179da <memcpy>
 801709a:	eeb0 0b49 	vmov.f64	d0, d9
 801709e:	9805      	ldr	r0, [sp, #20]
 80170a0:	aa14      	add	r2, sp, #80	@ 0x50
 80170a2:	a913      	add	r1, sp, #76	@ 0x4c
 80170a4:	f001 fcd8 	bl	8018a58 <__d2b>
 80170a8:	9012      	str	r0, [sp, #72]	@ 0x48
 80170aa:	2800      	cmp	r0, #0
 80170ac:	f43f aee0 	beq.w	8016e70 <_strtod_l+0x420>
 80170b0:	9805      	ldr	r0, [sp, #20]
 80170b2:	2101      	movs	r1, #1
 80170b4:	f001 fa2a 	bl	801850c <__i2b>
 80170b8:	4605      	mov	r5, r0
 80170ba:	b940      	cbnz	r0, 80170ce <_strtod_l+0x67e>
 80170bc:	2500      	movs	r5, #0
 80170be:	e6d7      	b.n	8016e70 <_strtod_l+0x420>
 80170c0:	f04f 31ff 	mov.w	r1, #4294967295
 80170c4:	fa01 f202 	lsl.w	r2, r1, r2
 80170c8:	ea02 0a0a 	and.w	sl, r2, sl
 80170cc:	e7b0      	b.n	8017030 <_strtod_l+0x5e0>
 80170ce:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80170d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80170d2:	2f00      	cmp	r7, #0
 80170d4:	bfab      	itete	ge
 80170d6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80170d8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80170da:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80170de:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80170e2:	bfac      	ite	ge
 80170e4:	eb07 0903 	addge.w	r9, r7, r3
 80170e8:	eba3 0807 	sublt.w	r8, r3, r7
 80170ec:	9b06      	ldr	r3, [sp, #24]
 80170ee:	1aff      	subs	r7, r7, r3
 80170f0:	4417      	add	r7, r2
 80170f2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80170f6:	4a6b      	ldr	r2, [pc, #428]	@ (80172a4 <_strtod_l+0x854>)
 80170f8:	3f01      	subs	r7, #1
 80170fa:	4297      	cmp	r7, r2
 80170fc:	da51      	bge.n	80171a2 <_strtod_l+0x752>
 80170fe:	1bd1      	subs	r1, r2, r7
 8017100:	291f      	cmp	r1, #31
 8017102:	eba3 0301 	sub.w	r3, r3, r1
 8017106:	f04f 0201 	mov.w	r2, #1
 801710a:	dc3e      	bgt.n	801718a <_strtod_l+0x73a>
 801710c:	408a      	lsls	r2, r1
 801710e:	920c      	str	r2, [sp, #48]	@ 0x30
 8017110:	2200      	movs	r2, #0
 8017112:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017114:	eb09 0703 	add.w	r7, r9, r3
 8017118:	4498      	add	r8, r3
 801711a:	9b06      	ldr	r3, [sp, #24]
 801711c:	45b9      	cmp	r9, r7
 801711e:	4498      	add	r8, r3
 8017120:	464b      	mov	r3, r9
 8017122:	bfa8      	it	ge
 8017124:	463b      	movge	r3, r7
 8017126:	4543      	cmp	r3, r8
 8017128:	bfa8      	it	ge
 801712a:	4643      	movge	r3, r8
 801712c:	2b00      	cmp	r3, #0
 801712e:	bfc2      	ittt	gt
 8017130:	1aff      	subgt	r7, r7, r3
 8017132:	eba8 0803 	subgt.w	r8, r8, r3
 8017136:	eba9 0903 	subgt.w	r9, r9, r3
 801713a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801713c:	2b00      	cmp	r3, #0
 801713e:	dd16      	ble.n	801716e <_strtod_l+0x71e>
 8017140:	4629      	mov	r1, r5
 8017142:	9805      	ldr	r0, [sp, #20]
 8017144:	461a      	mov	r2, r3
 8017146:	f001 faa1 	bl	801868c <__pow5mult>
 801714a:	4605      	mov	r5, r0
 801714c:	2800      	cmp	r0, #0
 801714e:	d0b5      	beq.n	80170bc <_strtod_l+0x66c>
 8017150:	4601      	mov	r1, r0
 8017152:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017154:	9805      	ldr	r0, [sp, #20]
 8017156:	f001 f9ef 	bl	8018538 <__multiply>
 801715a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801715c:	2800      	cmp	r0, #0
 801715e:	f43f ae87 	beq.w	8016e70 <_strtod_l+0x420>
 8017162:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017164:	9805      	ldr	r0, [sp, #20]
 8017166:	f001 f8d3 	bl	8018310 <_Bfree>
 801716a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801716c:	9312      	str	r3, [sp, #72]	@ 0x48
 801716e:	2f00      	cmp	r7, #0
 8017170:	dc1b      	bgt.n	80171aa <_strtod_l+0x75a>
 8017172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017174:	2b00      	cmp	r3, #0
 8017176:	dd21      	ble.n	80171bc <_strtod_l+0x76c>
 8017178:	4631      	mov	r1, r6
 801717a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801717c:	9805      	ldr	r0, [sp, #20]
 801717e:	f001 fa85 	bl	801868c <__pow5mult>
 8017182:	4606      	mov	r6, r0
 8017184:	b9d0      	cbnz	r0, 80171bc <_strtod_l+0x76c>
 8017186:	2600      	movs	r6, #0
 8017188:	e672      	b.n	8016e70 <_strtod_l+0x420>
 801718a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801718e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8017192:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8017196:	37e2      	adds	r7, #226	@ 0xe2
 8017198:	fa02 f107 	lsl.w	r1, r2, r7
 801719c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801719e:	920c      	str	r2, [sp, #48]	@ 0x30
 80171a0:	e7b8      	b.n	8017114 <_strtod_l+0x6c4>
 80171a2:	2200      	movs	r2, #0
 80171a4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80171a6:	2201      	movs	r2, #1
 80171a8:	e7f9      	b.n	801719e <_strtod_l+0x74e>
 80171aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80171ac:	9805      	ldr	r0, [sp, #20]
 80171ae:	463a      	mov	r2, r7
 80171b0:	f001 fac6 	bl	8018740 <__lshift>
 80171b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80171b6:	2800      	cmp	r0, #0
 80171b8:	d1db      	bne.n	8017172 <_strtod_l+0x722>
 80171ba:	e659      	b.n	8016e70 <_strtod_l+0x420>
 80171bc:	f1b8 0f00 	cmp.w	r8, #0
 80171c0:	dd07      	ble.n	80171d2 <_strtod_l+0x782>
 80171c2:	4631      	mov	r1, r6
 80171c4:	9805      	ldr	r0, [sp, #20]
 80171c6:	4642      	mov	r2, r8
 80171c8:	f001 faba 	bl	8018740 <__lshift>
 80171cc:	4606      	mov	r6, r0
 80171ce:	2800      	cmp	r0, #0
 80171d0:	d0d9      	beq.n	8017186 <_strtod_l+0x736>
 80171d2:	f1b9 0f00 	cmp.w	r9, #0
 80171d6:	dd08      	ble.n	80171ea <_strtod_l+0x79a>
 80171d8:	4629      	mov	r1, r5
 80171da:	9805      	ldr	r0, [sp, #20]
 80171dc:	464a      	mov	r2, r9
 80171de:	f001 faaf 	bl	8018740 <__lshift>
 80171e2:	4605      	mov	r5, r0
 80171e4:	2800      	cmp	r0, #0
 80171e6:	f43f ae43 	beq.w	8016e70 <_strtod_l+0x420>
 80171ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80171ec:	9805      	ldr	r0, [sp, #20]
 80171ee:	4632      	mov	r2, r6
 80171f0:	f001 fb2e 	bl	8018850 <__mdiff>
 80171f4:	4604      	mov	r4, r0
 80171f6:	2800      	cmp	r0, #0
 80171f8:	f43f ae3a 	beq.w	8016e70 <_strtod_l+0x420>
 80171fc:	2300      	movs	r3, #0
 80171fe:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017202:	60c3      	str	r3, [r0, #12]
 8017204:	4629      	mov	r1, r5
 8017206:	f001 fb07 	bl	8018818 <__mcmp>
 801720a:	2800      	cmp	r0, #0
 801720c:	da4e      	bge.n	80172ac <_strtod_l+0x85c>
 801720e:	ea58 080a 	orrs.w	r8, r8, sl
 8017212:	d174      	bne.n	80172fe <_strtod_l+0x8ae>
 8017214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017218:	2b00      	cmp	r3, #0
 801721a:	d170      	bne.n	80172fe <_strtod_l+0x8ae>
 801721c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017220:	0d1b      	lsrs	r3, r3, #20
 8017222:	051b      	lsls	r3, r3, #20
 8017224:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017228:	d969      	bls.n	80172fe <_strtod_l+0x8ae>
 801722a:	6963      	ldr	r3, [r4, #20]
 801722c:	b913      	cbnz	r3, 8017234 <_strtod_l+0x7e4>
 801722e:	6923      	ldr	r3, [r4, #16]
 8017230:	2b01      	cmp	r3, #1
 8017232:	dd64      	ble.n	80172fe <_strtod_l+0x8ae>
 8017234:	4621      	mov	r1, r4
 8017236:	2201      	movs	r2, #1
 8017238:	9805      	ldr	r0, [sp, #20]
 801723a:	f001 fa81 	bl	8018740 <__lshift>
 801723e:	4629      	mov	r1, r5
 8017240:	4604      	mov	r4, r0
 8017242:	f001 fae9 	bl	8018818 <__mcmp>
 8017246:	2800      	cmp	r0, #0
 8017248:	dd59      	ble.n	80172fe <_strtod_l+0x8ae>
 801724a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801724e:	9a06      	ldr	r2, [sp, #24]
 8017250:	0d1b      	lsrs	r3, r3, #20
 8017252:	051b      	lsls	r3, r3, #20
 8017254:	2a00      	cmp	r2, #0
 8017256:	d070      	beq.n	801733a <_strtod_l+0x8ea>
 8017258:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801725c:	d86d      	bhi.n	801733a <_strtod_l+0x8ea>
 801725e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8017262:	f67f ae99 	bls.w	8016f98 <_strtod_l+0x548>
 8017266:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8017298 <_strtod_l+0x848>
 801726a:	ec4b ab16 	vmov	d6, sl, fp
 801726e:	4b0e      	ldr	r3, [pc, #56]	@ (80172a8 <_strtod_l+0x858>)
 8017270:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017274:	ee17 2a90 	vmov	r2, s15
 8017278:	4013      	ands	r3, r2
 801727a:	ec5b ab17 	vmov	sl, fp, d7
 801727e:	2b00      	cmp	r3, #0
 8017280:	f47f ae01 	bne.w	8016e86 <_strtod_l+0x436>
 8017284:	9a05      	ldr	r2, [sp, #20]
 8017286:	2322      	movs	r3, #34	@ 0x22
 8017288:	6013      	str	r3, [r2, #0]
 801728a:	e5fc      	b.n	8016e86 <_strtod_l+0x436>
 801728c:	f3af 8000 	nop.w
 8017290:	ffc00000 	.word	0xffc00000
 8017294:	41dfffff 	.word	0x41dfffff
 8017298:	00000000 	.word	0x00000000
 801729c:	39500000 	.word	0x39500000
 80172a0:	08019a70 	.word	0x08019a70
 80172a4:	fffffc02 	.word	0xfffffc02
 80172a8:	7ff00000 	.word	0x7ff00000
 80172ac:	46d9      	mov	r9, fp
 80172ae:	d15d      	bne.n	801736c <_strtod_l+0x91c>
 80172b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80172b4:	f1b8 0f00 	cmp.w	r8, #0
 80172b8:	d02a      	beq.n	8017310 <_strtod_l+0x8c0>
 80172ba:	4aab      	ldr	r2, [pc, #684]	@ (8017568 <_strtod_l+0xb18>)
 80172bc:	4293      	cmp	r3, r2
 80172be:	d12a      	bne.n	8017316 <_strtod_l+0x8c6>
 80172c0:	9b06      	ldr	r3, [sp, #24]
 80172c2:	4652      	mov	r2, sl
 80172c4:	b1fb      	cbz	r3, 8017306 <_strtod_l+0x8b6>
 80172c6:	4ba9      	ldr	r3, [pc, #676]	@ (801756c <_strtod_l+0xb1c>)
 80172c8:	ea0b 0303 	and.w	r3, fp, r3
 80172cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80172d0:	f04f 31ff 	mov.w	r1, #4294967295
 80172d4:	d81a      	bhi.n	801730c <_strtod_l+0x8bc>
 80172d6:	0d1b      	lsrs	r3, r3, #20
 80172d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80172dc:	fa01 f303 	lsl.w	r3, r1, r3
 80172e0:	429a      	cmp	r2, r3
 80172e2:	d118      	bne.n	8017316 <_strtod_l+0x8c6>
 80172e4:	4ba2      	ldr	r3, [pc, #648]	@ (8017570 <_strtod_l+0xb20>)
 80172e6:	4599      	cmp	r9, r3
 80172e8:	d102      	bne.n	80172f0 <_strtod_l+0x8a0>
 80172ea:	3201      	adds	r2, #1
 80172ec:	f43f adc0 	beq.w	8016e70 <_strtod_l+0x420>
 80172f0:	4b9e      	ldr	r3, [pc, #632]	@ (801756c <_strtod_l+0xb1c>)
 80172f2:	ea09 0303 	and.w	r3, r9, r3
 80172f6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80172fa:	f04f 0a00 	mov.w	sl, #0
 80172fe:	9b06      	ldr	r3, [sp, #24]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d1b0      	bne.n	8017266 <_strtod_l+0x816>
 8017304:	e5bf      	b.n	8016e86 <_strtod_l+0x436>
 8017306:	f04f 33ff 	mov.w	r3, #4294967295
 801730a:	e7e9      	b.n	80172e0 <_strtod_l+0x890>
 801730c:	460b      	mov	r3, r1
 801730e:	e7e7      	b.n	80172e0 <_strtod_l+0x890>
 8017310:	ea53 030a 	orrs.w	r3, r3, sl
 8017314:	d099      	beq.n	801724a <_strtod_l+0x7fa>
 8017316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017318:	b1c3      	cbz	r3, 801734c <_strtod_l+0x8fc>
 801731a:	ea13 0f09 	tst.w	r3, r9
 801731e:	d0ee      	beq.n	80172fe <_strtod_l+0x8ae>
 8017320:	9a06      	ldr	r2, [sp, #24]
 8017322:	4650      	mov	r0, sl
 8017324:	4659      	mov	r1, fp
 8017326:	f1b8 0f00 	cmp.w	r8, #0
 801732a:	d013      	beq.n	8017354 <_strtod_l+0x904>
 801732c:	f7ff fb73 	bl	8016a16 <sulp>
 8017330:	ee39 7b00 	vadd.f64	d7, d9, d0
 8017334:	ec5b ab17 	vmov	sl, fp, d7
 8017338:	e7e1      	b.n	80172fe <_strtod_l+0x8ae>
 801733a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801733e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017342:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017346:	f04f 3aff 	mov.w	sl, #4294967295
 801734a:	e7d8      	b.n	80172fe <_strtod_l+0x8ae>
 801734c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801734e:	ea13 0f0a 	tst.w	r3, sl
 8017352:	e7e4      	b.n	801731e <_strtod_l+0x8ce>
 8017354:	f7ff fb5f 	bl	8016a16 <sulp>
 8017358:	ee39 0b40 	vsub.f64	d0, d9, d0
 801735c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017364:	ec5b ab10 	vmov	sl, fp, d0
 8017368:	d1c9      	bne.n	80172fe <_strtod_l+0x8ae>
 801736a:	e615      	b.n	8016f98 <_strtod_l+0x548>
 801736c:	4629      	mov	r1, r5
 801736e:	4620      	mov	r0, r4
 8017370:	f001 fbca 	bl	8018b08 <__ratio>
 8017374:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8017378:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801737c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017380:	d85d      	bhi.n	801743e <_strtod_l+0x9ee>
 8017382:	f1b8 0f00 	cmp.w	r8, #0
 8017386:	d164      	bne.n	8017452 <_strtod_l+0xa02>
 8017388:	f1ba 0f00 	cmp.w	sl, #0
 801738c:	d14b      	bne.n	8017426 <_strtod_l+0x9d6>
 801738e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017392:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8017396:	2b00      	cmp	r3, #0
 8017398:	d160      	bne.n	801745c <_strtod_l+0xa0c>
 801739a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 801739e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80173a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173a6:	d401      	bmi.n	80173ac <_strtod_l+0x95c>
 80173a8:	ee20 8b08 	vmul.f64	d8, d0, d8
 80173ac:	eeb1 ab48 	vneg.f64	d10, d8
 80173b0:	486e      	ldr	r0, [pc, #440]	@ (801756c <_strtod_l+0xb1c>)
 80173b2:	4970      	ldr	r1, [pc, #448]	@ (8017574 <_strtod_l+0xb24>)
 80173b4:	ea09 0700 	and.w	r7, r9, r0
 80173b8:	428f      	cmp	r7, r1
 80173ba:	ec53 2b1a 	vmov	r2, r3, d10
 80173be:	d17d      	bne.n	80174bc <_strtod_l+0xa6c>
 80173c0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80173c4:	ec4b ab1c 	vmov	d12, sl, fp
 80173c8:	eeb0 0b4c 	vmov.f64	d0, d12
 80173cc:	f001 fad4 	bl	8018978 <__ulp>
 80173d0:	4866      	ldr	r0, [pc, #408]	@ (801756c <_strtod_l+0xb1c>)
 80173d2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80173d6:	ee1c 3a90 	vmov	r3, s25
 80173da:	4a67      	ldr	r2, [pc, #412]	@ (8017578 <_strtod_l+0xb28>)
 80173dc:	ea03 0100 	and.w	r1, r3, r0
 80173e0:	4291      	cmp	r1, r2
 80173e2:	ec5b ab1c 	vmov	sl, fp, d12
 80173e6:	d93c      	bls.n	8017462 <_strtod_l+0xa12>
 80173e8:	ee19 2a90 	vmov	r2, s19
 80173ec:	4b60      	ldr	r3, [pc, #384]	@ (8017570 <_strtod_l+0xb20>)
 80173ee:	429a      	cmp	r2, r3
 80173f0:	d104      	bne.n	80173fc <_strtod_l+0x9ac>
 80173f2:	ee19 3a10 	vmov	r3, s18
 80173f6:	3301      	adds	r3, #1
 80173f8:	f43f ad3a 	beq.w	8016e70 <_strtod_l+0x420>
 80173fc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8017570 <_strtod_l+0xb20>
 8017400:	f04f 3aff 	mov.w	sl, #4294967295
 8017404:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017406:	9805      	ldr	r0, [sp, #20]
 8017408:	f000 ff82 	bl	8018310 <_Bfree>
 801740c:	9805      	ldr	r0, [sp, #20]
 801740e:	4631      	mov	r1, r6
 8017410:	f000 ff7e 	bl	8018310 <_Bfree>
 8017414:	9805      	ldr	r0, [sp, #20]
 8017416:	4629      	mov	r1, r5
 8017418:	f000 ff7a 	bl	8018310 <_Bfree>
 801741c:	9805      	ldr	r0, [sp, #20]
 801741e:	4621      	mov	r1, r4
 8017420:	f000 ff76 	bl	8018310 <_Bfree>
 8017424:	e625      	b.n	8017072 <_strtod_l+0x622>
 8017426:	f1ba 0f01 	cmp.w	sl, #1
 801742a:	d103      	bne.n	8017434 <_strtod_l+0x9e4>
 801742c:	f1bb 0f00 	cmp.w	fp, #0
 8017430:	f43f adb2 	beq.w	8016f98 <_strtod_l+0x548>
 8017434:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017438:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801743c:	e7b8      	b.n	80173b0 <_strtod_l+0x960>
 801743e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8017442:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017446:	f1b8 0f00 	cmp.w	r8, #0
 801744a:	d0af      	beq.n	80173ac <_strtod_l+0x95c>
 801744c:	eeb0 ab48 	vmov.f64	d10, d8
 8017450:	e7ae      	b.n	80173b0 <_strtod_l+0x960>
 8017452:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8017456:	eeb0 8b4a 	vmov.f64	d8, d10
 801745a:	e7a9      	b.n	80173b0 <_strtod_l+0x960>
 801745c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8017460:	e7a6      	b.n	80173b0 <_strtod_l+0x960>
 8017462:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8017466:	9b06      	ldr	r3, [sp, #24]
 8017468:	46d9      	mov	r9, fp
 801746a:	2b00      	cmp	r3, #0
 801746c:	d1ca      	bne.n	8017404 <_strtod_l+0x9b4>
 801746e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8017472:	0d1b      	lsrs	r3, r3, #20
 8017474:	051b      	lsls	r3, r3, #20
 8017476:	429f      	cmp	r7, r3
 8017478:	d1c4      	bne.n	8017404 <_strtod_l+0x9b4>
 801747a:	ec51 0b18 	vmov	r0, r1, d8
 801747e:	f7e9 f9bb 	bl	80007f8 <__aeabi_d2lz>
 8017482:	f7e9 f923 	bl	80006cc <__aeabi_l2d>
 8017486:	f3cb 0913 	ubfx	r9, fp, #0, #20
 801748a:	ec41 0b17 	vmov	d7, r0, r1
 801748e:	ea49 090a 	orr.w	r9, r9, sl
 8017492:	ea59 0908 	orrs.w	r9, r9, r8
 8017496:	ee38 8b47 	vsub.f64	d8, d8, d7
 801749a:	d03c      	beq.n	8017516 <_strtod_l+0xac6>
 801749c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8017550 <_strtod_l+0xb00>
 80174a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80174a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174a8:	f53f aced 	bmi.w	8016e86 <_strtod_l+0x436>
 80174ac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8017558 <_strtod_l+0xb08>
 80174b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80174b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174b8:	dda4      	ble.n	8017404 <_strtod_l+0x9b4>
 80174ba:	e4e4      	b.n	8016e86 <_strtod_l+0x436>
 80174bc:	9906      	ldr	r1, [sp, #24]
 80174be:	b1e1      	cbz	r1, 80174fa <_strtod_l+0xaaa>
 80174c0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80174c4:	d819      	bhi.n	80174fa <_strtod_l+0xaaa>
 80174c6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80174ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174ce:	d811      	bhi.n	80174f4 <_strtod_l+0xaa4>
 80174d0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80174d4:	ee18 3a10 	vmov	r3, s16
 80174d8:	2b01      	cmp	r3, #1
 80174da:	bf38      	it	cc
 80174dc:	2301      	movcc	r3, #1
 80174de:	ee08 3a10 	vmov	s16, r3
 80174e2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80174e6:	f1b8 0f00 	cmp.w	r8, #0
 80174ea:	d111      	bne.n	8017510 <_strtod_l+0xac0>
 80174ec:	eeb1 7b48 	vneg.f64	d7, d8
 80174f0:	ec53 2b17 	vmov	r2, r3, d7
 80174f4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80174f8:	1bcb      	subs	r3, r1, r7
 80174fa:	eeb0 0b49 	vmov.f64	d0, d9
 80174fe:	ec43 2b1a 	vmov	d10, r2, r3
 8017502:	f001 fa39 	bl	8018978 <__ulp>
 8017506:	eeaa 9b00 	vfma.f64	d9, d10, d0
 801750a:	ec5b ab19 	vmov	sl, fp, d9
 801750e:	e7aa      	b.n	8017466 <_strtod_l+0xa16>
 8017510:	eeb0 7b48 	vmov.f64	d7, d8
 8017514:	e7ec      	b.n	80174f0 <_strtod_l+0xaa0>
 8017516:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8017560 <_strtod_l+0xb10>
 801751a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801751e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017522:	f57f af6f 	bpl.w	8017404 <_strtod_l+0x9b4>
 8017526:	e4ae      	b.n	8016e86 <_strtod_l+0x436>
 8017528:	2300      	movs	r3, #0
 801752a:	9308      	str	r3, [sp, #32]
 801752c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801752e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017530:	6013      	str	r3, [r2, #0]
 8017532:	f7ff bacc 	b.w	8016ace <_strtod_l+0x7e>
 8017536:	2a65      	cmp	r2, #101	@ 0x65
 8017538:	f43f abbc 	beq.w	8016cb4 <_strtod_l+0x264>
 801753c:	2a45      	cmp	r2, #69	@ 0x45
 801753e:	f43f abb9 	beq.w	8016cb4 <_strtod_l+0x264>
 8017542:	2301      	movs	r3, #1
 8017544:	9306      	str	r3, [sp, #24]
 8017546:	f7ff bbf0 	b.w	8016d2a <_strtod_l+0x2da>
 801754a:	bf00      	nop
 801754c:	f3af 8000 	nop.w
 8017550:	94a03595 	.word	0x94a03595
 8017554:	3fdfffff 	.word	0x3fdfffff
 8017558:	35afe535 	.word	0x35afe535
 801755c:	3fe00000 	.word	0x3fe00000
 8017560:	94a03595 	.word	0x94a03595
 8017564:	3fcfffff 	.word	0x3fcfffff
 8017568:	000fffff 	.word	0x000fffff
 801756c:	7ff00000 	.word	0x7ff00000
 8017570:	7fefffff 	.word	0x7fefffff
 8017574:	7fe00000 	.word	0x7fe00000
 8017578:	7c9fffff 	.word	0x7c9fffff

0801757c <strtod>:
 801757c:	460a      	mov	r2, r1
 801757e:	4601      	mov	r1, r0
 8017580:	4802      	ldr	r0, [pc, #8]	@ (801758c <strtod+0x10>)
 8017582:	4b03      	ldr	r3, [pc, #12]	@ (8017590 <strtod+0x14>)
 8017584:	6800      	ldr	r0, [r0, #0]
 8017586:	f7ff ba63 	b.w	8016a50 <_strtod_l>
 801758a:	bf00      	nop
 801758c:	24000240 	.word	0x24000240
 8017590:	240000d4 	.word	0x240000d4

08017594 <_strtol_l.constprop.0>:
 8017594:	2b24      	cmp	r3, #36	@ 0x24
 8017596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801759a:	4686      	mov	lr, r0
 801759c:	4690      	mov	r8, r2
 801759e:	d801      	bhi.n	80175a4 <_strtol_l.constprop.0+0x10>
 80175a0:	2b01      	cmp	r3, #1
 80175a2:	d106      	bne.n	80175b2 <_strtol_l.constprop.0+0x1e>
 80175a4:	f000 f9ec 	bl	8017980 <__errno>
 80175a8:	2316      	movs	r3, #22
 80175aa:	6003      	str	r3, [r0, #0]
 80175ac:	2000      	movs	r0, #0
 80175ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175b2:	4834      	ldr	r0, [pc, #208]	@ (8017684 <_strtol_l.constprop.0+0xf0>)
 80175b4:	460d      	mov	r5, r1
 80175b6:	462a      	mov	r2, r5
 80175b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80175bc:	5d06      	ldrb	r6, [r0, r4]
 80175be:	f016 0608 	ands.w	r6, r6, #8
 80175c2:	d1f8      	bne.n	80175b6 <_strtol_l.constprop.0+0x22>
 80175c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80175c6:	d12d      	bne.n	8017624 <_strtol_l.constprop.0+0x90>
 80175c8:	782c      	ldrb	r4, [r5, #0]
 80175ca:	2601      	movs	r6, #1
 80175cc:	1c95      	adds	r5, r2, #2
 80175ce:	f033 0210 	bics.w	r2, r3, #16
 80175d2:	d109      	bne.n	80175e8 <_strtol_l.constprop.0+0x54>
 80175d4:	2c30      	cmp	r4, #48	@ 0x30
 80175d6:	d12a      	bne.n	801762e <_strtol_l.constprop.0+0x9a>
 80175d8:	782a      	ldrb	r2, [r5, #0]
 80175da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80175de:	2a58      	cmp	r2, #88	@ 0x58
 80175e0:	d125      	bne.n	801762e <_strtol_l.constprop.0+0x9a>
 80175e2:	786c      	ldrb	r4, [r5, #1]
 80175e4:	2310      	movs	r3, #16
 80175e6:	3502      	adds	r5, #2
 80175e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80175ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80175f0:	2200      	movs	r2, #0
 80175f2:	fbbc f9f3 	udiv	r9, ip, r3
 80175f6:	4610      	mov	r0, r2
 80175f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80175fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8017600:	2f09      	cmp	r7, #9
 8017602:	d81b      	bhi.n	801763c <_strtol_l.constprop.0+0xa8>
 8017604:	463c      	mov	r4, r7
 8017606:	42a3      	cmp	r3, r4
 8017608:	dd27      	ble.n	801765a <_strtol_l.constprop.0+0xc6>
 801760a:	1c57      	adds	r7, r2, #1
 801760c:	d007      	beq.n	801761e <_strtol_l.constprop.0+0x8a>
 801760e:	4581      	cmp	r9, r0
 8017610:	d320      	bcc.n	8017654 <_strtol_l.constprop.0+0xc0>
 8017612:	d101      	bne.n	8017618 <_strtol_l.constprop.0+0x84>
 8017614:	45a2      	cmp	sl, r4
 8017616:	db1d      	blt.n	8017654 <_strtol_l.constprop.0+0xc0>
 8017618:	fb00 4003 	mla	r0, r0, r3, r4
 801761c:	2201      	movs	r2, #1
 801761e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017622:	e7eb      	b.n	80175fc <_strtol_l.constprop.0+0x68>
 8017624:	2c2b      	cmp	r4, #43	@ 0x2b
 8017626:	bf04      	itt	eq
 8017628:	782c      	ldrbeq	r4, [r5, #0]
 801762a:	1c95      	addeq	r5, r2, #2
 801762c:	e7cf      	b.n	80175ce <_strtol_l.constprop.0+0x3a>
 801762e:	2b00      	cmp	r3, #0
 8017630:	d1da      	bne.n	80175e8 <_strtol_l.constprop.0+0x54>
 8017632:	2c30      	cmp	r4, #48	@ 0x30
 8017634:	bf0c      	ite	eq
 8017636:	2308      	moveq	r3, #8
 8017638:	230a      	movne	r3, #10
 801763a:	e7d5      	b.n	80175e8 <_strtol_l.constprop.0+0x54>
 801763c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8017640:	2f19      	cmp	r7, #25
 8017642:	d801      	bhi.n	8017648 <_strtol_l.constprop.0+0xb4>
 8017644:	3c37      	subs	r4, #55	@ 0x37
 8017646:	e7de      	b.n	8017606 <_strtol_l.constprop.0+0x72>
 8017648:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801764c:	2f19      	cmp	r7, #25
 801764e:	d804      	bhi.n	801765a <_strtol_l.constprop.0+0xc6>
 8017650:	3c57      	subs	r4, #87	@ 0x57
 8017652:	e7d8      	b.n	8017606 <_strtol_l.constprop.0+0x72>
 8017654:	f04f 32ff 	mov.w	r2, #4294967295
 8017658:	e7e1      	b.n	801761e <_strtol_l.constprop.0+0x8a>
 801765a:	1c53      	adds	r3, r2, #1
 801765c:	d108      	bne.n	8017670 <_strtol_l.constprop.0+0xdc>
 801765e:	2322      	movs	r3, #34	@ 0x22
 8017660:	f8ce 3000 	str.w	r3, [lr]
 8017664:	4660      	mov	r0, ip
 8017666:	f1b8 0f00 	cmp.w	r8, #0
 801766a:	d0a0      	beq.n	80175ae <_strtol_l.constprop.0+0x1a>
 801766c:	1e69      	subs	r1, r5, #1
 801766e:	e006      	b.n	801767e <_strtol_l.constprop.0+0xea>
 8017670:	b106      	cbz	r6, 8017674 <_strtol_l.constprop.0+0xe0>
 8017672:	4240      	negs	r0, r0
 8017674:	f1b8 0f00 	cmp.w	r8, #0
 8017678:	d099      	beq.n	80175ae <_strtol_l.constprop.0+0x1a>
 801767a:	2a00      	cmp	r2, #0
 801767c:	d1f6      	bne.n	801766c <_strtol_l.constprop.0+0xd8>
 801767e:	f8c8 1000 	str.w	r1, [r8]
 8017682:	e794      	b.n	80175ae <_strtol_l.constprop.0+0x1a>
 8017684:	08019a99 	.word	0x08019a99

08017688 <strtol>:
 8017688:	4613      	mov	r3, r2
 801768a:	460a      	mov	r2, r1
 801768c:	4601      	mov	r1, r0
 801768e:	4802      	ldr	r0, [pc, #8]	@ (8017698 <strtol+0x10>)
 8017690:	6800      	ldr	r0, [r0, #0]
 8017692:	f7ff bf7f 	b.w	8017594 <_strtol_l.constprop.0>
 8017696:	bf00      	nop
 8017698:	24000240 	.word	0x24000240

0801769c <std>:
 801769c:	2300      	movs	r3, #0
 801769e:	b510      	push	{r4, lr}
 80176a0:	4604      	mov	r4, r0
 80176a2:	e9c0 3300 	strd	r3, r3, [r0]
 80176a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80176aa:	6083      	str	r3, [r0, #8]
 80176ac:	8181      	strh	r1, [r0, #12]
 80176ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80176b0:	81c2      	strh	r2, [r0, #14]
 80176b2:	6183      	str	r3, [r0, #24]
 80176b4:	4619      	mov	r1, r3
 80176b6:	2208      	movs	r2, #8
 80176b8:	305c      	adds	r0, #92	@ 0x5c
 80176ba:	f000 f8f4 	bl	80178a6 <memset>
 80176be:	4b0d      	ldr	r3, [pc, #52]	@ (80176f4 <std+0x58>)
 80176c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80176c2:	4b0d      	ldr	r3, [pc, #52]	@ (80176f8 <std+0x5c>)
 80176c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80176c6:	4b0d      	ldr	r3, [pc, #52]	@ (80176fc <std+0x60>)
 80176c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80176ca:	4b0d      	ldr	r3, [pc, #52]	@ (8017700 <std+0x64>)
 80176cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80176ce:	4b0d      	ldr	r3, [pc, #52]	@ (8017704 <std+0x68>)
 80176d0:	6224      	str	r4, [r4, #32]
 80176d2:	429c      	cmp	r4, r3
 80176d4:	d006      	beq.n	80176e4 <std+0x48>
 80176d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80176da:	4294      	cmp	r4, r2
 80176dc:	d002      	beq.n	80176e4 <std+0x48>
 80176de:	33d0      	adds	r3, #208	@ 0xd0
 80176e0:	429c      	cmp	r4, r3
 80176e2:	d105      	bne.n	80176f0 <std+0x54>
 80176e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80176e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80176ec:	f000 b972 	b.w	80179d4 <__retarget_lock_init_recursive>
 80176f0:	bd10      	pop	{r4, pc}
 80176f2:	bf00      	nop
 80176f4:	08017821 	.word	0x08017821
 80176f8:	08017843 	.word	0x08017843
 80176fc:	0801787b 	.word	0x0801787b
 8017700:	0801789f 	.word	0x0801789f
 8017704:	240066e8 	.word	0x240066e8

08017708 <stdio_exit_handler>:
 8017708:	4a02      	ldr	r2, [pc, #8]	@ (8017714 <stdio_exit_handler+0xc>)
 801770a:	4903      	ldr	r1, [pc, #12]	@ (8017718 <stdio_exit_handler+0x10>)
 801770c:	4803      	ldr	r0, [pc, #12]	@ (801771c <stdio_exit_handler+0x14>)
 801770e:	f000 b869 	b.w	80177e4 <_fwalk_sglue>
 8017712:	bf00      	nop
 8017714:	240000c8 	.word	0x240000c8
 8017718:	08018d11 	.word	0x08018d11
 801771c:	24000244 	.word	0x24000244

08017720 <cleanup_stdio>:
 8017720:	6841      	ldr	r1, [r0, #4]
 8017722:	4b0c      	ldr	r3, [pc, #48]	@ (8017754 <cleanup_stdio+0x34>)
 8017724:	4299      	cmp	r1, r3
 8017726:	b510      	push	{r4, lr}
 8017728:	4604      	mov	r4, r0
 801772a:	d001      	beq.n	8017730 <cleanup_stdio+0x10>
 801772c:	f001 faf0 	bl	8018d10 <_fflush_r>
 8017730:	68a1      	ldr	r1, [r4, #8]
 8017732:	4b09      	ldr	r3, [pc, #36]	@ (8017758 <cleanup_stdio+0x38>)
 8017734:	4299      	cmp	r1, r3
 8017736:	d002      	beq.n	801773e <cleanup_stdio+0x1e>
 8017738:	4620      	mov	r0, r4
 801773a:	f001 fae9 	bl	8018d10 <_fflush_r>
 801773e:	68e1      	ldr	r1, [r4, #12]
 8017740:	4b06      	ldr	r3, [pc, #24]	@ (801775c <cleanup_stdio+0x3c>)
 8017742:	4299      	cmp	r1, r3
 8017744:	d004      	beq.n	8017750 <cleanup_stdio+0x30>
 8017746:	4620      	mov	r0, r4
 8017748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801774c:	f001 bae0 	b.w	8018d10 <_fflush_r>
 8017750:	bd10      	pop	{r4, pc}
 8017752:	bf00      	nop
 8017754:	240066e8 	.word	0x240066e8
 8017758:	24006750 	.word	0x24006750
 801775c:	240067b8 	.word	0x240067b8

08017760 <global_stdio_init.part.0>:
 8017760:	b510      	push	{r4, lr}
 8017762:	4b0b      	ldr	r3, [pc, #44]	@ (8017790 <global_stdio_init.part.0+0x30>)
 8017764:	4c0b      	ldr	r4, [pc, #44]	@ (8017794 <global_stdio_init.part.0+0x34>)
 8017766:	4a0c      	ldr	r2, [pc, #48]	@ (8017798 <global_stdio_init.part.0+0x38>)
 8017768:	601a      	str	r2, [r3, #0]
 801776a:	4620      	mov	r0, r4
 801776c:	2200      	movs	r2, #0
 801776e:	2104      	movs	r1, #4
 8017770:	f7ff ff94 	bl	801769c <std>
 8017774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017778:	2201      	movs	r2, #1
 801777a:	2109      	movs	r1, #9
 801777c:	f7ff ff8e 	bl	801769c <std>
 8017780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017784:	2202      	movs	r2, #2
 8017786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801778a:	2112      	movs	r1, #18
 801778c:	f7ff bf86 	b.w	801769c <std>
 8017790:	24006820 	.word	0x24006820
 8017794:	240066e8 	.word	0x240066e8
 8017798:	08017709 	.word	0x08017709

0801779c <__sfp_lock_acquire>:
 801779c:	4801      	ldr	r0, [pc, #4]	@ (80177a4 <__sfp_lock_acquire+0x8>)
 801779e:	f000 b91a 	b.w	80179d6 <__retarget_lock_acquire_recursive>
 80177a2:	bf00      	nop
 80177a4:	24006829 	.word	0x24006829

080177a8 <__sfp_lock_release>:
 80177a8:	4801      	ldr	r0, [pc, #4]	@ (80177b0 <__sfp_lock_release+0x8>)
 80177aa:	f000 b915 	b.w	80179d8 <__retarget_lock_release_recursive>
 80177ae:	bf00      	nop
 80177b0:	24006829 	.word	0x24006829

080177b4 <__sinit>:
 80177b4:	b510      	push	{r4, lr}
 80177b6:	4604      	mov	r4, r0
 80177b8:	f7ff fff0 	bl	801779c <__sfp_lock_acquire>
 80177bc:	6a23      	ldr	r3, [r4, #32]
 80177be:	b11b      	cbz	r3, 80177c8 <__sinit+0x14>
 80177c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177c4:	f7ff bff0 	b.w	80177a8 <__sfp_lock_release>
 80177c8:	4b04      	ldr	r3, [pc, #16]	@ (80177dc <__sinit+0x28>)
 80177ca:	6223      	str	r3, [r4, #32]
 80177cc:	4b04      	ldr	r3, [pc, #16]	@ (80177e0 <__sinit+0x2c>)
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d1f5      	bne.n	80177c0 <__sinit+0xc>
 80177d4:	f7ff ffc4 	bl	8017760 <global_stdio_init.part.0>
 80177d8:	e7f2      	b.n	80177c0 <__sinit+0xc>
 80177da:	bf00      	nop
 80177dc:	08017721 	.word	0x08017721
 80177e0:	24006820 	.word	0x24006820

080177e4 <_fwalk_sglue>:
 80177e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177e8:	4607      	mov	r7, r0
 80177ea:	4688      	mov	r8, r1
 80177ec:	4614      	mov	r4, r2
 80177ee:	2600      	movs	r6, #0
 80177f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80177f4:	f1b9 0901 	subs.w	r9, r9, #1
 80177f8:	d505      	bpl.n	8017806 <_fwalk_sglue+0x22>
 80177fa:	6824      	ldr	r4, [r4, #0]
 80177fc:	2c00      	cmp	r4, #0
 80177fe:	d1f7      	bne.n	80177f0 <_fwalk_sglue+0xc>
 8017800:	4630      	mov	r0, r6
 8017802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017806:	89ab      	ldrh	r3, [r5, #12]
 8017808:	2b01      	cmp	r3, #1
 801780a:	d907      	bls.n	801781c <_fwalk_sglue+0x38>
 801780c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017810:	3301      	adds	r3, #1
 8017812:	d003      	beq.n	801781c <_fwalk_sglue+0x38>
 8017814:	4629      	mov	r1, r5
 8017816:	4638      	mov	r0, r7
 8017818:	47c0      	blx	r8
 801781a:	4306      	orrs	r6, r0
 801781c:	3568      	adds	r5, #104	@ 0x68
 801781e:	e7e9      	b.n	80177f4 <_fwalk_sglue+0x10>

08017820 <__sread>:
 8017820:	b510      	push	{r4, lr}
 8017822:	460c      	mov	r4, r1
 8017824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017828:	f000 f886 	bl	8017938 <_read_r>
 801782c:	2800      	cmp	r0, #0
 801782e:	bfab      	itete	ge
 8017830:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017832:	89a3      	ldrhlt	r3, [r4, #12]
 8017834:	181b      	addge	r3, r3, r0
 8017836:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801783a:	bfac      	ite	ge
 801783c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801783e:	81a3      	strhlt	r3, [r4, #12]
 8017840:	bd10      	pop	{r4, pc}

08017842 <__swrite>:
 8017842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017846:	461f      	mov	r7, r3
 8017848:	898b      	ldrh	r3, [r1, #12]
 801784a:	05db      	lsls	r3, r3, #23
 801784c:	4605      	mov	r5, r0
 801784e:	460c      	mov	r4, r1
 8017850:	4616      	mov	r6, r2
 8017852:	d505      	bpl.n	8017860 <__swrite+0x1e>
 8017854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017858:	2302      	movs	r3, #2
 801785a:	2200      	movs	r2, #0
 801785c:	f000 f85a 	bl	8017914 <_lseek_r>
 8017860:	89a3      	ldrh	r3, [r4, #12]
 8017862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801786a:	81a3      	strh	r3, [r4, #12]
 801786c:	4632      	mov	r2, r6
 801786e:	463b      	mov	r3, r7
 8017870:	4628      	mov	r0, r5
 8017872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017876:	f000 b871 	b.w	801795c <_write_r>

0801787a <__sseek>:
 801787a:	b510      	push	{r4, lr}
 801787c:	460c      	mov	r4, r1
 801787e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017882:	f000 f847 	bl	8017914 <_lseek_r>
 8017886:	1c43      	adds	r3, r0, #1
 8017888:	89a3      	ldrh	r3, [r4, #12]
 801788a:	bf15      	itete	ne
 801788c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801788e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017896:	81a3      	strheq	r3, [r4, #12]
 8017898:	bf18      	it	ne
 801789a:	81a3      	strhne	r3, [r4, #12]
 801789c:	bd10      	pop	{r4, pc}

0801789e <__sclose>:
 801789e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178a2:	f000 b827 	b.w	80178f4 <_close_r>

080178a6 <memset>:
 80178a6:	4402      	add	r2, r0
 80178a8:	4603      	mov	r3, r0
 80178aa:	4293      	cmp	r3, r2
 80178ac:	d100      	bne.n	80178b0 <memset+0xa>
 80178ae:	4770      	bx	lr
 80178b0:	f803 1b01 	strb.w	r1, [r3], #1
 80178b4:	e7f9      	b.n	80178aa <memset+0x4>

080178b6 <strchr>:
 80178b6:	b2c9      	uxtb	r1, r1
 80178b8:	4603      	mov	r3, r0
 80178ba:	4618      	mov	r0, r3
 80178bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178c0:	b112      	cbz	r2, 80178c8 <strchr+0x12>
 80178c2:	428a      	cmp	r2, r1
 80178c4:	d1f9      	bne.n	80178ba <strchr+0x4>
 80178c6:	4770      	bx	lr
 80178c8:	2900      	cmp	r1, #0
 80178ca:	bf18      	it	ne
 80178cc:	2000      	movne	r0, #0
 80178ce:	4770      	bx	lr

080178d0 <strncmp>:
 80178d0:	b510      	push	{r4, lr}
 80178d2:	b16a      	cbz	r2, 80178f0 <strncmp+0x20>
 80178d4:	3901      	subs	r1, #1
 80178d6:	1884      	adds	r4, r0, r2
 80178d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80178e0:	429a      	cmp	r2, r3
 80178e2:	d103      	bne.n	80178ec <strncmp+0x1c>
 80178e4:	42a0      	cmp	r0, r4
 80178e6:	d001      	beq.n	80178ec <strncmp+0x1c>
 80178e8:	2a00      	cmp	r2, #0
 80178ea:	d1f5      	bne.n	80178d8 <strncmp+0x8>
 80178ec:	1ad0      	subs	r0, r2, r3
 80178ee:	bd10      	pop	{r4, pc}
 80178f0:	4610      	mov	r0, r2
 80178f2:	e7fc      	b.n	80178ee <strncmp+0x1e>

080178f4 <_close_r>:
 80178f4:	b538      	push	{r3, r4, r5, lr}
 80178f6:	4d06      	ldr	r5, [pc, #24]	@ (8017910 <_close_r+0x1c>)
 80178f8:	2300      	movs	r3, #0
 80178fa:	4604      	mov	r4, r0
 80178fc:	4608      	mov	r0, r1
 80178fe:	602b      	str	r3, [r5, #0]
 8017900:	f7eb fd1a 	bl	8003338 <_close>
 8017904:	1c43      	adds	r3, r0, #1
 8017906:	d102      	bne.n	801790e <_close_r+0x1a>
 8017908:	682b      	ldr	r3, [r5, #0]
 801790a:	b103      	cbz	r3, 801790e <_close_r+0x1a>
 801790c:	6023      	str	r3, [r4, #0]
 801790e:	bd38      	pop	{r3, r4, r5, pc}
 8017910:	24006824 	.word	0x24006824

08017914 <_lseek_r>:
 8017914:	b538      	push	{r3, r4, r5, lr}
 8017916:	4d07      	ldr	r5, [pc, #28]	@ (8017934 <_lseek_r+0x20>)
 8017918:	4604      	mov	r4, r0
 801791a:	4608      	mov	r0, r1
 801791c:	4611      	mov	r1, r2
 801791e:	2200      	movs	r2, #0
 8017920:	602a      	str	r2, [r5, #0]
 8017922:	461a      	mov	r2, r3
 8017924:	f7eb fd2f 	bl	8003386 <_lseek>
 8017928:	1c43      	adds	r3, r0, #1
 801792a:	d102      	bne.n	8017932 <_lseek_r+0x1e>
 801792c:	682b      	ldr	r3, [r5, #0]
 801792e:	b103      	cbz	r3, 8017932 <_lseek_r+0x1e>
 8017930:	6023      	str	r3, [r4, #0]
 8017932:	bd38      	pop	{r3, r4, r5, pc}
 8017934:	24006824 	.word	0x24006824

08017938 <_read_r>:
 8017938:	b538      	push	{r3, r4, r5, lr}
 801793a:	4d07      	ldr	r5, [pc, #28]	@ (8017958 <_read_r+0x20>)
 801793c:	4604      	mov	r4, r0
 801793e:	4608      	mov	r0, r1
 8017940:	4611      	mov	r1, r2
 8017942:	2200      	movs	r2, #0
 8017944:	602a      	str	r2, [r5, #0]
 8017946:	461a      	mov	r2, r3
 8017948:	f7eb fcbd 	bl	80032c6 <_read>
 801794c:	1c43      	adds	r3, r0, #1
 801794e:	d102      	bne.n	8017956 <_read_r+0x1e>
 8017950:	682b      	ldr	r3, [r5, #0]
 8017952:	b103      	cbz	r3, 8017956 <_read_r+0x1e>
 8017954:	6023      	str	r3, [r4, #0]
 8017956:	bd38      	pop	{r3, r4, r5, pc}
 8017958:	24006824 	.word	0x24006824

0801795c <_write_r>:
 801795c:	b538      	push	{r3, r4, r5, lr}
 801795e:	4d07      	ldr	r5, [pc, #28]	@ (801797c <_write_r+0x20>)
 8017960:	4604      	mov	r4, r0
 8017962:	4608      	mov	r0, r1
 8017964:	4611      	mov	r1, r2
 8017966:	2200      	movs	r2, #0
 8017968:	602a      	str	r2, [r5, #0]
 801796a:	461a      	mov	r2, r3
 801796c:	f7eb fcc8 	bl	8003300 <_write>
 8017970:	1c43      	adds	r3, r0, #1
 8017972:	d102      	bne.n	801797a <_write_r+0x1e>
 8017974:	682b      	ldr	r3, [r5, #0]
 8017976:	b103      	cbz	r3, 801797a <_write_r+0x1e>
 8017978:	6023      	str	r3, [r4, #0]
 801797a:	bd38      	pop	{r3, r4, r5, pc}
 801797c:	24006824 	.word	0x24006824

08017980 <__errno>:
 8017980:	4b01      	ldr	r3, [pc, #4]	@ (8017988 <__errno+0x8>)
 8017982:	6818      	ldr	r0, [r3, #0]
 8017984:	4770      	bx	lr
 8017986:	bf00      	nop
 8017988:	24000240 	.word	0x24000240

0801798c <__libc_init_array>:
 801798c:	b570      	push	{r4, r5, r6, lr}
 801798e:	4d0d      	ldr	r5, [pc, #52]	@ (80179c4 <__libc_init_array+0x38>)
 8017990:	4c0d      	ldr	r4, [pc, #52]	@ (80179c8 <__libc_init_array+0x3c>)
 8017992:	1b64      	subs	r4, r4, r5
 8017994:	10a4      	asrs	r4, r4, #2
 8017996:	2600      	movs	r6, #0
 8017998:	42a6      	cmp	r6, r4
 801799a:	d109      	bne.n	80179b0 <__libc_init_array+0x24>
 801799c:	4d0b      	ldr	r5, [pc, #44]	@ (80179cc <__libc_init_array+0x40>)
 801799e:	4c0c      	ldr	r4, [pc, #48]	@ (80179d0 <__libc_init_array+0x44>)
 80179a0:	f001 ff9a 	bl	80198d8 <_init>
 80179a4:	1b64      	subs	r4, r4, r5
 80179a6:	10a4      	asrs	r4, r4, #2
 80179a8:	2600      	movs	r6, #0
 80179aa:	42a6      	cmp	r6, r4
 80179ac:	d105      	bne.n	80179ba <__libc_init_array+0x2e>
 80179ae:	bd70      	pop	{r4, r5, r6, pc}
 80179b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80179b4:	4798      	blx	r3
 80179b6:	3601      	adds	r6, #1
 80179b8:	e7ee      	b.n	8017998 <__libc_init_array+0xc>
 80179ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80179be:	4798      	blx	r3
 80179c0:	3601      	adds	r6, #1
 80179c2:	e7f2      	b.n	80179aa <__libc_init_array+0x1e>
 80179c4:	0801a688 	.word	0x0801a688
 80179c8:	0801a688 	.word	0x0801a688
 80179cc:	0801a688 	.word	0x0801a688
 80179d0:	0801a68c 	.word	0x0801a68c

080179d4 <__retarget_lock_init_recursive>:
 80179d4:	4770      	bx	lr

080179d6 <__retarget_lock_acquire_recursive>:
 80179d6:	4770      	bx	lr

080179d8 <__retarget_lock_release_recursive>:
 80179d8:	4770      	bx	lr

080179da <memcpy>:
 80179da:	440a      	add	r2, r1
 80179dc:	4291      	cmp	r1, r2
 80179de:	f100 33ff 	add.w	r3, r0, #4294967295
 80179e2:	d100      	bne.n	80179e6 <memcpy+0xc>
 80179e4:	4770      	bx	lr
 80179e6:	b510      	push	{r4, lr}
 80179e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80179ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80179f0:	4291      	cmp	r1, r2
 80179f2:	d1f9      	bne.n	80179e8 <memcpy+0xe>
 80179f4:	bd10      	pop	{r4, pc}
	...

080179f8 <nan>:
 80179f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017a00 <nan+0x8>
 80179fc:	4770      	bx	lr
 80179fe:	bf00      	nop
 8017a00:	00000000 	.word	0x00000000
 8017a04:	7ff80000 	.word	0x7ff80000

08017a08 <_free_r>:
 8017a08:	b538      	push	{r3, r4, r5, lr}
 8017a0a:	4605      	mov	r5, r0
 8017a0c:	2900      	cmp	r1, #0
 8017a0e:	d041      	beq.n	8017a94 <_free_r+0x8c>
 8017a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a14:	1f0c      	subs	r4, r1, #4
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	bfb8      	it	lt
 8017a1a:	18e4      	addlt	r4, r4, r3
 8017a1c:	f000 fc2c 	bl	8018278 <__malloc_lock>
 8017a20:	4a1d      	ldr	r2, [pc, #116]	@ (8017a98 <_free_r+0x90>)
 8017a22:	6813      	ldr	r3, [r2, #0]
 8017a24:	b933      	cbnz	r3, 8017a34 <_free_r+0x2c>
 8017a26:	6063      	str	r3, [r4, #4]
 8017a28:	6014      	str	r4, [r2, #0]
 8017a2a:	4628      	mov	r0, r5
 8017a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a30:	f000 bc28 	b.w	8018284 <__malloc_unlock>
 8017a34:	42a3      	cmp	r3, r4
 8017a36:	d908      	bls.n	8017a4a <_free_r+0x42>
 8017a38:	6820      	ldr	r0, [r4, #0]
 8017a3a:	1821      	adds	r1, r4, r0
 8017a3c:	428b      	cmp	r3, r1
 8017a3e:	bf01      	itttt	eq
 8017a40:	6819      	ldreq	r1, [r3, #0]
 8017a42:	685b      	ldreq	r3, [r3, #4]
 8017a44:	1809      	addeq	r1, r1, r0
 8017a46:	6021      	streq	r1, [r4, #0]
 8017a48:	e7ed      	b.n	8017a26 <_free_r+0x1e>
 8017a4a:	461a      	mov	r2, r3
 8017a4c:	685b      	ldr	r3, [r3, #4]
 8017a4e:	b10b      	cbz	r3, 8017a54 <_free_r+0x4c>
 8017a50:	42a3      	cmp	r3, r4
 8017a52:	d9fa      	bls.n	8017a4a <_free_r+0x42>
 8017a54:	6811      	ldr	r1, [r2, #0]
 8017a56:	1850      	adds	r0, r2, r1
 8017a58:	42a0      	cmp	r0, r4
 8017a5a:	d10b      	bne.n	8017a74 <_free_r+0x6c>
 8017a5c:	6820      	ldr	r0, [r4, #0]
 8017a5e:	4401      	add	r1, r0
 8017a60:	1850      	adds	r0, r2, r1
 8017a62:	4283      	cmp	r3, r0
 8017a64:	6011      	str	r1, [r2, #0]
 8017a66:	d1e0      	bne.n	8017a2a <_free_r+0x22>
 8017a68:	6818      	ldr	r0, [r3, #0]
 8017a6a:	685b      	ldr	r3, [r3, #4]
 8017a6c:	6053      	str	r3, [r2, #4]
 8017a6e:	4408      	add	r0, r1
 8017a70:	6010      	str	r0, [r2, #0]
 8017a72:	e7da      	b.n	8017a2a <_free_r+0x22>
 8017a74:	d902      	bls.n	8017a7c <_free_r+0x74>
 8017a76:	230c      	movs	r3, #12
 8017a78:	602b      	str	r3, [r5, #0]
 8017a7a:	e7d6      	b.n	8017a2a <_free_r+0x22>
 8017a7c:	6820      	ldr	r0, [r4, #0]
 8017a7e:	1821      	adds	r1, r4, r0
 8017a80:	428b      	cmp	r3, r1
 8017a82:	bf04      	itt	eq
 8017a84:	6819      	ldreq	r1, [r3, #0]
 8017a86:	685b      	ldreq	r3, [r3, #4]
 8017a88:	6063      	str	r3, [r4, #4]
 8017a8a:	bf04      	itt	eq
 8017a8c:	1809      	addeq	r1, r1, r0
 8017a8e:	6021      	streq	r1, [r4, #0]
 8017a90:	6054      	str	r4, [r2, #4]
 8017a92:	e7ca      	b.n	8017a2a <_free_r+0x22>
 8017a94:	bd38      	pop	{r3, r4, r5, pc}
 8017a96:	bf00      	nop
 8017a98:	24006830 	.word	0x24006830

08017a9c <rshift>:
 8017a9c:	6903      	ldr	r3, [r0, #16]
 8017a9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017aa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017aa6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017aaa:	f100 0414 	add.w	r4, r0, #20
 8017aae:	dd45      	ble.n	8017b3c <rshift+0xa0>
 8017ab0:	f011 011f 	ands.w	r1, r1, #31
 8017ab4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017ab8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017abc:	d10c      	bne.n	8017ad8 <rshift+0x3c>
 8017abe:	f100 0710 	add.w	r7, r0, #16
 8017ac2:	4629      	mov	r1, r5
 8017ac4:	42b1      	cmp	r1, r6
 8017ac6:	d334      	bcc.n	8017b32 <rshift+0x96>
 8017ac8:	1a9b      	subs	r3, r3, r2
 8017aca:	009b      	lsls	r3, r3, #2
 8017acc:	1eea      	subs	r2, r5, #3
 8017ace:	4296      	cmp	r6, r2
 8017ad0:	bf38      	it	cc
 8017ad2:	2300      	movcc	r3, #0
 8017ad4:	4423      	add	r3, r4
 8017ad6:	e015      	b.n	8017b04 <rshift+0x68>
 8017ad8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017adc:	f1c1 0820 	rsb	r8, r1, #32
 8017ae0:	40cf      	lsrs	r7, r1
 8017ae2:	f105 0e04 	add.w	lr, r5, #4
 8017ae6:	46a1      	mov	r9, r4
 8017ae8:	4576      	cmp	r6, lr
 8017aea:	46f4      	mov	ip, lr
 8017aec:	d815      	bhi.n	8017b1a <rshift+0x7e>
 8017aee:	1a9a      	subs	r2, r3, r2
 8017af0:	0092      	lsls	r2, r2, #2
 8017af2:	3a04      	subs	r2, #4
 8017af4:	3501      	adds	r5, #1
 8017af6:	42ae      	cmp	r6, r5
 8017af8:	bf38      	it	cc
 8017afa:	2200      	movcc	r2, #0
 8017afc:	18a3      	adds	r3, r4, r2
 8017afe:	50a7      	str	r7, [r4, r2]
 8017b00:	b107      	cbz	r7, 8017b04 <rshift+0x68>
 8017b02:	3304      	adds	r3, #4
 8017b04:	1b1a      	subs	r2, r3, r4
 8017b06:	42a3      	cmp	r3, r4
 8017b08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017b0c:	bf08      	it	eq
 8017b0e:	2300      	moveq	r3, #0
 8017b10:	6102      	str	r2, [r0, #16]
 8017b12:	bf08      	it	eq
 8017b14:	6143      	streq	r3, [r0, #20]
 8017b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b1a:	f8dc c000 	ldr.w	ip, [ip]
 8017b1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8017b22:	ea4c 0707 	orr.w	r7, ip, r7
 8017b26:	f849 7b04 	str.w	r7, [r9], #4
 8017b2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017b2e:	40cf      	lsrs	r7, r1
 8017b30:	e7da      	b.n	8017ae8 <rshift+0x4c>
 8017b32:	f851 cb04 	ldr.w	ip, [r1], #4
 8017b36:	f847 cf04 	str.w	ip, [r7, #4]!
 8017b3a:	e7c3      	b.n	8017ac4 <rshift+0x28>
 8017b3c:	4623      	mov	r3, r4
 8017b3e:	e7e1      	b.n	8017b04 <rshift+0x68>

08017b40 <__hexdig_fun>:
 8017b40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017b44:	2b09      	cmp	r3, #9
 8017b46:	d802      	bhi.n	8017b4e <__hexdig_fun+0xe>
 8017b48:	3820      	subs	r0, #32
 8017b4a:	b2c0      	uxtb	r0, r0
 8017b4c:	4770      	bx	lr
 8017b4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017b52:	2b05      	cmp	r3, #5
 8017b54:	d801      	bhi.n	8017b5a <__hexdig_fun+0x1a>
 8017b56:	3847      	subs	r0, #71	@ 0x47
 8017b58:	e7f7      	b.n	8017b4a <__hexdig_fun+0xa>
 8017b5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017b5e:	2b05      	cmp	r3, #5
 8017b60:	d801      	bhi.n	8017b66 <__hexdig_fun+0x26>
 8017b62:	3827      	subs	r0, #39	@ 0x27
 8017b64:	e7f1      	b.n	8017b4a <__hexdig_fun+0xa>
 8017b66:	2000      	movs	r0, #0
 8017b68:	4770      	bx	lr
	...

08017b6c <__gethex>:
 8017b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b70:	b085      	sub	sp, #20
 8017b72:	468a      	mov	sl, r1
 8017b74:	9302      	str	r3, [sp, #8]
 8017b76:	680b      	ldr	r3, [r1, #0]
 8017b78:	9001      	str	r0, [sp, #4]
 8017b7a:	4690      	mov	r8, r2
 8017b7c:	1c9c      	adds	r4, r3, #2
 8017b7e:	46a1      	mov	r9, r4
 8017b80:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017b84:	2830      	cmp	r0, #48	@ 0x30
 8017b86:	d0fa      	beq.n	8017b7e <__gethex+0x12>
 8017b88:	eba9 0303 	sub.w	r3, r9, r3
 8017b8c:	f1a3 0b02 	sub.w	fp, r3, #2
 8017b90:	f7ff ffd6 	bl	8017b40 <__hexdig_fun>
 8017b94:	4605      	mov	r5, r0
 8017b96:	2800      	cmp	r0, #0
 8017b98:	d168      	bne.n	8017c6c <__gethex+0x100>
 8017b9a:	49a0      	ldr	r1, [pc, #640]	@ (8017e1c <__gethex+0x2b0>)
 8017b9c:	2201      	movs	r2, #1
 8017b9e:	4648      	mov	r0, r9
 8017ba0:	f7ff fe96 	bl	80178d0 <strncmp>
 8017ba4:	4607      	mov	r7, r0
 8017ba6:	2800      	cmp	r0, #0
 8017ba8:	d167      	bne.n	8017c7a <__gethex+0x10e>
 8017baa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017bae:	4626      	mov	r6, r4
 8017bb0:	f7ff ffc6 	bl	8017b40 <__hexdig_fun>
 8017bb4:	2800      	cmp	r0, #0
 8017bb6:	d062      	beq.n	8017c7e <__gethex+0x112>
 8017bb8:	4623      	mov	r3, r4
 8017bba:	7818      	ldrb	r0, [r3, #0]
 8017bbc:	2830      	cmp	r0, #48	@ 0x30
 8017bbe:	4699      	mov	r9, r3
 8017bc0:	f103 0301 	add.w	r3, r3, #1
 8017bc4:	d0f9      	beq.n	8017bba <__gethex+0x4e>
 8017bc6:	f7ff ffbb 	bl	8017b40 <__hexdig_fun>
 8017bca:	fab0 f580 	clz	r5, r0
 8017bce:	096d      	lsrs	r5, r5, #5
 8017bd0:	f04f 0b01 	mov.w	fp, #1
 8017bd4:	464a      	mov	r2, r9
 8017bd6:	4616      	mov	r6, r2
 8017bd8:	3201      	adds	r2, #1
 8017bda:	7830      	ldrb	r0, [r6, #0]
 8017bdc:	f7ff ffb0 	bl	8017b40 <__hexdig_fun>
 8017be0:	2800      	cmp	r0, #0
 8017be2:	d1f8      	bne.n	8017bd6 <__gethex+0x6a>
 8017be4:	498d      	ldr	r1, [pc, #564]	@ (8017e1c <__gethex+0x2b0>)
 8017be6:	2201      	movs	r2, #1
 8017be8:	4630      	mov	r0, r6
 8017bea:	f7ff fe71 	bl	80178d0 <strncmp>
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	d13f      	bne.n	8017c72 <__gethex+0x106>
 8017bf2:	b944      	cbnz	r4, 8017c06 <__gethex+0x9a>
 8017bf4:	1c74      	adds	r4, r6, #1
 8017bf6:	4622      	mov	r2, r4
 8017bf8:	4616      	mov	r6, r2
 8017bfa:	3201      	adds	r2, #1
 8017bfc:	7830      	ldrb	r0, [r6, #0]
 8017bfe:	f7ff ff9f 	bl	8017b40 <__hexdig_fun>
 8017c02:	2800      	cmp	r0, #0
 8017c04:	d1f8      	bne.n	8017bf8 <__gethex+0x8c>
 8017c06:	1ba4      	subs	r4, r4, r6
 8017c08:	00a7      	lsls	r7, r4, #2
 8017c0a:	7833      	ldrb	r3, [r6, #0]
 8017c0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017c10:	2b50      	cmp	r3, #80	@ 0x50
 8017c12:	d13e      	bne.n	8017c92 <__gethex+0x126>
 8017c14:	7873      	ldrb	r3, [r6, #1]
 8017c16:	2b2b      	cmp	r3, #43	@ 0x2b
 8017c18:	d033      	beq.n	8017c82 <__gethex+0x116>
 8017c1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8017c1c:	d034      	beq.n	8017c88 <__gethex+0x11c>
 8017c1e:	1c71      	adds	r1, r6, #1
 8017c20:	2400      	movs	r4, #0
 8017c22:	7808      	ldrb	r0, [r1, #0]
 8017c24:	f7ff ff8c 	bl	8017b40 <__hexdig_fun>
 8017c28:	1e43      	subs	r3, r0, #1
 8017c2a:	b2db      	uxtb	r3, r3
 8017c2c:	2b18      	cmp	r3, #24
 8017c2e:	d830      	bhi.n	8017c92 <__gethex+0x126>
 8017c30:	f1a0 0210 	sub.w	r2, r0, #16
 8017c34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017c38:	f7ff ff82 	bl	8017b40 <__hexdig_fun>
 8017c3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8017c40:	fa5f fc8c 	uxtb.w	ip, ip
 8017c44:	f1bc 0f18 	cmp.w	ip, #24
 8017c48:	f04f 030a 	mov.w	r3, #10
 8017c4c:	d91e      	bls.n	8017c8c <__gethex+0x120>
 8017c4e:	b104      	cbz	r4, 8017c52 <__gethex+0xe6>
 8017c50:	4252      	negs	r2, r2
 8017c52:	4417      	add	r7, r2
 8017c54:	f8ca 1000 	str.w	r1, [sl]
 8017c58:	b1ed      	cbz	r5, 8017c96 <__gethex+0x12a>
 8017c5a:	f1bb 0f00 	cmp.w	fp, #0
 8017c5e:	bf0c      	ite	eq
 8017c60:	2506      	moveq	r5, #6
 8017c62:	2500      	movne	r5, #0
 8017c64:	4628      	mov	r0, r5
 8017c66:	b005      	add	sp, #20
 8017c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c6c:	2500      	movs	r5, #0
 8017c6e:	462c      	mov	r4, r5
 8017c70:	e7b0      	b.n	8017bd4 <__gethex+0x68>
 8017c72:	2c00      	cmp	r4, #0
 8017c74:	d1c7      	bne.n	8017c06 <__gethex+0x9a>
 8017c76:	4627      	mov	r7, r4
 8017c78:	e7c7      	b.n	8017c0a <__gethex+0x9e>
 8017c7a:	464e      	mov	r6, r9
 8017c7c:	462f      	mov	r7, r5
 8017c7e:	2501      	movs	r5, #1
 8017c80:	e7c3      	b.n	8017c0a <__gethex+0x9e>
 8017c82:	2400      	movs	r4, #0
 8017c84:	1cb1      	adds	r1, r6, #2
 8017c86:	e7cc      	b.n	8017c22 <__gethex+0xb6>
 8017c88:	2401      	movs	r4, #1
 8017c8a:	e7fb      	b.n	8017c84 <__gethex+0x118>
 8017c8c:	fb03 0002 	mla	r0, r3, r2, r0
 8017c90:	e7ce      	b.n	8017c30 <__gethex+0xc4>
 8017c92:	4631      	mov	r1, r6
 8017c94:	e7de      	b.n	8017c54 <__gethex+0xe8>
 8017c96:	eba6 0309 	sub.w	r3, r6, r9
 8017c9a:	3b01      	subs	r3, #1
 8017c9c:	4629      	mov	r1, r5
 8017c9e:	2b07      	cmp	r3, #7
 8017ca0:	dc0a      	bgt.n	8017cb8 <__gethex+0x14c>
 8017ca2:	9801      	ldr	r0, [sp, #4]
 8017ca4:	f000 faf4 	bl	8018290 <_Balloc>
 8017ca8:	4604      	mov	r4, r0
 8017caa:	b940      	cbnz	r0, 8017cbe <__gethex+0x152>
 8017cac:	4b5c      	ldr	r3, [pc, #368]	@ (8017e20 <__gethex+0x2b4>)
 8017cae:	4602      	mov	r2, r0
 8017cb0:	21e4      	movs	r1, #228	@ 0xe4
 8017cb2:	485c      	ldr	r0, [pc, #368]	@ (8017e24 <__gethex+0x2b8>)
 8017cb4:	f001 f864 	bl	8018d80 <__assert_func>
 8017cb8:	3101      	adds	r1, #1
 8017cba:	105b      	asrs	r3, r3, #1
 8017cbc:	e7ef      	b.n	8017c9e <__gethex+0x132>
 8017cbe:	f100 0a14 	add.w	sl, r0, #20
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	4655      	mov	r5, sl
 8017cc6:	469b      	mov	fp, r3
 8017cc8:	45b1      	cmp	r9, r6
 8017cca:	d337      	bcc.n	8017d3c <__gethex+0x1d0>
 8017ccc:	f845 bb04 	str.w	fp, [r5], #4
 8017cd0:	eba5 050a 	sub.w	r5, r5, sl
 8017cd4:	10ad      	asrs	r5, r5, #2
 8017cd6:	6125      	str	r5, [r4, #16]
 8017cd8:	4658      	mov	r0, fp
 8017cda:	f000 fbcb 	bl	8018474 <__hi0bits>
 8017cde:	016d      	lsls	r5, r5, #5
 8017ce0:	f8d8 6000 	ldr.w	r6, [r8]
 8017ce4:	1a2d      	subs	r5, r5, r0
 8017ce6:	42b5      	cmp	r5, r6
 8017ce8:	dd54      	ble.n	8017d94 <__gethex+0x228>
 8017cea:	1bad      	subs	r5, r5, r6
 8017cec:	4629      	mov	r1, r5
 8017cee:	4620      	mov	r0, r4
 8017cf0:	f000 ff5c 	bl	8018bac <__any_on>
 8017cf4:	4681      	mov	r9, r0
 8017cf6:	b178      	cbz	r0, 8017d18 <__gethex+0x1ac>
 8017cf8:	1e6b      	subs	r3, r5, #1
 8017cfa:	1159      	asrs	r1, r3, #5
 8017cfc:	f003 021f 	and.w	r2, r3, #31
 8017d00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017d04:	f04f 0901 	mov.w	r9, #1
 8017d08:	fa09 f202 	lsl.w	r2, r9, r2
 8017d0c:	420a      	tst	r2, r1
 8017d0e:	d003      	beq.n	8017d18 <__gethex+0x1ac>
 8017d10:	454b      	cmp	r3, r9
 8017d12:	dc36      	bgt.n	8017d82 <__gethex+0x216>
 8017d14:	f04f 0902 	mov.w	r9, #2
 8017d18:	4629      	mov	r1, r5
 8017d1a:	4620      	mov	r0, r4
 8017d1c:	f7ff febe 	bl	8017a9c <rshift>
 8017d20:	442f      	add	r7, r5
 8017d22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017d26:	42bb      	cmp	r3, r7
 8017d28:	da42      	bge.n	8017db0 <__gethex+0x244>
 8017d2a:	9801      	ldr	r0, [sp, #4]
 8017d2c:	4621      	mov	r1, r4
 8017d2e:	f000 faef 	bl	8018310 <_Bfree>
 8017d32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017d34:	2300      	movs	r3, #0
 8017d36:	6013      	str	r3, [r2, #0]
 8017d38:	25a3      	movs	r5, #163	@ 0xa3
 8017d3a:	e793      	b.n	8017c64 <__gethex+0xf8>
 8017d3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017d40:	2a2e      	cmp	r2, #46	@ 0x2e
 8017d42:	d012      	beq.n	8017d6a <__gethex+0x1fe>
 8017d44:	2b20      	cmp	r3, #32
 8017d46:	d104      	bne.n	8017d52 <__gethex+0x1e6>
 8017d48:	f845 bb04 	str.w	fp, [r5], #4
 8017d4c:	f04f 0b00 	mov.w	fp, #0
 8017d50:	465b      	mov	r3, fp
 8017d52:	7830      	ldrb	r0, [r6, #0]
 8017d54:	9303      	str	r3, [sp, #12]
 8017d56:	f7ff fef3 	bl	8017b40 <__hexdig_fun>
 8017d5a:	9b03      	ldr	r3, [sp, #12]
 8017d5c:	f000 000f 	and.w	r0, r0, #15
 8017d60:	4098      	lsls	r0, r3
 8017d62:	ea4b 0b00 	orr.w	fp, fp, r0
 8017d66:	3304      	adds	r3, #4
 8017d68:	e7ae      	b.n	8017cc8 <__gethex+0x15c>
 8017d6a:	45b1      	cmp	r9, r6
 8017d6c:	d8ea      	bhi.n	8017d44 <__gethex+0x1d8>
 8017d6e:	492b      	ldr	r1, [pc, #172]	@ (8017e1c <__gethex+0x2b0>)
 8017d70:	9303      	str	r3, [sp, #12]
 8017d72:	2201      	movs	r2, #1
 8017d74:	4630      	mov	r0, r6
 8017d76:	f7ff fdab 	bl	80178d0 <strncmp>
 8017d7a:	9b03      	ldr	r3, [sp, #12]
 8017d7c:	2800      	cmp	r0, #0
 8017d7e:	d1e1      	bne.n	8017d44 <__gethex+0x1d8>
 8017d80:	e7a2      	b.n	8017cc8 <__gethex+0x15c>
 8017d82:	1ea9      	subs	r1, r5, #2
 8017d84:	4620      	mov	r0, r4
 8017d86:	f000 ff11 	bl	8018bac <__any_on>
 8017d8a:	2800      	cmp	r0, #0
 8017d8c:	d0c2      	beq.n	8017d14 <__gethex+0x1a8>
 8017d8e:	f04f 0903 	mov.w	r9, #3
 8017d92:	e7c1      	b.n	8017d18 <__gethex+0x1ac>
 8017d94:	da09      	bge.n	8017daa <__gethex+0x23e>
 8017d96:	1b75      	subs	r5, r6, r5
 8017d98:	4621      	mov	r1, r4
 8017d9a:	9801      	ldr	r0, [sp, #4]
 8017d9c:	462a      	mov	r2, r5
 8017d9e:	f000 fccf 	bl	8018740 <__lshift>
 8017da2:	1b7f      	subs	r7, r7, r5
 8017da4:	4604      	mov	r4, r0
 8017da6:	f100 0a14 	add.w	sl, r0, #20
 8017daa:	f04f 0900 	mov.w	r9, #0
 8017dae:	e7b8      	b.n	8017d22 <__gethex+0x1b6>
 8017db0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017db4:	42bd      	cmp	r5, r7
 8017db6:	dd6f      	ble.n	8017e98 <__gethex+0x32c>
 8017db8:	1bed      	subs	r5, r5, r7
 8017dba:	42ae      	cmp	r6, r5
 8017dbc:	dc34      	bgt.n	8017e28 <__gethex+0x2bc>
 8017dbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017dc2:	2b02      	cmp	r3, #2
 8017dc4:	d022      	beq.n	8017e0c <__gethex+0x2a0>
 8017dc6:	2b03      	cmp	r3, #3
 8017dc8:	d024      	beq.n	8017e14 <__gethex+0x2a8>
 8017dca:	2b01      	cmp	r3, #1
 8017dcc:	d115      	bne.n	8017dfa <__gethex+0x28e>
 8017dce:	42ae      	cmp	r6, r5
 8017dd0:	d113      	bne.n	8017dfa <__gethex+0x28e>
 8017dd2:	2e01      	cmp	r6, #1
 8017dd4:	d10b      	bne.n	8017dee <__gethex+0x282>
 8017dd6:	9a02      	ldr	r2, [sp, #8]
 8017dd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017ddc:	6013      	str	r3, [r2, #0]
 8017dde:	2301      	movs	r3, #1
 8017de0:	6123      	str	r3, [r4, #16]
 8017de2:	f8ca 3000 	str.w	r3, [sl]
 8017de6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017de8:	2562      	movs	r5, #98	@ 0x62
 8017dea:	601c      	str	r4, [r3, #0]
 8017dec:	e73a      	b.n	8017c64 <__gethex+0xf8>
 8017dee:	1e71      	subs	r1, r6, #1
 8017df0:	4620      	mov	r0, r4
 8017df2:	f000 fedb 	bl	8018bac <__any_on>
 8017df6:	2800      	cmp	r0, #0
 8017df8:	d1ed      	bne.n	8017dd6 <__gethex+0x26a>
 8017dfa:	9801      	ldr	r0, [sp, #4]
 8017dfc:	4621      	mov	r1, r4
 8017dfe:	f000 fa87 	bl	8018310 <_Bfree>
 8017e02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017e04:	2300      	movs	r3, #0
 8017e06:	6013      	str	r3, [r2, #0]
 8017e08:	2550      	movs	r5, #80	@ 0x50
 8017e0a:	e72b      	b.n	8017c64 <__gethex+0xf8>
 8017e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d1f3      	bne.n	8017dfa <__gethex+0x28e>
 8017e12:	e7e0      	b.n	8017dd6 <__gethex+0x26a>
 8017e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d1dd      	bne.n	8017dd6 <__gethex+0x26a>
 8017e1a:	e7ee      	b.n	8017dfa <__gethex+0x28e>
 8017e1c:	08019a34 	.word	0x08019a34
 8017e20:	08019ba1 	.word	0x08019ba1
 8017e24:	08019bb2 	.word	0x08019bb2
 8017e28:	1e6f      	subs	r7, r5, #1
 8017e2a:	f1b9 0f00 	cmp.w	r9, #0
 8017e2e:	d130      	bne.n	8017e92 <__gethex+0x326>
 8017e30:	b127      	cbz	r7, 8017e3c <__gethex+0x2d0>
 8017e32:	4639      	mov	r1, r7
 8017e34:	4620      	mov	r0, r4
 8017e36:	f000 feb9 	bl	8018bac <__any_on>
 8017e3a:	4681      	mov	r9, r0
 8017e3c:	117a      	asrs	r2, r7, #5
 8017e3e:	2301      	movs	r3, #1
 8017e40:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017e44:	f007 071f 	and.w	r7, r7, #31
 8017e48:	40bb      	lsls	r3, r7
 8017e4a:	4213      	tst	r3, r2
 8017e4c:	4629      	mov	r1, r5
 8017e4e:	4620      	mov	r0, r4
 8017e50:	bf18      	it	ne
 8017e52:	f049 0902 	orrne.w	r9, r9, #2
 8017e56:	f7ff fe21 	bl	8017a9c <rshift>
 8017e5a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017e5e:	1b76      	subs	r6, r6, r5
 8017e60:	2502      	movs	r5, #2
 8017e62:	f1b9 0f00 	cmp.w	r9, #0
 8017e66:	d047      	beq.n	8017ef8 <__gethex+0x38c>
 8017e68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017e6c:	2b02      	cmp	r3, #2
 8017e6e:	d015      	beq.n	8017e9c <__gethex+0x330>
 8017e70:	2b03      	cmp	r3, #3
 8017e72:	d017      	beq.n	8017ea4 <__gethex+0x338>
 8017e74:	2b01      	cmp	r3, #1
 8017e76:	d109      	bne.n	8017e8c <__gethex+0x320>
 8017e78:	f019 0f02 	tst.w	r9, #2
 8017e7c:	d006      	beq.n	8017e8c <__gethex+0x320>
 8017e7e:	f8da 3000 	ldr.w	r3, [sl]
 8017e82:	ea49 0903 	orr.w	r9, r9, r3
 8017e86:	f019 0f01 	tst.w	r9, #1
 8017e8a:	d10e      	bne.n	8017eaa <__gethex+0x33e>
 8017e8c:	f045 0510 	orr.w	r5, r5, #16
 8017e90:	e032      	b.n	8017ef8 <__gethex+0x38c>
 8017e92:	f04f 0901 	mov.w	r9, #1
 8017e96:	e7d1      	b.n	8017e3c <__gethex+0x2d0>
 8017e98:	2501      	movs	r5, #1
 8017e9a:	e7e2      	b.n	8017e62 <__gethex+0x2f6>
 8017e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e9e:	f1c3 0301 	rsb	r3, r3, #1
 8017ea2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d0f0      	beq.n	8017e8c <__gethex+0x320>
 8017eaa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017eae:	f104 0314 	add.w	r3, r4, #20
 8017eb2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017eb6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017eba:	f04f 0c00 	mov.w	ip, #0
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ec4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017ec8:	d01b      	beq.n	8017f02 <__gethex+0x396>
 8017eca:	3201      	adds	r2, #1
 8017ecc:	6002      	str	r2, [r0, #0]
 8017ece:	2d02      	cmp	r5, #2
 8017ed0:	f104 0314 	add.w	r3, r4, #20
 8017ed4:	d13c      	bne.n	8017f50 <__gethex+0x3e4>
 8017ed6:	f8d8 2000 	ldr.w	r2, [r8]
 8017eda:	3a01      	subs	r2, #1
 8017edc:	42b2      	cmp	r2, r6
 8017ede:	d109      	bne.n	8017ef4 <__gethex+0x388>
 8017ee0:	1171      	asrs	r1, r6, #5
 8017ee2:	2201      	movs	r2, #1
 8017ee4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017ee8:	f006 061f 	and.w	r6, r6, #31
 8017eec:	fa02 f606 	lsl.w	r6, r2, r6
 8017ef0:	421e      	tst	r6, r3
 8017ef2:	d13a      	bne.n	8017f6a <__gethex+0x3fe>
 8017ef4:	f045 0520 	orr.w	r5, r5, #32
 8017ef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017efa:	601c      	str	r4, [r3, #0]
 8017efc:	9b02      	ldr	r3, [sp, #8]
 8017efe:	601f      	str	r7, [r3, #0]
 8017f00:	e6b0      	b.n	8017c64 <__gethex+0xf8>
 8017f02:	4299      	cmp	r1, r3
 8017f04:	f843 cc04 	str.w	ip, [r3, #-4]
 8017f08:	d8d9      	bhi.n	8017ebe <__gethex+0x352>
 8017f0a:	68a3      	ldr	r3, [r4, #8]
 8017f0c:	459b      	cmp	fp, r3
 8017f0e:	db17      	blt.n	8017f40 <__gethex+0x3d4>
 8017f10:	6861      	ldr	r1, [r4, #4]
 8017f12:	9801      	ldr	r0, [sp, #4]
 8017f14:	3101      	adds	r1, #1
 8017f16:	f000 f9bb 	bl	8018290 <_Balloc>
 8017f1a:	4681      	mov	r9, r0
 8017f1c:	b918      	cbnz	r0, 8017f26 <__gethex+0x3ba>
 8017f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8017f88 <__gethex+0x41c>)
 8017f20:	4602      	mov	r2, r0
 8017f22:	2184      	movs	r1, #132	@ 0x84
 8017f24:	e6c5      	b.n	8017cb2 <__gethex+0x146>
 8017f26:	6922      	ldr	r2, [r4, #16]
 8017f28:	3202      	adds	r2, #2
 8017f2a:	f104 010c 	add.w	r1, r4, #12
 8017f2e:	0092      	lsls	r2, r2, #2
 8017f30:	300c      	adds	r0, #12
 8017f32:	f7ff fd52 	bl	80179da <memcpy>
 8017f36:	4621      	mov	r1, r4
 8017f38:	9801      	ldr	r0, [sp, #4]
 8017f3a:	f000 f9e9 	bl	8018310 <_Bfree>
 8017f3e:	464c      	mov	r4, r9
 8017f40:	6923      	ldr	r3, [r4, #16]
 8017f42:	1c5a      	adds	r2, r3, #1
 8017f44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017f48:	6122      	str	r2, [r4, #16]
 8017f4a:	2201      	movs	r2, #1
 8017f4c:	615a      	str	r2, [r3, #20]
 8017f4e:	e7be      	b.n	8017ece <__gethex+0x362>
 8017f50:	6922      	ldr	r2, [r4, #16]
 8017f52:	455a      	cmp	r2, fp
 8017f54:	dd0b      	ble.n	8017f6e <__gethex+0x402>
 8017f56:	2101      	movs	r1, #1
 8017f58:	4620      	mov	r0, r4
 8017f5a:	f7ff fd9f 	bl	8017a9c <rshift>
 8017f5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f62:	3701      	adds	r7, #1
 8017f64:	42bb      	cmp	r3, r7
 8017f66:	f6ff aee0 	blt.w	8017d2a <__gethex+0x1be>
 8017f6a:	2501      	movs	r5, #1
 8017f6c:	e7c2      	b.n	8017ef4 <__gethex+0x388>
 8017f6e:	f016 061f 	ands.w	r6, r6, #31
 8017f72:	d0fa      	beq.n	8017f6a <__gethex+0x3fe>
 8017f74:	4453      	add	r3, sl
 8017f76:	f1c6 0620 	rsb	r6, r6, #32
 8017f7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017f7e:	f000 fa79 	bl	8018474 <__hi0bits>
 8017f82:	42b0      	cmp	r0, r6
 8017f84:	dbe7      	blt.n	8017f56 <__gethex+0x3ea>
 8017f86:	e7f0      	b.n	8017f6a <__gethex+0x3fe>
 8017f88:	08019ba1 	.word	0x08019ba1

08017f8c <L_shift>:
 8017f8c:	f1c2 0208 	rsb	r2, r2, #8
 8017f90:	0092      	lsls	r2, r2, #2
 8017f92:	b570      	push	{r4, r5, r6, lr}
 8017f94:	f1c2 0620 	rsb	r6, r2, #32
 8017f98:	6843      	ldr	r3, [r0, #4]
 8017f9a:	6804      	ldr	r4, [r0, #0]
 8017f9c:	fa03 f506 	lsl.w	r5, r3, r6
 8017fa0:	432c      	orrs	r4, r5
 8017fa2:	40d3      	lsrs	r3, r2
 8017fa4:	6004      	str	r4, [r0, #0]
 8017fa6:	f840 3f04 	str.w	r3, [r0, #4]!
 8017faa:	4288      	cmp	r0, r1
 8017fac:	d3f4      	bcc.n	8017f98 <L_shift+0xc>
 8017fae:	bd70      	pop	{r4, r5, r6, pc}

08017fb0 <__match>:
 8017fb0:	b530      	push	{r4, r5, lr}
 8017fb2:	6803      	ldr	r3, [r0, #0]
 8017fb4:	3301      	adds	r3, #1
 8017fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017fba:	b914      	cbnz	r4, 8017fc2 <__match+0x12>
 8017fbc:	6003      	str	r3, [r0, #0]
 8017fbe:	2001      	movs	r0, #1
 8017fc0:	bd30      	pop	{r4, r5, pc}
 8017fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fc6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017fca:	2d19      	cmp	r5, #25
 8017fcc:	bf98      	it	ls
 8017fce:	3220      	addls	r2, #32
 8017fd0:	42a2      	cmp	r2, r4
 8017fd2:	d0f0      	beq.n	8017fb6 <__match+0x6>
 8017fd4:	2000      	movs	r0, #0
 8017fd6:	e7f3      	b.n	8017fc0 <__match+0x10>

08017fd8 <__hexnan>:
 8017fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fdc:	680b      	ldr	r3, [r1, #0]
 8017fde:	6801      	ldr	r1, [r0, #0]
 8017fe0:	115e      	asrs	r6, r3, #5
 8017fe2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017fe6:	f013 031f 	ands.w	r3, r3, #31
 8017fea:	b087      	sub	sp, #28
 8017fec:	bf18      	it	ne
 8017fee:	3604      	addne	r6, #4
 8017ff0:	2500      	movs	r5, #0
 8017ff2:	1f37      	subs	r7, r6, #4
 8017ff4:	4682      	mov	sl, r0
 8017ff6:	4690      	mov	r8, r2
 8017ff8:	9301      	str	r3, [sp, #4]
 8017ffa:	f846 5c04 	str.w	r5, [r6, #-4]
 8017ffe:	46b9      	mov	r9, r7
 8018000:	463c      	mov	r4, r7
 8018002:	9502      	str	r5, [sp, #8]
 8018004:	46ab      	mov	fp, r5
 8018006:	784a      	ldrb	r2, [r1, #1]
 8018008:	1c4b      	adds	r3, r1, #1
 801800a:	9303      	str	r3, [sp, #12]
 801800c:	b342      	cbz	r2, 8018060 <__hexnan+0x88>
 801800e:	4610      	mov	r0, r2
 8018010:	9105      	str	r1, [sp, #20]
 8018012:	9204      	str	r2, [sp, #16]
 8018014:	f7ff fd94 	bl	8017b40 <__hexdig_fun>
 8018018:	2800      	cmp	r0, #0
 801801a:	d151      	bne.n	80180c0 <__hexnan+0xe8>
 801801c:	9a04      	ldr	r2, [sp, #16]
 801801e:	9905      	ldr	r1, [sp, #20]
 8018020:	2a20      	cmp	r2, #32
 8018022:	d818      	bhi.n	8018056 <__hexnan+0x7e>
 8018024:	9b02      	ldr	r3, [sp, #8]
 8018026:	459b      	cmp	fp, r3
 8018028:	dd13      	ble.n	8018052 <__hexnan+0x7a>
 801802a:	454c      	cmp	r4, r9
 801802c:	d206      	bcs.n	801803c <__hexnan+0x64>
 801802e:	2d07      	cmp	r5, #7
 8018030:	dc04      	bgt.n	801803c <__hexnan+0x64>
 8018032:	462a      	mov	r2, r5
 8018034:	4649      	mov	r1, r9
 8018036:	4620      	mov	r0, r4
 8018038:	f7ff ffa8 	bl	8017f8c <L_shift>
 801803c:	4544      	cmp	r4, r8
 801803e:	d952      	bls.n	80180e6 <__hexnan+0x10e>
 8018040:	2300      	movs	r3, #0
 8018042:	f1a4 0904 	sub.w	r9, r4, #4
 8018046:	f844 3c04 	str.w	r3, [r4, #-4]
 801804a:	f8cd b008 	str.w	fp, [sp, #8]
 801804e:	464c      	mov	r4, r9
 8018050:	461d      	mov	r5, r3
 8018052:	9903      	ldr	r1, [sp, #12]
 8018054:	e7d7      	b.n	8018006 <__hexnan+0x2e>
 8018056:	2a29      	cmp	r2, #41	@ 0x29
 8018058:	d157      	bne.n	801810a <__hexnan+0x132>
 801805a:	3102      	adds	r1, #2
 801805c:	f8ca 1000 	str.w	r1, [sl]
 8018060:	f1bb 0f00 	cmp.w	fp, #0
 8018064:	d051      	beq.n	801810a <__hexnan+0x132>
 8018066:	454c      	cmp	r4, r9
 8018068:	d206      	bcs.n	8018078 <__hexnan+0xa0>
 801806a:	2d07      	cmp	r5, #7
 801806c:	dc04      	bgt.n	8018078 <__hexnan+0xa0>
 801806e:	462a      	mov	r2, r5
 8018070:	4649      	mov	r1, r9
 8018072:	4620      	mov	r0, r4
 8018074:	f7ff ff8a 	bl	8017f8c <L_shift>
 8018078:	4544      	cmp	r4, r8
 801807a:	d936      	bls.n	80180ea <__hexnan+0x112>
 801807c:	f1a8 0204 	sub.w	r2, r8, #4
 8018080:	4623      	mov	r3, r4
 8018082:	f853 1b04 	ldr.w	r1, [r3], #4
 8018086:	f842 1f04 	str.w	r1, [r2, #4]!
 801808a:	429f      	cmp	r7, r3
 801808c:	d2f9      	bcs.n	8018082 <__hexnan+0xaa>
 801808e:	1b3b      	subs	r3, r7, r4
 8018090:	f023 0303 	bic.w	r3, r3, #3
 8018094:	3304      	adds	r3, #4
 8018096:	3401      	adds	r4, #1
 8018098:	3e03      	subs	r6, #3
 801809a:	42b4      	cmp	r4, r6
 801809c:	bf88      	it	hi
 801809e:	2304      	movhi	r3, #4
 80180a0:	4443      	add	r3, r8
 80180a2:	2200      	movs	r2, #0
 80180a4:	f843 2b04 	str.w	r2, [r3], #4
 80180a8:	429f      	cmp	r7, r3
 80180aa:	d2fb      	bcs.n	80180a4 <__hexnan+0xcc>
 80180ac:	683b      	ldr	r3, [r7, #0]
 80180ae:	b91b      	cbnz	r3, 80180b8 <__hexnan+0xe0>
 80180b0:	4547      	cmp	r7, r8
 80180b2:	d128      	bne.n	8018106 <__hexnan+0x12e>
 80180b4:	2301      	movs	r3, #1
 80180b6:	603b      	str	r3, [r7, #0]
 80180b8:	2005      	movs	r0, #5
 80180ba:	b007      	add	sp, #28
 80180bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180c0:	3501      	adds	r5, #1
 80180c2:	2d08      	cmp	r5, #8
 80180c4:	f10b 0b01 	add.w	fp, fp, #1
 80180c8:	dd06      	ble.n	80180d8 <__hexnan+0x100>
 80180ca:	4544      	cmp	r4, r8
 80180cc:	d9c1      	bls.n	8018052 <__hexnan+0x7a>
 80180ce:	2300      	movs	r3, #0
 80180d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80180d4:	2501      	movs	r5, #1
 80180d6:	3c04      	subs	r4, #4
 80180d8:	6822      	ldr	r2, [r4, #0]
 80180da:	f000 000f 	and.w	r0, r0, #15
 80180de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80180e2:	6020      	str	r0, [r4, #0]
 80180e4:	e7b5      	b.n	8018052 <__hexnan+0x7a>
 80180e6:	2508      	movs	r5, #8
 80180e8:	e7b3      	b.n	8018052 <__hexnan+0x7a>
 80180ea:	9b01      	ldr	r3, [sp, #4]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d0dd      	beq.n	80180ac <__hexnan+0xd4>
 80180f0:	f1c3 0320 	rsb	r3, r3, #32
 80180f4:	f04f 32ff 	mov.w	r2, #4294967295
 80180f8:	40da      	lsrs	r2, r3
 80180fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80180fe:	4013      	ands	r3, r2
 8018100:	f846 3c04 	str.w	r3, [r6, #-4]
 8018104:	e7d2      	b.n	80180ac <__hexnan+0xd4>
 8018106:	3f04      	subs	r7, #4
 8018108:	e7d0      	b.n	80180ac <__hexnan+0xd4>
 801810a:	2004      	movs	r0, #4
 801810c:	e7d5      	b.n	80180ba <__hexnan+0xe2>
	...

08018110 <sbrk_aligned>:
 8018110:	b570      	push	{r4, r5, r6, lr}
 8018112:	4e0f      	ldr	r6, [pc, #60]	@ (8018150 <sbrk_aligned+0x40>)
 8018114:	460c      	mov	r4, r1
 8018116:	6831      	ldr	r1, [r6, #0]
 8018118:	4605      	mov	r5, r0
 801811a:	b911      	cbnz	r1, 8018122 <sbrk_aligned+0x12>
 801811c:	f000 fe20 	bl	8018d60 <_sbrk_r>
 8018120:	6030      	str	r0, [r6, #0]
 8018122:	4621      	mov	r1, r4
 8018124:	4628      	mov	r0, r5
 8018126:	f000 fe1b 	bl	8018d60 <_sbrk_r>
 801812a:	1c43      	adds	r3, r0, #1
 801812c:	d103      	bne.n	8018136 <sbrk_aligned+0x26>
 801812e:	f04f 34ff 	mov.w	r4, #4294967295
 8018132:	4620      	mov	r0, r4
 8018134:	bd70      	pop	{r4, r5, r6, pc}
 8018136:	1cc4      	adds	r4, r0, #3
 8018138:	f024 0403 	bic.w	r4, r4, #3
 801813c:	42a0      	cmp	r0, r4
 801813e:	d0f8      	beq.n	8018132 <sbrk_aligned+0x22>
 8018140:	1a21      	subs	r1, r4, r0
 8018142:	4628      	mov	r0, r5
 8018144:	f000 fe0c 	bl	8018d60 <_sbrk_r>
 8018148:	3001      	adds	r0, #1
 801814a:	d1f2      	bne.n	8018132 <sbrk_aligned+0x22>
 801814c:	e7ef      	b.n	801812e <sbrk_aligned+0x1e>
 801814e:	bf00      	nop
 8018150:	2400682c 	.word	0x2400682c

08018154 <_malloc_r>:
 8018154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018158:	1ccd      	adds	r5, r1, #3
 801815a:	f025 0503 	bic.w	r5, r5, #3
 801815e:	3508      	adds	r5, #8
 8018160:	2d0c      	cmp	r5, #12
 8018162:	bf38      	it	cc
 8018164:	250c      	movcc	r5, #12
 8018166:	2d00      	cmp	r5, #0
 8018168:	4606      	mov	r6, r0
 801816a:	db01      	blt.n	8018170 <_malloc_r+0x1c>
 801816c:	42a9      	cmp	r1, r5
 801816e:	d904      	bls.n	801817a <_malloc_r+0x26>
 8018170:	230c      	movs	r3, #12
 8018172:	6033      	str	r3, [r6, #0]
 8018174:	2000      	movs	r0, #0
 8018176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801817a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018250 <_malloc_r+0xfc>
 801817e:	f000 f87b 	bl	8018278 <__malloc_lock>
 8018182:	f8d8 3000 	ldr.w	r3, [r8]
 8018186:	461c      	mov	r4, r3
 8018188:	bb44      	cbnz	r4, 80181dc <_malloc_r+0x88>
 801818a:	4629      	mov	r1, r5
 801818c:	4630      	mov	r0, r6
 801818e:	f7ff ffbf 	bl	8018110 <sbrk_aligned>
 8018192:	1c43      	adds	r3, r0, #1
 8018194:	4604      	mov	r4, r0
 8018196:	d158      	bne.n	801824a <_malloc_r+0xf6>
 8018198:	f8d8 4000 	ldr.w	r4, [r8]
 801819c:	4627      	mov	r7, r4
 801819e:	2f00      	cmp	r7, #0
 80181a0:	d143      	bne.n	801822a <_malloc_r+0xd6>
 80181a2:	2c00      	cmp	r4, #0
 80181a4:	d04b      	beq.n	801823e <_malloc_r+0xea>
 80181a6:	6823      	ldr	r3, [r4, #0]
 80181a8:	4639      	mov	r1, r7
 80181aa:	4630      	mov	r0, r6
 80181ac:	eb04 0903 	add.w	r9, r4, r3
 80181b0:	f000 fdd6 	bl	8018d60 <_sbrk_r>
 80181b4:	4581      	cmp	r9, r0
 80181b6:	d142      	bne.n	801823e <_malloc_r+0xea>
 80181b8:	6821      	ldr	r1, [r4, #0]
 80181ba:	1a6d      	subs	r5, r5, r1
 80181bc:	4629      	mov	r1, r5
 80181be:	4630      	mov	r0, r6
 80181c0:	f7ff ffa6 	bl	8018110 <sbrk_aligned>
 80181c4:	3001      	adds	r0, #1
 80181c6:	d03a      	beq.n	801823e <_malloc_r+0xea>
 80181c8:	6823      	ldr	r3, [r4, #0]
 80181ca:	442b      	add	r3, r5
 80181cc:	6023      	str	r3, [r4, #0]
 80181ce:	f8d8 3000 	ldr.w	r3, [r8]
 80181d2:	685a      	ldr	r2, [r3, #4]
 80181d4:	bb62      	cbnz	r2, 8018230 <_malloc_r+0xdc>
 80181d6:	f8c8 7000 	str.w	r7, [r8]
 80181da:	e00f      	b.n	80181fc <_malloc_r+0xa8>
 80181dc:	6822      	ldr	r2, [r4, #0]
 80181de:	1b52      	subs	r2, r2, r5
 80181e0:	d420      	bmi.n	8018224 <_malloc_r+0xd0>
 80181e2:	2a0b      	cmp	r2, #11
 80181e4:	d917      	bls.n	8018216 <_malloc_r+0xc2>
 80181e6:	1961      	adds	r1, r4, r5
 80181e8:	42a3      	cmp	r3, r4
 80181ea:	6025      	str	r5, [r4, #0]
 80181ec:	bf18      	it	ne
 80181ee:	6059      	strne	r1, [r3, #4]
 80181f0:	6863      	ldr	r3, [r4, #4]
 80181f2:	bf08      	it	eq
 80181f4:	f8c8 1000 	streq.w	r1, [r8]
 80181f8:	5162      	str	r2, [r4, r5]
 80181fa:	604b      	str	r3, [r1, #4]
 80181fc:	4630      	mov	r0, r6
 80181fe:	f000 f841 	bl	8018284 <__malloc_unlock>
 8018202:	f104 000b 	add.w	r0, r4, #11
 8018206:	1d23      	adds	r3, r4, #4
 8018208:	f020 0007 	bic.w	r0, r0, #7
 801820c:	1ac2      	subs	r2, r0, r3
 801820e:	bf1c      	itt	ne
 8018210:	1a1b      	subne	r3, r3, r0
 8018212:	50a3      	strne	r3, [r4, r2]
 8018214:	e7af      	b.n	8018176 <_malloc_r+0x22>
 8018216:	6862      	ldr	r2, [r4, #4]
 8018218:	42a3      	cmp	r3, r4
 801821a:	bf0c      	ite	eq
 801821c:	f8c8 2000 	streq.w	r2, [r8]
 8018220:	605a      	strne	r2, [r3, #4]
 8018222:	e7eb      	b.n	80181fc <_malloc_r+0xa8>
 8018224:	4623      	mov	r3, r4
 8018226:	6864      	ldr	r4, [r4, #4]
 8018228:	e7ae      	b.n	8018188 <_malloc_r+0x34>
 801822a:	463c      	mov	r4, r7
 801822c:	687f      	ldr	r7, [r7, #4]
 801822e:	e7b6      	b.n	801819e <_malloc_r+0x4a>
 8018230:	461a      	mov	r2, r3
 8018232:	685b      	ldr	r3, [r3, #4]
 8018234:	42a3      	cmp	r3, r4
 8018236:	d1fb      	bne.n	8018230 <_malloc_r+0xdc>
 8018238:	2300      	movs	r3, #0
 801823a:	6053      	str	r3, [r2, #4]
 801823c:	e7de      	b.n	80181fc <_malloc_r+0xa8>
 801823e:	230c      	movs	r3, #12
 8018240:	6033      	str	r3, [r6, #0]
 8018242:	4630      	mov	r0, r6
 8018244:	f000 f81e 	bl	8018284 <__malloc_unlock>
 8018248:	e794      	b.n	8018174 <_malloc_r+0x20>
 801824a:	6005      	str	r5, [r0, #0]
 801824c:	e7d6      	b.n	80181fc <_malloc_r+0xa8>
 801824e:	bf00      	nop
 8018250:	24006830 	.word	0x24006830

08018254 <__ascii_mbtowc>:
 8018254:	b082      	sub	sp, #8
 8018256:	b901      	cbnz	r1, 801825a <__ascii_mbtowc+0x6>
 8018258:	a901      	add	r1, sp, #4
 801825a:	b142      	cbz	r2, 801826e <__ascii_mbtowc+0x1a>
 801825c:	b14b      	cbz	r3, 8018272 <__ascii_mbtowc+0x1e>
 801825e:	7813      	ldrb	r3, [r2, #0]
 8018260:	600b      	str	r3, [r1, #0]
 8018262:	7812      	ldrb	r2, [r2, #0]
 8018264:	1e10      	subs	r0, r2, #0
 8018266:	bf18      	it	ne
 8018268:	2001      	movne	r0, #1
 801826a:	b002      	add	sp, #8
 801826c:	4770      	bx	lr
 801826e:	4610      	mov	r0, r2
 8018270:	e7fb      	b.n	801826a <__ascii_mbtowc+0x16>
 8018272:	f06f 0001 	mvn.w	r0, #1
 8018276:	e7f8      	b.n	801826a <__ascii_mbtowc+0x16>

08018278 <__malloc_lock>:
 8018278:	4801      	ldr	r0, [pc, #4]	@ (8018280 <__malloc_lock+0x8>)
 801827a:	f7ff bbac 	b.w	80179d6 <__retarget_lock_acquire_recursive>
 801827e:	bf00      	nop
 8018280:	24006828 	.word	0x24006828

08018284 <__malloc_unlock>:
 8018284:	4801      	ldr	r0, [pc, #4]	@ (801828c <__malloc_unlock+0x8>)
 8018286:	f7ff bba7 	b.w	80179d8 <__retarget_lock_release_recursive>
 801828a:	bf00      	nop
 801828c:	24006828 	.word	0x24006828

08018290 <_Balloc>:
 8018290:	b570      	push	{r4, r5, r6, lr}
 8018292:	69c6      	ldr	r6, [r0, #28]
 8018294:	4604      	mov	r4, r0
 8018296:	460d      	mov	r5, r1
 8018298:	b976      	cbnz	r6, 80182b8 <_Balloc+0x28>
 801829a:	2010      	movs	r0, #16
 801829c:	f000 fda2 	bl	8018de4 <malloc>
 80182a0:	4602      	mov	r2, r0
 80182a2:	61e0      	str	r0, [r4, #28]
 80182a4:	b920      	cbnz	r0, 80182b0 <_Balloc+0x20>
 80182a6:	4b18      	ldr	r3, [pc, #96]	@ (8018308 <_Balloc+0x78>)
 80182a8:	4818      	ldr	r0, [pc, #96]	@ (801830c <_Balloc+0x7c>)
 80182aa:	216b      	movs	r1, #107	@ 0x6b
 80182ac:	f000 fd68 	bl	8018d80 <__assert_func>
 80182b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80182b4:	6006      	str	r6, [r0, #0]
 80182b6:	60c6      	str	r6, [r0, #12]
 80182b8:	69e6      	ldr	r6, [r4, #28]
 80182ba:	68f3      	ldr	r3, [r6, #12]
 80182bc:	b183      	cbz	r3, 80182e0 <_Balloc+0x50>
 80182be:	69e3      	ldr	r3, [r4, #28]
 80182c0:	68db      	ldr	r3, [r3, #12]
 80182c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80182c6:	b9b8      	cbnz	r0, 80182f8 <_Balloc+0x68>
 80182c8:	2101      	movs	r1, #1
 80182ca:	fa01 f605 	lsl.w	r6, r1, r5
 80182ce:	1d72      	adds	r2, r6, #5
 80182d0:	0092      	lsls	r2, r2, #2
 80182d2:	4620      	mov	r0, r4
 80182d4:	f000 fd72 	bl	8018dbc <_calloc_r>
 80182d8:	b160      	cbz	r0, 80182f4 <_Balloc+0x64>
 80182da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80182de:	e00e      	b.n	80182fe <_Balloc+0x6e>
 80182e0:	2221      	movs	r2, #33	@ 0x21
 80182e2:	2104      	movs	r1, #4
 80182e4:	4620      	mov	r0, r4
 80182e6:	f000 fd69 	bl	8018dbc <_calloc_r>
 80182ea:	69e3      	ldr	r3, [r4, #28]
 80182ec:	60f0      	str	r0, [r6, #12]
 80182ee:	68db      	ldr	r3, [r3, #12]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d1e4      	bne.n	80182be <_Balloc+0x2e>
 80182f4:	2000      	movs	r0, #0
 80182f6:	bd70      	pop	{r4, r5, r6, pc}
 80182f8:	6802      	ldr	r2, [r0, #0]
 80182fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80182fe:	2300      	movs	r3, #0
 8018300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018304:	e7f7      	b.n	80182f6 <_Balloc+0x66>
 8018306:	bf00      	nop
 8018308:	08019c12 	.word	0x08019c12
 801830c:	08019c29 	.word	0x08019c29

08018310 <_Bfree>:
 8018310:	b570      	push	{r4, r5, r6, lr}
 8018312:	69c6      	ldr	r6, [r0, #28]
 8018314:	4605      	mov	r5, r0
 8018316:	460c      	mov	r4, r1
 8018318:	b976      	cbnz	r6, 8018338 <_Bfree+0x28>
 801831a:	2010      	movs	r0, #16
 801831c:	f000 fd62 	bl	8018de4 <malloc>
 8018320:	4602      	mov	r2, r0
 8018322:	61e8      	str	r0, [r5, #28]
 8018324:	b920      	cbnz	r0, 8018330 <_Bfree+0x20>
 8018326:	4b09      	ldr	r3, [pc, #36]	@ (801834c <_Bfree+0x3c>)
 8018328:	4809      	ldr	r0, [pc, #36]	@ (8018350 <_Bfree+0x40>)
 801832a:	218f      	movs	r1, #143	@ 0x8f
 801832c:	f000 fd28 	bl	8018d80 <__assert_func>
 8018330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018334:	6006      	str	r6, [r0, #0]
 8018336:	60c6      	str	r6, [r0, #12]
 8018338:	b13c      	cbz	r4, 801834a <_Bfree+0x3a>
 801833a:	69eb      	ldr	r3, [r5, #28]
 801833c:	6862      	ldr	r2, [r4, #4]
 801833e:	68db      	ldr	r3, [r3, #12]
 8018340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018344:	6021      	str	r1, [r4, #0]
 8018346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801834a:	bd70      	pop	{r4, r5, r6, pc}
 801834c:	08019c12 	.word	0x08019c12
 8018350:	08019c29 	.word	0x08019c29

08018354 <__multadd>:
 8018354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018358:	690d      	ldr	r5, [r1, #16]
 801835a:	4607      	mov	r7, r0
 801835c:	460c      	mov	r4, r1
 801835e:	461e      	mov	r6, r3
 8018360:	f101 0c14 	add.w	ip, r1, #20
 8018364:	2000      	movs	r0, #0
 8018366:	f8dc 3000 	ldr.w	r3, [ip]
 801836a:	b299      	uxth	r1, r3
 801836c:	fb02 6101 	mla	r1, r2, r1, r6
 8018370:	0c1e      	lsrs	r6, r3, #16
 8018372:	0c0b      	lsrs	r3, r1, #16
 8018374:	fb02 3306 	mla	r3, r2, r6, r3
 8018378:	b289      	uxth	r1, r1
 801837a:	3001      	adds	r0, #1
 801837c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018380:	4285      	cmp	r5, r0
 8018382:	f84c 1b04 	str.w	r1, [ip], #4
 8018386:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801838a:	dcec      	bgt.n	8018366 <__multadd+0x12>
 801838c:	b30e      	cbz	r6, 80183d2 <__multadd+0x7e>
 801838e:	68a3      	ldr	r3, [r4, #8]
 8018390:	42ab      	cmp	r3, r5
 8018392:	dc19      	bgt.n	80183c8 <__multadd+0x74>
 8018394:	6861      	ldr	r1, [r4, #4]
 8018396:	4638      	mov	r0, r7
 8018398:	3101      	adds	r1, #1
 801839a:	f7ff ff79 	bl	8018290 <_Balloc>
 801839e:	4680      	mov	r8, r0
 80183a0:	b928      	cbnz	r0, 80183ae <__multadd+0x5a>
 80183a2:	4602      	mov	r2, r0
 80183a4:	4b0c      	ldr	r3, [pc, #48]	@ (80183d8 <__multadd+0x84>)
 80183a6:	480d      	ldr	r0, [pc, #52]	@ (80183dc <__multadd+0x88>)
 80183a8:	21ba      	movs	r1, #186	@ 0xba
 80183aa:	f000 fce9 	bl	8018d80 <__assert_func>
 80183ae:	6922      	ldr	r2, [r4, #16]
 80183b0:	3202      	adds	r2, #2
 80183b2:	f104 010c 	add.w	r1, r4, #12
 80183b6:	0092      	lsls	r2, r2, #2
 80183b8:	300c      	adds	r0, #12
 80183ba:	f7ff fb0e 	bl	80179da <memcpy>
 80183be:	4621      	mov	r1, r4
 80183c0:	4638      	mov	r0, r7
 80183c2:	f7ff ffa5 	bl	8018310 <_Bfree>
 80183c6:	4644      	mov	r4, r8
 80183c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80183cc:	3501      	adds	r5, #1
 80183ce:	615e      	str	r6, [r3, #20]
 80183d0:	6125      	str	r5, [r4, #16]
 80183d2:	4620      	mov	r0, r4
 80183d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183d8:	08019ba1 	.word	0x08019ba1
 80183dc:	08019c29 	.word	0x08019c29

080183e0 <__s2b>:
 80183e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183e4:	460c      	mov	r4, r1
 80183e6:	4615      	mov	r5, r2
 80183e8:	461f      	mov	r7, r3
 80183ea:	2209      	movs	r2, #9
 80183ec:	3308      	adds	r3, #8
 80183ee:	4606      	mov	r6, r0
 80183f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80183f4:	2100      	movs	r1, #0
 80183f6:	2201      	movs	r2, #1
 80183f8:	429a      	cmp	r2, r3
 80183fa:	db09      	blt.n	8018410 <__s2b+0x30>
 80183fc:	4630      	mov	r0, r6
 80183fe:	f7ff ff47 	bl	8018290 <_Balloc>
 8018402:	b940      	cbnz	r0, 8018416 <__s2b+0x36>
 8018404:	4602      	mov	r2, r0
 8018406:	4b19      	ldr	r3, [pc, #100]	@ (801846c <__s2b+0x8c>)
 8018408:	4819      	ldr	r0, [pc, #100]	@ (8018470 <__s2b+0x90>)
 801840a:	21d3      	movs	r1, #211	@ 0xd3
 801840c:	f000 fcb8 	bl	8018d80 <__assert_func>
 8018410:	0052      	lsls	r2, r2, #1
 8018412:	3101      	adds	r1, #1
 8018414:	e7f0      	b.n	80183f8 <__s2b+0x18>
 8018416:	9b08      	ldr	r3, [sp, #32]
 8018418:	6143      	str	r3, [r0, #20]
 801841a:	2d09      	cmp	r5, #9
 801841c:	f04f 0301 	mov.w	r3, #1
 8018420:	6103      	str	r3, [r0, #16]
 8018422:	dd16      	ble.n	8018452 <__s2b+0x72>
 8018424:	f104 0909 	add.w	r9, r4, #9
 8018428:	46c8      	mov	r8, r9
 801842a:	442c      	add	r4, r5
 801842c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018430:	4601      	mov	r1, r0
 8018432:	3b30      	subs	r3, #48	@ 0x30
 8018434:	220a      	movs	r2, #10
 8018436:	4630      	mov	r0, r6
 8018438:	f7ff ff8c 	bl	8018354 <__multadd>
 801843c:	45a0      	cmp	r8, r4
 801843e:	d1f5      	bne.n	801842c <__s2b+0x4c>
 8018440:	f1a5 0408 	sub.w	r4, r5, #8
 8018444:	444c      	add	r4, r9
 8018446:	1b2d      	subs	r5, r5, r4
 8018448:	1963      	adds	r3, r4, r5
 801844a:	42bb      	cmp	r3, r7
 801844c:	db04      	blt.n	8018458 <__s2b+0x78>
 801844e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018452:	340a      	adds	r4, #10
 8018454:	2509      	movs	r5, #9
 8018456:	e7f6      	b.n	8018446 <__s2b+0x66>
 8018458:	f814 3b01 	ldrb.w	r3, [r4], #1
 801845c:	4601      	mov	r1, r0
 801845e:	3b30      	subs	r3, #48	@ 0x30
 8018460:	220a      	movs	r2, #10
 8018462:	4630      	mov	r0, r6
 8018464:	f7ff ff76 	bl	8018354 <__multadd>
 8018468:	e7ee      	b.n	8018448 <__s2b+0x68>
 801846a:	bf00      	nop
 801846c:	08019ba1 	.word	0x08019ba1
 8018470:	08019c29 	.word	0x08019c29

08018474 <__hi0bits>:
 8018474:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018478:	4603      	mov	r3, r0
 801847a:	bf36      	itet	cc
 801847c:	0403      	lslcc	r3, r0, #16
 801847e:	2000      	movcs	r0, #0
 8018480:	2010      	movcc	r0, #16
 8018482:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018486:	bf3c      	itt	cc
 8018488:	021b      	lslcc	r3, r3, #8
 801848a:	3008      	addcc	r0, #8
 801848c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018490:	bf3c      	itt	cc
 8018492:	011b      	lslcc	r3, r3, #4
 8018494:	3004      	addcc	r0, #4
 8018496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801849a:	bf3c      	itt	cc
 801849c:	009b      	lslcc	r3, r3, #2
 801849e:	3002      	addcc	r0, #2
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	db05      	blt.n	80184b0 <__hi0bits+0x3c>
 80184a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80184a8:	f100 0001 	add.w	r0, r0, #1
 80184ac:	bf08      	it	eq
 80184ae:	2020      	moveq	r0, #32
 80184b0:	4770      	bx	lr

080184b2 <__lo0bits>:
 80184b2:	6803      	ldr	r3, [r0, #0]
 80184b4:	4602      	mov	r2, r0
 80184b6:	f013 0007 	ands.w	r0, r3, #7
 80184ba:	d00b      	beq.n	80184d4 <__lo0bits+0x22>
 80184bc:	07d9      	lsls	r1, r3, #31
 80184be:	d421      	bmi.n	8018504 <__lo0bits+0x52>
 80184c0:	0798      	lsls	r0, r3, #30
 80184c2:	bf49      	itett	mi
 80184c4:	085b      	lsrmi	r3, r3, #1
 80184c6:	089b      	lsrpl	r3, r3, #2
 80184c8:	2001      	movmi	r0, #1
 80184ca:	6013      	strmi	r3, [r2, #0]
 80184cc:	bf5c      	itt	pl
 80184ce:	6013      	strpl	r3, [r2, #0]
 80184d0:	2002      	movpl	r0, #2
 80184d2:	4770      	bx	lr
 80184d4:	b299      	uxth	r1, r3
 80184d6:	b909      	cbnz	r1, 80184dc <__lo0bits+0x2a>
 80184d8:	0c1b      	lsrs	r3, r3, #16
 80184da:	2010      	movs	r0, #16
 80184dc:	b2d9      	uxtb	r1, r3
 80184de:	b909      	cbnz	r1, 80184e4 <__lo0bits+0x32>
 80184e0:	3008      	adds	r0, #8
 80184e2:	0a1b      	lsrs	r3, r3, #8
 80184e4:	0719      	lsls	r1, r3, #28
 80184e6:	bf04      	itt	eq
 80184e8:	091b      	lsreq	r3, r3, #4
 80184ea:	3004      	addeq	r0, #4
 80184ec:	0799      	lsls	r1, r3, #30
 80184ee:	bf04      	itt	eq
 80184f0:	089b      	lsreq	r3, r3, #2
 80184f2:	3002      	addeq	r0, #2
 80184f4:	07d9      	lsls	r1, r3, #31
 80184f6:	d403      	bmi.n	8018500 <__lo0bits+0x4e>
 80184f8:	085b      	lsrs	r3, r3, #1
 80184fa:	f100 0001 	add.w	r0, r0, #1
 80184fe:	d003      	beq.n	8018508 <__lo0bits+0x56>
 8018500:	6013      	str	r3, [r2, #0]
 8018502:	4770      	bx	lr
 8018504:	2000      	movs	r0, #0
 8018506:	4770      	bx	lr
 8018508:	2020      	movs	r0, #32
 801850a:	4770      	bx	lr

0801850c <__i2b>:
 801850c:	b510      	push	{r4, lr}
 801850e:	460c      	mov	r4, r1
 8018510:	2101      	movs	r1, #1
 8018512:	f7ff febd 	bl	8018290 <_Balloc>
 8018516:	4602      	mov	r2, r0
 8018518:	b928      	cbnz	r0, 8018526 <__i2b+0x1a>
 801851a:	4b05      	ldr	r3, [pc, #20]	@ (8018530 <__i2b+0x24>)
 801851c:	4805      	ldr	r0, [pc, #20]	@ (8018534 <__i2b+0x28>)
 801851e:	f240 1145 	movw	r1, #325	@ 0x145
 8018522:	f000 fc2d 	bl	8018d80 <__assert_func>
 8018526:	2301      	movs	r3, #1
 8018528:	6144      	str	r4, [r0, #20]
 801852a:	6103      	str	r3, [r0, #16]
 801852c:	bd10      	pop	{r4, pc}
 801852e:	bf00      	nop
 8018530:	08019ba1 	.word	0x08019ba1
 8018534:	08019c29 	.word	0x08019c29

08018538 <__multiply>:
 8018538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801853c:	4614      	mov	r4, r2
 801853e:	690a      	ldr	r2, [r1, #16]
 8018540:	6923      	ldr	r3, [r4, #16]
 8018542:	429a      	cmp	r2, r3
 8018544:	bfa8      	it	ge
 8018546:	4623      	movge	r3, r4
 8018548:	460f      	mov	r7, r1
 801854a:	bfa4      	itt	ge
 801854c:	460c      	movge	r4, r1
 801854e:	461f      	movge	r7, r3
 8018550:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018554:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018558:	68a3      	ldr	r3, [r4, #8]
 801855a:	6861      	ldr	r1, [r4, #4]
 801855c:	eb0a 0609 	add.w	r6, sl, r9
 8018560:	42b3      	cmp	r3, r6
 8018562:	b085      	sub	sp, #20
 8018564:	bfb8      	it	lt
 8018566:	3101      	addlt	r1, #1
 8018568:	f7ff fe92 	bl	8018290 <_Balloc>
 801856c:	b930      	cbnz	r0, 801857c <__multiply+0x44>
 801856e:	4602      	mov	r2, r0
 8018570:	4b44      	ldr	r3, [pc, #272]	@ (8018684 <__multiply+0x14c>)
 8018572:	4845      	ldr	r0, [pc, #276]	@ (8018688 <__multiply+0x150>)
 8018574:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018578:	f000 fc02 	bl	8018d80 <__assert_func>
 801857c:	f100 0514 	add.w	r5, r0, #20
 8018580:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018584:	462b      	mov	r3, r5
 8018586:	2200      	movs	r2, #0
 8018588:	4543      	cmp	r3, r8
 801858a:	d321      	bcc.n	80185d0 <__multiply+0x98>
 801858c:	f107 0114 	add.w	r1, r7, #20
 8018590:	f104 0214 	add.w	r2, r4, #20
 8018594:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018598:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801859c:	9302      	str	r3, [sp, #8]
 801859e:	1b13      	subs	r3, r2, r4
 80185a0:	3b15      	subs	r3, #21
 80185a2:	f023 0303 	bic.w	r3, r3, #3
 80185a6:	3304      	adds	r3, #4
 80185a8:	f104 0715 	add.w	r7, r4, #21
 80185ac:	42ba      	cmp	r2, r7
 80185ae:	bf38      	it	cc
 80185b0:	2304      	movcc	r3, #4
 80185b2:	9301      	str	r3, [sp, #4]
 80185b4:	9b02      	ldr	r3, [sp, #8]
 80185b6:	9103      	str	r1, [sp, #12]
 80185b8:	428b      	cmp	r3, r1
 80185ba:	d80c      	bhi.n	80185d6 <__multiply+0x9e>
 80185bc:	2e00      	cmp	r6, #0
 80185be:	dd03      	ble.n	80185c8 <__multiply+0x90>
 80185c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d05b      	beq.n	8018680 <__multiply+0x148>
 80185c8:	6106      	str	r6, [r0, #16]
 80185ca:	b005      	add	sp, #20
 80185cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185d0:	f843 2b04 	str.w	r2, [r3], #4
 80185d4:	e7d8      	b.n	8018588 <__multiply+0x50>
 80185d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80185da:	f1ba 0f00 	cmp.w	sl, #0
 80185de:	d024      	beq.n	801862a <__multiply+0xf2>
 80185e0:	f104 0e14 	add.w	lr, r4, #20
 80185e4:	46a9      	mov	r9, r5
 80185e6:	f04f 0c00 	mov.w	ip, #0
 80185ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80185ee:	f8d9 3000 	ldr.w	r3, [r9]
 80185f2:	fa1f fb87 	uxth.w	fp, r7
 80185f6:	b29b      	uxth	r3, r3
 80185f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80185fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018600:	f8d9 7000 	ldr.w	r7, [r9]
 8018604:	4463      	add	r3, ip
 8018606:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801860a:	fb0a c70b 	mla	r7, sl, fp, ip
 801860e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018612:	b29b      	uxth	r3, r3
 8018614:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018618:	4572      	cmp	r2, lr
 801861a:	f849 3b04 	str.w	r3, [r9], #4
 801861e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018622:	d8e2      	bhi.n	80185ea <__multiply+0xb2>
 8018624:	9b01      	ldr	r3, [sp, #4]
 8018626:	f845 c003 	str.w	ip, [r5, r3]
 801862a:	9b03      	ldr	r3, [sp, #12]
 801862c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018630:	3104      	adds	r1, #4
 8018632:	f1b9 0f00 	cmp.w	r9, #0
 8018636:	d021      	beq.n	801867c <__multiply+0x144>
 8018638:	682b      	ldr	r3, [r5, #0]
 801863a:	f104 0c14 	add.w	ip, r4, #20
 801863e:	46ae      	mov	lr, r5
 8018640:	f04f 0a00 	mov.w	sl, #0
 8018644:	f8bc b000 	ldrh.w	fp, [ip]
 8018648:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801864c:	fb09 770b 	mla	r7, r9, fp, r7
 8018650:	4457      	add	r7, sl
 8018652:	b29b      	uxth	r3, r3
 8018654:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018658:	f84e 3b04 	str.w	r3, [lr], #4
 801865c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018660:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018664:	f8be 3000 	ldrh.w	r3, [lr]
 8018668:	fb09 330a 	mla	r3, r9, sl, r3
 801866c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018670:	4562      	cmp	r2, ip
 8018672:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018676:	d8e5      	bhi.n	8018644 <__multiply+0x10c>
 8018678:	9f01      	ldr	r7, [sp, #4]
 801867a:	51eb      	str	r3, [r5, r7]
 801867c:	3504      	adds	r5, #4
 801867e:	e799      	b.n	80185b4 <__multiply+0x7c>
 8018680:	3e01      	subs	r6, #1
 8018682:	e79b      	b.n	80185bc <__multiply+0x84>
 8018684:	08019ba1 	.word	0x08019ba1
 8018688:	08019c29 	.word	0x08019c29

0801868c <__pow5mult>:
 801868c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018690:	4615      	mov	r5, r2
 8018692:	f012 0203 	ands.w	r2, r2, #3
 8018696:	4607      	mov	r7, r0
 8018698:	460e      	mov	r6, r1
 801869a:	d007      	beq.n	80186ac <__pow5mult+0x20>
 801869c:	4c25      	ldr	r4, [pc, #148]	@ (8018734 <__pow5mult+0xa8>)
 801869e:	3a01      	subs	r2, #1
 80186a0:	2300      	movs	r3, #0
 80186a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80186a6:	f7ff fe55 	bl	8018354 <__multadd>
 80186aa:	4606      	mov	r6, r0
 80186ac:	10ad      	asrs	r5, r5, #2
 80186ae:	d03d      	beq.n	801872c <__pow5mult+0xa0>
 80186b0:	69fc      	ldr	r4, [r7, #28]
 80186b2:	b97c      	cbnz	r4, 80186d4 <__pow5mult+0x48>
 80186b4:	2010      	movs	r0, #16
 80186b6:	f000 fb95 	bl	8018de4 <malloc>
 80186ba:	4602      	mov	r2, r0
 80186bc:	61f8      	str	r0, [r7, #28]
 80186be:	b928      	cbnz	r0, 80186cc <__pow5mult+0x40>
 80186c0:	4b1d      	ldr	r3, [pc, #116]	@ (8018738 <__pow5mult+0xac>)
 80186c2:	481e      	ldr	r0, [pc, #120]	@ (801873c <__pow5mult+0xb0>)
 80186c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80186c8:	f000 fb5a 	bl	8018d80 <__assert_func>
 80186cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80186d0:	6004      	str	r4, [r0, #0]
 80186d2:	60c4      	str	r4, [r0, #12]
 80186d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80186d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80186dc:	b94c      	cbnz	r4, 80186f2 <__pow5mult+0x66>
 80186de:	f240 2171 	movw	r1, #625	@ 0x271
 80186e2:	4638      	mov	r0, r7
 80186e4:	f7ff ff12 	bl	801850c <__i2b>
 80186e8:	2300      	movs	r3, #0
 80186ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80186ee:	4604      	mov	r4, r0
 80186f0:	6003      	str	r3, [r0, #0]
 80186f2:	f04f 0900 	mov.w	r9, #0
 80186f6:	07eb      	lsls	r3, r5, #31
 80186f8:	d50a      	bpl.n	8018710 <__pow5mult+0x84>
 80186fa:	4631      	mov	r1, r6
 80186fc:	4622      	mov	r2, r4
 80186fe:	4638      	mov	r0, r7
 8018700:	f7ff ff1a 	bl	8018538 <__multiply>
 8018704:	4631      	mov	r1, r6
 8018706:	4680      	mov	r8, r0
 8018708:	4638      	mov	r0, r7
 801870a:	f7ff fe01 	bl	8018310 <_Bfree>
 801870e:	4646      	mov	r6, r8
 8018710:	106d      	asrs	r5, r5, #1
 8018712:	d00b      	beq.n	801872c <__pow5mult+0xa0>
 8018714:	6820      	ldr	r0, [r4, #0]
 8018716:	b938      	cbnz	r0, 8018728 <__pow5mult+0x9c>
 8018718:	4622      	mov	r2, r4
 801871a:	4621      	mov	r1, r4
 801871c:	4638      	mov	r0, r7
 801871e:	f7ff ff0b 	bl	8018538 <__multiply>
 8018722:	6020      	str	r0, [r4, #0]
 8018724:	f8c0 9000 	str.w	r9, [r0]
 8018728:	4604      	mov	r4, r0
 801872a:	e7e4      	b.n	80186f6 <__pow5mult+0x6a>
 801872c:	4630      	mov	r0, r6
 801872e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018732:	bf00      	nop
 8018734:	08019c84 	.word	0x08019c84
 8018738:	08019c12 	.word	0x08019c12
 801873c:	08019c29 	.word	0x08019c29

08018740 <__lshift>:
 8018740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018744:	460c      	mov	r4, r1
 8018746:	6849      	ldr	r1, [r1, #4]
 8018748:	6923      	ldr	r3, [r4, #16]
 801874a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801874e:	68a3      	ldr	r3, [r4, #8]
 8018750:	4607      	mov	r7, r0
 8018752:	4691      	mov	r9, r2
 8018754:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018758:	f108 0601 	add.w	r6, r8, #1
 801875c:	42b3      	cmp	r3, r6
 801875e:	db0b      	blt.n	8018778 <__lshift+0x38>
 8018760:	4638      	mov	r0, r7
 8018762:	f7ff fd95 	bl	8018290 <_Balloc>
 8018766:	4605      	mov	r5, r0
 8018768:	b948      	cbnz	r0, 801877e <__lshift+0x3e>
 801876a:	4602      	mov	r2, r0
 801876c:	4b28      	ldr	r3, [pc, #160]	@ (8018810 <__lshift+0xd0>)
 801876e:	4829      	ldr	r0, [pc, #164]	@ (8018814 <__lshift+0xd4>)
 8018770:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018774:	f000 fb04 	bl	8018d80 <__assert_func>
 8018778:	3101      	adds	r1, #1
 801877a:	005b      	lsls	r3, r3, #1
 801877c:	e7ee      	b.n	801875c <__lshift+0x1c>
 801877e:	2300      	movs	r3, #0
 8018780:	f100 0114 	add.w	r1, r0, #20
 8018784:	f100 0210 	add.w	r2, r0, #16
 8018788:	4618      	mov	r0, r3
 801878a:	4553      	cmp	r3, sl
 801878c:	db33      	blt.n	80187f6 <__lshift+0xb6>
 801878e:	6920      	ldr	r0, [r4, #16]
 8018790:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018794:	f104 0314 	add.w	r3, r4, #20
 8018798:	f019 091f 	ands.w	r9, r9, #31
 801879c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80187a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80187a4:	d02b      	beq.n	80187fe <__lshift+0xbe>
 80187a6:	f1c9 0e20 	rsb	lr, r9, #32
 80187aa:	468a      	mov	sl, r1
 80187ac:	2200      	movs	r2, #0
 80187ae:	6818      	ldr	r0, [r3, #0]
 80187b0:	fa00 f009 	lsl.w	r0, r0, r9
 80187b4:	4310      	orrs	r0, r2
 80187b6:	f84a 0b04 	str.w	r0, [sl], #4
 80187ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80187be:	459c      	cmp	ip, r3
 80187c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80187c4:	d8f3      	bhi.n	80187ae <__lshift+0x6e>
 80187c6:	ebac 0304 	sub.w	r3, ip, r4
 80187ca:	3b15      	subs	r3, #21
 80187cc:	f023 0303 	bic.w	r3, r3, #3
 80187d0:	3304      	adds	r3, #4
 80187d2:	f104 0015 	add.w	r0, r4, #21
 80187d6:	4584      	cmp	ip, r0
 80187d8:	bf38      	it	cc
 80187da:	2304      	movcc	r3, #4
 80187dc:	50ca      	str	r2, [r1, r3]
 80187de:	b10a      	cbz	r2, 80187e4 <__lshift+0xa4>
 80187e0:	f108 0602 	add.w	r6, r8, #2
 80187e4:	3e01      	subs	r6, #1
 80187e6:	4638      	mov	r0, r7
 80187e8:	612e      	str	r6, [r5, #16]
 80187ea:	4621      	mov	r1, r4
 80187ec:	f7ff fd90 	bl	8018310 <_Bfree>
 80187f0:	4628      	mov	r0, r5
 80187f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80187fa:	3301      	adds	r3, #1
 80187fc:	e7c5      	b.n	801878a <__lshift+0x4a>
 80187fe:	3904      	subs	r1, #4
 8018800:	f853 2b04 	ldr.w	r2, [r3], #4
 8018804:	f841 2f04 	str.w	r2, [r1, #4]!
 8018808:	459c      	cmp	ip, r3
 801880a:	d8f9      	bhi.n	8018800 <__lshift+0xc0>
 801880c:	e7ea      	b.n	80187e4 <__lshift+0xa4>
 801880e:	bf00      	nop
 8018810:	08019ba1 	.word	0x08019ba1
 8018814:	08019c29 	.word	0x08019c29

08018818 <__mcmp>:
 8018818:	690a      	ldr	r2, [r1, #16]
 801881a:	4603      	mov	r3, r0
 801881c:	6900      	ldr	r0, [r0, #16]
 801881e:	1a80      	subs	r0, r0, r2
 8018820:	b530      	push	{r4, r5, lr}
 8018822:	d10e      	bne.n	8018842 <__mcmp+0x2a>
 8018824:	3314      	adds	r3, #20
 8018826:	3114      	adds	r1, #20
 8018828:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801882c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018830:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018834:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018838:	4295      	cmp	r5, r2
 801883a:	d003      	beq.n	8018844 <__mcmp+0x2c>
 801883c:	d205      	bcs.n	801884a <__mcmp+0x32>
 801883e:	f04f 30ff 	mov.w	r0, #4294967295
 8018842:	bd30      	pop	{r4, r5, pc}
 8018844:	42a3      	cmp	r3, r4
 8018846:	d3f3      	bcc.n	8018830 <__mcmp+0x18>
 8018848:	e7fb      	b.n	8018842 <__mcmp+0x2a>
 801884a:	2001      	movs	r0, #1
 801884c:	e7f9      	b.n	8018842 <__mcmp+0x2a>
	...

08018850 <__mdiff>:
 8018850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018854:	4689      	mov	r9, r1
 8018856:	4606      	mov	r6, r0
 8018858:	4611      	mov	r1, r2
 801885a:	4648      	mov	r0, r9
 801885c:	4614      	mov	r4, r2
 801885e:	f7ff ffdb 	bl	8018818 <__mcmp>
 8018862:	1e05      	subs	r5, r0, #0
 8018864:	d112      	bne.n	801888c <__mdiff+0x3c>
 8018866:	4629      	mov	r1, r5
 8018868:	4630      	mov	r0, r6
 801886a:	f7ff fd11 	bl	8018290 <_Balloc>
 801886e:	4602      	mov	r2, r0
 8018870:	b928      	cbnz	r0, 801887e <__mdiff+0x2e>
 8018872:	4b3f      	ldr	r3, [pc, #252]	@ (8018970 <__mdiff+0x120>)
 8018874:	f240 2137 	movw	r1, #567	@ 0x237
 8018878:	483e      	ldr	r0, [pc, #248]	@ (8018974 <__mdiff+0x124>)
 801887a:	f000 fa81 	bl	8018d80 <__assert_func>
 801887e:	2301      	movs	r3, #1
 8018880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018884:	4610      	mov	r0, r2
 8018886:	b003      	add	sp, #12
 8018888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801888c:	bfbc      	itt	lt
 801888e:	464b      	movlt	r3, r9
 8018890:	46a1      	movlt	r9, r4
 8018892:	4630      	mov	r0, r6
 8018894:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018898:	bfba      	itte	lt
 801889a:	461c      	movlt	r4, r3
 801889c:	2501      	movlt	r5, #1
 801889e:	2500      	movge	r5, #0
 80188a0:	f7ff fcf6 	bl	8018290 <_Balloc>
 80188a4:	4602      	mov	r2, r0
 80188a6:	b918      	cbnz	r0, 80188b0 <__mdiff+0x60>
 80188a8:	4b31      	ldr	r3, [pc, #196]	@ (8018970 <__mdiff+0x120>)
 80188aa:	f240 2145 	movw	r1, #581	@ 0x245
 80188ae:	e7e3      	b.n	8018878 <__mdiff+0x28>
 80188b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80188b4:	6926      	ldr	r6, [r4, #16]
 80188b6:	60c5      	str	r5, [r0, #12]
 80188b8:	f109 0310 	add.w	r3, r9, #16
 80188bc:	f109 0514 	add.w	r5, r9, #20
 80188c0:	f104 0e14 	add.w	lr, r4, #20
 80188c4:	f100 0b14 	add.w	fp, r0, #20
 80188c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80188cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80188d0:	9301      	str	r3, [sp, #4]
 80188d2:	46d9      	mov	r9, fp
 80188d4:	f04f 0c00 	mov.w	ip, #0
 80188d8:	9b01      	ldr	r3, [sp, #4]
 80188da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80188de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80188e2:	9301      	str	r3, [sp, #4]
 80188e4:	fa1f f38a 	uxth.w	r3, sl
 80188e8:	4619      	mov	r1, r3
 80188ea:	b283      	uxth	r3, r0
 80188ec:	1acb      	subs	r3, r1, r3
 80188ee:	0c00      	lsrs	r0, r0, #16
 80188f0:	4463      	add	r3, ip
 80188f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80188f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80188fa:	b29b      	uxth	r3, r3
 80188fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018900:	4576      	cmp	r6, lr
 8018902:	f849 3b04 	str.w	r3, [r9], #4
 8018906:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801890a:	d8e5      	bhi.n	80188d8 <__mdiff+0x88>
 801890c:	1b33      	subs	r3, r6, r4
 801890e:	3b15      	subs	r3, #21
 8018910:	f023 0303 	bic.w	r3, r3, #3
 8018914:	3415      	adds	r4, #21
 8018916:	3304      	adds	r3, #4
 8018918:	42a6      	cmp	r6, r4
 801891a:	bf38      	it	cc
 801891c:	2304      	movcc	r3, #4
 801891e:	441d      	add	r5, r3
 8018920:	445b      	add	r3, fp
 8018922:	461e      	mov	r6, r3
 8018924:	462c      	mov	r4, r5
 8018926:	4544      	cmp	r4, r8
 8018928:	d30e      	bcc.n	8018948 <__mdiff+0xf8>
 801892a:	f108 0103 	add.w	r1, r8, #3
 801892e:	1b49      	subs	r1, r1, r5
 8018930:	f021 0103 	bic.w	r1, r1, #3
 8018934:	3d03      	subs	r5, #3
 8018936:	45a8      	cmp	r8, r5
 8018938:	bf38      	it	cc
 801893a:	2100      	movcc	r1, #0
 801893c:	440b      	add	r3, r1
 801893e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018942:	b191      	cbz	r1, 801896a <__mdiff+0x11a>
 8018944:	6117      	str	r7, [r2, #16]
 8018946:	e79d      	b.n	8018884 <__mdiff+0x34>
 8018948:	f854 1b04 	ldr.w	r1, [r4], #4
 801894c:	46e6      	mov	lr, ip
 801894e:	0c08      	lsrs	r0, r1, #16
 8018950:	fa1c fc81 	uxtah	ip, ip, r1
 8018954:	4471      	add	r1, lr
 8018956:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801895a:	b289      	uxth	r1, r1
 801895c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018960:	f846 1b04 	str.w	r1, [r6], #4
 8018964:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018968:	e7dd      	b.n	8018926 <__mdiff+0xd6>
 801896a:	3f01      	subs	r7, #1
 801896c:	e7e7      	b.n	801893e <__mdiff+0xee>
 801896e:	bf00      	nop
 8018970:	08019ba1 	.word	0x08019ba1
 8018974:	08019c29 	.word	0x08019c29

08018978 <__ulp>:
 8018978:	b082      	sub	sp, #8
 801897a:	ed8d 0b00 	vstr	d0, [sp]
 801897e:	9a01      	ldr	r2, [sp, #4]
 8018980:	4b0f      	ldr	r3, [pc, #60]	@ (80189c0 <__ulp+0x48>)
 8018982:	4013      	ands	r3, r2
 8018984:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018988:	2b00      	cmp	r3, #0
 801898a:	dc08      	bgt.n	801899e <__ulp+0x26>
 801898c:	425b      	negs	r3, r3
 801898e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018992:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018996:	da04      	bge.n	80189a2 <__ulp+0x2a>
 8018998:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801899c:	4113      	asrs	r3, r2
 801899e:	2200      	movs	r2, #0
 80189a0:	e008      	b.n	80189b4 <__ulp+0x3c>
 80189a2:	f1a2 0314 	sub.w	r3, r2, #20
 80189a6:	2b1e      	cmp	r3, #30
 80189a8:	bfda      	itte	le
 80189aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80189ae:	40da      	lsrle	r2, r3
 80189b0:	2201      	movgt	r2, #1
 80189b2:	2300      	movs	r3, #0
 80189b4:	4619      	mov	r1, r3
 80189b6:	4610      	mov	r0, r2
 80189b8:	ec41 0b10 	vmov	d0, r0, r1
 80189bc:	b002      	add	sp, #8
 80189be:	4770      	bx	lr
 80189c0:	7ff00000 	.word	0x7ff00000

080189c4 <__b2d>:
 80189c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189c8:	6906      	ldr	r6, [r0, #16]
 80189ca:	f100 0814 	add.w	r8, r0, #20
 80189ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80189d2:	1f37      	subs	r7, r6, #4
 80189d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80189d8:	4610      	mov	r0, r2
 80189da:	f7ff fd4b 	bl	8018474 <__hi0bits>
 80189de:	f1c0 0320 	rsb	r3, r0, #32
 80189e2:	280a      	cmp	r0, #10
 80189e4:	600b      	str	r3, [r1, #0]
 80189e6:	491b      	ldr	r1, [pc, #108]	@ (8018a54 <__b2d+0x90>)
 80189e8:	dc15      	bgt.n	8018a16 <__b2d+0x52>
 80189ea:	f1c0 0c0b 	rsb	ip, r0, #11
 80189ee:	fa22 f30c 	lsr.w	r3, r2, ip
 80189f2:	45b8      	cmp	r8, r7
 80189f4:	ea43 0501 	orr.w	r5, r3, r1
 80189f8:	bf34      	ite	cc
 80189fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80189fe:	2300      	movcs	r3, #0
 8018a00:	3015      	adds	r0, #21
 8018a02:	fa02 f000 	lsl.w	r0, r2, r0
 8018a06:	fa23 f30c 	lsr.w	r3, r3, ip
 8018a0a:	4303      	orrs	r3, r0
 8018a0c:	461c      	mov	r4, r3
 8018a0e:	ec45 4b10 	vmov	d0, r4, r5
 8018a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a16:	45b8      	cmp	r8, r7
 8018a18:	bf3a      	itte	cc
 8018a1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018a1e:	f1a6 0708 	subcc.w	r7, r6, #8
 8018a22:	2300      	movcs	r3, #0
 8018a24:	380b      	subs	r0, #11
 8018a26:	d012      	beq.n	8018a4e <__b2d+0x8a>
 8018a28:	f1c0 0120 	rsb	r1, r0, #32
 8018a2c:	fa23 f401 	lsr.w	r4, r3, r1
 8018a30:	4082      	lsls	r2, r0
 8018a32:	4322      	orrs	r2, r4
 8018a34:	4547      	cmp	r7, r8
 8018a36:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8018a3a:	bf8c      	ite	hi
 8018a3c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018a40:	2200      	movls	r2, #0
 8018a42:	4083      	lsls	r3, r0
 8018a44:	40ca      	lsrs	r2, r1
 8018a46:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018a4a:	4313      	orrs	r3, r2
 8018a4c:	e7de      	b.n	8018a0c <__b2d+0x48>
 8018a4e:	ea42 0501 	orr.w	r5, r2, r1
 8018a52:	e7db      	b.n	8018a0c <__b2d+0x48>
 8018a54:	3ff00000 	.word	0x3ff00000

08018a58 <__d2b>:
 8018a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018a5c:	460f      	mov	r7, r1
 8018a5e:	2101      	movs	r1, #1
 8018a60:	ec59 8b10 	vmov	r8, r9, d0
 8018a64:	4616      	mov	r6, r2
 8018a66:	f7ff fc13 	bl	8018290 <_Balloc>
 8018a6a:	4604      	mov	r4, r0
 8018a6c:	b930      	cbnz	r0, 8018a7c <__d2b+0x24>
 8018a6e:	4602      	mov	r2, r0
 8018a70:	4b23      	ldr	r3, [pc, #140]	@ (8018b00 <__d2b+0xa8>)
 8018a72:	4824      	ldr	r0, [pc, #144]	@ (8018b04 <__d2b+0xac>)
 8018a74:	f240 310f 	movw	r1, #783	@ 0x30f
 8018a78:	f000 f982 	bl	8018d80 <__assert_func>
 8018a7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018a84:	b10d      	cbz	r5, 8018a8a <__d2b+0x32>
 8018a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018a8a:	9301      	str	r3, [sp, #4]
 8018a8c:	f1b8 0300 	subs.w	r3, r8, #0
 8018a90:	d023      	beq.n	8018ada <__d2b+0x82>
 8018a92:	4668      	mov	r0, sp
 8018a94:	9300      	str	r3, [sp, #0]
 8018a96:	f7ff fd0c 	bl	80184b2 <__lo0bits>
 8018a9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018a9e:	b1d0      	cbz	r0, 8018ad6 <__d2b+0x7e>
 8018aa0:	f1c0 0320 	rsb	r3, r0, #32
 8018aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8018aa8:	430b      	orrs	r3, r1
 8018aaa:	40c2      	lsrs	r2, r0
 8018aac:	6163      	str	r3, [r4, #20]
 8018aae:	9201      	str	r2, [sp, #4]
 8018ab0:	9b01      	ldr	r3, [sp, #4]
 8018ab2:	61a3      	str	r3, [r4, #24]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	bf0c      	ite	eq
 8018ab8:	2201      	moveq	r2, #1
 8018aba:	2202      	movne	r2, #2
 8018abc:	6122      	str	r2, [r4, #16]
 8018abe:	b1a5      	cbz	r5, 8018aea <__d2b+0x92>
 8018ac0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018ac4:	4405      	add	r5, r0
 8018ac6:	603d      	str	r5, [r7, #0]
 8018ac8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018acc:	6030      	str	r0, [r6, #0]
 8018ace:	4620      	mov	r0, r4
 8018ad0:	b003      	add	sp, #12
 8018ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ad6:	6161      	str	r1, [r4, #20]
 8018ad8:	e7ea      	b.n	8018ab0 <__d2b+0x58>
 8018ada:	a801      	add	r0, sp, #4
 8018adc:	f7ff fce9 	bl	80184b2 <__lo0bits>
 8018ae0:	9b01      	ldr	r3, [sp, #4]
 8018ae2:	6163      	str	r3, [r4, #20]
 8018ae4:	3020      	adds	r0, #32
 8018ae6:	2201      	movs	r2, #1
 8018ae8:	e7e8      	b.n	8018abc <__d2b+0x64>
 8018aea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018aee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018af2:	6038      	str	r0, [r7, #0]
 8018af4:	6918      	ldr	r0, [r3, #16]
 8018af6:	f7ff fcbd 	bl	8018474 <__hi0bits>
 8018afa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018afe:	e7e5      	b.n	8018acc <__d2b+0x74>
 8018b00:	08019ba1 	.word	0x08019ba1
 8018b04:	08019c29 	.word	0x08019c29

08018b08 <__ratio>:
 8018b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b0c:	4688      	mov	r8, r1
 8018b0e:	4669      	mov	r1, sp
 8018b10:	4681      	mov	r9, r0
 8018b12:	f7ff ff57 	bl	80189c4 <__b2d>
 8018b16:	a901      	add	r1, sp, #4
 8018b18:	4640      	mov	r0, r8
 8018b1a:	ec55 4b10 	vmov	r4, r5, d0
 8018b1e:	f7ff ff51 	bl	80189c4 <__b2d>
 8018b22:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018b26:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018b2a:	1ad2      	subs	r2, r2, r3
 8018b2c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8018b30:	1a5b      	subs	r3, r3, r1
 8018b32:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8018b36:	ec57 6b10 	vmov	r6, r7, d0
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	bfd6      	itet	le
 8018b3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018b42:	462a      	movgt	r2, r5
 8018b44:	463a      	movle	r2, r7
 8018b46:	46ab      	mov	fp, r5
 8018b48:	46a2      	mov	sl, r4
 8018b4a:	bfce      	itee	gt
 8018b4c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018b50:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018b54:	ee00 3a90 	vmovle	s1, r3
 8018b58:	ec4b ab17 	vmov	d7, sl, fp
 8018b5c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8018b60:	b003      	add	sp, #12
 8018b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b66 <__copybits>:
 8018b66:	3901      	subs	r1, #1
 8018b68:	b570      	push	{r4, r5, r6, lr}
 8018b6a:	1149      	asrs	r1, r1, #5
 8018b6c:	6914      	ldr	r4, [r2, #16]
 8018b6e:	3101      	adds	r1, #1
 8018b70:	f102 0314 	add.w	r3, r2, #20
 8018b74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018b78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018b7c:	1f05      	subs	r5, r0, #4
 8018b7e:	42a3      	cmp	r3, r4
 8018b80:	d30c      	bcc.n	8018b9c <__copybits+0x36>
 8018b82:	1aa3      	subs	r3, r4, r2
 8018b84:	3b11      	subs	r3, #17
 8018b86:	f023 0303 	bic.w	r3, r3, #3
 8018b8a:	3211      	adds	r2, #17
 8018b8c:	42a2      	cmp	r2, r4
 8018b8e:	bf88      	it	hi
 8018b90:	2300      	movhi	r3, #0
 8018b92:	4418      	add	r0, r3
 8018b94:	2300      	movs	r3, #0
 8018b96:	4288      	cmp	r0, r1
 8018b98:	d305      	bcc.n	8018ba6 <__copybits+0x40>
 8018b9a:	bd70      	pop	{r4, r5, r6, pc}
 8018b9c:	f853 6b04 	ldr.w	r6, [r3], #4
 8018ba0:	f845 6f04 	str.w	r6, [r5, #4]!
 8018ba4:	e7eb      	b.n	8018b7e <__copybits+0x18>
 8018ba6:	f840 3b04 	str.w	r3, [r0], #4
 8018baa:	e7f4      	b.n	8018b96 <__copybits+0x30>

08018bac <__any_on>:
 8018bac:	f100 0214 	add.w	r2, r0, #20
 8018bb0:	6900      	ldr	r0, [r0, #16]
 8018bb2:	114b      	asrs	r3, r1, #5
 8018bb4:	4298      	cmp	r0, r3
 8018bb6:	b510      	push	{r4, lr}
 8018bb8:	db11      	blt.n	8018bde <__any_on+0x32>
 8018bba:	dd0a      	ble.n	8018bd2 <__any_on+0x26>
 8018bbc:	f011 011f 	ands.w	r1, r1, #31
 8018bc0:	d007      	beq.n	8018bd2 <__any_on+0x26>
 8018bc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018bc6:	fa24 f001 	lsr.w	r0, r4, r1
 8018bca:	fa00 f101 	lsl.w	r1, r0, r1
 8018bce:	428c      	cmp	r4, r1
 8018bd0:	d10b      	bne.n	8018bea <__any_on+0x3e>
 8018bd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018bd6:	4293      	cmp	r3, r2
 8018bd8:	d803      	bhi.n	8018be2 <__any_on+0x36>
 8018bda:	2000      	movs	r0, #0
 8018bdc:	bd10      	pop	{r4, pc}
 8018bde:	4603      	mov	r3, r0
 8018be0:	e7f7      	b.n	8018bd2 <__any_on+0x26>
 8018be2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018be6:	2900      	cmp	r1, #0
 8018be8:	d0f5      	beq.n	8018bd6 <__any_on+0x2a>
 8018bea:	2001      	movs	r0, #1
 8018bec:	e7f6      	b.n	8018bdc <__any_on+0x30>

08018bee <__ascii_wctomb>:
 8018bee:	4603      	mov	r3, r0
 8018bf0:	4608      	mov	r0, r1
 8018bf2:	b141      	cbz	r1, 8018c06 <__ascii_wctomb+0x18>
 8018bf4:	2aff      	cmp	r2, #255	@ 0xff
 8018bf6:	d904      	bls.n	8018c02 <__ascii_wctomb+0x14>
 8018bf8:	228a      	movs	r2, #138	@ 0x8a
 8018bfa:	601a      	str	r2, [r3, #0]
 8018bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8018c00:	4770      	bx	lr
 8018c02:	700a      	strb	r2, [r1, #0]
 8018c04:	2001      	movs	r0, #1
 8018c06:	4770      	bx	lr

08018c08 <__sflush_r>:
 8018c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c10:	0716      	lsls	r6, r2, #28
 8018c12:	4605      	mov	r5, r0
 8018c14:	460c      	mov	r4, r1
 8018c16:	d454      	bmi.n	8018cc2 <__sflush_r+0xba>
 8018c18:	684b      	ldr	r3, [r1, #4]
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	dc02      	bgt.n	8018c24 <__sflush_r+0x1c>
 8018c1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	dd48      	ble.n	8018cb6 <__sflush_r+0xae>
 8018c24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018c26:	2e00      	cmp	r6, #0
 8018c28:	d045      	beq.n	8018cb6 <__sflush_r+0xae>
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018c30:	682f      	ldr	r7, [r5, #0]
 8018c32:	6a21      	ldr	r1, [r4, #32]
 8018c34:	602b      	str	r3, [r5, #0]
 8018c36:	d030      	beq.n	8018c9a <__sflush_r+0x92>
 8018c38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018c3a:	89a3      	ldrh	r3, [r4, #12]
 8018c3c:	0759      	lsls	r1, r3, #29
 8018c3e:	d505      	bpl.n	8018c4c <__sflush_r+0x44>
 8018c40:	6863      	ldr	r3, [r4, #4]
 8018c42:	1ad2      	subs	r2, r2, r3
 8018c44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018c46:	b10b      	cbz	r3, 8018c4c <__sflush_r+0x44>
 8018c48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018c4a:	1ad2      	subs	r2, r2, r3
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018c50:	6a21      	ldr	r1, [r4, #32]
 8018c52:	4628      	mov	r0, r5
 8018c54:	47b0      	blx	r6
 8018c56:	1c43      	adds	r3, r0, #1
 8018c58:	89a3      	ldrh	r3, [r4, #12]
 8018c5a:	d106      	bne.n	8018c6a <__sflush_r+0x62>
 8018c5c:	6829      	ldr	r1, [r5, #0]
 8018c5e:	291d      	cmp	r1, #29
 8018c60:	d82b      	bhi.n	8018cba <__sflush_r+0xb2>
 8018c62:	4a2a      	ldr	r2, [pc, #168]	@ (8018d0c <__sflush_r+0x104>)
 8018c64:	410a      	asrs	r2, r1
 8018c66:	07d6      	lsls	r6, r2, #31
 8018c68:	d427      	bmi.n	8018cba <__sflush_r+0xb2>
 8018c6a:	2200      	movs	r2, #0
 8018c6c:	6062      	str	r2, [r4, #4]
 8018c6e:	04d9      	lsls	r1, r3, #19
 8018c70:	6922      	ldr	r2, [r4, #16]
 8018c72:	6022      	str	r2, [r4, #0]
 8018c74:	d504      	bpl.n	8018c80 <__sflush_r+0x78>
 8018c76:	1c42      	adds	r2, r0, #1
 8018c78:	d101      	bne.n	8018c7e <__sflush_r+0x76>
 8018c7a:	682b      	ldr	r3, [r5, #0]
 8018c7c:	b903      	cbnz	r3, 8018c80 <__sflush_r+0x78>
 8018c7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018c82:	602f      	str	r7, [r5, #0]
 8018c84:	b1b9      	cbz	r1, 8018cb6 <__sflush_r+0xae>
 8018c86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018c8a:	4299      	cmp	r1, r3
 8018c8c:	d002      	beq.n	8018c94 <__sflush_r+0x8c>
 8018c8e:	4628      	mov	r0, r5
 8018c90:	f7fe feba 	bl	8017a08 <_free_r>
 8018c94:	2300      	movs	r3, #0
 8018c96:	6363      	str	r3, [r4, #52]	@ 0x34
 8018c98:	e00d      	b.n	8018cb6 <__sflush_r+0xae>
 8018c9a:	2301      	movs	r3, #1
 8018c9c:	4628      	mov	r0, r5
 8018c9e:	47b0      	blx	r6
 8018ca0:	4602      	mov	r2, r0
 8018ca2:	1c50      	adds	r0, r2, #1
 8018ca4:	d1c9      	bne.n	8018c3a <__sflush_r+0x32>
 8018ca6:	682b      	ldr	r3, [r5, #0]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d0c6      	beq.n	8018c3a <__sflush_r+0x32>
 8018cac:	2b1d      	cmp	r3, #29
 8018cae:	d001      	beq.n	8018cb4 <__sflush_r+0xac>
 8018cb0:	2b16      	cmp	r3, #22
 8018cb2:	d11e      	bne.n	8018cf2 <__sflush_r+0xea>
 8018cb4:	602f      	str	r7, [r5, #0]
 8018cb6:	2000      	movs	r0, #0
 8018cb8:	e022      	b.n	8018d00 <__sflush_r+0xf8>
 8018cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018cbe:	b21b      	sxth	r3, r3
 8018cc0:	e01b      	b.n	8018cfa <__sflush_r+0xf2>
 8018cc2:	690f      	ldr	r7, [r1, #16]
 8018cc4:	2f00      	cmp	r7, #0
 8018cc6:	d0f6      	beq.n	8018cb6 <__sflush_r+0xae>
 8018cc8:	0793      	lsls	r3, r2, #30
 8018cca:	680e      	ldr	r6, [r1, #0]
 8018ccc:	bf08      	it	eq
 8018cce:	694b      	ldreq	r3, [r1, #20]
 8018cd0:	600f      	str	r7, [r1, #0]
 8018cd2:	bf18      	it	ne
 8018cd4:	2300      	movne	r3, #0
 8018cd6:	eba6 0807 	sub.w	r8, r6, r7
 8018cda:	608b      	str	r3, [r1, #8]
 8018cdc:	f1b8 0f00 	cmp.w	r8, #0
 8018ce0:	dde9      	ble.n	8018cb6 <__sflush_r+0xae>
 8018ce2:	6a21      	ldr	r1, [r4, #32]
 8018ce4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018ce6:	4643      	mov	r3, r8
 8018ce8:	463a      	mov	r2, r7
 8018cea:	4628      	mov	r0, r5
 8018cec:	47b0      	blx	r6
 8018cee:	2800      	cmp	r0, #0
 8018cf0:	dc08      	bgt.n	8018d04 <__sflush_r+0xfc>
 8018cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018cfa:	81a3      	strh	r3, [r4, #12]
 8018cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8018d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d04:	4407      	add	r7, r0
 8018d06:	eba8 0800 	sub.w	r8, r8, r0
 8018d0a:	e7e7      	b.n	8018cdc <__sflush_r+0xd4>
 8018d0c:	dfbffffe 	.word	0xdfbffffe

08018d10 <_fflush_r>:
 8018d10:	b538      	push	{r3, r4, r5, lr}
 8018d12:	690b      	ldr	r3, [r1, #16]
 8018d14:	4605      	mov	r5, r0
 8018d16:	460c      	mov	r4, r1
 8018d18:	b913      	cbnz	r3, 8018d20 <_fflush_r+0x10>
 8018d1a:	2500      	movs	r5, #0
 8018d1c:	4628      	mov	r0, r5
 8018d1e:	bd38      	pop	{r3, r4, r5, pc}
 8018d20:	b118      	cbz	r0, 8018d2a <_fflush_r+0x1a>
 8018d22:	6a03      	ldr	r3, [r0, #32]
 8018d24:	b90b      	cbnz	r3, 8018d2a <_fflush_r+0x1a>
 8018d26:	f7fe fd45 	bl	80177b4 <__sinit>
 8018d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d0f3      	beq.n	8018d1a <_fflush_r+0xa>
 8018d32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018d34:	07d0      	lsls	r0, r2, #31
 8018d36:	d404      	bmi.n	8018d42 <_fflush_r+0x32>
 8018d38:	0599      	lsls	r1, r3, #22
 8018d3a:	d402      	bmi.n	8018d42 <_fflush_r+0x32>
 8018d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d3e:	f7fe fe4a 	bl	80179d6 <__retarget_lock_acquire_recursive>
 8018d42:	4628      	mov	r0, r5
 8018d44:	4621      	mov	r1, r4
 8018d46:	f7ff ff5f 	bl	8018c08 <__sflush_r>
 8018d4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018d4c:	07da      	lsls	r2, r3, #31
 8018d4e:	4605      	mov	r5, r0
 8018d50:	d4e4      	bmi.n	8018d1c <_fflush_r+0xc>
 8018d52:	89a3      	ldrh	r3, [r4, #12]
 8018d54:	059b      	lsls	r3, r3, #22
 8018d56:	d4e1      	bmi.n	8018d1c <_fflush_r+0xc>
 8018d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d5a:	f7fe fe3d 	bl	80179d8 <__retarget_lock_release_recursive>
 8018d5e:	e7dd      	b.n	8018d1c <_fflush_r+0xc>

08018d60 <_sbrk_r>:
 8018d60:	b538      	push	{r3, r4, r5, lr}
 8018d62:	4d06      	ldr	r5, [pc, #24]	@ (8018d7c <_sbrk_r+0x1c>)
 8018d64:	2300      	movs	r3, #0
 8018d66:	4604      	mov	r4, r0
 8018d68:	4608      	mov	r0, r1
 8018d6a:	602b      	str	r3, [r5, #0]
 8018d6c:	f7ea fb18 	bl	80033a0 <_sbrk>
 8018d70:	1c43      	adds	r3, r0, #1
 8018d72:	d102      	bne.n	8018d7a <_sbrk_r+0x1a>
 8018d74:	682b      	ldr	r3, [r5, #0]
 8018d76:	b103      	cbz	r3, 8018d7a <_sbrk_r+0x1a>
 8018d78:	6023      	str	r3, [r4, #0]
 8018d7a:	bd38      	pop	{r3, r4, r5, pc}
 8018d7c:	24006824 	.word	0x24006824

08018d80 <__assert_func>:
 8018d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018d82:	4614      	mov	r4, r2
 8018d84:	461a      	mov	r2, r3
 8018d86:	4b09      	ldr	r3, [pc, #36]	@ (8018dac <__assert_func+0x2c>)
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	4605      	mov	r5, r0
 8018d8c:	68d8      	ldr	r0, [r3, #12]
 8018d8e:	b954      	cbnz	r4, 8018da6 <__assert_func+0x26>
 8018d90:	4b07      	ldr	r3, [pc, #28]	@ (8018db0 <__assert_func+0x30>)
 8018d92:	461c      	mov	r4, r3
 8018d94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018d98:	9100      	str	r1, [sp, #0]
 8018d9a:	462b      	mov	r3, r5
 8018d9c:	4905      	ldr	r1, [pc, #20]	@ (8018db4 <__assert_func+0x34>)
 8018d9e:	f000 f829 	bl	8018df4 <fiprintf>
 8018da2:	f000 f839 	bl	8018e18 <abort>
 8018da6:	4b04      	ldr	r3, [pc, #16]	@ (8018db8 <__assert_func+0x38>)
 8018da8:	e7f4      	b.n	8018d94 <__assert_func+0x14>
 8018daa:	bf00      	nop
 8018dac:	24000240 	.word	0x24000240
 8018db0:	08019dbb 	.word	0x08019dbb
 8018db4:	08019d8d 	.word	0x08019d8d
 8018db8:	08019d80 	.word	0x08019d80

08018dbc <_calloc_r>:
 8018dbc:	b570      	push	{r4, r5, r6, lr}
 8018dbe:	fba1 5402 	umull	r5, r4, r1, r2
 8018dc2:	b93c      	cbnz	r4, 8018dd4 <_calloc_r+0x18>
 8018dc4:	4629      	mov	r1, r5
 8018dc6:	f7ff f9c5 	bl	8018154 <_malloc_r>
 8018dca:	4606      	mov	r6, r0
 8018dcc:	b928      	cbnz	r0, 8018dda <_calloc_r+0x1e>
 8018dce:	2600      	movs	r6, #0
 8018dd0:	4630      	mov	r0, r6
 8018dd2:	bd70      	pop	{r4, r5, r6, pc}
 8018dd4:	220c      	movs	r2, #12
 8018dd6:	6002      	str	r2, [r0, #0]
 8018dd8:	e7f9      	b.n	8018dce <_calloc_r+0x12>
 8018dda:	462a      	mov	r2, r5
 8018ddc:	4621      	mov	r1, r4
 8018dde:	f7fe fd62 	bl	80178a6 <memset>
 8018de2:	e7f5      	b.n	8018dd0 <_calloc_r+0x14>

08018de4 <malloc>:
 8018de4:	4b02      	ldr	r3, [pc, #8]	@ (8018df0 <malloc+0xc>)
 8018de6:	4601      	mov	r1, r0
 8018de8:	6818      	ldr	r0, [r3, #0]
 8018dea:	f7ff b9b3 	b.w	8018154 <_malloc_r>
 8018dee:	bf00      	nop
 8018df0:	24000240 	.word	0x24000240

08018df4 <fiprintf>:
 8018df4:	b40e      	push	{r1, r2, r3}
 8018df6:	b503      	push	{r0, r1, lr}
 8018df8:	4601      	mov	r1, r0
 8018dfa:	ab03      	add	r3, sp, #12
 8018dfc:	4805      	ldr	r0, [pc, #20]	@ (8018e14 <fiprintf+0x20>)
 8018dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e02:	6800      	ldr	r0, [r0, #0]
 8018e04:	9301      	str	r3, [sp, #4]
 8018e06:	f000 f837 	bl	8018e78 <_vfiprintf_r>
 8018e0a:	b002      	add	sp, #8
 8018e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018e10:	b003      	add	sp, #12
 8018e12:	4770      	bx	lr
 8018e14:	24000240 	.word	0x24000240

08018e18 <abort>:
 8018e18:	b508      	push	{r3, lr}
 8018e1a:	2006      	movs	r0, #6
 8018e1c:	f000 fb8e 	bl	801953c <raise>
 8018e20:	2001      	movs	r0, #1
 8018e22:	f7ea fa45 	bl	80032b0 <_exit>

08018e26 <__sfputc_r>:
 8018e26:	6893      	ldr	r3, [r2, #8]
 8018e28:	3b01      	subs	r3, #1
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	b410      	push	{r4}
 8018e2e:	6093      	str	r3, [r2, #8]
 8018e30:	da08      	bge.n	8018e44 <__sfputc_r+0x1e>
 8018e32:	6994      	ldr	r4, [r2, #24]
 8018e34:	42a3      	cmp	r3, r4
 8018e36:	db01      	blt.n	8018e3c <__sfputc_r+0x16>
 8018e38:	290a      	cmp	r1, #10
 8018e3a:	d103      	bne.n	8018e44 <__sfputc_r+0x1e>
 8018e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e40:	f000 bac0 	b.w	80193c4 <__swbuf_r>
 8018e44:	6813      	ldr	r3, [r2, #0]
 8018e46:	1c58      	adds	r0, r3, #1
 8018e48:	6010      	str	r0, [r2, #0]
 8018e4a:	7019      	strb	r1, [r3, #0]
 8018e4c:	4608      	mov	r0, r1
 8018e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e52:	4770      	bx	lr

08018e54 <__sfputs_r>:
 8018e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e56:	4606      	mov	r6, r0
 8018e58:	460f      	mov	r7, r1
 8018e5a:	4614      	mov	r4, r2
 8018e5c:	18d5      	adds	r5, r2, r3
 8018e5e:	42ac      	cmp	r4, r5
 8018e60:	d101      	bne.n	8018e66 <__sfputs_r+0x12>
 8018e62:	2000      	movs	r0, #0
 8018e64:	e007      	b.n	8018e76 <__sfputs_r+0x22>
 8018e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e6a:	463a      	mov	r2, r7
 8018e6c:	4630      	mov	r0, r6
 8018e6e:	f7ff ffda 	bl	8018e26 <__sfputc_r>
 8018e72:	1c43      	adds	r3, r0, #1
 8018e74:	d1f3      	bne.n	8018e5e <__sfputs_r+0xa>
 8018e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018e78 <_vfiprintf_r>:
 8018e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e7c:	460d      	mov	r5, r1
 8018e7e:	b09d      	sub	sp, #116	@ 0x74
 8018e80:	4614      	mov	r4, r2
 8018e82:	4698      	mov	r8, r3
 8018e84:	4606      	mov	r6, r0
 8018e86:	b118      	cbz	r0, 8018e90 <_vfiprintf_r+0x18>
 8018e88:	6a03      	ldr	r3, [r0, #32]
 8018e8a:	b90b      	cbnz	r3, 8018e90 <_vfiprintf_r+0x18>
 8018e8c:	f7fe fc92 	bl	80177b4 <__sinit>
 8018e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e92:	07d9      	lsls	r1, r3, #31
 8018e94:	d405      	bmi.n	8018ea2 <_vfiprintf_r+0x2a>
 8018e96:	89ab      	ldrh	r3, [r5, #12]
 8018e98:	059a      	lsls	r2, r3, #22
 8018e9a:	d402      	bmi.n	8018ea2 <_vfiprintf_r+0x2a>
 8018e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e9e:	f7fe fd9a 	bl	80179d6 <__retarget_lock_acquire_recursive>
 8018ea2:	89ab      	ldrh	r3, [r5, #12]
 8018ea4:	071b      	lsls	r3, r3, #28
 8018ea6:	d501      	bpl.n	8018eac <_vfiprintf_r+0x34>
 8018ea8:	692b      	ldr	r3, [r5, #16]
 8018eaa:	b99b      	cbnz	r3, 8018ed4 <_vfiprintf_r+0x5c>
 8018eac:	4629      	mov	r1, r5
 8018eae:	4630      	mov	r0, r6
 8018eb0:	f000 fac6 	bl	8019440 <__swsetup_r>
 8018eb4:	b170      	cbz	r0, 8018ed4 <_vfiprintf_r+0x5c>
 8018eb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018eb8:	07dc      	lsls	r4, r3, #31
 8018eba:	d504      	bpl.n	8018ec6 <_vfiprintf_r+0x4e>
 8018ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8018ec0:	b01d      	add	sp, #116	@ 0x74
 8018ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ec6:	89ab      	ldrh	r3, [r5, #12]
 8018ec8:	0598      	lsls	r0, r3, #22
 8018eca:	d4f7      	bmi.n	8018ebc <_vfiprintf_r+0x44>
 8018ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018ece:	f7fe fd83 	bl	80179d8 <__retarget_lock_release_recursive>
 8018ed2:	e7f3      	b.n	8018ebc <_vfiprintf_r+0x44>
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ed8:	2320      	movs	r3, #32
 8018eda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ee2:	2330      	movs	r3, #48	@ 0x30
 8018ee4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019094 <_vfiprintf_r+0x21c>
 8018ee8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018eec:	f04f 0901 	mov.w	r9, #1
 8018ef0:	4623      	mov	r3, r4
 8018ef2:	469a      	mov	sl, r3
 8018ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ef8:	b10a      	cbz	r2, 8018efe <_vfiprintf_r+0x86>
 8018efa:	2a25      	cmp	r2, #37	@ 0x25
 8018efc:	d1f9      	bne.n	8018ef2 <_vfiprintf_r+0x7a>
 8018efe:	ebba 0b04 	subs.w	fp, sl, r4
 8018f02:	d00b      	beq.n	8018f1c <_vfiprintf_r+0xa4>
 8018f04:	465b      	mov	r3, fp
 8018f06:	4622      	mov	r2, r4
 8018f08:	4629      	mov	r1, r5
 8018f0a:	4630      	mov	r0, r6
 8018f0c:	f7ff ffa2 	bl	8018e54 <__sfputs_r>
 8018f10:	3001      	adds	r0, #1
 8018f12:	f000 80a7 	beq.w	8019064 <_vfiprintf_r+0x1ec>
 8018f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018f18:	445a      	add	r2, fp
 8018f1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8018f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	f000 809f 	beq.w	8019064 <_vfiprintf_r+0x1ec>
 8018f26:	2300      	movs	r3, #0
 8018f28:	f04f 32ff 	mov.w	r2, #4294967295
 8018f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f30:	f10a 0a01 	add.w	sl, sl, #1
 8018f34:	9304      	str	r3, [sp, #16]
 8018f36:	9307      	str	r3, [sp, #28]
 8018f38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018f3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8018f3e:	4654      	mov	r4, sl
 8018f40:	2205      	movs	r2, #5
 8018f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f46:	4853      	ldr	r0, [pc, #332]	@ (8019094 <_vfiprintf_r+0x21c>)
 8018f48:	f7e7 f9e2 	bl	8000310 <memchr>
 8018f4c:	9a04      	ldr	r2, [sp, #16]
 8018f4e:	b9d8      	cbnz	r0, 8018f88 <_vfiprintf_r+0x110>
 8018f50:	06d1      	lsls	r1, r2, #27
 8018f52:	bf44      	itt	mi
 8018f54:	2320      	movmi	r3, #32
 8018f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018f5a:	0713      	lsls	r3, r2, #28
 8018f5c:	bf44      	itt	mi
 8018f5e:	232b      	movmi	r3, #43	@ 0x2b
 8018f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018f64:	f89a 3000 	ldrb.w	r3, [sl]
 8018f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8018f6a:	d015      	beq.n	8018f98 <_vfiprintf_r+0x120>
 8018f6c:	9a07      	ldr	r2, [sp, #28]
 8018f6e:	4654      	mov	r4, sl
 8018f70:	2000      	movs	r0, #0
 8018f72:	f04f 0c0a 	mov.w	ip, #10
 8018f76:	4621      	mov	r1, r4
 8018f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f7c:	3b30      	subs	r3, #48	@ 0x30
 8018f7e:	2b09      	cmp	r3, #9
 8018f80:	d94b      	bls.n	801901a <_vfiprintf_r+0x1a2>
 8018f82:	b1b0      	cbz	r0, 8018fb2 <_vfiprintf_r+0x13a>
 8018f84:	9207      	str	r2, [sp, #28]
 8018f86:	e014      	b.n	8018fb2 <_vfiprintf_r+0x13a>
 8018f88:	eba0 0308 	sub.w	r3, r0, r8
 8018f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8018f90:	4313      	orrs	r3, r2
 8018f92:	9304      	str	r3, [sp, #16]
 8018f94:	46a2      	mov	sl, r4
 8018f96:	e7d2      	b.n	8018f3e <_vfiprintf_r+0xc6>
 8018f98:	9b03      	ldr	r3, [sp, #12]
 8018f9a:	1d19      	adds	r1, r3, #4
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	9103      	str	r1, [sp, #12]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	bfbb      	ittet	lt
 8018fa4:	425b      	neglt	r3, r3
 8018fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8018faa:	9307      	strge	r3, [sp, #28]
 8018fac:	9307      	strlt	r3, [sp, #28]
 8018fae:	bfb8      	it	lt
 8018fb0:	9204      	strlt	r2, [sp, #16]
 8018fb2:	7823      	ldrb	r3, [r4, #0]
 8018fb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8018fb6:	d10a      	bne.n	8018fce <_vfiprintf_r+0x156>
 8018fb8:	7863      	ldrb	r3, [r4, #1]
 8018fba:	2b2a      	cmp	r3, #42	@ 0x2a
 8018fbc:	d132      	bne.n	8019024 <_vfiprintf_r+0x1ac>
 8018fbe:	9b03      	ldr	r3, [sp, #12]
 8018fc0:	1d1a      	adds	r2, r3, #4
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	9203      	str	r2, [sp, #12]
 8018fc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018fca:	3402      	adds	r4, #2
 8018fcc:	9305      	str	r3, [sp, #20]
 8018fce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80190a4 <_vfiprintf_r+0x22c>
 8018fd2:	7821      	ldrb	r1, [r4, #0]
 8018fd4:	2203      	movs	r2, #3
 8018fd6:	4650      	mov	r0, sl
 8018fd8:	f7e7 f99a 	bl	8000310 <memchr>
 8018fdc:	b138      	cbz	r0, 8018fee <_vfiprintf_r+0x176>
 8018fde:	9b04      	ldr	r3, [sp, #16]
 8018fe0:	eba0 000a 	sub.w	r0, r0, sl
 8018fe4:	2240      	movs	r2, #64	@ 0x40
 8018fe6:	4082      	lsls	r2, r0
 8018fe8:	4313      	orrs	r3, r2
 8018fea:	3401      	adds	r4, #1
 8018fec:	9304      	str	r3, [sp, #16]
 8018fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ff2:	4829      	ldr	r0, [pc, #164]	@ (8019098 <_vfiprintf_r+0x220>)
 8018ff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018ff8:	2206      	movs	r2, #6
 8018ffa:	f7e7 f989 	bl	8000310 <memchr>
 8018ffe:	2800      	cmp	r0, #0
 8019000:	d03f      	beq.n	8019082 <_vfiprintf_r+0x20a>
 8019002:	4b26      	ldr	r3, [pc, #152]	@ (801909c <_vfiprintf_r+0x224>)
 8019004:	bb1b      	cbnz	r3, 801904e <_vfiprintf_r+0x1d6>
 8019006:	9b03      	ldr	r3, [sp, #12]
 8019008:	3307      	adds	r3, #7
 801900a:	f023 0307 	bic.w	r3, r3, #7
 801900e:	3308      	adds	r3, #8
 8019010:	9303      	str	r3, [sp, #12]
 8019012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019014:	443b      	add	r3, r7
 8019016:	9309      	str	r3, [sp, #36]	@ 0x24
 8019018:	e76a      	b.n	8018ef0 <_vfiprintf_r+0x78>
 801901a:	fb0c 3202 	mla	r2, ip, r2, r3
 801901e:	460c      	mov	r4, r1
 8019020:	2001      	movs	r0, #1
 8019022:	e7a8      	b.n	8018f76 <_vfiprintf_r+0xfe>
 8019024:	2300      	movs	r3, #0
 8019026:	3401      	adds	r4, #1
 8019028:	9305      	str	r3, [sp, #20]
 801902a:	4619      	mov	r1, r3
 801902c:	f04f 0c0a 	mov.w	ip, #10
 8019030:	4620      	mov	r0, r4
 8019032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019036:	3a30      	subs	r2, #48	@ 0x30
 8019038:	2a09      	cmp	r2, #9
 801903a:	d903      	bls.n	8019044 <_vfiprintf_r+0x1cc>
 801903c:	2b00      	cmp	r3, #0
 801903e:	d0c6      	beq.n	8018fce <_vfiprintf_r+0x156>
 8019040:	9105      	str	r1, [sp, #20]
 8019042:	e7c4      	b.n	8018fce <_vfiprintf_r+0x156>
 8019044:	fb0c 2101 	mla	r1, ip, r1, r2
 8019048:	4604      	mov	r4, r0
 801904a:	2301      	movs	r3, #1
 801904c:	e7f0      	b.n	8019030 <_vfiprintf_r+0x1b8>
 801904e:	ab03      	add	r3, sp, #12
 8019050:	9300      	str	r3, [sp, #0]
 8019052:	462a      	mov	r2, r5
 8019054:	4b12      	ldr	r3, [pc, #72]	@ (80190a0 <_vfiprintf_r+0x228>)
 8019056:	a904      	add	r1, sp, #16
 8019058:	4630      	mov	r0, r6
 801905a:	f3af 8000 	nop.w
 801905e:	4607      	mov	r7, r0
 8019060:	1c78      	adds	r0, r7, #1
 8019062:	d1d6      	bne.n	8019012 <_vfiprintf_r+0x19a>
 8019064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019066:	07d9      	lsls	r1, r3, #31
 8019068:	d405      	bmi.n	8019076 <_vfiprintf_r+0x1fe>
 801906a:	89ab      	ldrh	r3, [r5, #12]
 801906c:	059a      	lsls	r2, r3, #22
 801906e:	d402      	bmi.n	8019076 <_vfiprintf_r+0x1fe>
 8019070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019072:	f7fe fcb1 	bl	80179d8 <__retarget_lock_release_recursive>
 8019076:	89ab      	ldrh	r3, [r5, #12]
 8019078:	065b      	lsls	r3, r3, #25
 801907a:	f53f af1f 	bmi.w	8018ebc <_vfiprintf_r+0x44>
 801907e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019080:	e71e      	b.n	8018ec0 <_vfiprintf_r+0x48>
 8019082:	ab03      	add	r3, sp, #12
 8019084:	9300      	str	r3, [sp, #0]
 8019086:	462a      	mov	r2, r5
 8019088:	4b05      	ldr	r3, [pc, #20]	@ (80190a0 <_vfiprintf_r+0x228>)
 801908a:	a904      	add	r1, sp, #16
 801908c:	4630      	mov	r0, r6
 801908e:	f000 f879 	bl	8019184 <_printf_i>
 8019092:	e7e4      	b.n	801905e <_vfiprintf_r+0x1e6>
 8019094:	08019dbc 	.word	0x08019dbc
 8019098:	08019dc6 	.word	0x08019dc6
 801909c:	00000000 	.word	0x00000000
 80190a0:	08018e55 	.word	0x08018e55
 80190a4:	08019dc2 	.word	0x08019dc2

080190a8 <_printf_common>:
 80190a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190ac:	4616      	mov	r6, r2
 80190ae:	4698      	mov	r8, r3
 80190b0:	688a      	ldr	r2, [r1, #8]
 80190b2:	690b      	ldr	r3, [r1, #16]
 80190b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80190b8:	4293      	cmp	r3, r2
 80190ba:	bfb8      	it	lt
 80190bc:	4613      	movlt	r3, r2
 80190be:	6033      	str	r3, [r6, #0]
 80190c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80190c4:	4607      	mov	r7, r0
 80190c6:	460c      	mov	r4, r1
 80190c8:	b10a      	cbz	r2, 80190ce <_printf_common+0x26>
 80190ca:	3301      	adds	r3, #1
 80190cc:	6033      	str	r3, [r6, #0]
 80190ce:	6823      	ldr	r3, [r4, #0]
 80190d0:	0699      	lsls	r1, r3, #26
 80190d2:	bf42      	ittt	mi
 80190d4:	6833      	ldrmi	r3, [r6, #0]
 80190d6:	3302      	addmi	r3, #2
 80190d8:	6033      	strmi	r3, [r6, #0]
 80190da:	6825      	ldr	r5, [r4, #0]
 80190dc:	f015 0506 	ands.w	r5, r5, #6
 80190e0:	d106      	bne.n	80190f0 <_printf_common+0x48>
 80190e2:	f104 0a19 	add.w	sl, r4, #25
 80190e6:	68e3      	ldr	r3, [r4, #12]
 80190e8:	6832      	ldr	r2, [r6, #0]
 80190ea:	1a9b      	subs	r3, r3, r2
 80190ec:	42ab      	cmp	r3, r5
 80190ee:	dc26      	bgt.n	801913e <_printf_common+0x96>
 80190f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80190f4:	6822      	ldr	r2, [r4, #0]
 80190f6:	3b00      	subs	r3, #0
 80190f8:	bf18      	it	ne
 80190fa:	2301      	movne	r3, #1
 80190fc:	0692      	lsls	r2, r2, #26
 80190fe:	d42b      	bmi.n	8019158 <_printf_common+0xb0>
 8019100:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019104:	4641      	mov	r1, r8
 8019106:	4638      	mov	r0, r7
 8019108:	47c8      	blx	r9
 801910a:	3001      	adds	r0, #1
 801910c:	d01e      	beq.n	801914c <_printf_common+0xa4>
 801910e:	6823      	ldr	r3, [r4, #0]
 8019110:	6922      	ldr	r2, [r4, #16]
 8019112:	f003 0306 	and.w	r3, r3, #6
 8019116:	2b04      	cmp	r3, #4
 8019118:	bf02      	ittt	eq
 801911a:	68e5      	ldreq	r5, [r4, #12]
 801911c:	6833      	ldreq	r3, [r6, #0]
 801911e:	1aed      	subeq	r5, r5, r3
 8019120:	68a3      	ldr	r3, [r4, #8]
 8019122:	bf0c      	ite	eq
 8019124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019128:	2500      	movne	r5, #0
 801912a:	4293      	cmp	r3, r2
 801912c:	bfc4      	itt	gt
 801912e:	1a9b      	subgt	r3, r3, r2
 8019130:	18ed      	addgt	r5, r5, r3
 8019132:	2600      	movs	r6, #0
 8019134:	341a      	adds	r4, #26
 8019136:	42b5      	cmp	r5, r6
 8019138:	d11a      	bne.n	8019170 <_printf_common+0xc8>
 801913a:	2000      	movs	r0, #0
 801913c:	e008      	b.n	8019150 <_printf_common+0xa8>
 801913e:	2301      	movs	r3, #1
 8019140:	4652      	mov	r2, sl
 8019142:	4641      	mov	r1, r8
 8019144:	4638      	mov	r0, r7
 8019146:	47c8      	blx	r9
 8019148:	3001      	adds	r0, #1
 801914a:	d103      	bne.n	8019154 <_printf_common+0xac>
 801914c:	f04f 30ff 	mov.w	r0, #4294967295
 8019150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019154:	3501      	adds	r5, #1
 8019156:	e7c6      	b.n	80190e6 <_printf_common+0x3e>
 8019158:	18e1      	adds	r1, r4, r3
 801915a:	1c5a      	adds	r2, r3, #1
 801915c:	2030      	movs	r0, #48	@ 0x30
 801915e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019162:	4422      	add	r2, r4
 8019164:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019168:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801916c:	3302      	adds	r3, #2
 801916e:	e7c7      	b.n	8019100 <_printf_common+0x58>
 8019170:	2301      	movs	r3, #1
 8019172:	4622      	mov	r2, r4
 8019174:	4641      	mov	r1, r8
 8019176:	4638      	mov	r0, r7
 8019178:	47c8      	blx	r9
 801917a:	3001      	adds	r0, #1
 801917c:	d0e6      	beq.n	801914c <_printf_common+0xa4>
 801917e:	3601      	adds	r6, #1
 8019180:	e7d9      	b.n	8019136 <_printf_common+0x8e>
	...

08019184 <_printf_i>:
 8019184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019188:	7e0f      	ldrb	r7, [r1, #24]
 801918a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801918c:	2f78      	cmp	r7, #120	@ 0x78
 801918e:	4691      	mov	r9, r2
 8019190:	4680      	mov	r8, r0
 8019192:	460c      	mov	r4, r1
 8019194:	469a      	mov	sl, r3
 8019196:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801919a:	d807      	bhi.n	80191ac <_printf_i+0x28>
 801919c:	2f62      	cmp	r7, #98	@ 0x62
 801919e:	d80a      	bhi.n	80191b6 <_printf_i+0x32>
 80191a0:	2f00      	cmp	r7, #0
 80191a2:	f000 80d2 	beq.w	801934a <_printf_i+0x1c6>
 80191a6:	2f58      	cmp	r7, #88	@ 0x58
 80191a8:	f000 80b9 	beq.w	801931e <_printf_i+0x19a>
 80191ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80191b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80191b4:	e03a      	b.n	801922c <_printf_i+0xa8>
 80191b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80191ba:	2b15      	cmp	r3, #21
 80191bc:	d8f6      	bhi.n	80191ac <_printf_i+0x28>
 80191be:	a101      	add	r1, pc, #4	@ (adr r1, 80191c4 <_printf_i+0x40>)
 80191c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80191c4:	0801921d 	.word	0x0801921d
 80191c8:	08019231 	.word	0x08019231
 80191cc:	080191ad 	.word	0x080191ad
 80191d0:	080191ad 	.word	0x080191ad
 80191d4:	080191ad 	.word	0x080191ad
 80191d8:	080191ad 	.word	0x080191ad
 80191dc:	08019231 	.word	0x08019231
 80191e0:	080191ad 	.word	0x080191ad
 80191e4:	080191ad 	.word	0x080191ad
 80191e8:	080191ad 	.word	0x080191ad
 80191ec:	080191ad 	.word	0x080191ad
 80191f0:	08019331 	.word	0x08019331
 80191f4:	0801925b 	.word	0x0801925b
 80191f8:	080192eb 	.word	0x080192eb
 80191fc:	080191ad 	.word	0x080191ad
 8019200:	080191ad 	.word	0x080191ad
 8019204:	08019353 	.word	0x08019353
 8019208:	080191ad 	.word	0x080191ad
 801920c:	0801925b 	.word	0x0801925b
 8019210:	080191ad 	.word	0x080191ad
 8019214:	080191ad 	.word	0x080191ad
 8019218:	080192f3 	.word	0x080192f3
 801921c:	6833      	ldr	r3, [r6, #0]
 801921e:	1d1a      	adds	r2, r3, #4
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	6032      	str	r2, [r6, #0]
 8019224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019228:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801922c:	2301      	movs	r3, #1
 801922e:	e09d      	b.n	801936c <_printf_i+0x1e8>
 8019230:	6833      	ldr	r3, [r6, #0]
 8019232:	6820      	ldr	r0, [r4, #0]
 8019234:	1d19      	adds	r1, r3, #4
 8019236:	6031      	str	r1, [r6, #0]
 8019238:	0606      	lsls	r6, r0, #24
 801923a:	d501      	bpl.n	8019240 <_printf_i+0xbc>
 801923c:	681d      	ldr	r5, [r3, #0]
 801923e:	e003      	b.n	8019248 <_printf_i+0xc4>
 8019240:	0645      	lsls	r5, r0, #25
 8019242:	d5fb      	bpl.n	801923c <_printf_i+0xb8>
 8019244:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019248:	2d00      	cmp	r5, #0
 801924a:	da03      	bge.n	8019254 <_printf_i+0xd0>
 801924c:	232d      	movs	r3, #45	@ 0x2d
 801924e:	426d      	negs	r5, r5
 8019250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019254:	4859      	ldr	r0, [pc, #356]	@ (80193bc <_printf_i+0x238>)
 8019256:	230a      	movs	r3, #10
 8019258:	e011      	b.n	801927e <_printf_i+0xfa>
 801925a:	6821      	ldr	r1, [r4, #0]
 801925c:	6833      	ldr	r3, [r6, #0]
 801925e:	0608      	lsls	r0, r1, #24
 8019260:	f853 5b04 	ldr.w	r5, [r3], #4
 8019264:	d402      	bmi.n	801926c <_printf_i+0xe8>
 8019266:	0649      	lsls	r1, r1, #25
 8019268:	bf48      	it	mi
 801926a:	b2ad      	uxthmi	r5, r5
 801926c:	2f6f      	cmp	r7, #111	@ 0x6f
 801926e:	4853      	ldr	r0, [pc, #332]	@ (80193bc <_printf_i+0x238>)
 8019270:	6033      	str	r3, [r6, #0]
 8019272:	bf14      	ite	ne
 8019274:	230a      	movne	r3, #10
 8019276:	2308      	moveq	r3, #8
 8019278:	2100      	movs	r1, #0
 801927a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801927e:	6866      	ldr	r6, [r4, #4]
 8019280:	60a6      	str	r6, [r4, #8]
 8019282:	2e00      	cmp	r6, #0
 8019284:	bfa2      	ittt	ge
 8019286:	6821      	ldrge	r1, [r4, #0]
 8019288:	f021 0104 	bicge.w	r1, r1, #4
 801928c:	6021      	strge	r1, [r4, #0]
 801928e:	b90d      	cbnz	r5, 8019294 <_printf_i+0x110>
 8019290:	2e00      	cmp	r6, #0
 8019292:	d04b      	beq.n	801932c <_printf_i+0x1a8>
 8019294:	4616      	mov	r6, r2
 8019296:	fbb5 f1f3 	udiv	r1, r5, r3
 801929a:	fb03 5711 	mls	r7, r3, r1, r5
 801929e:	5dc7      	ldrb	r7, [r0, r7]
 80192a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80192a4:	462f      	mov	r7, r5
 80192a6:	42bb      	cmp	r3, r7
 80192a8:	460d      	mov	r5, r1
 80192aa:	d9f4      	bls.n	8019296 <_printf_i+0x112>
 80192ac:	2b08      	cmp	r3, #8
 80192ae:	d10b      	bne.n	80192c8 <_printf_i+0x144>
 80192b0:	6823      	ldr	r3, [r4, #0]
 80192b2:	07df      	lsls	r7, r3, #31
 80192b4:	d508      	bpl.n	80192c8 <_printf_i+0x144>
 80192b6:	6923      	ldr	r3, [r4, #16]
 80192b8:	6861      	ldr	r1, [r4, #4]
 80192ba:	4299      	cmp	r1, r3
 80192bc:	bfde      	ittt	le
 80192be:	2330      	movle	r3, #48	@ 0x30
 80192c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80192c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80192c8:	1b92      	subs	r2, r2, r6
 80192ca:	6122      	str	r2, [r4, #16]
 80192cc:	f8cd a000 	str.w	sl, [sp]
 80192d0:	464b      	mov	r3, r9
 80192d2:	aa03      	add	r2, sp, #12
 80192d4:	4621      	mov	r1, r4
 80192d6:	4640      	mov	r0, r8
 80192d8:	f7ff fee6 	bl	80190a8 <_printf_common>
 80192dc:	3001      	adds	r0, #1
 80192de:	d14a      	bne.n	8019376 <_printf_i+0x1f2>
 80192e0:	f04f 30ff 	mov.w	r0, #4294967295
 80192e4:	b004      	add	sp, #16
 80192e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192ea:	6823      	ldr	r3, [r4, #0]
 80192ec:	f043 0320 	orr.w	r3, r3, #32
 80192f0:	6023      	str	r3, [r4, #0]
 80192f2:	4833      	ldr	r0, [pc, #204]	@ (80193c0 <_printf_i+0x23c>)
 80192f4:	2778      	movs	r7, #120	@ 0x78
 80192f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80192fa:	6823      	ldr	r3, [r4, #0]
 80192fc:	6831      	ldr	r1, [r6, #0]
 80192fe:	061f      	lsls	r7, r3, #24
 8019300:	f851 5b04 	ldr.w	r5, [r1], #4
 8019304:	d402      	bmi.n	801930c <_printf_i+0x188>
 8019306:	065f      	lsls	r7, r3, #25
 8019308:	bf48      	it	mi
 801930a:	b2ad      	uxthmi	r5, r5
 801930c:	6031      	str	r1, [r6, #0]
 801930e:	07d9      	lsls	r1, r3, #31
 8019310:	bf44      	itt	mi
 8019312:	f043 0320 	orrmi.w	r3, r3, #32
 8019316:	6023      	strmi	r3, [r4, #0]
 8019318:	b11d      	cbz	r5, 8019322 <_printf_i+0x19e>
 801931a:	2310      	movs	r3, #16
 801931c:	e7ac      	b.n	8019278 <_printf_i+0xf4>
 801931e:	4827      	ldr	r0, [pc, #156]	@ (80193bc <_printf_i+0x238>)
 8019320:	e7e9      	b.n	80192f6 <_printf_i+0x172>
 8019322:	6823      	ldr	r3, [r4, #0]
 8019324:	f023 0320 	bic.w	r3, r3, #32
 8019328:	6023      	str	r3, [r4, #0]
 801932a:	e7f6      	b.n	801931a <_printf_i+0x196>
 801932c:	4616      	mov	r6, r2
 801932e:	e7bd      	b.n	80192ac <_printf_i+0x128>
 8019330:	6833      	ldr	r3, [r6, #0]
 8019332:	6825      	ldr	r5, [r4, #0]
 8019334:	6961      	ldr	r1, [r4, #20]
 8019336:	1d18      	adds	r0, r3, #4
 8019338:	6030      	str	r0, [r6, #0]
 801933a:	062e      	lsls	r6, r5, #24
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	d501      	bpl.n	8019344 <_printf_i+0x1c0>
 8019340:	6019      	str	r1, [r3, #0]
 8019342:	e002      	b.n	801934a <_printf_i+0x1c6>
 8019344:	0668      	lsls	r0, r5, #25
 8019346:	d5fb      	bpl.n	8019340 <_printf_i+0x1bc>
 8019348:	8019      	strh	r1, [r3, #0]
 801934a:	2300      	movs	r3, #0
 801934c:	6123      	str	r3, [r4, #16]
 801934e:	4616      	mov	r6, r2
 8019350:	e7bc      	b.n	80192cc <_printf_i+0x148>
 8019352:	6833      	ldr	r3, [r6, #0]
 8019354:	1d1a      	adds	r2, r3, #4
 8019356:	6032      	str	r2, [r6, #0]
 8019358:	681e      	ldr	r6, [r3, #0]
 801935a:	6862      	ldr	r2, [r4, #4]
 801935c:	2100      	movs	r1, #0
 801935e:	4630      	mov	r0, r6
 8019360:	f7e6 ffd6 	bl	8000310 <memchr>
 8019364:	b108      	cbz	r0, 801936a <_printf_i+0x1e6>
 8019366:	1b80      	subs	r0, r0, r6
 8019368:	6060      	str	r0, [r4, #4]
 801936a:	6863      	ldr	r3, [r4, #4]
 801936c:	6123      	str	r3, [r4, #16]
 801936e:	2300      	movs	r3, #0
 8019370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019374:	e7aa      	b.n	80192cc <_printf_i+0x148>
 8019376:	6923      	ldr	r3, [r4, #16]
 8019378:	4632      	mov	r2, r6
 801937a:	4649      	mov	r1, r9
 801937c:	4640      	mov	r0, r8
 801937e:	47d0      	blx	sl
 8019380:	3001      	adds	r0, #1
 8019382:	d0ad      	beq.n	80192e0 <_printf_i+0x15c>
 8019384:	6823      	ldr	r3, [r4, #0]
 8019386:	079b      	lsls	r3, r3, #30
 8019388:	d413      	bmi.n	80193b2 <_printf_i+0x22e>
 801938a:	68e0      	ldr	r0, [r4, #12]
 801938c:	9b03      	ldr	r3, [sp, #12]
 801938e:	4298      	cmp	r0, r3
 8019390:	bfb8      	it	lt
 8019392:	4618      	movlt	r0, r3
 8019394:	e7a6      	b.n	80192e4 <_printf_i+0x160>
 8019396:	2301      	movs	r3, #1
 8019398:	4632      	mov	r2, r6
 801939a:	4649      	mov	r1, r9
 801939c:	4640      	mov	r0, r8
 801939e:	47d0      	blx	sl
 80193a0:	3001      	adds	r0, #1
 80193a2:	d09d      	beq.n	80192e0 <_printf_i+0x15c>
 80193a4:	3501      	adds	r5, #1
 80193a6:	68e3      	ldr	r3, [r4, #12]
 80193a8:	9903      	ldr	r1, [sp, #12]
 80193aa:	1a5b      	subs	r3, r3, r1
 80193ac:	42ab      	cmp	r3, r5
 80193ae:	dcf2      	bgt.n	8019396 <_printf_i+0x212>
 80193b0:	e7eb      	b.n	801938a <_printf_i+0x206>
 80193b2:	2500      	movs	r5, #0
 80193b4:	f104 0619 	add.w	r6, r4, #25
 80193b8:	e7f5      	b.n	80193a6 <_printf_i+0x222>
 80193ba:	bf00      	nop
 80193bc:	08019dcd 	.word	0x08019dcd
 80193c0:	08019dde 	.word	0x08019dde

080193c4 <__swbuf_r>:
 80193c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193c6:	460e      	mov	r6, r1
 80193c8:	4614      	mov	r4, r2
 80193ca:	4605      	mov	r5, r0
 80193cc:	b118      	cbz	r0, 80193d6 <__swbuf_r+0x12>
 80193ce:	6a03      	ldr	r3, [r0, #32]
 80193d0:	b90b      	cbnz	r3, 80193d6 <__swbuf_r+0x12>
 80193d2:	f7fe f9ef 	bl	80177b4 <__sinit>
 80193d6:	69a3      	ldr	r3, [r4, #24]
 80193d8:	60a3      	str	r3, [r4, #8]
 80193da:	89a3      	ldrh	r3, [r4, #12]
 80193dc:	071a      	lsls	r2, r3, #28
 80193de:	d501      	bpl.n	80193e4 <__swbuf_r+0x20>
 80193e0:	6923      	ldr	r3, [r4, #16]
 80193e2:	b943      	cbnz	r3, 80193f6 <__swbuf_r+0x32>
 80193e4:	4621      	mov	r1, r4
 80193e6:	4628      	mov	r0, r5
 80193e8:	f000 f82a 	bl	8019440 <__swsetup_r>
 80193ec:	b118      	cbz	r0, 80193f6 <__swbuf_r+0x32>
 80193ee:	f04f 37ff 	mov.w	r7, #4294967295
 80193f2:	4638      	mov	r0, r7
 80193f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193f6:	6823      	ldr	r3, [r4, #0]
 80193f8:	6922      	ldr	r2, [r4, #16]
 80193fa:	1a98      	subs	r0, r3, r2
 80193fc:	6963      	ldr	r3, [r4, #20]
 80193fe:	b2f6      	uxtb	r6, r6
 8019400:	4283      	cmp	r3, r0
 8019402:	4637      	mov	r7, r6
 8019404:	dc05      	bgt.n	8019412 <__swbuf_r+0x4e>
 8019406:	4621      	mov	r1, r4
 8019408:	4628      	mov	r0, r5
 801940a:	f7ff fc81 	bl	8018d10 <_fflush_r>
 801940e:	2800      	cmp	r0, #0
 8019410:	d1ed      	bne.n	80193ee <__swbuf_r+0x2a>
 8019412:	68a3      	ldr	r3, [r4, #8]
 8019414:	3b01      	subs	r3, #1
 8019416:	60a3      	str	r3, [r4, #8]
 8019418:	6823      	ldr	r3, [r4, #0]
 801941a:	1c5a      	adds	r2, r3, #1
 801941c:	6022      	str	r2, [r4, #0]
 801941e:	701e      	strb	r6, [r3, #0]
 8019420:	6962      	ldr	r2, [r4, #20]
 8019422:	1c43      	adds	r3, r0, #1
 8019424:	429a      	cmp	r2, r3
 8019426:	d004      	beq.n	8019432 <__swbuf_r+0x6e>
 8019428:	89a3      	ldrh	r3, [r4, #12]
 801942a:	07db      	lsls	r3, r3, #31
 801942c:	d5e1      	bpl.n	80193f2 <__swbuf_r+0x2e>
 801942e:	2e0a      	cmp	r6, #10
 8019430:	d1df      	bne.n	80193f2 <__swbuf_r+0x2e>
 8019432:	4621      	mov	r1, r4
 8019434:	4628      	mov	r0, r5
 8019436:	f7ff fc6b 	bl	8018d10 <_fflush_r>
 801943a:	2800      	cmp	r0, #0
 801943c:	d0d9      	beq.n	80193f2 <__swbuf_r+0x2e>
 801943e:	e7d6      	b.n	80193ee <__swbuf_r+0x2a>

08019440 <__swsetup_r>:
 8019440:	b538      	push	{r3, r4, r5, lr}
 8019442:	4b29      	ldr	r3, [pc, #164]	@ (80194e8 <__swsetup_r+0xa8>)
 8019444:	4605      	mov	r5, r0
 8019446:	6818      	ldr	r0, [r3, #0]
 8019448:	460c      	mov	r4, r1
 801944a:	b118      	cbz	r0, 8019454 <__swsetup_r+0x14>
 801944c:	6a03      	ldr	r3, [r0, #32]
 801944e:	b90b      	cbnz	r3, 8019454 <__swsetup_r+0x14>
 8019450:	f7fe f9b0 	bl	80177b4 <__sinit>
 8019454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019458:	0719      	lsls	r1, r3, #28
 801945a:	d422      	bmi.n	80194a2 <__swsetup_r+0x62>
 801945c:	06da      	lsls	r2, r3, #27
 801945e:	d407      	bmi.n	8019470 <__swsetup_r+0x30>
 8019460:	2209      	movs	r2, #9
 8019462:	602a      	str	r2, [r5, #0]
 8019464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019468:	81a3      	strh	r3, [r4, #12]
 801946a:	f04f 30ff 	mov.w	r0, #4294967295
 801946e:	e033      	b.n	80194d8 <__swsetup_r+0x98>
 8019470:	0758      	lsls	r0, r3, #29
 8019472:	d512      	bpl.n	801949a <__swsetup_r+0x5a>
 8019474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019476:	b141      	cbz	r1, 801948a <__swsetup_r+0x4a>
 8019478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801947c:	4299      	cmp	r1, r3
 801947e:	d002      	beq.n	8019486 <__swsetup_r+0x46>
 8019480:	4628      	mov	r0, r5
 8019482:	f7fe fac1 	bl	8017a08 <_free_r>
 8019486:	2300      	movs	r3, #0
 8019488:	6363      	str	r3, [r4, #52]	@ 0x34
 801948a:	89a3      	ldrh	r3, [r4, #12]
 801948c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019490:	81a3      	strh	r3, [r4, #12]
 8019492:	2300      	movs	r3, #0
 8019494:	6063      	str	r3, [r4, #4]
 8019496:	6923      	ldr	r3, [r4, #16]
 8019498:	6023      	str	r3, [r4, #0]
 801949a:	89a3      	ldrh	r3, [r4, #12]
 801949c:	f043 0308 	orr.w	r3, r3, #8
 80194a0:	81a3      	strh	r3, [r4, #12]
 80194a2:	6923      	ldr	r3, [r4, #16]
 80194a4:	b94b      	cbnz	r3, 80194ba <__swsetup_r+0x7a>
 80194a6:	89a3      	ldrh	r3, [r4, #12]
 80194a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80194ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80194b0:	d003      	beq.n	80194ba <__swsetup_r+0x7a>
 80194b2:	4621      	mov	r1, r4
 80194b4:	4628      	mov	r0, r5
 80194b6:	f000 f883 	bl	80195c0 <__smakebuf_r>
 80194ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194be:	f013 0201 	ands.w	r2, r3, #1
 80194c2:	d00a      	beq.n	80194da <__swsetup_r+0x9a>
 80194c4:	2200      	movs	r2, #0
 80194c6:	60a2      	str	r2, [r4, #8]
 80194c8:	6962      	ldr	r2, [r4, #20]
 80194ca:	4252      	negs	r2, r2
 80194cc:	61a2      	str	r2, [r4, #24]
 80194ce:	6922      	ldr	r2, [r4, #16]
 80194d0:	b942      	cbnz	r2, 80194e4 <__swsetup_r+0xa4>
 80194d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80194d6:	d1c5      	bne.n	8019464 <__swsetup_r+0x24>
 80194d8:	bd38      	pop	{r3, r4, r5, pc}
 80194da:	0799      	lsls	r1, r3, #30
 80194dc:	bf58      	it	pl
 80194de:	6962      	ldrpl	r2, [r4, #20]
 80194e0:	60a2      	str	r2, [r4, #8]
 80194e2:	e7f4      	b.n	80194ce <__swsetup_r+0x8e>
 80194e4:	2000      	movs	r0, #0
 80194e6:	e7f7      	b.n	80194d8 <__swsetup_r+0x98>
 80194e8:	24000240 	.word	0x24000240

080194ec <_raise_r>:
 80194ec:	291f      	cmp	r1, #31
 80194ee:	b538      	push	{r3, r4, r5, lr}
 80194f0:	4605      	mov	r5, r0
 80194f2:	460c      	mov	r4, r1
 80194f4:	d904      	bls.n	8019500 <_raise_r+0x14>
 80194f6:	2316      	movs	r3, #22
 80194f8:	6003      	str	r3, [r0, #0]
 80194fa:	f04f 30ff 	mov.w	r0, #4294967295
 80194fe:	bd38      	pop	{r3, r4, r5, pc}
 8019500:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019502:	b112      	cbz	r2, 801950a <_raise_r+0x1e>
 8019504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019508:	b94b      	cbnz	r3, 801951e <_raise_r+0x32>
 801950a:	4628      	mov	r0, r5
 801950c:	f000 f830 	bl	8019570 <_getpid_r>
 8019510:	4622      	mov	r2, r4
 8019512:	4601      	mov	r1, r0
 8019514:	4628      	mov	r0, r5
 8019516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801951a:	f000 b817 	b.w	801954c <_kill_r>
 801951e:	2b01      	cmp	r3, #1
 8019520:	d00a      	beq.n	8019538 <_raise_r+0x4c>
 8019522:	1c59      	adds	r1, r3, #1
 8019524:	d103      	bne.n	801952e <_raise_r+0x42>
 8019526:	2316      	movs	r3, #22
 8019528:	6003      	str	r3, [r0, #0]
 801952a:	2001      	movs	r0, #1
 801952c:	e7e7      	b.n	80194fe <_raise_r+0x12>
 801952e:	2100      	movs	r1, #0
 8019530:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019534:	4620      	mov	r0, r4
 8019536:	4798      	blx	r3
 8019538:	2000      	movs	r0, #0
 801953a:	e7e0      	b.n	80194fe <_raise_r+0x12>

0801953c <raise>:
 801953c:	4b02      	ldr	r3, [pc, #8]	@ (8019548 <raise+0xc>)
 801953e:	4601      	mov	r1, r0
 8019540:	6818      	ldr	r0, [r3, #0]
 8019542:	f7ff bfd3 	b.w	80194ec <_raise_r>
 8019546:	bf00      	nop
 8019548:	24000240 	.word	0x24000240

0801954c <_kill_r>:
 801954c:	b538      	push	{r3, r4, r5, lr}
 801954e:	4d07      	ldr	r5, [pc, #28]	@ (801956c <_kill_r+0x20>)
 8019550:	2300      	movs	r3, #0
 8019552:	4604      	mov	r4, r0
 8019554:	4608      	mov	r0, r1
 8019556:	4611      	mov	r1, r2
 8019558:	602b      	str	r3, [r5, #0]
 801955a:	f7e9 fe99 	bl	8003290 <_kill>
 801955e:	1c43      	adds	r3, r0, #1
 8019560:	d102      	bne.n	8019568 <_kill_r+0x1c>
 8019562:	682b      	ldr	r3, [r5, #0]
 8019564:	b103      	cbz	r3, 8019568 <_kill_r+0x1c>
 8019566:	6023      	str	r3, [r4, #0]
 8019568:	bd38      	pop	{r3, r4, r5, pc}
 801956a:	bf00      	nop
 801956c:	24006824 	.word	0x24006824

08019570 <_getpid_r>:
 8019570:	f7e9 be86 	b.w	8003280 <_getpid>

08019574 <__swhatbuf_r>:
 8019574:	b570      	push	{r4, r5, r6, lr}
 8019576:	460c      	mov	r4, r1
 8019578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801957c:	2900      	cmp	r1, #0
 801957e:	b096      	sub	sp, #88	@ 0x58
 8019580:	4615      	mov	r5, r2
 8019582:	461e      	mov	r6, r3
 8019584:	da0d      	bge.n	80195a2 <__swhatbuf_r+0x2e>
 8019586:	89a3      	ldrh	r3, [r4, #12]
 8019588:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801958c:	f04f 0100 	mov.w	r1, #0
 8019590:	bf14      	ite	ne
 8019592:	2340      	movne	r3, #64	@ 0x40
 8019594:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019598:	2000      	movs	r0, #0
 801959a:	6031      	str	r1, [r6, #0]
 801959c:	602b      	str	r3, [r5, #0]
 801959e:	b016      	add	sp, #88	@ 0x58
 80195a0:	bd70      	pop	{r4, r5, r6, pc}
 80195a2:	466a      	mov	r2, sp
 80195a4:	f000 f848 	bl	8019638 <_fstat_r>
 80195a8:	2800      	cmp	r0, #0
 80195aa:	dbec      	blt.n	8019586 <__swhatbuf_r+0x12>
 80195ac:	9901      	ldr	r1, [sp, #4]
 80195ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80195b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80195b6:	4259      	negs	r1, r3
 80195b8:	4159      	adcs	r1, r3
 80195ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80195be:	e7eb      	b.n	8019598 <__swhatbuf_r+0x24>

080195c0 <__smakebuf_r>:
 80195c0:	898b      	ldrh	r3, [r1, #12]
 80195c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80195c4:	079d      	lsls	r5, r3, #30
 80195c6:	4606      	mov	r6, r0
 80195c8:	460c      	mov	r4, r1
 80195ca:	d507      	bpl.n	80195dc <__smakebuf_r+0x1c>
 80195cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80195d0:	6023      	str	r3, [r4, #0]
 80195d2:	6123      	str	r3, [r4, #16]
 80195d4:	2301      	movs	r3, #1
 80195d6:	6163      	str	r3, [r4, #20]
 80195d8:	b003      	add	sp, #12
 80195da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195dc:	ab01      	add	r3, sp, #4
 80195de:	466a      	mov	r2, sp
 80195e0:	f7ff ffc8 	bl	8019574 <__swhatbuf_r>
 80195e4:	9f00      	ldr	r7, [sp, #0]
 80195e6:	4605      	mov	r5, r0
 80195e8:	4639      	mov	r1, r7
 80195ea:	4630      	mov	r0, r6
 80195ec:	f7fe fdb2 	bl	8018154 <_malloc_r>
 80195f0:	b948      	cbnz	r0, 8019606 <__smakebuf_r+0x46>
 80195f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195f6:	059a      	lsls	r2, r3, #22
 80195f8:	d4ee      	bmi.n	80195d8 <__smakebuf_r+0x18>
 80195fa:	f023 0303 	bic.w	r3, r3, #3
 80195fe:	f043 0302 	orr.w	r3, r3, #2
 8019602:	81a3      	strh	r3, [r4, #12]
 8019604:	e7e2      	b.n	80195cc <__smakebuf_r+0xc>
 8019606:	89a3      	ldrh	r3, [r4, #12]
 8019608:	6020      	str	r0, [r4, #0]
 801960a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801960e:	81a3      	strh	r3, [r4, #12]
 8019610:	9b01      	ldr	r3, [sp, #4]
 8019612:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019616:	b15b      	cbz	r3, 8019630 <__smakebuf_r+0x70>
 8019618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801961c:	4630      	mov	r0, r6
 801961e:	f000 f81d 	bl	801965c <_isatty_r>
 8019622:	b128      	cbz	r0, 8019630 <__smakebuf_r+0x70>
 8019624:	89a3      	ldrh	r3, [r4, #12]
 8019626:	f023 0303 	bic.w	r3, r3, #3
 801962a:	f043 0301 	orr.w	r3, r3, #1
 801962e:	81a3      	strh	r3, [r4, #12]
 8019630:	89a3      	ldrh	r3, [r4, #12]
 8019632:	431d      	orrs	r5, r3
 8019634:	81a5      	strh	r5, [r4, #12]
 8019636:	e7cf      	b.n	80195d8 <__smakebuf_r+0x18>

08019638 <_fstat_r>:
 8019638:	b538      	push	{r3, r4, r5, lr}
 801963a:	4d07      	ldr	r5, [pc, #28]	@ (8019658 <_fstat_r+0x20>)
 801963c:	2300      	movs	r3, #0
 801963e:	4604      	mov	r4, r0
 8019640:	4608      	mov	r0, r1
 8019642:	4611      	mov	r1, r2
 8019644:	602b      	str	r3, [r5, #0]
 8019646:	f7e9 fe83 	bl	8003350 <_fstat>
 801964a:	1c43      	adds	r3, r0, #1
 801964c:	d102      	bne.n	8019654 <_fstat_r+0x1c>
 801964e:	682b      	ldr	r3, [r5, #0]
 8019650:	b103      	cbz	r3, 8019654 <_fstat_r+0x1c>
 8019652:	6023      	str	r3, [r4, #0]
 8019654:	bd38      	pop	{r3, r4, r5, pc}
 8019656:	bf00      	nop
 8019658:	24006824 	.word	0x24006824

0801965c <_isatty_r>:
 801965c:	b538      	push	{r3, r4, r5, lr}
 801965e:	4d06      	ldr	r5, [pc, #24]	@ (8019678 <_isatty_r+0x1c>)
 8019660:	2300      	movs	r3, #0
 8019662:	4604      	mov	r4, r0
 8019664:	4608      	mov	r0, r1
 8019666:	602b      	str	r3, [r5, #0]
 8019668:	f7e9 fe82 	bl	8003370 <_isatty>
 801966c:	1c43      	adds	r3, r0, #1
 801966e:	d102      	bne.n	8019676 <_isatty_r+0x1a>
 8019670:	682b      	ldr	r3, [r5, #0]
 8019672:	b103      	cbz	r3, 8019676 <_isatty_r+0x1a>
 8019674:	6023      	str	r3, [r4, #0]
 8019676:	bd38      	pop	{r3, r4, r5, pc}
 8019678:	24006824 	.word	0x24006824
 801967c:	00000000 	.word	0x00000000

08019680 <log>:
 8019680:	b4f0      	push	{r4, r5, r6, r7}
 8019682:	ee10 0a90 	vmov	r0, s1
 8019686:	ee10 3a10 	vmov	r3, s0
 801968a:	f04f 34ff 	mov.w	r4, #4294967295
 801968e:	429c      	cmp	r4, r3
 8019690:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8019694:	4c70      	ldr	r4, [pc, #448]	@ (8019858 <log+0x1d8>)
 8019696:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 801969a:	418c      	sbcs	r4, r1
 801969c:	ed2d 8b02 	vpush	{d8}
 80196a0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80196a4:	d35a      	bcc.n	801975c <log+0xdc>
 80196a6:	4a6d      	ldr	r2, [pc, #436]	@ (801985c <log+0x1dc>)
 80196a8:	4290      	cmp	r0, r2
 80196aa:	bf08      	it	eq
 80196ac:	2b00      	cmpeq	r3, #0
 80196ae:	f000 80c4 	beq.w	801983a <log+0x1ba>
 80196b2:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80196b6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80196ba:	4b69      	ldr	r3, [pc, #420]	@ (8019860 <log+0x1e0>)
 80196bc:	ee20 2b00 	vmul.f64	d2, d0, d0
 80196c0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80196c4:	ee20 4b02 	vmul.f64	d4, d0, d2
 80196c8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80196cc:	eea6 7b00 	vfma.f64	d7, d6, d0
 80196d0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80196d4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80196d8:	eea6 7b02 	vfma.f64	d7, d6, d2
 80196dc:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80196e0:	eea5 6b00 	vfma.f64	d6, d5, d0
 80196e4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80196e8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80196ec:	eea5 6b02 	vfma.f64	d6, d5, d2
 80196f0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80196f4:	eea3 5b00 	vfma.f64	d5, d3, d0
 80196f8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80196fc:	eea3 5b02 	vfma.f64	d5, d3, d2
 8019700:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8019704:	eea3 5b04 	vfma.f64	d5, d3, d4
 8019708:	eea5 6b04 	vfma.f64	d6, d5, d4
 801970c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8019710:	eea6 7b04 	vfma.f64	d7, d6, d4
 8019714:	eeb0 2b47 	vmov.f64	d2, d7
 8019718:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8019840 <log+0x1c0>
 801971c:	eeb0 6b40 	vmov.f64	d6, d0
 8019720:	eeb0 3b40 	vmov.f64	d3, d0
 8019724:	eea0 6b07 	vfma.f64	d6, d0, d7
 8019728:	eea0 6b47 	vfms.f64	d6, d0, d7
 801972c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8019730:	ee26 1b06 	vmul.f64	d1, d6, d6
 8019734:	eea1 3b05 	vfma.f64	d3, d1, d5
 8019738:	ee30 7b43 	vsub.f64	d7, d0, d3
 801973c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8019740:	eea1 7b05 	vfma.f64	d7, d1, d5
 8019744:	ee25 5b08 	vmul.f64	d5, d5, d8
 8019748:	eea5 7b00 	vfma.f64	d7, d5, d0
 801974c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8019750:	ee33 0b07 	vadd.f64	d0, d3, d7
 8019754:	ecbd 8b02 	vpop	{d8}
 8019758:	bcf0      	pop	{r4, r5, r6, r7}
 801975a:	4770      	bx	lr
 801975c:	f1a2 0410 	sub.w	r4, r2, #16
 8019760:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8019764:	428c      	cmp	r4, r1
 8019766:	d923      	bls.n	80197b0 <log+0x130>
 8019768:	18d9      	adds	r1, r3, r3
 801976a:	eb40 0400 	adc.w	r4, r0, r0
 801976e:	4321      	orrs	r1, r4
 8019770:	d105      	bne.n	801977e <log+0xfe>
 8019772:	ecbd 8b02 	vpop	{d8}
 8019776:	2001      	movs	r0, #1
 8019778:	bcf0      	pop	{r4, r5, r6, r7}
 801977a:	f000 b885 	b.w	8019888 <__math_divzero>
 801977e:	4939      	ldr	r1, [pc, #228]	@ (8019864 <log+0x1e4>)
 8019780:	4288      	cmp	r0, r1
 8019782:	bf08      	it	eq
 8019784:	2b00      	cmpeq	r3, #0
 8019786:	d0e5      	beq.n	8019754 <log+0xd4>
 8019788:	0413      	lsls	r3, r2, #16
 801978a:	d403      	bmi.n	8019794 <log+0x114>
 801978c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8019790:	4393      	bics	r3, r2
 8019792:	d104      	bne.n	801979e <log+0x11e>
 8019794:	ecbd 8b02 	vpop	{d8}
 8019798:	bcf0      	pop	{r4, r5, r6, r7}
 801979a:	f000 b88d 	b.w	80198b8 <__math_invalid>
 801979e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019848 <log+0x1c8>
 80197a2:	ee20 7b07 	vmul.f64	d7, d0, d7
 80197a6:	ec53 2b17 	vmov	r2, r3, d7
 80197aa:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 80197ae:	4613      	mov	r3, r2
 80197b0:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 80197b4:	492a      	ldr	r1, [pc, #168]	@ (8019860 <log+0x1e0>)
 80197b6:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 80197ba:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 80197be:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80197c2:	0d15      	lsrs	r5, r2, #20
 80197c4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 80197c8:	052d      	lsls	r5, r5, #20
 80197ca:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 80197ce:	1e1e      	subs	r6, r3, #0
 80197d0:	1b47      	subs	r7, r0, r5
 80197d2:	ec47 6b16 	vmov	d6, r6, r7
 80197d6:	1512      	asrs	r2, r2, #20
 80197d8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80197dc:	ee07 2a90 	vmov	s15, r2
 80197e0:	ee25 2b05 	vmul.f64	d2, d5, d5
 80197e4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80197e8:	ed91 4b00 	vldr	d4, [r1]
 80197ec:	ee25 1b02 	vmul.f64	d1, d5, d2
 80197f0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 80197f4:	eea4 7b06 	vfma.f64	d7, d4, d6
 80197f8:	ee35 4b07 	vadd.f64	d4, d5, d7
 80197fc:	ee37 0b44 	vsub.f64	d0, d7, d4
 8019800:	ed91 7b02 	vldr	d7, [r1, #8]
 8019804:	ee30 0b05 	vadd.f64	d0, d0, d5
 8019808:	eea7 0b06 	vfma.f64	d0, d7, d6
 801980c:	ed91 7b04 	vldr	d7, [r1, #16]
 8019810:	ed91 6b08 	vldr	d6, [r1, #32]
 8019814:	eea7 0b02 	vfma.f64	d0, d7, d2
 8019818:	ed91 7b06 	vldr	d7, [r1, #24]
 801981c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8019820:	eea6 7b05 	vfma.f64	d7, d6, d5
 8019824:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8019828:	eea3 6b05 	vfma.f64	d6, d3, d5
 801982c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8019830:	eea1 0b07 	vfma.f64	d0, d1, d7
 8019834:	ee30 0b04 	vadd.f64	d0, d0, d4
 8019838:	e78c      	b.n	8019754 <log+0xd4>
 801983a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8019850 <log+0x1d0>
 801983e:	e789      	b.n	8019754 <log+0xd4>
 8019840:	00000000 	.word	0x00000000
 8019844:	41a00000 	.word	0x41a00000
 8019848:	00000000 	.word	0x00000000
 801984c:	43300000 	.word	0x43300000
	...
 8019858:	000308ff 	.word	0x000308ff
 801985c:	3ff00000 	.word	0x3ff00000
 8019860:	08019df0 	.word	0x08019df0
 8019864:	7ff00000 	.word	0x7ff00000

08019868 <with_errno>:
 8019868:	b510      	push	{r4, lr}
 801986a:	ed2d 8b02 	vpush	{d8}
 801986e:	eeb0 8b40 	vmov.f64	d8, d0
 8019872:	4604      	mov	r4, r0
 8019874:	f7fe f884 	bl	8017980 <__errno>
 8019878:	eeb0 0b48 	vmov.f64	d0, d8
 801987c:	ecbd 8b02 	vpop	{d8}
 8019880:	6004      	str	r4, [r0, #0]
 8019882:	bd10      	pop	{r4, pc}
 8019884:	0000      	movs	r0, r0
	...

08019888 <__math_divzero>:
 8019888:	b082      	sub	sp, #8
 801988a:	2800      	cmp	r0, #0
 801988c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8019890:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8019894:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8019898:	ed8d 7b00 	vstr	d7, [sp]
 801989c:	ed9d 0b00 	vldr	d0, [sp]
 80198a0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80198b0 <__math_divzero+0x28>
 80198a4:	2022      	movs	r0, #34	@ 0x22
 80198a6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80198aa:	b002      	add	sp, #8
 80198ac:	f7ff bfdc 	b.w	8019868 <with_errno>
	...

080198b8 <__math_invalid>:
 80198b8:	eeb0 7b40 	vmov.f64	d7, d0
 80198bc:	eeb4 7b47 	vcmp.f64	d7, d7
 80198c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198c4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80198c8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80198cc:	d602      	bvs.n	80198d4 <__math_invalid+0x1c>
 80198ce:	2021      	movs	r0, #33	@ 0x21
 80198d0:	f7ff bfca 	b.w	8019868 <with_errno>
 80198d4:	4770      	bx	lr
	...

080198d8 <_init>:
 80198d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198da:	bf00      	nop
 80198dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198de:	bc08      	pop	{r3}
 80198e0:	469e      	mov	lr, r3
 80198e2:	4770      	bx	lr

080198e4 <_fini>:
 80198e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198e6:	bf00      	nop
 80198e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198ea:	bc08      	pop	{r3}
 80198ec:	469e      	mov	lr, r3
 80198ee:	4770      	bx	lr
